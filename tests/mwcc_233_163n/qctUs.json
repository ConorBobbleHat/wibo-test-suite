{"compiler": "mwcc_233_163n", "compiler_flags": "-O4,p -nodefaults -proc gekko -fp hard -Cpp_exceptions off -enum int -fp_contract on -inline auto -DMUST_MATCH -DWIP", "source_code": "void ftMaterial_800BFB4C(ftCo_GObj* gobj, GXColor* diffuse)\n{\n    HSD_JObj* cur = GET_JOBJ((HSD_GObj*) gobj);\n\n    while (cur != NULL) {\n        HSD_DObj* dobj = HSD_JObjGetDObj(cur);\n        while (dobj != NULL) {\n            HSD_MObj* mobj = dobj != NULL ? dobj->mobj : NULL;\n            if (mobj != NULL) {\n                if (mobj->mat != NULL) {\n                    HSD_Material* mat = mobj->mat;\n                    mat->diffuse = *diffuse;\n                }\n            }\n            dobj = dobj != NULL ? dobj->next : NULL;\n        }\n        if (!(HSD_JObjGetFlags(cur) & JOBJ_INSTANCE)) {\n            HSD_JObj* child;\n            if (cur == NULL) {\n                child = NULL;\n            } else {\n                child = cur->child;\n            }\n            if (child != NULL) {\n                HSD_JObj* child;\n                if (cur == NULL) {\n                    child = NULL;\n                } else {\n                    child = cur->child;\n                }\n                cur = child;\n                continue;\n            }\n        }\n        {\n            HSD_JObj* next;\n            if (cur == NULL) {\n                next = NULL;\n            } else {\n                next = cur->next;\n            }\n            if (next != NULL) {\n                HSD_JObj* next;\n                if (cur == NULL) {\n                    next = NULL;\n                } else {\n                    next = cur->next;\n                }\n                cur = next;\n            } else {\n                while (true) {\n                    HSD_JObj* parent;\n                    if (cur == NULL) {\n                        parent = NULL;\n                    } else {\n                        parent = cur->parent;\n                    }\n                    if (parent == NULL) {\n                        cur = NULL;\n                    } else {\n                        HSD_JObj* parent;\n                        if (cur == NULL) {\n                            parent = NULL;\n                        } else {\n                            parent = cur->parent;\n                        }\n                        {\n                            HSD_JObj* next;\n                            if (parent == NULL) {\n                                next = NULL;\n                            } else {\n                                next = parent->next;\n                            }\n                            if (next != NULL) {\n                                HSD_JObj* parent;\n                                if (cur == NULL) {\n                                    parent = NULL;\n                                } else {\n                                    parent = cur->parent;\n                                }\n                                {\n                                    HSD_JObj* next;\n                                    if (parent == NULL) {\n                                        next = NULL;\n                                    } else {\n                                        next = parent->next;\n                                    }\n                                    cur = next;\n                                }\n                            } else {\n                                HSD_JObj* parent;\n                                if (cur == NULL) {\n                                    parent = NULL;\n                                } else {\n                                    parent = cur->parent;\n                                }\n                                cur = parent;\n                                continue;\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n    }\n}\n\n", "context": "#define MSL_PPC_EABI_CRITICAL_REGIONS_GAMECUBE_H\n#define RUNTIME_PLATFORM_H\n#define MWERKS_GNUC\n/// @file\n/// @todo Assumes @c __PPCGEKKO__.\n#define STDBOOL_H\n/// A signed integer used to contain boolean values\n/// @todo Maybe some versions of MetroWerks support @c _Bool?\ntypedef int bool;\n/// #bool true\n/// @todo Make this and #false part of an @c enum. Fake usages, such as\n/// assigning to a @c u32, will need to be addressed.\n#define true 1\n/// #bool false\n#define false 0\n/// @file\n/// @todo Assumes @c __PPCGEKKO__.\n#define __STDDEF_H__\ntypedef unsigned short wchar_t;\ntypedef signed int ssize_t;\n/// @deprecated Use #usize_t.\ntypedef unsigned long size_t;\n/// @todo Rename to @c size_t when #size_t is deleted.\ntypedef unsigned int usize_t;\ntypedef signed int intptr_t;\ntypedef unsigned int uintptr_t;\n/// A null pointer\n#define NULL ((any_t) 0)\n/// A signed 8-bit integer\ntypedef signed char s8;\n/// A signed 16-bit integer\ntypedef signed short s16;\n/// A signed 32-bit integer\ntypedef signed long s32;\n/// A signed 64-bit integer\ntypedef signed long long s64;\n/// An unsigned 8-bit integer\ntypedef unsigned char u8;\n/// An unsigned 16-bit integer\ntypedef unsigned short u16;\n/// An unsigned 32-bit integer\ntypedef unsigned long u32;\n/// An unsigned 64-bit integer\ntypedef unsigned long long u64;\n/// An unsigned integer of platform-dependent size\ntypedef unsigned int uint;\n/// A volatile, unsigned 8-bit integer\ntypedef volatile u8 vu8;\n/// A volatile, unsigned 16-bit integer\ntypedef volatile u16 vu16;\n/// A volatile, unsigned 32-bit integer\ntypedef volatile u32 vu32;\n/// A volatile, unsigned 64-bit integer\ntypedef volatile u64 vu64;\n/// A volatile, signed 8-bit integer\ntypedef volatile s8 vs8;\n/// A volatile, signed 16-bit integer\ntypedef volatile s16 vs16;\n/// A volatile, signed 32-bit integer\ntypedef volatile s32 vs32;\n/// A volatile, signed 64-bit integer\ntypedef volatile s64 vs64;\n/// A 32-bit floating-point number\ntypedef float f32;\n/// A 64-bit floating-point number\ntypedef double f64;\n/// A volatile 32-bit floating-point number\ntypedef volatile f32 vf32;\n/// A volatile 64-bit floating-point number\ntypedef volatile f64 vf64;\n/// The underlying type of an @c enum, used as a placeholder\ntypedef int enum_t;\n/// A pointer to an unknown type\ntypedef void* unk_t;\n/// A pointer to an unspecified type, used for polymorphic data\ntypedef void* any_t;\n/// A @c void callback with no arguments.\ntypedef void (*Event)(void);\n#define ATTRIBUTE_ALIGN(num) __attribute__((aligned(num)))\n#define SECTION_INIT\n#define ATTRIBUTE_NORETURN\n#define ATTRIBUTE_RESTRICT\n#define ATTRIBUTE_USED\n#define AT_ADDRESS(x)\n#define U8_MAX 0xFF\n#define U16_MAX 0xFFFF\n#define U32_MAX 0xFFFFFFFF\n#define S8_MAX 0x7F\n#define S16_MAX 0x7FFF\n#define S32_MAX 0x7FFFFFFF\n#define F32_MAX 3.4028235e38f\n#define SQ(x) ((x) * (x))\n#define MIN(a, b) (((a) > (b)) ? (b) : (a))\n#define MAX(a, b) (((a) > (b)) ? (a) : (b))\n#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))\n#define RETURN_IF(cond) if ((cond)) { return; }\nvoid __kill_critical_regions(void);\n#define MSL_ABORT_EXIT_H\nvoid exit(int code);\n#define _BUFFER_IO_H_\ntypedef struct _BufferIoUnkFlagStruct {\n    /* 0x00 */ struct {\n        u8 b0 : 1;\n        u8 b1 : 1;\n        u8 b2 : 1;\n        u8 b3 : 1;\n        u8 b4 : 1;\n        u8 b5 : 1;\n        u8 b6 : 1;\n        u8 b7 : 1;\n    } bits;\n} BufferIoUnkFlagStruct;\ntypedef struct _BufferIoUnkStruct {\n    /* 0x00 */ s32 x00;\n    /* 0x04 */ BufferIoUnkFlagStruct x04;\n    /* 0x05 */ BufferIoUnkFlagStruct x05;\n    /* 0x06 */ BufferIoUnkFlagStruct x06;\n    /* 0x07 */ BufferIoUnkFlagStruct x07;\n    /* 0x08 */ s32 x08_filler[3];\n    /* 0x14 */ s32 x14;\n    /* 0x18 */ s32 x18;\n    /* 0x1C */ s32 x1C;\n    /* 0x20 */ s32 x20;\n    /* 0x24 */ s32 x24;\n    /* 0x28 */ s32 x28;\n    /* 0x2C */ s32 x2C_filler;\n    /* 0x30 */ s32 x30;\n    /* 0x34 */ s32 x34_filler[2];\n    /* 0x3C */ s32 (*x3C)(s32 x3C_arg0, s32 x3C_arg1, s32* x3C_arg2,\n                          s32 x3C_arg3);\n    /* 0x40 */ s32 x40_filler;\n    /* 0x44 */ s32 x44;\n} BufferIoUnkStruct;\nvoid __prep_buffer(BufferIoUnkStruct* arg0);\ns32 __flush_buffer(BufferIoUnkStruct* arg0, s32* arg1);\n#define MSL_CONSOLE_IO_H\ns32 MSL_ConsoleIo_80325F18(void);\ns32 __write_console(s32, s32 arg1, s32* arg2);\nu8 __read_console(u32, u8* buf, u32* n);\n#define MSL_CTYPE_H\nint toupper(int c);\nint tolower(int c);\n#define MSL_MATH_H\n#define MSL_HI(x) *(int*) &x\n#define MSL_LO(x) *(1 + (int*) &x)\ndouble frexp(double x, int* exponent);\ndouble fabsf__Ff(double);\nfloat tanf(float x);\nfloat cos__Ff(float x);\nfloat sin__Ff(float x);\nfloat cosf(float x);\nfloat sinf(float x);\nvoid __sinit_trigf_c(void);\nfloat logf(float);\n#define _RAND_H_\nvoid srand(unsigned int seed);\nint rand(void);\n#define MSL_STRING_H\nchar* strncpy(char* dst, const char* src,\n              unsigned long n);\nint __StringRead(void* isc, int ch, int Action);\nchar* strchr(const char* str, int chr);\nint strncmp(const char* str1, const char* str2, unsigned long n);\nint strcmp(const char* str1, const char* str2);\nchar* strcpy(char* dst, const char* src);\nsize_t strlen(const char* s);\n#define MSL_TRIGF_H\nf32 tanf(f32);\nf32 cosf(f32);\nf32 sinf(f32);\n#define _WCHAR_IO_H_\n/// @file\n/// @todo Delete this.\n#define _common_structs_h_\n#define DOLPHIN_GX_TYPES_H\n#define DOLPHIN_GX_FORWARD_H\n#define DOLPHIN_GXENUM_H\ntypedef u8 GXBool;\n#define GX_FALSE ((GXBool) 0)\n#define GX_TRUE ((GXBool) 1)\n#define GX_ENABLE ((GXBool) 1)\n#define GX_DISABLE ((GXBool) 0)\ntypedef enum {\n    GX_PERSPECTIVE,\n    GX_ORTHOGRAPHIC,\n} GXProjectionType;\ntypedef enum {\n    GX_NEVER,\n    GX_LESS,\n    GX_EQUAL,\n    GX_LEQUAL,\n    GX_GREATER,\n    GX_NEQUAL,\n    GX_GEQUAL,\n    GX_ALWAYS,\n} GXCompare;\ntypedef enum {\n    GX_AOP_AND,\n    GX_AOP_OR,\n    GX_AOP_XOR,\n    GX_AOP_XNOR,\n    GX_MAX_ALPHAOP,\n} GXAlphaOp;\ntypedef enum {\n    GX_ZC_LINEAR,\n    GX_ZC_NEAR,\n    GX_ZC_MID,\n    GX_ZC_FAR,\n} GXZFmt16;\ntypedef enum {\n    GX_GM_1_0,\n    GX_GM_1_7,\n    GX_GM_2_2,\n} GXGamma;\ntypedef enum {\n    GX_PF_RGB8_Z24,\n    GX_PF_RGBA6_Z24,\n    GX_PF_RGB565_Z16,\n    GX_PF_Z24,\n    GX_PF_Y8,\n    GX_PF_U8,\n    GX_PF_V8,\n    GX_PF_YUV420,\n} GXPixelFmt;\ntypedef enum {\n    GX_QUADS = 0x80,\n    GX_TRIANGLES = 0x90,\n    GX_TRIANGLESTRIP = 0x98,\n    GX_TRIANGLEFAN = 0xA0,\n    GX_LINES = 0xA8,\n    GX_LINESTRIP = 0xB0,\n    GX_POINTS = 0xB8,\n} GXPrimitive;\ntypedef enum {\n    GX_VTXFMT0,\n    GX_VTXFMT1,\n    GX_VTXFMT2,\n    GX_VTXFMT3,\n    GX_VTXFMT4,\n    GX_VTXFMT5,\n    GX_VTXFMT6,\n    GX_VTXFMT7,\n    GX_MAX_VTXFMT,\n} GXVtxFmt;\ntypedef enum GXAttr {\n    GX_VA_PNMTXIDX,\n    GX_VA_TEX0MTXIDX,\n    GX_VA_TEX1MTXIDX,\n    GX_VA_TEX2MTXIDX,\n    GX_VA_TEX3MTXIDX,\n    GX_VA_TEX4MTXIDX,\n    GX_VA_TEX5MTXIDX,\n    GX_VA_TEX6MTXIDX,\n    GX_VA_TEX7MTXIDX,\n    GX_VA_POS,\n    GX_VA_NRM,\n    GX_VA_CLR0,\n    GX_VA_CLR1,\n    GX_VA_TEX0,\n    GX_VA_TEX1,\n    GX_VA_TEX2,\n    GX_VA_TEX3,\n    GX_VA_TEX4,\n    GX_VA_TEX5,\n    GX_VA_TEX6,\n    GX_VA_TEX7,\n    GX_POS_MTX_ARRAY,\n    GX_NRM_MTX_ARRAY,\n    GX_TEX_MTX_ARRAY,\n    GX_LIGHT_ARRAY,\n    GX_VA_NBT,\n    GX_VA_MAX_ATTR,\n    GX_VA_NULL = 0xFF,\n} GXAttr;\ntypedef enum GXAttrType {\n    GX_NONE,\n    GX_DIRECT,\n    GX_INDEX8,\n    GX_INDEX16,\n} GXAttrType;\n#define _GX_TF_CTF 0x20\n#define _GX_TF_ZTF 0x10\ntypedef enum {\n    GX_TF_I4 = 0x0,\n    GX_TF_I8 = 0x1,\n    GX_TF_IA4 = 0x2,\n    GX_TF_IA8 = 0x3,\n    GX_TF_RGB565 = 0x4,\n    GX_TF_RGB5A3 = 0x5,\n    GX_TF_RGBA8 = 0x6,\n    GX_TF_CMPR = 0xE,\n    GX_CTF_R4 = 0x0 | 0x20,\n    GX_CTF_RA4 = 0x2 | 0x20,\n    GX_CTF_RA8 = 0x3 | 0x20,\n    GX_CTF_YUVA8 = 0x6 | 0x20,\n    GX_CTF_A8 = 0x7 | 0x20,\n    GX_CTF_R8 = 0x8 | 0x20,\n    GX_CTF_G8 = 0x9 | 0x20,\n    GX_CTF_B8 = 0xA | 0x20,\n    GX_CTF_RG8 = 0xB | 0x20,\n    GX_CTF_GB8 = 0xC | 0x20,\n    GX_TF_Z8 = 0x1 | 0x10,\n    GX_TF_Z16 = 0x3 | 0x10,\n    GX_TF_Z24X8 = 0x6 | 0x10,\n    GX_CTF_Z4 = 0x0 | 0x10 | 0x20,\n    GX_CTF_Z8M = 0x9 | 0x10 | 0x20,\n    GX_CTF_Z8L = 0xA | 0x10 | 0x20,\n    GX_CTF_Z16L = 0xC | 0x10 | 0x20,\n    GX_TF_A8 = GX_CTF_A8,\n} GXTexFmt;\ntypedef enum {\n    GX_CLAMP,\n    GX_REPEAT,\n    GX_MIRROR,\n    GX_MAX_TEXWRAPMODE,\n} GXTexWrapMode;\ntypedef enum {\n    GX_NEAR,\n    GX_LINEAR,\n    GX_NEAR_MIP_NEAR,\n    GX_LIN_MIP_NEAR,\n    GX_NEAR_MIP_LIN,\n    GX_LIN_MIP_LIN,\n} GXTexFilter;\ntypedef enum {\n    GX_ANISO_1,\n    GX_ANISO_2,\n    GX_ANISO_4,\n    GX_MAX_ANISOTROPY,\n} GXAnisotropy;\ntypedef enum {\n    GX_TEXMAP0,\n    GX_TEXMAP1,\n    GX_TEXMAP2,\n    GX_TEXMAP3,\n    GX_TEXMAP4,\n    GX_TEXMAP5,\n    GX_TEXMAP6,\n    GX_TEXMAP7,\n    GX_MAX_TEXMAP,\n    GX_TEXMAP_NULL = 0xFF,\n    GX_TEX_DISABLE = 0x100,\n} GXTexMapID;\ntypedef enum {\n    GX_TEXCOORD0,\n    GX_TEXCOORD1,\n    GX_TEXCOORD2,\n    GX_TEXCOORD3,\n    GX_TEXCOORD4,\n    GX_TEXCOORD5,\n    GX_TEXCOORD6,\n    GX_TEXCOORD7,\n    GX_MAX_TEXCOORD,\n    GX_TEXCOORD_NULL = 0xFF,\n} GXTexCoordID;\ntypedef enum {\n    GX_TEVSTAGE0,\n    GX_TEVSTAGE1,\n    GX_TEVSTAGE2,\n    GX_TEVSTAGE3,\n    GX_TEVSTAGE4,\n    GX_TEVSTAGE5,\n    GX_TEVSTAGE6,\n    GX_TEVSTAGE7,\n    GX_TEVSTAGE8,\n    GX_TEVSTAGE9,\n    GX_TEVSTAGE10,\n    GX_TEVSTAGE11,\n    GX_TEVSTAGE12,\n    GX_TEVSTAGE13,\n    GX_TEVSTAGE14,\n    GX_TEVSTAGE15,\n    GX_MAX_TEVSTAGE,\n} GXTevStageID;\ntypedef enum {\n    GX_MODULATE,\n    GX_DECAL,\n    GX_BLEND,\n    GX_REPLACE,\n    GX_PASSCLR,\n} GXTevMode;\ntypedef enum {\n    GX_MTX3x4,\n    GX_MTX2x4,\n} GXTexMtxType;\ntypedef enum {\n    GX_TG_MTX3x4,\n    GX_TG_MTX2x4,\n    GX_TG_BUMP0,\n    GX_TG_BUMP1,\n    GX_TG_BUMP2,\n    GX_TG_BUMP3,\n    GX_TG_BUMP4,\n    GX_TG_BUMP5,\n    GX_TG_BUMP6,\n    GX_TG_BUMP7,\n    GX_TG_SRTG,\n} GXTexGenType;\ntypedef enum {\n    GX_PNMTX0 = 0,\n    GX_PNMTX1 = 3,\n    GX_PNMTX2 = 6,\n    GX_PNMTX3 = 9,\n    GX_PNMTX4 = 12,\n    GX_PNMTX5 = 15,\n    GX_PNMTX6 = 18,\n    GX_PNMTX7 = 21,\n    GX_PNMTX8 = 24,\n    GX_PNMTX9 = 27,\n} GXPosNrmMtx;\ntypedef enum {\n    GX_TEXMTX0 = 30,\n    GX_TEXMTX1 = 33,\n    GX_TEXMTX2 = 36,\n    GX_TEXMTX3 = 39,\n    GX_TEXMTX4 = 42,\n    GX_TEXMTX5 = 45,\n    GX_TEXMTX6 = 48,\n    GX_TEXMTX7 = 51,\n    GX_TEXMTX8 = 54,\n    GX_TEXMTX9 = 57,\n    GX_IDENTITY = 60,\n} GXTexMtx;\ntypedef enum {\n    GX_COLOR0,\n    GX_COLOR1,\n    GX_ALPHA0,\n    GX_ALPHA1,\n    GX_COLOR0A0,\n    GX_COLOR1A1,\n    GX_COLOR_ZERO,\n    GX_ALPHA_BUMP,\n    GX_ALPHA_BUMPN,\n    GX_COLOR_NULL = 0xFF,\n} GXChannelID;\ntypedef enum {\n    GX_TG_POS,\n    GX_TG_NRM,\n    GX_TG_BINRM,\n    GX_TG_TANGENT,\n    GX_TG_TEX0,\n    GX_TG_TEX1,\n    GX_TG_TEX2,\n    GX_TG_TEX3,\n    GX_TG_TEX4,\n    GX_TG_TEX5,\n    GX_TG_TEX6,\n    GX_TG_TEX7,\n    GX_TG_TEXCOORD0,\n    GX_TG_TEXCOORD1,\n    GX_TG_TEXCOORD2,\n    GX_TG_TEXCOORD3,\n    GX_TG_TEXCOORD4,\n    GX_TG_TEXCOORD5,\n    GX_TG_TEXCOORD6,\n    GX_TG_COLOR0,\n    GX_TG_COLOR1,\n} GXTexGenSrc;\ntypedef enum {\n    GX_BM_NONE,\n    GX_BM_BLEND,\n    GX_BM_LOGIC,\n    GX_BM_SUBTRACT,\n    GX_MAX_BLENDMODE,\n} GXBlendMode;\ntypedef enum {\n    GX_BL_ZERO,\n    GX_BL_ONE,\n    GX_BL_SRCCLR,\n    GX_BL_INVSRCCLR,\n    GX_BL_SRCALPHA,\n    GX_BL_INVSRCALPHA,\n    GX_BL_DSTALPHA,\n    GX_BL_INVDSTALPHA,\n    GX_BL_DSTCLR = GX_BL_SRCCLR,\n    GX_BL_INVDSTCLR = GX_BL_INVSRCCLR,\n} GXBlendFactor;\ntypedef enum {\n    GX_LO_CLEAR,\n    GX_LO_AND,\n    GX_LO_REVAND,\n    GX_LO_COPY,\n    GX_LO_INVAND,\n    GX_LO_NOOP,\n    GX_LO_XOR,\n    GX_LO_OR,\n    GX_LO_NOR,\n    GX_LO_EQUIV,\n    GX_LO_INV,\n    GX_LO_REVOR,\n    GX_LO_INVCOPY,\n    GX_LO_INVOR,\n    GX_LO_NAND,\n    GX_LO_SET,\n} GXLogicOp;\ntypedef enum {\n    GX_POS_XY = 0,\n    GX_POS_XYZ = 1,\n    GX_NRM_XYZ = 0,\n    GX_NRM_NBT = 1,\n    GX_NRM_NBT3 = 2,\n    GX_CLR_RGB = 0,\n    GX_CLR_RGBA = 1,\n    GX_TEX_S = 0,\n    GX_TEX_ST = 1,\n} GXCompCnt;\ntypedef enum {\n    GX_U8 = 0,\n    GX_S8 = 1,\n    GX_U16 = 2,\n    GX_S16 = 3,\n    GX_F32 = 4,\n    GX_RGB565 = 0,\n    GX_RGB8 = 1,\n    GX_RGBX8 = 2,\n    GX_RGBA4 = 3,\n    GX_RGBA6 = 4,\n    GX_RGBA8 = 5,\n} GXCompType;\ntypedef enum {\n    GX_PTTEXMTX0 = 64,\n    GX_PTTEXMTX1 = 67,\n    GX_PTTEXMTX2 = 70,\n    GX_PTTEXMTX3 = 73,\n    GX_PTTEXMTX4 = 76,\n    GX_PTTEXMTX5 = 79,\n    GX_PTTEXMTX6 = 82,\n    GX_PTTEXMTX7 = 85,\n    GX_PTTEXMTX8 = 88,\n    GX_PTTEXMTX9 = 91,\n    GX_PTTEXMTX10 = 94,\n    GX_PTTEXMTX11 = 97,\n    GX_PTTEXMTX12 = 100,\n    GX_PTTEXMTX13 = 103,\n    GX_PTTEXMTX14 = 106,\n    GX_PTTEXMTX15 = 109,\n    GX_PTTEXMTX16 = 112,\n    GX_PTTEXMTX17 = 115,\n    GX_PTTEXMTX18 = 118,\n    GX_PTTEXMTX19 = 121,\n    GX_PTIDENTITY = 125,\n} GXPTTexMtx;\ntypedef enum {\n    GX_TEVPREV,\n    GX_TEVREG0,\n    GX_TEVREG1,\n    GX_TEVREG2,\n    GX_MAX_TEVREG,\n} GXTevRegID;\ntypedef enum {\n    GX_DF_NONE,\n    GX_DF_SIGN,\n    GX_DF_CLAMP,\n} GXDiffuseFn;\ntypedef enum {\n    GX_SRC_REG,\n    GX_SRC_VTX,\n} GXColorSrc;\ntypedef enum {\n    GX_AF_SPEC,\n    GX_AF_SPOT,\n    GX_AF_NONE,\n} GXAttnFn;\ntypedef enum {\n    GX_LIGHT0 = 0x001,\n    GX_LIGHT1 = 0x002,\n    GX_LIGHT2 = 0x004,\n    GX_LIGHT3 = 0x008,\n    GX_LIGHT4 = 0x010,\n    GX_LIGHT5 = 0x020,\n    GX_LIGHT6 = 0x040,\n    GX_LIGHT7 = 0x080,\n    GX_MAX_LIGHT = 9,\n    GX_LIGHT_AMBIENT = 0x100,\n    GX_LIGHT_NULL = 0,\n} GXLightID;\ntypedef enum {\n    GX_TO_ZERO,\n    GX_TO_SIXTEENTH,\n    GX_TO_EIGHTH,\n    GX_TO_FOURTH,\n    GX_TO_HALF,\n    GX_TO_ONE,\n    GX_MAX_TEXOFFSET,\n} GXTexOffset;\ntypedef enum {\n    GX_SP_OFF,\n    GX_SP_FLAT,\n    GX_SP_COS,\n    GX_SP_COS2,\n    GX_SP_SHARP,\n    GX_SP_RING1,\n    GX_SP_RING2,\n} GXSpotFn;\ntypedef enum {\n    GX_DA_OFF,\n    GX_DA_GENTLE,\n    GX_DA_MEDIUM,\n    GX_DA_STEEP,\n} GXDistAttnFn;\ntypedef enum {\n    GX_CULL_NONE,\n    GX_CULL_FRONT,\n    GX_CULL_BACK,\n    GX_CULL_ALL\n} GXCullMode;\ntypedef enum {\n    GX_TEV_SWAP0 = 0,\n    GX_TEV_SWAP1,\n    GX_TEV_SWAP2,\n    GX_TEV_SWAP3,\n    GX_MAX_TEVSWAP\n} GXTevSwapSel;\ntypedef enum {\n    GX_CH_RED = 0,\n    GX_CH_GREEN,\n    GX_CH_BLUE,\n    GX_CH_ALPHA\n} GXTevColorChan;\ntypedef enum _GXFogType {\n    GX_FOG_NONE = 0,\n    GX_FOG_LIN = 2,\n    GX_FOG_EXP = 4,\n    GX_FOG_EXP2 = 5,\n    GX_FOG_REVEXP = 6,\n    GX_FOG_REVEXP2 = 7\n} GXFogType;\ntypedef enum {\n    GX_CC_CPREV,\n    GX_CC_APREV,\n    GX_CC_C0,\n    GX_CC_A0,\n    GX_CC_C1,\n    GX_CC_A1,\n    GX_CC_C2,\n    GX_CC_A2,\n    GX_CC_TEXC,\n    GX_CC_TEXA,\n    GX_CC_RASC,\n    GX_CC_RASA,\n    GX_CC_ONE,\n    GX_CC_HALF,\n    GX_CC_KONST,\n    GX_CC_ZERO\n} GXTevColorArg;\ntypedef enum {\n    GX_CA_APREV,\n    GX_CA_A0,\n    GX_CA_A1,\n    GX_CA_A2,\n    GX_CA_TEXA,\n    GX_CA_RASA,\n    GX_CA_KONST,\n    GX_CA_ZERO\n} GXTevAlphaArg;\ntypedef enum {\n    GX_TEV_ADD = 0,\n    GX_TEV_SUB = 1,\n    GX_TEV_COMP_R8_GT = 8,\n    GX_TEV_COMP_R8_EQ = 9,\n    GX_TEV_COMP_GR16_GT = 10,\n    GX_TEV_COMP_GR16_EQ = 11,\n    GX_TEV_COMP_BGR24_GT = 12,\n    GX_TEV_COMP_BGR24_EQ = 13,\n    GX_TEV_COMP_RGB8_GT = 14,\n    GX_TEV_COMP_RGB8_EQ = 15,\n    GX_TEV_COMP_A8_GT = GX_TEV_COMP_RGB8_GT,\n    GX_TEV_COMP_A8_EQ = GX_TEV_COMP_RGB8_EQ\n} GXTevOp;\ntypedef enum {\n    GX_TB_ZERO,\n    GX_TB_ADDHALF,\n    GX_TB_SUBHALF,\n    GX_MAX_TEVBIAS\n} GXTevBias;\ntypedef enum {\n    GX_CS_SCALE_1,\n    GX_CS_SCALE_2,\n    GX_CS_SCALE_4,\n    GX_CS_DIVIDE_2,\n    GX_MAX_TEVSCALE\n} GXTevScale;\ntypedef enum {\n    GX_TEV_KCSEL_1 = 0x00,\n    GX_TEV_KCSEL_7_8 = 0x01,\n    GX_TEV_KCSEL_3_4 = 0x02,\n    GX_TEV_KCSEL_5_8 = 0x03,\n    GX_TEV_KCSEL_1_2 = 0x04,\n    GX_TEV_KCSEL_3_8 = 0x05,\n    GX_TEV_KCSEL_1_4 = 0x06,\n    GX_TEV_KCSEL_1_8 = 0x07,\n    GX_TEV_KCSEL_K0 = 0x0C,\n    GX_TEV_KCSEL_K1 = 0x0D,\n    GX_TEV_KCSEL_K2 = 0x0E,\n    GX_TEV_KCSEL_K3 = 0x0F,\n    GX_TEV_KCSEL_K0_R = 0x10,\n    GX_TEV_KCSEL_K1_R = 0x11,\n    GX_TEV_KCSEL_K2_R = 0x12,\n    GX_TEV_KCSEL_K3_R = 0x13,\n    GX_TEV_KCSEL_K0_G = 0x14,\n    GX_TEV_KCSEL_K1_G = 0x15,\n    GX_TEV_KCSEL_K2_G = 0x16,\n    GX_TEV_KCSEL_K3_G = 0x17,\n    GX_TEV_KCSEL_K0_B = 0x18,\n    GX_TEV_KCSEL_K1_B = 0x19,\n    GX_TEV_KCSEL_K2_B = 0x1A,\n    GX_TEV_KCSEL_K3_B = 0x1B,\n    GX_TEV_KCSEL_K0_A = 0x1C,\n    GX_TEV_KCSEL_K1_A = 0x1D,\n    GX_TEV_KCSEL_K2_A = 0x1E,\n    GX_TEV_KCSEL_K3_A = 0x1F\n} GXTevKColorSel;\ntypedef enum {\n    GX_TEV_KASEL_1 = 0x00,\n    GX_TEV_KASEL_7_8 = 0x01,\n    GX_TEV_KASEL_3_4 = 0x02,\n    GX_TEV_KASEL_5_8 = 0x03,\n    GX_TEV_KASEL_1_2 = 0x04,\n    GX_TEV_KASEL_3_8 = 0x05,\n    GX_TEV_KASEL_1_4 = 0x06,\n    GX_TEV_KASEL_1_8 = 0x07,\n    GX_TEV_KASEL_K0_R = 0x10,\n    GX_TEV_KASEL_K1_R = 0x11,\n    GX_TEV_KASEL_K2_R = 0x12,\n    GX_TEV_KASEL_K3_R = 0x13,\n    GX_TEV_KASEL_K0_G = 0x14,\n    GX_TEV_KASEL_K1_G = 0x15,\n    GX_TEV_KASEL_K2_G = 0x16,\n    GX_TEV_KASEL_K3_G = 0x17,\n    GX_TEV_KASEL_K0_B = 0x18,\n    GX_TEV_KASEL_K1_B = 0x19,\n    GX_TEV_KASEL_K2_B = 0x1A,\n    GX_TEV_KASEL_K3_B = 0x1B,\n    GX_TEV_KASEL_K0_A = 0x1C,\n    GX_TEV_KASEL_K1_A = 0x1D,\n    GX_TEV_KASEL_K2_A = 0x1E,\n    GX_TEV_KASEL_K3_A = 0x1F\n} GXTevKAlphaSel;\ntypedef enum {\n    GX_KCOLOR0 = 0,\n    GX_KCOLOR1,\n    GX_KCOLOR2,\n    GX_KCOLOR3,\n    GX_MAX_KCOLOR\n} GXTevKColorID;\ntypedef enum {\n    GX_ZT_DISABLE,\n    GX_ZT_ADD,\n    GX_ZT_REPLACE,\n    GX_MAX_ZTEXOP,\n} GXZTexOp;\ntypedef enum {\n    GX_ITF_8,\n    GX_ITF_5,\n    GX_ITF_4,\n    GX_ITF_3,\n    GX_MAX_ITFORMAT,\n} GXIndTexFormat;\ntypedef enum {\n    GX_ITB_NONE,\n    GX_ITB_S,\n    GX_ITB_T,\n    GX_ITB_ST,\n    GX_ITB_U,\n    GX_ITB_SU,\n    GX_ITB_TU,\n    GX_ITB_STU,\n    GX_MAX_ITBIAS,\n} GXIndTexBiasSel;\ntypedef enum {\n    GX_ITBA_OFF,\n    GX_ITBA_S,\n    GX_ITBA_T,\n    GX_ITBA_U,\n    GX_MAX_ITBALPHA,\n} GXIndTexAlphaSel;\ntypedef enum {\n    GX_ITM_OFF,\n    GX_ITM_0,\n    GX_ITM_1,\n    GX_ITM_2,\n    GX_ITM_S0 = 5,\n    GX_ITM_S1,\n    GX_ITM_S2,\n    GX_ITM_T0 = 9,\n    GX_ITM_T1,\n    GX_ITM_T2,\n} GXIndTexMtxID;\ntypedef enum {\n    GX_ITW_OFF,\n    GX_ITW_256,\n    GX_ITW_128,\n    GX_ITW_64,\n    GX_ITW_32,\n    GX_ITW_16,\n    GX_ITW_0,\n    GX_MAX_ITWRAP,\n} GXIndTexWrap;\ntypedef enum {\n    GX_INDTEXSTAGE0,\n    GX_INDTEXSTAGE1,\n    GX_INDTEXSTAGE2,\n    GX_INDTEXSTAGE3,\n    GX_MAX_INDTEXSTAGE,\n} GXIndTexStageID;\ntypedef enum {\n    GX_CLIP_ENABLE = 0,\n    GX_CLIP_DISABLE = 1,\n} GXClipMode;\n// todo: clean up invocations via defines or inlines\n/* for example,\nstatic inline void WriteBP(u32 i) {\n   WGPIPE.u8 = GX_LOAD_BP_REG;\n   WGPIPE.u32 = i;\n} */\n// most or all GX commands follow a pattern of fixed args\ntypedef enum {\n    GX_NOP = 0x00,\n    GX_DRAW_QUADS = 0x80,\n    GX_DRAW_TRIANGLES = 0x90,\n    GX_DRAW_TRIANGLE_STRIP = 0x98,\n    GX_DRAW_TRIANGLE_FAN = 0xA0,\n    GX_DRAW_LINES = 0xA8,\n    GX_DRAW_LINE_STRIP = 0xB0,\n    GX_DRAW_POINTS = 0xB8,\n    GX_LOAD_BP_REG = 0x61,\n    GX_LOAD_CP_REG = 0x08,\n    GX_LOAD_XF_REG = 0x10,\n    GX_LOAD_INDX_A = 0x20,\n    GX_LOAD_INDX_B = 0x28,\n    GX_LOAD_INDX_C = 0x30,\n    GX_LOAD_INDX_D = 0x38,\n    GX_CMD_CALL_DL = 0x40,\n    GX_CMD_INVL_VC = 0x48,\n    GX_OPCODE_MASK = 0xF8,\n    GX_VAT_MASK = 0x07,\n} GXCommand;\ntypedef struct GXTexObj GXTexObj;\ntypedef struct GXColor GXColor;\ntypedef struct GXColorS10 GXColorS10;\ntypedef struct GXRenderModeObj GXRenderModeObj;\ntypedef struct GXContexts GXContexts;\ntypedef struct GXGPFifo GXGPFifo;\ntypedef struct GXSettings GXSettings;\ntypedef struct GXContext GXContext;\ntypedef struct GXFifoObj GXFifoObj;\ntypedef void (*GXDrawDoneCallback)(void);\n/// @todo Signature unknown.\ntypedef void* (*GXTexRegionCallback)(void);\nstatic inline void GXEnd(void) {}\n#define GX_FIFO_OBJSIZE 128\nstruct GXFifoObj {\n    u8 pad[128];\n};\nstruct GXRenderModeObj {\n    u32 viTVMode;\n    u16 fbWidth;\n    u16 efbHeight;\n    u16 xfbHeight;\n    u16 viXOrigin;\n    u16 viYOrigin;\n    u16 viWidth;\n    u16 viHeight;\n    u32 xfbMode;\n    u8 field_rendering;\n    u8 aa;\n    u8 sample_pattern[12][2];\n    u8 vfilter[7];\n};\nstruct GXColor {\n    u8 r, g, b, a;\n};\nstruct GXColorS10 {\n    s16 r, g, b, a;\n};\n#define GX_MAX_Z24 0x00ffffff\n#define DOLPHIN_MTX_TYPES_H\n#define DOLPHIN_MTX_FORWARD_H\ntypedef f32 Mtx[3][4];\ntypedef f32 (*MtxPtr)[4];\ntypedef f32 Mtx44[4][4];\ntypedef f32 (*Mtx44Ptr)[4];\ntypedef struct IntVec3 IntVec3;\ntypedef struct S16Vec3 S16Vec3;\ntypedef struct IntVec2 IntVec2;\ntypedef struct S32Vec2 S32Vec2;\ntypedef struct S32Vec3 S32Vec3;\ntypedef struct S8Vec3 S8Vec3;\ntypedef struct Vec2 Vec2;\ntypedef struct Vec3 Vec3;\ntypedef struct Vec4 Quaternion, Vec4;\nstruct Vec2 {\n    f32 x, y;\n};\nstruct Vec3 {\n    f32 x, y, z;\n};\nstruct Vec4 {\n    f32 x, y, z, w;\n};\nstruct S8Vec3 {\n    s8 x, y, z;\n};\nstruct S16Vec3 {\n    s16 x, y, z;\n};\nstruct S32Vec2 {\n    s32 x, y;\n};\nstruct S32Vec3 {\n    s32 x, y, z;\n};\nstruct IntVec2 {\n    int x, y;\n};\nstruct IntVec3 {\n    int x, y, z;\n};\n// Most of these should be moved to independent headers once they are created\n// SOUND EFFECTS\n#define SFX_VOLUME_MAX 0x7FU\n#define SFX_PAN_MID 0x40U\n// HSD_PAD\n/// @todo @c PascalCase members\ntypedef u32 HSD_Pad;\n#define HSD_PAD_DPADLEFT (1 << 0)\n#define HSD_PAD_DPADRIGHT (1 << 1)\n#define HSD_PAD_DPADDOWN (1 << 2)\n#define HSD_PAD_DPADUP (1 << 3)\n#define HSD_PAD_Z (1 << 4)\n#define HSD_PAD_R (1 << 5)\n#define HSD_PAD_L (1 << 6)\n#define HSD_PAD_7 (1 << 7)\n/// @remarks Also covers Z-Button macro in-game.\n#define HSD_PAD_A (1 << 8)\n#define HSD_PAD_B (1 << 9)\n#define HSD_PAD_X (1 << 10)\n#define HSD_PAD_Y (1 << 11)\n#define HSD_PAD_START (1 << 12)\n/// Digital input of either L or R\n#define HSD_PAD_LR (1 << 31)\n#define HSD_PAD_AB (HSD_PAD_A | HSD_PAD_B)\n#define HSD_PAD_XY (HSD_PAD_X | HSD_PAD_Y)\n// COLLISION FLAGS\n// From Ness's Yo-Yo collision check\n/// @todo These (and #CollData::env_flags) should be a bitfield struct\n#define MPCOLL_RIGHTWALL 0x3F ///< Bits 0-5\n#define MPCOLL_FLAGS_B05 (1 << 5)\n#define MPCOLL_LEFTWALL 0xFC0 ///< Bits 6-11\n#define MPCOLL_FLAGS_B11 (1 << 11)\n#define MPCOLL_CEIL 0x6000 ///< Bits 13-14\n#define MPCOLL_FLAGS_B14 (1 << 14)\n#define MPCOLL_GRPUSH (1 << 15)\n#define MPCOLL_FLAGS_B23 (1 << 23)\n#define MPCOLL_FLAGS_B24 (1 << 24)\ntypedef union _UnkFlagStruct {\n    u8 u8;\n    struct {\n        u8 b0 : 1;\n        u8 b1 : 1;\n        u8 b2 : 1;\n        u8 b3 : 1;\n        u8 b4 : 1;\n        u8 b5 : 1;\n        u8 b6 : 1;\n        u8 b7 : 1;\n    } bits;\n} UnkFlagStruct;\ntypedef struct _ReflectDesc {\n    u32 x0_bone_id;\n    s32 x4_max_damage;\n    Vec3 x8_offset;\n    f32 x14_size;\n    f32 x18_damage_mul;\n    f32 x1C_speed_mul;\n    /// @remarks Setting this to 1 causes the reflector to skip ownership\n    /// change\n    u8 x20_behavior;\n} ReflectDesc;\ntypedef struct _AbsorbDesc {\n    /*  +0 */ int x0_bone_id;\n    /*  +4 */ Vec3 x4_offset;\n    /* +10 */ float x10_size;\n} AbsorbDesc;\ntypedef struct _ShieldDesc {\n    int bone;\n    Vec3 pos;\n    f32 radius;\n    f32 dmg_mul;\n    f32 vel_mul;\n    u8 flags : 8;\n} ShieldDesc;\ntypedef struct ColorOverlay {\n    s32 x0_timer; // 0x0\n    s32 x4_pri; // 0x4  this colanims priority, lower = will persist\n    s32* x8_ptr1; // 0x8\n    s32 xC_loop; // 0xc\n    s32* x10_ptr2; // 0x10\n    s32 x14; // 0x14\n    s32* x18_alloc; // 0x18\n    s32 x1c; // 0x1c\n    s32 x20; // 0x20\n    s32 x24; // 0x24\n    s32 x28_colanim; // 0x28, id for the color animation in effect\n    GXColor x2C_hex; // 0x2C\n    f32 x30_color_red; // 0x30\n    f32 x34_color_green; // 0x34\n    f32 x38_color_blue; // 0x38\n    f32 x3C_color_alpha; // 0x3C\n    f32 x40_colorblend_red; // 0x40\n    f32 x44_colorblend_green; // 0x44\n    f32 x48_colorblend_blue; // 0x48\n    f32 x4C_colorblend_alpha; // 0x4C\n    GXColor x50_light_color; // 0x50\n    f32 x54_light_red; // 0x54\n    f32 x58_light_green; // 0x58\n    f32 x5C_light_blue; // 0x5C\n    f32 x60_light_alpha; // 0x60\n    f32 x64_lightblend_red; // 0x64\n    f32 x68_lightblend_green; // 0x68\n    f32 x6C_lightblend_blue; // 0x6c\n    f32 x70_lightblend_alpha; // 0x70\n    f32 x74_light_angle; // 0x74\n    f32 x78_light_unk; // 0x78\n    u8 x7C_color_enable : 1; // 0x7c, 0x80\n    u8 x7C_flag2 : 1; // 0x7c, 0x40\n    u8 x7C_light_enable : 1; // 0x7c, 0x20\n    u8 x7C_flag4 : 1; // 0x7c, 0x10\n    u8 x7C_flag5 : 1; // 0x7c, 0x08\n    u8 x7C_flag6 : 1; // 0x7c, 0x04\n    u8 x7C_flag7 : 1; // 0x7c, 0x02\n    u8 x7C_flag8 : 1; // 0x7c, 0x01\n} ColorOverlay;\nstruct r13_ColAnimStruct {\n    u32 x0_unk;\n    u8 x4_unk;\n    u8 x5_unk;\n    u8 x6_unk;\n    u8 x7_unk;\n};\ntypedef enum GroundOrAir {\n    GA_Ground,\n    GA_Air,\n} GroundOrAir;\n#define _STDIO_H_\n#define STDARG_H\n#define PLACEHOLDER_H\n#define MELEE_FT_FORWARD_H\n#define SYSDOLPHIN_BASELIB_FORWARD_H\ntypedef struct HSD_AObj HSD_AObj;\ntypedef struct HSD_AObjDesc HSD_AObjDesc;\ntypedef struct HSD_AnimJoint HSD_AnimJoint;\ntypedef struct HSD_Archive HSD_Archive;\ntypedef struct HSD_ArchiveExternInfo HSD_ArchiveExternInfo;\ntypedef struct HSD_ArchiveHeader HSD_ArchiveHeader;\ntypedef struct HSD_ArchivePublicInfo HSD_ArchivePublicInfo;\ntypedef struct HSD_ArchiveRelocationInfo HSD_ArchiveRelocationInfo;\ntypedef struct HSD_ByteCodeExpDesc HSD_ByteCodeExpDesc;\ntypedef struct HSD_CObj HSD_CObj;\ntypedef struct HSD_CObjDesc HSD_CObjDesc;\ntypedef struct HSD_CObjInfo HSD_CObjInfo;\ntypedef struct HSD_CameraAnim HSD_CameraAnim;\ntypedef struct HSD_DObj HSD_DObj;\ntypedef struct HSD_DObjDesc HSD_DObjDesc;\ntypedef struct HSD_DObjInfo HSD_DObjInfo;\ntypedef struct HSD_Envelope HSD_Envelope;\ntypedef struct HSD_EnvelopeDesc HSD_EnvelopeDesc;\ntypedef struct HSD_Exp HSD_Exp;\ntypedef struct HSD_ExpDesc HSD_ExpDesc;\ntypedef struct HSD_Fog HSD_Fog;\ntypedef struct HSD_FogAdj HSD_FogAdj;\ntypedef struct HSD_FogAdjDesc HSD_FogAdjDesc;\ntypedef struct HSD_FogAdjInfo HSD_FogAdjInfo;\ntypedef struct HSD_FogDesc HSD_FogDesc;\ntypedef struct HSD_FogInfo HSD_FogInfo;\ntypedef struct HSD_GObj HSD_GObj;\ntypedef struct HSD_GObjProc HSD_GObjProc;\ntypedef struct HSD_IKHint HSD_IKHint;\ntypedef struct HSD_IKHintDesc HSD_IKHintDesc;\ntypedef struct HSD_JObj HSD_JObj;\ntypedef struct HSD_Joint HSD_Joint;\ntypedef struct HSD_LObj HSD_LObj;\ntypedef struct HSD_LObjInfo HSD_LObjInfo;\ntypedef struct HSD_LightAnim HSD_LightAnim;\ntypedef struct HSD_LightAttn HSD_LightAttn;\ntypedef struct HSD_LightDesc HSD_LightDesc;\ntypedef struct HSD_LightPoint HSD_LightPoint;\ntypedef struct HSD_LightPointDesc HSD_LightPointDesc;\ntypedef struct HSD_LightSpot HSD_LightSpot;\ntypedef struct HSD_LightSpotDesc HSD_LightSpotDesc;\ntypedef struct HSD_MObj HSD_MObj;\ntypedef struct HSD_MObjInfo HSD_MObjInfo;\ntypedef struct HSD_MatAnimJoint HSD_MatAnimJoint;\ntypedef struct HSD_Material HSD_Material;\ntypedef struct HSD_Obj HSD_Obj;\ntypedef struct HSD_PEDesc HSD_PEDesc;\ntypedef struct HSD_PObj HSD_PObj;\ntypedef struct HSD_PObjDesc HSD_PObjDesc;\ntypedef struct HSD_PObjInfo HSD_PObjInfo;\ntypedef struct HSD_PadData HSD_PadData;\ntypedef struct HSD_PadRumbleListData HSD_PadRumbleListData;\ntypedef struct HSD_PadStatus HSD_PadStatus;\ntypedef struct HSD_RObj HSD_RObj;\ntypedef struct HSD_RObjAnimJoint HSD_RObjAnimJoint;\ntypedef struct HSD_RObjDesc HSD_RObjDesc;\ntypedef struct HSD_RumbleData HSD_RumbleData;\ntypedef struct HSD_Rvalue HSD_Rvalue;\ntypedef struct HSD_RvalueList HSD_RvalueList;\ntypedef struct HSD_SM HSD_SM;\ntypedef struct HSD_Shadow HSD_Shadow;\ntypedef struct HSD_ShapeAnim HSD_ShapeAnim;\ntypedef struct HSD_ShapeAnimDObj HSD_ShapeAnimDObj;\ntypedef struct HSD_ShapeAnimJoint HSD_ShapeAnimJoint;\ntypedef struct HSD_ShapeSet HSD_ShapeSet;\ntypedef struct HSD_ShapeSetDesc HSD_ShapeSetDesc;\ntypedef struct HSD_Spline HSD_Spline;\ntypedef struct HSD_TObj HSD_TObj;\ntypedef struct HSD_ViewingRect HSD_ViewingRect;\ntypedef struct HSD_VtxDescList HSD_VtxDescList;\ntypedef struct HSD_WObj HSD_WObj;\ntypedef struct HSD_WObjAnim HSD_WObjAnim;\ntypedef struct HSD_WObjDesc HSD_WObjDesc;\ntypedef struct HSD_WObjInfo HSD_WObjInfo;\ntypedef struct PadLibData PadLibData;\ntypedef struct RumbleCommand RumbleCommand;\ntypedef struct RumbleInfo RumbleInfo;\ntypedef struct Struct804C22E0 Struct804C22E0;\ntypedef struct TextKerning TextKerning;\ntypedef struct UnkGeneratorStruct UnkGeneratorStruct;\ntypedef struct _HSD_ImageDesc HSD_ImageDesc;\ntypedef union HSD_ObjData HSD_ObjData;\ntypedef union HSD_Rumble HSD_Rumble;\ntypedef union HSD_TExp HSD_TExp;\ntypedef void (*GObj_RenderFunc)(HSD_GObj* gobj, int code);\ntypedef void (*HSD_ObjUpdateFunc)(any_t obj, enum_t type, HSD_ObjData* fval);\ntypedef void (*HSD_DevComCallback)(int, int, int, bool cancelflag);\ntypedef void (*HSD_GObjEvent)(HSD_GObj* gobj);\ntypedef void (*HSD_UserDataEvent)(any_t user_data);\ntypedef bool (*HSD_GObjPredicate)(HSD_GObj* gobj);\ntypedef void (*HSD_GObjInteraction)(HSD_GObj* gobj0, HSD_GObj* gobj1);\ntypedef void (*HSD_MObjSetupFunc)(HSD_MObj* mobj, u32 rendermode);\n#define HSD_A_S_W0 2\n#define HSD_DEFAULT_MAX_SHAPE_VERTICES 2000\n#define HSD_DEFAULT_MAX_SHAPE_NORMALS 2000\n#define POBJ_ANIM (1 << 3)\n#define POBJ_SKIN (0 << 12)\n#define POBJ_SHAPEANIM (1 << 12)\n#define POBJ_ENVELOPE (2 << 12)\n#define pobj_type(o) (o->flags & 0x3000)\n#define POBJ_CULLFRONT (1 << 14)\n#define POBJ_CULLBACK (1 << 15)\n#define SHAPESET_AVERAGE 1\n#define SHAPESET_ADDITIVE 1 << 1\ntypedef enum PObjSetupFlag {\n    SETUP_NORMAL = 1,\n    SETUP_REFLECTION = 2,\n    SETUP_HIGHLIGHT = 4,\n    SETUP_NORMAL_PROJECTION = 6,\n    SETUP_JOINT0 = 1,\n    SETUP_JOINT1 = 2,\n    SETUP_NONE = 0\n} PObjSetupFlag;\n#define HSD_A_L_LITC_R 9\n#define HSD_A_L_LITC_G 10\n#define HSD_A_L_LITC_B 11\n#define HSD_A_L_VIS 12\n#define HSD_A_L_A0 13\n#define HSD_A_L_A1 14\n#define HSD_A_L_A2 15\n#define HSD_A_L_K0 16\n#define HSD_A_L_K1 17\n#define HSD_A_L_K2 18\n#define HSD_A_L_CUTOFF 19\n#define HSD_A_L_REFDIST 20\n#define HSD_A_L_REFBRIGHT 21\n#define HSD_A_L_LITC_A 22\n#define LOBJ_AMBIENT (0 << 0)\n#define LOBJ_INFINITE (1 << 0)\n#define LOBJ_POINT (2 << 0)\n#define LOBJ_SPOT (3 << 0)\n#define LOBJ_DIFFUSE (1 << 2)\n#define LOBJ_SPECULAR (1 << 3)\n#define LOBJ_ALPHA (1 << 4)\n#define LOBJ_HIDDEN (1 << 5)\n#define LOBJ_RAW_PARAM (1 << 6)\n#define LOBJ_DIFF_DIRTY (1 << 7)\n#define LOBJ_SPEC_DIRTY (1 << 8)\n#define LOBJ_TYPE_MASK 3\n#define LOBJ_LIGHT_ATTN_NONE 0\n#define LOBJ_LIGHT_ATTN 1\n#define FIGHTERVARS_SIZE 0x100\ntypedef struct Fighter Fighter;\ntypedef struct Fighter_GObj Fighter_GObj;\nstruct Fighter_GObj {\n    /*  +0 */ u16 classifier;\n    /*  +2 */ u8 p_link;\n    /*  +3 */ u8 gx_link;\n    /*  +4 */ u8 p_priority;\n    /*  +5 */ u8 render_priority;\n    /*  +6 */ u8 obj_kind;\n    /*  +7 */ u8 user_data_kind;\n    /*  +8 */ Fighter_GObj* next;\n    /*  +C */ Fighter_GObj* prev;\n    /* +10 */ Fighter_GObj* next_gx;\n    /* +14 */ Fighter_GObj* prev_gx;\n    /* +18 */ HSD_GObjProc* proc;\n    /* +1C */ void (*rendered)(Fighter_GObj* gobj, s32 code);\n    /* +20 */ u64 gxlink_prios;\n    /* +28 */ HSD_JObj* hsd_obj;\n    /* +2C */ Fighter* user_data;\n    /* +30 */ void (*user_data_remove_func)(Fighter* data);\n    /* +34 */ void* x34_unk;\n};\ntypedef struct Fighter_CostumeStrings Fighter_CostumeStrings;\ntypedef struct Fighter_DemoStrings Fighter_DemoStrings;\ntypedef struct FtCmdState FtCmdState;\ntypedef struct MotionState MotionState;\ntypedef struct UnkFloat6_Camera UnkFloat6_Camera;\ntypedef struct ftCmdScript ftCmdScript;\ntypedef struct ftCo_DatAttrs_xBC_t ftCo_DatAttrs_xBC_t;\ntypedef struct ftCollisionBox ftCollisionBox;\ntypedef struct ftCommonData ftCommonData;\ntypedef struct ftData_UnkCountStruct ftData_UnkCountStruct;\ntypedef struct ftLk_SpecialN_Vec3Group ftLk_SpecialN_Vec3Group;\ntypedef struct ftMaterial_UnkTevStruct ftMaterial_UnkTevStruct;\ntypedef struct ftSubactionList ftSubactionList;\ntypedef struct gmScriptEventDefault gmScriptEventDefault;\ntypedef u32 MotionFlags;\ntypedef void (*FighterEvent)(Fighter* fp);\ntypedef char* (*Fighter_MotionFileStringGetter)(enum_t arg0);\ntypedef void (*Fighter_ItemEvent)(HSD_GObj* gobj, bool arg1);\ntypedef void (*Fighter_ModelEvent)(Fighter* fp, int arg1, bool arg2);\ntypedef void (*Fighter_UnkMtxEvent)(HSD_GObj* gobj, int arg1, Mtx vmtx);\ntypedef void (*Fighter_UnkPtrEvent)(int arg0, int* arg1, int* arg2);\ntypedef void (*FtCmd)(Fighter_GObj* gobj, FtCmdState* cmd);\ntypedef enum_t FtMotionId;\ntypedef enum FighterKind {\n    FTKIND_MARIO,\n    FTKIND_FOX,\n    FTKIND_CAPTAIN,\n    FTKIND_DONKEY,\n    FTKIND_KIRBY,\n    FTKIND_KOOPA,\n    FTKIND_LINK,\n    FTKIND_SEAK,\n    FTKIND_NESS,\n    FTKIND_PEACH,\n    FTKIND_POPO,\n    FTKIND_NANA,\n    FTKIND_PIKACHU,\n    FTKIND_SAMUS,\n    FTKIND_YOSHI,\n    FTKIND_PURIN,\n    FTKIND_MEWTWO,\n    FTKIND_LUIGI,\n    FTKIND_MARS,\n    FTKIND_ZELDA,\n    FTKIND_CLINK,\n    FTKIND_DRMARIO,\n    FTKIND_FALCO,\n    FTKIND_PICHU,\n    FTKIND_GAMEWATCH,\n    FTKIND_GANON,\n    FTKIND_EMBLEM,\n    FTKIND_MASTERH,\n    FTKIND_CREZYH,\n    FTKIND_BOY,\n    FTKIND_GIRL,\n    FTKIND_GKOOPS,\n    FTKIND_SANDBAG,\n    FTKIND_NONE,\n    FTKIND_MAX = FTKIND_NONE\n} FighterKind;\ntypedef enum CharacterKind {\n    CKIND_CAPTAIN, // Captain Falcon (Captain)\n    CKIND_DONKEY, // Donkey Kong (Donkey)\n    CKIND_FOX, // Fox\n    CKIND_GAMEWATCH, // Mr. Game & Watch (GameWatch)\n    CKIND_KIRBY, // Kirby\n    CKIND_KOOPA, // Bowser (Koopa)\n    CKIND_LINK, // Link\n    CKIND_LUIGI, // Luigi\n    CKIND_MARIO, // Mario\n    CKIND_MARS, // Marth (Mars)\n    CKIND_MEWTWO, // Mewtwo\n    CKIND_NESS, // Ness\n    CKIND_PEACH, // Peach\n    CKIND_PIKACHU, // Pikachu\n    CKIND_POPONANA, // Ice Climbers (Popo & Nana)\n    CKIND_PURIN, // Jigglypuff (Purin)\n    CKIND_SAMUS, // Samus\n    CKIND_YOSHI, // Yoshi\n    CKIND_ZELDA, // Zelda (ZE->SE)\n    CKIND_SEAK, // Sheik (SE->ZE)\n    CKIND_FALCO, // Falco\n    CKIND_CLINK, // Young Link (CLink)\n    CKIND_DRMARIO, // Dr. Mario\n    CKIND_EMBLEM, // Roy (Emblem)\n    CKIND_PICHU, // Pichu\n    CKIND_GANON, // Ganondorf (Ganon)\n    CKIND_MASTERH, // Master Hand (MasterH)\n    CKIND_BOY, // Male Wireframe (Boy)\n    CKIND_GIRL, // Female Wireframe (Girl)\n    CKIND_GKOOPS, // Giga Bowser (GKoops)\n    CKIND_CREZYH, // Crazy Hand (CrezyH)\n    CHKIND_SANDBAG, // Sandbag\n    CHKIND_POPO, // Popo\n    CHKIND_NONE, // None\n    CHKIND_MAX = CHKIND_NONE\n} CharacterKind;\nstatic MotionFlags const Ft_MF_None = 0;\nstatic MotionFlags const Ft_MF_KeepFastFall = 1 << 0;\nstatic MotionFlags const Ft_MF_KeepGfx = 1 << 1;\n/// Preserve full body collision state\nstatic MotionFlags const Ft_MF_KeepColAnimHitStatus = 1 << 2;\n/// Keep hitboxes\nstatic MotionFlags const Ft_MF_SkipHit = 1 << 3;\n/// Ignore model state change ?\nstatic MotionFlags const Ft_MF_SkipModel = 1 << 4;\nstatic MotionFlags const Ft_MF_SkipAnimVel = 1 << 5;\nstatic MotionFlags const Ft_MF_Unk06 = 1 << 6;\n/// Ignore switching to character's \"hurt\" textures ?\nstatic MotionFlags const Ft_MF_SkipMatAnim = 1 << 7;\n/// Resets thrower GObj pointer to NULL if false?\nstatic MotionFlags const Ft_MF_SkipThrowException = 1 << 8;\nstatic MotionFlags const Ft_MF_KeepSfx = 1 << 9;\n/// Ignore Parasol state change\nstatic MotionFlags const Ft_MF_SkipParasol = 1 << 10;\n/// Ignore rumble update?\nstatic MotionFlags const Ft_MF_SkipRumble = 1 << 11;\nstatic MotionFlags const Ft_MF_SkipColAnim = 1 << 12;\n/// Keep respawn platform?\nstatic MotionFlags const Ft_MF_KeepAccessory = 1 << 13;\n/// Run all Subaction Events up to the current animation frame\nstatic MotionFlags const Ft_MF_UpdateCmd = 1 << 14;\nstatic MotionFlags const Ft_MF_SkipNametagVis = 1 << 15;\n/// Assume this is for individual bones?\nstatic MotionFlags const Ft_MF_KeepColAnimPartHitStatus = 1\n                                                                         << 16;\nstatic MotionFlags const Ft_MF_KeepSwordTrail = 1 << 17;\n/// Used by Ness during Up/Down Smash\nstatic MotionFlags const Ft_MF_SkipItemVis = 1 << 18;\n/// Skips updating bit 5 of #Fighter::x2222_flag?\nstatic MotionFlags const Ft_MF_Unk19 = 1 << 19;\nstatic MotionFlags const Ft_MF_UnkUpdatePhys = 1 << 20;\n/// Sets anim rate to 0 and some other stuff\nstatic MotionFlags const Ft_MF_FreezeState = 1 << 21;\nstatic MotionFlags const Ft_MF_SkipModelPartVis = 1 << 22;\nstatic MotionFlags const Ft_MF_SkipMetalB = 1 << 23;\nstatic MotionFlags const Ft_MF_Unk24 = 1 << 24;\nstatic MotionFlags const Ft_MF_SkipAttackCount = 1 << 25;\nstatic MotionFlags const Ft_MF_SkipModelFlags = 1 << 26;\nstatic MotionFlags const Ft_MF_Unk27 = 1 << 27;\nstatic MotionFlags const Ft_MF_SkipHitStun = 1 << 28;\n/// Keeps current fighter animation?\nstatic MotionFlags const Ft_MF_SkipAnim = 1 << 29;\nstatic MotionFlags const Ft_MF_Unk30 = 1 << 30;\n/// Unused?\nstatic MotionFlags const Ft_MF_Unk31 = 1 << 31;\n// Ledge Grab Macros\n#define CLIFFCATCH_BOTH 0\n#define CLIFFCATCH_LEFT -1\n#define CLIFFCATCH_RIGHT 1\ntypedef enum Fighter_Part {\n    FtPart_TopN,\n    FtPart_TransN,\n    FtPart_XRotN,\n    FtPart_YRotN,\n    FtPart_HipN,\n    FtPart_WaistN,\n    FtPart_LLegJA,\n    FtPart_LLegJ,\n    FtPart_LKneeJ,\n    FtPart_LFootJA,\n    FtPart_LFootJ,\n    FtPart_RLegJA,\n    FtPart_RLegJ,\n    FtPart_RKneeJ,\n    FtPart_RFootJA,\n    FtPart_RFootJ,\n    FtPart_BustN,\n    FtPart_LShoulderN,\n    FtPart_LShoulderJA,\n    FtPart_LShoulderJ,\n    FtPart_LArmJ,\n    FtPart_LHandN,\n    FtPart_L1stNa,\n    FtPart_L1stNb,\n    FtPart_L2ndNa,\n    FtPart_L2ndNb,\n    FtPart_L3rdNa,\n    FtPart_L3rdNb,\n    FtPart_L4thNa,\n    FtPart_L4thNb,\n    FtPart_LThumbNa,\n    FtPart_LThumbNb,\n    FtPart_LHandNb,\n    FtPart_NeckN,\n    FtPart_HeadN,\n    FtPart_RShoulderN,\n    FtPart_RShoulderJA,\n    FtPart_RShoulderJ,\n    FtPart_RArmJ,\n    FtPart_RHandN,\n    FtPart_R1stNa,\n    FtPart_R1stNb,\n    FtPart_R2ndNa,\n    FtPart_R2ndNb,\n    FtPart_R3rdNa,\n    FtPart_R3rdNb,\n    FtPart_R4thNa,\n    FtPart_R4thNb,\n    FtPart_RThumbNa,\n    FtPart_RThumbNb,\n    FtPart_RHandNb,\n    FtPart_ThrowN,\n    FtPart_TransN2,\n    FtPart_109 = 109,\n} Fighter_Part;\ntypedef enum FtWalkType {\n    FtWalkType_Slow,\n    FtWalkType_Middle,\n    FtWalkType_Fast,\n} FtWalkType;\ntypedef enum FtMoveId {\n    FtMoveId_None,\n    FtMoveId_Default,\n    FtMoveId_Attack11,\n    FtMoveId_Attack12,\n    FtMoveId_Attack13,\n    FtMoveId_Attack100,\n    FtMoveId_AttackDash,\n    FtMoveId_AttackS3,\n    FtMoveId_AttackHi3,\n    FtMoveId_AttackLw3,\n    FtMoveId_AttackS4,\n    FtMoveId_AttackHi4,\n    FtMoveId_AttackLw4,\n    FtMoveId_AttackAirN,\n    FtMoveId_AttackAirF,\n    FtMoveId_AttackAirB,\n    FtMoveId_AttackAirHi,\n    FtMoveId_AttackAirLw,\n    FtMoveId_SpecialN,\n    FtMoveId_SpecialS,\n    FtMoveId_SpecialHi,\n    FtMoveId_SpecialLw,\n    FtMoveId_KbSpecialNMr,\n    FtMoveId_KbSpecialNFx,\n    FtMoveId_KbSpecialNCa,\n    FtMoveId_KbSpecialNDk,\n    FtMoveId_KbSpecialNKp,\n    FtMoveId_KbSpecialNLk,\n    FtMoveId_KbSpecialNSk,\n    FtMoveId_KbSpecialNNs,\n    FtMoveId_KbSpecialNPe,\n    FtMoveId_KbSpecialNPp,\n    FtMoveId_KbSpecialNPk,\n    FtMoveId_KbSpecialNSs,\n    FtMoveId_KbSpecialNYs,\n    FtMoveId_KbSpecialNPr,\n    FtMoveId_KbSpecialNMt,\n    FtMoveId_KbSpecialNLg,\n    FtMoveId_KbSpecialNMs,\n    FtMoveId_KbSpecialNZd,\n    FtMoveId_KbSpecialNCl,\n    FtMoveId_KbSpecialNDr,\n    FtMoveId_KbSpecialNFc,\n    FtMoveId_KbSpecialNPc,\n    FtMoveId_KbSpecialNGw,\n    FtMoveId_KbSpecialNGn,\n    FtMoveId_KbSpecialNFe,\n    FtMoveId_KbSpecialNGk,\n    FtMoveId_Unk48,\n    FtMoveId_Unk49,\n    FtMoveId_DownAttackU,\n    FtMoveId_DownAttackD,\n    FtMoveId_CatchAttack,\n    FtMoveId_ThrowF,\n    FtMoveId_ThrowB,\n    FtMoveId_ThrowHi,\n    FtMoveId_ThrowLw,\n    FtMoveId_CargoThrowF,\n    FtMoveId_CargoThrowB,\n    FtMoveId_CargoThrowHi,\n    FtMoveId_CargoThrowLw,\n    FtMoveId_CliffAttackSlow,\n    FtMoveId_CliffAttackQuick,\n    FtMoveId_SwordSwing1,\n    FtMoveId_SwordSwing3,\n    FtMoveId_SwordSwing4,\n    FtMoveId_SwordSwingDash,\n    FtMoveId_BatSwing1,\n    FtMoveId_BatSwing3,\n    FtMoveId_BatSwing4,\n    FtMoveId_BatSwingDash,\n    FtMoveId_ParasolSwing1,\n    FtMoveId_ParasolSwing3,\n    FtMoveId_ParasolSwing4,\n    FtMoveId_ParasolSwingDash,\n    FtMoveId_HarisenSwing1,\n    FtMoveId_HarisenSwing3,\n    FtMoveId_HarisenSwing4,\n    FtMoveId_HarisenSwingDash,\n    FtMoveId_StarRodSwing1,\n    FtMoveId_StarRodSwing3,\n    FtMoveId_StarRodSwing4,\n    FtMoveId_StarRodSwingDash,\n    FtMoveId_LipstickSwing1,\n    FtMoveId_LipstickSwing3,\n    FtMoveId_LipstickSwing4,\n    FtMoveId_LipstickSwingDash,\n    FtMoveId_Parasol,\n    FtMoveId_LGunShoot,\n    FtMoveId_FireFlowerShoot,\n    FtMoveId_Screw,\n    FtMoveId_ScopeRapid,\n    FtMoveId_ScopeFire,\n    FtMoveId_Hammer,\n    FtMoveId_WarpStarFall,\n} FtMoveId;\ntypedef enum SmashState {\n    SmashState_None,\n    SmashState_PreCharge,\n    SmashState_Charging,\n    SmashState_Release,\n} SmashState;\n/** @file\n * This header contains macros emitted by m2c in \"valid syntax\" mode,\n * which can be enabled by passing `--valid-syntax` on the command line.\n *\n * In this mode, unhandled types and expressions are emitted as macros so\n * that the output is compilable without human intervention.\n */\n#define M2C_MACROS_H\n/* Unknown types */\ntypedef s32 M2C_UNK;\ntypedef s8 M2C_UNK8;\ntypedef s16 M2C_UNK16;\ntypedef s32 M2C_UNK32;\ntypedef s64 M2C_UNK64;\n/* Unknown field access, like `*(type_ptr) &expr->unk_offset` */\n#define M2C_FIELD(expr, type_ptr, offset) (*(type_ptr) ((s8*) (expr) + (offset)))\n/* Bitwise (reinterpret) cast */\n#define M2C_BITWISE(type, expr) ((type) (expr))\n/* Unaligned reads */\n#define M2C_LWL(expr) (expr)\n#define M2C_FIRST3BYTES(expr) (expr)\n#define M2C_UNALIGNED32(expr) (expr)\n/* Unhandled instructions */\n#define M2C_ERROR(...) (0)\n#define M2C_TRAP_IF(cond) (0)\n#define M2C_BREAK() (0)\n#define M2C_SYNC() (0)\n/* Carry bit from partially-implemented instructions */\n#define M2C_CARRY 0\n/* Memcpy patterns */\n#define M2C_MEMCPY_ALIGNED memcpy\n#define M2C_MEMCPY_UNALIGNED memcpy\n#define _OS_H__\n#define __DOLPHIN_OSALLOC_H_\ntypedef struct _HeapCell {\n    struct _HeapCell* prev;\n    struct _HeapCell* next;\n    size_t size;\n} HeapCell;\ntypedef struct _Heap {\n    s32 size;\n    struct _HeapCell* free; // linked list of free cells\n    struct _HeapCell* allocated; // linked list of allocated cells\n} Heap;\ntypedef int OSHeapHandle;\nextern volatile OSHeapHandle __OSCurrHeap;\nvoid* OSInitAlloc(void*, void*, int);\nOSHeapHandle OSCreateHeap(void*, void*);\nvoid OSDestroyHeap(size_t idx);\nOSHeapHandle OSSetCurrentHeap(OSHeapHandle);\nany_t OSAllocFromHeap(OSHeapHandle heap, size_t size);\nsize_t OSCheckHeap(OSHeapHandle);\nvoid OSFreeToHeap(OSHeapHandle heap, void* ptr);\n#define OSAlloc(size) OSAllocFromHeap(__OSCurrHeap, (size))\n#define OSFree(ptr) OSFreeToHeap(__OSCurrHeap, (ptr))\n#define __DOLPHIN_OSARENA_H_\nvoid* OSGetArenaHi(void);\nvoid* OSGetArenaLo(void);\nvoid OSSetArenaHi(void* addr);\nvoid OSSetArenaLo(void* addr);\nvoid* OSAllocFromArenaLo(u32 size, u32 align);\nvoid* OSAllocFromArenaHi(u32 size, u32 align);\n#define DOLPHIN_OS_OSCONTEXT_H\n#define DOLPHIN_OS_FORWARD_H\ntypedef u16 OSError;\ntypedef s16 __OSInterrupt;\ntypedef u32 OSInterruptMask;\ntypedef struct OSContext OSContext;\ntypedef struct OSThreadQueue OSThreadQueue;\ntypedef struct OSMutexQueue OSMutexQueue;\ntypedef struct OSMutexLink OSMutexLink;\ntypedef struct OSThread OSThread;\ntypedef struct _OSThread_Unk1 OSThread_Unk1;\ntypedef struct _OSThread_Unk2 OSThread_Unk2;\ntypedef struct _OSThread_Unk3 OSThread_Unk3;\ntypedef struct _OSThread_Unk4 OSThread_Unk4;\ntypedef struct OSAlarm OSAlarm;\ntypedef enum OSException {\n    OS_EXCEPTION_FLOATING_POINT = 7,\n    OS_EXCEPTION_COUNT = 15,\n} OSException;\ntypedef enum OSInterruptType {\n    OS_INTR_MEM_0,\n    OS_INTR_MEM_1,\n    OS_INTR_MEM_2,\n    OS_INTR_MEM_3,\n    OS_INTR_MEM_ADDRESS,\n    OS_INTR_DSP_AI,\n    OS_INTR_DSP_ARAM,\n    OS_INTR_DSP_DSP,\n    OS_INTR_AI_AI,\n    OS_INTR_EXI_0_EXI,\n    OS_INTR_EXI_0_TC,\n    OS_INTR_EXI_0_EXT,\n    OS_INTR_EXI_1_EXI,\n    OS_INTR_EXI_1_TC,\n    OS_INTR_EXI_1_EXT,\n    OS_INTR_EXI_2_EXI,\n    OS_INTR_EXI_2_TC,\n    OS_INTR_PI_CP,\n    OS_INTR_PI_PE_TOKEN,\n    OS_INTR_PI_PE_FINISH,\n    OS_INTR_PI_SI,\n    OS_INTR_PI_DI,\n    OS_INTR_PI_RSW,\n    OS_INTR_PI_ERROR,\n    OS_INTR_PI_VI,\n    OS_INTR_PI_DEBUG,\n    OS_INTR_PI_HSP,\n    OS_INTR_PI_ACR,\n    OS_INTR_28,\n    OS_INTR_29,\n    OS_INTR_30,\n    OS_INTR_31,\n    OS_INTR_MAX\n} OSInterruptType;\ntypedef enum {\n    EXI_STATE_DMA_ACCESS = (1 << 0),\n    EXI_STATE_IMM_ACCESS = (1 << 1),\n    EXI_STATE_SELECTED = (1 << 2),\n    EXI_STATE_ATTACHED = (1 << 3),\n    EXI_STATE_LOCKED = (1 << 4),\n    EXI_STATE_BUSY = EXI_STATE_DMA_ACCESS | EXI_STATE_IMM_ACCESS\n} EXIState;\ntypedef enum {\n    EXI_CHAN_0,\n    EXI_CHAN_1,\n    EXI_CHAN_2,\n    EXI_MAX_CHAN\n} EXIChannel;\ntypedef enum {\n    EXI_READ,\n    EXI_WRITE,\n    EXI_TYPE_2,\n    EXI_MAX_TYPE\n} EXIType;\ntypedef enum {\n    OS_THREAD_STATE_EXITED = 0,\n    OS_THREAD_STATE_READY = 1,\n    OS_THREAD_STATE_RUNNING = 2,\n    OS_THREAD_STATE_SLEEPING = 4,\n    OS_THREAD_STATE_MORIBUND = 8\n} OSThreadState;\ntypedef enum {\n    OS_THREAD_DETACHED = (1 << 0)\n} OSThreadFlag;\ntypedef void (*__OSExceptionHandler)(OSException exception,\n                                     OSContext* context);\ntypedef void (*OSErrorHandler)(OSError error, OSContext* context, ...);\ntypedef void (*EXICallback)(EXIChannel, OSContext*);\ntypedef void (*OSSwitchThreadCallback)(OSThread*, OSThread*);\ntypedef OSThread_Unk3* (*OSThreadFunc)(OSThread_Unk4*);\ntypedef void (*OSAlarmHandler)(OSAlarm* alarm, OSContext* context);\nstruct OSContext {\n    u32 gprs[32]; // at 0x0\n    u32 cr; // at 0x80\n    u32 lr; // at 0x84\n    u32 ctr; // at 0x88\n    u32 xer; // at 0x8C\n    f64 fprs[32]; // at 0x90\n    f64 fpscr; // at 0x190\n    u32 srr0; // at 0x198\n    u32 srr1; // at 0x19C\n    u16 mode; // at 0x1A0\n    u16 state; // at 0x1A2\n    u32 gqrs[8]; // at 0x1A4\n    f64 psfs[32]; // at 0x1C8\n};\nextern OSContext* OS_CURRENT_CONTEXT ;\nextern OSContext* OS_CURRENT_FPU_CONTEXT ;\nvoid OSSaveFPUContext(OSContext*);\nvoid OSSetCurrentContext(OSContext*);\nOSContext* OSGetCurrentContext(void);\nbool OSSaveContext(OSContext*);\nvoid OSLoadContext(OSContext*);\nany_t OSGetStackPointer(void);\nvoid OSSwitchFiber(void*, void*);\nvoid OSSwitchFiberEx(u32, u32, u32, u32, void*, void*);\nvoid OSClearContext(OSContext*);\nvoid OSInitContext(OSContext* ctx, u32 pc, u32 newsp);\nvoid OSDumpContext(const OSContext*);\nvoid __OSContextInit(void);\nvoid __OSLoadFPUContext(u32 _, OSContext* fpuctx);\nvoid OSLoadFPUContext(OSContext* fpuctx);\nvoid OSSwitchFPUContext(OSException _, OSContext* ctx);\nvoid __OSSaveFPUContext(u32 unused1, u32 unused2, OSContext* fpuctx);\n#define __DOLPHIN_OSTIME_H_\ntypedef s64 OSTime;\ntypedef u32 OSTick;\ntypedef struct OSCalendarTime {\n    int sec; // seconds after the minute [0, 61]\n    int min; // minutes after the hour [0, 59]\n    int hour; // hours since midnight [0, 23]\n    int mday; // day of the month [1, 31]\n    int mon; // month since January [0, 11]\n    int year; // years in AD [1, ...]\n    int wday; // days since Sunday [0, 6]\n    int yday; // days since January 1 [0, 365]\n    int msec; // milliseconds after the second [0,999]\n    int usec; // microseconds after the millisecond [0,999]\n} OSCalendarTime;\nvoid OSTicksToCalendarTime(u64 ticks, OSCalendarTime* td);\ns64 OSGetTime(void);\nOSTick OSGetTick(void);\nOSTime __OSTimeToSystemTime(OSTime);\nOSTime __OSGetSystemTime(void);\nextern u32 __OSBusClock ;\n#define OS_BUS_CLOCK __OSBusClock\n#define OS_TIMER_CLOCK (OS_BUS_CLOCK / 4)\n#define OSTicksToSeconds(ticks) ((ticks) / (OS_TIMER_CLOCK))\n#define OSTicksToMilliseconds(ticks) ((ticks) / (OS_TIMER_CLOCK / 1000))\n#define OSSecondsToTicks(sec) ((sec) * (OS_TIMER_CLOCK))\n#define OSMillisecondsToTicks(msec) ((msec) * (OS_TIMER_CLOCK / 1000))\n#define OSMicrosecondsToTicks(usec) (((usec) * (OS_TIMER_CLOCK / 125000)) / 8)\n#define OSNanosecondsToTicks(nsec) (((nsec) * (OS_TIMER_CLOCK / 125000)) / 8000)\n#define OS_SOUND_MODE_MONO 0\n#define OS_SOUND_MODE_STEREO 1\nvoid OSReport(char*, ...);\n void OSPanic(char* file, int line, char* msg, ...);\n#define OSRoundUp32B(x) (((u32) (x) + 32 - 1) & ~(32 - 1))\n#define OSRoundDown32B(x) (((u32) (x)) & ~(32 - 1))\n#define OS_CACHED_REGION_PREFIX 0x8000\n#define OS_BASE_CACHED (OS_CACHED_REGION_PREFIX << 16)\n#define OSPhysicalToCached(paddr) ((void*) ((u32) (paddr) + OS_BASE_CACHED))\n/// A label in a jump table\ntypedef void (*jmp_t)(void);\n/// A jump table\ntypedef jmp_t jtbl_t[];\n#define NOT_IMPLEMENTED asm { nop }\n#define UNK_T M2C_UNK\n#define UNK_RET M2C_UNK\n#define UNK_PARAMS\n#define UNK_SIZE_ARRAY [0]\n#define U32_TO_F32 4503599627370496.0\n#define S32_TO_F32 4503601774854144.0\n#define ASM asm\n#define LITERAL static ATTRIBUTE_USED\ntypedef struct {\n    char gpr;\n    char fpr;\n    char reserved[2];\n    char* input_arg_area;\n    char* reg_save_area;\n} __va_list[1];\ntypedef __va_list va_list;\nvoid* __va_arg(va_list v_list, unsigned char type);\n#define va_start(ap, fmt) ((void) fmt, __builtin_va_info(&ap))\n#define va_arg(ap, t) (*((t*) __va_arg(ap, _var_arg_typeof(t))))\n#define va_end(ap) (void) 0\ntypedef struct {\n    uint open_mode : 2;\n    uint io_mode : 3;\n    uint buffer_mode : 2;\n    uint file_kind : 3;\n    uint file_orientation : 2;\n    uint binary_io : 1;\n} __file_modes;\ntypedef struct FILE FILE;\nstruct FILE {\n    int handle;\n    __file_modes mode;\n    int state;\n    unsigned char is_dynamically_allocated;\n    unsigned char char_buffer;\n    unsigned char char_buffer_overflow;\n    unsigned char ungetc_buffer[2];\n    wchar_t ungetwc_buffer[2];\n    unsigned long position;\n    unsigned char* buffer;\n    unsigned long buffer_size;\n    unsigned char* buffer_ptr;\n    unsigned long buffer_len;\n    unsigned long buffer_alignment;\n    unsigned long saved_buffer_len;\n    unsigned long buffer_pos;\n    int position_proc;\n    int read_proc;\n    int write_proc;\n    int close_proc;\n    int idle_proc;\n    FILE* next_file_struct;\n};\nint puts(const char* s);\nint printf(const char*, ...);\nint sprintf(char* s, const char* format, ...);\nint vprintf(const char* format, va_list arg);\nint vsprintf(char* s, const char* format, va_list arg);\nenum __file_kinds {\n    __closed_file,\n    __disk_file,\n    __console_file,\n    __unavailable_file\n};\nenum __file_orientation {\n    __unoriented,\n    __char_oriented,\n    __wide_oriented\n};\nint fwide(FILE* stream, int mode);\n#define METROTRK_DOLPHIN_TRK_H\nvoid EnableMetroTRKInterrupts(void);\n#define METROTRK_INTRINSICS_H\nvoid __sync(void);\nvoid __isync(void);\nint __cntlzw(unsigned int);\nfloat sqrtf__Ff(float);\nfloat __fnmsubs(float, float, float);\ndouble __fabs(double);\nfloat __fabsf(float);\ndouble __frsqrte(double);\nvoid* __memcpy(void* dst, const void* src, unsigned long n);\n#define __MEM_TRK_H__\n void* TRK_memcpy(void* dst, const void* src, unsigned long n);\n void* TRK_memset(void* dst, int val, unsigned long n);\n#define RUNTIME_GECKO_EXCEPTIONPPC_H\ntypedef struct __eti_init_info {\n    void* eti_start;\n    void* eti_end;\n    void* code_start;\n    unsigned long code_size;\n} __eti_init_info;\nint __register_fragment(__eti_init_info*, char* TOC);\nvoid __unregister_fragment(int fragmentID);\n#define RUNTIME_GECKO_SETJMP_H\nvoid longjmp(unk_t env, int val);\nint __setjmp(unk_t env, unk_t, unk_t);\n#define RUNTIME___INIT_CPP_EXCEPTIONS_H\nvoid __fini_cpp_exceptions(void);\nvoid __init_cpp_exceptions(void);\n#define ___mem_\n void* memset(void* dst, int val, unsigned long n);\n void __fill_mem(void* dst, int val, unsigned long n);\n void* memcpy(void* dst, const void* src, unsigned long n);\n#define RUNTIME_GLOBAL_DESTRUCTOR_CHAIN_H\nvoid __destroy_global_chain(void);\n#define RUNTIME_RUNTIME_H\nu64 __shl2i(unk_t, bool, s8);\nvoid __cvt_sll_flt(void);\nvoid __cvt_dbl_usll(void);\nvoid __cvt_fp2unsigned(void);\n#define __CSTRING_H__\nint wcstombs(void* dst, const void* src, size_t len);\nint memcmp(const void* str1, const void* str2, size_t len);\nvoid* memchr(const void* str, int c, size_t len);\nvoid* memmove(void* dst, const void* src, size_t len);\n#define DOLPHIN_AI_AI\ntypedef void (*AISCallback)(u32 count);\ntypedef void (*AIDCallback)(void);\nextern vu32 __AIRegs[8] ;\nAIDCallback AIRegisterDMACallback(AIDCallback);\nvoid AIInitDMA(u32 addr, u32 length);\nvoid AIStartDMA(void);\nvoid AISetStreamPlayState(u32 state);\nu32 AIGetStreamPlayState(void);\nvoid AISetDSPSampleRate(u32 rate);\nu32 AIGetDSPSampleRate(void);\nvoid AISetStreamSampleRate(u32 rate);\nu32 AIGetStreamSampleRate(void);\nvoid AISetStreamVolLeft(u8 volume);\nu8 AIGetStreamVolLeft(void);\nvoid AISetStreamVolRight(u8 volume);\nu8 AIGetStreamVolRight(void);\nvoid AIInit(u8* stack);\nvoid AIResetStreamSampleCount(void);\nvoid AISetStreamTrigger(u32 trigger);\n#define _AMCEXI2STUBS_H_\nvoid EXI2_Init(void);\nvoid EXI2_EnableInterrupts(void);\nbool EXI2_Poll(void);\nbool EXI2_ReadN(void);\nbool EXI2_WriteN(void);\nvoid EXI2_Reserve(void);\nvoid EXI2_Unreserve(void);\nbool AMC_IsStub(void);\n#define DOLPHIN_AR_AR_H\nvoid ARStartDMA(u32 type, u32 source, u32 dest, u32 length);\nEvent ARRegisterDMACallback(Event callback);\nvoid __ARChecksize(void);\nu32 ARGetBaseAddress(void);\nu32 ARGetSize(void);\nu32 ARGetDMAStatus(void);\nu32 ARAlloc(u32 length);\nu32 ARFree(u32* length);\nbool ARCheckInit(void);\nu32 ARInit(u32* stack_index_addr, u32 num_entries);\n#define DOLPHIN_AR_ARQ_H\n#define ARQ_CHUNK_SIZE_DEFAULT 4096\ntypedef enum ARQType {\n    ARQ_TYPE_MRAM_TO_ARAM,\n    ARQ_TYPE_ARAM_TO_MRAM,\n} ARQType;\ntypedef enum ARQPrio {\n    ARQ_PRIORITY_LOW,\n    ARQ_PRIORITY_HIGH,\n} ARQPrio;\ntypedef struct ARQRequest ARQRequest;\ntypedef void (*ARQCallback)(ARQRequest*);\nstruct ARQRequest {\n    ARQRequest* next;\n    u32 owner;\n    u32 type;\n    ARQPrio priority;\n    u32 source;\n    u32 dest;\n    size_t length;\n    ARQCallback callback;\n};\nvoid ARQInit(void);\nvoid ARQReset(void);\nvoid ARQPostRequest(ARQRequest* task, u32 owner, ARQType type,\n                    ARQPrio priority, u32 source, u32 dest, size_t length,\n                    ARQCallback callback);\nsize_t ARQGetChunkSize(void);\nvoid __ARQPopTaskQueueHi(void);\nvoid __ARQServiceQueueLo(void);\nvoid __ARQCallbackHack(ARQRequest*);\nvoid __ARQInitTempQueue(void);\nvoid __ARQPushTempQueue(ARQRequest* task);\nvoid __ARQInterruptServiceRoutine(void);\n#define DOLPHIN_AX_AX_H\nvoid AXInitEx(void);\n#define DOLPHIN_AX_AXALLOC_H\nvoid __AXAllocInit(void);\n#define DOLPHIN_AX_AXCL_H\nvoid __AXClInit(void);\n#define DOLPHIN_AX_AXINIT_H\nvoid __AXAuxInit(void);\n#define DOLPHIN_AX_AXOUT_H\nvoid __AXOutInit(void);\n#define DOLPHIN_AX_AXSPB_H\nvoid __AXSPBInit(void);\n#define DOLPHIN_AX_AXVPB_H\nvoid __AXVPBInit(void);\n#define DOLPHIN_AXFX_AXFX_H\nany_t AXFXAllocFunction(size_t size);\nvoid AXFXFreeFunction(any_t ptr);\nvoid AXFXSetHooks(any_t (*alloc_hook)(size_t), void (*free_hook)(any_t));\n#define DOLPHIN_BASE_PPCARCH_H\n// Gekko registers\n#define GQR0 0x390\n#define GQR1 0x391\n#define GQR2 0x392\n#define GQR3 0x393\n#define GQR4 0x394\n#define GQR5 0x395\n#define GQR6 0x396\n#define GQR7 0x397\nu32 PPCMfmsr(void);\nvoid PPCMtmsr(u32);\nu32 PPCMfhid0(void);\nvoid PPCMthid0(u32);\nu32 PPCMfl2cr(void);\nvoid PPCMtl2cr(u32);\nvoid PPCMtdec(u32);\nvoid PPCSync(void);\n void PPCHalt(void);\nu32 PPCMfhid2(void);\nvoid PPCMtwpar(u32);\nvoid PPCDisableSpeculation(void);\nvoid PPCSetFpNonIEEEMode(void);\nvoid PPCMthid2(u32);\n#define DOLPHIN_CARD_H\n#define DOLPHIN_CARD_FORWARD_H\ntypedef struct CARDFileInfo CARDFileInfo;\ntypedef struct CARDStat CARDStat;\ntypedef void (*CARDCallback)(EXIChannel chan, s32 result);\n#define __DOLPHIN_DSP_H_\n// https://github.com/kiwi515/open_rvl/blob/605e2a99ad053441f0ebb9b322a18433f92025e2/include/OS/OSInterrupt.h\n#define _OS_INTERRUPT_H_\n#define OS_INTRMASK_MEM_0 (0x80000000U >> OS_INTR_MEM_0)\n#define OS_INTRMASK_MEM_1 (0x80000000U >> OS_INTR_MEM_1)\n#define OS_INTRMASK_MEM_2 (0x80000000U >> OS_INTR_MEM_2)\n#define OS_INTRMASK_MEM_3 (0x80000000U >> OS_INTR_MEM_3)\n#define OS_INTRMASK_MEM_ADDRESS (0x80000000U >> OS_INTR_MEM_ADDRESS)\n#define OS_INTRMASK_DSP_AI (0x80000000U >> OS_INTR_DSP_AI)\n#define OS_INTRMASK_DSP_ARAM (0x80000000U >> OS_INTR_DSP_ARAM)\n#define OS_INTRMASK_DSP_DSP (0x80000000U >> OS_INTR_DSP_DSP)\n#define OS_INTRMASK_AI_AI (0x80000000U >> OS_INTR_AI_AI)\n#define OS_INTRMASK_EXI_0_EXI (0x80000000U >> OS_INTR_EXI_0_EXI)\n#define OS_INTRMASK_EXI_0_TC (0x80000000U >> OS_INTR_EXI_0_TC)\n#define OS_INTRMASK_EXI_0_EXT (0x80000000U >> OS_INTR_EXI_0_EXT)\n#define OS_INTRMASK_EXI_1_EXI (0x80000000U >> OS_INTR_EXI_1_EXI)\n#define OS_INTRMASK_EXI_1_TC (0x80000000U >> OS_INTR_EXI_1_TC)\n#define OS_INTRMASK_EXI_1_EXT (0x80000000U >> OS_INTR_EXI_1_EXT)\n#define OS_INTRMASK_EXI_2_EXI (0x80000000U >> OS_INTR_EXI_2_EXI)\n#define OS_INTRMASK_EXI_2_TC (0x80000000U >> OS_INTR_EXI_2_TC)\n#define OS_INTRMASK_PI_CP (0x80000000U >> OS_INTR_PI_CP)\n#define OS_INTRMASK_PI_PE_TOKEN (0x80000000U >> OS_INTR_PI_PE_TOKEN)\n#define OS_INTRMASK_PI_PE_FINISH (0x80000000U >> OS_INTR_PI_PE_FINISH)\n#define OS_INTRMASK_PI_SI (0x80000000U >> OS_INTR_PI_SI)\n#define OS_INTRMASK_PI_DI (0x80000000U >> OS_INTR_PI_DI)\n#define OS_INTRMASK_PI_RSW (0x80000000U >> OS_INTR_PI_RSW)\n#define OS_INTRMASK_PI_ERROR (0x80000000U >> OS_INTR_PI_ERROR)\n#define OS_INTRMASK_PI_VI (0x80000000U >> OS_INTR_PI_VI)\n#define OS_INTRMASK_PI_DEBUG (0x80000000U >> OS_INTR_PI_DEBUG)\n#define OS_INTRMASK_PI_HSP (0x80000000U >> OS_INTR_PI_HSP)\n#define OS_INTRMASK_MEM (OS_INTRMASK_MEM_0 | OS_INTRMASK_MEM_1 | OS_INTRMASK_MEM_2 | OS_INTRMASK_MEM_3 | OS_INTRMASK_MEM_ADDRESS)\n#define OS_INTRMASK_AI (OS_INTRMASK_AI_AI)\n#define OS_INTRMASK_DSP (OS_INTRMASK_DSP_AI | OS_INTRMASK_DSP_ARAM | OS_INTRMASK_DSP_DSP)\n#define OS_INTRMASK_EXI_0 (OS_INTRMASK_EXI_0_EXI | OS_INTRMASK_EXI_0_TC | OS_INTRMASK_EXI_0_EXT)\n#define OS_INTRMASK_EXI_1 (OS_INTRMASK_EXI_1_EXI | OS_INTRMASK_EXI_1_TC | OS_INTRMASK_EXI_1_EXT)\n#define OS_INTRMASK_EXI_2 (OS_INTRMASK_EXI_2_EXI | OS_INTRMASK_EXI_2_TC)\n#define OS_INTRMASK_EXI (OS_INTRMASK_EXI_0_EXI | OS_INTRMASK_EXI_0_TC | OS_INTRMASK_EXI_0_EXT | OS_INTRMASK_EXI_1_EXI | OS_INTRMASK_EXI_1_TC | OS_INTRMASK_EXI_1_EXT | OS_INTRMASK_EXI_2_EXI | OS_INTRMASK_EXI_2_TC)\n#define OS_INTRMASK_PI (OS_INTRMASK_PI_CP | OS_INTRMASK_PI_SI | OS_INTRMASK_PI_DI | OS_INTRMASK_PI_RSW | OS_INTRMASK_PI_ERROR | OS_INTRMASK_PI_VI | OS_INTRMASK_PI_PE_TOKEN | OS_INTRMASK_PI_PE_FINISH | OS_INTRMASK_PI_DEBUG | OS_INTRMASK_PI_HSP)\n#define OS_INTRMASK_PI_PE (OS_INTRMASK_PI_PE_TOKEN | OS_INTRMASK_PI_PE_FINISH)\ntypedef void (*OSInterruptHandler)(__OSInterrupt, OSContext*);\nextern volatile u32 __OSLastInterruptSrr0;\nextern volatile s16 __OSLastInterrupt;\nextern volatile s64 __OSLastInterruptTime;\n/// @sz{4}\nextern unk_t lbl_804D738C;\nvoid __RAS_OSDisableInterrupts_begin(void);\nvoid __RAS_OSDisableInterrupts_end(void);\nbool OSDisableInterrupts(void);\nbool OSEnableInterrupts(void);\nbool OSRestoreInterrupts(bool);\nOSInterruptHandler __OSSetInterruptHandler(__OSInterrupt, OSInterruptHandler);\nOSInterruptHandler __OSGetInterruptHandler(__OSInterrupt);\nvoid __OSInterruptInit(void);\nu32 __OSMaskInterrupts(u32);\nu32 __OSUnmaskInterrupts(u32);\nu32 SetInterruptMask(OSInterruptMask mask, OSInterruptMask current);\nvoid __OSDispatchInterrupt(OSException exception, OSContext* context);\n#define HW_REG(reg, type) *(volatile type*) (uintptr_t) (reg)\nextern volatile u16 __DSPRegs[] ;\ntypedef void (*DSPCallback)(void* task);\ntypedef struct _DSPTaskInfo {\n    /*0x00*/ volatile u32 state;\n    /*0x04*/ volatile u32 priority;\n    /*0x08*/ volatile u32 flags;\n    /*0x0C*/ u16* iram_mmem_addr;\n    /*0x10*/ u32 iram_length;\n    /*0x14*/ u32 iram_addr;\n    /*0x18*/ u16* dram_mmem_addr;\n    /*0x1C*/ u32 dram_length;\n    /*0x20*/ u32 dram_addr;\n    /*0x24*/ u16 dsp_init_vector;\n    /*0x26*/ u16 dsp_resume_vector;\n    /*0x28*/ DSPCallback init_cb;\n    /*0x2C*/ DSPCallback res_cb;\n    /*0x30*/ DSPCallback done_cb;\n    /*0x34*/ DSPCallback req_cb;\n    /*0x38*/ struct _DSPTaskInfo* next;\n    /*0x3C*/ struct _DSPTaskInfo* prev;\n    OSTime t_context;\n    OSTime t_task;\n} DSPTaskInfo;\nu32 DSPCheckMailToDSP(void);\nu32 DSPCheckMailFromDSP(void);\nu32 DSPReadMailFromDSP(void);\nvoid DSPSendMailToDSP(u32 mail);\nvoid DSPInit(void);\nbool DSPCheckInit(void);\nvoid __DSP_debug_printf(const char* fmt, ...);\nvoid __DSPHandler(__OSInterrupt intr, OSContext* ctx);\nvoid __DSP_boot_task(DSPTaskInfo* task);\nvoid __DSP_insert_task(DSPTaskInfo* task);\nvoid __DSP_remove_task(DSPTaskInfo* task);\nDSPTaskInfo* DSPAddTask(DSPTaskInfo* task);\nvoid __DSP_exec_task(DSPTaskInfo*, DSPTaskInfo*);\nvoid DSPCancelTask(void);\nvoid* DSPAssertTask(DSPTaskInfo* task);\n#define __DOLPHIN_DVD_H_\n#define DOLPHIN_DVD_FORWARD_H\ntypedef struct DVDCommandBlock DVDCommandBlock;\ntypedef void (*DVDCBCallback)(s32 result, DVDCommandBlock* block);\n// https://github.com/kiwi515/open_rvl/blob/fe0742f3ed2090041d5a3c98b98da5ff3546338a/include/OS/OSThread.h\n#define _OSTHREAD_H_\n#define OS_PRIORITY_MIN 0\n#define OS_PRIORITY_MAX 31\n#define OS_THREAD_STACK_MAGIC 0xDEADBABE\nstruct OSThreadQueue {\n    struct OSThread* head; // at 0x0\n    struct OSThread* tail; // at 0x4\n};\nstruct OSMutexQueue {\n    struct OSMutex* head; // at 0x0\n    struct OSMutex* tail; // at 0x4\n};\nstruct OSMutexLink {\n    struct OSMutex* next; // at 0x0\n    struct OSMutex* prev; // at 0x4\n};\nstruct OSThread {\n    OSContext context;\n    u16 state; // at 0x2C8\n    u16 flags; // at 0x2CA\n    s32 suspend; // at 0x2CC\n    s32 priority; // at 0x2D0\n    s32 WORD_0x2D4; // at 0x2D4\n    u32 WORD_0x2D8; // at 0x2D8\n    OSThreadQueue* queue; // at 0x2DC\n    struct OSThread* next; // at 0x2E0\n    struct OSThread* prev; // at 0x2E4\n    OSThreadQueue threadQueue; // at 0x2E8\n    struct OSMutex* mutex; // at 0x2F0\n    OSMutexQueue mutexQueue; // at 0x2F4\n    struct OSThread* next2; // at 0x2FC\n    struct OSThread* prev2; // at 0x300\n    u32* stackBegin; // at 0x304\n    u32* stackEnd; // at 0x308\n    u32 WORD_0x30C; // at 0x30C\n    u32 ARR_0x310[2]; // at 0x310\n};\nextern OSThreadQueue OS_THREAD_QUEUE ;\nextern OSThread* OS_CURRENT_THREAD ;\nOSSwitchThreadCallback OSSetSwitchThreadCallback(OSSwitchThreadCallback);\nvoid __OSThreadInit(void);\nvoid OSSetCurrentThread(OSThread*);\nvoid OSInitMutexQueue(OSMutexQueue*);\nvoid OSInitThreadQueue(OSThreadQueue*);\nOSThread* OSGetCurrentThread(void);\nbool OSIsThreadTerminated(OSThread*);\ns32 OSDisableScheduler(void);\ns32 OSEnableScheduler(void);\ns32 __OSGetEffectivePriority(OSThread*);\nvoid __OSPromoteThread(OSThread*, s32);\nvoid __OSReschedule(void);\nvoid OSYieldThread(void);\nbool OSCreateThread(OSThread*, OSThreadFunc, OSThread_Unk1*, OSThread_Unk2*,\n                    u32, s32, u16);\nvoid OSExitThread(OSThread*);\nvoid OSCancelThread(OSThread*);\nbool OSJoinThread(OSThread*, void*);\nvoid OSDetachThread(OSThread*);\ns32 OSResumeThread(OSThread*);\ns32 OSSuspendThread(OSThread*);\nvoid OSSleepThread(OSThreadQueue*);\nvoid OSWakeupThread(OSThreadQueue*);\nbool OSSetThreadPriority(OSThread*, s32);\nvoid OSClearStack(u8);\nvoid OSSleepTicks(s64);\nvoid CheckThreadQueue(void);\nvoid UnsetRun(OSThread* thread);\nvoid OSCheckActiveThreads(void);\nvoid SetEffectivePriority(void);\nvoid SelectThread(void);\nstruct bb2struct {\n    u32 _00;\n    u32 _04;\n    s32 _08; // size?\n    u32 FSTMaxLength;\n    void* FSTLocationInRam;\n};\ntypedef struct {\n    char gameName[4];\n    char company[2];\n    u8 diskNumber;\n    u8 gameVersion;\n    u8 streaming;\n    u8 streamingBufSize;\n    u8 padding[22];\n} DVDDiskID;\ntypedef struct {\n    u32 bootFilePosition;\n    u32 FSTPosition;\n    u32 FSTLength;\n    u32 FSTMaxLength;\n    void* FSTAddress;\n    u32 userPosition;\n    u32 userLength;\n    u32 padding0;\n} DVDBuffer;\nstruct DVDCommandBlock {\n    /*0x00*/ DVDCommandBlock* next;\n    /*0x04*/ DVDCommandBlock* prev;\n    /*0x08*/ u32 command;\n    /*0x0C*/ s32 state;\n    /*0x10*/ u32 offset;\n    /*0x14*/ u32 length;\n    /*0x18*/ void* addr;\n    /*0x1C*/ u32 currTransferSize;\n    /*0x20*/ u32 transferredSize;\n    /*0x24*/ DVDDiskID* id;\n    /*0x28*/ DVDCBCallback callback;\n    /*0x2C*/ void* userData;\n};\ntypedef struct DVDFileInfo DVDFileInfo;\ntypedef void (*DVDCallback)(s32 result, DVDFileInfo* fileInfo);\nstruct DVDFileInfo {\n    /*0x00*/ DVDCommandBlock cb;\n    /*0x30*/ u32 startAddr;\n    /*0x34*/ u32 length;\n    /*0x38*/ DVDCallback callback;\n};\ntypedef struct DVDDriveInfo {\n    u16 revisionLevel;\n    u16 deviceCode;\n    u32 releaseDate;\n    u8 padding[24];\n} DVDDriveInfo;\n// Minimum transfer size.\n#define DVD_MIN_TRANSFER_SIZE 32\n// DVD states.\n#define DVD_STATE_FATAL_ERROR -1\n#define DVD_STATE_END 0\n#define DVD_STATE_BUSY 1\n#define DVD_STATE_WAITING 2\n#define DVD_STATE_COVER_CLOSED 3\n#define DVD_STATE_NO_DISK 4\n#define DVD_STATE_COVER_OPEN 5\n#define DVD_STATE_WRONG_DISK 6\n#define DVD_STATE_MOTOR_STOPPED 7\n#define DVD_STATE_PAUSING 8\n#define DVD_STATE_IGNORED 9\n#define DVD_STATE_CANCELED 10\n#define DVD_STATE_RETRY 11\n// File info states.\n#define DVD_FILEINFO_READY 0\n#define DVD_FILEINFO_BUSY 1\n// DVD results.\n#define DVD_RESULT_GOOD 0\n#define DVD_RESULT_FATAL_ERROR -1\n#define DVD_RESULT_IGNORED -2\n#define DVD_RESULT_CANCELED -3\n#define DVD_AIS_SUCCESS 0\nextern OSThreadQueue __DVDThreadQueue;\ntypedef void (*DVDLowCallback)(u32 intType);\nDVDLowCallback DVDLowClearCallback(void);\nvoid DVDInit(void);\nbool DVDOpen(char*, DVDFileInfo*);\nbool DVDClose(DVDFileInfo*);\nbool DVDChangeDir(char*);\nbool DVDFastOpen(s32 entrynum, DVDFileInfo* fileInfo);\nbool DVDReadAsyncPrio(DVDFileInfo* fileInfo, void* addr, s32 length,\n                      s32 offset, DVDCallback callback, s32 prio);\ns32 DVDConvertPathToEntrynum(const char* pathPtr);\nvoid DVDReset(void);\ns32 DVDCancel(DVDCommandBlock* block);\ns32 DVDGetDriveStatus(void);\nvoid __CARDSetDiskID(const DVDDiskID* id);\nbool DVDReadAbsAsyncForBS(DVDCommandBlock* block, void* addr, s32 length,\n                          s32 offset, DVDCBCallback callback);\nbool DVDReadDiskID(DVDCommandBlock* block, DVDDiskID* diskID,\n                   DVDCBCallback callback);\nbool DVDCheckDisk(void);\nvoid __DVDPrepareResetAsync(DVDCBCallback callback);\nbool DVDSetAutoInvalidation(bool autoInval);\n#define DVDReadAsync(fileInfo, addr, length, offset, callback) DVDReadAsyncPrio((fileInfo), (addr), (length), (offset), (callback), 2)\ns32 DVDGetCommandBlockStatus(const DVDCommandBlock* block);\nbool DVDCancelAsync(DVDCommandBlock* block, DVDCBCallback callback);\nint DVDCancelAll(void);\nDVDDiskID* DVDGetCurrentDiskID(void);\nu32 CategorizeError(u32 error);\nbool DVDCancelStreamAsync(DVDCommandBlock* block, DVDCBCallback callback);\nint DVDCancelStream(DVDCommandBlock* block);\nbool DVDStopStreamAtEndAsync(DVDCommandBlock* block, DVDCBCallback callback);\nbool DVDInquiryAsync(DVDCommandBlock* block, void* addr,\n                     DVDCBCallback callback);\nbool DVDReadAbsAsyncPrio(DVDCommandBlock* block, void* addr, s32 length,\n                         s32 offset, DVDCBCallback callback, s32 prio);\nbool DVDSeekAbsAsyncPrio(DVDCommandBlock* block, u32 offset,\n                         DVDCBCallback callback, s32 prio);\nbool DVDPrepareStreamAbsAsync(DVDCommandBlock* block, u32 length, u32 offset,\n                              DVDCBCallback callback);\n#define DOLPHIN_OS_OSALARM_H\nstruct OSAlarm {\n    OSAlarmHandler handler;\n    u32 tag;\n    OSTime fire;\n    OSAlarm* prev;\n    OSAlarm* next;\n    OSTime period;\n    OSTime start;\n};\nvoid OSSetAlarm(OSAlarm* alarm, OSTime tick, OSAlarmHandler handler);\nvoid OSCancelAlarm(OSAlarm* alarm);\nvoid OSInitAlarm(void);\nvoid OSCreateAlarm(OSAlarm* alarm);\nvoid OSSetPeriodicAlarm(OSAlarm* alarm, OSTime start, OSTime period,\n                        OSAlarmHandler handler);\n#define DOLPHIN_OS_OSEXI_H\ntypedef struct EXIControl {\n    EXICallback exiCallback;\n    EXICallback tcCallback;\n    EXICallback extCallback;\n    vu32 state;\n    int immLen;\n    u8* immBuf;\n    u32 dev;\n    u32 id;\n    s32 idTime;\n    int items;\n    struct {\n        u32 dev;\n        EXICallback callback;\n    } queue[3];\n} EXIControl;\n#define EXI_REG_MAX 5\nextern vu32 __EXIRegs[EXI_MAX_CHAN][5] ;\nvoid SetExiInterruptMask(EXIChannel, volatile EXIControl*);\nbool EXIImm(EXIChannel, void* buf, s32 len, u32 type, EXICallback);\nbool EXIImmEx(EXIChannel, void* buf, s32 len, u32 mode);\nbool EXIDma(EXIChannel, void* buf, s32 len, u32 type, EXICallback);\nbool EXISync(EXIChannel);\nu32 EXIClearInterrupts(EXIChannel, bool exi, bool tc, bool ext);\nEXICallback EXISetExiCallback(EXIChannel, EXICallback exiCallback);\nbool EXIProbe(EXIChannel);\ns32 EXIProbeEx(EXIChannel);\nbool EXIAttach(EXIChannel, EXICallback);\nbool EXIDetach(EXIChannel);\nbool EXISelect(EXIChannel, u32 dev, u32 freq);\nbool EXIDeselect(EXIChannel);\nvoid EXIInit(void);\nbool EXILock(EXIChannel, u32 dev, EXICallback unlockedCallback);\nbool EXIUnlock(EXIChannel);\nu32 EXIGetState(EXIChannel);\ns32 EXIGetID(EXIChannel, u32 dev, u32* id);\n#define CARD_FAT_CHECKSUM 0\n#define CARD_FAT_CHECKSUMINV 1\n#define CARD_FAT_CHECKCODE 2\n#define CARD_FAT_FREEBLOCKS 3\n#define CARD_FAT_LASTSLOT 4\n#define CARD_FAT_AVAIL 0\n#define CARD_RESULT_UNLOCKED 1\n#define CARD_RESULT_READY 0\n#define CARD_RESULT_BUSY -1\n#define CARD_RESULT_WRONGDEVICE -2\n#define CARD_RESULT_NOCARD -3\n#define CARD_RESULT_NOFILE -4\n#define CARD_RESULT_IOERROR -5\n#define CARD_RESULT_BROKEN -6\n#define CARD_RESULT_EXIST -7\n#define CARD_RESULT_NOENT -8\n#define CARD_RESULT_INSSPACE -9\n#define CARD_RESULT_NOPERM -10\n#define CARD_RESULT_LIMIT -11\n#define CARD_RESULT_NAMETOOLONG -12\n#define CARD_RESULT_ENCODING -13\n#define CARD_RESULT_CANCELED -14\n#define CARD_RESULT_FATAL_ERROR -128\n#define CARD_NUM_SYSTEM_BLOCK 5\n#define CARD_WORKAREA_SIZE (5 * 8 * 1024)\n#define CARD_SYSTEM_BLOCK_SIZE (8 * 1024)\n#define CARD_READ_SIZE 512\n#define CARD_MAX_FILE 127\n#define CARD_COMMENT_SIZE 64\n#define CARD_FILENAME_MAX 32\n#define CARD_ICON_MAX 8\n#define CARD_ICON_WIDTH 32\n#define CARD_ICON_HEIGHT 32\n#define CARD_BANNER_WIDTH 96\n#define CARD_BANNER_HEIGHT 32\n#define CARD_STAT_ICON_NONE 0\n#define CARD_STAT_ICON_C8 1\n#define CARD_STAT_ICON_RGB5A3 2\n#define CARD_STAT_ICON_MASK 3\n#define CARD_STAT_BANNER_NONE 0\n#define CARD_STAT_BANNER_C8 1\n#define CARD_STAT_BANNER_RGB5A3 2\n#define CARD_STAT_BANNER_MASK 3\n#define CARD_STAT_ANIM_LOOP 0x00\n#define CARD_STAT_ANIM_BOUNCE 0x04\n#define CARD_STAT_ANIM_MASK 0x04\n#define CARD_STAT_SPEED_END 0\n#define CARD_STAT_SPEED_FAST 1\n#define CARD_STAT_SPEED_MIDDLE 2\n#define CARD_STAT_SPEED_SLOW 3\n#define CARD_STAT_SPEED_MASK 3\n#define CARD_MAX_MOUNT_STEP (CARD_NUM_SYSTEM_BLOCK + 2)\n#define CARD_PAGE_SIZE 128\n#define CARD_SEG_SIZE 512\n#define CARD_STAT_SPEED_END 0\n#define CARD_STAT_SPEED_FAST 1\n#define CARD_STAT_SPEED_MIDDLE 2\n#define CARD_STAT_SPEED_SLOW 3\n#define CARD_STAT_SPEED_MASK 3\n#define CARD_ATTR_PUBLIC 0x04\n#define CARD_ATTR_NO_COPY 0x08\n#define CARD_ATTR_NO_MOVE 0x10\n#define CARD_ATTR_GLOBAL 0x20\n#define CARD_ATTR_COMPANY 0x40\nstruct CARDFileInfo {\n    s32 chan;\n    s32 fileNo;\n    s32 offset;\n    s32 length;\n    u16 iBlock;\n    u16 __padding;\n};\ntypedef struct CARDDir {\n    u8 gameName[4];\n    u8 company[2];\n    u8 _padding0;\n    u8 bannerFormat;\n    u8 fileName[32];\n    u32 time; // seconds since 01/01/2000 midnight\n    u32 iconAddr; // 0xffffffff if not used\n    u16 iconFormat;\n    u16 iconSpeed;\n    u8 permission;\n    u8 copyTimes;\n    u16 startBlock;\n    u16 length;\n    u8 _padding1[2];\n    u32 commentAddr; // 0xffffffff if not used\n} CARDDir;\ntypedef struct CARDDirCheck {\n    u8 padding0[64 - 2 * 4];\n    u16 padding1;\n    s16 checkCode;\n    u16 checkSum;\n    u16 checkSumInv;\n} CARDDirCheck;\ntypedef struct CARDControl {\n    bool attached;\n    s32 result;\n    u16 size;\n    u16 pageSize;\n    s32 sectorSize;\n    u16 cBlock;\n    u16 vendorID;\n    s32 latency;\n    u8 id[12];\n    union {\n        int mountStep;\n        int formatStep;\n    };\n    u32 scramble;\n    DSPTaskInfo task;\n    void* workArea;\n    CARDDir* currentDir;\n    u16* currentFat;\n    OSThreadQueue threadQueue;\n    u8 cmd[9];\n    s32 cmdlen;\n    vu32 mode;\n    int retry;\n    int repeat;\n    u32 addr;\n    void* buffer;\n    u32 xferred;\n    u16 freeNo;\n    u16 startBlock;\n    CARDFileInfo* fileInfo;\n    CARDCallback extCallback;\n    CARDCallback txCallback;\n    CARDCallback exiCallback;\n    CARDCallback apiCallback;\n    CARDCallback xferCallback;\n    CARDCallback eraseCallback;\n    CARDCallback unlockCallback;\n    OSAlarm alarm;\n    u32 cid;\n    const DVDDiskID* diskID;\n} CARDControl;\nextern CARDControl __CARDBlock[2];\ntypedef struct CARDID {\n    u8 serial[32]; // flashID[12] + timebase[8] + counterBias[4] + language[4]\n                   // +\n                   // XXX[4]\n    u16 deviceID;\n    u16 size;\n    u16 encode; // character set -- 0: S-JIS, 1: ANSI\n    u8 padding[512 - 32 - 5 * 2];\n    u16 checkSum;\n    u16 checkSumInv;\n} CARDID;\ns32 CARDClose(CARDFileInfo*);\nint CARDWrite(CARDFileInfo*, void* buf, s32 length, s32 offset);\nint CARDRead(CARDFileInfo*, void* buf, u32 length, u32 offset);\ns32 __CARDClearStatus(s32 chan);\ns32 __CARDReadStatus(s32 chan, u8* status);\nstatic s32 Retry(s32 chan);\nCARDDir* __CARDGetDirBlock(CARDControl*);\nu16* __CARDGetFatBlock(CARDControl* card);\ns32 __CARDUpdateFatBlock(s32 chan, u16* fat, CARDCallback);\nvoid __CARDDefaultApiCallback(s32 chan, s32 result);\nvoid __CARDSyncCallback(s32, s32);\n#define __CARDGetDirCheck(dir) ((CARDDirCheck*) &(dir)[CARD_MAX_FILE])\n#define CARDIsValidBlockNo(card, iBlock) (CARD_NUM_SYSTEM_BLOCK <= (iBlock) && (iBlock) < (card)->cBlock)\n#define DOLPHIN_CARD_CARDBIOS_H\ns32 __CARDEnableInterrupt(EXIChannel chan, bool enable);\ns32 __CARDEraseSector(EXIChannel chan, u32 addr, CARDCallback callback);\ns32 __CARDGetControlBlock(EXIChannel chan, CARDControl** pcard);\ns32 __CARDPutControlBlock(struct CARDControl* card, s32 result);\ns32 __CARDReadSegment(s32 chan, CARDCallback callback);\ns32 __CARDSync(s32 i);\ns32 __CARDWritePage(s32 chan, CARDCallback callback);\nvoid __CARDExiHandler(EXIChannel chan, OSContext* context);\nvoid __CARDExtHandler(EXIChannel chan, OSContext* context);\nvoid CARDInit(void);\ns32 __CARDStart(s32 chan, CARDCallback txCallback, CARDCallback exiCallback);\ns32 CARDFreeBlocks(s32 chan, s32* byteNotUsed, s32* filesNotUsed);\ns32 CARDGetResultCode(s32 chan);\ns32 CARDGetSectorSize(s32 chan, u32* size);\nvoid __CARDTxHandler(EXIChannel chan, OSContext* context);\nvoid __CARDUnlockedHandler(EXIChannel chan, OSContext* context);\n#define DOLPHIN_CARD_CARDBLOCK_H\ns32 __CARDAllocBlock(s32 chan, u32 cBlock, CARDCallback callback);\ns32 __CARDFreeBlock(s32 chan, u16 nBlock, CARDCallback callback);\ns32 __CARDFreeBlock(s32 chan, u16 nBlock, CARDCallback callback);\ns32 __CARDAllocBlock(s32 chan, u32 cBlock, CARDCallback callback);\n#define DOLPHIN_CARD_CARDCHECK_H\nvoid __CARDCheckSum(void* ptr, int length, u16* checksum, u16* checksumInv);\ns32 __CARDVerify(CARDControl* card);\nvoid __CARDCheckSum(void* ptr, int length, u16* checksum, u16* checksumInv);\ns32 __CARDVerify(CARDControl* card);\ns32 CARDCheckExAsync(s32 chan, s32* xferBytes, CARDCallback callback);\ns32 CARDCheckAsync(s32 chan, CARDCallback callback);\n#define DOLPHIN_CARD_CARDCREATE_H\ns32 CARDCreateAsync(s32 chan, const char* fileName, u32 size,\n                    CARDFileInfo* fileInfo, CARDCallback callback);\n#define DOLPHIN_CARD_CARDDELETE_H\ns32 CARDFastDeleteAsync(s32 chan, s32 fileNo, CARDCallback callback);\ns32 CARDDeleteAsync(s32 chan, const char* fileName, CARDCallback callback);\n#define DOLPHIN_CARD_CARDDIR_H\ns32 __CARDUpdateDir(s32 chan, CARDCallback callback);\ns32 __CARDUpdateDir(s32 chan, CARDCallback callback);\n#define DOLPHIN_CARD_CARDFORMAT_H\nvoid FormatCallback(s32 chan, s32 result);\ns32 CARDFormatAsync(s32 chan, CARDCallback callback);\ns32 __CARDFormatRegionAsync(s32 chan, u16 encode, CARDCallback callback);\n#define DOLPHIN_CARD_CARDMOUNT_H\ns32 CARDUnmount(s32 chan);\nvoid __CARDMountCallback(s32 chan, s32 result);\ns32 CARDProbe(EXIChannel chan);\ns32 CARDProbeEx(EXIChannel chan, s32* memSize, s32* sectorSize);\ns32 DoMount(EXIChannel chan);\ns32 CARDMountAsync(s32 chan, void* workArea, CARDCallback detachCallback,\n                   CARDCallback attachCallback);\n#define DOLPHIN_CARD_CARDOPEN_H\nbool __CARDCompareFileName(CARDDir* ent, const char* filename);\ns32 __CARDAccess(CARDControl* card, CARDDir* ent);\nbool __CARDIsOpened(CARDControl* card, s32 fileno);\ns32 __CARDGetFileNo(CARDControl* card, const char* filename, s32* pfileno);\ns32 CARDFastOpen(EXIChannel chan, s32 fileno, CARDFileInfo* fileinfo);\ns32 CARDOpen(EXIChannel chan, const char* filename, CARDFileInfo* fileInfo);\ns32 __CARDIsPublic(CARDDir* ent);\ns32 CARDOpen(EXIChannel chan, const char* filename, CARDFileInfo* fileinfo);\nbool __CARDCompareFileName(CARDDir* ent, const char* filename);\nbool __CARDIsOpened(CARDControl* card, s32 fileno);\ns32 __CARDAccess(CARDControl* card, CARDDir* ent);\ns32 __CARDIsPublic(CARDDir* ent);\ns32 __CARDGetFileNo(CARDControl* card, const char* filename, s32* pfileno);\ns32 CARDFastOpen(EXIChannel chan, s32 fileno, CARDFileInfo* fileinfo);\n#define DOLPHIN_CARD_CARDRDWR_H\ns32 __CARDWrite(s32 chan, u32 addr, u32 length, void* dst,\n                CARDCallback callback);\ns32 __CARDRead(s32 chan, u32 addr, u32 length, void* dst,\n               CARDCallback callback);\nu32 CARDGetXferredBytes(s32 chan);\n#define DOLPHIN_CARD_CARDREAD_H\ns32 __CARDSeek(CARDFileInfo* fileInfo, s32 length, s32 offset,\n               CARDControl** pcard);\ns32 CARDReadAsync(CARDFileInfo* fileInfo, void* buf, s32 length, s32 offset,\n                  CARDCallback callback);\n#define DOLPHIN_CARD_CARDRENAME_H\ns32 CARDRenameAsync(s32 chan, const char* old, const char* new,\n                    CARDCallback callback);\n#define DOLPHIN_CARD_CARDSTAT_H\ns32 CARDGetStatus(s32 chan, s32 fileNo, CARDStat* stat);\ns32 CARDSetStatusAsync(s32 chan, s32 fileNo, CARDStat* stat,\n                       CARDCallback callback);\n#define DOLPHIN_CARD_CARDUNLOCK_H\ns32 __CARDUnlock(s32 chan, u8 flashID[12]);\ns32 DummyLen(void);\nu32 bitrev(u32 data);\ns32 ReadArrayUnlock(s32 chan, u32 data, void* rbuf, s32 rlen, s32 mode);\n#define DOLPHIN_CARD_CARDWRITE_H\ns32 CARDWriteAsync(CARDFileInfo* fileInfo, const void* buf, u32 length,\n                   s32 offset, CARDCallback callback);\n#define __DOLPHIN_DB_H__\ntypedef struct {\n    u32 bPresent;\n    u32 exceptionMask;\n    void (*ExceptionDestination)(void);\n    void* exceptionReturn;\n} DBInterface;\nvoid DBInit(void);\nbool DBIsDebuggerPresent(void);\nbool __DBIsExceptionMarked(u8 exception);\nvoid DBPrintf(const char* str, ...);\nint __DBIsExceptionMarked(u8 a);\n#define DOLPHIN_DVD_DVDERROR_H\nvoid __DVDStoreErrorCode(u32 error);\n#define DOLPHIN_DVD_DVDFS_H\ntypedef struct FSTEntry {\n    unsigned int isDirAndStringOff;\n    unsigned int parentOrPosition;\n    unsigned int nextEntryOrLength;\n} FSTEntry;\nvoid __DVDFSInit(void);\n#define DOLPHIN_DVD_DVDLOW_H\nvoid __DVDInitWA(void);\nvoid __DVDInterruptHandler(__OSInterrupt, OSContext*);\nvoid DVDLowRead(void*, u32, u32, DVDLowCallback);\nvoid DVDLowStopMotor(DVDLowCallback);\nvoid DVDLowRequestError(DVDLowCallback);\nvoid DVDLowSeek(u32, DVDLowCallback);\nvoid DVDLowAudioBufferConfig(u32, u32, DVDLowCallback);\nvoid DVDLowReadDiskID(DVDBuffer*, DVDLowCallback);\nvoid DVDLowRequestAudioStatus(u32, DVDLowCallback);\nvoid DVDLowAudioStream(u32, u32, u32, DVDLowCallback);\nvoid DVDLowInquiry(void*, DVDLowCallback);\nvoid DVDLowWaitCoverClose(DVDLowCallback);\nvoid DVDLowReset(void);\nvoid DVDLowBreak(void);\n#define DOLPHIN_DVD_DVDQUEUE_H\nvoid __DVDClearWaitingQueue(void);\nbool __DVDCheckWaitingQueue(void);\nint __DVDPushWaitingQueue(int a, DVDCommandBlock* b);\nbool __DVDDequeueWaitingQueue(DVDCommandBlock* a);\nDVDCommandBlock* __DVDPopWaitingQueue(void);\n#define DOLPHIN_DVD_FSTLOAD_H\nvoid __fstLoad(void);\nvoid cb(s32 param_1, DVDCommandBlock* block);\n#define DOLPHIN_GX_GXATTR_H\nvoid GXSetNumTexGens(u8 num);\nvoid GXSetTexCoordGen2(u32, s32, u32, s32, s32, s32);\nvoid GXInvalidateVtxCache(void);\nvoid GXSetArray(GXAttr attr, s32 base_ptr, u8 stride);\nvoid GXSetVtxAttrFmt(size_t vtxfmt, GXAttr attr, enum_t count, GXAttrType type,\n                     u8 frac);\nvoid GXClearVtxDesc(void);\nvoid GXSetVtxDesc(GXAttr attr, s32 type);\nvoid __GXSetVCD(void);\nvoid __GXSetVAT(void);\nvoid __GXSetVCD(void);\nvoid GXClearVtxDesc(void);\nvoid __GXXfVtxSpecs(void);\nvoid __GXSetVAT(void);\nvoid GXInvalidateVtxCache(void);\n#define DOLPHIN_GX_GXBUMP_H\nvoid __GXUpdateBPMask(void);\nvoid GXSetIndTexCoordScale(s32, s32, s32);\nvoid GXSetIndTexMtx(s32, unk_t, s32);\nvoid XSetIndTexCoordScale(void);\nvoid GXSetIndTexOrder(s32, s32, s32);\nvoid GXSetNumIndStages(s32 arg0);\nvoid GXSetTevDirect(void);\nvoid __GXUpdateBPMask(void);\nvoid __GXFlushTextureState(void);\nvoid GXSetTevIndirect(s32, s32, u8, s32, s32, s32, s32, s32);\n#define DOLPHIN_GX_GXDISPLAYLIST_H\nvoid GXCallDisplayList(s32, s32);\n#define DOLPHIN_GX_GXFRAMEBUF_H\nextern GXRenderModeObj GXPal528IntDf;\nextern GXRenderModeObj GXMpal480IntDf;\nextern GXRenderModeObj GXFrameBuf_804011E0;\nextern GXRenderModeObj GXFrameBuf_804011A4;\nextern GXRenderModeObj GXNtsc480IntDf;\nvoid GXClearBoundingBox(void);\nvoid GXCopyDisp(u32, s8);\nvoid GXCopyTex(u32, GXBool);\nvoid GXSetCopyFilter(s8, u8*, s8, u8*);\nvoid GXSetDispCopyDst(s32 arg0);\nvoid GXSetDispCopyFrame2Field(s32 arg0);\nvoid GXSetDispCopyFrame2Field(s32 arg0);\nvoid GXSetDispCopyGamma(s32 arg0);\nvoid GXSetDispCopySrc(u16 arg0, u32 arg1, u16 arg2, u16 arg3);\nu32 GXSetDispCopyYScale(f32);\nvoid GXSetTexCopyDst(s32, s32, s32, s32);\nvoid GXSetTexCopySrc(u16 arg0, u32 arg1, u16 arg2, u16 arg3);\nvoid GXSetCopyClamp(s32);\nvoid GXSetCopyClear(u8*, s32);\n#define DOLPHIN_GX_GXGEOMETRY_H\nvoid GXBegin(GXPrimitive type, GXVtxFmt vtxfmt, u16 nverts);\nvoid GXSetLineWidth(u8 width, GXTexOffset texOffsets);\nvoid GXSetPointSize(u8 pointSize, GXTexOffset texOffsets);\nvoid GXEnableTexOffsets(GXTexCoordID coord, GXBool line_enable,\n                        GXBool point_enable);\nvoid GXSetCullMode(GXCullMode mode);\nvoid GXSetCoPlanar(GXBool enable);\nvoid __GXSetDirtyState(void);\nvoid __GXSendFlushPrim(void);\n#define _GXINIT_H_\nGXFifoObj* GXInit(GXFifoObj* fifo, u32 size);\nvoid __GXDefaultTexRegionCallback(void);\nunk_t __GXDefaultTlutRegionCallback(u32 arg0);\n#define DOLPHIN_GX_GXLIGHT_H\n#define DOLPHIN_GX___TYPES_H\n#define GX_WRITE_U8(ub) WGPIPE.u8 = ((u8*) &ub);\n#define GX_WRITE_U16(us) WGPIPE.u16 = (*(u16*) &us);\n#define GX_WRITE_U32(ui) WGPIPE.u32 = (*(u32*) &ui);\n#define GX_WRITE_F32(f) WGPIPE.f32 = (*(f32*) &f);\n#define INSERT_FIELD(reg, value, nbits, shift) (reg) = ((u32) (reg) & ~(((1 << (nbits)) - 1) << (shift))) | ((u32) (value) << (shift));\n// GXFifoObj private fields\ntypedef struct __GXFifoObj {\n    void* base; // at 0x00\n    void* end; // at 0x04\n    u32 size; // at 0x08\n    u32 hiWaterMark; // at 0x0C\n    u32 loWaterMark; // at 0x10\n    void* readPtr; // at 0x14\n    void* writePtr; // at 0x18\n    s32 x1C; // at 0x1C\n    u8 x20_pad[4]; // at 0x20\n} __GXFifoObj;\nstruct GXContext {\n    union {\n        u32 u32;\n        u16 u16[2];\n    } x0; // at 0x000\n    u16 x4; // at 0x004\n    u16 x6; // at 0x006\n    OSContext* x8; // at 0x008\n    u32 xC; // at 0x00C\n    u32 x10; // at 0x010\n    u32 x14; // at 0x014\n    u32 x18; // at 0x018\n    s32 x1C_data[(0x3C - 0x1C) / 4]; // at 0x01C\n    s32 x3C_data[(0x5C - 0x3C) / 4]; // at 0x03C\n    s32 x5C_data[(0x7C - 0x5C) / 4]; // at 0x05C\n    s32 x7C; // at 0x07C\n    s32 x80; // at 0x080\n    s32 x84; // at 0x084\n    u32 x88_data[4]; // at 0x088\n    u32 x98_data[4]; // at 0x098\n    u32 ambColors[2]; // at 0x0A8\n    u32 matColors[2]; // at 0x0B0\n    s32 xB8[GX_MAX_TEXCOORD]; // at 0x0B8\n    u8 xD8_pad[0xF8 - 0xD8]; // at 0x0D8\n    s32 xF8; // at 0x0F8\n    s32 xFC; // at 0x0FC\n    u32 x100_data[(0x130 - 0x100) / 4]; // at 0x100\n    u32 x130_data[(0x170 - 0x130) / 4]; // at 0x130\n    u32 x170_data[(0x1AC - 0x170) / 4]; // at 0x170\n    u8 x1AC_pad[0x1B0 - 0x1AC]; // at 0x1AC\n    GXTexRegionCallback callbacks[(0x1D0 - 0x1B0) / 4]; // at 0x1B0\n    u32 x1D0[(0x204 - 0x1D0) / 4]; // at 0x1D0\n    u32 x204; // at 0x204\n    u8 x208_pad[0x2D0 - 0x208]; // at 0x208\n    struct {\n        u32 unk[4];\n    } x2D0[(0x410 - 0x2D0) / 16]; // at 0x2D0\n    GXTexRegionCallback tex_region_cb; // at 0x410\n    GXTexRegionCallback tlut_region_cb; // at 0x414\n    u32 x418; // at 0x418\n    GXBool x41C; // at 0x41C\n    GXBool x41D; // at 0x41D\n    u32 projection_type; // at 0x420\n    f32 projection_v[6]; // at 0x424\n    f32 viewport_v[6]; // at 0x43C\n    u8 x454_pad[4]; // at 0x454\n    f32 x458; // at 0x458\n    s32 x45C_data[0x20 / 4]; // at 0x45C\n    s32 x47C_data[0x20 / 4]; // at 0x47C\n    u32 x49C_data[(0x4EC - 0x49C) / 4]; // at 0x49C\n    u8 x4EC; // at 0x4EC\n    GXBool x4ED; // at 0x4ED\n    u8 x4EE; // at 0x4EE\n    u32 x4F0_flags; // at 0x4F0\n    GXFifoObj* fifo; // at 0x4F4\n    u8 x4F8_pad[0x570 - 0x4F8]; // at 0x4F8\n    u32 dirtyFlags; // at 0x570\n};\nstruct GXSettings {\n    u16 z_mode;\n    u16 color_settings;\n    u16 dst_alpha;\n    u16 x6;\n    u16 x8;\n};\nextern volatile u32* __piReg;\nextern volatile u16* __peReg;\nextern volatile u16* __cpReg;\nextern volatile u32* __memReg;\nextern volatile union WGPIPE_T {\n    s8 s8;\n    u8 u8;\n    s16 s16;\n    u16 u16;\n    u32 u32;\n    s32 s32;\n    unk_t ptr;\n    f32 f32;\n} WGPIPE ;\ntypedef struct __GXGPFifo {\n    u16 x0;\n    s16 x2;\n    s16 x4;\n    s16 x6;\n    u8 x8_pad[0x38 - 0x8];\n} __GXGPFifo;\nstruct GXContexts {\n    GXContext* main;\n    GXContext* null;\n};\nstruct GXTexObj {\n    u8 x0_pad[0x8];\n    u32 dimensions;\n    u8 xC_pad[0x8];\n    GXTexFmt tex_fmt; // at 0x14\n    u8 x18_pad[8]; // at 0x18\n};\ntypedef struct _GXLightObj {\n    char x0[0xC]; // at 0x00\n    GXColor color; // at 0x0C\n    f32 aa; // at 0x10\n    f32 ab; // at 0x14\n    f32 ac; // at 0x18\n    f32 ka; // at 0x1C\n    f32 kb; // at 0x20\n    f32 kc; // at 0x24\n    Vec3 pos; // at 0x28\n    Vec3 dir; // at 0x34\n} GXLightObj;\nvoid GXInitLightAttn(GXLightObj* light, f32 aa, f32 ab, f32 ac, f32 ka, f32 kb,\n                     f32 kc);\nvoid GXInitLightSpot(GXLightObj* light, f32 angle, GXSpotFn fn);\nvoid GXInitLightDistAttn(GXLightObj* light, f32 ref_distance,\n                         f32 ref_brightness, GXDistAttnFn dist_fn);\nvoid GXInitLightPos(GXLightObj* light, f32 x, f32 y, f32 z);\nvoid GXInitLightDir(GXLightObj* light, f32 x, f32 y, f32 z);\nvoid GXInitLightColor(GXLightObj* light, GXColor color);\nvoid GXLoadLightObjImm(GXLightObj* light, GXLightID light_id);\nvoid GXSetChanAmbColor(GXChannelID chan, GXColor* color);\nvoid GXSetChanMatColor(GXChannelID chan, GXColor* color);\nvoid GXSetNumChans(u8 num_chans);\nvoid GXSetChanCtrl(GXChannelID chan, GXBool enable, GXColorSrc amb_src,\n                   GXColorSrc mat_src, u32 light_mask, GXDiffuseFn diff_fn,\n                   GXAttnFn attn_fn);\n#define DOLPHIN_GX_GXMISC_H\nvoid GXPixModeSync(void);\nvoid GXWaitDrawDone(void);\nvoid GXSetDrawDone(void);\nvoid GXSetMisc(s32, u32);\nvoid GXPokeAlphaMode(GXCompare func, u8 threshold);\nvoid GXPokeAlphaRead(s32 mode);\nvoid GXPokeAlphaUpdate(bool update_enable);\nvoid GXPokeColorUpdate(bool update_enable);\nvoid GXPokeDstAlpha(bool enable, u8 alpha);\nvoid GXPokeDither(s32 dither);\nvoid GXPokeZMode(bool compare_enable, GXCompare func, bool update_enable);\nvoid GXTokenInterruptHandler(__OSInterrupt _, OSContext* current_ctx);\nGXDrawDoneCallback GXSetDrawDoneCallback(GXDrawDoneCallback cb);\nvoid GXFinishInterruptHandler(__OSInterrupt _, OSContext* current_ctx);\nvoid __GXPEInit(void);\nvoid GXPokeBlendMode(GXBlendMode type, GXBlendFactor src_factor,\n                     GXBlendFactor dst_factor, GXLogicOp op);\n#define DOLPHIN_GX_GXPERF_H\nvoid GXClearGPMetric(void);\nvoid GXSetGPMetric(u32, u32);\n#define DOLPHIN_GX_GXPIXEL_H\ntypedef struct _GXFogAdjTbl {\n    u16 r[10];\n} GXFogAdjTbl;\nvoid GXSetFieldMode(int, int);\nvoid GXInitFogAdjTable(GXFogAdjTbl*, u16, Mtx44);\nvoid GXSetFogRangeAdj(s8, u16, GXFogAdjTbl*);\nvoid GXSetPixelFmt(int, int);\nvoid GXSetFieldMask(s32, s8);\nvoid GXSetDstAlpha(u8, u8);\nvoid GXSetDither(u8);\nvoid GXSetZCompLoc(u8);\nvoid GXSetZMode(u8, u32, u32);\nvoid GXSetAlphaUpdate(u8);\nvoid GXSetColorUpdate(u8);\nvoid GXSetBlendMode(s32, s32, s32, s32);\nvoid GXSetFog(s32, GXColor, f32, f32, f32, f32);\n#define DOLPHIN_GX_GXSTUBS_H\nvoid __GXSetRange(f32 nearz, f32);\n#define DOLPHIN_GX_GXTEV_H\nvoid GXSetTevOp(GXTevStageID id, GXTevMode mode);\nvoid GXSetTevColorIn(GXTevStageID stage, GXTevColorArg a, GXTevColorArg b,\n                     GXTevColorArg c, GXTevColorArg d);\nvoid GXSetTevAlphaIn(GXTevStageID stage, GXTevAlphaArg a, GXTevAlphaArg b,\n                     GXTevAlphaArg c, GXTevAlphaArg d);\nvoid GXSetTevColorOp(GXTevStageID stage, GXTevOp op, GXTevBias bias,\n                     GXTevScale scale, GXBool clamp, GXTevRegID out_reg);\nvoid GXSetTevAlphaOp(GXTevStageID stage, GXTevOp op, GXTevBias bias,\n                     GXTevScale scale, GXBool clamp, GXTevRegID out_reg);\nvoid GXSetTevColor(GXTevRegID id, GXColor color);\nvoid GXSetTevKColor(GXTevKColorID id, GXColor color);\nvoid GXSetTevKColorSel(GXTevStageID stage, GXTevKColorSel sel);\nvoid GXSetTevKAlphaSel(GXTevStageID stage, GXTevKAlphaSel sel);\nvoid GXSetTevSwapMode(GXTevStageID stage, GXTevSwapSel ras_sel,\n                      GXTevSwapSel tex_sel);\nvoid GXSetTevSwapModeTable(GXTevSwapSel table, GXTevColorChan red,\n                           GXTevColorChan green, GXTevColorChan blue,\n                           GXTevColorChan alpha);\nvoid GXSetAlphaCompare(GXCompare comp0, u8 ref0, GXAlphaOp op, GXCompare comp1,\n                       u8 ref1);\nvoid GXSetZTexture(GXZTexOp op, GXTexFmt fmt, u32 bias);\nvoid GXSetTevOrder(GXTevStageID stage, GXTexCoordID coord, GXTexMapID map,\n                   GXChannelID color);\nvoid GXSetNumTevStages(u8 nStages);\nvoid GXSetTevColorS10(s32, GXColorS10);\nvoid GXSetTevClampMode(s32 arg0, s32 arg1);\n#define DOLPHIN_GX_GXTEXTURE_H\nvoid __GXSetSUTexSize(void);\nvoid GXLoadTexObjPreLoaded(unk_t, unk_t, s32);\nvoid GXInvalidateTexAll(GXContext*, s32, u8*);\nGXTexRegionCallback GXSetTlutRegionCallback(GXTexRegionCallback arg0);\nvoid __SetSURegs(s32, s32);\nvoid GXInitTexObj(unk_t, u32, u16, u16, s32, s32, s32, s8);\ns32 GXGetTexObjWidth(GXTexObj* tex_obj);\ns32 GXGetTexObjHeight(GXTexObj* tex_obj);\nGXTexFmt GXGetTexObjFmt(GXTexObj* tex_obj);\nvoid GXLoadTexObj(unk_t arg0, s32 arg1);\nvoid GXInitTlutRegion(s32* arg0, s32 arg1, s32 arg2);\ns32 GXGetTexBufferSize(u16, u16, u32, u8, u8);\nvoid GXInitTexObjCI(unk_t, s32, u16, u16, s32, s32, s32, s8);\nvoid GXInitTexObjLOD(unk_t, s32, s32, s32, s8, s32, f32, f32, f32);\nvoid GXInitTlutObj(unk_t, u32, s32, u16);\nvoid GXLoadTlut(unk_t, s32);\nvoid __GXSetTmemConfig(s32);\nGXTexRegionCallback GXSetTexRegionCallback(GXTexRegionCallback arg0);\nvoid GXInitTexCacheRegion(unk_t, s8, u32, s32, u32, s32, s32);\nvoid __GetImageTileCount(u32, s16, s16, s32*, s32*, s32*);\n#define DOLPHIN_GX_GXTRANSFORM_H\nvoid GXProject(f32 x, // model coordinates\n               f32 y, f32 z,\n               Mtx mtx, // model-view matrix\n               f32* pm, // projection matrix, as returned by GXGetProjectionv\n               f32* vp, // viewport, as returned by GXGetViewportv\n               f32* sx, // screen coordinates\n               f32* sy, f32* sz);\nvoid GXSetViewportJitter(f32 left, f32 top, f32 wd, f32 ht, f32 nearz,\n                         f32 farz, u32 field);\nvoid GXSetViewport(f32, f32, f32, f32, f32, f32);\nvoid GXLoadTexMtxImm(void* arg0, u32 arg1, s32 arg2);\nvoid GXSetCurrentMtx(s32 arg0);\nvoid GXLoadNrmMtxImm(unk_t, s32);\nvoid GXLoadPosMtxImm(unk_t, s32);\nvoid GXSetScissor(s32 left, s32 top, s32 width, s32 height);\nvoid GXSetScissorBoxOffset(u32 x_off, u32 y_off);\nvoid GXGetProjectionv(f32* proj);\nvoid GXGetViewportv(f32* viewport_v);\nvoid GXSetProjection(Mtx44 proj, s32 projection_type);\nvoid WriteMTXPS4x3(float* src, float* dst);\nvoid WriteMTXPS3x3from3x4(float* src, float* dst);\nvoid WriteMTXPS4x2(float* src, float* dst);\nvoid __GXSetMatrixIndex(s32);\nvoid GXSetClipMode(s32);\n#define _DOLPHIN_GXVERT_H_\nstatic inline void GXPosition3f32(const f32 x, const f32 y, const f32 z)\n{\n    WGPIPE.f32 = x;\n    WGPIPE.f32 = y;\n    WGPIPE.f32 = z;\n}\nstatic inline void GXPosition3u16(const u16 x, const u16 y, const u16 z)\n{\n    WGPIPE.u16 = x;\n    WGPIPE.u16 = y;\n    WGPIPE.u16 = z;\n}\nstatic inline void GXPosition3s16(const s16 x, const s16 y, const s16 z)\n{\n    WGPIPE.s16 = x;\n    WGPIPE.s16 = y;\n    WGPIPE.s16 = z;\n}\nstatic inline void GXPosition3u8(const u8 x, const u8 y, const u8 z)\n{\n    WGPIPE.u8 = x;\n    WGPIPE.u8 = y;\n    WGPIPE.u8 = z;\n}\nstatic inline void GXPosition3s8(const s8 x, const s8 y, const s8 z)\n{\n    WGPIPE.s8 = x;\n    WGPIPE.s8 = y;\n    WGPIPE.s8 = z;\n}\nstatic inline void GXPosition2f32(const f32 x, const f32 y)\n{\n    WGPIPE.f32 = x;\n    WGPIPE.f32 = y;\n}\nstatic inline void GXPosition2u16(const u16 x, const u16 y)\n{\n    WGPIPE.u16 = x;\n    WGPIPE.u16 = y;\n}\nstatic inline void GXPosition2s16(const s16 x, const s16 y)\n{\n    WGPIPE.s16 = x;\n    WGPIPE.s16 = y;\n}\nstatic inline void GXPosition2u8(const u8 x, const u8 y)\n{\n    WGPIPE.u8 = x;\n    WGPIPE.u8 = y;\n}\nstatic inline void GXPosition2s8(const s8 x, const s8 y)\n{\n    WGPIPE.s8 = x;\n    WGPIPE.s8 = y;\n}\nstatic inline void GXPosition1x8(const u8 index)\n{\n    WGPIPE.u8 = index;\n}\nstatic inline void GXPosition1x16(const u16 index)\n{\n    WGPIPE.u16 = index;\n}\nstatic inline void GXNormal3f32(const f32 nx, const f32 ny, const f32 nz)\n{\n    WGPIPE.f32 = nx;\n    WGPIPE.f32 = ny;\n    WGPIPE.f32 = nz;\n}\nstatic inline void GXNormal3s16(const s16 nx, const s16 ny, const s16 nz)\n{\n    WGPIPE.s16 = nx;\n    WGPIPE.s16 = ny;\n    WGPIPE.s16 = nz;\n}\nstatic inline void GXNormal3s8(const s8 nx, const s8 ny, const s8 nz)\n{\n    WGPIPE.s8 = nx;\n    WGPIPE.s8 = ny;\n    WGPIPE.s8 = nz;\n}\nstatic inline void GXNormal1x8(const u8 index)\n{\n    WGPIPE.u8 = index;\n}\nstatic inline void GXNormal1x16(const u16 index)\n{\n    WGPIPE.u16 = index;\n}\nstatic inline void GXColor4u8(const u8 r, const u8 g, const u8 b, const u8 a)\n{\n    WGPIPE.u8 = r;\n    WGPIPE.u8 = g;\n    WGPIPE.u8 = b;\n    WGPIPE.u8 = a;\n}\nstatic inline void GXColor3u8(const u8 r, const u8 g, const u8 b)\n{\n    WGPIPE.u8 = r;\n    WGPIPE.u8 = g;\n    WGPIPE.u8 = b;\n}\nstatic inline void GXColor3f32(const f32 r, const f32 g, const f32 b)\n{\n    WGPIPE.u8 = (u8) (r * 255.0);\n    WGPIPE.u8 = (u8) (g * 255.0);\n    WGPIPE.u8 = (u8) (b * 255.0);\n}\nstatic inline void GXColor1u32(const u32 clr)\n{\n    WGPIPE.u32 = clr;\n}\nstatic inline void GXColor1u16(const u16 clr)\n{\n    WGPIPE.u16 = clr;\n}\nstatic inline void GXColor1x8(const u8 index)\n{\n    WGPIPE.u8 = index;\n}\nstatic inline void GXColor1x16(const u16 index)\n{\n    WGPIPE.u16 = index;\n}\nstatic inline void GXTexCoord2f32(const f32 s, const f32 t)\n{\n    WGPIPE.f32 = s;\n    WGPIPE.f32 = t;\n}\nstatic inline void GXTexCoord2u16(const u16 s, const u16 t)\n{\n    WGPIPE.u16 = s;\n    WGPIPE.u16 = t;\n}\nstatic inline void GXTexCoord2s16(const s16 s, const s16 t)\n{\n    WGPIPE.s16 = s;\n    WGPIPE.s16 = t;\n}\nstatic inline void GXTexCoord2u8(const u8 s, const u8 t)\n{\n    WGPIPE.u8 = s;\n    WGPIPE.u8 = t;\n}\nstatic inline void GXTexCoord2s8(const s8 s, const s8 t)\n{\n    WGPIPE.s8 = s;\n    WGPIPE.s8 = t;\n}\nstatic inline void GXTexCoord1f32(const f32 s)\n{\n    WGPIPE.f32 = s;\n}\nstatic inline void GXTexCoord1u16(const u16 s)\n{\n    WGPIPE.u16 = s;\n}\nstatic inline void GXTexCoord1s16(const s16 s)\n{\n    WGPIPE.s16 = s;\n}\nstatic inline void GXTexCoord1u8(const u8 s)\n{\n    WGPIPE.u8 = s;\n}\nstatic inline void GXTexCoord1s8(const s8 s)\n{\n    WGPIPE.s8 = s;\n}\nstatic inline void GXTexCoord1x8(const u8 index)\n{\n    WGPIPE.u8 = index;\n}\nstatic inline void GXTexCoord1x16(const u16 index)\n{\n    WGPIPE.u16 = index;\n}\nstatic inline void GXMatrixIndex1u8(const u8 index)\n{\n    WGPIPE.u8 = index;\n}\n// header for shared private declarations of unsplit GX files\n// todo: move into split sections' GX_*.c\n#define DOLPHIN_GX_GX_UNKNOWN_001___GX_UNKNOWN_001_H\n/* 004DAE6C */ extern const f32 GXTexture_804DE28C;\n/* 004DAE68 */ extern const f32 GXTexture_804DE288;\n/* 004DAE64 */ extern const f32 GXTexture_804DE284;\n/* 004DAE60 */ extern const f32 GXTexture_804DE280;\n/* 004DAE5C */ extern const f32 GXTexture_804DE27C;\n/* 004DAE58 */ extern const f32 GXTexture_804DE278;\n/* 004DAE50 */ extern const f32 GXTexture_804DE270[2];\n/* 004DAE48 */ extern const f32 GXTexture_804DE268[2];\n/* 004DAE08 */ extern const f32 GXFrameBuf_804DE228[2];\n/* 004DAE00 */ extern const f32 GXFrameBuf_804DE220[2];\n/* 0033BA08 */ extern void GXLoadTexObjPreLoaded(unk_t, unk_t, s32);\n#define DOLPHIN_GX___GXBUMP_H\nvoid __GXFlushTextureState(void);\n#define DOLPHIN_GX___GXFIFO_H\nvoid __GXFifoInit(void);\nvoid GXSetGPFifo(GXFifoObj* fifo);\nvoid GXSetCPUFifo(GXFifoObj* fifo);\nvoid GXInitFifoBase(GXFifoObj* fifo, void* base, u32 size);\n#define DOLPHIN_GX___GXINIT_H\n/* 004D2788 */ extern GXContexts __GXContexts;\nstatic inline void set_x2(GXBool value)\n{\n    __GXContexts.main->x0.u16[1] = value;\n}\n#define DOLPHIN_GX___GXMISC_HG\n/* 00339BB0 */ extern void __GXPEInit(void);\nvoid GXPokeZMode(bool compare_enable, GXCompare func, bool update_enable);\nvoid GXPokeDstAlpha(bool enable, u8 alpha);\nvoid GXPokeAlphaRead(s32 mode);\nvoid GXPokeAlphaMode(GXCompare func, u8 threshold);\nvoid GXPokeBlendMode(GXBlendMode type, GXBlendFactor src_factor,\n                     GXBlendFactor dst_factor, GXLogicOp op);\nvoid GXPokeDither(s32 dither);\nvoid GXPokeAlphaUpdate(bool update_enable);\nvoid GXPokeColorUpdate(bool update_enable);\n// header for shared declarations private to the gx module\n#define DOLPHIN_GX___GX_UNKNOWN_001_H\nvoid GXInitTlutRegion(s32*, s32, s32);\nvoid GXInitTexCacheRegion(unk_t, s8, u32, s32, u32, s32, s32);\n#define __MTX_H__\nvoid C_MTXOrtho(Mtx44 m, f32 t, f32 b, f32 l, f32 r, f32 n, f32 f);\nvoid C_MTXPerspective(Mtx44 m, f32 fovY, f32 aspect, f32 n, f32 f);\nvoid C_MTXIdentity(Mtx m);\nvoid C_MTXCopy(const Mtx src, Mtx dst);\nvoid C_MTXConcat(const Mtx a, const Mtx b, Mtx ab);\nvoid C_MTXConcatArray(const Mtx a, const Mtx* srcBase, Mtx* dstBase,\n                      u32 count);\nvoid C_MTXTranspose(const Mtx src, Mtx xPose);\nvoid C_MTXFrustum(Mtx44 m, f32 t, f32 b, f32 l, f32 r, f32 n, f32 f);\nu32 C_MTXInverse(const Mtx src, Mtx inv);\nu32 C_MTXInvXpose(const Mtx src, Mtx invX);\nvoid PSMTXIdentity(Mtx m);\nvoid PSMTXCopy(const Mtx src, Mtx dst);\nvoid PSMTXConcat(const Mtx a, const Mtx b, Mtx ab);\nvoid PSMTXConcatArray(const Mtx a, const Mtx* srcBase, Mtx* dstBase,\n                      u32 count);\nvoid PSMTXTranspose(const Mtx src, Mtx xPose);\nu32 PSMTXInverse(const Mtx src, Mtx inv);\nu32 PSMTXInvXpose(const Mtx src, Mtx invX);\n#define MTXIdentity PSMTXIdentity\n#define MTXCopy PSMTXCopy\n#define MTXConcat PSMTXConcat\n#define MTXConcatArray PSMTXConcatArray\n#define MTXTranspose PSMTXTranspose\n#define MTXInverse PSMTXInverse\n#define MTXInvXpose PSMTXInvXpose\nvoid C_MTXQuat(Mtx m, const Quaternion* q);\nvoid C_MTXReflect(Mtx m, const Vec3* p, const Vec3* n);\nvoid C_MTXTrans(Mtx m, f32 xT, f32 yT, f32 zT);\nvoid C_MTXTransApply(const Mtx src, Mtx dst, f32 xT, f32 yT, f32 zT);\nvoid C_MTXScale(Mtx m, f32 xS, f32 yS, f32 zS);\nvoid C_MTXScaleApply(const Mtx src, Mtx dst, f32 xS, f32 yS, f32 zS);\nvoid C_MTXRotRad(Mtx m, char axis, f32 rad);\nvoid C_MTXRotTrig(Mtx m, char axis, f32 sinA, f32 cosA);\nvoid C_MTXRotAxisRad(Mtx m, const Vec3* axis, f32 rad);\nvoid C_MTXLookAt(Mtx m, Vec3* cam_pos, Vec3* up, Vec3* target);\nvoid PSMTXQuat(Mtx m, const Quaternion* q);\nvoid PSMTXReflect(Mtx m, const Vec3* p, const Vec3* n);\nvoid PSMTXTransApply(const Mtx src, Mtx dst, f32 xT, f32 yT, f32 zT);\nvoid PSMTXScaleApply(const Mtx src, Mtx dst, f32 xS, f32 yS, f32 zS);\nvoid PSMTXRotRad(Mtx m, char axis, f32 rad);\nvoid PSMTXRotTrig(Mtx m, char axis, f32 sinA, f32 cosA);\nvoid PSMTXRotAxisRad(Mtx m, const Vec3* axis, f32 rad);\n#define MTXQuat PSMTXQuat\n#define MTXReflect PSMTXReflect\n#define MTXTrans PSMTXTrans\n#define MTXTransApply PSMTXTransApply\n#define MTXScale PSMTXScale\n#define MTXScaleApply PSMTXScaleApply\n#define MTXRotRad PSMTXRotRad\n#define MTXRotTrig PSMTXRotTrig\n#define MTXRotAxisRad PSMTXRotAxisRad\nvoid PSVECCrossProduct(Vec3* a, Vec3* b, Vec3* axb);\nvoid PSVECSubtract(Vec3 const* a, Vec3 const* b, Vec3* ab);\nvoid PSVECNormalize(Vec3* a, Vec3* b);\nvoid PSMTXIdentity(Mtx m);\nvoid PSMTXTrans(Mtx m, f32 x_trans, f32 y_trans, f32 z_trans);\nvoid PSMTXScale(Mtx m, f32 x_scale, f32 y_scale, f32 z_scale);\nvoid C_MTXLightPerspective(Mtx m, f32 fov, f32 aspect, f32 x_scale,\n                           f32 y_scale, f32 z_x_mult, f32 z_y_mult);\n#define DOLPHIN_MTX_MTXVEC_H\nvoid PSMTXMUltiVec(Mtx, Vec3*, Vec3*);\nvoid PSMTXMultVecSR(Mtx, Vec3*, Vec3*);\n#define DOLPHIN_MTX_VEC_H\n#define VEC2_SQ_LEN(v) ((SQ((v).x) + SQ((v).y)))\n#define VEC3_SQ_LEN(v) ((SQ((v).x) + SQ((v).y) + SQ((v).z)))\nvoid PSVECAdd(Vec3* a, Vec3* b, Vec3* result);\nvoid PSVECScale(Vec3* src, Vec3* dst, float scale);\nfloat PSVECMag(Vec3* v);\nfloat PSVECDotProduct(Vec3* a, Vec3* b);\n#define DOLPHIN_OS_OSAUDIOSYSTEM_H\nvoid __OSInitAudioSystem(void);\nvoid __OSStopAudioSystem(void);\ntypedef struct OSBootInfo {\n    DVDDiskID DVDDiskID; // _00\n    u32 magic; // _20\n    u32 version; // _24\n    u32 memorySize; // _28\n    u32 consoleType; // _2C\n    void* arenaLo; // _30, overrides __ArenaLo if non-null\n    void* arenaHi; // _34, overrides FSTLocation if non-null\n    void* FSTLocation; // _38, start addr of FST area\n    u32 FSTMaxLength; // _3C, length of FST area\n} OSBootInfo;\n#define _OSCACHE_H_\nvoid DCFlushRange(void* addr, size_t nbytes);\nvoid DCStoreRange(void* addr, size_t nbytes);\nvoid DCInvalidateRange(void* addr, size_t nbytes);\nvoid DCFlushRangeNoSync(void* addr, size_t nbytes);\nvoid ICFlashInvalidate(void);\nvoid ICInvalidateRange(void* addr, size_t nbytes);\nvoid LCDisable(void);\nvoid __OSCacheInit(void);\nvoid DCZeroRange(register void* addr, register size_t nbytes);\nvoid ICEnable(void);\nvoid __LCEnable(void);\nvoid DCEnable(void);\nvoid LCEnable(void);\nu32 LCStoreData(void* destAddr, void* srcAddr, u32 nBytes);\nvoid LCQueueWait(register u32 len);\nvoid L2GlobalInvalidate(void);\nvoid L2Enable(void);\nvoid DMAErrorHandler(OSError error, OSContext* context, ...);\nvoid LCStoreBlocks(any_t dst, any_t src, u32 nblocks);\n#define DOLPHIN_OS_OSERROR_H\n#define OS_ERROR_SYSTEM_RESET 0\n#define OS_ERROR_MACHINE_CHECK 1\n#define OS_ERROR_DSI 2\n#define OS_ERROR_ISI 3\n#define OS_ERROR_EXTERNAL_INTERRUPT 4\n#define OS_ERROR_ALIGNMENT 5\n#define OS_ERROR_PROGRAM 6\n#define OS_ERROR_FLOATING_POINT 7\n#define OS_ERROR_DECREMENTER 8\n#define OS_ERROR_SYSTEM_CALL 9\n#define OS_ERROR_TRACE 10\n#define OS_ERROR_PERFORMACE_MONITOR 11\n#define OS_ERROR_BREAKPOINT 12\n#define OS_ERROR_SYSTEM_INTERRUPT 13\n#define OS_ERROR_THERMAL_INTERRUPT 14\n#define OS_ERROR_PROTECTION 15\n#define OS_ERROR_MAX (OS_ERROR_THERMAL_INTERRUPT + 1)\nOSErrorHandler OSSetErrorHandler(OSError error, OSErrorHandler handler);\nvoid __OSUnhandledException(u8 error, OSContext* context, u32 dsisr, u32 dar);\n#define DOLPHIN_OS_OSFONT_H\nu16 OSGetFontEncode(void);\n/** @file\n * @todo Should be called @c OS.h.\n */\n#define DOLPHIN_OS_OS_H\nextern vu32 __DIRegs[0x10] ;\n__OSExceptionHandler __OSGetExceptionHandler(u8);\n__OSExceptionHandler __OSSetExceptionHandler(u8, __OSExceptionHandler);\nu32 OSGetConsoleType(void);\nvoid OSInit(void);\nvoid __OSPSInit(void);\nvoid OSExceptionInit(void);\nvoid __OSDBIntegrator(void);\nvoid __OSDBJump(void);\nvoid __DBVECTOR(void);\nvoid __OSEVSetNumber(void);\nvoid __OSEVEnd(void);\nvoid OSExceptionVector(void);\nvoid OSDefaultExceptionHandler(void);\nvoid ClearArena(void);\nu32 __OSGetDIConfig(void);\n#define DOLPHIN_OS_OSLINK_H\nvoid __OSModuleInit(void);\n#define __DOLPHIN_OSMEMORY_H_\nextern volatile u16 __MEMRegs[64] ;\nu32 OSGetPhysicalMemSize(void);\nu32 OSGetConsoleSimulatedMemSize(void);\nvoid Config48MB(void);\nvoid RealMode(Event);\nvoid __OSInitMemoryProtection(void);\nvoid Config24MB(void);\n#define DOLPHIN_OS_OSMUTEX_H\ntypedef struct OSMutex {\n    OSThreadQueue queue; // at 0x00\n    OSThread* thread; // at 0x08\n    s32 lock; // at 0x0C\n    OSMutexLink link; // at 0x10\n} OSMutex;\nvoid OSInitMutex(OSMutex*);\nvoid OSLockMutex(OSMutex*);\nvoid OSUnlockMutex(OSMutex*);\nvoid __OSUnlockAllMutex(OSThread*);\nbool OSTryLockMutex(OSMutex*);\nvoid __OSCheckDeadLock(void);\nvoid __OSCheckMutexes(void);\nvoid __OSCheckMutex(void);\n#define DOLPHIN_OS_OSREBOOT_H\nvoid __OSReboot(u32 resetCode, bool forceMenu);\nvoid Run(Event);\nvoid __OSReboot(u32 resetCode, bool forceMenu);\n#define DOLPHIN_OS_OSRESET_H\ntypedef bool (*OSResetFunction)(bool);\ntypedef struct OSResetFunctionInfo OSResetFunctionInfo;\nstruct OSResetFunctionInfo {\n    OSResetFunction func;\n    u32 priority;\n    OSResetFunctionInfo* next;\n    OSResetFunctionInfo* prev;\n};\nvoid OSResetSystem(bool reset, u32 resetCode, bool forceMenu);\nvoid OSRegisterResetFunction(OSResetFunctionInfo* func);\nvoid __OSDoHotReset(s32 arg0);\n/// @todo @c enum\n#define OS_RESET_RESTART 0\n#define OS_RESET_HOTRESET 1\n#define OS_RESET_SHUTDOWN 2\nbool __OSCallResetFunctions(bool funcs_arg);\nu32 OSGetResetCode(void);\n#define DOLPHIN_OS_OSRESETSW_H\nstruct _OSResetSW_Unk1;\ntypedef bool (*OSResetSW_Predicate)(struct _OSResetSW_Unk1*);\ntypedef union {\n    OSResetSW_Predicate predicate;\n    struct {\n        u8 x0_addr_prefix;\n        u8 x1_addr_suffix;\n    } bytes;\n} OSResetSW_Predicate_Union;\ntypedef enum {\n    OSRESETSW_ENUM1_UNK0,\n    OSRESETSW_ENUM1_UNK1,\n    OSRESETSW_ENUM1_UNK2,\n    OSRESETSW_ENUM1_UNK3,\n    OSRESETSW_ENUM1_UNK4,\n    OSRESETSW_ENUM1_UNK5,\n    OSRESETSW_ENUM1_UNK6,\n} OSResetSW_Enum1;\ntypedef struct _OSResetSW_Unk1 {\n    OSResetSW_Predicate_Union x0_predicate_union;\n    s32 x4;\n    s32 x8;\n    u8* xC_buffer;\n    u8 x10_pad[0x14 - 0x10];\n    OSResetSW_Enum1 x14_enum;\n    u8 x18_pad[0x54 - 0x18];\n    u8* x54_buffer;\n    u8 x58_pad[0x5E - 0x58];\n    u8 x5E;\n    u8 x5F_pad[0x8E - 0x5F];\n    u8 x8E;\n    u8 x8F_pad[0x9A - 0x8F];\n    u8 x9A;\n    u8 x9B_pad[0xB4 - 0x9B];\n    u8* xB4_buffer;\n    u8 xB8_pad[0xBC - 0xB8];\n    u32 xBC_flags;\n    u8 xC0_pad[0xC4 - 0xC0];\n    bool xC4;\n    u8 xCC_pad[0xD0 - 0xCC];\n    bool xD0;\n    OSResetSW_Predicate xD4_predicate;\n} OSResetSW_Unk1;\ntypedef bool (*OSResetSW_MulticastPredicate)(OSResetSW_Predicate*);\nbool OSGetResetSwitchState(void);\nvoid __OSResetSWInterruptHandler(__OSInterrupt interrupt, OSContext* context);\nbool OSGetResetButtonState(void);\n#define DOLPHIN_OS_OSRTC\ntypedef struct OSSram {\n    u16 checkSum;\n    u16 checkSumInv;\n    u32 ead0;\n    u32 ead1;\n    u32 counterBias;\n    s8 displayOffsetH;\n    u8 ntd;\n    u8 language;\n    u8 flags;\n} OSSram;\ntypedef struct OSSramEx {\n    u8 flashID[2][12];\n    u32 wirelessKeyboardID;\n    u16 wirelessPadID[4];\n    u8 dvdErrorCode;\n    u8 _padding0;\n    u8 flashIDCheckSum[2];\n    u16 gbs;\n    u8 _padding1[2];\n} OSSramEx;\nOSSram* __OSLockSram(void);\nOSSramEx* __OSLockSramEx(void);\nvoid __OSUnlockSram(bool commit);\nvoid __OSUnlockSramEx(bool commit);\nbool __OSSyncSram(void);\nu32 OSGetWirelessID(u32 chan);\nvoid OSSetWirelessID(u32 chan, u16 id);\nu32 OSGetSoundMode(void);\nvoid OSSetSoundMode(u32 mode);\nu32 OSGetProgressiveMode(void);\nvoid OSSetProgressiveMode(u32 mode);\nvoid WriteSramCallback(EXIChannel unused0, OSContext* unused1);\nvoid __OSInitSram(void);\n#define DOLPHIN_OS_OSSERIAL_H\n#define SI_MAX_CHAN 4\n#define SI_MAX_COMCSR_INLNGTH 128\n#define SI_MAX_COMCSR_OUTLNGTH 128\n#define SI_ERROR_UNDER_RUN 0x0001\n#define SI_ERROR_OVER_RUN 0x0002\n#define SI_ERROR_COLLISION 0x0004\n#define SI_ERROR_NO_RESPONSE 0x0008\n#define SI_ERROR_WRST 0x0010\n#define SI_ERROR_RDST 0x0020\n#define SI_ERROR_UNKNOWN 0x0040\n#define SI_ERROR_BUSY 0x0080\n#define SI_CHAN0 0\n#define SI_CHAN1 1\n#define SI_CHAN2 2\n#define SI_CHAN3 3\n#define SI_CHAN0_BIT 0x80000000\n#define SI_CHAN1_BIT 0x40000000\n#define SI_CHAN2_BIT 0x20000000\n#define SI_CHAN3_BIT 0x10000000\n#define SI_CHAN_BIT(chan) (SI_CHAN0_BIT >> (chan))\n#define SI_TYPE_MASK 0x18000000u\n#define SI_TYPE_N64 0x00000000u\n#define SI_TYPE_DOLPHIN 0x08000000u\n#define SI_TYPE_GC SI_TYPE_DOLPHIN\n#define SI_GC_WIRELESS 0x80000000\n#define SI_GC_NOMOTOR 0x20000000\n#define SI_GC_STANDARD 0x01000000\n#define SI_WIRELESS_RECEIVED 0x40000000\n#define SI_WIRELESS_IR 0x04000000\n#define SI_WIRELESS_STATE 0x02000000\n#define SI_WIRELESS_ORIGIN 0x00200000\n#define SI_WIRELESS_FIX_ID 0x00100000\n#define SI_WIRELESS_TYPE 0x000f0000\n#define SI_WIRELESS_LITE_MASK 0x000c0000\n#define SI_WIRELESS_LITE 0x00040000\n#define SI_WIRELESS_CONT_MASK 0x00080000\n#define SI_WIRELESS_CONT 0x00000000\n#define SI_WIRELESS_ID 0x00c0ff00\n#define SI_WIRELESS_TYPE_ID (SI_WIRELESS_TYPE | SI_WIRELESS_ID)\n#define SI_N64_CONTROLLER (SI_TYPE_N64 | 0x05000000)\n#define SI_N64_MIC (SI_TYPE_N64 | 0x00010000)\n#define SI_N64_KEYBOARD (SI_TYPE_N64 | 0x00020000)\n#define SI_N64_MOUSE (SI_TYPE_N64 | 0x02000000)\n#define SI_GBA (SI_TYPE_N64 | 0x00040000)\n#define SI_GC_CONTROLLER (SI_TYPE_GC | SI_GC_STANDARD)\n#define SI_GC_RECEIVER (SI_TYPE_GC | SI_GC_WIRELESS)\n#define SI_GC_WAVEBIRD (SI_TYPE_GC | SI_GC_WIRELESS | SI_GC_STANDARD | SI_WIRELESS_STATE | SI_WIRELESS_FIX_ID)\n#define SI_GC_KEYBOARD (SI_TYPE_GC | 0x00200000)\n#define SI_GC_STEERING (SI_TYPE_GC | 0x00000000)\n/// @todo @c chan should be #EXIChannel.\ntypedef void (*SICallback)(s32 chan, u32 type);\n/// @sz{8}\nextern unk_t __PADFixBits;\nvoid SIGetResponse(EXIChannel chan, u32 data[2]);\nvoid SISetCommand(s32 index, u32 value);\nvoid SIEnablePolling(u32 chan_mask);\nvoid SIDisablePolling(u32 chan_mask);\nu32 SIProbe(s32 chan);\nchar* SIGetTypeString(u32 type);\nvoid SIRefreshSamplingRate(void);\nvoid SISetSamplingRate(u32 msec);\nvoid SIGetTypeAsync(s32, SICallback);\nu32 SIGetType(s32);\nvoid __SITransfer(void);\nvoid SIGetResponseRaw(void);\nvoid SITransfer(void);\nvoid GetTypeCallback(void);\nvoid SITransferCommands(void);\ns32 SISetXY(u32 arg0, u32 arg1);\nbool SIBusy(void);\nvoid SIInterruptHandler(void);\nbool SIIsChanBusy(enum_t status);\nvoid SIEnablePollingInterrupt(void);\nvoid SIRegisterPollingHandler(void);\nvoid SIUnregisterPollingHandler(void);\nvoid SIInit(void);\nvoid SIGetStatus(void);\n#define DOLPHIN_OS_OSSYNC_H\nvoid __OSSystemCallVector(void);\nvoid __OSInitSystemCall(void);\n#define DOLPHIN_OS_OSUARTEXI_H\ns32 ReadUARTN(void);\nvoid WriteUARTN(void);\ns32 InitializeUART(void);\n#define DOLPHIN_OS_INIT___PPC_EABI_INIT_H\nvoid __init_user(void);\n void _ExitProcess(void);\n void __init_hardware(void);\n void __flush_cache(void* address, size_t size);\n#define DOLPHIN_OS_INIT___START_H\n#define PAD3_BUTTON_ADDR 0x800030E4\n#define EXCEPTIONMASK_ADDR 0x80000044\n#define BOOTINFO2_ADDR 0x800000F4\n#define OS_BI2_DEBUGFLAG_OFFSET 0xC\n#define ARENAHI_ADDR 0x80000034\n#define DEBUGFLAG_ADDR 0x800030E8\n#define DVD_DEVICECODE_ADDR 0x800030E6\n#define MSR_FP 0x2000\nextern void InitMetroTRK(void);\nu16 Pad3Button ;\nextern int main(int argc, char* argv[]);\nextern void exit(int);\nextern void __init_user(void);\nextern void OSInit(void);\nextern void DBInit(void);\n void __check_pad3(void);\n void __start(void);\n void __init_registers(void);\n void __init_data(void);\n void __init_hardware(void);\n void __flush_cache(void* address, size_t size);\n extern u8 _stack_addr[];\n extern u8 _SDA_BASE_[];\n extern u8 _SDA2_BASE_[];\ntypedef struct __rom_copy_info {\n    u8* rom;\n    void* addr;\n    size_t size;\n} __rom_copy_info;\n extern __rom_copy_info _rom_copy_info[];\ntypedef struct __bss_init_info {\n    void* addr;\n    size_t size;\n} __bss_init_info;\n extern __bss_init_info _bss_init_info[];\n#define _PAD_H_\n#define DOLPHIN_PAD_FORWARD_H\ntypedef struct PADStatus PADStatus;\n#define PAD_CHANMAX 4\n#define PAD_ERR_NONE 0\n#define PAD_SPEC_2 2\nstruct PADStatus {\n    u16 button;\n    s8 stickX;\n    s8 stickY;\n    s8 substickX;\n    s8 substickY;\n    u8 triggerLeft;\n    u8 triggerRight;\n    u8 analogA;\n    u8 analogB;\n    s8 err;\n};\nvoid PADControlMotor(int chan, u32 command);\nvoid VISetBlack(bool);\nu32 VIGetRetraceCount(void);\nvoid PADClamp(PADStatus*);\nvoid PADRead(u8*);\nvoid PADReset(u32);\nvoid PADTypeAndStatusCallback(s32 chan, u32 type);\nvoid PADSetSpec(s32);\nvoid PADInit(void);\nbool __PADDisableRecalibration(bool);\nvoid PADOriginCallback(s32 unused0, s32 arg1);\nvoid PADOriginUpdateCallback(s32 chan, u32 error, OSContext* context);\nvoid PADProbeCallback(s32 chan, u32 error, OSContext* context);\nvoid UpdateOrigin(s32 arg0);\n#define DOLPHIN_PAD_PADCLAMP_H\nvoid ClampStick(s8* px, s8* py, s8 max, s8 xy, s8 min);\n#define _vi_h_\ns32 VIGetTvFormat(void);\nvoid VIConfigure(s32);\nvoid VIFlush(void);\nvoid VISetNextFrameBuffer(s32);\nvoid VIWaitForRetrace(void);\nvoid VIInit(void);\nu32 VIGetNextField(void);\n#define __MATH_H__\n#define M_PI 3.14159265358979323846\n#define M_PI_2 (M_PI / 2)\n#define M_PI_3 (M_PI / 3)\nstatic float const deg_to_rad = 3.14159265358979323846 / 180;\nstatic float const rad_to_deg = 180 / 3.14159265358979323846;\n#pragma push\n#pragma cplusplus on\n#define FLT_EPSILON 1.00000001335e-10F\nextern inline float sqrtf(float x)\n{\n    static const double _half = .5;\n    static const double _three = 3.0;\n    volatile float y;\n    if (x > 0.0f) {\n        double guess = __frsqrte((double) x); // returns an approximation to\n        guess = _half * guess *\n                (_three - guess * guess * x); // now have 12 sig bits\n        guess = _half * guess *\n                (_three - guess * guess * x); // now have 24 sig bits\n        guess = _half * guess *\n                (_three - guess * guess * x); // now have 32 sig bits\n        y = (float) (x * guess);\n        return y;\n    }\n    return x;\n}\n#pragma pop\nenum FloatType {\n    FP_NAN = 1,\n    FP_INFINITE = 2,\n    FP_ZERO = 3,\n    FP_NORMAL = 4,\n    FP_SUBNORMAL = 5\n};\nstatic inline s32 __fpclassifyf(float x)\n{\n    const s32 exp_mask = 0b01111111100000000000000000000000; // = 0x7F800000\n    const s32 mantissa_mask =\n        0b00000000011111111111111111111111; // = 0x007fffff\n    switch ((*(s32*) &x) & exp_mask) {\n    case exp_mask:\n        return ((*(s32*) &x) & mantissa_mask) ? FP_NAN : FP_INFINITE;\n    case 0:\n        return ((*(s32*) &x) & mantissa_mask) ? FP_SUBNORMAL : FP_ZERO;\n    default:\n        return FP_NORMAL;\n    }\n}\nextern int __HI(double);\nextern int __LO(double);\nstatic inline s32 __fpclassifyd(double x)\n{\n    switch (__HI(x) & 0x7ff00000) {\n    case 0x7ff00000:\n        return ((__HI(x) & 0x000fffff) || (__LO(x) & 0xffffffff))\n                   ? FP_NAN\n                   : FP_INFINITE;\n    case 0:\n        return ((__HI(x) & 0x000fffff) || (__LO(x) & 0xffffffff))\n                   ? FP_SUBNORMAL\n                   : FP_ZERO;\n    default:\n        return FP_NORMAL;\n    }\n}\n#define fpclassify(x) ((sizeof(x) == sizeof(float)) ? __fpclassifyf((float) (x)) : __fpclassifyd((double) (x)))\n/// @todo Is #fabs_inline fake? See #ftCo_AttackS3_CheckInput.\n#define ABS(x) ((x) < 0 ? -(x) : (x))\nstatic inline f32 fabs_inline(f32 x)\n{\n    if (x < 0) {\n        return -x;\n    } else {\n        return x;\n    }\n}\n#define GALE01_028B9C\nstruct _CameraBox* Camera_80029020(void);\nvoid Camera_800290D4(struct _CameraBox*);\nvoid Camera_8002A278(f32 x, f32 y);\nvoid Camera_8002E6FC(u8);\nvoid Camera_8002E948(bool (*)(Vec3*));\nvoid Camera_8002EB5C(f32);\nvoid Camera_8002EC7C(f32);\nvoid Camera_8002ED9C(f32);\nvoid Camera_8002EEC8(f32);\nvoid Camera_8002EF14(void);\nvoid Camera_8002F0E4(s32);\ns32 Camera_8002F260(void);\nvoid Camera_8002F274(void);\nvoid Camera_8002F474(void);\nvoid* Camera_80030A50(void);\nbool Camera_80030CFC(struct _CameraBox*, f32);\nvoid Camera_80031074(u8);\nvoid Camera_800310A0(u8);\nf32 Camera_80031144(void);\nvoid Camera_80030E44(enum_t, Vec3*);\nvoid Camera_8002A4AC(HSD_GObj*);\nvoid Camera_8002EA64(Vec3*);\nvoid Camera_8002E818(Vec3*);\nbool Camera_80030CD8(struct _CameraBox*, S32Vec2*);\nvoid Camera_80031154(Vec3*);\nbool Camera_80030A78(void);\n/// @param r The red component.\n/// @param g The green component.\n/// @param b The blue component.\nvoid Camera_80030740(u8 r, u8 g, u8 b);\nvoid Camera_8002F8F4(void);\n/* 03118C */ /* static */ M2C_UNK Camera_8003118C();\n#define _CMSNAP_H_\n#define GALE01_390730\n#define MELEE_IT_FORWARD_H\ntypedef struct Item Item;\ntypedef struct Item_GObj Item_GObj;\nstruct Item_GObj {\n    /*  +0 */ u16 classifier;\n    /*  +2 */ u8 p_link;\n    /*  +3 */ u8 gx_link;\n    /*  +4 */ u8 p_priority;\n    /*  +5 */ u8 render_priority;\n    /*  +6 */ u8 obj_kind;\n    /*  +7 */ u8 user_data_kind;\n    /*  +8 */ Item_GObj* next;\n    /*  +C */ Item_GObj* prev;\n    /* +10 */ Item_GObj* next_gx;\n    /* +14 */ Item_GObj* prev_gx;\n    /* +18 */ HSD_GObjProc* proc;\n    /* +1C */ void (*rendered)(Item_GObj* gobj, s32 code);\n    /* +20 */ u64 gxlink_prios;\n    /* +28 */ HSD_JObj* hsd_obj;\n    /* +2C */ Item* user_data;\n    /* +30 */ void (*user_data_remove_func)(Item* data);\n    /* +34 */ void* x34_unk;\n};\ntypedef struct Article Article;\ntypedef struct BobOmbRain BobOmbRain;\ntypedef struct CameraBoxFlags CameraBoxFlags;\ntypedef struct DynamicBoneTable DynamicBoneTable;\ntypedef struct ECB ECB;\ntypedef struct flag32 flag32;\ntypedef struct HSD_ObjAllocUnk HSD_ObjAllocUnk;\ntypedef struct HSD_ObjAllocUnk2 HSD_ObjAllocUnk2;\ntypedef struct HSD_ObjAllocUnk4 HSD_ObjAllocUnk4;\ntypedef struct HSD_ObjAllocUnk5 HSD_ObjAllocUnk5;\ntypedef struct HSD_ObjAllocUnk6 HSD_ObjAllocUnk6;\ntypedef struct Item_DynamicBones Item_DynamicBones;\ntypedef struct ItemAttr ItemAttr;\ntypedef struct ItemCommonData ItemCommonData;\ntypedef struct ItemDynamics ItemDynamics;\ntypedef struct ItemDynamicsDesc ItemDynamicsDesc;\ntypedef struct ItemLogicTable ItemLogicTable;\ntypedef struct ItemModelDesc ItemModelDesc;\ntypedef struct ItemModStruct ItemModStruct;\ntypedef struct ItemStateArray ItemStateArray;\ntypedef struct ItemStateDesc ItemStateDesc;\ntypedef struct ItemStateTable ItemStateTable;\ntypedef struct SpawnItem SpawnItem;\ntypedef struct UnkItemArticles3 UnkItemArticles3;\ntypedef enum Item_StateChangeFlags {\n    ITEM_UNK_0x1 = (1 << 0),\n    ITEM_ANIM_UPDATE = (1 << 1),\n    ITEM_DROP_UPDATE = (1 << 2),\n    ITEM_MODEL_UPDATE = (1 << 3),\n    ITEM_HIT_PRESERVE = (1 << 4),\n    ITEM_SFX_PRESERVE = (1 << 5),\n    ITEM_COLANIM_PRESERVE = (1 << 6),\n    ITEM_UNK_UPDATE = (1 << 7),\n    ITEM_CMD_UPDATE = (1 << 8),\n} Item_StateChangeFlags;\ntypedef enum Item_UnkKinds {\n    ITEM_UNK_MATO = 4,\n    ITEM_UNK_LOCKON,\n    ITEM_UNK_ENEMY,\n    ITEM_UNK_7\n} Item_UnkKinds;\n// Based on \"ID Lists\" from the SSBM datasheet, in-game references, and further\n// research by VetriTheRetri\n// https://docs.google.com/spreadsheets/d/1JX2w-r2fuvWuNgGb6D3Cs4wHQKLFegZe2jhbBuIhCG8\n// Development JP name strings are listed starting at data address 0x803EA7A8\ntypedef enum ItemKind {\n    // COMMON ITEMS\n    It_Kind_Capsule, // Capsule\n    It_Kind_Box, // Crate\n    It_Kind_Taru, // Barrel\n    It_Kind_Egg, // Egg\n    It_Kind_Kusudama, // Party Ball (Kusudama)\n    It_Kind_TaruCann, // Barrel Cannon (TaruCann)\n    It_Kind_BombHei, // Bob-omb (BombHei)\n    It_Kind_Dosei, // Mr. Saturn (Dosei)\n    It_Kind_Heart, // Heart Container\n    It_Kind_Tomato, // Maxim Tomato\n    It_Kind_Star, // Starman (Super Star)\n    It_Kind_Bat, // Home-Run Bat\n    It_Kind_Sword, // Beam Sword\n    It_Kind_Parasol, // Parasol\n    It_Kind_G_Shell, // Green Shell (G Shell)\n    It_Kind_R_Shell, // Red Shell (R Shell)\n    It_Kind_L_Gun, // Ray Gun (L Gun)\n    It_Kind_Freeze, // Freezie (Freeze)\n    It_Kind_Foods, // Food\n    It_Kind_MSBomb, // Proximity Mine (MSBomb)\n    It_Kind_Flipper, // Flipper\n    It_Kind_S_Scope, // Super Scope (S Scope)\n    It_Kind_StarRod, // Star Rod\n    It_Kind_LipStick, // Lip's Stick\n    It_Kind_Harisen, // Fan (Harisen)\n    It_Kind_F_Flower, // Fire Flower (F Flower)\n    It_Kind_Kinoko, // Super Mushroom (Kinoko)\n    It_Kind_DKinoko, // Poison Mushroom (DKinoko)\n    It_Kind_Hammer, // Hammer\n    It_Kind_WStar, // Warp Star (WStar)\n    It_Kind_ScBall, // Screw Attack (ScBall)\n    It_Kind_RabbitC, // Bunny Hood (RabbitC)\n    It_Kind_MetalB, // Metal Box\n    It_Kind_Spycloak, // Cloaking Device (Spycloak)\n    It_Kind_M_Ball, // Pok\u00e9 Ball (M Ball)\n    // ITEM-RELATED\n    It_Kind_L_Gun_Ray, // Ray Gun recoil effect (?)\n    It_Kind_StarRod_Star, // Star Rod Star\n    It_Kind_LipStick_Spore, // Lips Stick Dust\n    It_Kind_S_Scope_Beam, // Super Scope Beam\n    It_Kind_L_Gun_Beam, // Ray Gun Beam\n    It_Kind_Hammer_Head, // Hammer Head\n    It_Kind_F_Flower_Flame, // Flower\n    It_Kind_EvYoshiEgg, // Yoshi's Egg (Event)\n    // MONSTERS\n    It_Kind_Kuriboh, // Goomba (Kuriboh)\n    It_Kind_Leadead, // Redead (Leadead)\n    It_Kind_Octarock, // Octarok (Octarock)\n    It_Kind_Ottosea, // Ottosea\n    It_Kind_Octarock_Stone, // Stone (Octarok Projectile)\n    // CHARACTER-RELATED\n    It_Kind_Mario_Fire, // Mario's fireball\n    It_Kind_DrMario_Vitamin, // Dr. Mario's pill\n    It_Kind_Kirby_CBeam, // Kirby's Cutter beam\n    It_Kind_Kirby_Hammer, // Kirby's Hammer\n    It_Kind_Unk1, // Maybe Kirby copy star?\n    It_Kind_Unk2,\n    It_Kind_Fox_Laser, // Fox's Laser\n    It_Kind_Falco_Laser, // Falco's Laser\n    It_Kind_Fox_Illusion, // Fox's Illusion\n    It_Kind_Falco_Phantasm, // Falco's Phantasm\n    It_Kind_Link_Bomb, // Link's bomb\n    It_Kind_CLink_Bomb, // Young Link's bomb\n    It_Kind_Link_Boomerang, // Link's boomerang\n    It_Kind_CLink_Boomerang, // Young Link's boomerang\n    It_Kind_Link_HShot, // Link's Hookshot\n    It_Kind_CLink_HShot, // Young Link's Hookshot\n    It_Kind_Link_Arrow, // Link's Arrow\n    It_Kind_CLink_Arrow, // Young Link's Fire Arrow\n    It_Kind_Ness_PKFire, // PK Fire\n    It_Kind_Ness_PKFire_Flame, // PK Fire Pillar\n    It_Kind_Ness_PKFlush, // PK Flash (charging state)\n    It_Kind_Ness_PKThunder, // PK Thunder (Ball)\n    It_Kind_Ness_PKThunder1, // PK Thunder (Trail 1)\n    It_Kind_Ness_PKThunder2, // PK Thunder (Trail 2)\n    It_Kind_Ness_PKThunder3, // PK Thunder (Trail 3)\n    It_Kind_Ness_PKThunder4, // PK Thunder (Trail 4)\n    It_Kind_Fox_Blaster, // Fox's Blaster\n    It_Kind_Falco_Blaster, // Falco's Blaster\n    It_Kind_Link_Bow, // Link's Bow\n    It_Kind_CLink_Bow, // Young Link's Bow\n    It_Kind_Ness_PKFlush_Explode, // PK Flash (explosion)\n    It_Kind_Seak_NeedleThrow, // Needle (thrown)\n    It_Kind_Seak_NeedleHeld, // Needle (held)\n    It_Kind_Pikachu_Thunder, // Pikachu's Thunder\n    It_Kind_Pichu_Thunder, // Pichu's Thunder\n    It_Kind_Mario_Cape, // Mario's cape\n    It_Kind_DrMario_Sheet, // Dr. Mario's cape\n    It_Kind_Seak_Vanish, // Smoke (Sheik)\n    It_Kind_Yoshi_EggThrow, // Yoshi's Egg (thrown)\n    It_Kind_Yoshi_EggLay, // Yoshi's Egg Lay???\n    It_Kind_Yoshi_Star, // Yoshi's Star\n    It_Kind_Pikachu_TJolt_Ground, // Pikachu's thunder (B)\n    It_Kind_Pikachu_TJolt_Air, // Pikachu's thunder (B)\n    It_Kind_Pichu_TJolt_Ground, // Pichu's thunder (B)\n    It_Kind_Pichu_TJolt_Air, // Pichu's thunder (B)\n    It_Kind_Samus_Bomb, // Samus's bomb\n    It_Kind_Samus_Charge, // Samus's chargeshot\n    It_Kind_Samus_Missile, // Missile\n    It_Kind_Samus_GBeam, // Grapple beam\n    It_Kind_Seak_Chain, // Sheik's chain\n    It_Kind_Peach_Explode, // Peach Bomber explosion?\n    It_Kind_Peach_Turnip, // Peach's turnip\n    It_Kind_Koopa_Flame, // Bowser's flame\n    It_Kind_Ness_Bat, // Ness's baseball bat\n    It_Kind_Ness_Yoyo, // Ness's Yo-Yo\n    It_Kind_Peach_Parasol, // Peach's parasol\n    It_Kind_Peach_Toad, // Peach's Toad special\n    It_Kind_Luigi_Fire, // Luigi's fireball\n    It_Kind_IceClimber_Ice, // Ice (Ice Climbers)\n    It_Kind_IceClimber_Blizzard, // Blizzard\n    It_Kind_Zelda_DinFire, // Din's Fire (charging state)\n    It_Kind_Zelda_DinFire_Explode, // Din's Fire (explosion)\n    It_Kind_Mewtwo_Disable, // Mewtwo's Disable Projectile\n    It_Kind_Peach_ToadSpore, // Peach Toad's spore effect\n    It_Kind_Mewtwo_ShadowBall, // Mewtwo's Shadowball\n    It_Kind_IceClimber_GumStrings, // Ice Climbers Belay (Up B)\n    It_Kind_GameWatch_Greenhouse, // Mr. Game & Watch's Insecticide Spray\n    It_Kind_GameWatch_Manhole, // Mr. Game & Watch's Manhole\n    It_Kind_GameWatch_Fire, // Mr. Game & Watch's Fire (?)\n    It_Kind_GameWatch_Parachute, // Mr. Game & Watch's Parachute\n    It_Kind_GameWatch_Turtle, // Mr. Game & Watch's Turtle\n    It_Kind_GameWatch_Breath, // Mr. Game & Watch's Sparky\n    It_Kind_GameWatch_Judge, // Mr. Game & Watch's Judge\n    It_Kind_GameWatch_Panic, // Mr. Game & Watch's Oil Panic (?)\n    It_Kind_GameWatch_Chef, // Sausage\n    It_Kind_CLink_Milk, // Milk (Young Link)\n    It_Kind_GameWatch_Rescue, // Mr. Game & Watch's Firefighter\n    It_Kind_MasterHand_Laser, // Master Hand's Laser\n    It_Kind_MasterHand_Bullet, // Master Hand's Bullet\n    It_Kind_CrazyHand_Laser, // Crazy Hand's Laser\n    It_Kind_CrazyHand_Bullet, // Crazy Hand's Bullet\n    It_Kind_CrazyHand_Bomb, // Crazy Hand's Bomb\n    It_Kind_Kirby_MarioFire, // Kirby copy Mario's Fire (B)\n    It_Kind_Kirby_DrMarioVitamin, // Kirby copy Dr. Mario's Capsule (B)\n    It_Kind_Kirby_LuigiFire, // Kirby copy Luigi's Fire (B)\n    It_Kind_Kirby_IceClimberIce, // Kirby copy Ice Climbers' Ice Shot (B)\n    It_Kind_Kirby_PeachToad, // Kirby copy Peach's Toad (B)\n    It_Kind_Kirby_PeachToadSpore, // Kirby copy Toad's Spore (B)\n    It_Kind_Kirby_FoxLaser, // Kirby copy Fox's Laser (B)\n    It_Kind_Kirby_FalcoLaser, // Kirby copy Falco's Laser (B)\n    It_Kind_Kirby_FoxBlaster, // Kirby copy Fox's Blaster (B)\n    It_Kind_Kirby_FalcoBlaster, // Kirby copy Falco's Blaster (B)\n    It_Kind_Kirby_LinkArrow, // Kirby copy Link's Arrow (B)\n    It_Kind_Kirby_CLinkArrow, // Kirby copy Young Link's Arrow (B)\n    It_Kind_Kirby_LinkBow, // Kirby copy Link's Arrow (B)\n    It_Kind_Kirby_CLinkBow, // Kirby copy Young Link's Arrow (B)\n    It_Kind_Kirby_MewtwoShadowBall, // Kirby copy Mewtwo's Shadowball (B)\n    It_Kind_Kirby_NessPKFlush, // Kirby copy PK Flash (B)\n    It_Kind_Kirby_NessPKFlush_Explode, // Kirby copy PK Flash Explosion (B)\n    It_Kind_Kirby_PikachuTJolt_Ground, // Kirby copy Pikachu's Thunder (B)\n    It_Kind_Kirby_PikachuTJolt_Air, // Kirby copy Pikachu's Thunder (B)\n    It_Kind_Kirby_PichuTJolt_Ground, // Kirby copy Pichu's Thunder (B)\n    It_Kind_Kirby_PichuTJolt_Air, // Kirby copy Pichu's Thunder (B)\n    It_Kind_Kirby_SamusCharge, // Kirby copy Samus' Chargeshot (B)\n    It_Kind_Kirby_SeakNeedleThrow, // Kirby copy Sheik's Needle (thrown) (B)\n    It_Kind_Kirby_SeakNeedleHeld, // Kirby copy Sheik's Needle (ground) (B)\n    It_Kind_Kirby_KoopaFlame, // Kirby copy Bowser's Flame (B)\n    It_Kind_Kirby_GameWatchChef, // Kirby copy Mr. Game & Watch's Sausage (B)\n    It_Kind_Kirby_GameWatchChefPan, // Kirby copy Mr. Game & Watch's Chef Pan\n                                    // (B)\n    It_Kind_Kirby_YoshiEggLay, // Kirby's Yoshi Egg Lay??? (B)\n    It_Kind_Unk4, // (unique)\n    It_Kind_Coin, // Coin (?)\n    // POK\u00e9MON\n    Pokemon_Random, // Used for Random Pok\u00e9mon value\n    Pokemon_Tosakinto, // Goldeen (Tosakinto)\n    Pokemon_Chicorita, // Chikorita (Chicorita)\n    Pokemon_Kabigon, // Snorlax (Kabigon)\n    Pokemon_Kamex, // Blastoise (Kamex)\n    Pokemon_Matadogas, // Weezing (Matadogas)\n    Pokemon_Lizardon, // Charizard (Lizardon)\n    Pokemon_Fire, // Moltres (Fire)\n    Pokemon_Thunder, // Zapdos (Thunder)\n    Pokemon_Freezer, // Articuno (Freezer)\n    Pokemon_Sonans, // Wobbuffet (Sonans)\n    Pokemon_Hassam, // Scizor (Hassam)\n    Pokemon_Unknown, // Unown (Unknown)\n    Pokemon_Entei, // Entei\n    Pokemon_Raikou, // Raikou\n    Pokemon_Suikun, // Suicune (Suikun)\n    Pokemon_Kireihana, // Bellossom (Kireihana)\n    Pokemon_Marumine, // Electrode (Marumine)\n    Pokemon_Lugia, // Lugia\n    Pokemon_Houou, // Ho-oh (Houou)\n    Pokemon_Metamon, // Ditto (Metamon)\n    Pokemon_Pippi, // Clefairy (Pippi)\n    Pokemon_Togepy, // Togepi (Togepy)\n    Pokemon_Mew, // Mew\n    Pokemon_Cerebi, // Celebi (Cerebi)\n    Pokemon_Hitodeman, // Staryu (Hitodeman)\n    Pokemon_Lucky, // Chansey (Lucky)\n    Pokemon_Porygon2, // Porygon2\n    Pokemon_Hinoarashi, // Cyndaquil (Hinoarashi)\n    Pokemon_Maril, // Marill (Maril)\n    Pokemon_Fushigibana, // Venusaur (Fushigibana)\n    // POK\u00e9MON-RELATED\n    Pokemon_Chicorita_Leaf, // Chikorita's Leaf\n    Pokemon_Kamex_HydroPump, // Blastoise's Water\n    Pokemon_Matadogas_Gas1, // Weezing's Gas\n    Pokemon_Matadogas_Gas2, // Weezing's Gas\n    Pokemon_Lizardon_Flame1, // Charizard's Breath\n    Pokemon_Lizardon_Flame2, // Charizard's Breath\n    Pokemon_Lizardon_Flame3, // Charizard's Breath\n    Pokemon_Lizardon_Flame4, // Charizard's Breath\n    Pokemon_Unknown_Swarm, // Mini-Unowns\n    Pokemon_Lugia_Aeroblast, // Lugia's Aeroblast\n    Pokemon_Lugia_Aeroblast2, // Lugia's Aeroblast\n    Pokemon_Lugia_Aeroblast3, // Lugia's Aeroblast\n    Pokemon_Houou_SacredFire, // Ho-Oh's Flame\n    Pokemon_Hitodeman_Star, // Staryu's Star\n    Pokemon_Lucky_Egg, // Chansey's Healing Egg\n    Pokemon_Hinoarashi_Flame, // Cyndaquil's Fire\n    Pokemon_Unk, // ???\n    // MONSTERS 2\n    It_Kind_Old_Kuri, // Old Goomba (old-Kuri)\n    It_Kind_Mato, // Target (Mato)\n    It_Kind_Heiho, // Yoshi's Story Shy Guy (Heiho)\n    It_Kind_Nokonoko, // Koopa Troopa (Green) (Nokonoko)\n    It_Kind_Patapata, // Koopa Troopa (Red) (Patapata)\n    It_Kind_Likelike, // Like-Like (likelike)\n    It_Kind_Old_Lead, // Old Redead (old-lead) [invalid]\n    It_Kind_Old_Octa, // Old Octorok (old-octa) [invalid]\n    It_Kind_Old_Otto, // Old Ottosea (old-otto)\n    It_Kind_Whitebea, // Polar Bear (whitebea)\n    It_Kind_Klap, // Klaptrap (klap)\n    It_Kind_ZGShell, // Green Shell (zgshell)\n    It_Kind_ZRShell, // Red Shell (green act) (zrshell)\n    // STAGE-SPECIFIC\n    It_Kind_Tincle, // Tingle (Tincle) (on balloon)\n    It_Kind_Invalid1, // [Invalid]\n    It_Kind_Invalid2, // [Invalid]\n    It_Kind_Invalid3, // [Invalid]\n    It_Kind_WhispyApple, // Whispy Apple\n    It_Kind_WhispyHealApple, // Whispy's Healing Apple\n    It_Kind_Invalid4, // [Invalid]\n    It_Kind_Invalid5, // [Invalid]\n    It_Kind_Invalid6, // [Invalid]\n    It_Kind_Tools, // Tool (Flatzone)\n    It_Kind_Invalid7, // [Invalid]\n    It_Kind_Invalid8, // [Invalid]\n    It_Kind_Kyasarin, // Birdo (Kyasarin)\n    It_Kind_Arwing_Laser, // Arwing Laser\n    It_Kind_GreatFox_Laser, // Great Fox's Laser\n    It_Kind_Kyasarin_Egg, // Birdo's Egg\n} ItemKind;\n#define _objalloc_h_\n#define SYSDOLPHIN_BASELIB_DEBUG_H\n void __assert(char*, u32, char*);\nvoid HSD_Debug_803881E4(void);\n void HSD_Panic(char*, u32, char*);\n/// @todo Take @c file as another arg, ignore it if @c !MUST_MATCH.\n/// @todo Add another variant that takes a string for @c cond.\n#define HSD_ASSERT(line, cond) ((cond) ? ((void) 0) : __assert(__FILE__, line, #cond))\n#define HSD_ASSERT2(file, line, msg, cond) ((cond) ? ((void) 0) : __assert((file), (line), (#msg)))\nint HSD_Debug_8038815C(s32 arg0, s32 arg1, s32* arg2, s32 arg3);\ntypedef struct _objheap {\n    u32 top;\n    u32 curr;\n    u32 size;\n    u32 remain;\n} objheap;\ntypedef struct _HSD_ObjAllocLink {\n    struct _HSD_ObjAllocLink* next;\n} HSD_ObjAllocLink;\ntypedef struct _HSD_ObjAllocData {\n    u32 num_limit_flag : 1;\n    u32 heap_limit_flag : 1;\n    HSD_ObjAllocLink* freehead;\n    u32 used;\n    u32 free;\n    u32 peak;\n    u32 num_limit;\n    u32 heap_limit_size;\n    u32 heap_limit_num;\n    u32 size;\n    u32 align;\n    struct _HSD_ObjAllocData* next;\n} HSD_ObjAllocData;\ntypedef struct _HSD_ObjAllocInfo {\n    struct _HSD_ObjAllocData* (*getData)(void);\n    char* name;\n} HSD_ObjAllocInfo;\nstatic inline u32 HSD_ObjAllocUsed(HSD_ObjAllocInfo* info)\n{\n    HSD_ObjAllocData* data = info->getData();\n    ((data) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/objalloc.h\", 205, \"data\"));\n    return data->used;\n}\nstatic inline u32 HSD_ObjAllocFree(HSD_ObjAllocInfo* info)\n{\n    HSD_ObjAllocData* data = info->getData();\n    ((data) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/objalloc.h\", 221, \"data\"));\n    return data->free;\n}\nstatic inline u32 HSD_ObjAllocPeak(HSD_ObjAllocInfo* info)\n{\n    HSD_ObjAllocData* data = info->getData();\n    ((data) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/objalloc.h\", 237, \"data\"));\n    return data->peak;\n}\nvoid HSD_ObjSetHeap(u32 size, void* ptr);\ns32 HSD_ObjAllocAddFree(HSD_ObjAllocData* data, u32 num);\nvoid* HSD_ObjAlloc(HSD_ObjAllocData* data);\nvoid HSD_ObjFree(HSD_ObjAllocData* data, void* obj);\nvoid _HSD_ObjAllocForgetMemory(any_t low, any_t high);\nvoid HSD_ObjAllocInit(HSD_ObjAllocData* data, size_t size, u32 align);\n#define HSD_GOBJ_GXLINK_NONE ((u8) 0xFF)\n#define HSD_GOBJ_OBJ_NONE 0xFF\n#define HSD_GOBJ_CLASS_STAGE 0x3\n#define HSD_GOBJ_CLASS_FIGHTER 0x4\n#define HSD_GOBJ_CLASS_ITEM 0x6\n/// Used by chain-type items in-game to link multiple parts together\n#define HSD_GOBJ_CLASS_ITEMLINK 0x7\n#define HSD_GOBJ_CLASS_EFFECT 0x8\nstruct HSD_GObj {\n    /*  +0 */ u16 classifier;\n    /*  +2 */ u8 p_link;\n    /*  +3 */ u8 gx_link;\n    /*  +4 */ u8 p_priority;\n    /*  +5 */ u8 render_priority;\n    /*  +6 */ u8 obj_kind;\n    /*  +7 */ u8 user_data_kind;\n    /*  +8 */ HSD_GObj* next;\n    /*  +C */ HSD_GObj* prev;\n    /* +10 */ HSD_GObj* next_gx;\n    /* +14 */ HSD_GObj* prev_gx;\n    /* +18 */ HSD_GObjProc* proc;\n    /* +1C */ GObj_RenderFunc render_cb;\n    /* +20 */ u64 gxlink_prios;\n    /* +28 */ void* hsd_obj;\n    /* +2C */ void* user_data;\n    /* +30 */ void (*user_data_remove_func)(void* data);\n    /* +34 */ void* x34_unk;\n};\ntypedef struct _HSD_GObjLibInitDataType {\n    u8 p_link_max; // 804CE380\n    u8 gx_link_max; // 804CE381\n    u8 gproc_pri_max; // 804CE382\n    u32 unk_1; // 804CE384\n    u64* unk_2; // 804CE388\n    HSD_ObjAllocData gobj_def; // 804CE38C\n    HSD_ObjAllocData gobj_proc_def; // 804CE3B8\n} HSD_GObjLibInitDataType;\ntypedef struct _HSD_GObjList {\n    /* 0x00 */ HSD_GObj* x0;\n    /* 0x04 */ HSD_GObj* x4;\n    /* 0x08 */ HSD_GObj* x8;\n    /* 0x0C */ HSD_GObj* xC;\n    /* 0x10 */ HSD_GObj* x10;\n    /* 0x14 */ HSD_GObj* x14;\n    /* 0x18 */ HSD_GObj* x18;\n    /* 0x1C */ HSD_GObj* x1C;\n    /* 0x20 */ Fighter_GObj* fighters;\n    /* 0x24 */ Item_GObj* items;\n    /* 0x28 */ HSD_GObj* x28;\n    /* 0x2C */ HSD_GObj* x2C;\n    /* 0x30 */ HSD_GObj* x30;\n    /* 0x34 */ HSD_GObj* x34;\n    /* 0x38 */ HSD_GObj* x38;\n    /* 0x3C */ HSD_GObj* x3C;\n    /* 0x40 */ HSD_GObj* x40;\n    /* 0x44 */ HSD_GObj* x44;\n    /* 0x48 */ HSD_GObj* x48;\n} HSD_GObjList;\nextern struct _unk_gobj_struct {\n    union {\n        u32 flags;\n        struct {\n            u32 b0 : 1;\n            u32 b1 : 1;\n            u32 b2 : 1;\n            u32 b3 : 1;\n        };\n    };\n    u32 type;\n    u8 p_link;\n    u8 p_prio;\n    HSD_GObj* gobj;\n} HSD_GObj_804CE3E4;\ntypedef struct _GObjUnkStruct GObjUnkStruct;\ntypedef struct _GObjFuncs GObjFuncs;\nextern HSD_GObj* HSD_GObj_804D7818;\nextern HSD_GObj* HSD_GObj_804D781C;\nextern HSD_GObjProc* HSD_GObj_804D7830;\nextern HSD_GObjProc* HSD_GObj_804D7838;\nextern HSD_GObjProc** HSD_GObj_804D7840;\nextern s32 HSD_GObj_804D7834;\nextern s32 HSD_GObj_804D783C;\nextern HSD_GObj* HSD_SisLib_804D797C;\nextern HSD_GObj** HSD_GObj_804D7820;\nextern HSD_GObj** HSD_GObj_804D7824;\nextern HSD_GObjLibInitDataType HSD_GObjLibInitData;\nextern HSD_GObj** plinklow_gobjs;\nextern HSD_GObjList* HSD_GObj_Entities;\nextern u8 HSD_GObj_804D784B[5];\nextern GObjFuncs HSD_GObj_80408610;\nextern s8 HSD_GObj_804D7848;\nextern s8 HSD_GObj_804D7849;\nextern s8 HSD_GObj_804D784A;\nextern GObjFuncs HSD_GObj_80408620;\nvoid HSD_GObj_80390C5C(HSD_GObj* gobj);\nvoid HSD_GObj_80390C84(HSD_GObj* gobj);\nvoid HSD_GObj_80390CAC(HSD_GObj* gobj);\nu32 HSD_GObj_80390EB8(s32 i);\nvoid HSD_GObj_803910D8(HSD_GObj*);\nu8 HSD_GObj_803912A8(GObjUnkStruct*, GObjFuncs*);\nHSD_GObj* GObj_Create(u16 classifier, u8 p_link, u8 priority);\nvoid HSD_GObj_80391070(HSD_GObj* gobj, s32 arg1);\nvoid HSD_GObj_80390CD4(HSD_GObj* gobj);\nvoid HSD_GObj_80390CFC(void);\nvoid render_gobj(HSD_GObj* cur, int i);\nvoid HSD_GObj_80390FC0(void);\nvoid HSD_GObj_80391044(HSD_GObj* gobj);\nvoid HSD_GObj_803910B4(HSD_GObj* gobj);\nvoid HSD_GObj_80391120(HSD_Obj* obj);\nvoid HSD_GObj_803911C0(HSD_Obj* obj);\nvoid HSD_GObj_80391260(struct _GObjUnkStruct* arg0);\nvoid HSD_GObj_803912E0(GObjFuncs* arg0);\nvoid HSD_GObj_80390ED0(HSD_GObj* gobj, u32 mask);\nextern HSD_GObj* HSD_GObj_804D7814;\nstatic inline any_t HSD_GObjGetUserData(HSD_GObj* gobj)\n{\n    return gobj->user_data;\n}\nstatic inline any_t HSD_GObjGetHSDObj(HSD_GObj* gobj)\n{\n    return gobj->hsd_obj;\n}\nstatic inline u16 HSD_GObjGetClassifier(HSD_GObj* gobj)\n{\n    return gobj->classifier;\n}\nstatic inline HSD_GObj* HSD_GObjGetNext(HSD_GObj* gobj)\n{\n    return gobj->next;\n}\n#define GET_JOBJ(gobj) ((HSD_JObj*) HSD_GObjGetHSDObj(gobj))\n#define GET_COBJ(gobj) ((HSD_CObj*) HSD_GObjGetHSDObj(gobj))\n#define GET_LOBJ(gobj) ((HSD_LObj*) HSD_GObjGetHSDObj(gobj))\nvoid cmSnap_800315C8(void);\nvoid cmSnap_800316B4(void);\nvoid* cmSnap_80031618(void);\nvoid cmSnap_80031640(HSD_GObj* gobj, int code);\n#define MELEE_DB_DB_UNKNOWN_001_H\nextern enum_t g_debugLevel;\nvoid db_80225374(void);\nvoid db_80228C4C(void);\nvoid db_8022886C(void);\nvoid db_80225D2C(void);\nvoid db_80225D40(void);\nvoid db_80228A64(void);\nvoid db_80225DD8(HSD_GObj* item, HSD_GObj* owner);\nvoid db_80225D64(HSD_GObj* item, HSD_GObj* owner);\n#define MELEE_EF_EFASYNC_H\nvoid efAsync_8006737C(s8);\nvoid efAsync_80067624(HSD_GObj*, unk_t*);\nvoid efAsync_80067688(void*);\nvoid efAsync_Spawn(HSD_GObj*, void*, u32, u32, HSD_JObj*, ...);\n#define GALE01_05B4B8\n/* 05F864 */ void efLib_8005F864(HSD_GObj* gobj, s8, float, float);\nvoid efLib_PauseAll(HSD_GObj* gobj);\nvoid efLib_ResumeAll(HSD_GObj* gobj);\nvoid efLib_DestroyAll(HSD_GObj* gobj);\n#define MELEE_EF_EFSYNC_H\nvoid efSync_Spawn(s32, ...);\n#define MELEE_FT_CHARA_FORWARD_H\n#define MELEE_FT_CHARA_FTCLINK_FORWARD_H\nstatic MotionFlags const ftCl_MF_Zair =\n    Ft_MF_KeepFastFall | Ft_MF_SkipModel | Ft_MF_SkipAnimVel | Ft_MF_Unk06;\n#define GALE01_149354\n/* 149354 */ void ftCl_AppealS_Anim(HSD_GObj* gobj);\n/* 14943C */ void ftCl_AppealS_IASA(HSD_GObj* gobj);\n/* 14945C */ void ftCl_AppealS_Phys(HSD_GObj* gobj);\n/* 14947C */ void ftCl_AppealS_Coll(HSD_GObj* gobj);\n#define GALE01_148C64\n#define MELEE_FT_CHARA_FTLINK_FORWARD_H\n#define MELEE_FT_CHARA_FTCOMMON_FORWARD_H\ntypedef Fighter ftCo_Fighter;\ntypedef Fighter_GObj ftCo_GObj;\nstatic MotionFlags const ftCo_MF_5_6 =\n    Ft_MF_SkipAnimVel | Ft_MF_Unk06;\nstatic MotionFlags const ftCo_MF_2_5_6 =\n    ftCo_MF_5_6 | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftCo_MF_Squat =\n    ftCo_MF_2_5_6 | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCo_MF_Dash =\n    ftCo_MF_Squat | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_Run =\n    ftCo_MF_5_6 | Ft_MF_SkipHit;\nstatic MotionFlags const ftCo_MF_Appeal =\n    ftCo_MF_5_6 | Ft_MF_KeepFastFall | Ft_MF_SkipModel;\nstatic MotionFlags const ftCo_MF_9_10 =\n    Ft_MF_KeepSfx | Ft_MF_SkipParasol;\nstatic MotionFlags const ftCo_MF_LandingAirN =\n    ftCo_MF_9_10 | Ft_MF_KeepColAnimHitStatus | Ft_MF_SkipHit;\nstatic MotionFlags const ftCo_MF_LandingAirF =\n    ftCo_MF_LandingAirN | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCo_MF_LandingAirB =\n    ftCo_MF_LandingAirN | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_LandingAirHi =\n    ftCo_MF_LandingAirB | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCo_MF_LandingAirLw =\n    ftCo_MF_9_10 | Ft_MF_SkipModel;\nstatic MotionFlags const ftCo_MF_Turn =\n    ftCo_MF_2_5_6 | Ft_MF_KeepAccessory;\nstatic MotionFlags const ftCo_MF_Walk =\n    ftCo_MF_2_5_6 | Ft_MF_KeepGfx | Ft_MF_UpdateCmd;\nstatic MotionFlags const ftCo_MF_3_5_6 =\n    ftCo_MF_5_6 | Ft_MF_SkipHit;\nstatic MotionFlags const ftCo_MF_Jump =\n    ftCo_MF_3_5_6 | Ft_MF_KeepFastFall | Ft_MF_SkipNametagVis;\nstatic MotionFlags const ftCo_MF_JumpAir =\n    ftCo_MF_3_5_6 | Ft_MF_KeepGfx | Ft_MF_KeepColAnimPartHitStatus;\nstatic MotionFlags const ftCo_MF_GuardReflect =\n    ftCo_MF_5_6 | Ft_MF_KeepFastFall | Ft_MF_KeepGfx | Ft_MF_SkipModel |\n    Ft_MF_SkipColAnim | Ft_MF_UnkUpdatePhys;\nstatic MotionFlags const ftCo_MF_Guard =\n    Ft_MF_Unk19 | Ft_MF_UnkUpdatePhys;\nstatic MotionFlags const ftCo_MF_AttackBase =\n    Ft_MF_KeepSfx | Ft_MF_SkipItemVis;\nstatic MotionFlags const ftCo_MF_Attack =\n    ftCo_MF_AttackBase | Ft_MF_FreezeState;\nstatic MotionFlags const ftCo_MF_Attack_2 =\n    ftCo_MF_Attack | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftCo_MF_AttackDash =\n    ftCo_MF_Attack_2 | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCo_MF_AttackS3 =\n    ftCo_MF_Attack_2 | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_AttackHi3 =\n    ftCo_MF_AttackS3 | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCo_MF_AttackLw3 =\n    ftCo_MF_Attack | Ft_MF_SkipHit;\nstatic MotionFlags const ftCo_MF_CliffAttackQuick =\n    ftCo_MF_AttackLw3 | Ft_MF_KeepFastFall | Ft_MF_KeepGfx |\n    Ft_MF_KeepColAnimHitStatus | Ft_MF_SkipModel | Ft_MF_SkipAnimVel;\nstatic MotionFlags const ftCo_MF_AttackAir =\n    ftCo_MF_Attack | Ft_MF_SkipParasol;\nstatic MotionFlags const ftCo_MF_AttackAirN =\n    ftCo_MF_AttackAir | Ft_MF_KeepColAnimHitStatus | Ft_MF_SkipHit |\n    Ft_MF_SkipParasol;\nstatic MotionFlags const ftCo_MF_AttackAirF =\n    ftCo_MF_AttackAirN | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCo_MF_AttackAirB =\n    ftCo_MF_AttackAirN | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_AttackAirHi =\n    ftCo_MF_AttackAirF | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_AttackAirLw =\n    ftCo_MF_AttackAir | Ft_MF_SkipModel;\nstatic MotionFlags const ftCo_MF_Attack4 =\n    ftCo_MF_AttackLw3 | Ft_MF_SkipRumble;\nstatic MotionFlags const ftCo_MF_AttackS4 =\n    ftCo_MF_Attack4 | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCo_MF_AttackHi4 =\n    ftCo_MF_Attack4 | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_AttackLw4 =\n    ftCo_MF_Attack4 | Ft_MF_KeepFastFall | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_Attack1 =\n    ftCo_MF_Attack | Ft_MF_Unk19;\nstatic MotionFlags const ftCo_MF_Attack11 =\n    ftCo_MF_Attack1 | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCo_MF_Attack12 =\n    ftCo_MF_Attack1 | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_Attack13 =\n    ftCo_MF_Attack12 | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCo_MF_Attack100 =\n    ftCo_MF_Attack1 | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftCo_MF_ItemScope =\n    Ft_MF_SkipItemVis | Ft_MF_SkipModelPartVis;\nstatic MotionFlags const ftCo_MF_SwordSwing1 =\n    ftCo_MF_ItemScope | Ft_MF_Unk06;\nstatic MotionFlags const ftCo_MF_SwordSwing3 =\n    ftCo_MF_SwordSwing1 | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCo_MF_SwordSwingDash =\n    ftCo_MF_SwordSwing3 | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_BatSwing1 =\n    ftCo_MF_SwordSwing1 | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftCo_MF_BatSwing3 =\n    ftCo_MF_BatSwing1 | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCo_MF_BatSwingDash =\n    ftCo_MF_BatSwing3 | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_ParasolSwing1 =\n    ftCo_MF_SwordSwing1 | Ft_MF_SkipHit;\nstatic MotionFlags const ftCo_MF_ParasolSwing3 =\n    ftCo_MF_ParasolSwing1 | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCo_MF_ParasolSwingDash =\n    ftCo_MF_ParasolSwing3 | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_HarisenSwing1 =\n    ftCo_MF_BatSwing1 | Ft_MF_SkipHit;\nstatic MotionFlags const ftCo_MF_HarisenSwing3 =\n    ftCo_MF_HarisenSwing1 | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCo_MF_HarisenSwingDash =\n    ftCo_MF_HarisenSwing3 | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_StarRodSwing1 =\n    ftCo_MF_SwordSwing1 | Ft_MF_SkipModel;\nstatic MotionFlags const ftCo_MF_StarRodSwing3 =\n    ftCo_MF_StarRodSwing1 | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCo_MF_StarRodSwingDash =\n    ftCo_MF_StarRodSwing3 | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_LipstickSwing1 =\n    ftCo_MF_StarRodSwing1 | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftCo_MF_LipstickSwing3 =\n    ftCo_MF_LipstickSwing1 | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCo_MF_LipstickSwingDash =\n    ftCo_MF_LipstickSwing3 | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_ParasolOpen =\n    ftCo_MF_ParasolSwing1 | Ft_MF_SkipModel;\nstatic MotionFlags const ftCo_MF_HammerBase =\n    ftCo_MF_LipstickSwing1 | Ft_MF_SkipHit;\nstatic MotionFlags const ftCo_MF_Hammer =\n    ftCo_MF_HammerBase | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_WarpStarFall =\n    ftCo_MF_Hammer | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCo_MF_ItemScope_5_6 =\n    ftCo_MF_5_6 | ftCo_MF_ItemScope;\nstatic MotionFlags const ftCo_MF_ItemThrow =\n    ftCo_MF_ItemScope_5_6 | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_LGunShoot =\n    ftCo_MF_ItemScope | Ft_MF_KeepFastFall | Ft_MF_SkipHit | Ft_MF_SkipModel |\n    Ft_MF_Unk06 | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftCo_MF_ItemScopeFire =\n    ftCo_MF_LGunShoot | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftCo_MF_HammerFall =\n    ftCo_MF_Hammer | Ft_MF_SkipParasol;\nstatic MotionFlags const ftCo_MF_ItemThrowAir =\n    ftCo_MF_ItemThrow | Ft_MF_SkipParasol;\nstatic MotionFlags const ftCo_MF_LGunShootAir =\n    ftCo_MF_LGunShoot | Ft_MF_SkipParasol;\nstatic MotionFlags const ftCo_MF_ItemScopeAir =\n    ftCo_MF_HammerBase | Ft_MF_KeepFastFall | Ft_MF_SkipThrowException |\n    Ft_MF_SkipParasol;\nstatic MotionFlags const ftCo_MF_Swing4 =\n    Ft_MF_KeepGfx | Ft_MF_SkipRumble;\nstatic MotionFlags const ftCo_MF_SwordSwing4 =\n    ftCo_MF_SwordSwing1 | ftCo_MF_Swing4;\nstatic MotionFlags const ftCo_MF_BatSwing4 =\n    ftCo_MF_BatSwing1 | ftCo_MF_Swing4;\nstatic MotionFlags const ftCo_MF_ParasolSwing4 =\n    ftCo_MF_ParasolSwing1 | ftCo_MF_Swing4;\nstatic MotionFlags const ftCo_MF_HarisenSwing4 =\n    ftCo_MF_HarisenSwing1 | ftCo_MF_Swing4;\nstatic MotionFlags const ftCo_MF_StarRodSwing4 =\n    ftCo_MF_StarRodSwing1 | ftCo_MF_Swing4;\nstatic MotionFlags const ftCo_MF_LipstickSwing4 =\n    ftCo_MF_LipstickSwing1 | ftCo_MF_Swing4;\nstatic MotionFlags const ftCo_MF_ItemThrow4 =\n    ftCo_MF_ItemScope_5_6 | ftCo_MF_Swing4;\nstatic MotionFlags const ftCo_MF_ItemThrowAir4 =\n    ftCo_MF_ItemThrow4 | Ft_MF_SkipParasol;\nstatic MotionFlags const ftCo_MF_HammerMove =\n    ftCo_MF_HammerBase | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_HammerTurn =\n    ftCo_MF_HammerMove | Ft_MF_KeepAccessory;\nstatic MotionFlags const ftCo_MF_HammerWalk =\n    ftCo_MF_HammerMove | Ft_MF_UpdateCmd;\nstatic MotionFlags const ftCo_MF_ItemFall =\n    Ft_MF_SkipHit | Ft_MF_SkipModel | Ft_MF_Unk06 | Ft_MF_SkipModelPartVis;\nstatic MotionFlags const ftCo_MF_ItemScrewBase =\n    ftCo_MF_AttackBase | ftCo_MF_ItemFall | Ft_MF_KeepFastFall | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_ItemScrew =\n    ftCo_MF_ItemScrewBase | Ft_MF_SkipNametagVis;\nstatic MotionFlags const ftCo_MF_HammerJump =\n    ftCo_MF_HammerMove | Ft_MF_SkipParasol | Ft_MF_SkipNametagVis;\nstatic MotionFlags const ftCo_MF_ItemScrewAir =\n    ftCo_MF_ItemScrewBase | Ft_MF_SkipParasol | Ft_MF_KeepColAnimPartHitStatus;\nstatic MotionFlags const ftCo_MF_LiftWait =\n    Ft_MF_Unk19 | Ft_MF_SkipModelPartVis;\nstatic MotionFlags const ftCo_MF_LiftMove =\n    ftCo_MF_LiftWait | Ft_MF_KeepColAnimHitStatus | Ft_MF_SkipAnimVel |\n    Ft_MF_Unk06;\nstatic MotionFlags const ftCo_MF_LiftTurn =\n    ftCo_MF_LiftMove | Ft_MF_KeepAccessory;\nstatic MotionFlags const ftCo_MF_LiftWalk =\n    ftCo_MF_LiftMove | Ft_MF_KeepGfx | Ft_MF_UpdateCmd;\nstatic MotionFlags const ftCo_MF_ParasolFall =\n    ftCo_MF_ItemFall | Ft_MF_SkipItemVis | Ft_MF_Unk19;\nstatic MotionFlags const ftCo_MF_FireFlowerShoot =\n    ftCo_MF_ParasolFall | Ft_MF_KeepGfx | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftCo_MF_ItemScopeRapid =\n    ftCo_MF_ParasolFall | Ft_MF_KeepColAnimHitStatus |\n    Ft_MF_SkipThrowException | Ft_MF_Unk19;\nstatic MotionFlags const ftCo_MF_FireFlowerShootAir =\n    ftCo_MF_FireFlowerShoot | Ft_MF_SkipParasol;\nstatic MotionFlags const ftCo_MF_ItemScopeAirRapid =\n    ftCo_MF_ItemScopeRapid | Ft_MF_SkipParasol;\nstatic MotionFlags const ftCo_MF_Dazed =\n    Ft_MF_UnkUpdatePhys | Ft_MF_SkipModelPartVis;\nstatic MotionFlags const ftCo_MF_Damage =\n    ftCo_MF_Dazed | Ft_MF_KeepSwordTrail;\nstatic MotionFlags const ftCo_MF_DamageScrew =\n    ftCo_MF_Damage | Ft_MF_SkipNametagVis;\nstatic MotionFlags const ftCo_MF_DamageScrewAir =\n    ftCo_MF_Damage | Ft_MF_KeepColAnimPartHitStatus;\nstatic MotionFlags const ftCo_MF_Down =\n    Ft_MF_SkipHit | Ft_MF_SkipAnimVel | Ft_MF_Unk06 | Ft_MF_FreezeState |\n    Ft_MF_SkipModelPartVis;\nstatic MotionFlags const ftCo_MF_DownU =\n    ftCo_MF_Down | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftCo_MF_DownD =\n    ftCo_MF_DownU | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCo_MF_DownDamageU =\n    ftCo_MF_DownU | Ft_MF_KeepSwordTrail;\nstatic MotionFlags const ftCo_MF_DownDamageD =\n    ftCo_MF_DownD | Ft_MF_KeepSwordTrail;\nstatic MotionFlags const ftCo_MF_DownAttack =\n    ftCo_MF_Attack | Ft_MF_SkipModel | Ft_MF_SkipAnimVel |\n    Ft_MF_SkipModelPartVis;\nstatic MotionFlags const ftCo_MF_DownAttackU =\n    ftCo_MF_DownAttack | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCo_MF_DownAttackD =\n    ftCo_MF_DownAttack | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_PassiveWall =\n    ftCo_MF_Dazed | Ft_MF_FreezeState;\nstatic MotionFlags const ftCo_MF_Passive =\n    ftCo_MF_Down | Ft_MF_KeepGfx | Ft_MF_KeepColAnimHitStatus |\n    Ft_MF_UnkUpdatePhys;\nstatic MotionFlags const ftCo_MF_StopWall =\n    Ft_MF_KeepFastFall | Ft_MF_KeepGfx | Ft_MF_SkipHit | Ft_MF_SkipAnimVel |\n    Ft_MF_Unk06 | Ft_MF_SkipMetalB;\nstatic MotionFlags const ftCo_MF_Pass =\n    ftCo_MF_StopWall | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftCo_MF_OttottoWait =\n    Ft_MF_Unk19 | Ft_MF_SkipMetalB;\nstatic MotionFlags const ftCo_MF_CliffAction =\n    Ft_MF_UnkUpdatePhys | Ft_MF_SkipMetalB;\nstatic MotionFlags const ftCo_MF_CliffAction_4_5 =\n    ftCo_MF_CliffAction | Ft_MF_SkipModel | Ft_MF_SkipAnimVel;\nstatic MotionFlags const ftCo_MF_CliffCatch =\n    ftCo_MF_CliffAction_4_5 | Ft_MF_Unk06;\nstatic MotionFlags const ftCo_MF_CliffAttackSlow =\n    ftCo_MF_AttackBase | ftCo_MF_CliffAction_4_5 | Ft_MF_KeepGfx |\n    Ft_MF_KeepColAnimHitStatus | Ft_MF_SkipHit;\nstatic MotionFlags const ftCo_MF_CliffWait =\n    ftCo_MF_CliffAction | Ft_MF_Unk19;\nstatic MotionFlags const ftCo_MF_CatchWait =\n    Ft_MF_FreezeState | Ft_MF_SkipMetalB;\nstatic MotionFlags const ftCo_MF_CatchBase =\n    ftCo_MF_CatchWait | Ft_MF_SkipModel | Ft_MF_SkipAnimVel;\nstatic MotionFlags const ftCo_MF_Catch =\n    ftCo_MF_CatchBase | Ft_MF_KeepFastFall | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_Throw =\n    ftCo_MF_CatchBase | Ft_MF_SkipItemVis;\nstatic MotionFlags const ftCo_MF_CatchAttack =\n    ftCo_MF_Throw | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftCo_MF_ThrowF =\n    ftCo_MF_CatchAttack | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCo_MF_ThrowB =\n    ftCo_MF_CatchAttack | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_ThrowHi =\n    ftCo_MF_ThrowF | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCo_MF_ThrowLw =\n    ftCo_MF_Throw | Ft_MF_SkipHit;\nstatic MotionFlags const ftCo_MF_Capture =\n    ftCo_MF_CatchWait | Ft_MF_UnkUpdatePhys;\nstatic MotionFlags const ftCo_MF_CaptureAir =\n    ftCo_MF_Capture | Ft_MF_SkipParasol;\nstatic MotionFlags const ftCo_MF_Thrown =\n    ftCo_MF_Capture | Ft_MF_KeepSwordTrail;\nstatic MotionFlags const ftCo_MF_ThrownAir =\n    ftCo_MF_Thrown | Ft_MF_SkipParasol;\nstatic MotionFlags const ftCo_MF_Shouldered =\n    ftCo_MF_Capture | Ft_MF_Unk19;\nstatic MotionFlags const ftCo_MF_Rebirth =\n    Ft_MF_SkipModelPartVis | Ft_MF_SkipMetalB;\nstatic MotionFlags const ftCo_MF_ThrownStar =\n    ftCo_MF_Rebirth | Ft_MF_KeepSwordTrail;\nstatic MotionFlags const ftCo_MF_Dead =\n    ftCo_MF_Dazed | Ft_MF_SkipMetalB;\nstatic MotionFlags const ftCo_MF_Sleep =\n    ftCo_MF_Dead | Ft_MF_KeepSwordTrail;\nstatic MotionFlags const ftCo_MF_Special =\n    Ft_MF_SkipModel | Ft_MF_SkipItemVis | Ft_MF_UnkUpdatePhys |\n    Ft_MF_FreezeState;\ntypedef enum ftCommon_MotionState {\n    ftCo_MS_None = -1,\n    ftCo_MS_DeadDown,\n    ftCo_MS_DeadLeft,\n    ftCo_MS_DeadRight,\n    ftCo_MS_DeadUp,\n    ftCo_MS_DeadUpStar,\n    ftCo_MS_DeadUpStarIce,\n    ftCo_MS_DeadUpFall,\n    ftCo_MS_DeadUpFallHitCamera,\n    ftCo_MS_DeadUpFallHitCameraFlat,\n    ftCo_MS_DeadUpFallIce,\n    ftCo_MS_DeadUpFallHitCameraIce,\n    ftCo_MS_Sleep,\n    ftCo_MS_Rebirth,\n    ftCo_MS_RebirthWait,\n    ftCo_MS_Wait,\n    ftCo_MS_WalkSlow,\n    ftCo_MS_WalkMiddle,\n    ftCo_MS_WalkFast,\n    ftCo_MS_Turn,\n    ftCo_MS_TurnRun,\n    ftCo_MS_Dash,\n    ftCo_MS_Run,\n    ftCo_MS_RunDirect,\n    ftCo_MS_RunBrake,\n    ftCo_MS_KneeBend,\n    ftCo_MS_JumpF,\n    ftCo_MS_JumpB,\n    ftCo_MS_JumpAerialF,\n    ftCo_MS_JumpAerialB,\n    ftCo_MS_Fall,\n    ftCo_MS_FallF,\n    ftCo_MS_FallB,\n    ftCo_MS_FallAerial,\n    ftCo_MS_FallAerialF,\n    ftCo_MS_FallAerialB,\n    ftCo_MS_FallSpecial,\n    ftCo_MS_FallSpecialF,\n    ftCo_MS_FallSpecialB,\n    ftCo_MS_DamageFall,\n    ftCo_MS_Squat,\n    ftCo_MS_SquatWait,\n    ftCo_MS_SquatRv,\n    ftCo_MS_Landing,\n    ftCo_MS_LandingFallSpecial,\n    ftCo_MS_Attack11,\n    ftCo_MS_Attack12,\n    ftCo_MS_Attack13,\n    ftCo_MS_Attack100Start,\n    ftCo_MS_Attack100Loop,\n    ftCo_MS_Attack100End,\n    ftCo_MS_AttackDash,\n    ftCo_MS_AttackS3Hi,\n    ftCo_MS_AttackS3HiS,\n    ftCo_MS_AttackS3S,\n    ftCo_MS_AttackS3LwS,\n    ftCo_MS_AttackS3Lw,\n    ftCo_MS_AttackHi3,\n    ftCo_MS_AttackLw3,\n    ftCo_MS_AttackS4Hi,\n    ftCo_MS_AttackS4HiS,\n    ftCo_MS_AttackS4S,\n    ftCo_MS_AttackS4LwS,\n    ftCo_MS_AttackS4Lw,\n    ftCo_MS_AttackHi4,\n    ftCo_MS_AttackLw4,\n    ftCo_MS_AttackAirN,\n    ftCo_MS_AttackAirF,\n    ftCo_MS_AttackAirB,\n    ftCo_MS_AttackAirHi,\n    ftCo_MS_AttackAirLw,\n    ftCo_MS_LandingAirN,\n    ftCo_MS_LandingAirF,\n    ftCo_MS_LandingAirB,\n    ftCo_MS_LandingAirHi,\n    ftCo_MS_LandingAirLw,\n    ftCo_MS_DamageHi1,\n    ftCo_MS_DamageHi2,\n    ftCo_MS_DamageHi3,\n    ftCo_MS_DamageN1,\n    ftCo_MS_DamageN2,\n    ftCo_MS_DamageN3,\n    ftCo_MS_DamageLw1,\n    ftCo_MS_DamageLw2,\n    ftCo_MS_DamageLw3,\n    ftCo_MS_DamageAir1,\n    ftCo_MS_DamageAir2,\n    ftCo_MS_DamageAir3,\n    ftCo_MS_DamageFlyHi,\n    ftCo_MS_DamageFlyN,\n    ftCo_MS_DamageFlyLw,\n    ftCo_MS_DamageFlyTop,\n    ftCo_MS_DamageFlyRoll,\n    ftCo_MS_LightGet,\n    ftCo_MS_HeavyGet,\n    ftCo_MS_LightThrowF,\n    ftCo_MS_LightThrowB,\n    ftCo_MS_LightThrowHi,\n    ftCo_MS_LightThrowLw,\n    ftCo_MS_LightThrowDash,\n    ftCo_MS_LightThrowDrop,\n    ftCo_MS_LightThrowAirF,\n    ftCo_MS_LightThrowAirB,\n    ftCo_MS_LightThrowAirHi,\n    ftCo_MS_LightThrowAirLw,\n    ftCo_MS_HeavyThrowF,\n    ftCo_MS_HeavyThrowB,\n    ftCo_MS_HeavyThrowHi,\n    ftCo_MS_HeavyThrowLw,\n    ftCo_MS_LightThrowF4,\n    ftCo_MS_LightThrowB4,\n    ftCo_MS_LightThrowHi4,\n    ftCo_MS_LightThrowLw4,\n    ftCo_MS_LightThrowAirF4,\n    ftCo_MS_LightThrowAirB4,\n    ftCo_MS_LightThrowAirHi4,\n    ftCo_MS_LightThrowAirLw4,\n    ftCo_MS_HeavyThrowF4,\n    ftCo_MS_HeavyThrowB4,\n    ftCo_MS_HeavyThrowHi4,\n    ftCo_MS_HeavyThrowLw4,\n    ftCo_MS_SwordSwing1,\n    ftCo_MS_SwordSwing3,\n    ftCo_MS_SwordSwing4,\n    ftCo_MS_SwordSwingDash,\n    ftCo_MS_BatSwing1,\n    ftCo_MS_BatSwing3,\n    ftCo_MS_BatSwing4,\n    ftCo_MS_BatSwingDash,\n    ftCo_MS_ParasolSwing1,\n    ftCo_MS_ParasolSwing3,\n    ftCo_MS_ParasolSwing4,\n    ftCo_MS_ParasolSwingDash,\n    ftCo_MS_HarisenSwing1,\n    ftCo_MS_HarisenSwing3,\n    ftCo_MS_HarisenSwing4,\n    ftCo_MS_HarisenSwingDash,\n    ftCo_MS_StarRodSwing1,\n    ftCo_MS_StarRodSwing3,\n    ftCo_MS_StarRodSwing4,\n    ftCo_MS_StarRodSwingDash,\n    ftCo_MS_LipstickSwing1,\n    ftCo_MS_LipstickSwing3,\n    ftCo_MS_LipstickSwing4,\n    ftCo_MS_LipstickSwingDash,\n    ftCo_MS_ItemParasolOpen,\n    ftCo_MS_ItemParasolFall,\n    ftCo_MS_ItemParasolFallSpecial,\n    ftCo_MS_ItemParasolDamageFall,\n    ftCo_MS_LGunShoot,\n    ftCo_MS_LGunShootAir,\n    ftCo_MS_LGunShootEmpty,\n    ftCo_MS_LGunShootAirEmpty,\n    ftCo_MS_FireFlowerShoot,\n    ftCo_MS_FireFlowerShootAir,\n    ftCo_MS_ItemScrew,\n    ftCo_MS_ItemScrewAir,\n    ftCo_MS_DamageScrew,\n    ftCo_MS_DamageScrewAir,\n    ftCo_MS_ItemScopeStart,\n    ftCo_MS_ItemScopeRapid,\n    ftCo_MS_ItemScopeFire,\n    ftCo_MS_ItemScopeEnd,\n    ftCo_MS_ItemScopeAirStart,\n    ftCo_MS_ItemScopeAirRapid,\n    ftCo_MS_ItemScopeAirFire,\n    ftCo_MS_ItemScopeAirEnd,\n    ftCo_MS_ItemScopeStartEmpty,\n    ftCo_MS_ItemScopeRapidEmpty,\n    ftCo_MS_ItemScopeFireEmpty,\n    ftCo_MS_ItemScopeEndEmpty,\n    ftCo_MS_ItemScopeAirStartEmpty,\n    ftCo_MS_ItemScopeAirRapidEmpty,\n    ftCo_MS_ItemScopeAirFireEmpty,\n    ftCo_MS_ItemScopeAirEndEmpty,\n    ftCo_MS_LiftWait,\n    ftCo_MS_LiftWalk1,\n    ftCo_MS_LiftWalk2,\n    ftCo_MS_LiftTurn,\n    ftCo_MS_GuardOn,\n    ftCo_MS_Guard,\n    ftCo_MS_GuardOff,\n    ftCo_MS_GuardSetOff,\n    ftCo_MS_GuardReflect,\n    ftCo_MS_DownBoundU,\n    ftCo_MS_DownWaitU,\n    ftCo_MS_DownDamageU,\n    ftCo_MS_DownStandU,\n    ftCo_MS_DownAttackU,\n    ftCo_MS_DownFowardU,\n    ftCo_MS_DownBackU,\n    ftCo_MS_DownSpotU,\n    ftCo_MS_DownBoundD,\n    ftCo_MS_DownWaitD,\n    ftCo_MS_DownDamageD,\n    ftCo_MS_DownStandD,\n    ftCo_MS_DownAttackD,\n    ftCo_MS_DownFowardD,\n    ftCo_MS_DownBackD,\n    ftCo_MS_DownSpotD,\n    ftCo_MS_Passive,\n    ftCo_MS_PassiveStandF,\n    ftCo_MS_PassiveStandB,\n    ftCo_MS_PassiveWall,\n    ftCo_MS_PassiveWallJump,\n    ftCo_MS_PassiveCeil,\n    ftCo_MS_ShieldBreakFly,\n    ftCo_MS_ShieldBreakFall,\n    ftCo_MS_ShieldBreakDownU,\n    ftCo_MS_ShieldBreakDownD,\n    ftCo_MS_ShieldBreakStandU,\n    ftCo_MS_ShieldBreakStandD,\n    ftCo_MS_Furafura,\n    ftCo_MS_Catch,\n    ftCo_MS_CatchPull,\n    ftCo_MS_CatchDash,\n    ftCo_MS_CatchDashPull,\n    ftCo_MS_CatchWait,\n    ftCo_MS_CatchAttack,\n    ftCo_MS_CatchCut,\n    ftCo_MS_ThrowF,\n    ftCo_MS_ThrowB,\n    ftCo_MS_ThrowHi,\n    ftCo_MS_ThrowLw,\n    ftCo_MS_CapturePulledHi,\n    ftCo_MS_CaptureWaitHi,\n    ftCo_MS_CaptureDamageHi,\n    ftCo_MS_CapturePulledLw,\n    ftCo_MS_CaptureWaitLw,\n    ftCo_MS_CaptureDamageLw,\n    ftCo_MS_CaptureCut,\n    ftCo_MS_CaptureJump,\n    ftCo_MS_CaptureNeck,\n    ftCo_MS_CaptureFoot,\n    ftCo_MS_EscapeF,\n    ftCo_MS_EscapeB,\n    ftCo_MS_EscapeN,\n    ftCo_MS_EscapeAir,\n    ftCo_MS_ReboundStop,\n    ftCo_MS_Rebound,\n    ftCo_MS_ThrownF,\n    ftCo_MS_ThrownB,\n    ftCo_MS_ThrownHi,\n    ftCo_MS_ThrownLw,\n    ftCo_MS_ThrownlwWomen,\n    ftCo_MS_Pass,\n    ftCo_MS_Ottotto,\n    ftCo_MS_OttottoWait,\n    ftCo_MS_FlyReflectWall,\n    ftCo_MS_FlyReflectCeil,\n    ftCo_MS_StopWall,\n    ftCo_MS_StopCeil,\n    ftCo_MS_MissFoot,\n    ftCo_MS_CliffCatch,\n    ftCo_MS_CliffWait,\n    ftCo_MS_CliffClimbSlow,\n    ftCo_MS_CliffClimbQuick,\n    ftCo_MS_CliffAttackSlow,\n    ftCo_MS_CliffAttackQuick,\n    ftCo_MS_CliffEscapeSlow,\n    ftCo_MS_CliffEscapeQuick,\n    ftCo_MS_CliffJumpSlow1,\n    ftCo_MS_CliffJumpSlow2,\n    ftCo_MS_CliffJumpQuick1,\n    ftCo_MS_CliffJumpQuick2,\n    ftCo_MS_AppealSR,\n    ftCo_MS_AppealSL,\n    ftCo_MS_ShoulderedWait,\n    ftCo_MS_ShoulderedWalkSlow,\n    ftCo_MS_ShoulderedWalkMiddle,\n    ftCo_MS_ShoulderedWalkFast,\n    ftCo_MS_ShoulderedTurn,\n    ftCo_MS_ThrownFF,\n    ftCo_MS_ThrownFB,\n    ftCo_MS_ThrownFHi,\n    ftCo_MS_ThrownFLw,\n    ftCo_MS_CaptureCaptain,\n    ftCo_MS_CaptureYoshi,\n    ftCo_MS_YoshiEgg,\n    ftCo_MS_CaptureKoopa,\n    ftCo_MS_CaptureDamageKoopa,\n    ftCo_MS_CaptureWaitKoopa,\n    ftCo_MS_ThrownKoopaF,\n    ftCo_MS_ThrownKoopaB,\n    ftCo_MS_CaptureKoopaAir,\n    ftCo_MS_CaptureDamageKoopaAir,\n    ftCo_MS_CaptureWaitKoopaAir,\n    ftCo_MS_ThrownKoopaAirF,\n    ftCo_MS_ThrownKoopaAirB,\n    ftCo_MS_CaptureKirby,\n    ftCo_MS_CaptureWaitKirby,\n    ftCo_MS_ThrownKirbyStar,\n    ftCo_MS_ThrownCopyStar,\n    ftCo_MS_ThrownKirby,\n    ftCo_MS_BarrelWait,\n    ftCo_MS_Bury,\n    ftCo_MS_BuryWait,\n    ftCo_MS_BuryJump,\n    ftCo_MS_DamageSong,\n    ftCo_MS_DamageSongWait,\n    ftCo_MS_DamageSongRv,\n    ftCo_MS_DamageBind,\n    ftCo_MS_CaptureMewtwo,\n    ftCo_MS_CaptureMewtwoAir,\n    ftCo_MS_ThrownMewtwo,\n    ftCo_MS_ThrownMewtwoAir,\n    ftCo_MS_WarpStarJump,\n    ftCo_MS_WarpStarFall,\n    ftCo_MS_HammerWait,\n    ftCo_MS_HammerWalk,\n    ftCo_MS_HammerTurn,\n    ftCo_MS_HammerKneeBend,\n    ftCo_MS_HammerFall,\n    ftCo_MS_HammerJump,\n    ftCo_MS_HammerLanding,\n    ftCo_MS_KinokoGiantStart,\n    ftCo_MS_KinokoGiantStartAir,\n    ftCo_MS_KinokoGiantEnd,\n    ftCo_MS_KinokoGiantEndAir,\n    ftCo_MS_KinokoSmallStart,\n    ftCo_MS_KinokoSmallStartAir,\n    ftCo_MS_KinokoSmallEnd,\n    ftCo_MS_KinokoSmallEndAir,\n    ftCo_MS_Entry,\n    ftCo_MS_EntryStart,\n    ftCo_MS_EntryEnd,\n    ftCo_MS_DamageIce,\n    ftCo_MS_DamageIceJump,\n    ftCo_MS_CaptureMasterHand,\n    ftCo_MS_CaptureDamageMasterHand,\n    ftCo_MS_CaptureWaitMasterHand,\n    ftCo_MS_ThrownMasterHand,\n    ftCo_MS_CaptureKirbyYoshi,\n    ftCo_MS_KirbyYoshiEgg,\n    ftCo_MS_CaptureLeadead,\n    ftCo_MS_CaptureLikelike,\n    ftCo_MS_DownReflect,\n    ftCo_MS_CaptureCrazyHand,\n    ftCo_MS_CaptureDamageCrazyHand,\n    ftCo_MS_CaptureWaitCrazyHand,\n    ftCo_MS_ThrownCrazyHand,\n    ftCo_MS_Barrel,\n    ftCo_MS_Count\n} ftCommon_MotionState;\ntypedef enum ftCo_Submotion {\n    ftCo_SM_None = -1,\n    ftCo_SM_DeadUpFallHitCamera,\n    ftCo_SM_DeadUpFallHitCameraFlat,\n    ftCo_SM_Wait1_0,\n    ftCo_SM_Wait2,\n    ftCo_SM_Unk004,\n    ftCo_SM_Unk005,\n    ftCo_SM_Wait1_1,\n    ftCo_SM_WalkSlow,\n    ftCo_SM_WalkMiddle,\n    ftCo_SM_WalkFast,\n    ftCo_SM_Turn,\n    ftCo_SM_TurnRun,\n    ftCo_SM_Dash,\n    ftCo_SM_Run,\n    ftCo_SM_RunBrake,\n    ftCo_SM_Kneebend,\n    ftCo_SM_JumpF,\n    ftCo_SM_JumpB,\n    ftCo_SM_JumpAerialF,\n    ftCo_SM_JumpAerialB,\n    ftCo_SM_Fall,\n    ftCo_SM_FallF,\n    ftCo_SM_FallB,\n    ftCo_SM_FallAerial,\n    ftCo_SM_FallAerialF,\n    ftCo_SM_FallAerialB,\n    ftCo_SM_FallSpecial,\n    ftCo_SM_FallSpecialF,\n    ftCo_SM_FallSpecialB,\n    ftCo_SM_DamageFall,\n    ftCo_SM_Squat,\n    ftCo_SM_SquatWait,\n    ftCo_SM_Unk032,\n    ftCo_SM_SquatWaitItem,\n    ftCo_SM_SquatRv,\n    ftCo_SM_Landing,\n    ftCo_SM_LandingFallSpecial,\n    ftCo_SM_GuardOn,\n    ftCo_SM_Guard,\n    ftCo_SM_GuardOff,\n    ftCo_SM_GuardDamage,\n    ftCo_SM_EscapeN,\n    ftCo_SM_EscapeF,\n    ftCo_SM_EscapeB,\n    ftCo_SM_EscapeAir,\n    ftCo_SM_Rebound,\n    ftCo_SM_Attack11,\n    ftCo_SM_Attack12,\n    ftCo_SM_Attack13,\n    ftCo_SM_Attack100Start,\n    ftCo_SM_Attack100Loop,\n    ftCo_SM_Attack100End,\n    ftCo_SM_AttackDash,\n    ftCo_SM_AttackS3Hi,\n    ftCo_SM_AttackS3HiS,\n    ftCo_SM_AttackS3,\n    ftCo_SM_AttackS3LwS,\n    ftCo_SM_AttackS3Lw,\n    ftCo_SM_AttackHi3,\n    ftCo_SM_AttackLw3,\n    ftCo_SM_AttackS4Hi,\n    ftCo_SM_AttackS4HiS,\n    ftCo_SM_AttackS4,\n    ftCo_SM_AttackS4LwS,\n    ftCo_SM_AttackS4Lw,\n    ftCo_SM_Unk065,\n    ftCo_SM_AttackHi4,\n    ftCo_SM_AttackLw4,\n    ftCo_SM_AttackAirN,\n    ftCo_SM_AttackAirF,\n    ftCo_SM_AttackAirB,\n    ftCo_SM_AttackAirHi,\n    ftCo_SM_AttackAirLw,\n    ftCo_SM_LandingAirN,\n    ftCo_SM_LandingAirF,\n    ftCo_SM_LandingAirB,\n    ftCo_SM_LandingAirHi,\n    ftCo_SM_LandingAirLw,\n    ftCo_SM_LightGet,\n    ftCo_SM_LightThrowF,\n    ftCo_SM_LightThrowB,\n    ftCo_SM_LightThrowHi,\n    ftCo_SM_LightThrowLw,\n    ftCo_SM_LightThrowDash,\n    ftCo_SM_LightThrowDrop,\n    ftCo_SM_LightThrowAirF,\n    ftCo_SM_LightThrowAirB,\n    ftCo_SM_LightThrowAirHi,\n    ftCo_SM_LightThrowAirLw,\n    ftCo_SM_HeavyGet,\n    ftCo_SM_HeavyWalk1,\n    ftCo_SM_HeavyWalk2,\n    ftCo_SM_HeavyThrowF,\n    ftCo_SM_HeavyThrowB,\n    ftCo_SM_HeavyThrowHi,\n    ftCo_SM_HeavyThrowLw,\n    ftCo_SM_LightThrowF4,\n    ftCo_SM_LightThrowB4,\n    ftCo_SM_LightThrowHi4,\n    ftCo_SM_LightThrowLw4,\n    ftCo_SM_LightThrowAirF4,\n    ftCo_SM_LightThrowAirB4,\n    ftCo_SM_LightThrowAirHi4,\n    ftCo_SM_LightThrowAirLw4,\n    ftCo_SM_HeavyThrowF4,\n    ftCo_SM_HeavyThrowB4,\n    ftCo_SM_HeavyThrowHi4,\n    ftCo_SM_HeavyThrowLw4,\n    ftCo_SM_SwordSwing1,\n    ftCo_SM_SwordSwing3,\n    ftCo_SM_SwordSwing4,\n    ftCo_SM_SwordSwingDash,\n    ftCo_SM_BatSwing1,\n    ftCo_SM_BatSwing3,\n    ftCo_SM_BatSwing4,\n    ftCo_SM_BatSwingDash,\n    ftCo_SM_ParasolSwing1,\n    ftCo_SM_ParasolSwing3,\n    ftCo_SM_ParasolSwing4,\n    ftCo_SM_ParasolSwingDash,\n    ftCo_SM_HarisenSwing1,\n    ftCo_SM_HarisenSwing3,\n    ftCo_SM_HarisenSwing4,\n    ftCo_SM_HarisenSwingDash,\n    ftCo_SM_StarRodSwing1,\n    ftCo_SM_StarRodSwing3,\n    ftCo_SM_StarRodSwing4,\n    ftCo_SM_StarRodSwingDash,\n    ftCo_SM_LipstickSwing1,\n    ftCo_SM_LipstickSwing3,\n    ftCo_SM_LipstickSwing4,\n    ftCo_SM_LipstickSwingDash,\n    ftCo_SM_HammerWait,\n    ftCo_SM_HammerMove,\n    ftCo_SM_ItemParasolOpen,\n    ftCo_SM_ItemParasolFall,\n    ftCo_SM_ItemParasolFallSpecial,\n    ftCo_SM_ItemParasolDamageFall,\n    ftCo_SM_LGunShoot,\n    ftCo_SM_LGunShootAir,\n    ftCo_SM_LGunShootEmpty,\n    ftCo_SM_LGunShootAirEmpty,\n    ftCo_SM_FireFlowerShoot,\n    ftCo_SM_FireFlowerShootAir,\n    ftCo_SM_ItemScrew,\n    ftCo_SM_ItemScrewAir,\n    ftCo_SM_ItemScrewDamage,\n    ftCo_SM_ItemScrewDamageAir,\n    ftCo_SM_ItemBlind,\n    ftCo_SM_ItemScopeStart,\n    ftCo_SM_ItemScopeRapid,\n    ftCo_SM_ItemScopeFire,\n    ftCo_SM_ItemScopeEnd,\n    ftCo_SM_ItemScopeAirStart,\n    ftCo_SM_ItemScopeAirRapid,\n    ftCo_SM_ItemScopeAirFire,\n    ftCo_SM_ItemScopeAirEnd,\n    ftCo_SM_ItemScopeStartEmpty,\n    ftCo_SM_ItemScopeRapidEmpty,\n    ftCo_SM_ItemScopeFireEmpty,\n    ftCo_SM_ItemScopeEndEmpty,\n    ftCo_SM_ItemScopeAirStartEmpty,\n    ftCo_SM_ItemScopeAirRapidEmpty,\n    ftCo_SM_ItemScopeAirFireEmpty,\n    ftCo_SM_ItemScopeAirEndEmpty,\n    ftCo_SM_DamageHi1,\n    ftCo_SM_DamageHi2,\n    ftCo_SM_DamageHi3,\n    ftCo_SM_DamageN1,\n    ftCo_SM_DamageN2,\n    ftCo_SM_DamageN3,\n    ftCo_SM_DamageLw1,\n    ftCo_SM_DamageLw2,\n    ftCo_SM_DamageLw3,\n    ftCo_SM_DamageAir1,\n    ftCo_SM_DamageAir2,\n    ftCo_SM_DamageAir3,\n    ftCo_SM_DamageFlyHi,\n    ftCo_SM_DamageFlyN,\n    ftCo_SM_DamageFlyLw,\n    ftCo_SM_DamageFlyTop,\n    ftCo_SM_DamageFlyRoll,\n    ftCo_SM_Unk182,\n    ftCo_SM_DownBoundU,\n    ftCo_SM_DownWaitU,\n    ftCo_SM_DownDamageU,\n    ftCo_SM_DownStandU,\n    ftCo_SM_DownAttackU,\n    ftCo_SM_DownFowardU,\n    ftCo_SM_DownBackU,\n    ftCo_SM_DownSpotU,\n    ftCo_SM_DownBoundD,\n    ftCo_SM_DownWaitD,\n    ftCo_SM_DownDamageD,\n    ftCo_SM_DownStandD,\n    ftCo_SM_DownAttackD,\n    ftCo_SM_DownFowardD,\n    ftCo_SM_DownBackD,\n    ftCo_SM_DownSpotD,\n    ftCo_SM_Passive,\n    ftCo_SM_PassiveStandF,\n    ftCo_SM_PassiveStandB,\n    ftCo_SM_PassiveWall,\n    ftCo_SM_PassiveWallJump,\n    ftCo_SM_PassiveCeil,\n    ftCo_SM_FuraFura,\n    ftCo_SM_FuraSleepStart,\n    ftCo_SM_FuraSleepLoop,\n    ftCo_SM_FuraSleepEnd,\n    ftCo_SM_Pass,\n    ftCo_SM_Ottotto,\n    ftCo_SM_OttottoWait,\n    ftCo_SM_WallDamage,\n    ftCo_SM_StopWall,\n    ftCo_SM_StopCeil,\n    ftCo_SM_MissFoot,\n    ftCo_SM_CliffCatch,\n    ftCo_SM_CliffWait,\n    ftCo_SM_Unk218,\n    ftCo_SM_CliffClimbSlow,\n    ftCo_SM_CliffClimbQuick,\n    ftCo_SM_CliffAttackSlow,\n    ftCo_SM_CliffAttackQuick,\n    ftCo_SM_CliffEscapeSlow,\n    ftCo_SM_CliffEscapeQuick,\n    ftCo_SM_CliffJumpSlow1,\n    ftCo_SM_CliffJumpSlow2,\n    ftCo_SM_CliffJumpQuick1,\n    ftCo_SM_CliffJumpQuick2,\n    ftCo_SM_Unk229,\n    ftCo_SM_Unk230,\n    ftCo_SM_Unk231,\n    ftCo_SM_Unk232,\n    ftCo_SM_Unk233,\n    ftCo_SM_Unk234,\n    ftCo_SM_Unk235,\n    ftCo_SM_Unk236,\n    ftCo_SM_Unk237,\n    ftCo_SM_EntryStart,\n    ftCo_SM_AppealSR,\n    ftCo_SM_AppealSL,\n    ftCo_SM_Unk241,\n    ftCo_SM_Catch,\n    ftCo_SM_CatchDash,\n    ftCo_SM_CatchWait,\n    ftCo_SM_CatchAttack,\n    ftCo_SM_CatchCut,\n    ftCo_SM_ThrowF,\n    ftCo_SM_ThrowB,\n    ftCo_SM_ThrowHi,\n    ftCo_SM_ThrowLw,\n    ftCo_SM_CapturePulledHi,\n    ftCo_SM_CaptureWaitHi,\n    ftCo_SM_CaptureDamageHi,\n    ftCo_SM_CapturePulledLw,\n    ftCo_SM_CaptureWaitLw,\n    ftCo_SM_CaptureDamageLw,\n    ftCo_SM_CaptureCut,\n    ftCo_SM_CaptureJump,\n    ftCo_SM_CaptureNeck,\n    ftCo_SM_CaptureFoot,\n    ftCo_SM_Unk261,\n    ftCo_SM_ThrownF,\n    ftCo_SM_ThrownB,\n    ftCo_SM_ThrownHi,\n    ftCo_SM_ThrownLw,\n    ftCo_SM_ThrownlwWomen,\n    ftCo_SM_ShoulderedWait,\n    ftCo_SM_ShoulderedWalkSlow,\n    ftCo_SM_ShoulderedWalkMiddle,\n    ftCo_SM_ShoulderedWalkFast,\n    ftCo_SM_ShoulderedTurn,\n    ftCo_SM_ThrownFF,\n    ftCo_SM_ThrownFB,\n    ftCo_SM_ThrownFHi,\n    ftCo_SM_ThrownFLw,\n    ftCo_SM_CaptureCaptain,\n    ftCo_SM_YoshiEgg,\n    ftCo_SM_CaptureDamageKoopa,\n    ftCo_SM_ThrownKoopaF,\n    ftCo_SM_ThrownKoopaB,\n    ftCo_SM_CaptureDamageKoopaAir,\n    ftCo_SM_ThrownKoopaAirF,\n    ftCo_SM_ThrownKoopaAirB,\n    ftCo_SM_ThrownCopyStar,\n    ftCo_SM_ThrownKirbyStar,\n    ftCo_SM_ShieldBreakFly,\n    ftCo_SM_ShieldBreakFall,\n    ftCo_SM_ShieldBreakDownU,\n    ftCo_SM_ShieldBreakDownD,\n    ftCo_SM_ShieldBreakStandU,\n    ftCo_SM_ShieldBreakStandD,\n    ftCo_SM_ThrownMewtwo,\n    ftCo_SM_ThrownMewtwoAir,\n    ftCo_SM_KirbyYoshiEgg,\n    ftCo_SM_Count,\n} ftCo_Submotion;\ntypedef Fighter ftLk_Fighter;\ntypedef HSD_GObj ftLk_GObj;\ntypedef struct ftLk_DatAttrs ftLk_DatAttrs;\ntypedef struct ftLk_FighterVars ftLk_FighterVars;\ntypedef union ftLk_MotionVars ftLk_MotionVars;\nstatic MotionFlags const ftLk_MF_Base0 =\n    Ft_MF_SkipModel | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftLk_MF_Base1 =\n    Ft_MF_SkipItemVis | Ft_MF_FreezeState;\nstatic MotionFlags const ftLk_MF_Base2 =\n    ftLk_MF_Base1 | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftLk_MF_Base3 =\n    ftLk_MF_Base0 | Ft_MF_UnkUpdatePhys;\nstatic MotionFlags const ftLk_MF_AttackS42 =\n    ftLk_MF_Base2 | Ft_MF_SkipHit;\nstatic MotionFlags const ftLk_MF_SpecialN =\n    ftLk_MF_Base2 | ftLk_MF_Base3;\nstatic MotionFlags const ftLk_MF_SpecialNFullyCharged =\n    ftLk_MF_SpecialN | Ft_MF_Unk19;\nstatic MotionFlags const ftLk_MF_SpecialAirNCharge =\n    ftLk_MF_SpecialN | Ft_MF_SkipParasol;\nstatic MotionFlags const ftLk_MF_SpecialAirNFullyCharged =\n    ftLk_MF_SpecialNFullyCharged | Ft_MF_SkipParasol;\nstatic MotionFlags const ftLk_MF_SpecialAirNFire =\n    ftLk_MF_SpecialAirNCharge | Ft_MF_UnkUpdatePhys;\nstatic MotionFlags const ftLk_MF_SpecialSThrow =\n    ftLk_MF_Base3 | ftLk_MF_Base1 | Ft_MF_KeepGfx;\nstatic MotionFlags const ftLk_MF_SpecialSCatch =\n    ftLk_MF_SpecialSThrow | Ft_MF_UnkUpdatePhys;\nstatic MotionFlags const ftLk_MF_SpecialAirSThrow =\n    ftLk_MF_SpecialSThrow | ftLk_MF_Base3 | Ft_MF_SkipParasol;\nstatic MotionFlags const ftLk_MF_SpecialAirSThrowEmpty =\n    ftLk_MF_SpecialSCatch | ftLk_MF_Base1 | Ft_MF_SkipParasol;\nstatic MotionFlags const ftLk_MF_SpecialHi =\n    Ft_MF_KeepFastFall | Ft_MF_KeepGfx | Ft_MF_SkipModel | Ft_MF_KeepSfx |\n    Ft_MF_SkipItemVis | Ft_MF_UnkUpdatePhys | Ft_MF_FreezeState;\nstatic MotionFlags const ftLk_MF_SpecialLw =\n    Ft_MF_KeepColAnimHitStatus | Ft_MF_SkipModel | Ft_MF_SkipItemVis |\n    Ft_MF_UnkUpdatePhys | Ft_MF_FreezeState;\nstatic MotionFlags const ftLk_MF_SpecialAirLw =\n    ftLk_MF_SpecialLw | Ft_MF_SkipParasol;\nstatic MotionFlags const ftLk_MF_ZairCatch =\n    Ft_MF_SkipModelPartVis | Ft_MF_SkipMetalB;\ntypedef enum ftLink_MotionState {\n    ftLk_MS_AttackS42 = ftCo_MS_Count,\n    ftLk_MS_AppealSR,\n    ftLk_MS_AppealSL,\n    ftLk_MS_SpecialNStart,\n    ftLk_MS_SpecialNLoop,\n    ftLk_MS_SpecialNEnd,\n    ftLk_MS_SpecialAirNStart,\n    ftLk_MS_SpecialAirNLoop,\n    ftLk_MS_SpecialAirNEnd,\n    ftLk_MS_SpecialS1,\n    ftLk_MS_SpecialS2,\n    ftLk_MS_SpecialS1Empty,\n    ftLk_MS_SpecialAirS1,\n    ftLk_MS_SpecialAirS2,\n    ftLk_MS_SpecialAirS1Empty,\n    ftLk_MS_SpecialHi,\n    ftLk_MS_SpecialAirHi,\n    ftLk_MS_SpecialLw,\n    ftLk_MS_SpecialAirLw,\n    ftLk_MS_AirCatch,\n    ftLk_MS_AirCatchHit,\n    ftLk_MS_Count,\n    ftLk_MS_SelfCount = ftLk_MS_Count - ftCo_MS_Count,\n} ftLink_MotionState;\ntypedef enum ftLk_SpecialNIndex {\n    ftLk_SpecialNIndex_Start,\n    ftLk_SpecialNIndex_Loop,\n    ftLk_SpecialNIndex_End,\n    ftLk_SpecialNIndex_AirStart,\n    ftLk_SpecialNIndex_AirLoop,\n    ftLk_SpecialNIndex_AirEnd,\n    ftLk_SpecialNIndex_None,\n} ftLk_SpecialNIndex;\ntypedef enum ftLk_Submotion {\n    ftLk_SM_AttackS42 = ftCo_SM_Count,\n    ftLk_SM_SpecialNStart,\n    ftLk_SM_SpecialNLoop,\n    ftLk_SM_SpecialNEnd,\n    ftLk_SM_SpecialAirNStart,\n    ftLk_SM_SpecialAirNLoop,\n    ftLk_SM_SpecialAirNEnd,\n    ftLk_SM_SpecialS1,\n    ftLk_SM_SpecialS2,\n    ftLk_SM_SpecialS1Empty,\n    ftLk_SM_SpecialAirS1,\n    ftLk_SM_SpecialAirS2,\n    ftLk_SM_SpecialAirS1Empty,\n    ftLk_SM_SpecialHi,\n    ftLk_SM_SpecialAirHi,\n    ftLk_SM_SpecialLw,\n    ftLk_SM_SpecialAirLw,\n    ftLk_SM_AirCatch,\n    ftLk_SM_AirCatchHit,\n    ftLk_SM_Count,\n    ftLk_SM_SelfCount = ftLk_SM_Count - ftCo_SM_Count,\n} ftLk_Submotion;\n#define MELEE_FT_TYPES_H\n#define MELEE_LB_FORWARD_H\ntypedef struct HurtCapsule HurtCapsule;\ntypedef struct HitCapsule HitCapsule;\ntypedef struct HitVictim HitVictim;\ntypedef struct HitResult HitResult;\ntypedef enum Tangibility {\n    Vulnerable,\n    Invincible,\n    Intangible\n} Tangibility;\ntypedef enum HitElement {\n    HitElement_Normal,\n    HitElement_Fire,\n    HitElement_Electric,\n    HitElement_Slash,\n    HitElement_Coin,\n    HitElement_Ice,\n    /// Sleep for 103 frames\n    HitElement_Nap,\n    /// Sleep for 412 frames\n    HitElement_Sleep,\n    HitElement_Catch,\n    HitElement_Ground,\n    HitElement_Cape,\n    HitElement_Inert,\n    HitElement_Disable,\n    HitElement_Dark,\n    /// Screw Attack\n    HitElement_Scball,\n    HitElement_Lipstick,\n    /// Formerly presumed empty, this hitbox element is used by\n    ///  ReDead grab attacks\n    HitElement_Leadead,\n} HitElement;\ntypedef enum HitCapsuleState {\n    HitCapsule_Disabled,\n    HitCapsule_Enabled,\n    HitCapsule_Unk2,\n} HitCapsuleState;\n#define MELEE_FT_FTANIM_H\n#define _jobj_h_\n#define _aobj_h_\n#define _fobj_h_\n#define _object_h_\n#define _class_h_\n#define HSD_CLASS_INFO(o) ((HSD_ClassInfo*) o)\n#define HSD_CLASS_METHOD(o) (((HSD_Class*) o)->class_info)\n#define HSD_PARENT_INFO(o) ((o)->parent.head.parent)\n#define next_p(p) (p != NULL ? p->next : NULL)\ntypedef struct _HSD_Class {\n    struct _HSD_ClassInfo* class_info;\n} HSD_Class;\ntypedef struct _HSD_ClassInfoHead {\n    void (*info_init)(void);\n    u32 flags;\n    char* library_name;\n    char* class_name;\n    s16 obj_size;\n    s16 info_size;\n    struct _HSD_ClassInfo* parent;\n    struct _HSD_ClassInfo* next;\n    struct _HSD_ClassInfo* child;\n    u32 nb_exist;\n    u32 nb_peak;\n} HSD_ClassInfoHead;\ntypedef struct _HSD_ClassInfo {\n    struct _HSD_ClassInfoHead head;\n    HSD_Class* (*alloc)(struct _HSD_ClassInfo* c);\n    int (*init)(struct _HSD_Class* c);\n    void (*release)(struct _HSD_Class* c);\n    void (*destroy)(struct _HSD_Class* c);\n    void (*amnesia)(struct _HSD_ClassInfo* c);\n} HSD_ClassInfo;\ntypedef struct _HSD_FreeList {\n    struct _HSD_FreeList* next;\n} HSD_FreeList;\ntypedef struct _HSD_MemoryEntry {\n    u32 size;\n    u32 nb_alloc;\n    u32 nb_free;\n    struct _HSD_FreeList* free_list;\n    struct _HSD_MemoryEntry* next;\n} HSD_MemoryEntry;\nextern HSD_ClassInfo hsdClass;\n// void hsdDelete(void* object);\nvoid ClassInfoInit(HSD_ClassInfo* info);\nvoid hsdInitClassInfo(HSD_ClassInfo* class_info, HSD_ClassInfo* parent_info,\n                      char* base_class_library, char* type, s32 info_size,\n                      s32 class_size);\nvoid OSReport_PrintSpaces(s32 count);\nvoid* hsdAllocMemPiece(s32 size);\nvoid hsdFreeMemPiece(void* mem, s32 size);\nvoid* hsdNew(HSD_ClassInfo*);\nbool hsdChangeClass(void* object, void* class_info);\nbool hsdIsDescendantOf(void* info, void* p);\nbool hsdObjIsDescendantOf(HSD_Obj* o, HSD_ClassInfo* p);\nHSD_ClassInfo* hsdSearchClassInfo(const char* class_name);\nvoid hsdForgetClassLibrary(const char* library_name);\nHSD_MemoryEntry* GetMemoryEntry(s32 idx);\nHSD_Class* _hsdClassAlloc(HSD_ClassInfo* info);\nint _hsdClassInit(HSD_Class* arg0);\nvoid _hsdClassRelease(HSD_Class* cls);\nvoid _hsdClassDestroy(HSD_Class* cls);\nvoid _hsdClassAmnesia(HSD_ClassInfo* info);\nvoid class_set_flags(HSD_ClassInfo* class_info, s32 set, s32 reset);\nvoid ForgetClassLibraryReal(HSD_ClassInfo* class_info);\nvoid DumpClassStat(HSD_ClassInfo* info, s32 level);\nvoid hsdDumpClassStat(HSD_ClassInfo* info, bool recursive, s32 level);\nvoid ForgetClassLibraryChild(const char* library_name,\n                             HSD_ClassInfo* class_info);\nstatic inline void hsdDelete(void* object)\n{\n    if (object == ((any_t) 0)) {\n        return;\n    }\n    (((HSD_Class*) object)->class_info)->release((HSD_Class*) object);\n    (((HSD_Class*) object)->class_info)->destroy((HSD_Class*) object);\n}\n#define HSD_OBJ_NOREF ((u16) -1)\n#define HSD_OBJ(o) ((HSD_Obj*) o)\n#define HSD_OBJECT_INFO(o) (o.parent.parent)\n#define HSD_OBJECT_METHOD(o) (o->parent.parent.class_info)\n#define HSD_OBJECT_PARENT_INFO(o) ((o)->parent.parent.head.parent)\ntypedef enum _HSD_Type {\n    AOBJ_TYPE = 1,\n    COBJ_TYPE = 2,\n    DOBJ_TYPE = 3,\n    FOBJ_TYPE = 4,\n    FOG_TYPE = 5,\n    JOBJ_TYPE = 6,\n    LOBJ_TYPE = 7,\n    MOBJ_TYPE = 8,\n    POBJ_TYPE = 9,\n    ROBJ_TYPE = 10,\n    TOBJ_TYPE = 11,\n    WOBJ_TYPE = 12,\n    RENDER_TYPE = 13,\n    CHAN_TYPE = 14,\n    TEVREG_TYPE = 15,\n    CBOBJ_TYPE = 16,\n    HSD_MAX_TYPE,\n} HSD_Type;\n#define MASK_OF(type) (1 << ((type) -1))\ntypedef enum _HSD_TypeMask {\n    AOBJ_MASK = (1 << ((AOBJ_TYPE) -1)),\n    COBJ_MASK = (1 << ((COBJ_TYPE) -1)),\n    DOBJ_MASK = (1 << ((DOBJ_TYPE) -1)),\n    FOBJ_MASK = (1 << ((FOBJ_TYPE) -1)),\n    FOG_MASK = (1 << ((FOG_TYPE) -1)),\n    JOBJ_MASK = (1 << ((JOBJ_TYPE) -1)),\n    LOBJ_MASK = (1 << ((LOBJ_TYPE) -1)),\n    MOBJ_MASK = (1 << ((MOBJ_TYPE) -1)),\n    POBJ_MASK = (1 << ((POBJ_TYPE) -1)),\n    ROBJ_MASK = (1 << ((ROBJ_TYPE) -1)),\n    TOBJ_MASK = (1 << ((TOBJ_TYPE) -1)),\n    WOBJ_MASK = (1 << ((WOBJ_TYPE) -1)),\n    RENDER_MASK = (1 << ((RENDER_TYPE) -1)),\n    CHAN_MASK = (1 << ((CHAN_TYPE) -1)),\n    TEVREG_MASK = (1 << ((TEVREG_TYPE) -1)),\n    CBOBJ_MASK = (1 << ((CBOBJ_TYPE) -1)),\n    ALL_TYPE_MASK = (1 << ((HSD_MAX_TYPE) -1)) - 1,\n} HSD_TypeMask;\nstruct HSD_Obj {\n    struct _HSD_Class parent;\n    u16 ref_count;\n    u16 ref_count_individual;\n};\ntypedef struct _HSD_ObjInfo {\n    struct _HSD_ClassInfo parent;\n} HSD_ObjInfo;\nextern HSD_ClassInfo hsdObj;\nvoid ObjInfoInit(void);\nstatic inline int iref_CNT(void* o)\n{\n    return ((HSD_Obj*) o)->ref_count_individual;\n}\nstatic inline int ref_CNT(void* o)\n{\n    if (((HSD_Obj*) o)->ref_count == ((u16) -1)) {\n        return -1;\n    } else {\n        return ((HSD_Obj*) o)->ref_count;\n    }\n}\nstatic inline bool ref_DEC(void* o)\n{\n    bool ret = (u64) (((HSD_Obj*) o)->ref_count == ((u16) -1));\n    if (ret) {\n        return ret;\n    }\n    return ((HSD_Obj*) o)->ref_count-- == 0;\n}\nstatic inline bool iref_DEC(void* o)\n{\n    bool ret = (u64) (((HSD_Obj*) o)->ref_count_individual == 0);\n    if (ret) {\n        return ret;\n    }\n    ((HSD_Obj*) o)->ref_count_individual -= 1;\n    return ((HSD_Obj*) o)->ref_count_individual == 0;\n}\nstatic inline void ref_INC(void* o)\n{\n    if (o != ((any_t) 0)) {\n        ((HSD_Obj*) o)->ref_count++;\n        if (!(((HSD_Obj*) o)->ref_count != ((u16) -1))) {\n            __assert(\"object.h\", 93, \"HSD_OBJ(o)->ref_count != HSD_OBJ_NOREF\");\n        }\n    }\n}\nstatic inline void iref_INC(void* o)\n{\n    ((HSD_Obj*) o)->ref_count_individual++;\n    if (!(((HSD_Obj*) o)->ref_count_individual != 0)) {\n        __assert(\"object.h\", 158, \"HSD_OBJ(o)->ref_count_individual != 0\");\n    }\n}\n#define HSD_A_OP_NONE 0\n#define HSD_A_OP_CON 1\n#define HSD_A_OP_LIN 2\n#define HSD_A_OP_SPL0 3\n#define HSD_A_OP_SPL 4\n#define HSD_A_OP_SLP 5\n#define HSD_A_OP_KEY 6\n#define HSD_A_FRAC_FLOAT (0 << 5)\n#define HSD_A_FRAC_S16 (1 << 5)\n#define HSD_A_FRAC_U16 (2 << 5)\n#define HSD_A_FRAC_S8 (3 << 5)\n#define HSD_A_FRAC_U8 (4 << 5)\n#define FOBJ_LOAD_DATA0 1\n#define FOBJ_LOAD_DATA 2\n#define FOBJ_LOAD_WAIT 3\n#define TYPE_ROBJ 1\n#define TYPE_JOBJ 12\ntypedef struct _HSD_FObj {\n    struct _HSD_FObj* next;\n    u8* ad;\n    u8* ad_head;\n    u32 length;\n    u8 flags;\n    u8 op;\n    u8 op_intrp;\n    u8 obj_type;\n    u8 frac_value;\n    u8 frac_slope;\n    u16 nb_pack;\n    s16 startframe;\n    u16 fterm;\n    f32 time;\n    f32 p0;\n    f32 p1;\n    f32 d0;\n    f32 d1;\n} HSD_FObj;\ntypedef struct _HSD_FObjDesc {\n    struct _HSD_FObjDesc* next;\n    u32 length;\n    f32 startframe;\n    u8 type;\n    u8 frac_value;\n    u8 frac_slope;\n    u8 dummy0;\n    u8* ad;\n} HSD_FObjDesc;\nunion HSD_ObjData {\n    f32 fv;\n    s32 iv;\n    Vec3 p;\n};\nHSD_ObjAllocData* HSD_FObjGetAllocData(void);\nvoid HSD_FObjInitAllocData(void);\nvoid HSD_FObjRemove(HSD_FObj* fobj);\nvoid HSD_FObjRemoveAll(HSD_FObj* fobj);\nu32 HSD_FObjSetState(HSD_FObj* fobj, u32 state);\nu32 HSD_FObjGetState(HSD_FObj* fobj);\nvoid HSD_FObjReqAnimAll(HSD_FObj* fobj, f32 startframe);\nvoid HSD_FObjStopAnim(HSD_FObj* fobj, void* obj, HSD_ObjUpdateFunc obj_update,\n                      f32 rate);\nvoid HSD_FObjStopAnimAll(HSD_FObj* fobj, void* obj,\n                         HSD_ObjUpdateFunc obj_update, f32 rate);\nvoid FObjUpdateAnim(HSD_FObj* fobj, void* obj, HSD_ObjUpdateFunc update_func);\nvoid HSD_FObjInterpretAnim(HSD_FObj* fobj, void* obj,\n                           HSD_ObjUpdateFunc obj_update, f32 rate);\nvoid HSD_FObjInterpretAnimAll(void* fobj, void* obj,\n                              HSD_ObjUpdateFunc obj_update, f32 rate);\nHSD_FObj* HSD_FObjLoadDesc(HSD_FObjDesc* desc);\nHSD_FObj* HSD_FObjAlloc(void);\nvoid HSD_FObjFree(HSD_FObj* fobj);\n#define _id_h_\ntypedef struct _IDEntry {\n    struct _IDEntry* next;\n    u32 id;\n    void* data;\n} IDEntry;\ntypedef struct _HSD_IDTable {\n    struct _IDEntry* table[101];\n} HSD_IDTable;\nHSD_ObjAllocData* HSD_IDGetAllocData(void);\nvoid HSD_IDInitAllocData(void);\nvoid HSD_IDSetup(void);\nvoid HSD_IDInsertToTable(HSD_IDTable* table, u32 id, void* data);\nvoid HSD_IDRemoveByIDFromTable(HSD_IDTable* table, u32 id);\nvoid* HSD_IDGetDataFromTable(HSD_IDTable* table, u32 id, s32* success);\nvoid _HSD_IDForgetMemory(any_t low, any_t high);\nstatic inline void* HSD_IDGetData(u32 id, s32* success)\n{\n    return HSD_IDGetDataFromTable(((any_t) 0), id, success);\n}\n#define _list_h_\ntypedef struct _HSD_SList {\n    struct _HSD_SList* next;\n    void* data;\n} HSD_SList;\ntypedef struct _HSD_DList {\n    struct _HSD_DList* next;\n    struct _HSD_DList* prev;\n    void* data;\n} HSD_DList;\nvoid HSD_ListInitAllocData(void);\nHSD_ObjAllocData* HSD_SListGetAllocData(void);\nHSD_ObjAllocData* HSD_DListGetAllocData(void);\nHSD_SList* HSD_SListAlloc(void);\nHSD_SList* HSD_SListAllocAndAppend(HSD_SList* next, void* data);\nHSD_SList* HSD_SListAllocAndPrepend(HSD_SList* prev, void* data);\nHSD_SList* HSD_SListAppendList(HSD_SList* list, HSD_SList* next);\nHSD_SList* HSD_SListPrependList(HSD_SList* list, HSD_SList* prev);\nHSD_SList* HSD_SListRemove(HSD_SList* list);\n#define AOBJ_REWINDED (1 << 26)\n#define AOBJ_FIRST_PLAY (1 << 27)\n#define AOBJ_NO_UPDATE (1 << 28)\n#define AOBJ_LOOP (1 << 29)\n#define AOBJ_NO_ANIM (1 << 30)\ntypedef enum _AObj_Arg_Type {\n    AOBJ_ARG_A,\n    AOBJ_ARG_AF,\n    AOBJ_ARG_AV,\n    AOBJ_ARG_AU,\n    AOBJ_ARG_AO,\n    AOBJ_ARG_AOF,\n    AOBJ_ARG_AOV,\n    AOBJ_ARG_AOU,\n    AOBJ_ARG_AOT,\n    AOBJ_ARG_AOTF,\n    AOBJ_ARG_AOTV,\n    AOBJ_ARG_AOTU,\n} AObj_Arg_Type;\ntypedef union _callbackArg {\n    f32 f;\n    u32 d;\n    void* v;\n} callbackArg;\nstruct HSD_AObj {\n    u32 flags;\n    f32 curr_frame;\n    f32 rewind_frame;\n    f32 end_frame;\n    f32 framerate;\n    HSD_FObj* fobj;\n    struct HSD_Obj* hsd_obj;\n};\nstruct HSD_AObjDesc {\n    u32 flags;\n    f32 end_frame;\n    HSD_FObjDesc* fobjdesc;\n    u32 obj_id;\n};\nstruct HSD_AnimJoint {\n    HSD_AnimJoint* child;\n    HSD_AnimJoint* next;\n    HSD_AObjDesc* aobjdesc;\n    HSD_RObjAnimJoint* robj_anim;\n    u32 flags;\n};\nvoid HSD_AObjInitAllocData(void);\nHSD_ObjAllocData* HSD_AObjGetAllocData(void);\nu32 HSD_AObjGetFlags(HSD_AObj* aobj);\nvoid HSD_AObjSetFlags(HSD_AObj* aobj, u32 flags);\nvoid HSD_AObjClearFlags(HSD_AObj* aobj, u32 flags);\nvoid HSD_AObjSetFObj(HSD_AObj* aobj, HSD_FObj* fobj);\nvoid HSD_AObjInitEndCallBack(void);\nvoid HSD_AObjInvokeCallBacks(void);\nvoid HSD_AObjReqAnim(HSD_AObj* aobj, f32 frame);\nvoid HSD_AObjStopAnim(HSD_AObj* aobj, void* obj, HSD_ObjUpdateFunc func);\nvoid HSD_AObjInterpretAnim(HSD_AObj* aobj, void* obj,\n                           HSD_ObjUpdateFunc update_func);\nfloat fmod(float x, float y);\nHSD_AObj* HSD_AObjLoadDesc(HSD_AObjDesc* aobjdesc);\nvoid HSD_AObjRemove(HSD_AObj* aobj);\nHSD_AObj* HSD_AObjAlloc(void);\nvoid HSD_AObjFree(HSD_AObj* aobj);\nvoid HSD_ForeachAnim(void* obj, HSD_Type type, HSD_TypeMask mask, void* func,\n                     AObj_Arg_Type arg_type, ...);\nvoid HSD_AObjSetRate(HSD_AObj* aobj, f32 rate);\nvoid HSD_AObjSetRewindFrame(HSD_AObj* aobj, f32 frame);\nvoid HSD_AObjSetEndFrame(HSD_AObj* aobj, f32 frame);\nvoid HSD_AObjSetCurrentFrame(HSD_AObj* aobj, f32 frame);\nvoid _HSD_AObjForgetMemory(any_t low, any_t high);\nstatic inline f32 HSD_AObjGetEndFrame(HSD_AObj* aobj)\n{\n    if (!aobj) {\n        __assert(\"aobj.h\", 0xAAU, \"aobj\");\n    }\n    return aobj->end_frame;\n}\n#define _mobj_h_\n#define _texp_h_\n#define HSD_TEXP_RAS -2\n#define HSD_TEXP_TEX -1\n#define HSD_TEXP_ZERO 0\ntypedef enum _HSD_TEInput {\n    HSD_TE_END = 0,\n    HSD_TE_RGB = 1,\n    HSD_TE_R = 2,\n    HSD_TE_G = 3,\n    HSD_TE_B = 4,\n    HSD_TE_A = 5,\n    HSD_TE_X = 6,\n    HSD_TE_0 = 7,\n    HSD_TE_1 = 8,\n    HSD_TE_1_8 = 9,\n    HSD_TE_2_8 = 10,\n    HSD_TE_3_8 = 11,\n    HSD_TE_4_8 = 12,\n    HSD_TE_5_8 = 13,\n    HSD_TE_6_8 = 14,\n    HSD_TE_7_8 = 15,\n    HSD_TE_INPUT_MAX = 16,\n    HSD_TE_UNDEF = 0xFF\n} HSD_TEInput;\ntypedef enum _HSD_TEType {\n    HSD_TE_U8 = 0,\n    HSD_TE_U16 = 1,\n    HSD_TE_U32 = 2,\n    HSD_TE_F32 = 3,\n    HSD_TE_F64 = 4,\n    HSD_TE_COMP_TYPE_MAX = 5\n} HSD_TEType;\ntypedef enum _HSD_TExpType {\n    HSD_TE_ZERO = 0,\n    HSD_TE_TEV = 1,\n    HSD_TE_TEX = 2,\n    HSD_TE_RAS = 3,\n    HSD_TE_CNST = 4,\n    HSD_TE_IMM = 5,\n    HSD_TE_KONST = 6,\n    HSD_TE_ALL = 7,\n    HSD_TE_TYPE_MAX = 8\n} HSD_TExpType;\ntypedef struct _HSD_TevConf {\n    u32 clr_op;\n    u32 clr_a;\n    u32 clr_b;\n    u32 clr_c;\n    u32 clr_d;\n    u32 clr_scale;\n    u32 clr_bias;\n    u8 clr_clamp;\n    u32 clr_out_reg;\n    u32 alpha_op;\n    u32 alpha_a;\n    u32 alpha_b;\n    u32 alpha_c;\n    u32 alpha_d;\n    u32 alpha_scale;\n    u32 alpha_bias;\n    u8 alpha_clamp;\n    u32 alpha_out_reg;\n    u32 mode;\n    u32 ras_swap;\n    u32 tex_swap;\n    u32 kcsel;\n    u32 kasel;\n} HSD_TevConf;\ntypedef struct _HSD_TevDesc {\n    struct _HSD_TevDesc* next;\n    u32 flags;\n    u32 stage;\n    u32 coord;\n    u32 map;\n    u32 color;\n    union {\n        HSD_TevConf tevconf;\n        struct {\n            u32 tevmode;\n        } tevop;\n    } u;\n} HSD_TevDesc;\ntypedef struct _HSD_TExpTevDesc {\n    struct _HSD_TevDesc desc;\n    HSD_TObj* tobj;\n} HSD_TExpTevDesc;\ntypedef struct _HSD_TECommon {\n    HSD_TExpType type;\n    HSD_TExp* next;\n} HSD_TECommon;\ntypedef struct _HSD_TECnst {\n    HSD_TExpType type;\n    HSD_TExp* next;\n    void* val;\n    HSD_TEInput comp;\n    HSD_TEType ctype;\n    u8 reg;\n    u8 idx;\n    u8 ref;\n    u8 range;\n} HSD_TECnst;\ntypedef struct _HSD_TEArg {\n    u8 type;\n    u8 sel;\n    u8 arg;\n    HSD_TExp* exp;\n} HSD_TEArg;\ntypedef struct _HSD_TETev {\n    HSD_TExpType type;\n    HSD_TExp* next;\n    s32 c_ref;\n    u8 c_dst;\n    u8 c_op;\n    u8 c_clamp;\n    u8 c_bias;\n    u8 c_scale;\n    u8 c_range;\n    s32 a_ref;\n    u8 a_dst;\n    u8 a_op;\n    u8 a_clamp;\n    u8 a_bias;\n    u8 a_scale;\n    u8 tex_swap;\n    u8 ras_swap;\n    u8 kcsel;\n    u8 kasel;\n    HSD_TEArg c_in[4];\n    HSD_TEArg a_in[4];\n    HSD_TObj* tex;\n    u8 chan;\n} HSD_TETev;\nunion HSD_TExp {\n    HSD_TExpType type;\n    struct _HSD_TECommon comm;\n    struct _HSD_TETev tev;\n    struct _HSD_TECnst cnst;\n};\nHSD_TExpType HSD_TExpGetType(HSD_TExp* texp);\nHSD_TExp* HSD_TExpTev(HSD_TExp**);\nHSD_TExp* HSD_TExpCnst(void*, HSD_TEInput, HSD_TEType, HSD_TExp**);\nvoid HSD_TExpOrder(HSD_TExp*, unk_t, enum_t);\nvoid HSD_TExpColorOp(HSD_TExp*, enum_t, enum_t, enum_t, GXBool);\n/// @todo Find real parameters\nvoid HSD_TExpColorIn();\n/// @todo Find real parameters\nvoid HSD_TExpAlphaOp();\n/// @todo Find real parameters\nvoid HSD_TExpAlphaIn();\nvoid HSD_TExpFreeTevDesc(HSD_TExpTevDesc*);\nvoid HSD_TExpFreeList(HSD_TExp*, HSD_TExpType, int);\nvoid HSD_TExpCompile(HSD_TExp*, HSD_TExpTevDesc**, HSD_TExp**);\nvoid HSD_TExpSetupTev(HSD_TExpTevDesc*, HSD_TExp*);\nvoid HSD_TExpRef(HSD_TExp* texp, u8 sel);\nvoid HSD_TExpUnref(HSD_TExp* texp, u8 sel);\nvoid HSD_TExpSetReg(HSD_TExp* texp);\n#define _hsd_tobj_h_\n#define TOBJ_ANIM 0x10\n#define HSD_A_T_TIMG 1\n#define HSD_A_T_TRAU 2\n#define HSD_A_T_TRAV 3\n#define HSD_A_T_SCAU 4\n#define HSD_A_T_SCAV 5\n#define HSD_A_T_ROTX 6\n#define HSD_A_T_ROTY 7\n#define HSD_A_T_ROTZ 8\n#define HSD_A_T_BLEND 9\n#define HSD_A_T_TCLT 10\n#define HSD_A_T_LOD_BIAS 11\n#define HSD_A_T_KONST_R 12\n#define HSD_A_T_KONST_G 13\n#define HSD_A_T_KONST_B 14\n#define HSD_A_T_KONST_A 15\n#define HSD_A_T_TEV0_R 16\n#define HSD_A_T_TEV0_G 17\n#define HSD_A_T_TEV0_B 18\n#define HSD_A_T_TEV0_A 19\n#define HSD_A_T_TEV1_R 20\n#define HSD_A_T_TEV1_G 21\n#define HSD_A_T_TEV1_B 22\n#define HSD_A_T_TEV1_A 23\n#define HSD_A_T_TS_BLEND 24\n#define TOBJ_TEV_CC_KONST_RGB (0x01 << 7 | 0)\n#define TOBJ_TEV_CC_KONST_RRR (0x01 << 7 | 1)\n#define TOBJ_TEV_CC_KONST_GGG (0x01 << 7 | 2)\n#define TOBJ_TEV_CC_KONST_BBB (0x01 << 7 | 3)\n#define TOBJ_TEV_CC_KONST_AAA (0x01 << 7 | 4)\n#define TOBJ_TEV_CC_TEX0_RGB (0x01 << 7 | 5)\n#define TOBJ_TEV_CC_TEX0_AAA (0x01 << 7 | 6)\n#define TOBJ_TEV_CC_TEX1_RGB (0x01 << 7 | 7)\n#define TOBJ_TEV_CC_TEX1_AAA (0x01 << 7 | 8)\n#define TOBJ_TEV_CA_KONST_R (0x01 << 6 | 0)\n#define TOBJ_TEV_CA_KONST_G (0x01 << 6 | 1)\n#define TOBJ_TEV_CA_KONST_B (0x01 << 6 | 2)\n#define TOBJ_TEV_CA_KONST_A (0x01 << 6 | 3)\n#define TOBJ_TEV_CA_TEX0_A (0x01 << 6 | 4)\n#define TOBJ_TEV_CA_TEX1_A (0x01 << 6 | 5)\n#define TOBJ_TEVREG_ACTIVE_KONST_R (0x01 << 0)\n#define TOBJ_TEVREG_ACTIVE_KONST_G (0x01 << 1)\n#define TOBJ_TEVREG_ACTIVE_KONST_B (0x01 << 2)\n#define TOBJ_TEVREG_ACTIVE_KONST_A (0x01 << 3)\n#define TOBJ_TEVREG_ACTIVE_KONST (TOBJ_TEVREG_ACTIVE_KONST_R | TOBJ_TEVREG_ACTIVE_KONST_G | TOBJ_TEVREG_ACTIVE_KONST_B | TOBJ_TEVREG_ACTIVE_KONST_A)\n#define TOBJ_TEVREG_ACTIVE_TEV0_R (0x01 << 4)\n#define TOBJ_TEVREG_ACTIVE_TEV0_G (0x01 << 5)\n#define TOBJ_TEVREG_ACTIVE_TEV0_B (0x01 << 6)\n#define TOBJ_TEVREG_ACTIVE_TEV0_A (0x01 << 7)\n#define TOBJ_TEVREG_ACTIVE_TEV0 (TOBJ_TEVREG_ACTIVE_TEV0_R | TOBJ_TEVREG_ACTIVE_TEV0_G | TOBJ_TEVREG_ACTIVE_TEV0_B | TOBJ_TEVREG_ACTIVE_TEV0_A)\n#define TOBJ_TEVREG_ACTIVE_TEV1_R (0x01 << 8)\n#define TOBJ_TEVREG_ACTIVE_TEV1_G (0x01 << 9)\n#define TOBJ_TEVREG_ACTIVE_TEV1_B (0x01 << 10)\n#define TOBJ_TEVREG_ACTIVE_TEV1_A (0x01 << 11)\n#define TOBJ_TEVREG_ACTIVE_TEV1 (TOBJ_TEVREG_ACTIVE_TEV1_R | TOBJ_TEVREG_ACTIVE_TEV1_G | TOBJ_TEVREG_ACTIVE_TEV1_B | TOBJ_TEVREG_ACTIVE_TEV1_A)\n#define TOBJ_TEVREG_ACTIVE_COLOR_TEV (0x01 << 30)\n#define TOBJ_TEVREG_ACTIVE_ALPHA_TEV (0x01U << 31)\n#define TEX_COORD_UV 0\n#define TEX_COORD_REFLECTION 1\n#define TEX_COORD_HILIGHT 2\n#define TEX_COORD_SHADOW 3\n#define TEX_COORD_TOON 4\n#define TEX_COORD_GRADATION 5\n#define TEX_COORD_BACKLIGHT 6\n#define TEX_COORD_MASK (0x0f)\n#define tobj_coord(T) ((T)->flags & TEX_COORD_MASK)\n#define TEX_COLORMAP_NONE (0 << 16)\n#define TEX_COLORMAP_ALPHA_MASK (1 << 16)\n#define TEX_COLORMAP_RGB_MASK (2 << 16)\n#define TEX_COLORMAP_BLEND (3 << 16)\n#define TEX_COLORMAP_MODULATE (4 << 16)\n#define TEX_COLORMAP_REPLACE (5 << 16)\n#define TEX_COLORMAP_PASS (6 << 16)\n#define TEX_COLORMAP_ADD (7 << 16)\n#define TEX_COLORMAP_SUB (8 << 16)\n#define TEX_COLORMAP_MASK (0x0f << 16)\n#define tobj_colormap(T) ((T)->flags & TEX_COLORMAP_MASK)\n#define TEX_ALPHAMAP_NONE (0 << 20)\n#define TEX_ALPHAMAP_ALPHA_MASK (1 << 20)\n#define TEX_ALPHAMAP_BLEND (2 << 20)\n#define TEX_ALPHAMAP_MODULATE (3 << 20)\n#define TEX_ALPHAMAP_REPLACE (4 << 20)\n#define TEX_ALPHAMAP_PASS (5 << 20)\n#define TEX_ALPHAMAP_ADD (6 << 20)\n#define TEX_ALPHAMAP_SUB (7 << 20)\n#define TEX_ALPHAMAP_MASK (0x0f << 20)\n#define tobj_alphamap(T) ((T)->flags & TEX_ALPHAMAP_MASK)\n#define TEX_LIGHTMAP_DIFFUSE (0x1 << 4)\n#define TEX_LIGHTMAP_SPECULAR (0x1 << 5)\n#define TEX_LIGHTMAP_AMBIENT (0x1 << 6)\n#define TEX_LIGHTMAP_EXT (0x1 << 7)\n#define TEX_LIGHTMAP_SHADOW (0x1 << 8)\n#define TEX_LIGHTMAP_MASK (TEX_LIGHTMAP_DIFFUSE | TEX_LIGHTMAP_SPECULAR | TEX_LIGHTMAP_AMBIENT | TEX_LIGHTMAP_EXT | TEX_LIGHTMAP_SHADOW)\n#define tobj_lightmap(T) ((T)->flags & TEX_LIGHTMAP_MASK)\n#define TEX_BUMP (0x1 << 24)\n#define tobj_bump(T) ((T)->flags & TEX_BUMP)\n#define TEX_MTX_DIRTY (1U << 31)\n// Texture Object\nstruct HSD_TObj {\n    HSD_Obj parent;\n    HSD_TObj* next;\n    s32 id; // GXTexMapID\n    u32 src; // GXTexGenSrc\n    GXTexMtx mtxid;\n    Quaternion rotate;\n    Vec3 scale;\n    Vec3 translate;\n    u32 wrap_s; // GXTexWrapMode\n    s32 wrap_t; // GXTexWrapMode\n    u8 repeat_s;\n    u8 repeat_t;\n    u32 flags;\n    f32 blending;\n    u32 magFilt; // GXTexFilter\n    struct _HSD_ImageDesc* imagedesc;\n    struct _HSD_Tlut* tlut;\n    struct _HSD_TexLODDesc* lod;\n    HSD_AObj* aobj;\n    struct _HSD_ImageDesc** imagetbl;\n    struct _HSD_Tlut** tluttbl;\n    u8 tlut_no;\n    Mtx mtx;\n    u32 coord; // GXTexCoordID\n    struct _HSD_TObjTev* tev;\n};\ntypedef struct _HSD_TObjDesc {\n    char* class_name;\n    struct _HSD_TObjDesc* next;\n    u32 id; // GXTexMapID\n    u32 src; // GXTexGenSrc\n    Vec3 rotate;\n    Vec3 scale;\n    Vec3 translate;\n    u32 wrap_s; // GXTexWrapMode\n    u32 wrap_t; // GXTexWrapMode\n    u8 repeat_s;\n    u8 repeat_t;\n    u32 blend_flags;\n    f32 blending;\n    u32 magFilt; // GXTexFilter\n    struct _HSD_ImageDesc* imagedesc;\n    struct _HSD_TlutDesc* tlutdesc;\n    struct _HSD_TexLODDesc* lod;\n    struct _HSD_TObjTevDesc* tev;\n} HSD_TObjDesc;\ntypedef struct _HSD_Tlut {\n    void* lut;\n    u32 fmt;\n    u32 tlut_name;\n    u16 n_entries;\n} HSD_Tlut;\ntypedef struct _HSD_TlutDesc {\n    void* lut;\n    u32 fmt;\n    u32 tlut_name;\n    u16 n_entries;\n} HSD_TlutDesc;\ntypedef struct _HSD_TexLODDesc {\n    u32 minFilt; // GXTexFilter\n    f32 LODBias;\n    u8 bias_clamp; // GXBool\n    u8 edgeLODEnable; // GXBool\n    u32 max_anisotropy; // GXAnisotropy\n} HSD_TexLODDesc;\ntypedef struct _HSD_ImageDesc {\n    void* img_ptr;\n    u16 width;\n    u16 height;\n    u32 format;\n    u32 mipmap;\n    f32 minLOD;\n    f32 maxLOD;\n} HSD_ImageDesc;\ntypedef struct _HSD_TObjTev {\n    u8 color_op;\n    u8 alpha_op;\n    u8 color_bias;\n    u8 alpha_bias;\n    u8 color_scale;\n    u8 alpha_scale;\n    u8 color_clamp;\n    u8 alpha_clamp;\n    u8 color_a, color_b, color_c, color_d;\n    u8 alpha_a, alpha_b, alpha_c, alpha_d;\n    GXColor konst, tev0, tev1;\n    u32 active;\n} HSD_TObjTev;\ntypedef struct _HSD_TObjTevDesc {\n    u8 color_op;\n    u8 alpha_op;\n    u8 color_bias;\n    u8 alpha_bias;\n    u8 color_scale;\n    u8 alpha_scale;\n    u8 color_clamp;\n    u8 alpha_clamp;\n    u8 color_a, color_b, color_c, color_d;\n    u8 alpha_a, alpha_b, alpha_c, alpha_d;\n    GXColor konst, tev0, tev1;\n    u32 active;\n} HSD_TObjTevDesc;\ntypedef struct _HSD_TObjInfo {\n    HSD_ClassInfo parent;\n    void (*make_mtx)(HSD_TObj* tobj);\n    int (*load)(HSD_TObj* tobj, HSD_TObjDesc* desc);\n    void (*make_texp)(HSD_TObj* tobj, u32 lightmap, u32 lightmap_done,\n                      HSD_TExp** c, HSD_TExp** a, HSD_TExp** list);\n} HSD_TObjInfo;\ntypedef struct _HSD_TexAnim {\n    struct _HSD_TexAnim* next;\n    s32 id; // GXTexMapID\n    HSD_AObjDesc* aobjdesc;\n    struct _HSD_ImageDesc** imagetbl;\n    struct _HSD_TlutDesc** tluttbl;\n    u16 n_imagetbl;\n    u16 n_tluttbl;\n} HSD_TexAnim;\nextern HSD_TObjInfo hsdTObj;\n#define HSD_TOBJ(o) ((HSD_TObj*) (o))\n#define HSD_TOBJ_INFO(i) ((HSD_TObjInfo*) (i))\n#define HSD_TOBJ_METHOD(o) HSD_TOBJ_INFO(HSD_OBJECT_METHOD(o))\nvoid HSD_TObjRemoveAnimAll(HSD_TObj* tobj);\nvoid HSD_TObjAddAnim(HSD_TObj* tobj, HSD_TexAnim* texanim);\nvoid HSD_TObjAddAnimAll(HSD_TObj* tobj, HSD_TexAnim* texanim);\nvoid HSD_TObjReqAnimAllByFlags(HSD_TObj* tobj, f32 startframe, u32 flags);\nvoid HSD_TObjReqAnim(HSD_TObj* tobj, f32 startframe);\nvoid HSD_TObjReqAnimAll(HSD_TObj* tobj, f32 startframe);\nvoid HSD_TObjAnim(HSD_TObj* tobj);\nvoid HSD_TObjAnimAll(HSD_TObj* tobj);\nint TObjLoad(HSD_TObj* tobj, HSD_TObjDesc* td);\nHSD_TObj* HSD_TObjLoadDesc(HSD_TObjDesc* td);\nHSD_Tlut* HSD_TlutLoadDesc(HSD_TlutDesc* tlutdesc);\nHSD_TObjTev* HSD_TObjTevLoadDesc(HSD_TObjTevDesc* tevdesc);\nHSD_TObj* _HSD_TObjGetCurrentByType(HSD_TObj* from, u32 mapping);\nvoid MakeTextureMtx(HSD_TObj* tobj);\nvoid HSD_TObjRemoveAll(HSD_TObj* tobj);\nHSD_TObj* HSD_TObjGetNext(HSD_TObj* tobj);\nHSD_TObj* HSD_TObjAlloc(void);\nvoid HSD_TObjFree(HSD_TObj* tobj);\nvoid HSD_TObjSetDefaultClass(HSD_TObjInfo* info);\nHSD_TObjInfo* HSD_TObjGetDefaultClass(void);\nHSD_Tlut* HSD_TlutAlloc(void);\nvoid HSD_TlutFree(HSD_Tlut* tlut);\nHSD_TObjTev* HSD_TObjTevAlloc(void);\nHSD_ImageDesc* HSD_ImageDescAlloc(void);\nvoid HSD_ImageDescFree(HSD_ImageDesc* idesc);\nvoid HSD_ImageDescCopyFromEFB(HSD_ImageDesc* idesc, u16 origx, u16 origy,\n                              u8 clear, s32 sync);\nvoid HSD_TObjSetupTextureCoordGen(HSD_TObj* tobj);\nvoid HSD_TObjSetupVolatileTev(HSD_TObj* tobj, u32 rendermode);\ns32 HSD_TObjAssignResources(HSD_TObj* tobj_top);\nvoid HSD_TObjSetup(HSD_TObj* tobj);\nu32 HSD_TGTex2Index(u32 tgtex);\nu32 HSD_TexCoordID2TexGenSrc(u32 coord);\nu32 HSD_TexCoord2Index(u32 coord_id);\nu32 HSD_Index2TexCoord(u32 index);\nu32 HSD_TexMtx2Index(u32 texmtx);\nu32 HSD_Index2TexMtx(u32 index);\nu8 HSD_Index2TexMap(u32 index);\nu32 HSD_TexMap2Index(u8 mapid);\nHSD_TObj* allocShadowTObj(void);\nvoid HSD_TObjRemoveAnim(HSD_TObj* tobj);\nvoid HSD_TObjReqAnimByFlags(HSD_TObj* tobj, f32 startframe, u32 flags);\n#define MOBJ_ANIM 0x4\n#define TOBJ_ANIM 0x10\n#define ALL_ANIM 0x7FF\n#define HSD_A_M_AMBIENT_R 1\n#define HSD_A_M_AMBIENT_G 2\n#define HSD_A_M_AMBIENT_B 3\n#define HSD_A_M_DIFFUSE_R 4\n#define HSD_A_M_DIFFUSE_G 5\n#define HSD_A_M_DIFFUSE_B 6\n#define HSD_A_M_SPECULAR_R 7\n#define HSD_A_M_SPECULAR_G 8\n#define HSD_A_M_SPECULAR_B 9\n#define HSD_A_M_ALPHA 10\n#define HSD_A_M_PE_REF0 11\n#define HSD_A_M_PE_REF1 12\n#define HSD_A_M_PE_DSTALPHA 13\n#define RENDER_DIFFUSE_SHIFT 0\n#define RENDER_DIFFUSE_BITS (3 << RENDER_DIFFUSE_SHIFT)\n#define RENDER_DIFFUSE_MAT0 (0 << RENDER_DIFFUSE_SHIFT)\n#define RENDER_DIFFUSE_MAT (1 << RENDER_DIFFUSE_SHIFT)\n#define RENDER_DIFFUSE_VTX (2 << RENDER_DIFFUSE_SHIFT)\n#define RENDER_DIFFUSE_BOTH (3 << RENDER_DIFFUSE_SHIFT)\n#define RENDER_CONSTANT (1 << 0)\n#define RENDER_VERTEX (1 << 1)\n#define RENDER_DIFFUSE (1 << 2)\n#define RENDER_SPECULAR (1 << 3)\n#define CHANNEL_FIELD (RENDER_CONSTANT | RENDER_VERTEX | RENDER_DIFFUSE | RENDER_SPECULAR)\n#define RENDER_TEX0 (1 << 4)\n#define RENDER_TEX1 (1 << 5)\n#define RENDER_TEX2 (1 << 6)\n#define RENDER_TEX3 (1 << 7)\n#define RENDER_TEX4 (1 << 8)\n#define RENDER_TEX5 (1 << 9)\n#define RENDER_TEX6 (1 << 10)\n#define RENDER_TEX7 (1 << 11)\n#define RENDER_TEXTURES (RENDER_TEX0 | RENDER_TEX1 | RENDER_TEX2 | RENDER_TEX3 | RENDER_TEX4 | RENDER_TEX5 | RENDER_TEX6 | RENDER_TEX7)\n#define RENDER_TOON (1 << 12)\n#define RENDER_ALPHA_SHIFT 13\n#define RENDER_ALPHA_BITS (3 << RENDER_ALPHA_SHIFT)\n#define RENDER_ALPHA_COMPAT (0 << RENDER_ALPHA_SHIFT)\n#define RENDER_ALPHA_MAT (1 << RENDER_ALPHA_SHIFT)\n#define RENDER_ALPHA_VTX (2 << RENDER_ALPHA_SHIFT)\n#define RENDER_ALPHA_BOTH (3 << RENDER_ALPHA_SHIFT)\n#define RENDER_SHADOW (1 << 26)\n#define RENDER_ZMODE_ALWAYS (1 << 27)\n#define RENDER_NO_ZUPDATE (1 << 29)\n#define RENDER_XLU (1 << 30)\nstruct HSD_MObj {\n    HSD_Class parent;\n    u32 rendermode;\n    HSD_TObj* tobj;\n    HSD_Material* mat;\n    HSD_PEDesc* pe;\n    HSD_AObj* aobj;\n    struct _HSD_TExpTevDesc* tevdesc;\n    HSD_TExp* texp;\n};\nstruct HSD_Material {\n    GXColor ambient;\n    GXColor diffuse;\n    GXColor specular;\n    f32 alpha;\n    f32 shininess;\n};\nstruct HSD_PEDesc {\n    u8 flags;\n    u8 ref0;\n    u8 ref1;\n    u8 dst_alpha;\n    u8 type;\n    u8 src_factor;\n    u8 dst_factor;\n    u8 logic_op;\n    u8 z_comp;\n    u8 alpha_comp0;\n    u8 alpha_op;\n    u8 alpha_comp1;\n};\ntypedef struct _HSD_MObjDesc {\n    char* class_name;\n    u32 rendermode;\n    struct _HSD_TObjDesc* texdesc;\n    HSD_Material* mat;\n    void* renderdesc;\n    HSD_PEDesc* pedesc;\n} HSD_MObjDesc;\ntypedef struct _HSD_ChanAnim {\n    struct _HSD_ChanAnim* next;\n    HSD_AObjDesc* aobjdesc;\n} HSD_ChanAnim;\ntypedef struct _HSD_TevRegAnim {\n    struct _HSD_TevRegAnim* next;\n    HSD_AObjDesc* aobjdesc;\n} HSD_TevRegAnim;\ntypedef struct _HSD_RenderAnim {\n    struct _HSD_ChanAnim* chananim;\n    struct _HSD_TevRegAnim* reganim;\n} HSD_RenderAnim;\ntypedef struct _HSD_MatAnim {\n    struct _HSD_MatAnim* next;\n    HSD_AObjDesc* aobjdesc;\n    struct _HSD_TexAnim* texanim;\n    struct _HSD_RenderAnim* renderanim;\n} HSD_MatAnim;\nstruct HSD_MatAnimJoint {\n    HSD_MatAnimJoint* child;\n    HSD_MatAnimJoint* next;\n    HSD_MatAnim* matanim;\n};\nstruct HSD_MObjInfo {\n    /*  +0 */ HSD_ClassInfo parent;\n    /* +3C */ HSD_MObjSetupFunc setup;\n    /* +40 */ int (*load)(HSD_MObj* mobj, HSD_MObjDesc* desc);\n    /* +44 */ HSD_TExp* (*make_texp)(HSD_MObj* mobj, HSD_TObj* tobj_top,\n                                     HSD_TExp** list);\n    /* +48 */ void (*setup_tev)(HSD_MObj* mobj, HSD_TObj* tobj,\n                                u32 rendermode);\n    /* +4C */ void (*unset)(HSD_MObj* mobj, u32 rendermode);\n};\n#define HSD_MOBJ(o) ((HSD_MObj*) (o))\n#define HSD_MOBJ_INFO(i) ((HSD_MObjInfo*) (i))\n#define HSD_MOBJ_METHOD(o) HSD_MOBJ_INFO(HSD_CLASS_METHOD(o))\nextern HSD_MObjInfo hsdMObj;\nvoid HSD_MObjSetCurrent(HSD_MObj* mobj);\nvoid HSD_MObjSetFlags(HSD_MObj* mobj, u32 flags);\nvoid HSD_MObjClearFlags(HSD_MObj* mobj, u32 flags);\nvoid HSD_MObjRemoveAnimByFlags(HSD_MObj* mobj, u32 flags);\nvoid HSD_MObjAddAnim(HSD_MObj* mobj, HSD_MatAnim* matanim);\nvoid HSD_MObjReqAnimByFlags(HSD_MObj* mobj, f32 startframe, u32 flags);\nvoid HSD_MObjReqAnim(HSD_MObj* mobj, f32 startframe);\nvoid HSD_MObjAnim(HSD_MObj* mobj);\nHSD_MObj* HSD_MObjLoadDesc(HSD_MObjDesc* mobjdesc);\nHSD_TObj* HSD_MObjGetTObj(HSD_MObj* mobj);\nvoid HSD_MObjRemove(HSD_MObj* mobj);\nHSD_MObj* HSD_MObjAlloc(void);\nHSD_Material* HSD_MaterialAlloc(void);\nvoid HSD_MObjCompileTev(HSD_MObj* mobj);\nvoid HSD_MObjDeleteShadowTexture(HSD_TObj* tobj);\nHSD_TExp* MObjMakeTExp(HSD_MObj* mobj, HSD_TObj* tobj_top, HSD_TExp** list);\nvoid MObjSetupTev(HSD_MObj* mobj, HSD_TObj* tobj, u32 arg2);\nvoid HSD_MObjSetup(HSD_MObj* mobj, u32 rendermode);\nvoid HSD_MObjUnset(HSD_MObj* mobj, u32 rendermode);\nvoid HSD_MObjSetToonTextureImage(HSD_ImageDesc* imagedesc);\nvoid HSD_MObjSetDiffuseColor(HSD_MObj* mobj, u8 r, u8 g, u8 b);\nvoid HSD_MObjSetAlpha(HSD_MObj* mobj, f32 alpha);\nvoid HSD_MObjAddShadowTexture(HSD_TObj* tobj);\nextern HSD_TObj* tobj_shadows;\nextern HSD_TObj* tobj_toon;\n#define _pobj_h_\n#define HSD_MTX_RIGID 1\n#define HSD_MTX_ENVELOPE 2\nstruct HSD_PObj {\n    HSD_Class parent;\n    HSD_PObj* next;\n    HSD_VtxDescList* verts;\n    u16 flags;\n    u16 n_display;\n    u8* display; // u8 primitive, u8 vtxcnt, u16* indices\n    union HSD_PObjUnion {\n        HSD_JObj* jobj;\n        HSD_ShapeSet* shape_set;\n        HSD_SList* envelope_list;\n    } u;\n};\nstruct HSD_PObjDesc {\n    char* class_name;\n    HSD_PObjDesc* next;\n    HSD_VtxDescList* verts;\n    u16 flags;\n    u16 n_display;\n    u8* display;\n    union {\n        HSD_Joint* joint;\n        HSD_ShapeSetDesc* shape_set;\n        HSD_EnvelopeDesc** envelope_p;\n    } u;\n};\nstruct HSD_VtxDescList {\n    GXAttr attr;\n    GXAttrType attr_type;\n    GXCompCnt comp_cnt;\n    GXCompType comp_type;\n    u8 frac;\n    u16 stride;\n    void* vertex;\n};\nstruct HSD_Envelope {\n    HSD_Envelope* next;\n    HSD_JObj* jobj;\n    f32 weight;\n};\nstruct HSD_EnvelopeDesc {\n    HSD_Joint* joint;\n    f32 weight;\n};\nstruct HSD_ShapeSet {\n    u16 flags;\n    u16 nb_shape;\n    int nb_vertex_index;\n    HSD_VtxDescList* vertex_desc;\n    u8** vertex_idx_list;\n    s32 nb_normal_index;\n    HSD_VtxDescList* normal_desc;\n    u8** normal_idx_list;\n    union {\n        f32* bp;\n        f32 bl;\n    } blend;\n    HSD_AObj* aobj;\n};\nstruct HSD_ShapeSetDesc {\n    u16 flags;\n    u16 nb_shape;\n    s32 nb_vertex_index;\n    HSD_VtxDescList* vertex_desc;\n    u8** vertex_idx_list;\n    s32 nb_normal_index;\n    HSD_VtxDescList* normal_desc;\n    u8** normal_idx_list;\n};\nstruct HSD_ShapeAnim {\n    HSD_ShapeAnim* next;\n    HSD_AObjDesc* aobjdesc;\n};\nstruct HSD_ShapeAnimJoint {\n    HSD_ShapeAnimJoint* child;\n    HSD_ShapeAnimJoint* next;\n    HSD_ShapeAnimDObj* shapeanimdobj;\n};\nstruct HSD_PObjInfo {\n    HSD_ClassInfo parent;\n    void (*disp)(HSD_PObj* pobj, Mtx vmtx, Mtx pmtx, u32 rendermode);\n    void (*setup_mtx)(HSD_PObj* pobj, Mtx vmtx, Mtx pmtx, u32 rendermode);\n    s32 (*load)(HSD_PObj* pobj, HSD_PObjDesc* desc);\n};\nextern HSD_PObjInfo hsdPObj;\n#define HSD_POBJ(o) ((HSD_PObj*) (o))\n#define HSD_POBJ_INFO(i) ((HSD_PObjInfo*) (i))\n#define HSD_POBJ_METHOD(o) HSD_POBJ_INFO(HSD_CLASS_METHOD(o))\nHSD_PObjInfo* HSD_PObjGetDefaultClass(void);\nvoid HSD_PObjSetDefaultClass(HSD_PObjInfo* info);\nHSD_PObj* HSD_PObjAlloc(void);\nvoid HSD_PObjFree(HSD_PObj*);\nu32 HSD_PObjGetFlags(HSD_PObj* pobj);\nvoid HSD_PObjRemoveAnimAllByFlags(HSD_PObj* pobj, u32 flags);\nvoid HSD_PObjReqAnimByFlags(HSD_PObj* pobj, f32 startframe, u32 flags);\nvoid HSD_PObjReqAnimAllByFlags(HSD_PObj* pobj, f32 startframe, u32 flags);\nvoid HSD_ClearVtxDesc(void);\nHSD_PObj* HSD_PObjLoadDesc(HSD_PObjDesc*);\nvoid HSD_PObjClearMtxMark(void* obj, u32 mark);\nvoid HSD_PObjSetMtxMark(int idx, void* obj, u32 mark);\nvoid HSD_PObjGetMtxMark(int idx, void** obj, u32* mark);\nvoid HSD_PObjAddAnim(HSD_PObj*, HSD_ShapeAnim*);\nvoid HSD_PObjAddAnimAll(HSD_PObj*, HSD_ShapeAnim*);\nvoid HSD_PObjAnim(HSD_PObj* pobj);\nvoid HSD_PObjAnimAll(HSD_PObj*);\nvoid HSD_PObjResolveRefs(HSD_PObj*, HSD_PObjDesc*);\nvoid HSD_PObjResolveRefsAll(HSD_PObj*, HSD_PObjDesc*);\nvoid HSD_PObjRemove(HSD_PObj*);\nvoid HSD_PObjRemoveAll(HSD_PObj*);\nvoid HSD_PObjRemoveAnimByFlags(HSD_PObj* pobj, u32 flags);\nvoid HSD_PObjDisp(HSD_PObj* pobj, Mtx vmtx, Mtx pmtx, u32 rendermode);\n#define HSD_A_J_ROTX 1\n#define HSD_A_J_ROTY 2\n#define HSD_A_J_ROTZ 3\n#define HSD_A_J_PATH 4\n#define HSD_A_J_TRAX 5\n#define HSD_A_J_TRAY 6\n#define HSD_A_J_TRAZ 7\n#define HSD_A_J_SCAX 8\n#define HSD_A_J_SCAY 9\n#define HSD_A_J_SCAZ 10\n#define HSD_A_J_NODE 11\n#define HSD_A_J_BRANCH 12\n#define HSD_A_J_SETBYTE0 20\n#define HSD_A_J_SETBYTE1 21\n#define HSD_A_J_SETBYTE2 22\n#define HSD_A_J_SETBYTE3 23\n#define HSD_A_J_SETBYTE4 24\n#define HSD_A_J_SETBYTE5 25\n#define HSD_A_J_SETBYTE6 26\n#define HSD_A_J_SETBYTE7 27\n#define HSD_A_J_SETBYTE8 28\n#define HSD_A_J_SETBYTE9 29\n#define HSD_A_J_SETFLOAT0 30\n#define HSD_A_J_SETFLOAT1 31\n#define HSD_A_J_SETFLOAT2 32\n#define HSD_A_J_SETFLOAT3 33\n#define HSD_A_J_SETFLOAT4 34\n#define HSD_A_J_SETFLOAT5 35\n#define HSD_A_J_SETFLOAT6 36\n#define HSD_A_J_SETFLOAT7 37\n#define HSD_A_J_SETFLOAT8 38\n#define HSD_A_J_SETFLOAT9 39\n#define JOBJ_SKELETON (1 << 0)\n#define JOBJ_SKELETON_ROOT (1 << 1)\n#define JOBJ_ENVELOPE_MODEL (1 << 2)\n#define JOBJ_CLASSICAL_SCALE (1 << 3)\n#define JOBJ_HIDDEN (1 << 4)\n#define JOBJ_PTCL (1 << 5)\n#define JOBJ_MTX_DIRTY (1 << 6)\n#define JOBJ_LIGHTING (1 << 7)\n#define JOBJ_TEXGEN (1 << 8)\n#define JOBJ_INSTANCE (1 << 12)\n#define JOBJ_PBILLBOARD (1 << 13)\n#define JOBJ_SPLINE (1 << 14)\n#define JOBJ_FLIP_IK (1 << 15)\n#define JOBJ_SPECULAR (1 << 16)\n#define JOBJ_USE_QUATERNION (1 << 17)\n#define JOBJ_NULL_OBJ (0 << 21)\n#define JOBJ_JOINT1 (1 << 21)\n#define JOBJ_JOINT2 (2 << 21)\n#define JOBJ_EFFECTOR (3 << 21)\n#define JOBJ_USER_DEF_MTX (1 << 23)\n#define JOBJ_MTX_INDEP_PARENT (1 << 24)\n#define JOBJ_MTX_INDEP_SRT (1 << 25)\n#define JOBJ_ROOT_OPA (1 << 28)\n#define JOBJ_ROOT_XLU (1 << 29)\n#define JOBJ_ROOT_TEXEDGE (1 << 30)\n#define JOBJ_ROOT_MASK (JOBJ_ROOT_OPA | JOBJ_ROOT_TEXEDGE | JOBJ_ROOT_XLU)\n#define union_type_ptcl(o) ((o)->flags & JOBJ_PTCL ? true : false)\n#define union_type_spline(o) ((o)->flags & JOBJ_SPLINE ? true : false)\n#define union_type_dobj(o) ((o)->flags & (JOBJ_PTCL | JOBJ_SPLINE) ? false : true)\n#define HSD_JOBJ_INFO(i) ((HSD_JObjInfo*) (i))\n#define HSD_JOBJ_METHOD(o) HSD_JOBJ_INFO((o)->object.parent.class_info)\ntypedef u32 HSD_TrspMask;\nstruct HSD_JObj {\n    /* +0 */ HSD_Obj object;\n    /* +8 */ HSD_JObj* next;\n    /* +C */ HSD_JObj* parent;\n    /* +10 */ HSD_JObj* child;\n    /* +14 */ u32 flags;\n    /* +18 */ union {\n        HSD_SList* ptcl;\n        struct HSD_DObj* dobj;\n        HSD_Spline* spline;\n    } u;\n    /* +1C */ Quaternion rotate;\n    /* +2C */ Vec3 scale;\n    /* +38 */ Vec3 translate;\n    /* +44 */ Mtx mtx;\n    /* +74 */ Vec3* scl;\n    /* +78 */ MtxPtr envelopemtx;\n    /* +7C */ HSD_AObj* aobj;\n    /* +80 */ HSD_RObj* robj;\n    /* +84 */ u32 id;\n};\nstruct HSD_Joint {\n    char* class_name;\n    u32 flags;\n    HSD_Joint* child;\n    HSD_Joint* next;\n    union {\n        HSD_DObjDesc* dobjdesc;\n        HSD_Spline* spline;\n        HSD_SList* ptcl;\n    } u;\n    Vec3 rotation;\n    Vec3 scale;\n    Vec3 position;\n    MtxPtr mtx;\n    HSD_RObjDesc* robjdesc;\n};\ntypedef struct _HSD_JObjInfo {\n    HSD_ObjInfo parent;\n    s32 (*load)(HSD_JObj* jobj, HSD_Joint* joint, HSD_JObj* jobj_2);\n    void (*make_mtx)(HSD_JObj* jobj);\n    void (*make_pmtx)(HSD_JObj* jobj, Mtx mtx, Mtx rmtx);\n    void (*disp)(HSD_JObj* jobj, Mtx vmtx, Mtx pmtx, HSD_TrspMask trsp_mask,\n                 u32 rendermode);\n    void (*release_child)(HSD_JObj* jobj);\n} HSD_JObjInfo;\nextern HSD_JObjInfo hsdJObj;\ntypedef void (*HSD_JObjWalkTreeCallback)(HSD_JObj*, f32**, s32);\ntypedef void (*DPCtlCallback)(int, int lo, int hi, HSD_JObj* jobj);\nvoid HSD_JObjSetDefaultClass(HSD_ClassInfo* info);\nvoid HSD_JObjCheckDepend(HSD_JObj* jobj);\nu32 HSD_JObjGetFlags(HSD_JObj* jobj);\nvoid HSD_JObjReqAnimAll(HSD_JObj*, f32);\nvoid HSD_JObjResetRST(HSD_JObj* jobj, HSD_Joint* joint);\nvoid HSD_JObjSetupMatrixSub(HSD_JObj*);\nvoid HSD_JObjSetMtxDirtySub(HSD_JObj*);\nvoid HSD_JObjUnref(HSD_JObj* jobj);\nHSD_JObj* HSD_JObjRemove(HSD_JObj* jobj);\nvoid HSD_JObjRemoveAll(HSD_JObj*); // sysdolphin/baselib/jobj.s\nstruct HSD_DObj* HSD_JObjGetDObj(HSD_JObj* jobj);\nHSD_JObj* HSD_JObjLoadJoint(HSD_Joint*);\nvoid HSD_JObjAddAnimAll(HSD_JObj*, HSD_AnimJoint*, HSD_MatAnimJoint*,\n                        HSD_ShapeAnimJoint*);\nvoid HSD_JObjAnimAll(HSD_JObj*); // asm/sysdolphin/baselib/jobj.s\nvoid HSD_JObjSetFlags(HSD_JObj*, u32 flags);\nvoid HSD_JObjSetFlagsAll(HSD_JObj*, u32 flags);\nvoid HSD_JObjClearFlags(HSD_JObj*, u32 flags);\nvoid HSD_JObjClearFlagsAll(HSD_JObj*, u32 flags);\nHSD_JObj* HSD_JObjAlloc(void);\nvoid HSD_JObjSetCurrent(HSD_JObj* jobj);\nHSD_JObj* HSD_JObjGetCurrent(void);\nvoid HSD_JObjResolveRefsAll(HSD_JObj*, HSD_Joint*);\nvoid HSD_JObjDispAll(HSD_JObj* jobj, Mtx vmtx, u32 flags, u32 rendermode);\nvoid HSD_JObjRemoveAnim(HSD_JObj* jobj);\nvoid HSD_JObjAddNext(HSD_JObj* jobj, HSD_JObj* next);\nvoid HSD_JObjRemoveAnimAll(HSD_JObj* jobj);\nvoid HSD_JObjWalkTree(HSD_JObj* jobj, HSD_JObjWalkTreeCallback cb,\n                      f32** cb_args);\nvoid HSD_JObjPrependRObj(HSD_JObj* jobj, HSD_RObj* robj);\nvoid HSD_JObjDeleteRObj(HSD_JObj* jobj, HSD_RObj* robj);\nstatic inline HSD_JObj* HSD_JObjGetChild(HSD_JObj* jobj)\n{\n    if (jobj == ((any_t) 0)) {\n        return ((any_t) 0);\n    } else {\n        return jobj->child;\n    }\n}\nstatic inline HSD_JObj* HSD_JObjGetNext(HSD_JObj* jobj)\n{\n    if (jobj == ((any_t) 0)) {\n        return ((any_t) 0);\n    } else {\n        return jobj->next;\n    }\n}\nstatic inline HSD_JObj* HSD_JObjGetParent(HSD_JObj* jobj)\n{\n    if (jobj == ((any_t) 0)) {\n        return ((any_t) 0);\n    } else {\n        return jobj->parent;\n    }\n}\nstatic inline HSD_RObj* HSD_JObjGetRObj(HSD_JObj* jobj)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 405, \"jobj\"));\n    return jobj->robj;\n}\nstatic inline bool HSD_JObjMtxIsDirty(HSD_JObj* jobj)\n{\n    bool result;\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 564, \"jobj\"));\n    result = 0;\n    if (!(jobj->flags & (1 << 23)) && (jobj->flags & (1 << 6))) {\n        result = 1;\n    }\n    return result;\n}\ninline void HSD_JObjSetupMatrix(HSD_JObj* jobj)\n{\n    if (jobj == ((any_t) 0) || !HSD_JObjMtxIsDirty(jobj)) {\n        return;\n    }\n    HSD_JObjSetupMatrixSub(jobj);\n}\n// Why does this seem to be a define while the others are inline functions?\n#define HSD_JObjSetMtxDirty(jobj) { if (jobj != NULL && !HSD_JObjMtxIsDirty(jobj)) { HSD_JObjSetMtxDirtySub(jobj); } }\nstatic inline void HSD_JObjSetRotation(HSD_JObj* jobj, Quaternion* quat)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 618, \"jobj\"));\n    jobj->rotate = *quat;\n    if (!(jobj->flags & (1 << 25))) {\n        { if (jobj != ((any_t) 0) && !HSD_JObjMtxIsDirty(jobj)) { HSD_JObjSetMtxDirtySub(jobj); } };\n    }\n}\nstatic inline void HSD_JObjSetRotationX(HSD_JObj* jobj, f32 x)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 639, \"jobj\"));\n    ((!(jobj->flags & (1 << 17))) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 640, \"!(jobj->flags & JOBJ_USE_QUATERNION)\"));\n    jobj->rotate.x = x;\n    if (!(jobj->flags & (1 << 25))) {\n        { if (jobj != ((any_t) 0) && !HSD_JObjMtxIsDirty(jobj)) { HSD_JObjSetMtxDirtySub(jobj); } };\n    }\n}\nstatic inline void HSD_JObjSetRotationY(HSD_JObj* jobj, f32 y)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 660, \"jobj\"));\n    ((!(jobj->flags & (1 << 17))) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 661, \"!(jobj->flags & JOBJ_USE_QUATERNION)\"));\n    jobj->rotate.y = y;\n    if (!(jobj->flags & (1 << 25))) {\n        { if (jobj != ((any_t) 0) && !HSD_JObjMtxIsDirty(jobj)) { HSD_JObjSetMtxDirtySub(jobj); } };\n    }\n}\nstatic inline void HSD_JObjSetRotationZ(HSD_JObj* jobj, f32 z)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 681, \"jobj\"));\n    ((!(jobj->flags & (1 << 17))) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 682, \"!(jobj->flags & JOBJ_USE_QUATERNION)\"));\n    jobj->rotate.z = z;\n    if (!(jobj->flags & (1 << 25))) {\n        { if (jobj != ((any_t) 0) && !HSD_JObjMtxIsDirty(jobj)) { HSD_JObjSetMtxDirtySub(jobj); } };\n    }\n}\nstatic inline void HSD_JObjGetRotation(HSD_JObj* jobj, Quaternion* quat)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 699, \"jobj\"));\n    *quat = jobj->rotate;\n}\nstatic inline f32 HSD_JObjGetRotationY(HSD_JObj* jobj)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 730, \"jobj\"));\n    return jobj->rotate.y;\n}\nstatic inline void HSD_JObjSetScale(HSD_JObj* jobj, Vec3* scale)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 760, \"jobj\"));\n    ((scale) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 761, \"scale\"));\n    jobj->scale = *scale;\n    if (!(jobj->flags & (1 << 25))) {\n        { if (jobj != ((any_t) 0) && !HSD_JObjMtxIsDirty(jobj)) { HSD_JObjSetMtxDirtySub(jobj); } };\n    }\n}\nstatic inline void HSD_JObjSetScaleX(HSD_JObj* jobj, f32 x)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 776, \"jobj\"));\n    jobj->scale.x = x;\n    if (!(jobj->flags & (1 << 25))) {\n        { if (jobj != ((any_t) 0) && !HSD_JObjMtxIsDirty(jobj)) { HSD_JObjSetMtxDirtySub(jobj); } };\n    }\n}\nstatic inline void HSD_JObjSetScaleY(HSD_JObj* jobj, f32 y)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 791, \"jobj\"));\n    jobj->scale.y = y;\n    if (!(jobj->flags & (1 << 25))) {\n        { if (jobj != ((any_t) 0) && !HSD_JObjMtxIsDirty(jobj)) { HSD_JObjSetMtxDirtySub(jobj); } };\n    }\n}\nstatic inline void HSD_JObjSetScaleZ(HSD_JObj* jobj, f32 z)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 806, \"jobj\"));\n    jobj->scale.z = z;\n    if (!(jobj->flags & (1 << 25))) {\n        { if (jobj != ((any_t) 0) && !HSD_JObjMtxIsDirty(jobj)) { HSD_JObjSetMtxDirtySub(jobj); } };\n    }\n}\nstatic inline void HSD_JObjGetScale(HSD_JObj* jobj, Vec3* scale)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 823, \"jobj\"));\n    ((scale) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 824, \"scale\"));\n    *scale = jobj->scale;\n}\nstatic inline f32 HSD_JObjGetScaleX(HSD_JObj* jobj)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 875, \"jobj\"));\n    return jobj->scale.x;\n}\nstatic inline f32 HSD_JObjGetScaleY(HSD_JObj* jobj)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 888, \"jobj\"));\n    return jobj->scale.y;\n}\nstatic inline f32 HSD_JObjGetScaleZ(HSD_JObj* jobj)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 901, \"jobj\"));\n    return jobj->scale.z;\n}\nstatic inline void HSD_JObjSetTranslate(HSD_JObj* jobj, Vec3* translate)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 916, \"jobj\"));\n    ((translate) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 917, \"translate\"));\n    jobj->translate = *translate;\n    if (!(jobj->flags & (1 << 25))) {\n        { if (jobj != ((any_t) 0) && !HSD_JObjMtxIsDirty(jobj)) { HSD_JObjSetMtxDirtySub(jobj); } };\n    }\n}\nstatic inline void HSD_JObjSetTranslateX(HSD_JObj* jobj, f32 x)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 932, \"jobj\"));\n    jobj->translate.x = x;\n    if (!(jobj->flags & (1 << 25))) {\n        { if (jobj != ((any_t) 0) && !HSD_JObjMtxIsDirty(jobj)) { HSD_JObjSetMtxDirtySub(jobj); } };\n    }\n}\nstatic inline void HSD_JObjSetTranslateY(HSD_JObj* jobj, f32 y)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 947, \"jobj\"));\n    jobj->translate.y = y;\n    if (!(jobj->flags & (1 << 25))) {\n        { if (jobj != ((any_t) 0) && !HSD_JObjMtxIsDirty(jobj)) { HSD_JObjSetMtxDirtySub(jobj); } };\n    }\n}\nstatic inline void HSD_JObjSetTranslateZ(HSD_JObj* jobj, f32 z)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 962, \"jobj\"));\n    jobj->translate.z = z;\n    if (!(jobj->flags & (1 << 25))) {\n        { if (jobj != ((any_t) 0) && !HSD_JObjMtxIsDirty(jobj)) { HSD_JObjSetMtxDirtySub(jobj); } };\n    }\n}\nstatic inline void HSD_JObjGetTranslation(HSD_JObj* jobj, Vec3* translate)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 979, \"jobj\"));\n    ((translate) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 980, \"translate\"));\n    *translate = jobj->translate;\n}\nstatic inline f32 HSD_JObjGetTranslationX(HSD_JObj* jobj)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 993, \"jobj\"));\n    return jobj->translate.x;\n}\nstatic inline f32 HSD_JObjGetTranslationY(HSD_JObj* jobj)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 1006, \"jobj\"));\n    return jobj->translate.y;\n}\nstatic inline float HSD_JObjGetTranslationZ(HSD_JObj* jobj)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 1019, \"jobj\"));\n    return jobj->translate.z;\n}\nstatic inline void HSD_JObjAddTranslationY(HSD_JObj* jobj, float y)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 1114, \"jobj\"));\n    jobj->translate.y += y;\n    if (!(jobj->flags & (1 << 25))) {\n        { if (jobj != ((any_t) 0) && !HSD_JObjMtxIsDirty(jobj)) { HSD_JObjSetMtxDirtySub(jobj); } };\n    }\n}\nstatic inline void HSD_JObjAddTranslationZ(HSD_JObj* jobj, float z)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 1126, \"jobj\"));\n    jobj->translate.z += z;\n    if (!(jobj->flags & (1 << 25))) {\n        { if (jobj != ((any_t) 0) && !HSD_JObjMtxIsDirty(jobj)) { HSD_JObjSetMtxDirtySub(jobj); } };\n    }\n}\n/// @todo This is inlined into lbcoll, and linker deduplication\n/// only kept that definition.\n/// Rename it back to HSD_JObjSetupMatrix once lbcoll is matched.\nvoid lbColl_JObjSetupMatrix(HSD_JObj*);\nstatic inline MtxPtr HSD_JObjGetMtxPtr(HSD_JObj* jobj)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 1144, \"jobj\"));\n    lbColl_JObjSetupMatrix(jobj);\n    return jobj->mtx;\n}\nstatic inline void HSD_JObjCopyMtx(HSD_JObj* jobj, Mtx mtx)\n{\n    ((jobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 1170, \"jobj\"));\n    ((mtx) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/jobj.h\", 1171, \"mtx\"));\n    PSMTXCopy(mtx, jobj->mtx);\n}\nstatic inline void HSD_JObjRefThis(HSD_JObj* jobj)\n{\n    if (jobj != ((any_t) 0)) {\n        iref_INC(jobj);\n    }\n}\nvoid HSD_JObjResolveRefs(HSD_JObj* jobj, HSD_Joint* joint);\nvoid HSD_JObjUnrefThis(HSD_JObj* jobj);\nvoid HSD_JObjRefThis(HSD_JObj* jobj);\nvoid HSD_JObjMakeMatrix(HSD_JObj* jobj);\nvoid RecalcParentTrspBits(HSD_JObj* jobj);\nvoid HSD_JObjAddChild(HSD_JObj* jobj, HSD_JObj* child);\nHSD_JObj* HSD_JObjReparent(HSD_JObj* jobj, HSD_JObj* parent);\nvoid HSD_JObjAddDObj(HSD_JObj* jobj, HSD_DObj* dobj);\nHSD_JObj* jobj_get_effector_checked(HSD_JObj* eff);\nvoid resolveIKJoint1(HSD_JObj* jobj);\nvoid resolveIKJoint2(HSD_JObj* jobj);\nvoid HSD_JObjRemoveAnimByFlags(HSD_JObj* jobj, u32 flags);\nvoid HSD_JObjSetDPtclCallback(DPCtlCallback cb);\nint JObjInit(HSD_Class* o);\nvoid JObjReleaseChild(HSD_JObj* jobj);\nvoid JObjRelease(HSD_Class* o);\nvoid HSD_JObjRemoveAnimAllByFlags(HSD_JObj* jobj, u32 flags);\nvoid JObjAmnesia(HSD_ClassInfo* info);\nvoid HSD_JObjReqAnimByFlags(HSD_JObj* jobj, u32 flags, f32 frame);\nvoid HSD_JObjReqAnimAllByFlags(HSD_JObj* jobj, u32 flags, f32 frame);\nvoid HSD_JObjReqAnim(HSD_JObj* jobj, f32 frame);\nvoid JObjSortAnim(HSD_AObj* aobj);\nvoid JObjResetRST(HSD_JObj* jobj, HSD_Joint* joint);\nvoid JObjUpdateFunc(void* obj, enum_t type, HSD_ObjData* val);\nvoid HSD_JObjAnim(HSD_JObj* jobj);\nvoid JObjAnimAll(HSD_JObj* jobj);\ns32 JObjLoad(HSD_JObj* jobj, HSD_Joint* joint, HSD_JObj* parent);\nvoid HSD_JObjAddAnim(HSD_JObj*, HSD_AnimJoint* an_joint,\n                     HSD_MatAnimJoint* mat_joint,\n                     HSD_ShapeAnimJoint* sh_joint);\nvoid HSD_JObjWalkTree0(HSD_JObj* jobj, HSD_JObjWalkTreeCallback cb,\n                       f32** cb_args);\nvoid ftAnim_8006E9B4(Fighter_GObj*);\nvoid ftAnim_8006EBA4(Fighter_GObj*);\nvoid ftAnim_8006EBE8(Fighter_GObj* gobj, f32, f32, f32);\nvoid ftAnim_8006F0FC(Fighter_GObj* gobj, f32);\nvoid ftAnim_SetAnimRate(Fighter_GObj*, f32);\nbool ftAnim_IsFramesRemaining(Fighter_GObj*);\nf32 ftAnim_8006F484(void*);\nvoid ftAnim_8006FE48(Fighter_GObj*);\nvoid ftAnim_80070308(Fighter_GObj*);\nvoid ftAnim_800704F0(Fighter_GObj*, s32, f32);\nvoid ftAnim_80070654(Fighter_GObj*);\nvoid ftAnim_80070758(HSD_JObj*);\nvoid ftAnim_8007077C(Fighter_GObj*);\nvoid ftAnim_ApplyPartAnim(Fighter_GObj*, s32, s32, f32);\nvoid ftAnim_80070C48(Fighter_GObj*, s32);\nvoid ftAnim_80070CC4(Fighter_GObj*, s32);\nvoid ftAnim_80070E74(Fighter_GObj*);\nvoid ftAnim_80070F28(Fighter_GObj*);\nvoid ftAnim_80070FB4(Fighter_GObj*, s32, s32);\nbool ftAnim_80070FD0(Fighter*);\nvoid ftAnim_GetNextJointInTree(HSD_Joint** pjoint, s32* pdepth);\nvoid ftAnim_8006FA58(Fighter* fp, int, int item);\nvoid ftAnim_80070010(Fighter* fp, int, int item, f32, f32);\nvoid ftAnim_8006FF74(Fighter* fp, int);\nvoid ftAnim_8006FE9C(Fighter* fp, int, f32, f32);\nvoid ftAnim_80070108(Fighter* fp, int, int item, f32, f32);\nvoid ftAnim_8006FB88(Fighter* fp, int, HSD_Joint* joint);\nvoid ftAnim_80070710(HSD_JObj* joint, f32);\nvoid ftAnim_8006F4C8(Fighter* fp, int, u32);\n/* 06EED4 */ /* static */ M2C_UNK ftAnim_8006EED4();\n#define MELEE_FT_CHARA_FTCAPTAIN_TYPES_H\n#define MELEE_FT_CHARA_FTCAPTAIN_FORWARD_H\ntypedef struct ftCaptain_DatAttrs ftCaptain_DatAttrs;\ntypedef union ftCaptain_MotionVars ftCaptain_MotionVars;\nstatic MotionFlags const ftCa_MF_Special =\n    ftCo_MF_Special | Ft_MF_KeepSfx;\nstatic MotionFlags const ftCa_MF_SpecialN =\n    ftCa_MF_Special | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftCa_MF_SpecialAirN =\n    ftCa_MF_SpecialN | Ft_MF_SkipParasol;\nstatic MotionFlags const ftCa_MF_SpecialS =\n    ftCa_MF_Special | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCa_MF_SpecialAirSStart =\n    ftCa_MF_SpecialS | Ft_MF_SkipParasol;\nstatic MotionFlags const ftCa_MF_SpecialAirS =\n    ftCa_MF_SpecialS | Ft_MF_SkipParasol;\nstatic MotionFlags const ftCa_MF_SpecialHi =\n    ftCo_MF_Special | Ft_MF_KeepFastFall | Ft_MF_KeepGfx;\nstatic MotionFlags const ftCa_MF_SpecialAirHi =\n    ftCa_MF_SpecialHi | Ft_MF_SkipParasol;\nstatic MotionFlags const ftCa_MF_SpecialLw =\n    ftCa_MF_Special | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftCa_MF_SpecialLwRebound =\n    ftCa_MF_SpecialLw | Ft_MF_SkipParasol;\ntypedef enum ftCaptain_MotionState {\n    ftCa_MS_SwordSwing4 = ftCo_MS_Count,\n    ftCa_MS_BatSwing4,\n    ftCa_MS_ParasolSwing4,\n    ftCa_MS_HarisenSwing4,\n    ftCa_MS_StarRodSwing4,\n    ftCa_MS_LipstickSwing4,\n    ftCa_MS_SpecialN,\n    ftCa_MS_SpecialAirN,\n    ftCa_MS_SpecialSStart,\n    ftCa_MS_SpecialS,\n    ftCa_MS_SpecialAirSStart,\n    ftCa_MS_SpecialAirS,\n    ftCa_MS_SpecialHi,\n    ftCa_MS_SpecialAirHi,\n    ftCa_MS_SpecialHiCatch,\n    ftCa_MS_SpecialHiThrow,\n    ftCa_MS_SpecialLw,\n    ftCa_MS_SpecialLwEnd,\n    ftCa_MS_SpecialAirLw,\n    ftCa_MS_SpecialAirLwEnd,\n    ftCa_MS_SpecialAirLwEndAir,\n    ftCa_MS_SpecialLwEndAir,\n    ftCa_MS_SpecialHiThrow1,\n    ftCa_MS_Count,\n    ftCa_MS_SelfCount = ftCa_MS_Count - ftCo_MS_Count,\n} ftCaptain_MotionState;\ntypedef enum ftCa_Submotion {\n    ftCa_SM_SwordSwing4 = ftCo_SM_Count,\n    ftCa_SM_BatSwing4,\n    ftCa_SM_ParasolSwing4,\n    ftCa_SM_HarisenSwing4,\n    ftCa_SM_StarRodSwing4,\n    ftCa_SM_LipstickSwing4,\n    ftCa_SM_SpecialN,\n    ftCa_SM_SpecialAirN,\n    ftCa_SM_SpecialSStart,\n    ftCa_SM_SpecialS,\n    ftCa_SM_SpecialAirSStart,\n    ftCa_SM_SpecialAirS,\n    ftCa_SM_SpecialHi,\n    ftCa_SM_SpecialAirHi,\n    ftCa_SM_SpecialHiCatch,\n    ftCa_SM_SpecialHiThrow0,\n    ftCa_SM_SpecialLw,\n    ftCa_SM_SpecialLwEnd,\n    ftCa_SM_SpecialAirLw,\n    ftCa_SM_SpecialAirLwEnd,\n    ftCa_SM_SpecialLwEndAir,\n    ftCa_SM_SpecialAirLwEndAir,\n    ftCa_SM_SpecialHiThrow1,\n    ftCa_SM_Count,\n    ftCa_SM_SelfCount = ftCa_SM_Count - ftCo_SM_Count,\n} ftCa_Submotion;\nstruct ftCaptain_FighterVars {\n    /* 0x222C */ u32 during_specials_start;\n    /* 0x2230 */ u32 during_specials;\n    u8 _[0x100 - 8];\n};\nstruct ftCaptain_DatAttrs {\n    /* +0 */ f32 specialn_stick_range_y_neg;\n    /* +4 */ f32 specialn_stick_range_y_pos;\n    /* +8 */ f32 specialn_angle_diff;\n    /* +C */ f32 specialn_vel_x;\n    /* +10 */ f32 specialn_vel_mul;\n    /* +14 */ f32 specials_gr_vel_x;\n    /* +18 */ f32 specials_grav;\n    /* +1C */ f32 specials_terminal_vel;\n    /* +20 */ f32 specials_unk0;\n    /* +24 */ f32 specials_unk1;\n    /* +28 */ f32 specials_unk2;\n    /* +2C */ f32 specials_unk3;\n    /* +30 */ f32 specials_unk4;\n    /* +34 */ f32 specials_unk5;\n    /* +38 */ f32 specials_miss_landing_lag;\n    /* +3C */ f32 specials_hit_landing_lag;\n    /* +40 */ f32 specialhi_air_friction_mul;\n    /* +44 */ f32 specialhi_horz_vel;\n    /* +48 */ f32 specialhi_freefall_air_spd_mul;\n    /* +4C */ f32 specialhi_landing_lag;\n    /* +50 */ f32 specialhi_unk0;\n    /* +54 */ f32 specialhi_unk1;\n    /* +58 */ f32 specialhi_input_var;\n    /* +5C */ f32 specialhi_unk2;\n    /* +60 */ f32 specialhi_catch_grav;\n    /* +64 */ s32 specialhi_air_var;\n    /* +68 */ f32 x68;\n    /* +6C */ u32 speciallw_unk1;\n    /* +70 */ f32 speciallw_flame_particle_angle;\n    /* +74 */ f32 speciallw_on_hit_spd_modifier;\n    /* +78 */ s32 speciallw_unk2;\n    /* +7C */ f32 speciallw_ground_lag_mul;\n    /* +80 */ f32 speciallw_landing_lag_mul;\n    /* +84 */ f32 speciallw_ground_traction;\n    /* +88 */ f32 speciallw_air_landing_traction;\n};\nunion ftCaptain_MotionVars {\n    struct ftCaptainSpecialSVars {\n        /* fp+2340 */ f32 grav;\n    } specials;\n    struct ftCaptainSpecialHiVars {\n        /* fp+2340 */ u16 x0;\n        /* fp+2342:0 */ u8 x2_b0 : 1;\n        /* fp+2342:1 */ u8 x2_b1 : 1;\n        /* fp+2342:2 */ u8 x2_b2 : 1;\n        /* fp+2342:3 */ u8 x2_b3 : 1;\n        /* fp+2342:4 */ u8 x2_b4 : 1;\n        /* fp+2342:5 */ u8 x2_b5 : 1;\n        /* fp+2342:6 */ u8 x2_b6 : 1;\n        /* fp+2342:7 */ u8 x2_b7 : 1;\n        /* fp+2343 */ u8 x3;\n        /* fp+2344 */ Vec2 vel;\n    } specialhi;\n    struct ftCaptainSpecialLwVars {\n        /* fp+2340 */ u16 x0;\n        /* fp+2342 */ u16 x2;\n        /* fp+2344 */ f32 friction;\n    } speciallw;\n};\n#define MELEE_FT_CHARA_FTCOMMON_TYPES_H\n#define MELEE_FT_CHARA_FTKIRBY_FORWARD_H\ntypedef struct HSD_GObj ftKb_GObj;\ntypedef struct Fighter ftKb_Fighter;\ntypedef struct ftKb_DatAttrs ftKb_DatAttrs;\n/// @todo Clean up factorization\nstatic MotionFlags const ftKb_MF_MultiJump =\n    Ft_MF_KeepGfx | Ft_MF_SkipHit | Ft_MF_SkipAnimVel | Ft_MF_Unk06;\nstatic MotionFlags const ftKb_MF_AttackDash =\n    Ft_MF_KeepFastFall | Ft_MF_KeepColAnimHitStatus | Ft_MF_SkipItemVis |\n    Ft_MF_FreezeState;\nstatic MotionFlags const ftKb_MF_AttackDashAir =\n    ftKb_MF_AttackDash | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_18_20_21 =\n    Ft_MF_SkipItemVis | Ft_MF_UnkUpdatePhys | Ft_MF_FreezeState;\nstatic MotionFlags const ftKb_MF_4_18_20_21 =\n    ftKb_MF_18_20_21 | Ft_MF_SkipModel;\nstatic MotionFlags const ftKb_MF_2_4_18_20_21 =\n    ftKb_MF_4_18_20_21 | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftKb_MF_5_18_20_21 =\n    ftKb_MF_18_20_21 | Ft_MF_SkipAnimVel;\nstatic MotionFlags const ftKb_MF_SpecialN =\n    ftKb_MF_4_18_20_21 | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftKb_MF_SpecialS =\n    ftKb_MF_4_18_20_21 | Ft_MF_KeepGfx;\nstatic MotionFlags const ftKb_MF_SpecialHi =\n    ftKb_MF_4_18_20_21 | Ft_MF_KeepFastFall | Ft_MF_KeepGfx;\nstatic MotionFlags const ftKb_MF_SpecialNMr =\n    ftKb_MF_4_18_20_21 | Ft_MF_KeepFastFall | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftKb_MF_SpecialNKp =\n    ftKb_MF_4_18_20_21 | Ft_MF_KeepFastFall | Ft_MF_SkipHit;\nstatic MotionFlags const ftKb_MF_SpecialNPe =\n    ftKb_MF_2_4_18_20_21 | Ft_MF_KeepFastFall | Ft_MF_SkipHit;\nstatic MotionFlags const ftKb_MF_SpecialNYs =\n    ftKb_MF_5_18_20_21 | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftKb_MF_SpecialNLg =\n    ftKb_MF_5_18_20_21 | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftKb_MF_SpecialNZd =\n    ftKb_MF_5_18_20_21 | Ft_MF_KeepGfx | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftKb_MF_SpecialNDr =\n    ftKb_MF_5_18_20_21 | Ft_MF_SkipHit;\nstatic MotionFlags const ftKb_MF_SpecialNGk =\n    ftKb_MF_SpecialNZd | Ft_MF_SkipHit;\nstatic MotionFlags const ftKb_MF_SpecialNFx =\n    ftKb_MF_2_4_18_20_21 | Ft_MF_KeepGfx | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftKb_MF_SpecialNLk =\n    ftKb_MF_4_18_20_21 | Ft_MF_KeepGfx | Ft_MF_SkipHit |\n    Ft_MF_SkipThrowException;\nstatic MotionFlags const ftKb_MF_SpecialNSk =\n    ftKb_MF_SpecialNLk | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftKb_MF_SpecialNNs =\n    ftKb_MF_2_4_18_20_21 | Ft_MF_SkipHit | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftKb_MF_SpecialNPp =\n    ftKb_MF_SpecialNNs | Ft_MF_KeepGfx;\nstatic MotionFlags const ftKb_MF_SpecialNPk =\n    ftKb_MF_SpecialNPp | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftKb_MF_SpecialNSs =\n    ftKb_MF_5_18_20_21 | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftKb_MF_SpecialNSs_1 =\n    ftKb_MF_SpecialNSs | Ft_MF_KeepGfx;\nstatic MotionFlags const ftKb_MF_SpecialNMt =\n    ftKb_MF_SpecialNSs_1 | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftKb_MF_SpecialNCl =\n    ftKb_MF_SpecialNMt | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftKb_MF_SpecialNFc =\n    ftKb_MF_SpecialNDr | Ft_MF_KeepFastFall | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftKb_MF_SpecialNPc =\n    ftKb_MF_SpecialNSs_1 | Ft_MF_SkipHit;\nstatic MotionFlags const ftKb_MF_SpecialNGw =\n    ftKb_MF_SpecialNPc | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftKb_MF_SpecialLw =\n    ftKb_MF_2_4_18_20_21 | Ft_MF_KeepSfx;\nstatic MotionFlags const ftKb_MF_SpecialNCa =\n    ftKb_MF_SpecialLw | Ft_MF_KeepFastFall | Ft_MF_KeepGfx;\nstatic MotionFlags const ftKb_MF_SpecialNDk =\n    ftKb_MF_4_18_20_21 | Ft_MF_SkipHit | Ft_MF_KeepSfx;\nstatic MotionFlags const ftKb_MF_5_9_18_20_21 =\n    ftKb_MF_5_18_20_21 | Ft_MF_KeepSfx;\nstatic MotionFlags const ftKb_MF_2_5_9_18_20_21 =\n    ftKb_MF_5_9_18_20_21 | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftKb_MF_SpecialNPr =\n    ftKb_MF_5_9_18_20_21 | Ft_MF_KeepGfx;\nstatic MotionFlags const ftKb_MF_SpecialNMs =\n    ftKb_MF_2_5_9_18_20_21 | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftKb_MF_SpecialNGn =\n    ftKb_MF_2_5_9_18_20_21 | Ft_MF_SkipHit;\nstatic MotionFlags const ftKb_MF_SpecialNFeStart =\n    ftKb_MF_SpecialNMs | Ft_MF_SkipHit;\nstatic MotionFlags const ftKb_MF_SpecialAirN =\n    ftKb_MF_SpecialN | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirS =\n    ftKb_MF_SpecialS | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirHi =\n    ftKb_MF_SpecialHi | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNMr =\n    ftKb_MF_SpecialNMr | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNKp =\n    ftKb_MF_SpecialNKp | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNPe =\n    ftKb_MF_SpecialNPe | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNYs =\n    ftKb_MF_SpecialNYs | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNLg =\n    ftKb_MF_SpecialNLg | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNZd =\n    ftKb_MF_SpecialNZd | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNDr =\n    ftKb_MF_SpecialNDr | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNGk =\n    ftKb_MF_SpecialNGk | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNFx =\n    ftKb_MF_SpecialNFx | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNLk =\n    ftKb_MF_SpecialNLk | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNSk =\n    ftKb_MF_SpecialNSk | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNNs =\n    ftKb_MF_SpecialNNs | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNPp =\n    ftKb_MF_SpecialNPp | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNPk =\n    ftKb_MF_SpecialNPk | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNSs =\n    ftKb_MF_SpecialNSs | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNMt =\n    ftKb_MF_SpecialNMt | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNCl =\n    ftKb_MF_SpecialNCl | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNFc =\n    ftKb_MF_SpecialNFc | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNPc =\n    ftKb_MF_SpecialNPc | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNGw =\n    ftKb_MF_SpecialNGw | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirLw =\n    ftKb_MF_SpecialLw | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNCa =\n    ftKb_MF_SpecialNCa | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNDk =\n    ftKb_MF_SpecialNDk | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNPr =\n    ftKb_MF_SpecialNPr | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNMs =\n    ftKb_MF_SpecialNMs | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNGn =\n    ftKb_MF_SpecialNGn | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialNFe =\n    ftKb_MF_SpecialNFeStart | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_0_4_18_20_21 =\n    ftKb_MF_4_18_20_21 | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftKb_MF_SpecialNCaptureTurn =\n    ftKb_MF_0_4_18_20_21 | Ft_MF_KeepAccessory;\nstatic MotionFlags const ftKb_MF_SpecialAirNCaptureTurn =\n    ftKb_MF_SpecialNCaptureTurn | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialNCaptureWalk =\n    ftKb_MF_0_4_18_20_21 | Ft_MF_UpdateCmd;\nstatic MotionFlags const ftKb_MF_SpecialNCaptureJumpSquat =\n    ftKb_MF_0_4_18_20_21 | Ft_MF_SkipNametagVis;\nstatic MotionFlags const ftKb_MF_SpecialNLoop =\n    ftKb_MF_0_4_18_20_21 | Ft_MF_Unk19;\nstatic MotionFlags const ftKb_MF_SpecialNKpLoop =\n    ftKb_MF_SpecialNKp | Ft_MF_Unk19;\nstatic MotionFlags const ftKb_MF_SpecialNGkLoop =\n    ftKb_MF_SpecialNGk | Ft_MF_Unk19;\nstatic MotionFlags const ftKb_MF_SpecialNFxLoop =\n    ftKb_MF_SpecialNFx | Ft_MF_Unk19;\nstatic MotionFlags const ftKb_MF_SpecialNLkCharged =\n    ftKb_MF_SpecialNLk | Ft_MF_Unk19;\nstatic MotionFlags const ftKb_MF_SpecialNSkLoop =\n    ftKb_MF_SpecialNSk | Ft_MF_Unk19;\nstatic MotionFlags const ftKb_MF_SpecialNMtLoop =\n    ftKb_MF_SpecialNMt | Ft_MF_Unk19;\nstatic MotionFlags const ftKb_MF_SpecialNClCharged =\n    ftKb_MF_SpecialNCl | Ft_MF_Unk19;\nstatic MotionFlags const ftKb_MF_SpecialNFcLoop =\n    ftKb_MF_SpecialNFc | Ft_MF_Unk19;\nstatic MotionFlags const ftKb_MF_SpecialNPrLoop =\n    ftKb_MF_SpecialNPr | Ft_MF_Unk19;\nstatic MotionFlags const ftKb_MF_SpecialAirNLoop =\n    ftKb_MF_SpecialNLoop | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNKpLoop =\n    ftKb_MF_SpecialNKpLoop | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNGkLoop =\n    ftKb_MF_SpecialNGkLoop | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNFxLoop =\n    ftKb_MF_SpecialNFxLoop | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNLkCharged =\n    ftKb_MF_SpecialNLkCharged | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNSkLoop =\n    ftKb_MF_SpecialNSkLoop | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNMtLoop =\n    ftKb_MF_SpecialNMtLoop | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNClCharged =\n    ftKb_MF_SpecialNClCharged | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNFcLoop =\n    ftKb_MF_SpecialNFcLoop | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKb_MF_SpecialAirNPrLoop =\n    ftKb_MF_SpecialNPrLoop | Ft_MF_SkipParasol;\ntypedef enum ftKirby_MotionState {\n    ftKb_MS_JumpAerialF1 = ftCo_MS_Count,\n    ftKb_MS_JumpAerialF2,\n    ftKb_MS_JumpAerialF3,\n    ftKb_MS_JumpAerialF4,\n    ftKb_MS_JumpAerialF5,\n    ftKb_MS_JumpAerialF1Met,\n    ftKb_MS_JumpAerialF2Met,\n    ftKb_MS_JumpAerialF3Met,\n    ftKb_MS_JumpAerialF4Met,\n    ftKb_MS_JumpAerialF5Met,\n    ftKb_MS_AttackDash,\n    ftKb_MS_AttackDashAir,\n    ftKb_MS_SpecialN,\n    ftKb_MS_SpecialNLoop,\n    ftKb_MS_SpecialNEnd,\n    ftKb_MS_SpecialNCapture0,\n    ftKb_MS_SpecialNCapture1,\n    ftKb_MS_Eat,\n    ftKb_MS_EatWait,\n    ftKb_MS_EatWalkSlow,\n    ftKb_MS_EatWalkMiddle,\n    ftKb_MS_EatWalkFast,\n    ftKb_MS_EatTurn,\n    ftKb_MS_EatJump1,\n    ftKb_MS_EatJump2,\n    ftKb_MS_EatLanding,\n    ftKb_MS_SpecialNDrink0,\n    ftKb_MS_SpecialNDrink1,\n    ftKb_MS_SpecialNSpit0,\n    ftKb_MS_SpecialNSpit1,\n    ftKb_MS_SpecialAirN,\n    ftKb_MS_SpecialAirNLoop,\n    ftKb_MS_SpecialAirNEnd,\n    ftKb_MS_SpecialAirNCapture0,\n    ftKb_MS_SpecialAirNCapture1,\n    ftKb_MS_EatAir,\n    ftKb_MS_EatFall,\n    ftKb_MS_SpecialAirNDrink0,\n    ftKb_MS_SpecialAirNDrink1,\n    ftKb_MS_SpecialAirNSpit0,\n    ftKb_MS_SpecialAirNSpit1,\n    ftKb_MS_EatTurnAir,\n    ftKb_MS_SpecialS,\n    ftKb_MS_SpecialAirS,\n    ftKb_MS_SpecialHi1,\n    ftKb_MS_SpecialHi2,\n    ftKb_MS_SpecialHi3,\n    ftKb_MS_SpecialHi4,\n    ftKb_MS_SpecialAirHi1,\n    ftKb_MS_SpecialAirHi2,\n    ftKb_MS_SpecialAirHi3,\n    ftKb_MS_SpecialAirHi4,\n    ftKb_MS_SpecialLw1,\n    ftKb_MS_SpecialLw,\n    ftKb_MS_SpecialLwEnd,\n    ftKb_MS_SpecialAirLwStart,\n    ftKb_MS_SpecialAirLw,\n    ftKb_MS_SpecialAirLwEnd,\n    ftKb_MS_MrSpecialN,\n    ftKb_MS_MrSpecialAirN,\n    ftKb_MS_LkSpecialNStart,\n    ftKb_MS_LkSpecialNLoop,\n    ftKb_MS_LkSpecialNEnd,\n    ftKb_MS_LkSpecialAirNStart,\n    ftKb_MS_LkSpecialAirNLoop,\n    ftKb_MS_LkSpecialAirNEnd,\n    ftKb_MS_SsSpecialNStart,\n    ftKb_MS_SsSpecialNHold,\n    ftKb_MS_SsSpecialNCancel,\n    ftKb_MS_SsSpecialN,\n    ftKb_MS_SsSpecialAirNStart,\n    ftKb_MS_SsSpecialAirN,\n    ftKb_MS_YsSpecialN1,\n    ftKb_MS_YsSpecialNCapture1_0,\n    ftKb_MS_YsSpecialNCapture1_1,\n    ftKb_MS_YsSpecialNCapture2_0,\n    ftKb_MS_YsSpecialNCapture2_1,\n    ftKb_MS_YsSpecialAirNCapture2,\n    ftKb_MS_YsSpecialAirNCapture1_0,\n    ftKb_MS_YsSpecialAirNCapture1_1,\n    ftKb_MS_YsSpecialAirN2_0,\n    ftKb_MS_YsSpecialAirN2_1,\n    ftKb_MS_FxSpecialNStart,\n    ftKb_MS_FxSpecialNLoop,\n    ftKb_MS_FxSpecialNEnd,\n    ftKb_MS_FxSpecialAirNStart,\n    ftKb_MS_FxSpecialAirNLoop,\n    ftKb_MS_FxSpecialAirNEnd,\n    ftKb_MS_PkSpecialN,\n    ftKb_MS_PkSpecialAirN,\n    ftKb_MS_LgSpecialN,\n    ftKb_MS_LgSpecialAirN,\n    ftKb_MS_CaSpecialN,\n    ftKb_MS_CaSpecialAirN,\n    ftKb_MS_NsSpecialNStart,\n    ftKb_MS_NsSpecialNHold0,\n    ftKb_MS_NsSpecialNHold1,\n    ftKb_MS_NsSpecialNEnd,\n    ftKb_MS_NsSpecialAirNStart,\n    ftKb_MS_NsSpecialAirNHold0,\n    ftKb_MS_NsSpecialAirNHold1,\n    ftKb_MS_NsSpecialAirNEnd,\n    ftKb_MS_KpSpecialNStart,\n    ftKb_MS_KpSpecialN,\n    ftKb_MS_KpSpecialNEnd,\n    ftKb_MS_KpSpecialAirNStart,\n    ftKb_MS_KpSpecialAirN,\n    ftKb_MS_KpSpecialAirNEnd,\n    ftKb_MS_PeSpecialLw,\n    ftKb_MS_PeSpecialLwHit,\n    ftKb_MS_PeSpecialAirLw,\n    ftKb_MS_PeSpecialAirLwHit,\n    ftKb_MS_PpSpecialN,\n    ftKb_MS_PpSpecialAirN,\n    ftKb_MS_DkSpecialNStart,\n    ftKb_MS_DkSpecialNLoop,\n    ftKb_MS_DkSpecialNCancel,\n    ftKb_MS_DkSpecialN,\n    ftKb_MS_DkSpecialNFull,\n    ftKb_MS_DkSpecialAirNStart,\n    ftKb_MS_DkSpecialAirNLoop,\n    ftKb_MS_DkSpecialAirNCancel,\n    ftKb_MS_DkSpecialAirN,\n    ftKb_MS_DkSpecialAirNFull,\n    ftKb_MS_ZdSpecialN,\n    ftKb_MS_ZdSpecialAirN,\n    ftKb_MS_SkSpecialNStart,\n    ftKb_MS_SkSpecialNLoop,\n    ftKb_MS_SkSpecialNCancel,\n    ftKb_MS_SkSpecialNEnd,\n    ftKb_MS_SkSpecialAirNStart,\n    ftKb_MS_SkSpecialAirNLoop,\n    ftKb_MS_SkSpecialAirNCancel,\n    ftKb_MS_SkSpecialAirNEnd,\n    ftKb_MS_PrSpecialNStartR,\n    ftKb_MS_PrSpecialNStartL,\n    ftKb_MS_PrSpecialNLoop,\n    ftKb_MS_PrSpecialNFull,\n    ftKb_MS_PrSpecialN1,\n    ftKb_MS_PrSpecialNTurn,\n    ftKb_MS_PrSpecialNEndR,\n    ftKb_MS_PrSpecialNEndL,\n    ftKb_MS_PrSpecialAirNStartR,\n    ftKb_MS_PrSpecialAirNStartL,\n    ftKb_MS_PrSpecialAirNLoop,\n    ftKb_MS_PrSpecialAirNFull,\n    ftKb_MS_PrSpecialAirN,\n    ftKb_MS_PrSpecialN0,\n    ftKb_MS_PrSpecialAirNEndR0,\n    ftKb_MS_PrSpecialAirNEndR1,\n    ftKb_MS_PrSpecialNHit,\n    ftKb_MS_MsSpecialNStart,\n    ftKb_MS_MsSpecialNLoop,\n    ftKb_MS_MsSpecialNEnd0,\n    ftKb_MS_MsSpecialNEnd1,\n    ftKb_MS_MsSpecialAirNStart,\n    ftKb_MS_MsSpecialAirNLoop,\n    ftKb_MS_MsSpecialAirNEnd0,\n    ftKb_MS_MsSpecialAirNEnd1,\n    ftKb_MS_MtSpecialNStart,\n    ftKb_MS_MtSpecialNLoop,\n    ftKb_MS_MtSpecialNLoopFull,\n    ftKb_MS_MtSpecialNCancel,\n    ftKb_MS_MtSpecialNEnd,\n    ftKb_MS_MtSpecialAirNStart,\n    ftKb_MS_MtSpecialAirNLoop,\n    ftKb_MS_MtSpecialAirNLoopFull,\n    ftKb_MS_MtSpecialAirNCancel,\n    ftKb_MS_MtSpecialAirNEnd,\n    ftKb_MS_GwSpecialN,\n    ftKb_MS_GwSpecialAirN,\n    ftKb_MS_DrSpecialN,\n    ftKb_MS_DrSpecialAirN,\n    ftKb_MS_ClSpecialNStart,\n    ftKb_MS_ClSpecialNLoop,\n    ftKb_MS_ClSpecialNEnd,\n    ftKb_MS_ClSpecialAirNStart,\n    ftKb_MS_ClSpecialAirNLoop,\n    ftKb_MS_ClSpecialAirNEnd,\n    ftKb_MS_FcSpecialNStart,\n    ftKb_MS_FcSpecialNLoop,\n    ftKb_MS_FcSpecialNEnd,\n    ftKb_MS_FcSpecialAirNStart,\n    ftKb_MS_FcSpecialAirNLoop,\n    ftKb_MS_FcSpecialAirNEnd,\n    ftKb_MS_PcSpecialN,\n    ftKb_MS_PcSpecialAirN,\n    ftKb_MS_GnSpecialN,\n    ftKb_MS_GnSpecialAirN,\n    ftKb_MS_FeSpecialNStart,\n    ftKb_MS_FeSpecialNLoop,\n    ftKb_MS_FeSpecialNEnd0,\n    ftKb_MS_FeSpecialNEnd1,\n    ftKb_MS_FeSpecialAirNStart,\n    ftKb_MS_FeSpecialAirNLoop,\n    ftKb_MS_FeSpecialAirNEnd0,\n    ftKb_MS_FeSpecialAirNEnd1,\n    ftKb_MS_GkSpecialNStart,\n    ftKb_MS_GkSpecialN,\n    ftKb_MS_GkSpecialNEnd,\n    ftKb_MS_GkSpecialAirNStart,\n    ftKb_MS_GkSpecialAirN,\n    ftKb_MS_GkSpecialAirNEnd,\n    ftKb_MS_Count,\n    ftKb_MS_SelfCount = ftKb_MS_Count - ftCo_MS_Count,\n} ftKirby_MotionState;\ntypedef enum ftKb_Submotion {\n    ftKb_SM_JumpAerialF1 = ftCo_SM_Count,\n    ftKb_SM_JumpAerialF2,\n    ftKb_SM_JumpAerialF3,\n    ftKb_SM_JumpAerialF4,\n    ftKb_SM_JumpAerialF5,\n    ftKb_SM_JumpAerialF1Met,\n    ftKb_SM_JumpAerialF2Met,\n    ftKb_SM_JumpAerialF3Met,\n    ftKb_SM_JumpAerialF4Met,\n    ftKb_SM_JumpAerialF5Met,\n    ftKb_SM_SpecialN,\n    ftKb_SM_SpecialNLoop,\n    ftKb_SM_SpecialNEnd,\n    ftKb_SM_SpecialNCapture,\n    ftKb_SM_Eat,\n    ftKb_SM_EatWait,\n    ftKb_SM_EatWalkSlow,\n    ftKb_SM_EatWalkMiddle,\n    ftKb_SM_EatWalkFast,\n    ftKb_SM_EatJump1,\n    ftKb_SM_EatJump2,\n    ftKb_SM_EatLanding,\n    ftKb_SM_EatTurn,\n    ftKb_SM_SpecialNDrink,\n    ftKb_SM_SpecialNSpit,\n    ftKb_SM_SpecialAirN,\n    ftKb_SM_SpecialAirNLoop,\n    ftKb_SM_SpecialS,\n    ftKb_SM_SpecialAirS,\n    ftKb_SM_SpecialHi1,\n    ftKb_SM_SpecialHi2,\n    ftKb_SM_SpecialHi3,\n    ftKb_SM_SpecialHi4,\n    ftKb_SM_SpecialAirHi1,\n    ftKb_SM_SpecialAirHi2,\n    ftKb_SM_SpecialAirHi3,\n    ftKb_SM_SpecialAirHiEnd,\n    ftKb_SM_SpecialLw1,\n    ftKb_SM_SpecialLw,\n    ftKb_SM_SpecialLwEnd,\n    ftKb_SM_SpecialAirLwStart,\n    ftKb_SM_SpecialAirLw,\n    ftKb_SM_SpecialAirLwEnd,\n    ftKb_SM_MrSpecialN,\n    ftKb_SM_MrSpecialAirN,\n    ftKb_SM_LkSpecialNStart,\n    ftKb_SM_LkSpecialNLoop,\n    ftKb_SM_LkSpecialNEnd,\n    ftKb_SM_LkSpecialAirNStart,\n    ftKb_SM_LkSpecialAirNLoop,\n    ftKb_SM_LkSpecialAirNEnd,\n    ftKb_SM_SsSpecialNStart,\n    ftKb_SM_SsSpecialNHold,\n    ftKb_SM_SsSpecialNCancel,\n    ftKb_SM_SsSpecialN,\n    ftKb_SM_SsSpecialAirNStart,\n    ftKb_SM_SsSpecialAirN,\n    ftKb_SM_YsSpecialN1,\n    ftKb_SM_YsSpecialNCapture1,\n    ftKb_SM_YsSpecialNCapture2,\n    ftKb_SM_YsSpecialAirNCapture2,\n    ftKb_SM_YsSpecialAirCapture1,\n    ftKb_SM_YsSpecialAirN2,\n    ftKb_SM_FxSpecialNStart,\n    ftKb_SM_FxSpecialNLoop,\n    ftKb_SM_FxSpecialNEnd,\n    ftKb_SM_FxSpecialAirNStart,\n    ftKb_SM_FxSpecialAirNLoop,\n    ftKb_SM_FxSpecialAirNEnd,\n    ftKb_SM_PkSpecialN,\n    ftKb_SM_PkSpecialAirN,\n    ftKb_SM_LgSpecialN,\n    ftKb_SM_LgSpecialAirN,\n    ftKb_SM_CaSpecialN,\n    ftKb_SM_CaSpecialAirN,\n    ftKb_SM_NsSpecialNStart,\n    ftKb_SM_NsSpecialNHold0,\n    ftKb_SM_NsSpecialNHold1,\n    ftKb_SM_NsSpecialNEnd,\n    ftKb_SM_NsSpecialAirNStart,\n    ftKb_SM_NsSpecialAirNHold0,\n    ftKb_SM_NsSpecialAirNHold1,\n    ftKb_SM_NsSpecialAirNEnd,\n    ftKb_SM_KpSpecialNStart,\n    ftKb_SM_KpSpecialN,\n    ftKb_SM_KpSpecialNEnd,\n    ftKb_SM_KpSpecialAirNStart,\n    ftKb_SM_KpSpecialAirN,\n    ftKb_SM_KpSpecialAirNEnd,\n    ftKb_SM_PeSpecialLw,\n    ftKb_SM_PeSpecialLwHit,\n    ftKb_SM_PeSpecialAirLw,\n    ftKb_SM_PeSpecialAirLwHit,\n    ftKb_SM_PpSpecialN,\n    ftKb_SM_PpSpecialAirN,\n    ftKb_SM_DkSpecialNStart,\n    ftKb_SM_DkSpecialNLoop,\n    ftKb_SM_DkSpecialNCancel,\n    ftKb_SM_DkSpecialN,\n    ftKb_SM_DkSpecialNFull,\n    ftKb_SM_DkSpecialAirNStart,\n    ftKb_SM_DkSpecialAirNLoop,\n    ftKb_SM_DkSpecialAirNCancel,\n    ftKb_SM_DkSpecialAirN,\n    ftKb_SM_DkSpecialAirNFull,\n    ftKb_SM_ZdSpecialN,\n    ftKb_SM_ZdSpecialAirN,\n    ftKb_SM_SkSpecialNStart,\n    ftKb_SM_SkSpecialNLoop,\n    ftKb_SM_SkSpecialNCancel,\n    ftKb_SM_SkSpecialNEnd,\n    ftKb_SM_SkSpecialAirNStart,\n    ftKb_SM_SkSpecialAirNLoop,\n    ftKb_SM_SkSpecialAirNCancel,\n    ftKb_SM_SkSpecialAirNEnd,\n    ftKb_SM_PrSpecialNStartR,\n    ftKb_SM_PrSpecialNStartL,\n    ftKb_SM_PrSpecialNLoop,\n    ftKb_SM_PrSpecialNFull,\n    ftKb_SM_PrSpecialN1,\n    ftKb_SM_PrSpecialNTurn,\n    ftKb_SM_PrSpecialNEndR,\n    ftKb_SM_PrSpecialNEndL,\n    ftKb_SM_PrSpecialAirNStartR,\n    ftKb_SM_PrSpecialAirNStartL,\n    ftKb_SM_PrSpecialAirNLoop,\n    ftKb_SM_PrSpecialAirNFull,\n    ftKb_SM_PrSpecialAirN,\n    ftKb_SM_PrSpecialN0,\n    ftKb_SM_PrSpecialAirNEndR0,\n    ftKb_SM_PrSpecialAirNEndR1,\n    ftKb_SM_PrSpecialNHit,\n    ftKb_SM_MsSpecialNStart,\n    ftKb_SM_MsSpecialNLoop,\n    ftKb_SM_MsSpecialNEnd0,\n    ftKb_SM_MsSpecialNEnd1,\n    ftKb_SM_MsSpecialAirNStart,\n    ftKb_SM_MsSpecialAirNLoop,\n    ftKb_SM_MsSpecialAirNEnd0,\n    ftKb_SM_MsSpecialAirNEnd1,\n    ftKb_SM_MtSpecialNStart,\n    ftKb_SM_MtSpecialNLoop,\n    ftKb_SM_MtSpecialNLoopFull,\n    ftKb_SM_MtSpecialNCancel,\n    ftKb_SM_MtSpecialNEnd,\n    ftKb_SM_MtSpecialAirNStart,\n    ftKb_SM_MtSpecialAirNLoop,\n    ftKb_SM_MtSpecialAirNLoopFull,\n    ftKb_SM_MtSpecialAirNCancel,\n    ftKb_SM_MtSpecialAirNEnd,\n    ftKb_SM_GwSpecialN,\n    ftKb_SM_GwSpecialAirN,\n    ftKb_SM_DrSpecialN,\n    ftKb_SM_DrSpecialAirN,\n    ftKb_SM_ClSpecialNStart,\n    ftKb_SM_ClSpecialNLoop,\n    ftKb_SM_ClSpecialNEnd,\n    ftKb_SM_ClSpecialAirNStart,\n    ftKb_SM_ClSpecialAirNLoop,\n    ftKb_SM_ClSpecialAirNEnd,\n    ftKb_SM_FcSpecialNStart,\n    ftKb_SM_FcSpecialNLoop,\n    ftKb_SM_FcSpecialNEnd,\n    ftKb_SM_FcSpecialAirNStart,\n    ftKb_SM_FcSpecialAirNLoop,\n    ftKb_SM_FcSpecialAirNEnd,\n    ftKb_SM_PcSpecialN,\n    ftKb_SM_PcSpecialAirN,\n    ftKb_SM_GnSpecialN,\n    ftKb_SM_GnSpecialAirN,\n    ftKb_SM_FeSpecialNStart,\n    ftKb_SM_FeSpecialNLoop,\n    ftKb_SM_FeSpecialNEnd0,\n    ftKb_SM_FeSpecialNEnd1,\n    ftKb_SM_FeSpecialAirNStart,\n    ftKb_SM_FeSpecialAirNLoop,\n    ftKb_SM_FeSpecialAirNEnd0,\n    ftKb_SM_FeSpecialAirNEnd1,\n    ftKb_SM_GkSpecialNStart,\n    ftKb_SM_GkSpecialN,\n    ftKb_SM_GkSpecialNEnd,\n    ftKb_SM_GkSpecialAirNStart,\n    ftKb_SM_GkSpecialAirN,\n    ftKb_SM_GkSpecialAirNEnd,\n    ftKb_SM_Count,\n    ftKb_SM_SelfCount = ftKb_SM_Count - ftCo_SM_Count,\n} ftKb_Submotion;\n/** @file\n * @todo This is temporary.\n */\n#define MELEE_FT_FTCOLLTYPES_H\nstruct ftCollisionBox {\n    float top;\n    float bottom;\n    Vec2 left;\n    Vec2 right;\n};\nstruct UNK_SAMUS_S2 {\n    Fighter_Part parts[3];\n    Vec3 vec1;\n    Vec3 vec2;\n    float single_float;\n};\nunion ftCommon_MotionVars {\n    struct {\n        /* fp+2340 */ float x0;\n        /* fp+2344 */ FtMotionId msid;\n        /* fp+2348 */ float slow_anim_frame;\n        /* fp+234C */ float middle_anim_frame;\n        /* fp+2350 */ float fast_anim_frame;\n        /* fp+2354 */ float slow_anim_rate;\n        /* fp+2358 */ float middle_anim_rate;\n        /* fp+235C */ float fast_anim_rate;\n        /* fp+2360 */ float accel_mul;\n    } walk;\n    struct {\n        /* fp+2340 */ bool x0;\n    } attack1;\n    struct {\n        /* fp+2340 */ int x0;\n    } attackdash;\n    struct {\n        /* fp+2340 */ bool x0;\n    } attacklw3;\n    struct {\n        /* fp+2340 */ float x0;\n        /* fp+2344 */ int x4;\n        /* fp+2348 */ int x8;\n        /* fp+234C */ M2C_UNK xC;\n        /* fp+2350 */ M2C_UNK x10;\n        /* fp+2354 */ float x14;\n        /* fp+2358 */ u8 x18[0x1A - 0x18];\n        /* fp+235A */ u8 x1A;\n        /* fp+235B */ u8 x1B;\n    } damage;\n    struct {\n        /* fp+2340 */ s8 x0;\n        /* fp+2341 */ s8 x1;\n        /* fp+2342 */ s8 x2;\n        /* fp+2343 */ s8 x3;\n        /* fp+2344 */ float x4;\n        /* fp+2348 */ ftCollisionBox x8;\n    } damageice;\n    struct {\n        /* fp+2340 */ float x0;\n    } damageicejump;\n    struct {\n        /* fp+2340 */ float x0;\n        /* fp+2344 */ float x4;\n        /* fp+2348 */ float x8;\n        /* fp+234C */ bool xC;\n        /* fp+2350 */ float x10;\n        /* fp+2354 */ float x14;\n        /* fp+2358 */ float x18;\n        /* fp+235C */ int x1C;\n        /* fp+2360 */ int x20;\n        /* fp+2364 */ int x24;\n        /* fp+2368 */ M2C_UNK x28;\n        /* fp+236C */ float x2C;\n    } guard;\n    struct {\n        /* fp+2340 */ bool x0;\n    } itemget;\n    struct {\n        /* fp+2340 */ float facing_dir;\n        /* fp+2344 */ M2C_UNK x4;\n        /* fp+2348 */ M2C_UNK x8;\n        /* fp+234C */ M2C_UNK xC;\n        /* fp+2350 */ M2C_UNK x10;\n        /* fp+2354 */ M2C_UNK x14;\n        /* fp+2358 */ M2C_UNK x18;\n        /* fp+235C */ M2C_UNK x1C;\n        /* fp+2360 */ int x20;\n    } itemthrow;\n    struct {\n        /* fp+2340 */ int unk_timer;\n        /* fp+2344 */ float anim_spd;\n        /* fp+2348 */ Vec3 x8;\n    } itemthrow4;\n    struct {\n        /* fp+2340 */ int x0;\n        /* fp+2344 */ float x4;\n        /* fp+2348 */ float x8;\n        /* fp+234C */ int xC;\n        /* fp+2350 */ bool x10;\n        /* fp+2354 */ float x14;\n        /* fp+2358 */ bool allow_interrupt;\n    } fallspecial;\n    struct {\n        /* fp+2340 */ bool x0;\n        /* fp+2344 */ float x4;\n        /* fp+2348 */ bool x8;\n    } lift;\n    struct {\n        /* fp+2340 */ float x0;\n    } downwait;\n    struct {\n        /* fp+2340 */ bool x0;\n        /* fp+2344 */ bool x4;\n    } escape;\n    struct {\n        /* fp+2340 */ int timer;\n        /* fp+2344 */ Vec3 self_vel;\n    } escapeair;\n    struct {\n        /* fp+2340 */ float x0;\n        /* fp+2344 */ float anim_start;\n    } rebound;\n    struct {\n        /* fp+2340 */ bool x0;\n        /* fp+2344 */ float x4;\n    } pass;\n    struct {\n        /**\n         * Used to check against opponent's #Fighter::213C while they're\n         * occupying a ledge within grab range\n         */\n        /* fp+2340 */ int ledge_id;\n        /* fp+2344 */ float x4;\n        /* fp+2348 */ bool x8;\n    } cliff;\n    struct {\n        /* fp+2340 */ bool x0;\n    } cliffjump;\n    struct {\n        /* fp+2340 */ bool x0;\n    } cargoturn;\n    struct {\n        /* fp+2340 */ int x0;\n        /* fp+2344 */ int x4;\n        /* fp+2348 */ float x8;\n    } cargokneebend;\n    struct {\n        /* fp+2340 */ float x0;\n        /* fp+2344 */ int x4;\n    } shouldered;\n    struct {\n        /* fp+2340 */ float x0;\n    } downdamage;\n    struct {\n        /* fp+2340 */ ftCo_GObj* x0;\n        /* fp+2344 */ bool x4;\n        /* fp+2348 */ float x8;\n        /* fp+234C */ float xC;\n        /* fp+2350 */ float x10;\n        /* fp+2354 */ float x14;\n        /* fp+2358 */ Vec3 x18;\n        /* fp+2364 */ Vec3 scale;\n    } yoshiegg;\n    struct {\n        /* fp+2340 */ bool x0;\n        /* fp+2344 */ M2C_UNK x4;\n        /* fp+2348 */ float x8;\n        /* fp+234C */ float xC;\n        /* fp+2350 */ float x10;\n    } capturekoopa;\n    struct {\n        /* fp+2340 */ Vec2 pos_offset;\n        /* fp+2348 */ Vec2 x8;\n        /* fp+2350 */ Vec2 x10;\n        /* fp+2358 */ bool x18;\n        /* fp+235C */ M2C_UNK x1C;\n        /* fp+2360 */ M2C_UNK x20;\n        /* fp+2364 */ M2C_UNK x24;\n        /* fp+2368 */ M2C_UNK x28;\n        /* fp+236C */ Vec3 scale;\n    } capturekirby;\n    struct {\n        /* fp+2340 */ ftKb_GObj* thrower_gobj;\n        /* fp+2344 */ float x4;\n        /* fp+2348 */ float x8;\n        /* fp+234C */ float xC;\n        /* fp+2350 */ float x10;\n        /* fp+2354 */ bool x14;\n        union {\n            u8 x18;\n            struct {\n                /* fp+2358:0 */ u8 x18_b0 : 1;\n                /* fp+2358:1 */ u8 x18_b1 : 1;\n                /* fp+2358:2 */ u8 x18_b2 : 1;\n                /* fp+2358:3 */ u8 x18_b3 : 1;\n                /* fp+2358:4 */ u8 x18_b4 : 1;\n                /* fp+2358:5 */ u8 x18_b5 : 1;\n                /* fp+2358:6 */ u8 x18_b6 : 1;\n                /* fp+2358:7 */ u8 x18_b7 : 1;\n            };\n        };\n        /* fp+235C */ Vec3 scale;\n        /* fp+2368 */ ftCollisionBox coll_box;\n    } thrownkirby;\n};\n#define MELEE_FT_CHARA_FTDONKEY_TYPES_H\nstruct ftDonkey_FighterVars {\n    /* 0x222C */ s32 x222C;\n    /* 0x2230 */ s32 x2230;\n};\nunion ftDonkey_MotionVars {\n    struct ftDonkey_SpecialNVars {\n        s32 x0;\n        s32 x4;\n        s32 x8;\n        s32 xC;\n        s32 x10;\n        s32 x14;\n    } specialn;\n    struct ftDonkey_SpecialLwVars {\n        s32 x0;\n    } speciallw;\n    /// @todo Rename to correct state.\n    struct ftDonkey_State5Vars {\n        bool x0;\n        s32 x4;\n        f32 x8;\n    } unk5;\n    /// @todo Rename to correct state.\n    struct ftDonkey_State7Vars {\n        s32 x0;\n        s32 x4;\n        f32 x8;\n    } unk7;\n    /// @todo Rename to correct state.\n    struct ftDonkey_State8Vars {\n        s32 x0;\n        f32 x4;\n    } unk8;\n};\ntypedef struct _ftDonkeyAttributes {\n    s32 motion_state;\n    s32 x4_motion_state;\n    //// used by ftDk_HeavyWalk.c (maybe Cargo Hold) ////\n    f32 x8;\n    f32 xC;\n    f32 x10;\n    f32 x14;\n    f32 x18;\n    f32 x1C;\n    /////////////////////////////////////////////////\n    struct {\n        f32 x20_TURN_SPEED;\n        f32 x24_JUMP_STARTUP_LAG;\n        f32 x28_LANDING_LAG;\n    } cargo_hold;\n    //// Giant Punch\n    struct {\n        s32 x2C_MAX_ARM_SWINGS;\n        s32 x30_DAMAGE_PER_SWING;\n        f32 x34_PUNCH_HORIZONTAL_VEL;\n        f32 x38_LANDING_LAG;\n    } SpecialN;\n    //// Headbutt\n    struct {\n        f32 x3C_MIN_STICK_X_MOMENTUM;\n        f32 x40_MOMENTUM_TRANSITION_MODIFIER;\n        f32 x44_AERIAL_GRAVITY;\n    } SpecialS;\n    f32 x48_UNKNOWN;\n    //// Spinning Kong\n    struct {\n        f32 x4C_AERIAL_VERTICAL_VELOCITY;\n        f32 x50_AERIAL_GRAVITY;\n        f32 x54_GROUNDED_HORIZONTAL_VELOCITY;\n        f32 x58_AERIAL_HORIZONTAL_VELOCITY;\n        f32 x5C_GROUNDED_MOBILITY;\n        f32 x60_AERIAL_MOBILITY;\n        f32 x64_LANDING_LAG;\n    } SpecialHi;\n    /// Hand Slap\n    struct {\n        f32 x68;\n        f32 x6C;\n        f32 x70;\n    } SpecialLw;\n} ftDonkeyAttributes;\n#define MELEE_FT_CHARA_FTFOX_TYPES_H\n#define MELEE_FT_CHARA_FTFOX_FORWARD_H\ntypedef struct ftFox_DatAttrs ftFox_DatAttrs;\nstatic MotionFlags const ftFx_MF_Appeal =\n    Ft_MF_KeepGfx | Ft_MF_SkipModel | Ft_MF_SkipAnimVel | Ft_MF_Unk06;\nstatic MotionFlags const ftFx_MF_Special =\n    Ft_MF_SkipModel | Ft_MF_SkipItemVis | Ft_MF_UnkUpdatePhys |\n    Ft_MF_FreezeState;\nstatic MotionFlags const ftFx_MF_SpecialN =\n    ftFx_MF_Special | Ft_MF_KeepFastFall | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftFx_MF_SpecialS =\n    ftFx_MF_Special | Ft_MF_KeepGfx | Ft_MF_KeepSfx;\nstatic MotionFlags const ftFx_MF_SpecialHi =\n    ftFx_MF_SpecialS | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftFx_MF_SpecialAirN =\n    ftFx_MF_SpecialN | Ft_MF_SkipParasol;\nstatic MotionFlags const ftFx_MF_SpecialAirS =\n    ftFx_MF_SpecialS | Ft_MF_SkipParasol;\nstatic MotionFlags const ftFx_MF_SpecialAirHiHold =\n    ftFx_MF_SpecialHi | Ft_MF_SkipParasol;\nstatic MotionFlags const ftFx_MF_SpecialLw =\n    ftFx_MF_Special | Ft_MF_KeepColAnimHitStatus | Ft_MF_SkipColAnim;\nstatic MotionFlags const ftFx_MF_SpecialAirLw =\n    ftFx_MF_SpecialLw | Ft_MF_SkipParasol;\nstatic MotionFlags const ftFx_MF_SpecialNLoop =\n    ftFx_MF_SpecialN | Ft_MF_Unk19;\nstatic MotionFlags const ftFx_MF_SpecialAirNLoop =\n    ftFx_MF_SpecialNLoop | Ft_MF_SkipParasol;\nstatic MotionFlags const ftFx_MF_SpecialLwLoop =\n    ftFx_MF_SpecialLw | Ft_MF_Unk19;\nstatic MotionFlags const ftFx_MF_SpecialAirLwLoop =\n    ftFx_MF_SpecialLwLoop | Ft_MF_SkipParasol;\ntypedef enum ftFox_MotionState {\n    ftFx_MS_SpecialNStart = ftCo_MS_Count,\n    ftFx_MS_SpecialNLoop,\n    ftFx_MS_SpecialNEnd,\n    ftFx_MS_SpecialAirNStart,\n    ftFx_MS_SpecialAirNLoop,\n    ftFx_MS_SpecialAirNEnd,\n    ftFx_MS_SpecialSStart,\n    ftFx_MS_SpecialS,\n    ftFx_MS_SpecialSEnd,\n    ftFx_MS_SpecialAirSStart,\n    ftFx_MS_SpecialAirS,\n    ftFx_MS_SpecialAirSEnd,\n    ftFx_MS_SpecialHiHold,\n    ftFx_MS_SpecialHiHoldAir,\n    ftFx_MS_SpecialHi,\n    ftFx_MS_SpecialAirHi,\n    ftFx_MS_SpecialHiLanding,\n    ftFx_MS_SpecialHiFall,\n    ftFx_MS_SpecialHiBound,\n    ftFx_MS_SpecialLwStart,\n    ftFx_MS_SpecialLwLoop,\n    ftFx_MS_SpecialLwHit,\n    ftFx_MS_SpecialLwEnd,\n    ftFx_MS_SpecialLwTurn,\n    ftFx_MS_SpecialAirLwStart,\n    ftFx_MS_SpecialAirLwLoop,\n    ftFx_MS_SpecialAirLwHit,\n    ftFx_MS_SpecialAirLwEnd,\n    ftFx_MS_SpecialAirLwTurn,\n    ftFx_MS_AppealSStartR,\n    ftFx_MS_AppealSStartL,\n    ftFx_MS_AppealSR,\n    ftFx_MS_AppealSL,\n    ftFx_MS_AppealSEndR,\n    ftFx_MS_AppealSEndL,\n    ftFx_MS_Count,\n    ftFx_MS_SelfCount = ftFx_MS_Count - ftCo_MS_Count,\n} ftFox_MotionState;\ntypedef enum ftFx_Submotion {\n    ftFx_SM_SpecialNStart = ftCo_SM_Count,\n    ftFx_SM_SpecialNLoop,\n    ftFx_SM_SpecialNEnd,\n    ftFx_SM_SpecialAirNStart,\n    ftFx_SM_SpecialAirNLoop,\n    ftFx_SM_SpecialAirNEnd,\n    ftFx_SM_SpecialSStart,\n    ftFx_SM_SpecialS,\n    ftFx_SM_SpecialSEnd,\n    ftFx_SM_SpecialAirSStart,\n    ftFx_SM_SpecialAirS,\n    ftFx_SM_SpecialAirSEnd,\n    ftFx_SM_SpecialHiHold,\n    ftFx_SM_SpecialHiHoldAir,\n    ftFx_SM_SpecialHi,\n    ftFx_SM_SpecialHiLanding,\n    ftFx_SM_SpecialHiFall,\n    ftFx_SM_SpecialHiBound,\n    ftFx_SM_SpecialLwStart,\n    ftFx_SM_SpecialLwLoop,\n    ftFx_SM_SpecialLwHit,\n    ftFx_SM_SpecialLwEnd,\n    ftFx_SM_SpecialAirLwStart,\n    ftFx_SM_SpecialAirLwLoop,\n    ftFx_SM_SpecialAirLwHit,\n    ftFx_SM_SpecialAirLwEnd,\n    ftFx_SM_AppealSStartR,\n    ftFx_SM_AppealSStartL,\n    ftFx_SM_AppealSR,\n    ftFx_SM_AppealSL,\n    ftFx_SM_AppealSEndR,\n    ftFx_SM_AppealSEndL,\n    ftFx_SM_Count,\n    ftFx_SM_SelfCount = ftFx_SM_Count - ftCo_SM_Count,\n} ftFx_Submotion;\nstruct ftFox_FighterVars {\n    /* 0x222C */ HSD_GObj* x222C_blasterGObj;\n};\ntypedef struct ftFoxSpecialN {\n    /// 0x2340 - Check to allow repeated blaster shots\n    bool isBlasterLoop;\n} ftFoxSpecialN;\ntypedef struct ftFoxSpecialS {\n    /// 0x2340 - Number of frames to pass before gravity takes effect\n    s32 gravityDelay;\n    /// 0x2344 through 0x2370 - Related to Illusion/Phantasm model's position?\n    Vec3 ghostEffectPos[4];\n    /// 0x2374 through 0x2380 - ColAnim blend frames?\n    f32 blendFrames[4];\n    /// 0x2384 - Illusion/Phantasm GObj pointer\n    HSD_GObj* ghostGObj;\n} ftFoxSpecialS;\ntypedef struct ftFoxSpecialHi {\n    /// 0x2340 - Number of frames to pass before gravity takes effect\n    s32 gravityDelay;\n    /// 0x2344 - Used to rotate Fox/Falco's model?\n    f32 rotateModel;\n    /// 0x2348 - Number of frames Firefox/Firebird's launch animation lasts for\n    s32 travelFrames;\n    /// 0x234C - ???\n    s32 unk;\n    /// 0x2350 - ???\n    s32 unk2;\n} ftFoxSpecialHi;\ntypedef struct ftFoxSpecialLw {\n    /// 0x2340 - Auto lag frames after initializing Reflector if B is not being\n    /// held. Reflector is immediately released with no lag once these frames\n    /// have passed\n    s32 releaseLag;\n    /// 0x2344 - Number of frames it takes Fox/Falco to turn around on command\n    s32 turnFrames;\n    /// 0x2348 - Check if Fox/Falco is no longer holding B\n    bool isRelease;\n    /// 0x234C - Number of frames to pass before gravity takes effect\n    s32 gravityDelay;\n} ftFoxSpecialLw;\ntypedef struct ftFoxAppealS {\n    /// 0x2340 - Fox/Falco's facing direction as a boolean variable, used to\n    /// load indexed ASIDs from the AppealS struct\n    bool facingDir;\n    /// 0x2344 - Incremented every time one of the three stages of the AppealS\n    /// animation is completed\n    s32 animCount;\n} ftFoxAppealS;\ntypedef union ftFox_MotionVars {\n    ftFoxSpecialN SpecialN;\n    ftFoxSpecialS SpecialS;\n    ftFoxSpecialHi SpecialHi;\n    ftFoxSpecialLw SpecialLw;\n    ftFoxAppealS AppealS;\n} ftFox_MotionVars;\nstruct ftFox_DatAttrs {\n    // NEUTRAL SPECIAL - BLASTER\n    f32 x0_FOX_BLASTER_UNK1;\n    f32 x4_FOX_BLASTER_UNK2;\n    f32 x8_FOX_BLASTER_UNK3;\n    f32 xC_FOX_BLASTER_UNK4;\n    /// Angle at which Blaster shots are fired\n    f32 x10_FOX_BLASTER_ANGLE;\n    /// Velocity at which Blaster shots are fired\n    f32 x14_FOX_BLASTER_VEL;\n    f32 x18_FOX_BLASTER_LANDING_LAG;\n    ItemKind x1C_FOX_BLASTER_SHOT_ITKIND;\n    ItemKind x20_FOX_BLASTER_GUN_ITKIND;\n    // SIDE SPECIAL - FOX ILLUSION / FALCO PHANTASM\n    f32 x24_FOX_ILLUSION_GRAVITY_DELAY; // Frames required to pass before\n                                        // gravity is applied\n    f32 x28_FOX_ILLUSION_GROUND_VEL_X; // Horizontal velocity?\n    f32 x2C_FOX_ILLUSION_UNK1;\n    f32 x30_FOX_ILLUSION_UNK2;\n    f32 x34_FOX_ILLUSION_GROUND_END_VEL_X;\n    f32 x38_FOX_ILLUSION_GROUND_FRICTION;\n    f32 x3C_FOX_ILLUSION_AIR_END_VEL_X;\n    f32 x40_FOX_ILLUSION_AIR_MUL_X;\n    f32 x44_FOX_ILLUSION_FALL_ACCEL;\n    f32 x48_FOX_ILLUSION_TERMINAL_VELOCITY;\n    f32 x4C_FOX_ILLUSION_FREEFALL_MOBILITY;\n    f32 x50_FOX_ILLUSION_LANDING_LAG;\n    // UP SPECIAL - FIREFOX / FIREBIRD\n    f32 x54_FOX_FIREFOX_GRAVITY_DELAY;\n    f32 x58_FOX_FIREFOX_VEL_X; // Initial velocity\n    f32 x5C_FOX_FIREFOX_AIR_MOMENTUM_PRESERVE_X;\n    f32 x60_FOX_FIREFOX_FALL_ACCEL;\n    f32 x64_FOX_FIREFOX_DIRECTION_STICK_RANGE_MIN; // Minimum control stick\n                                                   // range required for\n                                                   // direction change\n    f32 x68_FOX_FIREFOX_DURATION; // Amount of frames Firefox/Firebird travels\n    s32 x6C_FOX_FIREFOX_BOUNCE_VAR;\n    f32 x70_FOX_FIREFOX_DURATION_END;\n    f32 x74_FOX_FIREFOX_SPEED;\n    f32 x78_FOX_FIREFOX_REVERSE_ACCEL; // ???\n    f32 x7C_FOX_FIREFOX_GROUND_MOMENTUM_END;\n    f32 x80_FOX_FIREFOX_UNK2;\n    f32 x84_FOX_FIREFOX_BOUND_VEL_X; // Horizontal velocity of SpecialHiBound\n                                     // action state\n    f32 x88_FOX_FIREFOX_FACING_STICK_RANGE_MIN; // Minimum control stick range\n                                                // required to change\n                                                // character's facing direction\n    f32 x8C_FOX_FIREFOX_FREEFALL_MOBILITY;\n    f32 x90_FOX_FIREFOX_LANDING_LAG;\n    f32 x94_FOX_FIREFOX_BOUND_ANGLE;\n    // DOWN SPECIAL - REFLECTOR\n    /**\n     * Auto lag frames after initializing Reflector if B is not being held.\n     * Reflector is immediately released with no lag once these frames have\n     * passed.\n     */\n    f32 x98_FOX_REFLECTOR_RELEASE_LAG;\n    /// Amount of turn frames for changing Reflector direction\n    f32 x9C_FOX_REFLECTOR_TURN_FRAMES;\n    f32 xA0_FOX_REFLECTOR_UNK1;\n    s32 xA4_FOX_REFLECTOR_GRAVITY_DELAY;\n    f32 xA8_FOX_REFLECTOR_MOMENTUM_PRESERVE_X;\n    f32 xAC_FOX_REFLECTOR_FALL_ACCEL;\n    ReflectDesc xB0_FOX_REFLECTOR_REFLECTION;\n};\n#define MELEE_FT_CHARA_FTGAMEWATCH_TYPES_H\nstruct ftGameWatch_FighterVars {\n    /* 0x222C */ s32 x222C_judgeVar1;\n    /* 0x2230 */ s32 x2230_judgeVar2;\n    /* 0x2234 */ u32 x2234;\n    /* 0x2238 */ s32 x2238_panicCharge;\n    /* 0x223C */ s32 x223C_panicDamage;\n    /* 0x2240 */ s32 x2240_chefVar1;\n    /* 0x2244 */ s32 x2244_chefVar2;\n    /* 0x2248 */ HSD_GObj* x2248_manholeGObj;\n    /* 0x224C */ HSD_GObj* x224C_greenhouseGObj;\n    /* 0x2250 */ HSD_GObj* x2250_manholeGObj2;\n    /* 0x2254 */ HSD_GObj* x2254_fireGObj;\n    /* 0x2258 */ HSD_GObj* x2258_parachuteGObj;\n    /* 0x225C */ HSD_GObj* x225C_turtleGObj;\n    /* 0x2260 */ HSD_GObj* x2260_sparkyGObj;\n    /* 0x2264 */ HSD_GObj* x2264_judgementGObj;\n    /* 0x2268 */ HSD_GObj* x2268_panicGObj;\n    /* 0x226C */ HSD_GObj* x226C_rescueGObj;\n};\ntypedef struct ftGameWatchChef {\n    int sausageCount[6];\n} ftGameWatchChef;\ntypedef struct ftGameWatchJudge {\n    s32 rollVar[9];\n} ftGameWatchJudge;\ntypedef struct _ftGameWatchAttributes {\n    /// MISC. ATTRIBUTES\n    /// Mr. Game & Watch's Z-Axis stretch; 0.01 by default\n    f32 x0_GAMEWATCH_WIDTH;\n    /// Array of four GXColor values, one for each Mr. Game & Watch costume\n    /// color\n    GXColor x4_GAMEWATCH_COLOR[4];\n    /// Outline color of Mr. Game & Watch's model\n    GXColor x14_GAMEWATCH_OUTLINE;\n    /// NEUTRAL SPECIAL - CHEF\n    /// Allow rapid-firing sausages from this frame onward\n    f32 x18_GAMEWATCH_CHEF_LOOPFRAME;\n    /// Maximum amount of sausages created per Chef use\n    f32 x1C_GAMEWATCH_CHEF_MAX;\n    /// SIDE SPECIAL - JUDGEMENT\n    /// Horizontal momentum preservation value\n    f32 x20_GAMEWATCH_JUDGE_MOMENTUM_PRESERVE;\n    /// Multiplies momentum preservation value\n    f32 x24_GAMEWATCH_JUDGE_MOMENTUM_MUL;\n    f32 x28_GAMEWATCH_JUDGE_VEL_Y;\n    f32 x2C_GAMEWATCH_JUDGE_FRICTION1;\n    f32 x30_GAMEWATCH_JUDGE_FRICTION2;\n    /// Array of BOOLs that toggle respective Judgement numbers ON/OFF. If a\n    /// number is OFF, it is excluded from RNG rolls. Game panics if less than\n    /// 2 numbers are ON.\n    s32 x34_GAMEWATCH_JUDGE_ROLL[9];\n    /// UP SPECIAL - FIRE RESCUE\n    /// Minimum control stick range required for directional influence? Also\n    /// affects how far Mr. Game & Watch flings horizontally (?)\n    f32 x58_GAMEWATCH_RESCUE_STICK_RANGE;\n    /// Radians -- controls how far Mr. Game & Watch can angle Fire Rescue?\n    f32 x5C_GAMEWATCH_RESCUE_ANGLE_UNK;\n    /// Landing lag / Freefall toggle\n    f32 x60_GAMEWATCH_RESCUE_LANDING;\n    /// DOWN SPECIAL - OIL PANIC\n    /// Horizontal momentum preservation value\n    f32 x64_GAMEWATCH_PANIC_MOMENTUM_PRESERVE;\n    /// Multiplies momentum preservation value\n    f32 x68_GAMEWATCH_PANIC_MOMENTUM_MUL;\n    /// Falling acceleration\n    f32 x6C_GAMEWATCH_PANIC_FALL_ACCEL;\n    /// Terminal Y velocity?\n    f32 x70_GAMEWATCH_PANIC_VEL_Y_MAX;\n    /// Extra damage added to Oil Panic after formula\n    f32 x74_GAMEWATCH_PANIC_DAMAGE_ADD;\n    /// Damage multiplier\n    f32 x78_GAMEWATCH_PANIC_DAMAGE_MUL;\n    f32 x7C_GAMEWATCH_PANIC_TURN_FRAMES;\n    /// Oil Panic absorption attributes\n    AbsorbDesc x80_GAMEWATCH_PANIC_ABSORPTION;\n} ftGameWatchAttributes;\ntypedef union ftGameWatch_MotionVars {\n    struct ftGameWatch_Attack11Vars {\n        /// 0x2340 - Set to 0 but never used?\n        bool unk;\n    } Attack11;\n    struct ftGameWatch_SpecialNVars {\n        /// 0x2340\n        bool isChefLoopDisable;\n        /// 0x2344 - Maximum number of sausages able to be spawned per Chef use\n        s32 maxSausage;\n    } SpecialN;\n    struct ftGameWatch_SpecialLwVars {\n        /// 0x2340 - bool to check if Mr. Game & Watch is no longer holding B\n        bool isRelease;\n        /// 0x2344 - Number of frames it takes Mr. Game & Watch to turn around\n        /// on command\n        s32 turnFrames;\n    } SpecialLw;\n} ftGameWatch_MotionVars;\n#define MELEE_FT_CHARA_FTKIRBY_TYPES_H\nstruct ftKb_FighterVars {\n    /* fp+222C */ M2C_UNK x0;\n    /* fp+2230 */ uint x4;\n    /* fp+2234:0 */ u8 x8_b0 : 1;\n    /* fp+2235 */ u8 x9[3];\n    /* fp+2238 */ FighterKind victim_kind;\n    /* fp+223C */ M2C_UNK x10;\n    /* fp+2240 */ M2C_UNK x14;\n    /* fp+2244 */ M2C_UNK x18;\n    /* fp+2248 */ M2C_UNK x1C;\n    /* fp+224C */ u8 x20[0x60 - 0x20];\n    /* fp+228C */ M2C_UNK x60;\n    /* fp+2290 */ M2C_UNK x64;\n    /* fp+2294 */ u8 x68[0x9C - 0x68];\n    /* fp+22C8 */ M2C_UNK x9C;\n    /* fp+22CC */ M2C_UNK xA0;\n    /* fp+22D0 */ M2C_UNK xA4;\n    /* fp+22D4 */ M2C_UNK xA8;\n    /* fp+22D8 */ M2C_UNK xAC;\n    /* fp+22DC */ M2C_UNK xB0;\n    /* fp+22E0 */ M2C_UNK xB4;\n    /* fp+22E4 */ M2C_UNK xB8;\n    /* fp+22E8 */ M2C_UNK xBC;\n};\nstruct ftKb_DatAttrs {\n    f32 x0;\n    f32 x4;\n    f32 x8;\n    f32 xC;\n    f32 x10;\n    s32 x14;\n    f32 x18;\n    s32 x1C;\n    s32 x20;\n    s32 x24;\n    s32 x28;\n    s32 x2C;\n    u8 data_filler_1[0x168 - 0x30];\n    f32 x168;\n    u8 data_filler_2[0x190 - 0x16C];\n    s32 x190;\n    u8 data_filler_3[0x384 - 0x194];\n    f32 x384;\n    u8 data_filler_4[0x424 - 0x388];\n};\n#define MELEE_FT_CHARA_FTKOOPA_TYPES_H\nstruct ftKoopa_FighterVars {\n    /* 0x222C */ f32 x222C;\n    /* 0x2230 */ f32 x2230;\n};\nunion ftKoopa_MotionVars {\n    /// @todo Proper state name.\n    struct ftKoopa_State1Vars {\n        M2C_UNK x0;\n        bool x4;\n        M2C_UNK x8;\n        bool xC;\n    } unk1;\n};\ntypedef struct _ftKoopaAttributes {\n    f32 x0;\n    u32 x4;\n    f32 x8;\n    f32 xC;\n    f32 x10;\n    f32 x14;\n    f32 x18;\n    f32 x1C;\n    u32 x20;\n    f32 x24;\n    f32 x28;\n    u32 x2C;\n    f32 x30;\n    f32 x34;\n    f32 x38;\n    f32 x3C;\n    f32 x40;\n    f32 x44;\n    f32 x48;\n    f32 x4C;\n    u32 unk50;\n    f32 x54;\n    f32 x58;\n    f32 x5C;\n    f32 x60;\n    f32 x64;\n    f32 x68;\n    f32 x6C;\n    f32 x70;\n    f32 x74;\n    f32 x78;\n    f32 x7C;\n    f32 x80;\n    f32 x84;\n    f32 x88;\n    f32 x8C;\n    f32 x90;\n    f32 x94;\n    f32 x98;\n    f32 x9C;\n} ftKoopaAttributes;\ntypedef struct _ftKoopaVars {\n    f32 x0;\n    f32 x4;\n} ftKoopaVars;\n#define MELEE_FT_CHARA_FTLINK_TYPES_H\nstruct ftLk_DatAttrs {\n    /* +0 */ float x0;\n    /* +4 */ float specialn_anim_rate;\n    /* +8 */ float x8;\n    /* +C */ int xC;\n    /* +10 */ int x10;\n    /* +14 */ float x14;\n    /* +18 */ float x18;\n    /* +1C */ float x1C;\n    /* +20 */ float x20;\n    /* +24 */ float x24;\n    /* +28 */ float specialhi_pos_y_offset;\n    /* +2C */ int x2C;\n    /* +30 */ float x30;\n    /* +34 */ float x34;\n    /* +38 */ float specialairhi_drift_stick_mul;\n    /* +3C */ float specialairhi_drift_max_mul;\n    /* +40 */ float x40;\n    /* +44 */ float specialhi_grav_mul;\n    /* +48 */ int x48;\n    /* +4C */ float attackairlw_hit_vel_y;\n    /* +50 */ float attackairlw_hit_anim_frame_start;\n    /* +54 */ float attackairlw_hit_anim_frame_end;\n    /* +58 */ u32 attackairlw_anim_flags[3];\n    /* +64 */ u8 x64[0xBC - 0x64];\n    /* +BC */ int xBC;\n    /* +C0 */ u8 xC0_filler[0xC4 - 0xC0];\n    /* +C4 */ AbsorbDesc xC4;\n    /* +D8 */ float xD8;\n};\nstruct ftLk_FighterVars {\n    /* fp+222C */ bool used_boomerang;\n    /* fp+2230 */ bool x4;\n    /* fp+2234 */ Item_GObj* boomerang_gobj;\n    /* fp+2238 */ u32 xC;\n    /* fp+223C */ Item_GObj* arrow_gobj;\n    /* fp+2240 */ Item_GObj* x14;\n    /* fp+2244 */ Item_GObj* x18;\n    /* fp+2248 */ u32 x1C;\n    u8 _[0x100 - 0x20];\n};\nunion ftLk_MotionVars {\n    struct ftLk_AttackAirVars {\n        /* fp+2340 */ float lw_frame_start;\n    } attackair;\n    struct ftLk_SpecialNVars {\n        /* fp+2340 */ Vec2 x0;\n        /* fp+2348 */ Vec3 x8;\n        /* fp+2354 */ float x14;\n        /* fp+2358 */ int unk_timer;\n    } specialn;\n};\nstruct ftLk_SpecialN_Vec3Group {\n    /*  +0 */ Vec3 a;\n    /*  +C */ Vec3 b;\n    /* +18 */ Vec3 c;\n};\n#define MELEE_FT_CHARA_FTLUIGI_TYPES_H\nstruct ftLuigi_FighterVars {\n    /* 0x222C */ bool x222C_cycloneCharge;\n    /* 0x2230 */ u32 x2230;\n    /* 0x2234 */ u32 x2234;\n    u8 _[0x100 - 0xC];\n};\ntypedef struct _ftLuigiAttributes {\n    /// SIDE SPECIAL - GREEN MISSILE\n    f32 x0_LUIGI_GREENMISSILE_UNK1;\n    f32 x4_LUIGI_GREENMISSILE_SMASH;\n    f32 x8_LUIGI_GREENMISSILE_CHARGE_RATE;\n    f32 xC_LUIGI_GREENMISSILE_MAX_CHARGE_FRAMES;\n    f32 x10_LUIGI_GREENMISSILE_DAMAGE_TILT;\n    /// (base damage + charge duration) * this value?\n    f32 x14_LUIGI_GREENMISSILE_DAMAGE_SLOPE;\n    f32 x18_LUIGI_GREENMISSILE_TRACTION;\n    f32 x1C_LUIGI_GREENMISSILE_UNK2;\n    f32 x20_LUIGI_GREENMISSILE_FALLING_SPEED;\n    f32 x24_LUIGI_GREENMISSILE_VEL_X;\n    f32 x28_LUIGI_GREENMISSILE_MUL_X;\n    f32 x2C_LUIGI_GREENMISSILE_VEL_Y;\n    f32 x30_LUIGI_GREENMISSILE_MUL_Y;\n    f32 x34_LUIGI_GREENMISSILE_GRAVITY_START;\n    f32 x38_LUIGI_GREENMISSILE_FRICTION_END;\n    f32 x3C_LUIGI_GREENMISSILE_X_DECEL;\n    f32 x40_LUIGI_GREENMISSILE_GRAVITY_MUL;\n    /// 1.0f divided by this value\n    f32 x44_LUIGI_GREENMISSILE_MISFIRE_CHANCE;\n    f32 x48_LUIGI_GREENMISSILE_MISFIRE_VEL_X;\n    f32 x4C_LUIGI_GREENMISSILE_MISFIRE_VEL_Y;\n    /// UP SPECIAL - SUPER JUMP PUNCH\n    /// Multiplies Luigi's max horionztal aerial mobility\n    f32 x50_LUIGI_SUPERJUMP_FREEFALL_MOBILITY;\n    f32 x54_LUIGI_SUPERJUMP_LANDING_LAG;\n    /// Minimum stick range required for turnaround\n    f32 x58_LUIGI_SUPERJUMP_REVERSE_STICK_RANGE;\n    /// Minimum stick range required for horionztal momentum?\n    f32 x5C_LUIGI_SUPERJUMP_MOMENTUM_STICK_RANGE;\n    f32 x60_LUIGI_SUPERJUMP_ANGLE_DIFF;\n    f32 x64_LUIGI_SUPERJUMP_VEL_X;\n    f32 x68_LUIGI_SUPERJUMP_GRAVITY_START;\n    f32 x6C_LUIGI_SUPERJUMP_VEL_Y;\n    /// DOWN SPECIAL - LUIGI CYCLONE\n    /// Vertical momentum from (first?) B button tap\n    f32 x70_LUIGI_CYCLONE_TAP_MOMENTUM;\n    f32 x74_LUIGI_CYCLONE_MOMENTUM_X_GROUND;\n    f32 x78_LUIGI_CYCLONE_MOMENTUM_X_AIR;\n    f32 x7C_LUIGI_CYCLONE_MOMENTUM_X_MUL_GROUND;\n    f32 x80_LUIGI_CYCLONE_MOMENTUM_X_MUL_AIR;\n    f32 x84_LUIGI_CYCLONE_FRICTION_END;\n    s32 x88_LUIGI_CYCLONE_UNK;\n    f32 x8C_LUIGI_CYCLONE_TAP_Y_VEL_MAX;\n    f32 x90_LUIGI_CYCLONE_TAP_GRAVITY;\n    s32 x94_LUIGI_CYCLONE_LANDING_LAG;\n} ftLuigiAttributes;\ntypedef struct ftLuigiSpecialS {\n    /// 0x2340 - Number of frames Green Missile has been charged\n    s32 chargeFrames;\n    /// 0x2344 - Check if Green Missile will misfire\n    bool isMisfire;\n} ftLuigiSpecialS;\ntypedef struct ftLuigiSpecialLw {\n    /// 0x2340 - Grounded momentum of Luigi Cyclone\n    f32 groundVelX;\n    /// 0x2344 - Set but never used?\n    s32 unk;\n    /// 0x2348 - Skipped entirely\n    s32 _;\n    /// 0x234C - Checked in collision, related to some angle calculation\n    bool isUnkColl;\n} ftLuigiSpecialLw;\ntypedef union ftLuigi_MotionVars {\n    ftLuigiSpecialS SpecialS;\n    ftLuigiSpecialLw SpecialLw;\n} ftLuigi_MotionVars;\n#define MELEE_FT_CHARA_FTMARIO_TYPES_H\n#define MELEE_FT_CHARA_FTMARIO_FORWARD_H\nstatic MotionFlags const ftMr_MF_Special =\n    Ft_MF_SkipModel | Ft_MF_SkipItemVis | Ft_MF_UnkUpdatePhys |\n    Ft_MF_FreezeState;\nstatic MotionFlags const ftMr_MF_SpecialN =\n    ftMr_MF_Special | Ft_MF_KeepFastFall | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftMr_MF_SpecialHi =\n    ftMr_MF_Special | Ft_MF_KeepFastFall | Ft_MF_KeepGfx | Ft_MF_KeepSfx;\nstatic MotionFlags const ftMr_MF_SpecialLw =\n    ftMr_MF_Special | Ft_MF_KeepColAnimHitStatus | Ft_MF_KeepSfx;\nstatic MotionFlags const ftMr_MF_SpecialAirN =\n    ftMr_MF_SpecialN | Ft_MF_SkipParasol;\nstatic MotionFlags const ftMr_MF_SpecialAirHi =\n    ftMr_MF_SpecialHi | Ft_MF_SkipParasol;\nstatic MotionFlags const ftMr_MF_SpecialAirLw =\n    ftMr_MF_SpecialLw | Ft_MF_SkipParasol;\nstatic MotionFlags const ftMr_MF_SpecialS =\n    ftMr_MF_Special | Ft_MF_KeepGfx | Ft_MF_SkipModel | Ft_MF_SkipColAnim;\ntypedef enum ftMario_MotionState {\n    ftMr_MS_AppealSR = ftCo_MS_Count,\n    ftMr_MS_AppealSL,\n    ftMr_MS_SpecialN,\n    ftMr_MS_SpecialAirN,\n    ftMr_MS_SpecialS,\n    ftMr_MS_SpecialAirS,\n    ftMr_MS_SpecialHi,\n    ftMr_MS_SpecialAirHi,\n    ftMr_MS_SpecialLw,\n    ftMr_MS_SpecialAirLw,\n    ftMr_MS_Count,\n    ftMr_MS_SelfCount = ftMr_MS_Count - ftCo_MS_Count,\n} ftMario_MotionState;\ntypedef enum ftMr_Submotion {\n    ftMr_SM_SpecialN = ftCo_SM_Count,\n    ftMr_SM_SpecialAirN,\n    ftMr_SM_SpecialS,\n    ftMr_SM_SpecialAirS,\n    ftMr_SM_SpecialHi,\n    ftMr_SM_SpecialAirHi,\n    ftMr_SM_SpecialLw,\n    ftMr_SM_SpecialAirLw,\n    ftMr_SM_Count,\n    ftMr_SM_SelfCount = ftMr_SM_Count - ftCo_SM_Count,\n} ftMr_Submotion;\nstruct ftMario_FighterVars {\n    /// Current Megavitamin color combo\n    /* 0x222C */ int x222C_vitaminCurr;\n    /// Previous Megavitamin color combo\n    /* 0x2230 */ int x2230_vitaminPrev;\n    /* 0x2234 */ bool x2234_tornadoCharge;\n    /* 0x2238 */ bool x2238_isCapeBoost;\n    /* 0x223C */ HSD_GObj* x223C_capeGObj;\n    /* 0x2240 */ uint x2240;\n    u8 _[0x100 - 0x18];\n};\ntypedef struct ftMario_DatAttrs {\n    struct ftMario_SpecialS_DatAttrs {\n        f32 vel_x_decay;\n        Vec2 vel;\n        f32 grav;\n        f32 terminal_vel;\n        ItemKind cape_kind;\n    } specials;\n    struct ftMario_SpecialHi_DatAttrs {\n        f32 freefall_mobility;\n        f32 landing_lag;\n        f32 reverse_stick_range;\n        f32 momentum_stick_range;\n        f32 angle_diff;\n        f32 vel_x;\n        f32 grav;\n        f32 vel_mul;\n    } specialhi;\n    struct ftMario_SpecialLw_DatAttrs {\n        f32 vel_y;\n        f32 momentum_x;\n        f32 air_momentum_x;\n        f32 momentum_x_mul;\n        f32 air_momentum_x_mul;\n        f32 friction_end;\n        s32 unk0;\n        f32 tap_y_vel_max;\n        f32 tap_grav;\n        s32 landing_lag;\n    } speciallw;\n    ReflectDesc cape_reflection;\n} ftMario_DatAttrs;\ntypedef struct ftMario_SpecialLw_ECB {\n    u8 x0_str_arr[3];\n    u8 x3_balign;\n    uint x4;\n    uint x8;\n    uint xC;\n    uint x10;\n    uint x14;\n} ftMario_SpecialLw_ECB;\ntypedef struct ftMarioSpecialS {\n    /// 0x2340 - bool to check if reflect bubble should be enabled\n    bool reflecting;\n} ftMarioSpecialS;\ntypedef struct ftMarioSpecialLw {\n    /// 0x2340 - Grounded momentum of Mario / Dr. Tornado\n    f32 groundVelX;\n    /// 0x2344 - Set but never used?\n    s32 unk;\n    /// 0x2348 - Skipped entirely\n    s32 _;\n    /// 0x234C - Checked in collision, related to some angle calculation\n    bool isUnkColl;\n} ftMarioSpecialLw;\ntypedef union ftMario_MotionVars {\n    ftMarioSpecialS SpecialS;\n    ftMarioSpecialLw SpecialLw;\n} ftMario_MotionVars;\n#define MELEE_FT_CHARA_FTMARS_TYPES_H\nstruct ftMars_FighterVars {\n    /* 0x222C */ u32 x222C;\n    u8 _[0x100 - 4];\n};\ntypedef struct _MarsAttributes {\n    int x0;\n    int x4;\n    int x8;\n    float xC;\n    float x10;\n    float x14;\n    float x18;\n    float x1C;\n    float x20;\n    float x24;\n    float x28;\n    float x2C;\n    float x30;\n    float x34;\n    float x38;\n    float x3C;\n    float x40;\n    float x44;\n    float x48;\n    float x4C;\n    float x50;\n    float x54;\n    float x58;\n    float x5C;\n    float x60;\n    AbsorbDesc x64;\n    u8 x78[0x98 - 0x78];\n} MarsAttributes;\nunion ftMars_MotionVars {\n    struct ftMars_Unk0MotionVars {\n        bool x0;\n    } unk0;\n    struct ftMars_SpecialNVars {\n        int x0;\n    } specialn;\n    struct ftMars_SpecialSVars {\n        int x0;\n    } specials;\n    struct ftMars_SpecialLwVars {\n        int x0;\n    } speciallw;\n};\n#define MELEE_FT_CHARA_FTMASTERHAND_TYPES_H\n#define MELEE_FT_CHARA_FTMASTERHAND_FORWARD_H\ntypedef struct ftMasterHand_SpecialAttrs ftMasterHand_SpecialAttrs;\ntypedef enum ftMasterHand_UnkEnum0 {\n    ftMh_UnkEnum0_Unk00,\n    ftMh_UnkEnum0_Unk01,\n    ftMh_UnkEnum0_Unk02,\n    ftMh_UnkEnum0_Unk03,\n    ftMh_UnkEnum0_Unk04,\n    ftMh_UnkEnum0_Unk05,\n    ftMh_UnkEnum0_Unk06,\n    ftMh_UnkEnum0_Unk07,\n    ftMh_UnkEnum0_Unk08,\n    ftMh_UnkEnum0_Unk09,\n    ftMh_UnkEnum0_Unk10,\n} ftMasterHand_UnkEnum0;\ntypedef enum ftMasterhand_MotionState {\n    ftMh_MS_Wait1_0 = ftCo_MS_Count,\n    ftMh_MS_Wait2_0,\n    ftMh_MS_Entry,\n    ftMh_MS_Damage,\n    ftMh_MS_Damage2,\n    ftMh_MS_WaitSweep,\n    ftMh_MS_SweepLoop,\n    ftMh_MS_SweepWait,\n    ftMh_MS_Slap,\n    ftMh_MS_Walk2,\n    ftMh_MS_WalkLoop,\n    ftMh_MS_WalkWait,\n    ftMh_MS_WalkShoot,\n    ftMh_MS_Drill,\n    ftMh_MS_RockCrushUp,\n    ftMh_MS_RockCrushWait,\n    ftMh_MS_RockCrushDown,\n    ftMh_MS_PaperCrush,\n    ftMh_MS_Poke1,\n    ftMh_MS_Poke2,\n    ftMh_MS_FingerBeamStart,\n    ftMh_MS_FingerBeamLoop,\n    ftMh_MS_FingerBeamEnd,\n    ftMh_MS_FingerGun1,\n    ftMh_MS_FingerGun2,\n    ftMh_MS_FingerGun3,\n    ftMh_MS_BackAirplane1,\n    ftMh_MS_BackAirplane2,\n    ftMh_MS_BackAirplane3,\n    ftMh_MS_BackPunch,\n    ftMh_MS_BackCrush,\n    ftMh_MS_BackDisappear,\n    ftMh_MS_Wait1_1,\n    ftMh_MS_Grab,\n    ftMh_MS_Cancel,\n    ftMh_MS_Squeezing0,\n    ftMh_MS_Squeezing1,\n    ftMh_MS_Squeeze,\n    ftMh_MS_Throw,\n    ftMh_MS_Slam,\n    ftMh_MS_Fail,\n    ftMh_MS_TagCrush,\n    ftMh_MS_TagApplaud,\n    ftMh_MS_TagRockPaper,\n    ftMh_MS_TagGrab,\n    ftMh_MS_TagSqueeze,\n    ftMh_MS_TagFail,\n    ftMh_MS_TagCancel,\n    ftMh_MS_Wait1_2,\n    ftMh_MS_Wait2_1,\n    ftMh_MS_Count,\n    ftMh_MS_SelfCount = ftMh_MS_Count - ftCo_MS_Count,\n} ftMasterhand_MotionState;\ntypedef enum ftMh_Submotion {\n    ftMh_SM_Wait1_0 = ftCo_SM_Count,\n    ftMh_SM_Wait2_0,\n    ftMh_SM_Entry,\n    ftMh_SM_Damage,\n    ftMh_SM_Damage2,\n    ftMh_SM_WaitSweep,\n    ftMh_SM_SweepLoop,\n    ftMh_SM_SweepWait,\n    ftMh_SM_Slap,\n    ftMh_SM_Walk2,\n    ftMh_SM_WalkLoop,\n    ftMh_SM_WalkWait,\n    ftMh_SM_WalkShoot,\n    ftMh_SM_Drill,\n    ftMh_SM_RockCrushUp,\n    ftMh_SM_RockCrushWait,\n    ftMh_SM_RockCrushDown,\n    ftMh_SM_PaperCrush,\n    ftMh_SM_Poke1,\n    ftMh_SM_Poke2,\n    ftMh_SM_FingerBeamStart,\n    ftMh_SM_FingerBeamLoop,\n    ftMh_SM_FingerBeamEnd,\n    ftMh_SM_FingerGun1,\n    ftMh_SM_FingerGun2,\n    ftMh_SM_FingerGun3,\n    ftMh_SM_BackAirplane1,\n    ftMh_SM_BackAirplane2,\n    ftMh_SM_BackAirplane3,\n    ftMh_SM_BackPunch,\n    ftMh_SM_BackCrush,\n    ftMh_SM_BackDisappear,\n    ftMh_SM_Wait1_1,\n    ftMh_SM_Grab,\n    ftMh_SM_Cancel,\n    ftMh_SM_Squeezing0,\n    ftMh_SM_Squeezing1,\n    ftMh_SM_Squeeze,\n    ftMh_SM_Throw,\n    ftMh_SM_Slam,\n    ftMh_SM_Fail,\n    ftMh_SM_TagCrush,\n    ftMh_SM_TagApplaud,\n    ftMh_SM_TagRockPaper,\n    ftMh_SM_TagGrab,\n    ftMh_SM_TagSqueeze,\n    ftMh_SM_TagFail,\n    ftMh_SM_TagCancel,\n    ftMh_SM_Wait1_2,\n    ftMh_SM_Wait2_1,\n    ftMh_SM_Count,\n    ftMh_SM_SelfCount = ftMh_SM_Count - ftCo_SM_Count,\n} ftMh_Submotion;\nstruct ftMasterhand_FighterVars {\n    /* 0x222C */ HSD_GObj* x222C;\n    /* 0x2230 */ u32 x2230;\n    /* 0x2234 */ u32 x2234;\n    /* 0x2238 */ f32 x2238;\n    /* 0x223C */ f32 x223C;\n    /* 0x2240 */ Vec3 x2240_pos;\n    /* 0x224C */ u32 x224C;\n    /* 0x2250 */ s32 x2250;\n    /* 0x2254 */ s32 x2254;\n    /* 0x2258 */ s32 x2258;\n};\nstruct ftMasterHand_SpecialAttrs {\n    s32 x0;\n    s32 x4;\n    s32 x8;\n    s32 xC;\n    s32 x10;\n    s32 x14;\n    s32 x18;\n    s32 x1C;\n    s32 x20;\n    s32 x24;\n    f32 x28;\n    f32 x2C;\n    Vec2 x30_pos2;\n    f32 x38;\n    f32 x3C;\n    Vec3 x40_pos;\n    f32 x4C;\n    Vec2 x50;\n    f32 x58;\n    f32 x5C;\n    f32 x60;\n    f32 x64;\n    f32 x68;\n    s32 x6C;\n    s32 x70;\n    s32 x74;\n    f32 x78;\n    s32 x7C;\n    f32 x80;\n    s32 x84;\n    Vec2 x88_pos;\n    s32 x90;\n    s32 x94;\n    f32 x98;\n    f32 x9C;\n    s32 xA0;\n    f32 xA4;\n    Vec2 xA8_pos;\n    s32 xB0;\n    s32 xB4;\n    f32 xB8;\n    Vec2 xBC_pos;\n    Vec2 xC4_pos;\n    Vec2 xCC_pos;\n    f32 xD4;\n    f32 xD8;\n    f32 xDC;\n    f32 xE0;\n    f32 xE4;\n    f32 xE8;\n    s32 xEC;\n    s32 xF0;\n    f32 xF4;\n    f32 xF8;\n    f32 xFC;\n    f32 x100;\n    f32 x104;\n    f32 x108;\n    f32 x10C;\n    Vec2 x110_pos;\n    Vec2 x118_pos;\n    f32 x120;\n    Vec2 x124_pos;\n    Vec2 x12C_pos;\n    Vec2 x134_pos;\n    Vec2 x13C_pos;\n    s32 x144;\n    s32 x148;\n    f32 x14C;\n    f32 x150;\n    f32 x154;\n    f32 x158;\n    f32 x15C;\n    s32 x160;\n    s32 x164;\n    s32 x168;\n    s32 x16C;\n    s32 x170;\n    s32 x174;\n    f32 x178;\n};\nunion ftMasterHand_MotionVars {\n    struct ftMasterHand_Unk0Vars {\n        f32 x0;\n        HSD_GObjEvent x4;\n        int x8;\n        Vec3 xC;\n        f32 x18;\n        f32 x1C;\n        int x20;\n        f32 x24;\n        int x28;\n        int x2C;\n        int x30;\n        int x34;\n        int x38;\n        int x3C;\n        int x40;\n        int x44;\n        int x48;\n        int x4C;\n        f32 x50;\n        int x54;\n        Vec3 x58;\n        Vec3 x64;\n        int x70;\n        int x74;\n        int x78;\n    } unk0;\n    struct ftMasterHand_Unk4Vars {\n        ftMasterHand_UnkEnum0 x0;\n        int x4;\n        int x8;\n    } unk4;\n    struct ftMasterHand_Unk13Vars {\n        f32 x0;\n        f32 x4;\n    } unk13;\n};\n#define MELEE_FT_CHARA_FTMEWTWO_TYPES_H\nstruct ftMewtwo_FighterVars {\n    /* 0x222C */ HSD_GObj* x222C_disableGObj;\n    /* 0x2230 */ HSD_GObj*\n        x2230_shadowHeldGObj; // GObj of Shadow Ball while in Mewtwo's hands?\n    /* 0x2234 */ s32 x2234_shadowBallCharge; // Number of cycles Shadow Ball\n                                             // has been charged\n    /* 0x2238 */ HSD_GObj* x2238_shadowBallGObj;\n    /* 0x223C */ bool x223C_isConfusionBoost;\n};\ntypedef struct ftMewtwoSpecialHi {\n    /// 0x2340 - Number of frames Teleport's zoom animation lasts for\n    s32 travelFrames;\n    f32 stickX;\n    f32 stickY;\n    /// 0x234C - ???\n    s32 unk4;\n    f32 velX;\n    f32 velY;\n    f32 groundVelX;\n} ftMewtwoSpecialHi;\ntypedef struct ftMewtwoSpecialS {\n    /// 0x2340 - ???\n    u8 isConfusionReflect : 1;\n} ftMewtwoSpecialS;\ntypedef struct ftMewtwoSpecialN {\n    bool isFull;\n    s32 x2344;\n    bool x2348;\n    s32 releaseLag;\n    /// 0x2350 - Charge level of Shadow Ball\n    f32 chargeLevel;\n} ftMewtwoSpecialN;\ntypedef union ftMewtwo_MotionVars {\n    ftMewtwoSpecialN SpecialN;\n    ftMewtwoSpecialS SpecialS;\n    ftMewtwoSpecialHi SpecialHi;\n} ftMewtwo_MotionVars;\ntypedef struct _ftMewtwoAttributes {\n    // NEUTRAL SPECIAL - SHADOW BALL (SpecialN/SpecialAirN)\n    f32 x0_MEWTWO_SHADOWBALL_CHARGE_CYCLES; // Number of frames each iteration\n                                            // cycle lasts?\n    f32 x4_MEWTWO_SHADOWBALL_GROUND_RECOIL_X;\n    f32 x8_MEWTWO_SHADOWBALL_AIR_RECOIL_X;\n    s32 xC_MEWTWO_SHADOWBALL_CHARGE_ITERATIONS; // Number of iterations\n                                                // required for full charge\n    s32 x10_MEWTWO_SHADOWBALL_RELEASE_LAG;\n    f32 x14_MEWTWO_SHADOWBALL_LANDING_LAG;\n    // SIDE SPECIAL - CONFUSION (SpecialS/SpecialAirS)\n    f32 x18_MEWTWO_CONFUSION_AIR_BOOST;\n    ReflectDesc x1C_MEWTWO_CONFUSION_REFLECTION;\n    // UP SPECIAL - TELEPORT (SpecialHi/SpecialAirHi)\n    f32 x40_MEWTWO_TELEPORT_VEL_DIV_X;\n    f32 x44_MEWTWO_TELEPORT_VEL_DIV_Y;\n    f32 x48_MEWTWO_TELEPORT_GRAVITY;\n    f32 x4C_MEWTWO_TELEPORT_TERMINAL_VELOCITY;\n    s32 x50_MEWTWO_TELEPORT_DURATION;\n    f32 x54_MEWTWO_TELEPORT_UNK2;\n    f32 x58_MEWTWO_TELEPORT_STICK_RANGE_MIN;\n    f32 x5C_MEWTWO_TELEPORT_MOMENTUM;\n    f32 x60_MEWTWO_TELEPORT_MOMENTUM_ADD;\n    f32 x64_MEWTWO_TELEPORT_DRIFT;\n    s32 x68_MEWTWO_TELEPORT_ANGLE_CLAMP; // Clamp teleport travel if surface\n                                         // angle is greater than this value\n    f32 x6C_MEWTWO_TELEPORT_MOMENTUM_END_MUL;\n    f32 x70_MEWTWO_TELEPORT_FREEFALL_MOBILITY;\n    f32 x74_MEWTWO_TELEPORT_LANDING_LAG;\n    // DOWN SPECIAL - DISABLE (SpecialLw/SpecialAirLw)\n    f32 x78_MEWTWO_DISABLE_GRAVITY;\n    f32 x7C_MEWTWO_DISABLE_TERMINAL_VELOCITY;\n    f32 x80_MEWTWO_DISABLE_OFFSET_X;\n    f32 x84_MEWTWO_DISABLE_OFFSET_Y;\n} ftMewtwoAttributes;\n#define MELEE_FT_CHARA_FTNESS_TYPES_H\nstruct ftNess_FighterVars {\n    /* 0x222C */ HSD_GObj* yoyo_gobj;\n    /* 0x2230 */ Vec3 yoyo_hitbox_pos;\n    /* 0x223C */ f32 x223C;\n    /* 0x2240 */ HSD_GObj* pkflash_gobj;\n    /* 0x2244 */ HSD_GObj* pkthunder_gobj;\n    /* 0x2248 */ HSD_GObj* bat_gobj;\n    /// bool for PK Thunder GFX?\n    /* 0x224C */ u32 pkthunder_gfx;\n};\nunion ftNess_MotionVars {\n    struct ftNess_YoyoVars {\n        /// 0x2340 - Current frame of Up/Down Smash animation as an integer\n        s32 yoyoCurrentFrame;\n        /// 0x2344 - Frames until Up/Down Smash hitbox automatically refreshes;\n        /// part of why the Yo-Yo Glitch occurs\n        s32 yoyoRehitTimer;\n        /// 0x2348 - bool to indicate whether Ness can charge the Yo-Yo\n        bool isChargeDisable;\n        /// 0x234C - bool to indicate whether Yo-Yo hitbox position should\n        /// update based on raw Vec3 input (false) or modified calculations\n        /// (true)\n        bool isPosUpdateMod;\n    } attackhi4, attacklw4;\n    struct ftNess_SpecialNVars {\n        /// 0x2340 - Number of frames Ness remains in the \"charge loop\"\n        /// animation after releasing PK Flash\n        s32 flashTimerLoop1;\n        /// 0x2344 - Number of extra frames Ness remains in the \"charge loop\"\n        /// animation after releasing PK Flash?\n        s32 flashTimerLoop2;\n        /// 0x2348 - Number of frames to pass before gravity takes effect\n        s32 gravityDelay;\n        /// 0x234C - Minimum number of frames required to pass for PK Flash to\n        /// auto-release if B is not being held\n        s32 flashTimerMin;\n    } specialn;\n    struct ftNess_SpecialHiVars {\n        /// 0x2340 - PK Thunder collision type? Used to check if PK Thunder is\n        /// colliding with Ness\n        s32 thunderColl;\n        /// 0x2344 - Number of frames Ness remains in the \"control loop\"\n        /// animation after PK Thunder despawns\n        s32 thunderTimerLoop1;\n        /// 0x2348 - Number of extra frames Ness remains in the \"control loop\"\n        /// animation after PK Thunder despawns?\n        s32 thunderTimerLoop2;\n        /// 0x234C - Number of frames to pass before gravity takes effect\n        s32 gravityDelay;\n        /// 0x2350 - ???\n        Vec3 collPos1;\n        /// 0x235C - ???\n        Vec3 collPos2;\n        /// 0x2368 - Aerial velocity of PK Thunder 2 (Self-Hit)\n        f32 aerialVel;\n        /// 0x236C - Set various times but never actually used?\n        f32 unkVar;\n        /// 0x2370 - Facing direction change frorm PK Thunder collision\n        f32 facingDir;\n        /// 0x2374 through 0x237C - Unused vector\n        Vec3 unkVector1;\n        /// 0x2380 - bool used in a weird way to switch to PK Thunder 2 GFX\n        s32 jibakuGFX;\n        /// 0x2384 - Fall acceleration of PK Thunder 2 (Self-Hit)\n        f32 fallAccel;\n        /// 0x2388 - Set various times but never actually used?\n        f32 unkVar3;\n        /// 0x238C - Set various times but never actually used?\n        f32 unkVar4;\n    } specialhi;\n    struct ftNess_SpecialLwVars {\n        /// 0x2340 - Auto lag frames after initializing PSI Magnet if B is not\n        /// being held; PSI Magnet is immediately released with no lag once\n        /// these frames have passed\n        s32 releaseLag;\n        /// 0x2344 - Unused turnaround timer\n        s32 turnFrames;\n        /// 0x2348 - Check if Ness is no longer holding B\n        bool isRelease;\n        /// 0x234C - Number of frames to pass before gravity takes effect\n        s32 gravityDelay;\n        s32 x10;\n    } speciallw;\n};\n// Special Attributes\ntypedef struct ftNessAttributes {\n    // Neutral Special - PK Flash\n    s32 x0_PKFLASH_TIMER1_LOOPFRAMES;\n    s32 x4_PKFLASH_TIMER2_LOOPFRAMES;\n    s32 x8_PKFLASH_GRAVITY_DELAY;\n    s32 xC_PKFLASH_MINCHARGEFRAMES;\n    f32 x10_PKFLASH_UNK1;\n    f32 x14_PKFLASH_FALL_ACCEL;\n    f32 x18_PKFLASH_UNK2;\n    f32 x1C_PKFLASH_LANDING_LAG; // If set to 0, Ness does not enter freefall\n                                 // after aerial PK Flash, but loses his double\n                                 // jump.\n    // Side Special - PK Fire\n    f32 x20_PKFIRE_AERIAL_LAUNCH_TRAJECTORY; // Radians\n    f32 x24_PKFIRE_AERIAL_VELOCITY;\n    f32 x28_PKFIRE_GROUNDED_LAUNCH_TRAJECTORY; // Radians\n    f32 x2C_PKFIRE_GROUNDED_VELOCITY;\n    f32 x30_PKFIRE_SPAWN_X;\n    f32 x34_PKFIRE_SPAWN_Y;\n    f32 x38_PKFIRE_LANDING_LAG;\n    // Up Special - PK Thunder\n    f32 x3C_PK_THUNDER_UNK1;\n    u32 x40_PK_THUNDER_LOOP1;\n    u32 x44_PK_THUNDER_LOOP2;\n    u32 x48_PK_THUNDER_GRAVITY_DELAY;\n    f32 x4C_PK_THUNDER_UNK2;\n    f32 x50_PK_THUNDER_FALL_ACCEL;\n    // Up Special - PK Thunder 2 (Self-Hit)\n    f32 x54_PK_THUNDER_2_MOMENTUM;\n    f32 x58_PK_THUNDER_2_UNK1;\n    f32 x5C_PK_THUNDER_2_DECELERATION_RATE;\n    f32 x60_PK_THUNDER_2_KNOCKDOWN_ANGLE; // Angle to determine whether to\n                                          // enter PK Thunder 2 or DownBound\n                                          // state (Ground Only)\n    f32 x64_PK_THUNDER_2_WALLHUG_ANGLE; // Surface angle to determine whether\n                                          // PK Thunder 2 wallhugs or bounces\n    f32 x68_PK_THUNDER_2_UNK2;\n    f32 x6C_PK_THUNDER_2_FREEFALL_ANIM_BLEND; // Amount of animation blend\n                                              // frames Ness goes through when\n                                              // entering FallSpecial through\n                                              // his SpecialHi Motion States\n    f32 x70_PK_THUNDER_2_LANDING_LAG; // If set to 0, Ness does not enter\n                                      // freefall after aerial PK Thunder, but\n                                      // loses his double jump.\n    // Down Special - PSI Magnet\n    f32 x74_PSI_MAGNET_RELEASE_LAG; // Auto lag frames after initializing PSI\n                                    // Magnet if B is not being held. PSI\n                                    // Magnet is immediately released with no\n                                    // lag once these frames have passed.\n    f32 x78_PSI_MAGNET_UNK1; // Note: Reminiscent of Fox and Falco's Reflector\n                             // turn duration attribute? Unused.\n    f32 x7C_PSI_MAGNET_UNK2; // Note: Reminiscent of Fox and Falco's Reflector\n                             // Unk1 attribute? Unused.\n    f32 x80_PSI_MAGNET_UNK3; // Unused.\n    s32 x84_PSI_MAGNET_FRAMES_BEFORE_GRAVITY;\n    f32 x88_PSI_MAGNET_MOMENTUM_PRESERVATION;\n    f32 x8C_PSI_MAGNET_FALL_ACCEL;\n    f32 x90_PSI_MAGNET_UNK4; // Unused.\n    f32 x94_PSI_MAGNET_HEAL_MUL; // Multiplies projectile damage by this value\n                                 // and heals result\n    AbsorbDesc x98_PSI_MAGNET_ABSORPTION;\n    // Up/Down Smash - Yo-Yo\n    f32 xAC_YOYO_CHARGE_DURATION; // Amount of frames Yo-Yo can be charged\n    f32 xB0_YOYO_DAMAGE_MUL; // Charged Yo-Yo damage multiplier; 350 by\n                             // default, identical to the Smash Charge standard\n    f32 xB4_YOYO_REHIT_RATE; // Amount of frames needed for the Yo-Yo to hit\n                             // again after colliding with a hurtbox\n    // Forward Smash - Baseball Bat\n    ReflectDesc xB8_BASEBALL_BAT;\n} ftNessAttributes;\n#define MELEE_FT_CHARA_FTPEACH_TYPES_H\nstruct ftPeach_FighterVars {\n    /* fp+222C */ bool has_float;\n    /* fp+2230 */ f32 x4;\n    /* fp+2234 */ FtMotionId attacks4_motion_id;\n    /* fp+2238 */ HSD_GObj* unk_item_gobj;\n    /* fp+223C */ HSD_GObj* parasol_gobj;\n    /* fp+2240 */ bool specialairn_used;\n    /* fp+2244 */ HSD_GObj* toad_gobj;\n    /* fp+2248 */ HSD_GObj* veg_gobj;\n};\ntypedef struct ftPe_DatAttrs {\n    /* +0 */ float floatfallf_anim_start;\n    /* +4 */ float floatfallb_anim_start;\n    /* +8 */ float floatfall_anim_start_offset;\n    /* +C */ float xC;\n    /* +10 */ int speciallw_item_table_count;\n    /* +14 */ int x14;\n    /* +1C */ struct ftPe_ItemChance {\n        /* +0 */ int randi_max;\n        /* +4 */ ItemKind kind;\n    } speciallw_item_table[3];\n    /* +30 */ int x30;\n    /* +34 */ float x34;\n    /* +38 */ float x38;\n    /* +3C */ float x3C;\n    /* +40 */ float x40;\n    /* +44 */ float specials_vel_x;\n    /* +48 */ float specials_smash_vel_x;\n    /* +4C */ float specials_vel_y;\n    /* +50 */ float x50;\n    /* +54 */ float x54;\n    /* +58 */ float x58;\n    /* +5C */ float x5C;\n    /* +60 */ float specials_end_vel_x;\n    /* +64 */ float specials_end_vel_y;\n    /* +68 */ float x68;\n    /* +6C */ float x6C;\n    /* +70 */ float x70;\n    /* +74 */ float x74;\n    /* +78 */ float x78;\n    /* +7C */ float x7C;\n    /* +80 */ float x80;\n    /* +84 */ float x84;\n    /* +88 */ float x88;\n    /* +8C */ float x8C;\n    /* +90 */ int x90;\n    /* +94 */ float specialairn_vel_x_div;\n    /* +98 */ float x98;\n    /* +9C */ float specialairn_vel_y;\n    /* +A0 */ float xA0;\n    /* +A4 */ float xA4;\n    /* +A8 */ float xA8;\n    /* +AC */ AbsorbDesc xAC;\n} ftPe_DatAttrs;\nunion ftPe_MotionVars {\n    struct ftPe_FloatAttackVars {\n        /* fp+2340 */ bool x0;\n    } floatattack;\n    struct ftPe_SpecialSVars {\n        /* fp+2340 */ bool x0;\n    } specials;\n    struct ftPe_SpecialHiVars {\n        /* fp+2340 */ ItemKind kind;\n    } specialhi;\n    struct ftPe_SpecialNVars {\n        /* fp+2340 */ int facing_dir;\n    } specialn;\n};\n#define MELEE_FT_CHARA_FTPIKACHU_TYPES_H\nstruct ftPikachu_FighterVars {\n    char filler0[0x100];\n};\ntypedef struct _ftPikachuAttributes {\n    f32 x0;\n    f32 x4;\n    f32 x8;\n    f32 xC;\n    f32 x10;\n    u32 x14;\n    u32 x18;\n    f32 x1C;\n    f32 x20;\n    f32 x24;\n    f32 x28;\n    f32 x2C;\n    f32 x30;\n    f32 x34;\n    f32 x38;\n    f32 x3C;\n    f32 x40;\n    f32 x44;\n    f32 x48;\n    f32 x4C;\n    f32 x50;\n    f32 x54;\n    f32 x58;\n    s32 x5C;\n    s32 x60; // up b zip duration\n    f32 x64;\n    f32 x68; // up b angle offset 1\n    Vec3 x6C_scale;\n    f32 x78; // up b angle offset 2\n    Vec3 x7C_scale;\n    f32 x88;\n    f32 x8C; // up b minimum stick magnitude\n    f32 x90; // up b zip stick magnitude to velocity slope\n    f32 x94; // up b zip stick magnitude to velocity intercept\n    f32 x98; // second zip velocity decay\n    f32 x9C;\n    s32 xA0;\n    f32 xA4;\n    s32 xA8; // minimum stick angle difference between two up b zips\n    f32 xAC;\n    f32 xB0;\n    f32 xB4;\n    f32 xB8;\n    f32 xBC;\n    f32 xC0;\n    f32 xC4;\n    f32 xC8;\n    f32 xCC;\n    f32 xD0;\n    s32 xD4;\n    s32 xD8;\n    u32 xDC;\n    f32 height_attributes[6];\n} ftPikachuAttributes;\nunion ftPikachu_MotionVars {\n    /// @todo Proper state name.\n    struct ftPikachu_State2Vars {\n        s32 x0;\n    } unk2;\n    /// @todo Proper state name.\n    struct ftPikachu_State3Vars {\n        s32 x0;\n    } unk3;\n    /// @todo Proper state name.\n    struct ftPikachu_State4Vars {\n        uint x0;\n        s32 x4;\n        s32 x8;\n        int xC;\n        Vec2 x10;\n        s32 x18;\n        Vec2 x1C;\n        f32 x24;\n    } unk4;\n    /// @todo Proper state name.\n    struct ftPikachu_State5Vars {\n        u32 x0;\n        u32 x4;\n    } unk5;\n};\n#define MELEE_FT_CHARA_FTPOPO_TYPES_H\nstruct ftPopo_FighterVars {\n    /* 0x222C */ uint x222C;\n    /* 0x2230:0 */ u8 x2230_b0 : 1;\n    /* 0x2231 */ u8 filler_x2231[3];\n    /* 0x2234 */ u32 x2234;\n    /* 0x2238 */ u32 x2238;\n    /* 0x223C */ u32 x223C;\n    /* 0x2240 */ u32 x2240;\n    /* 0x2244 */ u32 x2244;\n    /* 0x2248 */ u32 x2248;\n    /* 0x224C */ u32 x224C;\n    /* 0x2250 */ f32 x2250;\n};\ntypedef struct _ftIceClimberAttributes {\n    f32 x0;\n    f32 x4;\n    f32 x8;\n    f32 xC;\n    f32 x10;\n    f32 x14;\n    f32 x18;\n    s32 x1C;\n    s32 x20;\n    s32 x24;\n    s32 x28;\n    s32 x2C;\n    u8 data_filler_1[0xC4 - 0x30];\n    f32 xC4;\n    f32 xC8;\n    u8 data_filler_2[0x90];\n} ftIceClimberAttributes;\n#define MELEE_FT_CHARA_FTPURIN_TYPES_H\nstruct ftPurin_FighterVars {\n    /* 0x222C */ u32 x222C;\n    /* 0x2230 */ u32 x2230;\n    /* 0x2234 */ u32 x2234;\n    /* 0x2238 */ u32 x2238;\n    /* 0x223C */ HSD_JObj* x223C;\n    /* 0x2240 */ u32 x2240;\n    /* 0x2244 */ void* x2244;\n    /* 0x2248 */ u32 x2248;\n};\ntypedef union ftPurin_MotionVars {\n    struct ftPurin_SpecialHiVars {\n        bool x0;\n    } specialhi;\n    struct ftPurin_SpecialNVars {\n        u8 fill[0x34];\n        f32 x34;\n    } specialn;\n} ftPurin_MotionVars;\ntypedef struct _ftPurinAttributes {\n    f32 x0;\n    f32 x4;\n    f32 x8;\n    f32 xC;\n    f32 x10;\n    s32 x14;\n    f32 x18;\n    s32 x1C;\n    s32 x20;\n    s32 x24;\n    s32 x28;\n    s32 x2C;\n    s32 x30;\n    s32 x34;\n    s32 x38;\n    f32 x3C;\n    f32 x40;\n    u8 data_filler_1[0x100 - 0x44];\n} ftPurinAttributes;\n#define MELEE_FT_CHARA_FTSAMUS_TYPES_H\nstruct ftSamus_FighterVars {\n    /* 0x222C */ Item_GObj* x222C;\n    /* 0x2230 */ s32 x2230;\n    /* 0x2234 */ u32 x2234;\n    /* 0x2238 */ u32 x2238;\n    /* 0x223C */ u32 x223C;\n    /* 0x2240 */ u8 x2240;\n    /* 0x2241 */ u8 x2241;\n    /* 0x2242 */ u8 x2242;\n    /* 0x2243 */ u8 x2243;\n    /* 0x2244 */ u32 x2244;\n    /* 0x2248 */ u32 x2248;\n};\ntypedef struct _ftSamusAttributes {\n    f32 x0;\n    f32 x4;\n    f32 x8;\n    f32 xC;\n    f32 x10;\n    f32 x14;\n    f32 x18;\n    f32 x1C;\n    s32 x20;\n    f32 x24;\n    f32 x28;\n    f32 x2C;\n    f32 x30;\n    f32 x34;\n    f32 x38;\n    f32 x3C;\n    f32 x40;\n    f32 x44;\n    f32 x48;\n    f32 x4C;\n    f32 x50;\n    f32 x54;\n    f32 x58;\n    f32 x5C;\n    f32 x60;\n    f32 x64;\n    f32 x68;\n    f32 x6C;\n    f32 x70;\n    Vec3 x74_vec;\n    f32 x80;\n    ftCollisionBox height_attributes;\n    u8 data_filler_4[0xD4 - 0x9C];\n} ftSs_DatAttrs;\n/// maybe Samus grapple?\nstruct UNK_SAMUS_S1 {\n    HSD_Joint* x0_joint;\n    HSD_AnimJoint** x4_anim_joints;\n    HSD_AnimJoint* x8_anim_joint;\n    HSD_MatAnimJoint* xC_matanim_joint;\n};\nunion ftSamus_MotionVars {\n    /// @todo Proper state name.\n    struct ftSamus_State2Vars {\n        s32 x0;\n    } unk2;\n    /// @todo Proper state name.\n    struct ftSamus_State3Vars {\n        s32 x0;\n        s32 x4;\n        f32 x8;\n    } unk3;\n    /// @todo Proper state name.\n    struct ftSamus_State5Vars {\n        s32 x0;\n    } unk5;\n    /// @todo Proper state name.\n    struct ftSamus_State6Vars {\n        s32 x0;\n    } unk6;\n};\n#define MELEE_FT_CHARA_FTSANDBAG_TYPES_H\nstruct ftSandbag_FighterVars {\n    char filler0[0x100];\n};\n#define MELEE_FT_CHARA_FTSEAK_TYPES_H\nstruct ftSeak_FighterVars {\n    /* 0x222C */ int x222C;\n    /* 0x2230 */ u32 x2230;\n    /* 0x2234 */ HSD_GObj* x2234;\n    /* 0x2238 */ Vec3 x2238[4];\n    /* 0x2268 */ Vec3 x2268[4];\n    /* 0x2298 */ Vec3 lstick_delta;\n};\n/// @sz{74}\ntypedef struct _ftSeakAttributes {\n    f32 x0;\n    f32 x4;\n    f32 x8;\n    f32 xC;\n    f32 x10;\n    f32 x14;\n    f32 x18;\n    f32 x1C;\n    f32 x20;\n    f32 x24;\n    f32 x28;\n    s32 x2C;\n    s32 x30;\n    s32 x34;\n    s32 x38;\n    s32 x3C;\n    s32 x40;\n    s32 x44;\n    s32 x48;\n    s32 x4C;\n    u8 data_filler_1[0x24];\n} ftSeakAttributes;\ntypedef struct itChainSegment {\n    f32 x00;\n    f32 x04;\n    f32 x08;\n    f32 x0C;\n    f32 x10;\n    f32 x14;\n    f32 x18;\n    f32 x1C;\n    f32 x20;\n    f32 x24;\n    f32 x28;\n    f32 x2C;\n    f32 x30;\n    f32 x34;\n    f32 x38;\n    f32 x3C;\n    f32 x40;\n    f32 x44;\n    f32 x48;\n    f32 x4C;\n    f32 x50;\n} itChainSegment;\nunion ftSeak_MotionVars {\n    struct ftSeak_SpecialNVars {\n        s32 x0;\n        s32 x4;\n        s32 x8;\n        s32 xC;\n        s32 x10;\n        s32 x14;\n        s32 x18;\n        s32 x1C;\n        s32 x20;\n        s32 x24;\n        s32 x28;\n        s32 x2C;\n    } specialn;\n    struct ftSeak_SpecialSVars {\n        s32 x0;\n        s32 x4;\n        s32 x8;\n        s32 xC;\n        f32 x10;\n        f32 x14;\n        f32 x18;\n        s32 x1C;\n        s32 x20;\n        s32 x24;\n        s32 x28;\n        s32 x2C;\n    } specials;\n    struct ftSeakSpecialHi {\n        s32 x0;\n        s32 x4;\n        s32 x8;\n        s32 xC;\n        s32 x10;\n        s32 x14;\n        s32 x18;\n        s32 x1C;\n        s32 x20;\n        s32 x24;\n        s32 x28;\n        s32 x2C;\n    } specialhi;\n};\n#define MELEE_FT_CHARA_FTYOSHI_TYPES_H\nstruct ftYoshi_FighterVars {\n    /* 0x222C */ u32 x222C;\n    /* 0x2230 */ u32 x2230;\n    /* 0x2234 */ u32 x2234;\n    /* 0x2238 */ u32 x2238;\n};\ntypedef struct _ftYoshiAttributes {\n    f32 x0;\n    f32 x4;\n    f32 x8;\n    f32 xC;\n    f32 x10;\n    f32 x14;\n    f32 x18;\n    f32 x1C;\n    f32 x20;\n    f32 x24;\n    s32 x28;\n    s32 x2C;\n    u8 data_filler1[0xEF];\n    f32 x120;\n    u8 data_filler2[0x14];\n} ftYoshiAttributes;\nstruct S_UNK_YOSHI2 {\n    s32 x0;\n    s32 x4;\n    s32 x8_end_index;\n    u8* xC_start_index;\n};\nstruct S_UNK_YOSHI1 {\n    s32 x0;\n    struct S_UNK_YOSHI2* unk_struct;\n};\nunion ftYoshi_MotionVars {\n    /// @todo Proper state name.\n    struct ftYoshi_State2Vars {\n        f32 x0;\n        M2C_UNK x4;\n        M2C_UNK x8;\n        bool xC;\n        M2C_UNK x10;\n        f32 x14;\n        f32 x18;\n    } unk2;\n};\n#define MELEE_FT_CHARA_FTZAKOBOY_TYPES_H\nstruct ftZakoBoy_FighterVars {\n    char filler0[0x100];\n};\ntypedef struct _ftZakoboyAttributes {\n    s32 x0;\n} ftZakoboyAttributes;\n#define MELEE_FT_CHARA_FTZELDA_TYPES_H\nstruct ftZelda_FighterVars {\n    /* 0x222C */ HSD_GObj* x222C;\n};\ntypedef struct ftZelda_DatAttrs {\n    f32 x0;\n    s32 x4; // Type confirmed\n    f32 x8;\n    f32 xC;\n    s32 x10; // Type confirmed\n    s32 x14; // Type confirmed\n    s32 x18; // Type confirmed\n    s32 x1C; // Type confirmed\n    f32 x20; // Type confirmed\n    f32 x24; // Type confirmed\n    s32 x28;\n    f32 x2C; // Type confirmed\n    s32 x30;\n    f32 x34; // Type confirmed\n    f32 x38; // Type confirmed\n    f32 x3C; // Type confirmed\n    f32 x40; // Type confirmed\n    f32 x44; // Type confirmed\n    s32 x48; // Type confirmed\n    f32 x4C; // Type confirmed\n    f32 x50; // Type confirmed\n    f32 x54;\n    f32 x58;\n    f32 x5C;\n    s32 x60; // Type confirmed\n    f32 x64; // Type confirmed\n    f32 x68; // Type confirmed\n    f32 x6C; // Type confirmed\n    f32 x70; // Type confirmed\n    f32 x74; // Type confirmed\n    f32 x78; // Type confirmed\n    f32 x7C; // Type confirmed\n    f32 x80; // Type confirmed\n    ReflectDesc x84;\n} ftZelda_DatAttrs;\nunion ftZelda_MotionVars {\n    struct ftZelda_SpecialHiVars {\n        int x0;\n        Vec2 x4;\n        int xC;\n        Vec2 x10;\n        float x18;\n    } specialhi;\n    struct ftZelda_SpecialNVars {\n        int x0;\n    } specialn;\n    struct ftZelda_SpecialSVars {\n        int x0;\n        int x4;\n        int x8;\n        int xC;\n    } specials;\n};\n#define _stage_h_\n#define MELEE_GR_TYPES_H\n#define MELEE_SC_SCENE_H\n#define MELEE_SC_FORWARD_H\ntypedef struct StaticModelDesc StaticModelDesc;\ntypedef struct DynamicModelDesc DynamicModelDesc;\ntypedef struct SceneDesc SceneDesc;\n/// Model with a single animation or no animation\nstruct StaticModelDesc {\n    HSD_Joint* joint;\n    HSD_AnimJoint* animjoint;\n    HSD_MatAnimJoint* matanim_joint;\n    HSD_ShapeAnimJoint* shapeanim_joint;\n};\n/// Model with multiple animations\nstruct DynamicModelDesc {\n    HSD_Joint* joint;\n    HSD_AnimJoint** anims;\n    HSD_MatAnimJoint** matanims;\n    HSD_ShapeAnimJoint** shapeanims;\n};\n// The basis of a rendered scene, like a stage, menu, or HUD overlay\nstruct SceneDesc {\n    DynamicModelDesc** models;\n    HSD_CObjDesc** cameras;\n    HSD_LightDesc** lights;\n    HSD_FogDesc** fogs;\n};\n#define SYSDOLPHIN_BASELIB_GOBJPROC_H\nstruct HSD_GObjProc {\n    /* 0x00 */ HSD_GObjProc* child;\n    /* 0x04 */ HSD_GObjProc* next;\n    /* 0x08 */ HSD_GObjProc* prev;\n    /* 0x0C */ u8 s_link;\n    /* 0x0D */ u8 flags_1 : 1;\n    /* 0x0D */ u8 flags_2 : 1;\n    /* 0x0D */ u8 flags_3 : 2;\n    /* 0x10 */ HSD_GObj* gobj; // owner\n    /* 0x14 */ HSD_GObjEvent on_invoke;\n};\nHSD_GObjProc* HSD_GObjProc_8038FD54(HSD_GObj*, HSD_GObjEvent, u8);\nvoid HSD_GObjProc_8038FED4(HSD_GObj* gobj);\nvoid HSD_GObjProc_8038FAA8(HSD_GObjProc*);\nvoid HSD_GObjProc_8038FC18(HSD_GObjProc* gproc);\nvoid HSD_GObjProc_8038FCE4(HSD_GObjProc* gproc);\nvoid HSD_GObjProc_8038FE24(HSD_GObjProc* gproc);\n/// @todo Finish values, use @c PascalCase\ntypedef enum InternalStageId {\n    InternalStageID_Unk00,\n    InternalStageID_Unk01,\n    /// Princess Peach's Castle\n    CASTLE,\n    /// Rainbow Cruise\n    RCRUISE,\n    /// Kongo Jungle\n    KONGO,\n    /// Jungle Japes\n    GARDEN,\n    /// Great Bay\n    GREATBAY,\n    /// Hyrule Temple\n    SHRINE,\n    /// Brinstar\n    ZEBES,\n    /// Brinstar Depths\n    KRAID,\n    /// Yoshi's Story\n    STORY,\n    /// Yoshi's Island\n    YORSTER,\n    /// Fountain of Dreams\n    IZUMI,\n    /// Green Greens\n    GREENS,\n    /// Corneria\n    CORNERIA,\n    /// Venom\n    VENOM,\n    /// Pokemon Stadium\n    PSTADIUM,\n    /// Poke Floats\n    PURA,\n    /// Mute City\n    MUTECITY,\n    /// Big Blue\n    BIGBLUE,\n    /// Onett\n    ONETT,\n    /// Fourside\n    FOURSIDE,\n    /// Icicle Mountain\n    ICEMTN,\n    InternalStageID_Unk23,\n    /// Mushroom Kingdom\n    INISHIE1,\n    /// Mushroom Kingdom II\n    INISHIE2,\n    InternalStageID_Unk26,\n    /// Flat Zone\n    FLATZONE,\n    /// Dream Land\n    OLDPUPUPU,\n    /// Yoshi's Island (64)\n    OLDYOSHI,\n    /// Kongo Jungle (64)\n    OLDKONGO,\n} InternalStageId;\n/// @remarks This struct is based in part on the datasheet however the info\n///          there is likely incorrect as this doesn't quite match @c\n///          grGroundParam.\ntypedef struct StageCameraInfo {\n    f32 cam_bounds_left; // 0x0\n    f32 cam_bounds_right; // 0x4\n    f32 cam_bounds_top; // 0x8\n    f32 cam_bounds_bottom; // 0xC\n    f32 cam_x_offset; // 0x10\n    f32 cam_y_offset; // 0x14\n    f32 cam_vertical_tilt; // 0x18\n    f32 cam_pan_degrees; // 0x1C\n    f32 x20; // 0x20\n    f32 x24; // 0x24\n    f32 cam_track_ratio; // 0x28\n    f32 cam_fixed_zoom; // 0x2C\n    f32 cam_track_smooth; // 0x30\n    f32 cam_zoom_rate; // 0x34\n    f32 cam_max_depth; // 0x38\n    f32 x3C; // 0x3C\n    f32 pausecam_zpos_min; // 0x40\n    f32 pausecam_zpos_init; // 0x44\n    f32 pausecam_zpos_max; // 0x48\n    f32 cam_angle_up; // 0x4C\n    f32 cam_angle_down; // 0x50\n    f32 cam_angle_left; // 0x54\n    f32 cam_angle_right; // 0x58\n    Vec3 fixed_cam_pos; // 0x5C - 0x64\n    f32 fixed_cam_fov; // 0x68\n    f32 fixed_cam_vert_angle; // 0x6C\n    f32 fixed_cam_horz_angle; // 0x70\n} StageCameraInfo;\ntypedef struct StageBlastZone {\n    f32 left; // 0x74\n    f32 right; // 0x78\n    f32 top; // 0x7C\n    f32 bottom; // 0x80\n} StageBlastZone;\ntypedef struct StageInfo {\n    StageCameraInfo cam_info; // 0x00 - 0x70\n    StageBlastZone blast_zone; // 0x74 - 0x80\n    u32 x84; // 0x84\n    InternalStageId internal_stage_id; // 0x88\n    struct {\n        u8 b0 : 1;\n        u8 b1 : 1;\n        u8 b2 : 1;\n        u8 b3 : 1;\n        u8 b4 : 1;\n        u8 b5 : 1;\n        u8 b6 : 1;\n        u8 b7 : 1;\n    } unk8C;\n    s32 x90;\n    s32 x94;\n    s32 x98;\n    s32 x9C;\n    u8 xA0[4];\n    u8 xA4_pad[0x12C - 0xA4];\n    // TODO: determine actual type of x12C\n    // Maybe a GObj with hsd_obj = TObj?\n    struct {\n        u8 x0_pad[0x28];\n        struct {\n            u8 x0_pad[0x18];\n            GXColor color;\n        }* ptr;\n    }* x12C;\n    Vec3 x130, x13C, x148, x154, x160, x16C;\n    bool (*x178)(int);\n    void* x17C;\n    HSD_GObj* x180[4];\n    u8 x190_pad[0x280 - 0x190];\n    HSD_JObj* x280[261];\n    void* x694[4];\n    void* x6A4;\n    struct {\n        s32 unk0;\n        Article* unk4;\n    }** x6A8;\n    void* x6AC;\n    struct _UnkStage6B0* x6B0;\n    unk_t** x6B4;\n    void* x6B8;\n    void* x6BC;\n    void* x6C0;\n    void* x6C4;\n    void* x6C8;\n    DynamicModelDesc* x6CC;\n    s16 x6D0;\n    s16 x6D2;\n    s16 x6D4;\n    s16 x6D6;\n    s32 x6D8;\n    s16 x6DC;\n    s16 x6DE;\n    f32 x6E0;\n    s32 x6E4[2];\n    u8 x6EC_pad[0x708 - 0x6EC];\n    s16 x708;\n    f32 x70C;\n    f32 x710;\n    s32 x714;\n    f32 x718;\n    f32 x71C;\n    s32 x720;\n    f32 x724;\n    f32 x728;\n    s32 x72C;\n    Vec3 x730;\n    f32 x73C;\n    s32 x740;\n    u8 x744_pad[0x748 - 0x744];\n} StageInfo;\ntypedef struct StageCallbacks {\n    void (*callback0)(HSD_GObj*);\n    bool (*callback1)(HSD_GObj*);\n    void (*callback2)(HSD_GObj*);\n    void (*callback3)(HSD_GObj*);\n    u32 flags;\n} StageCallbacks;\ntypedef struct StageData {\n    u32 flags1;\n    StageCallbacks* callbacks;\n    char* data1;\n    void (*callback0)(void);\n    void (*callback1)(int);\n    void (*callback2)(void);\n    void (*callback3)(void);\n    bool (*callback4)(void);\n    bool (*callback5)(enum_t);\n    bool (*callback6)(Vec3*, int, HSD_JObj*);\n    u32 flags2;\n    S16Vec3* x2C;\n    size_t x30; // size of x2C array\n} StageData;\ntypedef struct StructPairWithStageID {\n    s32 stage_id;\n    s32 list_idx;\n} StructPairWithStageID;\nstruct GroundVars_unk {\n    int xC4;\n    int xC8;\n    int xCC;\n    int xD0;\n    int xD4;\n    int xD8;\n    float xDC;\n    u8 xE0_pad[0x218 - 0xE0];\n};\nstruct GroundVars_izumi {\n    HSD_TObj* xC4;\n    HSD_GObj* xC8;\n    HSD_GObj* xCC;\n    HSD_JObj* xD0;\n    HSD_JObj* xD4;\n    int xD8;\n    float xDC;\n    u8 xE0_pad[0x218 - 0xE0];\n};\nstruct GroundVars_izumi2 {\n    HSD_JObj* xC4;\n    HSD_JObj* xC8;\n    int xCC;\n    int xD0;\n    int xD4;\n    int xD8;\n    float xDC;\n    u8 xE0_pad[0x218 - 0xE0];\n};\nstruct GroundVars_izumi3 {\n    short xC4;\n    short xC6;\n    short xC8;\n    short xCA;\n    HSD_JObj* xCC;\n    float xD0;\n    float xD4;\n    float xD8;\n    float xDC;\n    u8 xE0_pad[0x218 - 0xE0];\n};\ntypedef struct Ground {\n    int x0; // 0x0\n    HSD_GObj* gobj; // 0x4\n    HSD_GObjEvent x8_callback;\n    HSD_GObjEvent xC_callback;\n    struct {\n        u8 b0 : 1;\n        u8 b1 : 1;\n        u8 b2 : 1;\n        u8 b3 : 1;\n        u8 b4 : 1;\n        u8 b5 : 1;\n        u8 b6 : 1;\n        u8 b7 : 1;\n    } x10_flags;\n    struct {\n        u8 b012 : 3;\n        u8 b3 : 1;\n        u8 b4 : 1;\n        u8 b5 : 1;\n        u8 b6 : 1;\n        u8 b7 : 1;\n    } x11_flags;\n    InternalStageId map_id; // 0x14\n    HSD_GObj* x18; // 0x18\n    HSD_GObjEvent x1C_callback;\n    int x20[8];\n    u8 x40_pad[0xC4 - 0x40];\n    union GroundVars { // how big should this be?\n        u8 _[0x218 - 0xC4];\n        struct GroundVars_unk unk;\n        struct GroundVars_izumi izumi;\n        struct GroundVars_izumi2 izumi2;\n        struct GroundVars_izumi3 izumi3;\n    } gv;\n} Ground;\nf32 Stage_GetCamBoundsLeftOffset(void);\nf32 Stage_GetCamBoundsRightOffset(void);\nf32 Stage_GetCamBoundsTopOffset(void);\nf32 Stage_GetCamBoundsBottomOffset(void);\nf32 Stage_GetCamPanAngleRadians(void);\nf32 Stage_GetCamMaxDepth(void);\nf32 Stage_GetCamZoomRate(void);\nf32 Stage_GetCamInfoX20(void);\nf32 Stage_GetCamInfoX24(void);\nf32 Stage_GetCamFixedZoom(void);\nf32 Stage_GetCamTrackRatio(void);\nf32 Stage_GetCamTrackSmooth(void);\nf32 Stage_GetBlastZoneRightOffset(void);\nf32 Stage_GetBlastZoneLeftOffset(void);\nf32 Stage_GetBlastZoneTopOffset(void);\nf32 Stage_GetBlastZoneBottomOffset(void);\nf32 Stage_CalcUnkCamY(void);\nf32 Stage_CalcUnkCamYBounds(void);\nvoid Stage_UnkSetVec3TCam_Offset(Vec3* vec3);\nf32 Stage_GetPauseCamZPosMin(void);\nf32 Stage_GetPauseCamZPosInit(void);\nf32 Stage_GetPauseCamZPosMax(void);\nf32 Stage_GetCamAngleRadiansUp(void);\nf32 Stage_GetCamAngleRadiansDown(void);\nf32 Stage_GetCamAngleRadiansLeft(void);\nf32 Stage_GetCamAngleRadiansRight(void);\nvoid Stage_80224CAC(Vec3* arg0);\nvoid Stage_SetVecToFixedCamPos(Vec3* arg0);\nf32 Stage_GetCamFixedFov(void);\nbool Stage_80224DC8(s32 arg);\nvoid Stage_80224E38(Vec3* arg0, s32 arg1);\nvoid Stage_80224E64(enum_t arg0, Vec3* arg_vec);\ns32 Stage_80224FDC(Vec3* arg0);\ns32 Stage_80225074(s32 arg0);\nenum_t Stage_80225194(void);\ns32 Stage_8022519C(InternalStageId idx);\nvoid Stage_802251B4(InternalStageId idx, s32 arg1);\nvoid Stage_802251E8(InternalStageId idx, s32* _);\nvoid Stage_8022524C(void);\nvoid Stage_80225298(void);\nvoid Stage_802252E4(InternalStageId idx, HSD_GObj* _);\nvoid Stage_8022532C(InternalStageId idx, s32 arg1);\n#define MELEE_LB_LBCOLLISION_H\nstruct HitResult {\n    HSD_JObj* bone;\n    /// Follows attach bone position if toggled OFF\n    u8 skip_update_pos : 1;\n    Vec3 pos;\n    Vec3 offset;\n    f32 size;\n};\nstruct HitVictim {\n    M2C_UNK victim;\n    M2C_UNK x4;\n};\nstruct HitCapsule {\n    /// @at{0} @sz{4}\n    HitCapsuleState state;\n    int x4;\n    int x8;\n    float damage;\n    /// @at{10} @sz{C}\n    /// The offset of point @e b of the capsule.\n    Vec3 b_offset;\n    /// @at{1C} @sz{4}\n    /// The scale of the capsule.\n    f32 scl;\n    int kb_angle;\n    int x24;\n    int x28;\n    int x2C;\n    /// @at{30} @sz{4}\n    HitElement element;\n    char unk_34[0x38 - 0x34];\n    /// @at{38} @sz{4}\n    int sfx_severity;\n    /// @at{3C} @sz{4}\n    enum_t sfx_kind;\n    u8 x40_b0 : 1;\n    u8 x40_b1 : 1;\n    u8 x40_b2 : 1;\n    u8 x40_b3 : 1;\n    u8 x40_b4 : 1;\n    u8 x40_b5 : 1;\n    u8 x40_b6 : 1;\n    u8 x40_b7 : 1;\n    char unk_41[0x42 - 0x41];\n    u8 x42_b0 : 1;\n    u8 x42_b1 : 1;\n    u8 x42_b2 : 1;\n    u8 x42_b3 : 1;\n    u8 x42_b4 : 1;\n    u8 x42_b5 : 1;\n    u8 x42_b6 : 1;\n    u8 x42_b7 : 1;\n    union {\n        u8 x43;\n        struct {\n            u8 x43_b0 : 1;\n            u8 x43_b1 : 1;\n            u8 x43_b2 : 1;\n            u8 x43_b3 : 1;\n            u8 x43_b4 : 1;\n            u8 x43_b5 : 1;\n            u8 x43_b6 : 1;\n            u8 x43_b7 : 1;\n        };\n    };\n    u8 x44;\n    u8 x45;\n    char unk_46[0x4C - 0x46];\n    Vec3 x4C;\n    Vec3 x58;\n    Vec3 x64;\n    int x70;\n    /// @at{74} @sz{60}\n    HitVictim victims_1[12];\n    /// @at{D4} @sz{60}\n    HitVictim victims_2[12];\n    // @at{134}\n    union {\n        HSD_GObj* owner;\n        u8 hit_grabbed_victim_only : 1;\n    };\n};\nstruct HurtCapsule {\n    /// @at{0} @sz{4}\n    Tangibility tangibility;\n    /// @at{4} @sz{C}\n    /// The offset of point @e a of the capsule.\n    Vec3 a_offset;\n    /// @at{10} @sz{C}\n    /// The offset of point @e b of the capsule.\n    Vec3 b_offset;\n    /// @at{1C} @sz{4}\n    /// The scale of the capsule.\n    f32 scl;\n    HSD_JObj* bone; // 0x20\n    u8 skip_update_pos : 1;\n    u8 x24_b1 : 1; // 0x24 0x40\n    u8 x24_b2 : 1; // 0x24 0x20\n    u8 x24_b3 : 1; // 0x24 0x10\n    u8 x24_b4 : 1; // 0x24 0x08\n    u8 x24_b5 : 1; // 0x24 0x04\n    u8 x24_b6 : 1; // 0x24 0x02\n    u8 x24_b7 : 1; // 0x24 0x01\n    /// @at{28} @sz{C}\n    /// The position of point @e a of the capsule.\n    Vec3 a_pos;\n    /// @at{28} @sz{C}\n    /// The position of point @e b of the capsule.\n    Vec3 b_pos;\n    int bone_idx; // 0x40\n    enum_t kind; // 0x44. 0 = low, 1 = mid, 2 = high\n    bool is_grabbable; // 0x48\n};\nvoid lbColl_JObjSetupMatrix(HSD_JObj*);\nbool lbColl_80008248(HitCapsule*, HurtCapsule*, Mtx, f32, f32, f32);\nvoid lbColl_80008440(HitCapsule*);\nvoid lbColl_80008434(HitCapsule*);\nbool lbColl_8000ACFC(M2C_UNK, HitCapsule*);\nbool lbColl_80008688(HitCapsule*, enum_t, Fighter*);\nvoid lbColl_CopyHitCapsule(HitCapsule* src, HitCapsule* dst);\nM2C_UNK lbColl_80008820();\nint lbColl_80005BB0(HitCapsule*, int);\nbool lbColl_80007ECC(HitCapsule*, HurtCapsule*, Mtx, f32 hit_scl_y,\n                     f32 hurt_scl_y, f32 hurt_pos_z);\nbool lbColl_8000805C(HitCapsule*, HurtCapsule*, M2C_UNK, s32, f32, f32, f32);\nbool lbColl_80007BCC(HitCapsule*, HitResult* shield_hit, unk_t, s32, f32, f32,\n                     f32);\nbool lbColl_80007AFC(HitCapsule*, HitCapsule*, f32, f32);\nvoid lbColl_80007DD8(HitCapsule*, HitResult*, Mtx, unk_t, unk_t, f32);\nvoid lbColl_80008D30(HitCapsule*, int);\nvoid lbColl_80008428(HitCapsule*);\nbool lbColl_80005C44(Vec3*, Vec3*, Vec3*, Vec3*, f32, f32);\nf32 lbColl_80005EBC(Vec3*, Vec3*, Vec3*, f32*);\nf32 lbColl_80005FC0(Vec3*, Vec3*, Vec3*, f32*);\nbool lbColl_80006094(Vec3*, Vec3*, Vec3*, Vec3*, Vec3*, Vec3*, f32, f32);\nbool lbColl_800067F8(Vec3*, Vec3*, Vec3*, Vec3*, Vec3*, Vec3*, f32, f32, f32);\nbool lbColl_80006E58(Vec3*, Vec3*, Vec3*, Vec3*, Vec3*, Vec3*, Mtx, Vec3*, f32,\n                     f32 scl, f32);\n/// @param[out] angle\nvoid lbColl_800077A0(Vec3*, Mtx, Vec3*, Vec3*, Vec3*, Vec3*, f32* angle, f32,\n                     f32);\nM2C_UNK lbColl_80007B78(Mtx, Mtx, f32, f32);\nvoid lbColl_800083C4(HurtCapsule*);\nM2C_UNK lbColl_800089B8();\nM2C_UNK lbColl_80008A5C();\nM2C_UNK lbColl_80008DA4();\nM2C_UNK lbColl_80008FC8();\nvoid lbColl_800096B4(MtxPtr, M2C_UNK, M2C_UNK, M2C_UNK, M2C_UNK, f32);\nM2C_UNK lbColl_80009DD4();\nM2C_UNK lbColl_80009F54();\nM2C_UNK lbColl_8000A044();\nM2C_UNK lbColl_8000A10C();\nM2C_UNK lbColl_8000A1A8();\nvoid lbColl_8000A244(HurtCapsule*, u32, Mtx, f32);\nM2C_UNK lbColl_8000A460();\nM2C_UNK lbColl_8000A584();\nM2C_UNK lbColl_8000A78C();\nbool lbColl_8000A95C(HitResult*, unk_t, Mtx*, f32 pos_z);\nM2C_UNK lbColl_8000AB2C();\nstatic inline bool approximatelyZero(f32 x)\n{\n    bool result;\n    if ((x < 0.00001f) && (x > -0.00001f)) {\n        result = 1;\n    } else {\n        result = 0;\n    }\n    return result;\n}\nstatic inline bool testPlusX(Vec3* a, Vec3* b, Vec3* c, f32 offset)\n{\n    f32 x = a->x + offset;\n    if (x < b->x && x < c->x) {\n        return 0;\n    }\n    return 1;\n}\nstatic inline bool testPlus(float a, float b, float c, float offset)\n{\n    float x = a + offset;\n    if (x < b && x < c) {\n        return 0;\n    }\n    return 1;\n}\nstatic inline bool testMinusX(Vec3* a, Vec3* b, Vec3* c, f32 offset)\n{\n    f32 x = a->x - offset;\n    if (x > b->x && x > c->x) {\n        return 0;\n    }\n    return 1;\n}\n#define _lbrefract_h_\n#define __STRING_H__\nvoid* memset(void* ptr, int value, size_t num);\nint __StringRead(void*, int, int);\nchar* strchr(const char*, int);\nint strncmp(const char*, const char*, unsigned long);\nint strcmp(const char*, const char*);\nchar* strncpy(char* , const char* ,\n              unsigned long);\nchar* strcpy(char* dst, const char* src);\nsize_t strlen(const char* s);\n#define _cobj_h_\n#define SYSDOLPHIN_BASELIB_WOBJ_H\nstruct HSD_WObj {\n    HSD_Obj parent;\n    u32 flags;\n    Vec3 pos;\n    HSD_AObj* aobj;\n    HSD_RObj* robj;\n};\nstruct HSD_WObjDesc {\n    char* class_name;\n    Vec3 pos;\n    HSD_RObjDesc* robjdesc;\n};\nstruct HSD_WObjInfo {\n    HSD_ObjInfo parent;\n    int (*load)(HSD_WObj* wobj, HSD_WObjDesc* desc);\n};\nstruct HSD_WObjAnim {\n    HSD_AObjDesc* aobjdesc;\n    HSD_RObjAnimJoint* robjanim;\n};\nextern HSD_WObjInfo hsdWObj;\n#define HSD_WOBJ_INFO(i) ((HSD_WObjInfo*) (i))\n#define HSD_WOBJ_METHOD(o) HSD_WOBJ_INFO(HSD_OBJECT_METHOD(o))\nstatic inline void HSD_WObjUnref(HSD_WObj* wobj)\n{\n    if (wobj == ((any_t) 0)) {\n        return;\n    }\n    if (ref_DEC(wobj) != 0) {\n        if (wobj != ((any_t) 0)) {\n            (wobj->parent.parent.class_info)->release((HSD_Class*) wobj);\n            (wobj->parent.parent.class_info)->destroy((HSD_Class*) wobj);\n        }\n    }\n}\nvoid HSD_WObjRemoveAnim(HSD_WObj* wobj);\nvoid HSD_WObjReqAnim(HSD_WObj* wobj, f32 frame);\nvoid HSD_WObjAddAnim(HSD_WObj* wobj, HSD_WObjAnim* anim);\nvoid HSD_WObjInterpretAnim(HSD_WObj* wobj);\nvoid HSD_WObjInit(HSD_WObj* wobj, HSD_WObjDesc* desc);\nHSD_WObj* HSD_WObjLoadDesc(HSD_WObjDesc* desc);\nvoid WObjSetupPosition(HSD_WObj* wobj);\nvoid HSD_WObjSetPosition(HSD_WObj*, Vec3*);\nvoid HSD_WObjSetPositionX(HSD_WObj*, f32);\nvoid HSD_WObjSetPositionY(HSD_WObj*, f32);\nvoid HSD_WObjSetPositionZ(HSD_WObj*, f32);\nvoid HSD_WObjGetPosition(HSD_WObj*, Vec3*);\nHSD_WObj* HSD_WObjAlloc(void);\nvoid HSD_WObjSetDefaultClass(HSD_ClassInfo* info);\n#define PROJ_PERSPECTIVE 1\n#define PROJ_FRUSTUM 2\n#define PROJ_ORTHO 3\nstruct HSD_CObj {\n    HSD_Obj parent;\n    u32 flags; // 0x08\n    struct Viewport {\n        f32 left; // 0x0C\n        f32 right; // 0x10\n        f32 top; // 0x14\n        f32 bottom; // 0x18\n    } viewport;\n    struct Scissor {\n        u16 left; // 0x1C\n        u16 right; // 0x1E\n        u16 top; // 0x20\n        u16 bottom; // 0x22\n    } scissor;\n    HSD_WObj* eyepos; // 0x24\n    HSD_WObj* interest; // 0x28\n    union {\n        f32 roll; // 0x2C\n        Vec3 up; // 0x2C - 0x34\n    } u;\n    f32 near; // 0x38\n    f32 far; // 0x3C\n    union {\n        struct {\n            f32 fov;\n            f32 aspect;\n        } perspective;\n        struct {\n            f32 top;\n            f32 bottom;\n            f32 left;\n            f32 right;\n        } frustum;\n        struct {\n            f32 top;\n            f32 bottom;\n            f32 left;\n            f32 right;\n        } ortho;\n    } projection_param;\n    u8 projection_type; // 0x50\n    Mtx view_mtx; // 0x54\n    HSD_AObj* aobj; // 0x84\n    Mtx* proj_mtx; // 0x88\n};\nstruct HSD_CObjDesc {\n    char* class_name; // 0x00\n    u16 flags; // 0x04\n    u16 projection_type; // 0x06\n    struct {\n        u16 left; // 0x08\n        u16 right; // 0x0C\n        u16 top; // 0x10\n        u16 bottom; // 0x14\n    } viewport;\n    struct {\n        u16 left; // 0x10\n        u16 right; // 0x12\n        u16 top; // 0x14\n        u16 bottom; // 0x16\n    } scissor;\n    HSD_WObjDesc* eye_desc; // 0x18\n    HSD_WObjDesc* interest_desc; // 0x1C\n    f32 roll; // 0x20\n    Vec3* vector; // 0x24\n    f32 near; // 0x28\n    f32 far; // 0x2C\n    union {\n        struct {\n            f32 fov;\n            f32 aspect;\n        } perspective;\n        /*\n                struct {\n                    f32 top;\n                    f32 bottom;\n                    f32 left;\n                    f32 right;\n                } frustum;\n\n                struct {\n                    f32 top;\n                    f32 bottom;\n                    f32 left;\n                    f32 right;\n                } ortho;\n        */\n    } projection_param;\n};\nstruct HSD_CObjInfo {\n    HSD_ObjInfo parent;\n    int (*load)(HSD_CObj* cobj, HSD_CObjDesc* desc);\n};\nstruct HSD_CameraAnim {\n    HSD_AObjDesc* aobjdesc;\n    HSD_WObjAnim* eye_anim;\n    HSD_WObjAnim* interest_anim;\n};\ntypedef struct _cobj_Unk1 cobj_Unk1;\nvoid HSD_CObjEraseScreen(HSD_CObj* cobj, s32 enable_color, s32 enable_alpha,\n                         s32 enable_depth);\nvoid HSD_CObjRemoveAnim(HSD_CObj* cobj);\nHSD_WObj* HSD_CObjGetEyePositionWObj(HSD_CObj* cobj);\nHSD_WObj* HSD_CObjGetInterestWObj(HSD_CObj* cobj);\nvoid HSD_CObjSetInterest(HSD_CObj* cobj, Vec3*);\nvoid HSD_CObjSetEyePosition(HSD_CObj* cobj, Vec3*);\nbool HSD_CObjSetCurrent(HSD_CObj*);\nvoid HSD_CObjEndCurrent(void);\nvoid HSD_CObjSetViewportfx4(HSD_CObj*, f32, f32, f32, f32);\nvoid HSD_CObjGetEyePosition(HSD_CObj* cobj, Vec3* cam_pos);\nint HSD_CObjGetEyeVector(HSD_CObj* cobj, Vec3* eye);\nvoid HSD_CObjGetUpVector(HSD_CObj* cobj, Vec3* up);\nvoid HSD_CObjGetInterest(HSD_CObj* cobj, Vec3* interest);\nHSD_CObj* HSD_CObjAlloc(void);\nvoid HSD_CObjRemoveAnimByFlags(HSD_CObj* cobj, u32 flags);\nvoid HSD_CObjAddAnim(HSD_CObj* cobj, HSD_CameraAnim* canim);\nvoid HSD_CObjAnim(HSD_CObj* cobj);\nvoid HSD_CObjReqAnim(HSD_CObj* cobj, f32 startframe);\nbool makeProjectionMtx(HSD_CObj* cobj, Mtx mtx);\nbool setupNormalCamera(HSD_CObj* cobj);\nbool setupTopHalfCamera(HSD_CObj* cobj);\nbool setupBottomHalfCamera(HSD_CObj* cobj);\nvoid HSD_CObjSetupViewingMtx(HSD_CObj* cobj);\nf32 HSD_CObjGetEyeDistance(HSD_CObj* cobj);\nvoid HSD_CObjSetUpVector();\nvoid HSD_CObjGetLeftVector();\nvoid HSD_CObjSetMtxDirty(HSD_CObj* cobj);\nbool HSD_CObjMtxIsDirty(HSD_CObj*);\nvoid HSD_CObjGetViewingMtx(HSD_CObj* cobj, Mtx mtx);\nMtxPtr HSD_CObjGetInvViewingMtxPtrDirect(HSD_CObj* cobj);\nMtxPtr HSD_CObjGetViewingMtxPtr(HSD_CObj* cobj);\nMtxPtr HSD_CObjGetInvViewingMtxPtr(HSD_CObj* cobj);\nvoid HSD_CObjSetRoll(HSD_CObj* cobj, f32);\nf32 HSD_CObjGetFov(HSD_CObj* cobj);\nvoid HSD_CObjSetFov(HSD_CObj*, f32);\nf32 HSD_CObjGetAspect(HSD_CObj* cobj);\nvoid HSD_CObjSetAspect(HSD_CObj* cobj, f32 aspect);\nf32 HSD_CObjGetTop(HSD_CObj* cobj);\nvoid HSD_CObjSetTop(HSD_CObj* cobj, f32 top);\nf32 HSD_CObjGetBottom(HSD_CObj* cobj);\nvoid HSD_CObjSetBottom(HSD_CObj* cobj, f32 bottom);\nf32 HSD_CObjGetLeft(HSD_CObj* cobj);\nvoid HSD_CObjSetLeft(HSD_CObj* cobj, f32 left);\nf32 HSD_CObjGetRight(HSD_CObj* cobj);\nvoid HSD_CObjSetRight(HSD_CObj* cobj, f32 right);\nf32 HSD_CObjGetNear(HSD_CObj*);\nvoid HSD_CObjSetNear(HSD_CObj* cobj, f32 near);\nf32 HSD_CObjGetFar(HSD_CObj*);\nvoid HSD_CObjSetFar(HSD_CObj* cobj, f32 far);\nvoid HSD_CObjGetScissor(HSD_CObj* cobj, struct Scissor*);\nvoid HSD_CObjSetScissor(HSD_CObj* cobj, struct Scissor*);\nvoid HSD_CObjSetScissorx4(HSD_CObj*, u16 left, u16 right, u16 top, u16 bottom);\nvoid HSD_CObjGetViewportf(HSD_CObj* cobj, struct Viewport*);\nvoid HSD_CObjSetViewport(HSD_CObj* cobj, s16* viewport);\nvoid HSD_CObjSetViewportf(HSD_CObj* cobj, struct Viewport*);\nu32 HSD_CObjGetProjectionType(HSD_CObj*);\nvoid HSD_CObjSetProjectionType(HSD_CObj*, u32);\nvoid HSD_CObjSetPerspective(HSD_CObj* cobj, f32 fov, f32 aspect);\nvoid HSD_CObjSetFrustum(HSD_CObj*, f32 top, f32 bottom, f32 left, f32 right);\nvoid HSD_CObjSetOrtho(HSD_CObj*, f32 top, f32 bottom, f32 left, f32 right);\nvoid HSD_CObjGetPerspective(HSD_CObj* cobj, f32* top, f32* bottom);\nvoid HSD_CObjGetOrtho(HSD_CObj*, f32* top, f32* bottom, f32* left, f32* right);\nu32 HSD_CObjGetFlags(HSD_CObj* cobj);\nvoid HSD_CObjSetFlags(HSD_CObj*, u32);\nvoid HSD_CObjClearFlags(HSD_CObj*, u32);\nHSD_CObj* HSD_CObjGetCurrent(void);\nvoid HSD_CObjInit(HSD_CObj* cobj, HSD_CObjDesc* desc);\nHSD_CObj* HSD_CObjLoadDesc(HSD_CObjDesc* desc);\n#define _memory_h_\nvoid HSD_Free(any_t ptr);\nvoid* HSD_MemAlloc(ssize_t size);\nvoid lbRefract_800222A4(void);\nvoid lbRefract_8002247C(HSD_CObj*);\nvoid lbRefract_80022560(void);\nvoid lbRefract_800225D4(void);\ns32 lbRefract_PObjLoad(HSD_PObj* pobj, HSD_PObjDesc* desc);\nvoid lbRefract_80022998(s32, s32);\nvoid lbRefract_80022BB8(void);\nvoid lbRefract_80022BD0(void);\n#pragma region lbrefract_003\nfloat atan2f(float y, float x);\nfloat acosf(float);\nfloat asinf(float);\nfloat atanf(float);\n#pragma endregion\n// todo: locals to be removed\nstruct _RefractCallbackData;\ntypedef void (*RefractCallbackTypeA)(struct _RefractCallbackData*, s32, u32,\n                                     s8, s8);\ntypedef void (*RefractCallbackTypeB)(struct _RefractCallbackData*, s32, u32,\n                                     s8, s8, s8, s8);\ntypedef void (*RefractCallbackTypeC)(struct _RefractCallbackData*, s32, u32,\n                                     s32*, s32*, s32*, s32*);\ntypedef struct _RefractCallbackData {\n    s32 unk0; // x00\n    s32 unk1; // x04\n    s32 unk2; // x08\n    s32 unk3; // x08\n    s32 unk4; // x10\n    s32 unk5; // x14\n    void* callback0; // x1C\n    void* callback1; // x20\n} RefractCallbackData;\nvoid lbRefract_80021CE8(void*, s32);\nextern RefractCallbackTypeA lbRefract_80021F34;\nextern RefractCallbackTypeA lbRefract_80021F70;\nextern RefractCallbackTypeB lbRefract_80021FB4;\nextern RefractCallbackTypeC lbRefract_80021FF8;\nextern RefractCallbackTypeC lbRefract_8002206C;\nextern RefractCallbackTypeC lbRefract_80022120;\ns32 lbRefract_8002219C(RefractCallbackData*, s32, u32, u16, u16);\n#define _player_h_\n#define MELEE_PL_TYPES_H\n/// @todo Probably the same struct as #plAllocInfo, figure out how to make them\n///       work as one.\nstruct plAllocInfo2 {\n    s32 internal_id;\n    u8 slot;\n    enum_t unk8;\n    struct {\n        u8 b0 : 1;\n        u8 has_transformation : 1;\n        u8 b2 : 1;\n        u8 b3 : 1;\n        u8 b4 : 1;\n        u8 b5 : 1;\n        u8 b6 : 1;\n        u8 b7 : 1;\n    } bits;\n};\ntypedef struct _StaticPlayer {\n    /// @at{0} @sz{4}\n    /// @todo 0x02 In-Game (includes dead). 0x00 Otherwise.\n    enum_t player_state;\n    /// @at{4} @sz{4}\n    /// @todo External ID.\n    enum_t player_character;\n    /// @at{8} @sz{4}\n    /// @todo 0 is HMN, 1 is CPU, 2 is Demo, 3 n/a\n    enum_t slot_type;\n    /*0x0C*/ u8 transformed[2]; // 0x0001 for normal, 0x0100 for transformed\n                                // (Probably Zelda/Sheik only)\n    /*0x0E*/ s16 unk0E;\n    union {\n        struct {\n            /*0x10-0x1B*/ Vec3\n                nametag_pos; /// Horizontal, Vertical, Depth (floats)\n            /*0x1C-0x27*/ Vec3 transformed_player_pos;\n            /*0x28-0x33*/ Vec3 spawn_platform_final_pos;\n            /*0x34-0x3f*/ Vec3 some_other_player_pos;\n        } byVecName;\n        Vec3 byIndex[4];\n    } player_poses;\n    /*0x40*/ f32 facing_direction;\n    /*0x44*/ u8 costume_id; // 00 = normal, 01 = red, 02 = blue, 03 = green\n                            // (reflected in icon immediately)\n    /*0x45*/ s8 unk45;\n    /*0x46*/ s8 controller_index;\n    /*0x47*/ u8 team; /// 00 = red, 01 = blue, 02 = green\n    /*0x48*/ s8 player_id;\n    /*0x49*/ s8 cpu_level;\n    /*0x4A*/ s8 cpu_type;\n    /*0x4B*/ s8 handicap;\n    /*0x4C*/ s8 unk4C;\n    /*0x4D*/ s8 unk4D;\n    /*0x4E*/ s8 unk4E;\n    /*0x4F*/ s8 unk4F;\n    /*0x50*/ f32 unk50;\n    /*0x54*/ f32 attack_ratio;\n    /*0x58*/ f32 defense_ratio;\n    /*0x5C*/ f32 model_scale;\n    union {\n        struct {\n            /*0x60*/ s16 damage_percent;\n            /*0x62*/ s16 damage_percent_alt_or_start_hp;\n            /*0x64*/ s16 stamina;\n            /*0x66*/ s16 unk66;\n        } byName;\n        s16 byIndex[4];\n    } staminas;\n    /*0x68 - 0x6C*/ s32 falls[2]; /// other index for nana falls\n    /*0x70-0x84*/ uint kos_by_player[6];\n    /// @at{88} @sz{4}\n    /// @remarks If -1 in zz_0035184, then it's set to MatchInfo->frame_count\n    uint match_frame_count;\n    /*0x8C*/ u16 suicide_count;\n    /*0x8E*/ s8 stocks;\n    /*0x8F*/ s8 unk8F;\n    /*0x90*/ int current_coins;\n    /*0x94*/ s32 total_coins;\n    /*0x98*/ s32 unk98;\n    /*0x9C*/ s32 unk9C;\n    /*0xA0-A4*/ s32\n        joystick_direction_input_count[2]; // Incremented every time you move\n                                           // the joystick a different\n                                           // direction from neutral.\n    /*0xA8*/ int nametag_slot_id;\n    /*0xAC*/ struct {\n        u8 b0 : 1;\n        u8 b1 : 1;\n        u8 b2 : 1;\n        u8 b3 : 1;\n        u8 b4 : 1;\n        u8 b5 : 1;\n        u8 b6 : 1;\n        u8 b7 : 1;\n    } flags;\n    /*0xAD*/ struct {\n        u8 b0 : 1;\n        u8 b1 : 1;\n        u8 b2 : 1;\n        u8 b3 : 1;\n        u8 b4 : 1;\n        u8 b5 : 1;\n        u8 b6 : 2;\n    } more_flags;\n    /*0xAE*/ struct {\n        u8 b0 : 1;\n        u8 b1 : 1;\n        u8 b2 : 1;\n        u8 b3 : 1;\n        u8 b4 : 1;\n        u8 b5 : 1;\n        u8 b6 : 1;\n        u8 b7 : 1;\n    } flagsAE;\n    /*0xAF*/ s8 unkAF;\n    /*0xB0*/ HSD_GObj* player_entity[2];\n    /*0xB4*/ /*void* sub_character_entity;*/ // Used for followers, such as\n                                             // Nana\n    /*0xB8*/ void (*struct_func)(s32 slot);\n    /*0xBC*/ s32\n        stale_move_table_current_write_index; // Zero-Indexed. Rolls over\n                                              // after 9. Increments after each\n                                              // write.\n    /*0xC0*/ s32 stale_move_index_0; // 1st Short is the move ID,  2nd Short is\n                                     // the # of action states that character\n                                     // has gone through this game\n    /*0xC4*/ s32 stale_move_index_1;\n    /*0xC8*/ s32 stale_move_index_2;\n    /*0xCC*/ s32 stale_move_index_3;\n    /*0xD0*/ s32 stale_move_index_4;\n    /*0xD4*/ s32 stale_move_index_5;\n    /*0xD8*/ s32 stale_move_index_6;\n    /*0xDC*/ s32 stale_move_index_7;\n    /*0xE0*/ s32 stale_move_index_8;\n    /*0xE4*/ s32 stale_move_index_9;\n    /*0xE8*/ s32 total_attack_count;\n    /*0xEC*/ s32 unkEC;\n    /*0xF0*/ u8 buffer[0x5B8];\n    /*0x6A8*/ s32 unk6A8;\n    /*0x6AC*/ u8 more_buffer[0x7E4];\n} StaticPlayer;\nStaticPlayer* Player_GetPtrForSlot(int slot);\nvoid Player_80031790(int slot);\nvoid Player_80031848(int slot);\nvoid Player_80031900(void);\nbool Player_800319C4(int slot, bool arg1);\nvoid Player_80031AD0(int slot);\nvoid Player_80031CB0(enum_t id, int slot);\nvoid Player_80031D2C(enum_t id, int slot);\nvoid Player_80031DA8(s32 param_1, s32 param_2);\nvoid Player_80031DC8(void func_arg(s32, s32));\nvoid Player_80031EBC(int slot);\nvoid Player_80031FB0(int slot, s32 entity_index);\nvoid Player_80032070(int slot, bool bool_arg);\nvoid Player_8003219C(int slot);\nbool Player_8003221C(int slot);\ns32 Player_GetPlayerState(s32 slot);\nenum_t Player_GetPlayerCharacter(int slot);\nvoid Player_SetPlayerCharacter(s32 slot, s32 value);\nenum_t Player_GetPlayerSlotType(s32 slot);\nenum_t Player_8003248C(s32 slot, bool arg1);\nvoid Player_SetSlottype(s32 slot, enum_t value);\ns8 Player_800325C8(s32 slot, bool b);\ns8 Player_80032610(s32 slot, bool arg1);\nvoid Player_LoadPlayerCoords(s32 slot, Vec3* out_vec);\nvoid Player_80032768(s32 slot, Vec3* arg_vec);\nvoid Player_80032828(s32 slot, s32 index, Vec3* arg_vec);\nvoid Player_800328D4(int slot, Vec3* arg_vec);\nvoid Player_80032A04(int slot, Vec3* arg_vec);\nvoid Player_SetPlayerAndEntityFacingDirection(s32 slot, f32 direction);\nf32 Player_80032BB0(s32 slot);\nvoid Player_SetScale(s32 slot, f32 scale);\nvoid Player_GetSpawnPlatformPos(s32 slot, Vec3* arg_vec);\nvoid Player_SetSpawnPlatformPos(s32 slot, Vec3* arg_vec);\nvoid Player_GetSomePos(s32 slot, Vec3* arg_vec);\nvoid Player_SetSomePos(s32 slot, Vec3* arg_vec);\ns32 Player_80032F30(s32 slot);\nvoid Player_80032FA4(s32 slot, s32 arg);\nf32 Player_GetFacingDirection(s32 slot);\nvoid Player_SetFacingDirection(s32 slot, f32 direction);\nvoid Player_SetFacingDirectionConditional(s32 slot, bool b, f32 direction);\nu32 Player_GetCostumeId(int slot);\nvoid Player_SetCostumeId(int slot, s8 costume_id);\nu8 Player_GetControllerIndex(int slot);\nvoid Player_SetControllerIndex(int slot, s8 controller_index);\ns8 Player_GetTeam(int slot);\nvoid Player_SetTeam(int slot, s8 unk_color);\ns8 Player_GetPlayerId(int slot);\nvoid Player_SetPlayerId(int slot, s8 player_id);\ns8 Player_GetCpuLevel(int slot);\nvoid Player_SetPlayerAndEntityCpuLevel(int slot, s8 cpu_level);\ns8 Player_GetCpuType(int slot);\nvoid Player_SetPlayerAndEntityCpuType(int slot, s8 cpu_type);\ns8 Player_GetHandicap(int slot);\nvoid Player_SetHandicap(int slot, s8 handicap);\nf32 Player_GetUnk50(int slot);\nf32 Player_GetAttackRatio(int slot);\nvoid Player_SetAttackRatio(int slot, f32 attack_ratio);\nf32 Player_GetDefenseRatio(int slot);\nvoid Player_SetDefenseRatio(int slot, f32 defense_ratio);\nf32 Player_GetModelScale(int slot);\nvoid Player_SetModelScale(int slot, f32 model_scale);\ns32 Player_GetStocks(int slot);\nint Player_GetP1Stock(void);\nvoid Player_SetStocks(int slot, int stocks);\nvoid Player_LoseStock(int slot);\nint Player_GetCoins(int slot);\nvoid Player_SetCoins(int slot, int current_coins);\nint Player_GetTotalCoins(int slot);\nvoid Player_SetTotalCoins(int slot, int coins);\ns32 Player_GetUnk98(s32 slot);\nvoid Player_SetUnk98(s32 slot, s32 unk98);\ns32 Player_GetUnk9C(s32 slot);\nvoid Player_SetUnk9C(s32 slot, s32 unk9C);\nHSD_GObj* Player_GetEntity(s32 slot);\nHSD_GObj* Player_GetEntityAtIndex(int slot, int index);\nvoid Player_SwapTransformedStates(s32 slot, s32 arg1, s32 arg2);\ns32 Player_GetDamage(s32 slot);\nvoid Player_SetHUDDamage(s32 slot, s32 arg1);\nvoid Player_SetHPByIndex(s32 slot, s32 arg1, s32 arg2);\ns16 Player_GetOtherStamina(s32 slot);\nu32 Player_GetRemainingHP(s32 slot);\nu8 Player_GetMoreFlagsBit2(s32 slot);\nvoid Player_SetMoreFlagsBit2(s32 slot, u8 bit2);\ns32 Player_GetMoreFlagsBit3(s32 slot);\nvoid Player_SetMoreFlagsBit3(s32 slot, u8 bit3);\nvoid Player_SetMoreFlagsBit4(s32 slot, u8 bit4);\ns32 Player_GetMoreFlagsBit4(s32 slot);\nu8 Player_GetMoreFlagsBit5(s32 slot);\nvoid Player_SetMoreFlagsBit5(s32 slot, u8 bit5);\nu8 Player_GetMoreFlagsBit6(s32 slot);\nvoid Player_SetMoreFlagsBit6(s32 slot, u8 bit6);\nu8 Player_GetFlagsAEBit0(s32 slot);\nu32 Player_GetRemainingHPByIndex(s32 slot, s32 index);\ns32 Player_GetFalls(s32 slot);\ns32 Player_GetFallsByIndex(s32 slot, s32 index);\nvoid Player_SetFalls(int slot, s32 falls);\nvoid Player_SetFallsByIndex(int slot, enum_t index, s32 falls);\ns32 Player_GetKOsByPlayerIndex(int slot, int idx);\nvoid Player_UpdateKOsBySlot(int slot, bool bool_arg, int other_slot);\nuint Player_GetMatchFrameCount(int slot);\nvoid Player_UpdateMatchFrameCount(int slot, bool condition);\nuint Player_GetSuicideCount(int slot);\nvoid Player_SetSuicideCount(s32 slot, u32 suicide_count);\nvoid Player_IncSuicideCount(s32 slot, s32 condition);\nbool Player_800353BC(s32 slot);\nbool Player_8003544C(s32 slot, bool condition);\nvoid Player_SetFlagsBit0(int slot, bool bit0);\nu8 Player_GetNametagSlotID(int slot);\nvoid Player_SetNametagSlotID(int slot, int nametag_slot_id);\ns32 Player_GetFlagsBit1(s32 slot);\nvoid Player_SetFlagsBit1(s32 slot);\nvoid Player_UnsetFlagsBit1(int slot);\ns32 Player_GetFlagsBit3(s32 slot);\nvoid Player_SetFlagsBit3(s32 slot, u8 bit3);\nu8 Player_GetFlagsBit4(s32 slot);\nu8 Player_GetFlagsBit5(s32 slot);\nvoid Player_SetFlagsBit5(s32 slot, u8 bit5);\nu8 Player_GetFlagsBit6(s32 slot);\nvoid Player_SetFlagsBit6(s32 slot, u8 bit6);\nu8 Player_GetFlagsBit7(s32 slot);\nvoid Player_SetFlagsBit7(s32 slot, u8 bit7);\nu8 Player_GetMoreFlagsBit0(s32 slot);\nu8 Player_GetMoreFlagsBit1(s32 slot);\nvoid Player_SetMoreFlagsBit1(s32 slot, u8 bit1);\ns32 Player_GetUnk4D(s32 slot);\nvoid Player_SetUnk4D(s32 slot, s8 unk4D);\nu8 Player_GetFlagsAEBit1(s32 slot);\n/// @todo Output is actually @c void, but needs #u8 to match.\n///       Most likely a typo by HAL.\nu8 Player_SetFlagsAEBit1(int slot, u8 bit1);\nu8 Player_GetUnk4C(s32 slot);\nvoid Player_SetUnk4C(s32 slot, u8 unk4C);\nvoid Player_80036058(s32 slot);\nvoid Player_800360D8(s32 slot);\nvoid Player_SetStructFunc(s32 slot, void* arg_func);\ns32* Player_GetTotalAttackCountPtr(s32 slot);\ns32* Player_GetStaleMoveTableIndexPtr(s32 slot);\ns32* Player_GetUnk6A8Ptr(s32 slot);\ns32* Player_GetStaleMoveTableIndexPtr2(s32 slot);\ns32 Player_80036394(s32 slot);\ns32 Player_80036428(s32 slot);\nvoid Player_SetUnk45(s32 slot, s8 unk45);\nu8 Player_GetUnk45(s32 slot);\nvoid Player_UpdateJoystickCountByIndex(s32 slot, s32 index);\ns32 Player_GetJoystickCountByIndex(s32 slot, s32 index);\nvoid Player_800366DC(s32 slot, s32 arg1);\nvoid Player_80036790(s32 slot, f32 arg1);\nvoid Player_80036844(s32 slot, s32 arg1);\nvoid Player_800368F8(s32 slot);\nvoid Player_80036978(s32 slot, s32 arg1);\nvoid Player_InitOrResetPlayer(s32 slot);\nvoid Player_80036CF0(s32 slot);\nvoid Player_80036D24(s32 slot);\nvoid Player_InitAllPlayers(void);\nvoid Player_80036DA4(void);\nvoid Player_80036DD8(void);\nvoid Player_80036E20(s32 arg0, HSD_Archive* archive, s32 arg2);\ns32 Player_80036EA0(s32 slot);\nvoid Player_80036F34(s32 slot, s32 arg1);\nvoid Player_80037054(s32 slot, s32 arg1);\nvoid Player_SetOtherStamina(s32 slot, s32 stamina);\nvoid Player_SetFlagsAEBit0(s32 slot, u8 bit0);\ns32 Player_80033BB8(int slot);\n#define _archive_h_\n#define HSD_ARCHIVE_DONT_FREE 1\nstruct HSD_ArchiveHeader {\n    u32 file_size; /* 0x00 */\n    u32 data_size; /* 0x04 */\n    u32 nb_reloc; /* 0x08 */\n    u32 nb_public; /* 0x0C */\n    u32 nb_extern; /* 0x10 */\n    u8 version[4]; /* 0x14 */\n    u32 pad[2]; /* 0x18 */\n};\nstruct HSD_ArchiveRelocationInfo {\n    u32 offset;\n};\nstruct HSD_ArchivePublicInfo {\n    u32 offset; /* 0x00 */\n    u32 symbol; /* 0x04 */\n};\nstruct HSD_ArchiveExternInfo {\n    u32 offset; /* 0x00 */\n    u32 symbol; /* 0x04 */\n};\nstruct HSD_Archive {\n    HSD_ArchiveHeader header; /* 0x00 */\n    u8* data; /* 0x20 */\n    HSD_ArchiveRelocationInfo* reloc_info; /* 0x24 */\n    HSD_ArchivePublicInfo* public_info; /* 0x28 */\n    HSD_ArchiveExternInfo* extern_info; /* 0x2C */\n    char* symbols; /* 0x30 */\n    HSD_Archive* next; /* 0x34 */\n    char* name; /* 0x38 */\n    u32 flags; /* 0x3C */\n    void* top_ptr; /* 0x40 */\n};\ns32 HSD_ArchiveParse(HSD_Archive*, u8*, u32);\nvoid* HSD_ArchiveGetPublicAddress(HSD_Archive*, char*);\nchar* HSD_ArchiveGetExtern(HSD_Archive*, int);\nvoid HSD_ArchiveLocateExtern(HSD_Archive*, char*, void*);\n#define _controller_h_\n#define SYSDOLPHIN_BASELIB_RUMBLE_H\nstruct HSD_RumbleData {\n    u8 last_status;\n    u8 status;\n    u8 direct_status;\n    u16 nb_list;\n    HSD_PadRumbleListData* listdatap;\n};\nstruct RumbleCommand {\n    u16 op;\n    u16 frame;\n};\nunion HSD_Rumble {\n    u16 def;\n    RumbleCommand command;\n};\nstruct RumbleInfo {\n    u16 max_list;\n    u8 unk2;\n    HSD_PadRumbleListData* listdatap;\n};\nstruct HSD_PadRumbleListData {\n    /*0x00*/ HSD_PadRumbleListData* next;\n    /*0x04*/ u32 id;\n    /*0x08*/ u8 pause;\n    /*0x09*/ u8 pri;\n    /*0x0A*/ u8 status;\n    /*0x0C*/ u16 loop_count;\n    /*0x0E*/ u16 wait;\n    /*0x10*/ s32 frame;\n    /*0x14*/ /* HSD_Rumble* */ u16* stack;\n    /*0x18*/ /* HSD_Rumble* */ u16* listp;\n    /*0x1C*/ /* HSD_Rumble* */ u16* headp;\n};\nstruct Struct804C22E0 {\n    u8 unk0;\n    u8 unk1;\n    u8 unk2;\n    u16 unk4;\n    HSD_PadRumbleListData* unk8;\n};\nvoid HSD_Rumble_80378280(u8, int);\nvoid HSD_Rumble_80378128(struct Struct804C22E0* a, HSD_PadRumbleListData* b);\nvoid HSD_Rumble_80378170(u8 a);\nvoid HSD_Rumble_80378208(void);\nvoid func_80378330_inline(u8 a, int b);\nvoid HSD_Rumble_80378330(void);\nvoid HSD_Rumble_803783B0(void);\nvoid func_80378430_inline(HSD_PadRumbleListData** r6,\n                          HSD_PadRumbleListData* r7);\nint HSD_Rumble_80378430(u8 a, int b, int c, int d, void* e);\nvoid HSD_Rumble_80378524(int a);\nint HSD_Rumble_80378560(HSD_PadRumbleListData* a, u8* b);\nvoid HSD_PadRumbleInterpret(void);\nvoid HSD_PadRumbleInit(u16 a, void* b);\nvoid HSD_PadRumbleOn(u8 a);\nvoid HSD_Rumble_803780DC(u8 a);\nvoid HSD_PadRumbleInterpret_inline(HSD_PadRumbleListData** r6,\n                                   HSD_PadRumbleListData* r29);\ntypedef enum _HSD_FlushType {\n    HSD_PAD_FLUSH_QUEUE_MERGE,\n    HSD_PAD_FLUSH_QUEUE_THROWAWAY,\n    HSD_PAD_FLUSH_QUEUE_LEAVE1,\n    HSD_PAD_FLUSH_QUEUE_TERMINATE,\n} HSD_FlushType;\nstruct HSD_PadData {\n    PADStatus stat[4];\n    u32 rumble_mask;\n};\nstruct HSD_PadStatus {\n    u32 button;\n    u32 last_button;\n    u32 trigger;\n    u32 repeat;\n    u32 release;\n    s32 repeat_count;\n    s8 stickX;\n    s8 stickY;\n    s8 subStickX;\n    s8 subStickY;\n    u8 analogL;\n    u8 analogR;\n    u8 analogA;\n    u8 analogB;\n    f32 nml_stickX;\n    f32 nml_stickY;\n    f32 nml_subStickX;\n    f32 nml_subStickY;\n    f32 nml_analogL;\n    f32 nml_analogR;\n    f32 nml_analogA;\n    f32 nml_analogB;\n    u8 cross_dir;\n    u8 support_rumble;\n    s8 err;\n};\nstruct PadLibData {\n    /*0x00*/ u8 qnum;\n    /*0x01*/ u8 qread;\n    /*0x02*/ u8 qwrite;\n    /*0x03*/ u8 qcount;\n    /*0x04*/ u8 qtype;\n    /*0x08*/ HSD_PadData* queue;\n    /*0x0C*/ s32 repeat_start;\n    /*0x10*/ s32 repeat_interval;\n    /*0x14*/ u8 adc_type;\n    /*0x15*/ s8 adc_th;\n    /*0x18*/ f32 adc_angle;\n    /*0x1C*/ u8 clamp_stickType;\n    /*0x1D*/ u8 clamp_stickShift;\n    /*0x1E*/ s8 clamp_stickMax;\n    /*0x1F*/ s8 clamp_stickMin;\n    /*0x20*/ u8 clamp_analogLRShift;\n    /*0x21*/ u8 clamp_analogLRMax;\n    /*0x22*/ u8 clamp_analogLRMin;\n    /*0x23*/ u8 clamp_analogABShift;\n    /*0x24*/ u8 clamp_analogABMax;\n    /*0x25*/ u8 clamp_analogABMin;\n    /*0x26*/ s8 scale_stick;\n    /*0x27*/ u8 scale_analogLR;\n    /*0x28*/ u8 scale_analogAB;\n    /*0x29*/ u8 cross_dir;\n    /*0x2A*/ u8 reset_switch_status;\n    /*0x2B*/ u8 reset_switch;\n    /*0x2C*/ RumbleInfo rumble_info;\n};\nextern HSD_PadStatus HSD_PadMasterStatus[4];\nu8 HSD_PadGetRawQueueCount(void);\ns32 HSD_PadGetResetSwitch(void);\nvoid HSD_PadInit(s32, u8*, s32, HSD_PadRumbleListData*);\n#define SYSDOLPHIN_BASELIB_DOBJ_H\nstruct HSD_DObj {\n    HSD_Class parent;\n    HSD_DObj* next; // 0x04\n    HSD_MObj* mobj; // 0x08\n    HSD_PObj* pobj; // 0x0C\n    HSD_AObj* aobj; // 0x10\n    u32 flags; // 0x14\n};\nstruct HSD_DObjDesc {\n    char* class_name;\n    HSD_DObjDesc* next;\n    HSD_MObjDesc* mobjdesc;\n    HSD_PObjDesc* pobjdesc;\n};\nstruct HSD_DObjInfo {\n    HSD_ClassInfo parent;\n    void (*disp)(HSD_DObj* dobj, Mtx vmtx, Mtx pmtx, u32 rendermode); // 0x3C\n    int (*load)(HSD_DObj* dobj, HSD_DObjDesc* desc); // 0x40\n};\nstruct HSD_ShapeAnimDObj {\n    HSD_ShapeAnimDObj* next;\n    HSD_ShapeAnim* shapeanim;\n};\n#define HSD_DOBJ(o) ((HSD_DObj*) (o))\n#define HSD_DOBJ_INFO(i) ((HSD_DObjInfo*) (i))\n#define HSD_DOBJ_METHOD(o) HSD_DOBJ_INFO(HSD_CLASS_METHOD(o))\nvoid HSD_DObjSetCurrent(HSD_DObj* dobj);\nu32 HSD_DObjGetFlags(HSD_DObj* dobj);\nvoid HSD_DObjSetFlags(HSD_DObj* dobj, u32 flags);\nvoid HSD_DObjClearFlags(HSD_DObj* dobj, u32 flags);\nvoid HSD_DObjModifyFlags(HSD_DObj* dobj, u32 flags, u32 mask);\nvoid HSD_DObjRemoveAnimByFlags(HSD_DObj* dobj, u32 flags);\nvoid HSD_DObjRemoveAnimAllByFlags(HSD_DObj* dobj, u32 flags);\nvoid HSD_DObjAddAnim(HSD_DObj* dobj, HSD_MatAnim* mat_anim,\n                     HSD_ShapeAnimDObj* sh_anim);\nvoid HSD_DObjAddAnimAll(HSD_DObj* dobj, HSD_MatAnim* matanim,\n                        HSD_ShapeAnimDObj* shapeanimdobj);\nvoid HSD_DObjReqAnimByFlags(HSD_DObj* dobj, f32 startframe, u32 flags);\nvoid HSD_DObjReqAnimAllByFlags(HSD_DObj* dobj, f32 startframe, u32 flags);\nvoid HSD_DObjReqAnimAll(HSD_DObj* dobj, f32 startframe);\nvoid HSD_DObjAnim(HSD_DObj* dobj);\nvoid HSD_DObjAnimAll(HSD_DObj* dobj);\nHSD_DObj* HSD_DObjLoadDesc(HSD_DObjDesc* desc);\nvoid HSD_DObjRemoveAll(HSD_DObj* dobj);\nHSD_DObj* HSD_DObjAlloc(void);\nvoid HSD_DObjResolveRefs(HSD_DObj* dobj, HSD_DObjDesc* desc);\nvoid HSD_DObjResolveRefsAll(HSD_DObj* dobj, HSD_DObjDesc* desc);\nvoid HSD_DObjDisp(HSD_DObj* dobj, Mtx vmtx, Mtx pmtx, u32 rendermode);\nvoid HSD_DObjRemove(HSD_DObj* dobj);\nvoid HSD_DObjSetDefaultClass(HSD_ClassInfo* info);\nvoid forceStringAllocation(HSD_DObj* dobj, HSD_MObj* mobj);\n#define _gobjgxlink_h_\nvoid GObj_GXReorder(HSD_GObj* gobj, HSD_GObj* hiprio_gobj);\nvoid GObj_SetupGXLink(HSD_GObj* gobj, GObj_RenderFunc render_cb, u8 gx_link,\n                      u32 priority);\nvoid GObj_SetupGXLinkMax(HSD_GObj* gobj, GObj_RenderFunc render_cb,\n                         u32 priority);\nvoid GObj_SetupGXLinkMaxSorted(HSD_GObj* gobj, GObj_RenderFunc render_cb,\n                               u32 priority);\nvoid HSD_GObjGXLink_8039084C(HSD_GObj*);\nvoid HSD_GObjGXLink_80390908(HSD_GObj*, u8 gx_link, u8 priority);\nvoid HSD_GObjGXLink_803909D8(HSD_GObj*, HSD_GObj*);\n#define _gobjuserdata_h_\n#define HSD_GOBJ_USER_DATA_NONE (u8) - 1\nvoid GObj_InitUserData(HSD_GObj* gobj, u8 kind, void (*remove_func)(any_t),\n                       void* data);\nvoid GObj_RemoveUserData(HSD_GObj* gobj);\n#define SYSDOLPHIN_BASELIB_LOBJ_H\nstruct HSD_LightPoint {\n    f32 cutoff;\n    u32 point_func;\n    f32 ref_br;\n    f32 ref_dist;\n    u32 dist_func;\n};\nstruct HSD_LightPointDesc {\n    f32 ref_br;\n    f32 ref_dist;\n    u32 dist_func;\n};\nstruct HSD_LightSpot {\n    f32 cutoff;\n    u32 spot_func;\n    f32 ref_br;\n    f32 ref_dist;\n    u32 dist_func;\n};\nstruct HSD_LightSpotDesc {\n    f32 cutoff;\n    u32 spot_func;\n    f32 ref_br;\n    f32 ref_dist;\n    u32 dist_func;\n};\nstruct HSD_LightAttn {\n    f32 a0;\n    f32 a1;\n    f32 a2;\n    f32 k0;\n    f32 k1;\n    f32 k2;\n};\nstruct HSD_LObj {\n    /* 0x00 - 0x04 */ HSD_Obj parent;\n    /* 0x08 */ u16 flags;\n    /* 0x0A */ u16 priority;\n    /* 0x0C */ HSD_LObj* next;\n    /* 0x10 */ GXColor color;\n    /* 0x14 */ GXColor hw_color;\n    /* 0x18 */ HSD_WObj* position;\n    /* 0x1C */ HSD_WObj* interest;\n    /* 0x20 - 0x34 */ union {\n        HSD_LightPoint point;\n        HSD_LightSpot spot;\n        HSD_LightAttn attn;\n    } u;\n    /* 0x38 */ f32 shininess;\n    /* 0x3C - 0x44 */ Vec3 lvec;\n    /* 0x48 */ HSD_AObj* aobj;\n    /* 0x4C */ GXLightID id;\n    /* 0x50 */ GXLightObj lightobj;\n    /* 0x90 */ GXLightID spec_id;\n    /* 0x94 */ GXLightObj spec_lightobj;\n};\nstruct HSD_LightDesc {\n    /* 0x00 */ char* class_name;\n    /* 0x04 */ HSD_LightDesc* next;\n    /* 0x08 */ u16 flags;\n    /* 0x0A */ u16 attnflags;\n    /* 0x0C */ GXColor color;\n    /* 0x10 */ HSD_WObjDesc* position;\n    /* 0x14 */ HSD_WObjDesc* interest;\n    union {\n        void* p;\n        f32* shininess;\n        HSD_LightPointDesc* point;\n        HSD_LightSpotDesc* spot;\n        HSD_LightAttn* attn;\n    } u;\n};\nstruct HSD_LightAnim {\n    HSD_LightAnim* next;\n    HSD_AObjDesc* aobjdesc;\n    HSD_WObjAnim* position_anim;\n    HSD_WObjAnim* interest_anim;\n};\nstruct HSD_LObjInfo {\n    HSD_ObjInfo parent;\n    int (*load)(HSD_LObj* lobj, HSD_LightDesc* ldesc);\n};\n#define HSD_LOBJ(o) ((HSD_LObj*) (o))\n#define HSD_LOBJ_INFO(i) ((HSD_LObjInfo*) (i))\n#define HSD_LOBJ_METHOD(o) HSD_LOBJ_INFO(HSD_OBJECT_METHOD((o)))\ninline u8 HSD_LObjGetPriority(HSD_LObj* lobj)\n{\n    ((lobj) ? ((void) 0) : __assert(\"src/sysdolphin/baselib/lobj.h\", 367, \"lobj\"));\n    return lobj->priority;\n}\nextern HSD_LObjInfo hsdLobj;\nu32 HSD_LObjGetFlags(HSD_LObj* lobj);\nvoid HSD_LObjSetFlags(HSD_LObj* lobj, u32 flags);\nvoid HSD_LObjClearFlags(HSD_LObj* lobj, u32 flags);\ns32 HSD_LObjGetLightMaskDiffuse(void);\ns32 HSD_LObjGetLightMaskAttnFunc(void);\ns32 HSD_LObjGetLightMaskAlpha(void);\ns32 HSD_LObjGetLightMaskSpecular(void);\nvoid HSD_LObjSetActive(HSD_LObj* lobj);\ns32 HSD_LObjGetNbActive(void);\nHSD_LObj* HSD_LObjGetActiveByID(GXLightID id);\nHSD_LObj* HSD_LObjGetActiveByIndex(s32 idx);\nvoid HSD_LObjClearActive(void);\nvoid LObjUpdateFunc(void* obj, enum_t type, HSD_ObjData* val);\nvoid HSD_LObjAddAnim(HSD_LObj* lobj, HSD_LightAnim* lanim);\nvoid HSD_LObjAddAnimAll(HSD_LObj* lobj, HSD_LightAnim* lanim);\nvoid HSD_LObjAnim(HSD_LObj* lobj);\nvoid HSD_LObjAnimAll(HSD_LObj* lobj);\nvoid HSD_LObjReqAnim(HSD_LObj* lobj, f32 startframe);\nvoid HSD_LObjReqAnimAll(HSD_LObj* lobj, f32 startframe);\nvoid HSD_LObjGetLightVector(HSD_LObj* lobj, Vec3* dir);\nvoid HSD_LObjSetup(HSD_LObj* lobj, GXColor color, f32 shininess);\nbool HSD_LObjGetPosition(HSD_LObj*, Vec3*);\nbool HSD_LObjGetInterest(HSD_LObj*, Vec3*);\nHSD_WObj* HSD_LObjGetPositionWObj(HSD_LObj* lobj);\nHSD_WObj* HSD_LObjGetInterestWObj(HSD_LObj* lobj);\nvoid HSD_LObjSetPositionWObj(HSD_LObj* lobj, HSD_WObj* wobj);\nvoid HSD_LObjSetInterestWObj(HSD_LObj* lobj, HSD_WObj* wobj);\ns32 HSD_LightID2Index(GXLightID);\nvoid HSD_LObjDeleteCurrent(HSD_LObj* lobj);\ns32 HSD_Index2LightID(u32);\nvoid HSD_LObjRemoveAll(HSD_LObj* lobj);\nvoid HSD_LObjSetPosition(HSD_LObj* lobj, Vec3* position);\nvoid HSD_LObjSetInterest(HSD_LObj* lobj, Vec3* interest);\nvoid HSD_LObj_803668EC(HSD_LObj* lobj);\nvoid HSD_LObjSetupInit(HSD_CObj* arg0);\nvoid HSD_LObjSetColor(HSD_LObj* lobj, GXColor color);\nvoid HSD_LObjGetColor(HSD_LObj* lobj, GXColor* color);\nvoid HSD_LObjSetSpot(HSD_LObj* lobj, f32 cutoff, s32 point_func);\nvoid HSD_LObjSetDistAttn(HSD_LObj* lobj, f32 ref_dist, f32 ref_br,\n                         s32 dist_func);\nvoid HSD_LObjSetAttnA(HSD_LObj* lobj, f32 a0, f32 a1, f32 a2);\nvoid HSD_LObjSetAttnK(HSD_LObj* lobj, f32 k0, f32 k1, f32 k2);\nvoid HSD_LObjSetAttn(HSD_LObj* lobj, f32 a0, f32 a1, f32 a2, f32 k0, f32 k1,\n                     f32 k2);\nvoid HSD_LObjSetupSpecularInit(Mtx pmtx);\nu32 HSD_LObjGetType(HSD_LObj* lobj);\nvoid HSD_LObjAddCurrent(HSD_LObj* lobj);\nvoid HSD_LObjUnrefThis(HSD_LObj* lobj);\nvoid HSD_LObjDeleteCurrentAll(HSD_LObj* lobj);\nvoid HSD_LObjSetCurrentAll(HSD_LObj* lobj);\nHSD_LObj* HSD_LObjGetCurrentByType(u16 type);\nvoid HSD_LObjSetDefaultClass(HSD_LObjInfo* info);\nHSD_LObjInfo* HSD_LObjGetDefaultClass(void);\nHSD_LObj* HSD_LObjAlloc(void);\nHSD_LObj* HSD_LObjLoadDesc(HSD_LightDesc* ldesc);\nstatic inline HSD_LObj* HSD_LObjGetNext(HSD_LObj* lobj)\n{\n    if (lobj == ((any_t) 0)) {\n        return ((any_t) 0);\n    } else {\n        return lobj->next;\n    }\n}\n#define _random_h_\ns32 HSD_Rand(void);\nf32 HSD_Randf(void);\ns32 HSD_Randi(s32 max_val);\nvoid _HSD_RandForgetMemory(any_t low, any_t high);\n// Table in PlCo.dat\ntypedef struct _FighterPartsTable {\n    u8* joint_to_part;\n    u8* part_to_joint;\n    u32 parts_num;\n} FighterPartsTable;\n// Points to data in PlCo.dat\nstruct ftCommonData {\n    /* +0 */ float x0;\n    /* +4 */ float x4;\n    /* +8 */ float x8_someStickThreshold;\n    /* +C */ float xC;\n    /* +10 */ float x10;\n    /* +14 */ float x14;\n    /* +18 */ float x18;\n    /* +1C */ int x1C;\n    /* +20 */ float x20;\n    /* +24 */ float x24;\n    /* +28 */ float x28;\n    /* +2C */ float x2C;\n    /* +30 */ float x30;\n    /* +34 */ M2C_UNK x34;\n    /* +38 */ M2C_UNK x38;\n    /* +3C */ float x3C;\n    /* +40 */ int x40;\n    /* +44 */ float x44;\n    /* +48 */ M2C_UNK x48;\n    /* +4C */ M2C_UNK x4C;\n    /* +50 */ float x50;\n    /* +54 */ M2C_UNK x54;\n    /* +58 */ M2C_UNK x58;\n    /* +5C */ M2C_UNK x5C;\n    /* +60 */ M2C_UNK x60;\n    /* +64 */ M2C_UNK x64;\n    /* +68 */ float x68;\n    /* +6C */ M2C_UNK x6C;\n    /* +70 */ float x70_someLStickYMax;\n    /* +6C */ int x74;\n    /* +78 */ float x78;\n    /* +7C */ u8 x7C[0x88 - 0x7C];\n    /* +88 */ float x88;\n    /* +8C */ int x8C;\n    /* +90 */ u8 x90[0x98 - 0x90];\n    /* +98 */ float x98;\n    /* +9C */ float x9C;\n    /* +A0 */ float xA0;\n    /* +A4 */ float xA4;\n    /* +A8 */ float xA8;\n    /* +AC */ float attackhi3_stick_threshold_y;\n    /* +B0 */ float xB0;\n    /* +B4 */ float xB4;\n    /* +B8 */ float xB8;\n    /* +BC */ float xBC;\n    /* +C0 */ float xC0;\n    /* +C4 */ float xC4;\n    /* +C8 */ float xC8;\n    /* +CC */ float xCC;\n    /* +D0 */ float xD0;\n    /* +D4 */ float xD4;\n    /* +D8 */ float xD8;\n    /* +DC */ float xDC;\n    /* +E0 */ float xE0;\n    /* +E4 */ int xE4;\n    /* +E8 */ float xE8;\n    /* +EC */ float xEC;\n    /* +F0 */ float xF0;\n    /* +F4 */ float xF4;\n    /* +F8 */ float xF8;\n    /* +FC */ int xFC;\n    /* +100 */ float x100;\n    /* +104 */ float kb_min;\n    /* +108 */ M2C_UNK x108;\n    /* +10C */ M2C_UNK x10C;\n    /* +110 */ M2C_UNK x110;\n    /* +114 */ M2C_UNK x114;\n    /* +118 */ M2C_UNK x118;\n    /* +11C */ M2C_UNK x11C;\n    /* +120 */ M2C_UNK x120;\n    /* +124 */ float kb_squat_mul;\n    /* +128 */ float x128;\n    /* +12C */ float x12C;\n    /* +130 */ int x130;\n    /* +134 */ int x134;\n    /* +138 */ float x138;\n    /* +13C */ float x13C;\n    /* +140 */ float x140;\n    /* +144 */ float x144;\n    /* +148 */ float x148;\n    /* +14C */ float x14C;\n    /* +150 */ float x150;\n    /* +154 */ float x154;\n    /* +158 */ float x158;\n    /* +15C */ float x15C;\n    /* +160 */ float x160;\n    /* +164 */ float x164;\n    /* +168 */ float x168;\n    /* +16C */ float x16C;\n    /* +170 */ float x170;\n    /* +174 */ float x174;\n    /* +178 */ float x178;\n    /* +17C */ float x17C;\n    /* +180 */ float x180;\n    /* +184 */ float x184;\n    /* +188 */ float x188;\n    /* +18C */ int x18C;\n    /* +190 */ float x190;\n    /* +194 */ float x194_unkHitLagFrames;\n    /* +198 */ float x198;\n    /* +19C */ float x19C;\n    /* +1A0 */ float x1A0;\n    /* +1A4 */ M2C_UNK x1A4;\n    /* +1A8 */ float x1A8;\n    /* +1AC */ float x1AC;\n    /* +1B0 */ M2C_UNK x1B0;\n    /* +1B4 */ M2C_UNK x1B4;\n    /* +1B8 */ M2C_UNK x1B8;\n    /* +1BC */ M2C_UNK x1BC;\n    /* +1C0 */ M2C_UNK x1C0;\n    /* +1C4 */ M2C_UNK x1C4;\n    /* +1C8 */ float x1C8;\n    /* +1CC */ M2C_UNK x1CC;\n    /* +1D0 */ float x1D0;\n    /* +1D4 */ M2C_UNK x1D4;\n    /* +1D8 */ M2C_UNK x1D8;\n    /* +1DC */ M2C_UNK x1DC;\n    /* +1E0 */ float x1E0;\n    /* +1E4 */ float x1E4;\n    /* +1E8 */ M2C_UNK x1E8;\n    /* +1EC */ float x1EC;\n    /* +1F0 */ float x1F0;\n    /* +1F4 */ float x1F4;\n    /* +1F8 */ M2C_UNK x1F8;\n    /* +1FC */ float x1FC;\n    /* +200 */ float x200;\n    /* +204 */ float x204_knockbackFrameDecay;\n    /* +208 */ u8 x208[0x210 - 0x208];\n    /* +210 */ float x210;\n    /* +214 */ int x214;\n    /* +218 */ float x218;\n    /* +21C */ float x21C;\n    /* +220 */ float x220;\n    /* +224 */ int x224;\n    /* +228 */ float x228;\n    /* +22C */ float x22C;\n    /* +230 */ float x230;\n    /* +234 */ M2C_UNK x234;\n    /* +238 */ M2C_UNK x238;\n    /* +23C */ M2C_UNK x23C;\n    /* +240 */ M2C_UNK x240;\n    /* +244 */ float x244;\n    /* +248 */ float x248;\n    /* +24C */ float x24C;\n    /* +250 */ float x250;\n    /* +254 */ float x254;\n    /* +258 */ float x258;\n    /* +25C */ float x25C;\n    /* +260 */ float x260_startShieldHealth;\n    /* +264 */ float x264;\n    /* +268 */ float x268;\n    /* +26C */ M2C_UNK x26C;\n    /* +270 */ M2C_UNK x270;\n    /* +274 */ M2C_UNK x274;\n    /* +278 */ float x278;\n    /* +27C */ float x27C;\n    /* +280 */ float x280_unkShieldHealth;\n    /* +284 */ float x284;\n    /* +288 */ float x288;\n    /* +28C */ float x28C;\n    /* +290 */ float x290;\n    /* +294 */ float x294;\n    /* +298 */ float x298;\n    /* +29C */ M2C_UNK x29C;\n    /* +2A0 */ int x2A0;\n    /* +2A4 */ float x2A4;\n    /* +2A8 */ float x2A8;\n    /* +2AC */ float x2AC;\n    /* +2B0 */ float x2B0;\n    /* +2B4 */ float x2B4;\n    /* +2B8 */ M2C_UNK x2B8;\n    /* +2BC */ float x2BC;\n    /* +2C0 */ M2C_UNK x2C0;\n    /* +2C4 */ M2C_UNK x2C4;\n    /* +2C8 */ M2C_UNK x2C8;\n    /* +2CC */ M2C_UNK x2CC;\n    /* +2D0 */ M2C_UNK x2D0;\n    /* +2D4 */ float x2D4;\n    /* +2D8 */ float x2D8;\n    /* +2DC */ float x2DC;\n    /* +2E0 */ float x2E0;\n    /* +2E4 */ float x2E4;\n    /* +2E8 */ float x2E8;\n    /* +2EC */ float x2EC;\n    /* +2F0 */ float x2F0;\n    /* +2F4 */ M2C_UNK x2F4;\n    /* +2F8 */ float x2F8;\n    /* +2FC */ float x2FC;\n    /* +300 */ float x300;\n    /* +304 */ float x304;\n    /* +308 */ float x308;\n    /* +30C */ M2C_UNK x30C;\n    /* +310 */ M2C_UNK x310;\n    /* +314 */ float x314;\n    /* +318 */ int x318;\n    /* +31C */ float x31C;\n    /* +320 */ int x320;\n    /* +324 */ int x324;\n    /* +328 */ M2C_UNK x328;\n    /* +32C */ Vec2 escapeair_deadzone;\n    /* +334 */ int x334;\n    /* +338 */ float escapeair_force;\n    /* +33C */ float escapeair_decay;\n    /* +340 */ float x340;\n    /* +344 */ float x344;\n    /* +348 */ M2C_UNK x348;\n    /* +34C */ M2C_UNK x34C;\n    /* +350 */ M2C_UNK x350;\n    /* +354 */ M2C_UNK x354;\n    /* +358 */ M2C_UNK x358;\n    /* +35C */ M2C_UNK x35C;\n    /* +360 */ M2C_UNK x360;\n    /* +364 */ M2C_UNK x364;\n    /* +368 */ M2C_UNK x368;\n    /* +36C */ M2C_UNK x36C;\n    /* +370 */ M2C_UNK x370;\n    /* +374 */ M2C_UNK x374;\n    /* +378 */ M2C_UNK x378;\n    /* +37C */ M2C_UNK x37C;\n    /* +380 */ M2C_UNK x380;\n    /* +384 */ M2C_UNK x384;\n    /* +388 */ M2C_UNK x388;\n    /* +38C */ M2C_UNK x38C;\n    /* +390 */ M2C_UNK x390;\n    /* +394 */ M2C_UNK x394;\n    /* +398 */ M2C_UNK x398;\n    /* +39C */ M2C_UNK x39C;\n    /* +3A0 */ M2C_UNK x3A0;\n    /* +3A4 */ M2C_UNK x3A4;\n    /* +3A8 */ float x3A8;\n    /* +3AC */ M2C_UNK x3AC;\n    /* +3B0 */ float x3B0;\n    /* +3B4 */ float shouldered_anim_rate;\n    /* +3B8 */ M2C_UNK x3B8;\n    /* +3BC */ M2C_UNK x3BC;\n    /* +3C0 */ int x3C0;\n    /* +3C4 */ M2C_UNK x3C4;\n    /* +3C8 */ M2C_UNK x3C8;\n    /* +3CC */ M2C_UNK x3CC;\n    /* +3D0 */ M2C_UNK x3D0;\n    /* +3D4 */ M2C_UNK x3D4;\n    /* +3D8 */ float x3D8;\n    /* +3DC */ float x3DC;\n    /* +3E0 */ float x3E0;\n    /* +3E4 */ float x3E4;\n    /* +3E8 */ float x3E8_shieldKnockbackFrameDecay;\n    /* +3EC */ float x3EC_shieldGroundFrictionMultiplier;\n    /* +3F0 */ u8 x3F0[0x400 - 0x3F0];\n    /* +410 */ float x400;\n    /* +410 */ float x404;\n    /* +410 */ float x408;\n    /* +40C */ float x40C;\n    /* +410 */ M2C_UNK x410;\n    /* +414 */ M2C_UNK x414;\n    /* +418 */ int x418;\n    /* +41C */ int x41C;\n    /* +420 */ M2C_UNK x420;\n    /* +424 */ float x424;\n    /* +428 */ int x428;\n    /* +42C */ M2C_UNK x42C;\n    /* +430 */ M2C_UNK x430;\n    /* +434 */ M2C_UNK x434;\n    /* +438 */ M2C_UNK x438;\n    /* +43C */ M2C_UNK x43C;\n    /* +440 */ float x440;\n    /* +444 */ float x444;\n    /* +448 */ float x448;\n    /* +44C */ float x44C;\n    /* +450 */ float x450;\n    /* +454 */ float x454;\n    /* +458 */ float x458;\n    /* +45C */ float x45C;\n    /* +460 */ float x460;\n    /* +464 */ float x464;\n    /* +468 */ float x468;\n    /* +46C */ float x46C;\n    /* +470 */ float x470;\n    /* +474 */ M2C_UNK x474;\n    /* +478 */ float x478;\n    /* +47C */ float x47C;\n    /* +480 */ float x480;\n    /* +484 */ M2C_UNK x484;\n    /* +488 */ int x488;\n    /* +48C */ float x48C;\n    /* +490 */ float x490;\n    /* +494 */ float x494;\n    /* +498 */ int ledge_cooldown;\n    /* +49C */ int x49C;\n    /* +4A0 */ float x4A0;\n    /* +4A4 */ float x4A4;\n    /* +4A8 */ float x4A8;\n    /* +4AC */ float x4AC;\n    /* +4B0 */ float x4B0;\n    /* +4B4 */ int x4B4;\n    /* +4B8 */ float x4B8;\n    /* +4BC */ float x4BC;\n    /* +4C0 */ float x4C0;\n    /* +4C4 */ int x4C4;\n    /* +4C8 */ int x4C8;\n    /* +4CC */ int x4CC;\n    /* +4D0 */ float x4D0;\n    /* +4D4 */ float x4D4;\n    /* +4D8 */ u32 x4D8;\n    /* +4DC */ Vec2 x4DC;\n    /* +4E4 */ Vec3 x4E4;\n    /* +4F0 */ M2C_UNK x4F0;\n    /* +4F4 */ M2C_UNK x4F4;\n    /* +4F8 */ M2C_UNK x4F8;\n    /* +4FC */ M2C_UNK x4FC;\n    /* +500 */ M2C_UNK x500;\n    /* +504 */ M2C_UNK x504;\n    /* +508 */ M2C_UNK x508;\n    /* +50C */ M2C_UNK x50C;\n    /* +510 */ M2C_UNK x510;\n    /* +514 */ M2C_UNK x514;\n    /* +518 */ M2C_UNK x518;\n    /* +51C */ M2C_UNK x51C;\n    /* +520 */ M2C_UNK x520;\n    /* +524 */ M2C_UNK x524;\n    /* +528 */ M2C_UNK x528;\n    /* +52C */ M2C_UNK x52C;\n    /* +530 */ M2C_UNK x530;\n    /* +534 */ M2C_UNK x534;\n    /* +538 */ M2C_UNK x538;\n    /* +53C */ M2C_UNK x53C;\n    /* +540 */ M2C_UNK x540;\n    /* +544 */ M2C_UNK x544;\n    /* +548 */ M2C_UNK x548;\n    /* +54C */ M2C_UNK x54C;\n    /* +550 */ M2C_UNK x550;\n    /* +554 */ M2C_UNK x554;\n    /* +558 */ M2C_UNK x558;\n    /* +55C */ M2C_UNK x55C;\n    /* +560 */ M2C_UNK x560;\n    /* +564 */ M2C_UNK x564;\n    /* +568 */ float x568;\n    /* +56C */ float x56C;\n    /* +570 */ float x570;\n    /* +574 */ float x574;\n    /* +578 */ float x578;\n    /* +57C */ int x57C;\n    /* +580 */ int x580;\n    /* +584 */ int x584;\n    /* +588 */ int x588;\n    /* +58C */ M2C_UNK x58C;\n    /* +590 */ M2C_UNK x590;\n    /* +594 */ M2C_UNK x594;\n    /* +598 */ M2C_UNK x598;\n    /* +59C */ float x59C;\n    /* +5A0 */ u8 x5A0[0x5C0 - 0x5A0];\n    /* +5C0 */ float x5C0;\n    /* +5C4 */ M2C_UNK x5C4;\n    /* +5C8 */ M2C_UNK x5C8;\n    /* +5CC */ M2C_UNK x5CC;\n    /* +5D0 */ M2C_UNK x5D0;\n    /* +5D4 */ M2C_UNK x5D4;\n    /* +5D8 */ M2C_UNK x5D8;\n    /* +5DC */ M2C_UNK x5DC;\n    /* +5E0 */ int x5E0;\n    /* +5E4 */ M2C_UNK x5E4;\n    /* +5E8 */ M2C_UNK x5E8;\n    /* +5EC */ M2C_UNK x5EC;\n    /* +5F0 */ u32 x5F0;\n    /* +5F4 */ M2C_UNK x5F4;\n    /* +5F8 */ M2C_UNK x5F8;\n    /* +5FC */ M2C_UNK x5FC;\n    /* +5F4 */ u8 x600[0x6D8 - 0x600];\n    /// @todo expand to actual size\n    /* +6D8 */ void* x6D8[1];\n    /* +6DC */ GXColor x6DC_colorsByPlayer[4];\n    /* +6EC */ u8 x6EC[0x6F0 - 0x6EC];\n    /* +6F0 */ float unk_armor;\n    /* +6F4 */ int x6F4_unkDamage;\n    /* +6F8 */ int x6F8;\n    /* +6FC */ int x6FC;\n    /* +700 */ int x700;\n    /* +704 */ float x704;\n    /* +708 */ float x708;\n    /* +70C */ float x70C;\n    /* +710 */ float x710;\n    /* +714 */ float x714;\n    /* +718 */ float kb_ice_mul;\n    /* +718 */ u8 x71C[0x768 - 0x71C];\n    /* +768 */ float x768;\n    /* +76C */ float x76C;\n    /* +770 */ float x770;\n    /* +774 */ int x774;\n    /* +778 */ M2C_UNK x778;\n    /* +77C */ float x77C;\n    /* +780 */ M2C_UNK x780;\n    /* +784 */ M2C_UNK x784;\n    /* +788 */ float x788;\n    /* +78C */ float x78C;\n    /* +790 */ M2C_UNK x790;\n    /* +794 */ float x794;\n    /* +798 */ float x798;\n    /* +79C */ float x79C;\n    /* +7A0 */ float x7A0;\n    /* +7A4 */ float x7A4;\n    /* +7A8 */ int x7A8;\n    /* +7AC */ int x7AC;\n    /* +7B0 */ int x7B0;\n    /* +7B4 */ int x7B4_unkDamage;\n    /* +7B8 */ float x7B8;\n    /* +7BC */ float x7BC;\n    /* +7C0 */ float x7C0;\n    /* +7C4 */ float kb_smashcharge_mul;\n    /* +7C8 */ int x7C8;\n    /* +7CC */ int x7CC;\n    /* +7D0 */ int x7D0;\n    /* +7D4 */ int x7D4;\n    /* +7D8 */ int x7D8;\n    /* +7DC */ int x7DC;\n    /* +7E0 */ int x7E0;\n    /* +7E4 */ float x7E4_scaleZ;\n    /* +7E8 */ M2C_UNK x7E8;\n    /* +7EC */ M2C_UNK x7EC;\n    /* +7F0 */ int x7F0;\n    /* +7F4 */ u8 x7F4[0x814 - 0x7F4];\n    /* +814 */ int x814;\n    // lots of more data following, exact size to be determined\n};\ntypedef struct _FtCollisionData {\n    M2C_UNK x0;\n    M2C_UNK x4;\n    M2C_UNK x8;\n    M2C_UNK xC;\n    M2C_UNK x10;\n    M2C_UNK x14;\n    int x18;\n    M2C_UNK x1C;\n    M2C_UNK x20;\n    u32 x24;\n    u32 x28;\n    u32 x2C;\n    s32 x30;\n    s32 x34;\n} FtCollisionData;\ntypedef struct _DObjList {\n    usize_t count;\n    HSD_DObj** data;\n} DObjList;\nstruct UnkFloat6_Camera;\ntypedef struct _ftData {\n    /*  +0 */ struct {\n        u8 x0_fill[0x8C];\n        f32 x8C;\n        u8 x90_fill[0xFC - 0x90];\n        f32 xFC;\n        u8 x100_fill[0x16C - 0x100];\n        s32 x16C_idx;\n    }* x0;\n    /*  +4 */ void* ext_attr;\n    /*  +8 */ struct {\n        u8 x0_fill[0x10];\n        u8 unk10, unk11, unk12, unk13, unk14;\n    }* x8;\n    /*  +C */ struct S_TEMP4* xC;\n    /* +10 */ u8* x10;\n    /* +14 */ struct S_TEMP4* x14;\n    /* +18 */ u8* x18;\n    /* +1C */ M2C_UNK x1C;\n    /* +20 */ struct {\n        M2C_UNK x0;\n        int x8;\n    }* x20;\n    /* +24 */ int x24;\n    /* +28 */ u8 x28[0x3C - 0x28];\n    struct UnkFloat6_Camera* x3C;\n    s32 filler_x40[2];\n    /* 0x48 */ M2C_UNK* x48_items;\n    FtCollisionData* x4C_collisionData;\n    s32 filler_x50[2];\n    void* x58;\n} ftData;\ntypedef struct _ThrowFlags {\n    union {\n        struct {\n            u8 b0 : 1;\n            u8 b1 : 1;\n            u8 b2 : 1;\n            u8 b3 : 1;\n            u8 b4 : 1;\n            u8 b5 : 1;\n            u8 b6 : 1;\n            u8 b7 : 1;\n        };\n        u32 flags;\n    };\n} ThrowFlags;\nstruct ftCo_DatAttrs_xBC_t {\n    float size;\n    Vec3 x4;\n    Vec3 x10;\n    float x1C;\n};\ntypedef struct ftCo_DatAttrs {\n    /* +000 fp+110 */ float walk_init_vel;\n    /* +004 fp+114 */ float walk_accel;\n    /* +008 fp+118 */ float walk_max_vel;\n    /* +00C fp+11C */ float slow_walk_max;\n    /* +010 fp+120 */ float mid_walk_point;\n    /* +014 fp+124 */ float fast_walk_min;\n    /* +018 fp+128 */ float gr_friction;\n    /* +01C fp+12C */ float dash_initial_velocity;\n    /* +020 fp+130 */ float dash_run_acceleration_a;\n    /* +024 fp+134 */ float dash_run_acceleration_b;\n    /* +028 fp+138 */ float dash_run_terminal_velocity;\n    /* +02C fp+13C */ float run_animation_scaling;\n    /* +030 fp+140 */ float max_run_brake_frames;\n    /* +034 fp+144 */ float grounded_max_horizontal_velocity;\n    /* +038 fp+148 */ float jump_startup_time;\n    /* +03C fp+14C */ float jump_h_initial_velocity;\n    /* +040 fp+150 */ float jump_v_initial_velocity;\n    /* +044 fp+154 */ float ground_to_air_jump_momentum_multiplier;\n    /* +048 fp+158 */ float jump_h_max_velocity;\n    /* +04C fp+15C */ float hop_v_initial_velocity;\n    /* +050 fp+160 */ float air_jump_v_multiplier;\n    /* +054 fp+164 */ float air_jump_h_multiplier;\n    /* +058 fp+168 */ int max_jumps;\n    /* +05C fp+16C */ float grav;\n    /* +060 fp+170 */ float terminal_vel;\n    /* +064 fp+174 */ float air_drift_stick_mul;\n    /* +068 fp+178 */ float aerial_drift_base;\n    /* +06C fp+17C */ float air_drift_max;\n    /* +070 fp+180 */ float aerial_friction;\n    /* +074 fp+184 */ float fast_fall_velocity;\n    /* +078 fp+188 */ float horizontal_air_mobility_constant;\n    /* +07C fp+18C */ float jab_2_input_window;\n    /* +080 fp+190 */ float jab_3_input_window;\n    /* +084 fp+194 */ int frames_to_change_direction_on_standing_turn;\n    /* +088 fp+198 */ float weight;\n    /* +08C fp+19C */ float model_scaling;\n    /* +090 fp+1A0 */ float initial_shield_size;\n    /* +094 fp+1A4 */ float shield_break_initial_velocity;\n    /* +098 fp+1A8 */ int rapid_jab_window;\n    /* +09C fp+1AC */ float x9C;\n    /* +0A0 fp+1B0 */ int xA0;\n    /* +0A4 fp+1B4 */ int xA4;\n    /* +0A8 fp+1B8 */ float ledge_jump_horizontal_velocity;\n    /* +0AC fp+1BC */ float ledge_jump_vertical_velocity;\n    /* +0B0 fp+1C0 */ float item_throw_velocity_multiplier;\n    /* +0B4 fp+1C4 */ int xB4;\n    /* +0B8 fp+1C8 */ float xB8;\n    /* +0BC fp+1CC */ ftCo_DatAttrs_xBC_t xBC;\n    /* +0DC fp+1EC */ float xDC;\n    /* +0E0 fp+1F0 */ float kirby_b_star_damage;\n    /* +0E4 fp+1F4 */ float normal_landing_lag;\n    /* +0E8 fp+1F8 */ float landingairn_lag;\n    /* +0EC fp+1FC */ float landingairf_lag;\n    /* +0F0 fp+200 */ float landingairb_lag;\n    /* +0F4 fp+204 */ float landingairhi_lag;\n    /* +0F8 fp+208 */ float landingairlw_lag;\n    /* +0FC fp+20C */ float name_tag_height;\n    /* +100 fp+210 */ int x100;\n    /* +104 fp+214 */ float wall_jump_horizontal_velocity;\n    /* +108 fp+218 */ float wall_jump_vertical_velocity;\n    /* +10C fp+21C */ int x10C;\n    /* +110 fp+220 */ float trophy_scale;\n    /* +114 fp+224 */ Vec3 x114;\n    /* +118 fp+230 */ Vec3 x118;\n    /* +11C fp+23C */ float x11C;\n    /* +120 fp+240 */ Vec3 x120;\n    /* +124 fp+24C */ float x124;\n    /* +128 fp+250 */ int x128;\n    /* +12C fp+254 */ int x12C;\n    /* +130 fp+258 */ float x130;\n    /* +134 fp+25C */ float bubble_ratio;\n    /* +138 fp+260 */ int x138;\n    /* +13C fp+264 */ int x13C;\n    /* +140 fp+268 */ float x140;\n    /* +144 fp+26C */ int x144;\n    /* +148 fp+270 */ float respawn_platform_scale;\n    /* +14C fp+274 */ int x14C;\n    /* +150 fp+278 */ int x150;\n    /* +154 fp+27C */ int camera_zoom_target_bone;\n    /* +158 fp+280 */ Vec3 x158;\n    /* +15C fp+28C */ int x15C;\n    /* +160 fp+290 */ int weight_dependent_throw_speed_flags;\n} ftCo_DatAttrs;\ntypedef struct _FighterBone {\n    /* +0 */ HSD_JObj* joint;\n    /* +4 */ HSD_JObj* x4_jobj2; // used for interpolation\n    /* +5:0 */ u8 flags_b0 : 1;\n    /* +5:1 */ u8 flags_b1 : 1;\n    /* +5:2 */ u8 flags_b2 : 1;\n    /* +5:3 */ u8 flags_b3 : 1;\n    /* +5:4 */ u8 flags_b4 : 1;\n    /* +5:5 */ u8 flags_b5 : 1;\n    /* +5:6 */ u8 flags_b6 : 1;\n    /* +5:7 */ u8 flags_b7 : 1;\n    /* +6 */ u8 filler_x6[7];\n} FighterBone;\ntypedef struct _CameraBox {\n    u32 data_filler[2];\n    bool x8;\n    /* +C:0 */ u8 xC_b0 : 1;\n    u8 xD_fill[0x10 - 0xD];\n    Vec3 x10; // might be Vec2?\n    Vec3 x1C;\n    f32 x28;\n    Vec2 x2C;\n    Vec3 x34;\n    Vec2 x40;\n    Vec3 x48;\n} CameraBox;\ntypedef struct _ftECB {\n    Vec2 top;\n    Vec2 bottom;\n    Vec2 right;\n    Vec2 left;\n} ftECB;\ntypedef struct _ECBFlagStruct {\n    union {\n        struct {\n            u8 b0 : 1;\n            u8 b1234 : 4;\n            u8 b5 : 1;\n            u8 b6 : 1;\n            u8 b7 : 1;\n        } bits;\n        u8 raw;\n    };\n} ECBFlagStruct;\ntypedef struct SurfaceData {\n    s32 index;\n    u32 unk;\n    Vec3 normal;\n} SurfaceData;\ntypedef struct _CollData {\n    /* fp+6F0 */ HSD_GObj* x0_gobj;\n    /* fp+6F4 */ Vec3 x4_vec;\n    /* fp+700 */ Vec3 x10_vec;\n    /* fp+70C */ Vec3 x1C_vec;\n    /* fp+718 */ Vec3 x28_vec;\n    /* fp+724 */ ECBFlagStruct x34_flags;\n    /* fp+725 */ ECBFlagStruct x35_flags;\n    /* fp+726 */ s16 x36;\n    /* fp+728 */ s32 x38;\n    /* fp+72C */ s32 x3C;\n    /* fp+730 */ int ledge_id_unk0;\n    /* fp+734 */ int ledge_id_unk1;\n    /* fp+738 */ u32 x48;\n    /* fp+73C */ u32 x4C;\n    /* fp+740 */ f32 x50;\n    /* fp+744 */ f32 x54;\n    /* fp+748 */ f32 x58;\n    /* fp+74C */ f32 x5C;\n    /* fp+750 */ s32 x60;\n    /* fp+754 */ ftECB x64_ecb;\n    /* fp+774 */ ftECB x84_ecb;\n    /* fp+794 */ ftECB xA4_ecbCurrCorrect;\n    /* fp+7B4 */ ftECB xC4_ecb;\n    /* fp+7D4 */ ftECB xE4_ecb;\n    /// @todo this is the start of a substruct with size 0x2C\n    /* fp+7F4 */ s32 x104;\n    /* fp+7F8 */ union {\n        /* fp+7F8 */ struct {\n            /* fp+7F8 */ HSD_JObj* x108_joint;\n            /* fp+7FC */ HSD_JObj* x10C_joint[6];\n        };\n        /* fp+7F8 */ struct {\n            /* fp+7F8 */ f32 x108_f32;\n            /* fp+7FC */ f32 x10C_f32;\n            /* fp+800 */ f32 x110_f32;\n            /* fp+804 */ f32 x114_f32;\n            /* fp+808 */ f32 x118_f32;\n            /* fp+80C */ f32 x11C_f32;\n            /* fp+810 */ f32 x120_f32;\n        };\n    };\n    /* fp+814 */ f32 x124;\n    /* fp+818 */ f32 x128;\n    /* fp+81C */ f32 x12C;\n    /* fp+820 */ u32 x130_flags;\n    /* fp+824 */ s32 env_flags;\n    /* fp+828 */ s32 x138;\n    /* fp+82C */ s32 x13C;\n    /* fp+830 */ Vec3 x140;\n    /* fp+83C */ SurfaceData floor;\n    /* fp+850 */ SurfaceData right_wall;\n    /* fp+864 */ SurfaceData left_wall;\n    /* fp+878 */ SurfaceData ceiling;\n    /* fp+88C */ s32 x19C;\n} CollData;\n/* fp+2114 */ typedef struct _SmashAttr {\n    /* fp+2114 */ SmashState state;\n    /// number of frames fp has charged for\n    /* fp+2118 */ f32 x2118_frames;\n    /// frame that charge begins/ends\n    /* fp+211C */ f32 x211C_holdFrame;\n    /// damage multiplier\n    /* fp+2120 */ f32 x2120_damageMul;\n    /// speed multiplier?\n    /* fp+2124 */ f32 x2124_frameSpeedMul;\n    /* fp+2128 */ s32 x2128;\n    /* fp+212C */ s8 x212C;\n    /* fp+212D */ s8 x212D;\n    /* fp+212E */ s8 x212E;\n    /* fp+212F */ s8 x212F;\n    /// bool for smash sfx?\n    /* fp+2130 */ s32 x2130_sfxBool;\n    /* fp+2134 */ s8 x2134_vibrateFrame;\n    /* fp+2135 */ s8 x2135;\n    /* fp+2136 */ s8 x2136;\n    /* fp+2137 */ s8 x2137;\n    /* fp+2138 */ f32 x2138_smashSinceHitbox;\n} SmashAttr;\ntypedef struct itPickup {\n    /*  +0 */ Vec2 gr_light_offset[2];\n    /* +10 */ Vec2 gr_heavy_offset[2];\n    /* +20 */ Vec2 air_light_offset[2];\n} itPickup;\ntypedef struct {\n    HSD_Joint* joint;\n    u8 padding[0x10];\n    HSD_Archive* x14_archive;\n} UnkCostumeStruct;\nstruct UnkCostumeList {\n    UnkCostumeStruct* costume_list;\n    u8 numCostumes;\n};\nstruct S_TEMP1 {\n    FighterKind fighterKind;\n    u8 playerID;\n    u8 unk5;\n    /* +6:0 */ u8 flags_b0 : 1;\n    /* +6:1 */ u8 flags_b1 : 1;\n};\nstruct MotionState {\n    enum_t anim_id;\n    enum_t x4_flags;\n    union {\n        /// @todo Try to match without this being a @c union.\n        u32 _;\n        struct {\n            FtMoveId move_id : 8;\n            struct {\n                u8 x9_b0 : 1;\n                u8 x9_b1 : 1;\n                u8 x9_b2 : 1;\n                u8 x9_b3 : 1;\n                u8 x9_b4 : 1;\n                u8 x9_b5 : 1;\n                u8 x9_b6 : 1;\n                u8 x9_b7 : 1;\n            };\n            u8 xA;\n            u8 xB;\n        };\n    };\n    HSD_GObjEvent anim_cb;\n    HSD_GObjEvent input_cb;\n    HSD_GObjEvent phys_cb;\n    HSD_GObjEvent coll_cb;\n    HSD_GObjEvent cam_cb;\n};\nstruct S_TEMP4 {\n    s32 x0;\n    s32 x4;\n    s32 x8;\n    ftSubactionList* xC;\n    s32 x10_animCurrFlags;\n    s32 x14;\n};\nstruct Fighter_CostumeStrings {\n    char* dat_filename;\n    char* joint_name;\n    char* matanim_joint_name;\n};\nstruct Fighter_DemoStrings {\n    char* result_filename;\n    char* intro_filename;\n    char* ending_filename;\n    char* vi_wait_filename;\n};\n/// @todo Rename this and its members; investigate using it elsewhere.\n/* fp+2070 */ union Struct2070 {\n    /* fp+2070 */ struct {\n        /* fp+2070 */ s8 x2070;\n        /* fp+2070:0 */ u8 x2071_b0_3 : 4;\n        /* fp+2070:4 */ u8 x2071_b4 : 1;\n        /* fp+2070:5 */ u8 x2071_b5 : 1;\n        /* fp+2070:6 */ u8 x2071_b6 : 1;\n        /* fp+2070:7 */ u8 x2071_b7 : 1;\n        /* fp+2070:0 */ u8 x2072_b0_3 : 4;\n        /* fp+2070:4 */ u8 x2072_b4 : 1;\n        /* fp+2070:5 */ u8 x2072_b5 : 1;\n        /* fp+2070:6 */ u8 x2072_b6 : 1;\n        /* fp+2070:7 */ u8 x2072_b7 : 1;\n        /* fp+2073 */ u8 x2073;\n    };\n    /* fp+2070 */ s32 x2070_int;\n};\nstruct ftSubactionList {\n    u8 x0_opcode;\n};\nstruct ftCmdScript {\n    f32 x3E4_scriptEventTimer; // 0x3E4\n    f32 x3E8_scriptFrameTimer; // 0x3E8\n    ftSubactionList* x3EC_scriptCurrent; // 0x3EC\n    s32 x3F0_scriptLoopNum; // 0x3F0\n    void* x3F4_scriptReturn; // 0x3F4\n};\nstruct Fighter {\n    /*    fp+0 */ HSD_GObj* gobj;\n    /*    fp+4 */ FighterKind kind;\n    /*    fp+8 */ s32 x8_spawnNum;\n    /*    fp+C */ u8 player_id;\n    /*   fp+10 */ FtMotionId motion_id;\n    /*   fp+14 */ enum_t anim_id;\n    /*   fp+18 */ s32 x18;\n    /*   fp+1C */ MotionState* x1C_actionStateList;\n    /*   fp+20 */ MotionState* x20_actionStateList;\n    /*   fp+24 */ struct S_TEMP4* x24;\n    /*   fp+28 */ u8* x28;\n    /*   fp+2C */ float facing_dir;\n    /*   fp+30 */ float facing_dir1;\n    /*   fp+34 */ Vec3 x34_scale;\n    /*   fp+40 */ float x40;\n    /*   fp+44 */ Mtx x44_mtx;\n    /*   fp+74 */ Vec3 x74_anim_vel;\n    /*   fp+80 */ Vec3 self_vel;\n    /*   fp+8C */ Vec3 x8c_kb_vel;\n    /*   fp+98 */ Vec3 x98_atk_shield_kb;\n    /*   fp+A4 */ Vec3 xA4_unk_vel;\n    /*   fp+B0 */ Vec3 cur_pos;\n    /*   fp+BC */ Vec3 prev_pos;\n    /*   fp+C8 */ Vec3 pos_delta;\n    /*   fp+D4 */ Vec3 xD4_unk_vel;\n    /*   fp+E0 */ GroundOrAir ground_or_air;\n    /*   fp+E4 */ float xE4_ground_accel_1;\n    /*   fp+E8 */ float xE8_ground_accel_2;\n    /*   fp+EC */ float gr_vel;\n    /*   fp+F0 */ float xF0_ground_kb_vel;\n    /*   fp+F4 */ float xF4_ground_attacker_shield_kb_vel;\n    /*   fp+F8 */ Vec2 xF8_playerNudgeVel;\n    /*  fp+100 */ float x100;\n    /*  fp+104 */ u8 x104;\n    /*  fp+105 */ s8 x105;\n    /*  fp+106 */ s8 x106;\n    /*  fp+107 */ s8 x107;\n    /*  fp+108 */ HSD_Joint* x108_costume_joint;\n    /*  fp+10C */ ftData* ft_data;\n    /*  fp+110 */ ftCo_DatAttrs co_attrs;\n    /*  fp+294 */ itPickup x294_itPickup;\n    /*  fp+2C4 */ Vec2 x2C4;\n    /*  fp+2CC */ ftDonkeyAttributes* x2CC;\n    /*  fp+2D0 */ void* x2D0;\n    /*  fp+2D4 */ void* dat_attrs;\n    /*  fp+2D8 */ void* x2D8_specialAttributes2;\n    /*  fp+2DC */ float x2DC;\n    /*  fp+2E0 */ float x2E0;\n    /*  fp+2E4 */ float x2E4;\n    /*  fp+2E8 */ float x2E8;\n    /*  fp+2EC */ float x2EC;\n    /*  fp+2F0 */ float x2F0;\n    /*  fp+2F4 */ M2C_UNK x2F4;\n    /*  fp+2F8 */ u8 filler_x2F0[0x3E0 - 0x2F8];\n    /*  fp+3E0 */ u32 x3E0;\n    /*  fp+3E4 */ ftCmdScript x3E4_fighterCmdScript;\n    /*  fp+3F8 */ u8 x3F8[0x430 - 0x3F8];\n    /*  fp+430 */ M2C_UNK x430;\n    /*  fp+3F8 */ u8 x434[0x588 - 0x434];\n    /*  fp+588 */ HSD_LObj* x588;\n    /*  fp+58C */ s32 x58C;\n    /*  fp+590 */ s32 x590;\n    /*  fp+594 */ union {\n        struct {\n            /* fp+594:0 */ u8 x594_b0 : 1;\n            /* fp+594:1 */ u8 x594_b1 : 1;\n            /* fp+594:2 */ u8 x594_b2 : 1;\n            /* fp+594:3 */ u8 x594_b3 : 1;\n            /* fp+594:4 */ u8 x594_b4 : 1;\n            /* fp+594:5 */ u8 x594_b5 : 1;\n            /* fp+594:6 */ u8 x594_b6 : 1;\n            /* fp+594:7 */ u8 x594_b7 : 1;\n            /* fp+596 */ struct {\n                /* fp+596:0 */ u8 x0 : 7;\n                /* fp+596:7 */ u16 x7 : 3;\n            } x596_bits;\n        };\n        /* fp+594 */ s32 x594_s32;\n    };\n    /*  fp+598 */ s32 x598;\n    /*  fp+59C */ M2C_UNK x59C;\n    /*  fp+5A0 */ M2C_UNK x5A0;\n    /*  fp+5A4 */ u8 filler_x5A4[0x5B8 - 0x5A4];\n    /*  fp+5B8 */ s32 x5B8;\n    /*  fp+5BC */ s32 x5BC;\n    /*  fp+598 */ u8 filler_x598[0x5C8 - 0x5C0];\n    /*  fp+5A0 */ void* x5C8;\n    /*  fp+5CC */ u8 filler_x5CC[0x5E8 - 0x5CC];\n    /*  fp+5E8 */ FighterBone* parts;\n    /*  fp+5EC */ DObjList dobj_list;\n    /*  fp+5F4 */ s8 x5F4;\n    /*  fp+5F5 */ s8 x5F5;\n    /*  fp+5F6 */ s8 x5F6;\n    /*  fp+5F7 */ s8 x5F7;\n    /*  fp+5F8 */ s8 x5F8;\n    /*  fp+5FC */ u8 filler_x5FC[0x60C - 0x5F9];\n    /*  fp+60C */ void* x60C;\n    /*  fp+610 */ union {\n        /* fp+610 */ GXColor x610_color_rgba[2];\n        /* fp+610 */ struct {\n            /* fp+610 */ s32 x610;\n            /* fp+614 */ GXColor x614;\n        };\n    };\n    /*  fp+618 */ u8 x618_player_id;\n    /*  fp+619 */ u8 x619_costume_id;\n    /*  fp+61A */ u8 x61A_controller_index;\n    /*  fp+61B */ u8 x61B_team;\n    /*  fp+61C */ u8 x61C;\n    /*  fp+61D */ u8 x61D;\n    /*  fp+61E */ u8 filler_x61E[0x620 - 0x61E];\n    /*  fp+620 */ struct {\n        /*  fp+620 */ Vec2 lstick;\n        /*  fp+628 */ Vec2 lstick1;\n        /*  fp+630 */ float x630;\n        /*  fp+634 */ float x634;\n        /*  fp+638 */ Vec2 cstick;\n        /*  fp+640 */ Vec2 cstick1;\n        /*  fp+648 */ float x648;\n        /*  fp+64C */ float x64C;\n        /*  fp+650 */ float x650;\n        /*  fp+654 */ float x654;\n        /*  fp+658 */ float x658;\n        /*  fp+65C */ HSD_Pad held_inputs;\n        /*  fp+660 */ s32 x660;\n        /*  fp+664 */ s32 x664;\n        /*  fp+668 */ HSD_Pad x668;\n        /*  fp+66C */ s32 x66C;\n    } input;\n    /*  fp+670 */ u8 x670_timer_lstick_tilt_x;\n    /*  fp+671 */ u8 x671_timer_lstick_tilt_y;\n    /*  fp+672 */ u8 x672_input_timer_counter;\n    /*  fp+673 */ u8 x673;\n    /*  fp+674 */ u8 x674;\n    /*  fp+674 */ u8 x675;\n    /*  fp+676 */ u8 x676_x;\n    /*  fp+677 */ u8 x677_y;\n    /*  fp+678 */ u8 x678;\n    /*  fp+679 */ u8 x679_x;\n    /*  fp+67A */ u8 x67A_y;\n    /*  fp+67B */ u8 x67B;\n    /*  fp+67C */ u8 x67C;\n    /*  fp+67D */ u8 x67D;\n    /*  fp+67E */ u8 x67E;\n    /*  fp+67F */ u8 x67F;\n    /*  fp+680 */ u8 x680;\n    /*  fp+681 */ u8 x681;\n    /*  fp+682 */ u8 x682;\n    /*  fp+683 */ u8 x683;\n    /*  fp+684 */ u8 x684;\n    /*  fp+685 */ u8 x685;\n    /*  fp+686 */ u8 x686;\n    /*  fp+687 */ u8 x687;\n    /*  fp+688 */ u8 x688;\n    /*  fp+689 */ u8 x689;\n    /*  fp+68A */ u8 x68A;\n    /*  fp+68B */ u8 x68B;\n    /*  fp+68C */ Vec3 x68C_transNPos;\n    /*  fp+698 */ Vec3 x698;\n    /*  fp+6A4 */ Vec3 x6A4_transNOffset;\n    /*  fp+6B0 */ Vec3 x6B0;\n    /*  fp+6BC */ float lstick_angle;\n    /*  fp+6C0 */ Vec3 x6C0;\n    /*  fp+6CC */ Vec3 x6CC;\n    /*  fp+6D8 */ Vec3 x6D8;\n    /*  fp+6E4 */ Vec3 x6E4;\n    /*  fp+6F0 */ CollData coll_data;\n    /*  fp+890 */ CameraBox* x890_cameraBox;\n    /*  fp+894 */ float cur_anim_frame;\n    /*  fp+898 */ float x898_unk;\n    /*  fp+89C */ float frame_spd_mul;\n    /*  fp+8A0 */ float x8A0_unk;\n    /*  fp+8A4 */ float x8A4_animBlendFrames;\n    /*  fp+8A8 */ float x8A8_unk;\n    /*  fp+8AC */ HSD_JObj* x8AC_animSkeleton;\n    /*  fp+8AC */ u8 filler_x8AC[0x914 - 0x8B0];\n    /*  fp+914 */ HitCapsule x914[4];\n    /*  fp+DF4 */ HitCapsule xDF4[2];\n    /* fp+1064 */ HitCapsule x1064_thrownHitbox;\n    /* fp+119C */ u8 x119C_teamUnk;\n    /* fp+119D */ u8 grabber_unk1;\n    /* fp+119E */ u8 x119E_hurtboxNum;\n    /* fp+119F */ u8 x119F;\n    /* fp+11A0 */ HurtCapsule x11A0_fighterHurtbox[15];\n    /* fp+1614 */ M2C_UNK x1614;\n    /* fp+1618 */ u8 filler_x1618[0x166C - 0x1618];\n    /* fp+166C */ u32 x166C;\n    /* fp+1670 */ M2C_UNK x1670;\n    /* fp+1674 */ u8 filler_x1674[0x1828 - 0x1674];\n    /* fp+1828 */ enum_t x1828;\n    /* fp+182C */ struct dmg {\n        /* fp+182C */ float x182c_behavior;\n        /* fp+1830 */ float x1830_percent;\n        /* fp+1834 */ float x1834;\n        /* fp+1838 */ float x1838_percentTemp;\n        /* fp+183C */ int x183C_applied;\n        /* fp+1840 */ int x1840;\n        /* fp+1844 */ float x1844_direction;\n        /* fp+1848 */ int x1848_kb_angle;\n        /* fp+184C */ int x184c_damaged_hurtbox;\n        /* fp+1850 */ float kb_applied;\n        /* fp+1854 */ Vec3 x1854_collpos;\n        /* fp+1860 */ uint x1860;\n        /* fp+1864 */ int x1864;\n        /* fp+1868 */ HSD_GObj* x1868_source;\n        /* fp+186C */ int x186c;\n        /* fp+1870 */ int x1870;\n        /* fp+1874 */ int x1874;\n        /* fp+1878 */ int x1878;\n        /* fp+187C */ int x187c;\n        /* fp+1880 */ int x1880;\n        /* fp+1884 */ int x1884;\n        /* fp+1888 */ int x1888;\n        /* fp+188C */ int x188c;\n        /* fp+1890 */ int x1890;\n        /* fp+1894 */ int x1894;\n        /* fp+1898 */ int x1898;\n        /* fp+189C */ float x189C_unk_num_frames;\n        /* fp+18A0 */ float x18a0;\n        /// kb magnitude\n        /* fp+18A4 */ float x18A4_knockbackMagnitude;\n        /* fp+18A8 */ float x18A8;\n        /// in frames\n        /* fp+18AC */ int x18ac_time_since_hit;\n        /* fp+18B0 */ float armor0;\n        /* fp+18B4 */ float armor1;\n        /* fp+18B8 */ float x18B8;\n        /* fp+18BC */ float x18BC;\n        /* fp+18C0 */ int x18C0;\n        /// damage source ply number\n        /* fp+18C4 */ int x18c4_source_ply;\n        /* fp+18C8 */ int x18C8;\n        /* fp+18CC */ int x18CC;\n        /* fp+18D0 */ int x18D0;\n        /* fp+18D4 */ int x18d4;\n        /* fp+18D8 */ int x18d8;\n        /* fp+18DC */ int x18dc;\n        /* fp+18E0 */ float kb_applied1;\n        /* fp+18E4 */ int x18e4;\n        /* fp+18E8 */ int x18e8;\n        /// Last Move Instance This Player Was Hit by\n        /* fp+18EC */ u16 x18ec_instancehitby;\n        /* fp+18F0 */ int x18F0;\n        /* fp+18F4 */ int x18F4;\n        /* fp+18F8 */ u8 x18F8;\n        /* fp+18F9 */ u8 x18f9;\n        /* fp+18FA */ u16 x18fa_model_shift_frames;\n        /* fp+18FC */ u8 x18FC;\n        /* fp+18FD */ u8 x18FD;\n        /* fp+1900 */ float x1900;\n        /* fp+1904 */ float x1904;\n        /* fp+1908 */ enum_t x1908;\n        /* fp+190C */ M2C_UNK x190C;\n        /* fp+1910 */ int x1910;\n        /* fp+1914 */ int x1914;\n        /* fp+1918 */ int x1918;\n        /* fp+191C */ float x191C;\n        /* fp+1920 */ float x1920;\n        /* fp+1924 */ int x1924;\n        /* fp+1928 */ float x1928;\n        /* fp+192C */ float x192c;\n        /* fp+1930 */ int x1930;\n        /* fp+1934 */ int x1934;\n        /* fp+1938 */ int x1938;\n        /* fp+193C */ int x193c;\n        /* fp+1940 */ int x1940;\n        /* fp+1944 */ int x1944;\n        /* fp+1948 */ int x1948;\n        /* fp+194C */ int x194C;\n        /* fp+1950 */ int x1950;\n        /* fp+1954 */ float x1954;\n        /* fp+1958 */ float x1958;\n        /* fp+195C */ float x195c_hitlag_frames;\n    } dmg;\n    /* fp+1960 */ float x1960_vibrateMult;\n    /* fp+1964 */ float x1964;\n    /* fp+1968 */ u8 x1968_jumpsUsed;\n    /* fp+1969 */ u8 x1969_walljumpUsed;\n    /* fp+196C */ float hitlag_mul;\n    /* fp+1970 */ enum_t unk_msid;\n    /* fp+1974 */ Item_GObj* item_gobj;\n    /* fp+1978 */ Item_GObj* x1978;\n    /* fp+197C */ HSD_GObj* x197C;\n    /* fp+1980 */ HSD_GObj* x1980;\n    /* fp+1984 */ Item_GObj* x1984_heldItemSpec;\n    /* fp+1988 */ s32 x1988;\n    /* fp+198C */ s32 x198C;\n    /* fp+1990 */ s32 x1990;\n    /* fp+1994 */ s32 x1994;\n    /* fp+1998 */ float shield_health;\n    /* fp+199C */ float lightshield_amount;\n    /* fp+19A0 */ s32 x19A0_shieldDamageTaken;\n    /* fp+19A4 */ int x19A4;\n    /* fp+19A8 */ void* x19A8;\n    /* fp+19AC */ float specialn_facing_dir;\n    /* fp+19B0 */ enum_t x19B0;\n    /* fp+19B4 */ float shield_unk0;\n    /* fp+19B8 */ float shield_unk1;\n    /* fp+19BC */ s32 x19BC_shieldDamageTaken3;\n    /* fp+19C0 */ HitResult shield_hit;\n    /* fp+19E4 */ HitResult reflect_hit;\n    /* fp+1A08 */ HitResult absorb_hit;\n    /* fp+1A2C */ struct {\n        /* fp+1A2C */ float x1A2C_reflectHitDirection;\n        /* fp+1A30 */ s32 x1A30_maxDamage;\n        /* fp+1A34 */ float x1A34_damageMul;\n        /* fp+1A38 */ float x1A38_speedMul;\n        /// % damage over the maximum reflectable damage threshold\n        /* fp+1A3C */ s32 x1A3C_damageOver;\n    } ReflectAttr;\n    /* fp+1A40 */ struct {\n        /* fp+1A40 */ float x1A40_absorbHitDirection;\n        /// unconfirmed?\n        /* fp+1A44 */ s32 x1A44_damageTaken;\n        /// unconfirmed?\n        /* fp+1A48 */ s32 x1A48_hitsTaken;\n    } AbsorbAttr;\n    /* fp+1A4C */ float x1A4C;\n    /* fp+1A50 */ s8 x1A50;\n    /* fp+1A51 */ s8 x1A51;\n    /* fp+1A52 */ u8 x1A52;\n    /* fp+1A53 */ u8 x1A53;\n    /* fp+1A54 */ s32 x1A54;\n    /* fp+1A58 */ Fighter_GObj* victim_gobj;\n    /* fp+1A5C */ Fighter_GObj* x1A5C;\n    /* fp+1A60 */ u32 x1A60;\n    /* fp+1A64 */ s32 x1A64;\n    /* fp+1A68 */ u16 x1A68;\n    /* fp+1A6A */ u16 x1A6A;\n    /* fp+1A6C */ float x1A6C;\n    /* fp+1A70 */ Vec3 x1A70;\n    /* fp+1A7C */ Vec3 x1A7C;\n    /* fp+1A88 */ HSD_Pad x1A88;\n    /* fp+1A8C */ u8 x1A8C;\n    /* fp+1A8D */ u8 x1A8D;\n    /* fp+1A8E */ u8 x1A8E;\n    /* fp+1A8F */ u8 x1A8F;\n    /* fp+1A90 */ u8 x1A90;\n    /* fp+1A91 */ u8 x1A91;\n    /* fp+1A92 */ u8 x1A92;\n    /* fp+1A93 */ u8 x1A93;\n    /* fp+1A94 */ u32 x1A94;\n    /* fp+1A98 */ u32 x1A98;\n    /* fp+1A9C */ s32 x1A9C;\n    /* fp+1AA0 */ M2C_UNK x1AA0;\n    /* fp+1AA4 */ M2C_UNK x1AA4;\n    /* fp+1AA8 */ M2C_UNK x1AA8;\n    /* fp+1AAC */ M2C_UNK x1AAC;\n    /* fp+1AB0 */ M2C_UNK x1AB0;\n    /* fp+1AB4 */ M2C_UNK x1AB4;\n    /* fp+1AB8 */ M2C_UNK x1AB8;\n    /* fp+1ABC */ M2C_UNK x1ABC;\n    /* fp+1AC0 */ M2C_UNK x1AC0;\n    /* fp+1AC4 */ M2C_UNK x1AC4;\n    /* fp+1AC8 */ M2C_UNK x1AC8;\n    /* fp+1ACC */ M2C_UNK x1ACC;\n    /* fp+1AD0 */ M2C_UNK x1AD0;\n    /* fp+1AD4 */ M2C_UNK x1AD4;\n    /* fp+1AD8 */ M2C_UNK x1AD8;\n    /* fp+1ADC */ float x1ADC;\n    /* fp+1A9C */ u8 x1AE0[0x2004 - 0x1AE0];\n    /* fp+2008 */ s32 x2004;\n    /* fp+2008 */ s32 x2008;\n    /* fp+200C */ s32 x200C;\n    /* fp+2010 */ s32 x2010;\n    /* fp+2014 */ s32 x2014;\n    /* fp+2018 */ s32 x2018;\n    /* fp+201C */ s32 x201C;\n    /* fp+2020 */ s8 x2020;\n    /* fp+2021 */ s8 x2021;\n    /* fp+2022 */ s8 x2022;\n    /* fp+2024 */ s32 x2024;\n    /* fp+2028 */ s32 x2028;\n    /* fp+202C */ s32 x202C;\n    /* fp+2030 */ s32 x2030;\n    /* fp+2034 */ s32 x2034;\n    /* fp+2038 */ s32 x2038;\n    /* fp+203C */ s32 x203C;\n    /* fp+2040 */ void* x2040;\n    /* fp+203C */ u8 filler_x203C[0x2064 - 0x2044];\n    /* fp+2064 */ int x2064_ledgeCooldown;\n    /* fp+2068 */ enum_t x2068_attackID;\n    /* fp+206C */ u8 filler_x206C[0x2070 - 0x206C];\n    /* fp+2070 */ union Struct2070 x2070;\n    /* fp+2074 */ u8 filler_x2074[0x208C - 0x2074];\n    /* fp+208C */ s32 x208C;\n    /* fp+2090 */ u16 x2090;\n    /* fp+2092 */ u16 x2092;\n    /// GObj pointer of combo victim?\n    /* fp+2094 */ Fighter_GObj* x2094;\n    /* fp+2098 */ u16 x2098;\n    /* fp+209A */ u16 x209A;\n    /* fp+209C */ s16 x209C;\n    /* fp+20A0 */ HSD_JObj* x20A0_accessory;\n    /* fp+20A4 */ s32 x20A4;\n    /* fp+20A8 */ s32 x20A8;\n    /* fp+20AC */ HSD_GObj* unk_gobj;\n    /* fp+20B0 */ u8 filler_x20B0[0x2100 - 0x20B0];\n    /* fp+2100 */ s8 x2100;\n    /* fp+2101 */ union {\n        /* fp+2101 */ u8 x2101;\n        /* fp+2101 */ struct {\n            /* fp+2101:0 */ u8 x2101_bits_0to6 : 7;\n            /* fp+2101:7 */ u8 x2101_bits_8 : 1;\n        };\n    };\n    /* fp+2102 */ s8 x2102;\n    /* fp+2103 */ s8 x2103;\n    /* fp+2104 */ s32 x2104;\n    /* fp+2108 */ s32 x2108;\n    /* fp+210C */ u8 x210C_walljumpInputTimer;\n    /* fp+210C */ u8 filler_x210C[3];\n    /* fp+2110 */ float x2110_walljumpWallSide;\n    /* fp+2114 */ SmashAttr smash_attrs;\n    /* fp+213C */ s32 x213C;\n    /* fp+2140 */ float x2140;\n    /* fp+2144 */ s32 x2144;\n    /* fp+2148 */ s32 x2148;\n    /* fp+214C */ s32 x214C;\n    /* fp+2150 */ s32 x2150;\n    /* fp+2154 */ s32 x2154;\n    /* fp+2158 */ s32 x2158;\n    /* fp+215C */ s32 x215C;\n    /* fp+2160 */ s32 x2160;\n    /* fp+2164 */ int x2164;\n    /* fp+2168 */ int x2168;\n    /* fp+216C */ float unk_grab_val;\n    /* fp+2170 */ float x2170;\n    /* fp+2174 */ u8 filler_x2174[0x2180 - 0x2174];\n    /* fp+2180 */ s32 x2180;\n    /* fp+2184 */ HSD_JObj* x2184;\n    /* fp+2188 */ S32Vec2 x2188;\n    /// callback struct. Not all of them used by fighter.c.\n    /* fp+2190 */ HSD_GObjEvent grab_cb;\n    /* fp+2194 */ HSD_GObjEvent x2194;\n    /* fp+2198 */ HSD_GObjInteraction grabbed_cb;\n    /* fp+219C */ HSD_GObjEvent input_cb;\n    /* fp+21A0 */ HSD_GObjEvent anim_cb;\n    /* fp+21A4 */ HSD_GObjEvent phys_cb;\n    /* fp+21A8 */ HSD_GObjEvent coll_cb;\n    /* fp+21AC */ HSD_GObjEvent cam_cb;\n    /* fp+21B0 */ HSD_GObjEvent accessory1_cb;\n    /* fp+21B4 */ HSD_GObjEvent accessory2_cb;\n    /* fp+21B8 */ HSD_GObjEvent accessory3_cb;\n    /* fp+21BC */ HSD_GObjEvent accessory4_cb;\n    /* fp+21C0 */ HSD_GObjEvent deal_dmg_cb;\n    /* fp+21C4 */ HSD_GObjEvent shield_hit_cb;\n    /* fp+21C8 */ HSD_GObjEvent reflect_hit_cb;\n    /* fp+21CC */ HSD_GObjEvent x21CC;\n    /* fp+21D0 */ HSD_GObjEvent hitlag_cb;\n    /* fp+21D4 */ HSD_GObjEvent pre_hitlag_cb;\n    /* fp+21D8 */ HSD_GObjEvent post_hitlag_cb;\n    /* fp+21DC */ HSD_GObjEvent take_dmg_cb;\n    /* fp+21E0 */ HSD_GObjEvent death1_cb;\n    /// @remarks Used. Internally Dead_Proc as evidenced by 800F5430.\n    /* fp+21E4 */ HSD_GObjEvent death2_cb;\n    /* fp+21E8 */ HSD_GObjEvent death3_cb;\n    /* fp+21EC */ HSD_GObjEvent x21EC;\n    /* fp+21F0 */ HSD_GObjEvent x21F0;\n    /* fp+21F4 */ HSD_GObjEvent x21F4;\n    /* fp+21F8 */ HSD_GObjEvent x21F8;\n    /* fp+21FC */ UnkFlagStruct x21FC_flag;\n    /* fp+21FC */ u8 filler_x21FC[0x2200 - 0x21FD];\n    /* fp+2200 */ u32 cmd_vars[4];\n    /* fp+2210 */ union {\n        u32 throw_flags;\n        struct {\n            u8 throw_flags_b0 : 1;\n            u8 throw_flags_b1 : 1;\n            u8 throw_flags_b2 : 1;\n            u8 throw_flags_b3 : 1;\n            u8 throw_flags_b4 : 1;\n            u8 throw_flags_b5 : 1;\n            u8 throw_flags_b6 : 1;\n            u8 throw_flags_b7 : 1;\n        };\n    };\n    /* fp+2214 */ float x2214;\n    union {\n        /* fp+2218 */ u8 x2218;\n        /* fp+2218 */ struct {\n            /* fp+2218:0 */ u8 allow_interrupt : 1;\n            /* fp+2218:1 */ u8 x2218_b1 : 1;\n            /* fp+2218:2 */ u8 x2218_b2 : 1;\n            /* fp+2218:3 */ u8 x2218_b3 : 1;\n            /* fp+2218:4 */ u8 x2218_b4 : 1;\n            /* fp+2218:5 */ u8 x2218_b5 : 1;\n            /* fp+2218:6 */ u8 x2218_b6 : 1;\n            /* fp+2218:7 */ u8 x2218_b7 : 1;\n        };\n    };\n    union {\n        /* fp+2219 */ u8 x2219;\n        /* fp+2219 */ struct {\n            /* fp+2219:0 */ u8 x2219_b0 : 1;\n            /* fp+2219:1 */ u8 x2219_b1 : 1;\n            /* fp+2219:2 */ u8 x2219_b2 : 1;\n            /* fp+2219:3 */ u8 x2219_b3 : 1;\n            /* fp+2219:4 */ u8 x2219_b4 : 1;\n            /* fp+2219:5 */ u8 x2219_b5 : 1;\n            /* fp+2219:6 */ u8 x2219_b6 : 1;\n            /* fp+2219:7 */ u8 x2219_b7 : 1;\n        };\n    };\n    /* fp+221A:0 */ u8 x221A_b0 : 1;\n    /* fp+221A:1 */ u8 x221A_b1 : 1;\n    /* fp+221A:2 */ u8 x221A_b2 : 1;\n    /* fp+221A:3 */ u8 x221A_b3 : 1;\n    /* fp+221A:4 */ u8 x221A_b4 : 1;\n    /* fp+221A:5 */ u8 x221A_b5 : 1;\n    /* fp+221A:6 */ u8 x221A_b6 : 1;\n    /* fp+221A:7 */ u8 x221A_b7 : 1;\n    /* fp+221B */ union {\n        /* fp+221B */ u8 x221B;\n        /* fp+221B */ struct {\n            /* fp+221B:0 */ u8 x221B_b0 : 1;\n            /* fp+221B:1 */ u8 x221B_b1 : 1;\n            /* fp+221B:2 */ u8 x221B_b2 : 1;\n            /* fp+221B:3 */ u8 x221B_b3 : 1;\n            /* fp+221B:4 */ u8 x221B_b4 : 1;\n            /* fp+221B:5 */ u8 x221B_b5 : 1;\n            /* fp+221B:6 */ u8 x221B_b6 : 1;\n            /* fp+221B:7 */ u8 x221B_b7 : 1;\n        };\n    };\n    /* fp+221C */ union {\n        /* fp+221C */ struct {\n            /* fp+221C */ u8 x221C;\n            /* fp+221D */ u8 x221D;\n        };\n        /* fp+221C */ struct {\n            /* fp+221C:0 */ u8 x221C_b0 : 1;\n            /* fp+221C:1 */ u8 x221C_b1 : 1;\n            /* fp+221C:2 */ u8 x221C_b2 : 1;\n            /* fp+221C:3 */ u8 x221C_b3 : 1;\n            /* fp+221C:4 */ u8 x221C_b4 : 1;\n            /* fp+221C:5 */ u8 x221C_b5 : 1;\n            /* fp+221C:6 */ u8 x221C_b6 : 1;\n            /* fp+221C:7 */ u8 x221C_b7 : 1;\n            /* fp+221D:0 */ u8 x221D_b0 : 1;\n            /* fp+221D:1 */ u8 x221D_b1 : 1;\n            /* fp+221D:2 */ u8 x221D_b2 : 1;\n            /* fp+221D:3 */ u8 x221D_b3 : 1;\n            /* fp+221D:4 */ u8 x221D_b4 : 1;\n            /* fp+221D:5 */ u8 x221D_b5 : 1;\n            /* fp+221D:6 */ u8 x221D_b6 : 1;\n            /* fp+221D:7 */ u8 x221D_b7 : 1;\n        };\n        /* fp+221C */ struct {\n            /* fp+221C:0 */ u16 x221C_u16_x : 7;\n            /* fp+221C:7 */ u16 x221C_u16_y : 3;\n            /* fp+221D:2 */ u16 x221C_u16_z : 6;\n        };\n    };\n    /* fp+221E:0 */ u8 x221E_b0 : 1;\n    /* fp+221E:1 */ u8 x221E_b1 : 1;\n    /* fp+221E:2 */ u8 x221E_b2 : 1;\n    /* fp+221E:3 */ u8 x221E_b3 : 1;\n    /* fp+221E:4 */ u8 x221E_b4 : 1;\n    /* fp+221E:5 */ u8 x221E_b5 : 1;\n    /* fp+221E:6 */ u8 x221E_b6 : 1;\n    /* fp+221E:7 */ u8 x221E_b7 : 1;\n    /* fp+221F:0 */ u8 x221F_b0 : 1;\n    /* fp+221F:1 */ u8 x221F_b1 : 1;\n    /* fp+221F:2 */ u8 x221F_b2 : 1;\n    /* fp+221F:3 */ u8 x221F_b3 : 1;\n    /* fp+221F:4 */ u8 x221F_b4 : 1;\n    /* fp+221F:5 */ u8 x221F_b5 : 1;\n    /* fp+221F:6 */ u8 x221F_b6 : 1;\n    /* fp+221F:7 */ u8 x221F_b7 : 1;\n    /* fp+2220 */ union {\n        /* fp+2220 */ struct {\n            /* fp+2220:0 */ u8 b0 : 3;\n            /* fp+2220:3 */ u8 b3 : 1;\n            /* fp+2220:4 */ u8 b4 : 1;\n            /* fp+2220:5 */ u8 b5 : 1;\n            /* fp+2220:6 */ u8 b6 : 1;\n            /* fp+2220:7 */ u8 b7 : 1;\n        } bits;\n        /* fp+2220 */ u8 flags;\n    } x2220_flag;\n    /* fp+2221 */ union {\n        /* fp+2221 */ u8 x2221;\n        /* fp+2221 */ struct {\n            /* fp+2221:0 */ u8 x2221_b0 : 1;\n            /* fp+2221:1 */ u8 x2221_b1 : 1;\n            /* fp+2221:2 */ u8 x2221_b2 : 1;\n            /* fp+2221:3 */ u8 x2221_b3 : 1;\n            /* fp+2221:4 */ u8 x2221_b4 : 1;\n            /* fp+2221:5 */ u8 x2221_b5 : 1;\n            /* fp+2221:6 */ u8 x2221_b6 : 1;\n            /* fp+2221:7 */ u8 x2221_b7 : 1;\n        };\n    };\n    /* fp+2222:0 */ u8 x2222_b0 : 1;\n    /* fp+2222:1 */ u8 x2222_b1 : 1;\n    /* fp+2222:2 */ u8 x2222_b2 : 1;\n    /* fp+2222:3 */ u8 x2222_b3 : 1;\n    /* fp+2222:4 */ u8 x2222_b4 : 1;\n    /* fp+2222:5 */ u8 x2222_b5 : 1;\n    /* fp+2222:6 */ u8 x2222_b6 : 1;\n    /* fp+2222:7 */ u8 x2222_b7 : 1;\n    /* fp+2223 */ UnkFlagStruct x2223_flag;\n    /* fp+2224:0 */ u8 x2224_b0 : 1;\n    /* fp+2224:1 */ u8 x2224_b1 : 1;\n    /* fp+2224:2 */ u8 x2224_b2 : 1;\n    /* fp+2224:3 */ u8 x2224_b3 : 1;\n    /* fp+2224:4 */ u8 x2224_b4 : 1;\n    /* fp+2224:5 */ u8 x2224_b5 : 1;\n    /* fp+2224:6 */ u8 x2224_b6 : 1;\n    /* fp+2224:7 */ u8 x2224_b7 : 1;\n    /* fp+2225:0 */ u8 x2225_b0 : 1;\n    /* fp+2225:1 */ u8 x2225_b1 : 1;\n    /* fp+2225:2 */ u8 x2225_b2 : 1;\n    /* fp+2225:3 */ u8 x2225_b3 : 1;\n    /* fp+2225:4 */ u8 x2225_b4 : 1;\n    /* fp+2225:5 */ u8 x2225_b5 : 1;\n    /* fp+2225:6 */ u8 x2225_b6 : 1;\n    /* fp+2225:7 */ u8 x2225_b7 : 1;\n    /* fp+2226:0 */ u8 x2226_b0 : 1;\n    /* fp+2226:1 */ u8 x2226_b1 : 1;\n    /* fp+2226:2 */ u8 x2226_b2 : 1;\n    /* fp+2226:3 */ u8 x2226_b3 : 1;\n    /* fp+2226:4 */ u8 x2226_b4 : 1;\n    /* fp+2226:5 */ u8 x2226_b5 : 1;\n    /* fp+2226:6 */ u8 x2226_b6 : 1;\n    /* fp+2226:7 */ u8 x2226_b7 : 1;\n    /* fp+2227 */ UnkFlagStruct x2227_flag;\n    /* fp+2228:0 */ u8 x2228_b0 : 1;\n    /* fp+2228:1 */ u8 x2228_b1 : 1;\n    /* fp+2228:2 */ u8 x2228_b2 : 1;\n    /* fp+2228:3 */ u8 x2228_b3 : 2;\n    /* fp+2228:5 */ u8 x2228_b5 : 1;\n    /* fp+2228:6 */ u8 x2228_b6 : 1;\n    /* fp+2228:7 */ u8 x2228_b7 : 1;\n    /* fp+2229:0 */ u8 x2229_b0 : 1;\n    /* fp+2229:1 */ u8 x2229_b1 : 1;\n    /* fp+2229:2 */ u8 x2229_b2 : 1;\n    /* fp+2229:3 */ u8 x2229_b3 : 1;\n    /* fp+2229:4 */ u8 x2229_b4 : 1;\n    /* fp+2229:5 */ u8 x2229_b5_no_normal_motion : 1;\n    /* fp+2229:6 */ u8 x2229_b6 : 1;\n    /* fp+2229:7 */ u8 x2229_b7 : 1;\n    /* fp+222A */ UnkFlagStruct x222A_flag;\n    /* fp+222B */ u8 filler_x222B;\n    /* fp+222C */ union Fighter_FighterVars {\n        /* fp+222C */ u8 _[0x100];\n        /* fp+222C */ struct ftCaptain_FighterVars ca, gn;\n        /* fp+222C */ struct ftDonkey_FighterVars dk;\n        /* fp+222C */ struct ftFox_FighterVars fx, fc;\n        /* fp+222C */ struct ftGameWatch_FighterVars gw;\n        /* fp+222C */ struct ftKb_FighterVars kb;\n        /* fp+222C */ struct ftKoopa_FighterVars kp, gk;\n        /* fp+222C */ struct ftLk_FighterVars lk;\n        /* fp+222C */ struct ftLuigi_FighterVars lg;\n        /* fp+222C */ struct ftMario_FighterVars mr;\n        /* fp+222C */ struct ftMars_FighterVars ms;\n        /* fp+222C */ struct ftMasterhand_FighterVars mh, ch;\n        /* fp+222C */ struct ftMewtwo_FighterVars mt;\n        /* fp+222C */ struct ftNess_FighterVars ns;\n        /* fp+222C */ struct ftPeach_FighterVars pe;\n        /* fp+222C */ struct ftPikachu_FighterVars pk, pc;\n        /* fp+222C */ struct ftPopo_FighterVars pp, nn;\n        /* fp+222C */ struct ftPurin_FighterVars pr;\n        /* fp+222C */ struct ftSamus_FighterVars ss;\n        /* fp+222C */ struct ftSandbag_FighterVars sb;\n        /* fp+222C */ struct ftSeak_FighterVars sk;\n        /* fp+222C */ struct ftYoshi_FighterVars ys;\n        /* fp+222C */ struct ftZakoBoy_FighterVars bo, gl;\n        /* fp+222C */ struct ftZelda_FighterVars zd;\n    } fv;\n    /* fp+232C */ s32 x232C;\n    /* fp+2330 */ Vec2 x2330;\n    /* fp+2338 */ IntVec2 x2338;\n    /// @at{2340} @sz{AC}\n    /* fp+2340 */ union Fighter_MotionVars {\n        /* fp+2340 */ u8 _[0x23EC - 0x2340];\n        /* fp+2340 */ union ftCaptain_MotionVars ca, gn;\n        /* fp+2340 */ union ftCommon_MotionVars co;\n        /* fp+2340 */ union ftDonkey_MotionVars dk;\n        /* fp+2340 */ union ftFox_MotionVars fx, fc;\n        /* fp+2340 */ union ftGameWatch_MotionVars gw;\n        /* fp+2340 */ union ftKoopa_MotionVars kp;\n        /* fp+2340 */ union ftLuigi_MotionVars lg;\n        /* fp+2340 */ union ftLk_MotionVars lk;\n        /* fp+2340 */ union ftMario_MotionVars mr, dr;\n        /* fp+2340 */ union ftMars_MotionVars ms, fe;\n        /* fp+2340 */ union ftMasterHand_MotionVars mh, ch;\n        /* fp+2340 */ union ftMewtwo_MotionVars mt;\n        /* fp+2340 */ union ftNess_MotionVars ns;\n        /* fp+2340 */ union ftPe_MotionVars pe;\n        /* fp+2340 */ union ftPikachu_MotionVars pk, pc;\n        /* fp+2340 */ union ftPurin_MotionVars pr;\n        /* fp+2340 */ union ftSamus_MotionVars ss;\n        /* fp+2340 */ union ftSeak_MotionVars sk;\n        /* fp+2340 */ union ftYoshi_MotionVars ys;\n        /* fp+2340 */ union ftZelda_MotionVars zd;\n    } mv;\n};\nstruct gmScriptEventDefault {\n    u32 opcode : 6;\n    u32 value1 : 26;\n};\nstruct ftData_UnkCountStruct {\n    void* data;\n    int count;\n};\n/* 148C64 */ void ftCl_Init_OnDeath(ftLk_GObj* gobj);\n/* 148CE4 */ void ftCl_Init_OnLoad(ftLk_GObj* gobj);\n/* 148DC0 */ void ftCl_Init_OnItemPickup(ftLk_GObj* gobj, bool flag);\n/* 148E34 */ void ftCl_Init_OnItemInvisible(ftLk_GObj* gobj);\n/* 148E7C */ void ftCl_Init_OnItemVisible(ftLk_GObj* gobj);\n/* 148EC4 */ void ftCl_Init_OnItemDrop(ftLk_GObj* gobj, bool flag);\n/* 148F38 */ void ftCl_Init_OnItemPickupExt(ftLk_GObj* gobj, bool flag);\n/* 149018 */ void ftCl_Init_OnItemDropExt(ftLk_GObj* gobj, bool flag);\n/* 14906C */ void ftCl_Init_LoadSpecialAttrs(ftLk_GObj* gobj);\n/* 14908C */ void ftCl_Init_OnKnockbackEnter(ftLk_GObj* gobj);\n/* 1490D0 */ void ftCl_Init_OnKnockbackExit(ftLk_GObj* gobj);\n/* 149114 */ void ftCl_Init_80149114(ftLk_GObj* gobj);\n/* 14919C */ void ftCl_Init_8014919C(ftLk_GObj* gobj);\n/* 14920C */ bool ftCl_Init_8014920C(ftLk_GObj* gobj);\n/* 149268 */ void ftCl_Init_80149268(ftLk_GObj* gobj);\n/* 1492C4 */ void ftCl_Init_801492C4(ftLk_GObj* gobj);\n/* 1492F4 */ bool ftCl_Init_801492F4(ftLk_GObj* gobj);\n/* 149318 */ void ftCl_Init_80149318(ftLk_GObj* gobj);\n/* 3D0FA0 */ extern MotionState ftCl_Init_MotionStateTable[ftLk_MS_SelfCount];\n/* 3D1240 */ extern char ftCl_Init_DatFilename[];\n/* 3D124C */ extern char ftCl_Init_DataName[];\n/* 3D13CC */ extern char ftCl_Init_AnimDatFilename[];\n/* 3D1448 */ extern Fighter_DemoStrings ftCl_Init_DemoMotionFilenames;\n/* 3D1458 */ extern Fighter_CostumeStrings ftCl_Init_CostumeStrings[];\n#define MELEE_FT_CHARA_FTCLINK_INLINES_H\n#define GALE01_27CF30\n#define MELEE_IT_TYPES_H\n/// @file\n/// @todo Restructure this, possibly items/chara/types.h\n#define MELEE_IT_ITCHARITEMS_H\ntypedef struct {\n    f32 xDD4;\n    f32 xDD8;\n    f32 xDDC;\n    Vec3 xDE0;\n} FoxLaserVars;\ntypedef struct {\n    HSD_Joint* xDD4;\n    f32 xDD8;\n    HSD_JObj* xDDC;\n} FoxIllusionVars;\n/// @file\n/// @todo Restructure this, possibly items/common/types.h\n#define MELEE_IT_ITCOMMONITEMS_H\ntypedef struct {\n    bool x0;\n    bool x4;\n} ItCapsuleAttrs;\ntypedef struct {\n    f32 dir;\n    f32 x4;\n    f32 x8;\n    f32 xC;\n    f32 xvel;\n    f32 yvel;\n} ItStarVars;\ntypedef struct BobOmbVars {\n    s32 xDD4;\n    s32 xDD8;\n    s32 xDDC;\n    s32 xDE0;\n    s32 xDE4;\n    s32 xDE8;\n    f32 xDEC;\n} BobOmbVars;\ntypedef struct HeartContainerVars {\n    s32 xDD4_heal;\n} HeartContainerVars;\ntypedef struct MaximTomatoVars {\n    s32 xDD4_heal;\n} MaximTomatoVars;\ntypedef struct FoodVars {\n    s32 xDD4_unk;\n    s32 xDD8_heal;\n} FoodVars;\ntypedef struct {\n    u32 x0;\n} ItLGunVars;\ntypedef struct EggVars // Eggs spawned on Yoshi stages / by Chansey\n{\n    u8 filler[0x60];\n    s32 xE34_heal;\n} EggVars;\ntypedef struct WhispyAppleVars {\n    s32 xDD4_heal;\n} WhispyAppleVars;\ntypedef struct itUnkAttributes // Might be shared?\n{\n    f32 x0_float;\n    f32 x4_float;\n} itUnkAttributes;\n#define _itPKFlash_h_\ntypedef struct PKFlashVars {\n    s32 xDD4_PKFlash;\n    f32 xDD8_PKFlash;\n    s32 xDDC_PKFlash;\n    HSD_GObj* xDE0_PKFlash_Owner;\n    s32 xDE4_PKFlash;\n} PKFlashVars;\ntypedef struct PKFlashExplVars {\n    f32 xDD4;\n    s32 xDD8;\n    HSD_GObj* xDDC;\n} PKFlashExplVars;\ntypedef struct itFlashAttributes {\n    f32 x0_FLASH_LIFETIMER;\n    f32 x4_FLASH_HITBOX_SIZE_MUL;\n    f32 x8_FLASH_GRAPHIC_SIZE_INIT_MUL;\n    f32 xC_FLASH_GRAPHIC_SIZE_GROWTH_MUL;\n    f32 x10_FLASH_UNK1;\n    f32 x14_FLASH_PEAK_RISE_HEIGHT;\n    f32 x18_FLASH_CONTROL;\n    f32 x1C_FLASH_GRAVITY;\n    f32 x20_FLASH_UNK2;\n    f32 x24_FLASH_UNK3;\n    f32 x28_FLASH_EXPLOSION_DELAY;\n} itFlashAttributes;\ntypedef struct itFlashExplAttributes {\n    f32 x0_FLASH_EXPL_HITBOX_SIZE_MUL;\n    f32 x4_FLASH_EXPL_GRAPHIC_SIZE_INIT;\n    f32 x8_FLASH_EXPL_GRAPHIC_SIZE_GROWTH;\n    f32 xC_FLASH_EXPL_BASE_DAMAGE;\n    f32 x10_FLASH_EXPL_DAMAGE_MUL;\n} itFlashExplAttributes;\n#define _itPKThunder_h_\ntypedef struct itPKThunderAttributes {\n    f32 x0_PKTHUNDER_LIFETIME;\n    f32 x4_PKTHUNDER_SPEED;\n    f32 x8_PKTHUNDER_SPAWN_ANGLE;\n    f32 xC_PKTHUNDER_STICK_THRESHOLD;\n    f32 x10_PKTHUNDER_TURN_RADIUS;\n} itPKThunderAttributes;\ntypedef struct PKThunderVars {\n    HSD_GObj* xDD4[6]; // GObj pointers?\n    Vec3 xDEC; // Start of vars\n    Vec3 xDFC;\n    Vec3 xE08;\n    Vec3 xE14;\n    Vec3 xE20;\n    Vec3 xE2C;\n    Vec3 xE38;\n    Vec3 xE44;\n    Vec3 xE50;\n    Vec3 xE5C;\n    Vec3 xE68;\n    Vec3 xE74;\n    Vec3 xE80;\n    Vec3 xE8C;\n    Vec3 xE98;\n    Vec3 xEA0;\n    f32 xEAC; // PK Thunder release angles?\n    f32 xEB0;\n    f32 xEB4;\n    f32 xEB8;\n    f32 xEBC;\n    f32 xEC0;\n    f32 xEC4;\n    f32 xEC8;\n    f32 xECC;\n    f32 xED0;\n    f32 xED4;\n    f32 xED8;\n    f32 xEDC;\n    f32 xEE0;\n    f32 xEE4;\n    f32 xEE8;\n    s32 xEEC;\n    s32 xEF0;\n    HSD_GObj* xEF4; // MOAR pointars!\n    HSD_GObj* xEF8;\n    HSD_GObj* xEFC;\n    HSD_GObj* xF00;\n    HSD_GObj* xF04;\n    HSD_GObj* xF08;\n} PKThunderVars;\n#define _itYoyo_h_\ntypedef struct itYoyoAttributes {\n    s32 x0_CHARGE_SPAWN_POS;\n    s32 x4_UPSMASH_CHARGE_STRING_LENGTH;\n    s32 x8_DOWNSMASH_CHARGE_STRING_LENGTH;\n    f32 xC_SIZE;\n    f32 x10_UNK1;\n    f32 x14_UNK2_RAD;\n    f32 x18_SPIN_TEXANIM_SPEED;\n    f32 x1C_UNK_TEXANIM_SPEED;\n    f32 x20_UNK_TEXANIM_MOD;\n    f32 x24_YOYO_RELEASE_VEL_X;\n    f32 x28_YOYO_PULL_STRENGTH;\n    f32 x2C_UNK3_MOD; // Resistance multiplier?\n    f32 x30_YOYO_RELEASE_VEL_Y;\n    f32 x34_GRAVITY;\n    f32 x38_GRAVITY_MOD;\n    f32 x3C_YOYO_PULL_STRENGTH_2;\n    s32 x40_UPSMASH_YOYO_ROT_FRAME;\n    s32 x44_UPSMASH_YOYO_NUDGE_FRAME;\n    s32 x48_DOWNSMASH_YOYO_ROT_FRAME;\n    s32 x4C_DOWNSMASH_YOYO_NUDGE_FRAME;\n    s32 x50_UNK4;\n    s32 x54_UNK5;\n    s32 x58_UNK6;\n    s32 x5C_UNK7;\n} itYoyoAttributes;\n/// @todo Size unknown.\nstruct ItemStateTable {\n    /// @at{0} @sz{4}\n    enum_t anim_id;\n    /// @at{4} @sz{4}\n    HSD_GObjPredicate animated;\n    /// @at{8} @sz{4}\n    HSD_GObjEvent physics_updated;\n    /// @at{C} @sz{4}\n    HSD_GObjPredicate collided;\n};\nstruct ItemLogicTable {\n    /// @at{0} @sz{4}\n    ItemStateTable* states;\n    /// @at{4} @sz{4}\n    HSD_GObjEvent spawned;\n    /// @at{8} @sz{4}\n    HSD_GObjEvent destroyed;\n    /// @at{C} @sz{4}\n    HSD_GObjEvent picked_up;\n    /// @at{10} @sz{4}\n    HSD_GObjEvent dropped;\n    /// @at{14} @sz{4}\n    HSD_GObjEvent thrown;\n    /// @at{18} @sz{4}\n    HSD_GObjPredicate dmg_dealt;\n    /// @at{1C} @sz{4}\n    HSD_GObjPredicate dmg_received;\n    /// @at{20} @sz{4}\n    HSD_GObjEvent entered_air;\n    /// @at{24} @sz{4}\n    HSD_GObjPredicate reflected;\n    /// @at{28} @sz{4}\n    HSD_GObjPredicate clanked;\n    /// @at{2C} @sz{4}\n    HSD_GObjPredicate absorbed;\n    /// @at{30} @sz{4}\n    HSD_GObjPredicate shield_bounced;\n    /// @at{34} @sz{4}\n    HSD_GObjPredicate hit_shield;\n    /// @at{38} @sz{4}\n    HSD_GObjInteraction evt_unk;\n};\nstruct CameraBoxFlags {\n    struct {\n        u8 b01 : 2;\n        u8 b2 : 1;\n        u8 b3 : 1;\n        u8 b4 : 1;\n        u8 b5 : 1;\n        u8 b6 : 1;\n        u8 b7 : 1;\n    } bits;\n};\nstruct flag32 {\n    union {\n        struct {\n            u32 x0 : 1;\n            u32 x1 : 1;\n            u32 x2 : 1;\n            u32 x3 : 1;\n            u32 x4 : 1;\n            u32 x5 : 1;\n            u32 x6 : 1;\n            u32 x7 : 1;\n            u32 x8 : 1;\n            u32 x9 : 1;\n            u32 xA : 1;\n            u32 xB : 1;\n            u32 xC : 1;\n            u32 xD : 1;\n            u32 xE : 1;\n            u32 xF : 4;\n            u32 x13 : 1;\n            u32 x14 : 1;\n            u32 x15 : 1;\n            u32 x16 : 1;\n            u32 x17 : 2;\n            u32 x19 : 1;\n            u32 x1A : 1;\n            u32 x1B : 1;\n            u32 x1C : 1;\n            u32 x1D : 1;\n            u32 x1E : 1;\n            u32 x1F : 1;\n        } flags;\n        u32 word;\n    };\n};\nstruct DynamicBoneTable {\n    /// @at{0} @sz{190}\n    HSD_JObj* bones[100];\n};\nstruct Item_DynamicBones {\n    int flags;\n    HSD_JObj* skeleton;\n    unk_t unk_ptr;\n    int count;\n    Vec3 unk_vec;\n};\nstruct ECB {\n    f32 top;\n    f32 bottom;\n    f32 right;\n    f32 left;\n};\nstruct ItemAttr {\n    u8 x0_is_heavy : 1; // 0x0, bit 0x80, is heavy item (crate)\n    u8 x0_78 : 4; // unk, might be lock-on behavior? (Samus Missile)\n    u8 x0_hold_kind : 3; // defines hand hold behavior\n    u8 x1_1 : 2; // 0x1 0xB0\n    u8 x1_3 : 1; // 0x1 0x20\n    u8 x1_4 : 1; // 0x1 0x10\n    u8 x1_5 : 1; // 0x1 0x08\n    u8 x1_67_cam_kind : 2; // 0x1 0x06, is stored to 0xdcd\n    u8 x1_8 : 1; // 0x1 0x01    char flags3; //0x2\n    u8 x3; // 0x3\n    f32 x4_throw_speed_mul; // 0x4, speed multiplier at which this item is\n                            // thrown at\n    s32 x8;\n    f32 xC_spin_speed;\n    f32 x10_fall_speed; // 0x10\n    f32 x14_fall_speed_max; // 0x14\n    f32 x18;\n    f32 x1C_damage_mul; // collision related? referenced on taking damage @\n                        // 80270f90\n    ECB x20;\n    Vec2 x30_unk; // 0x34\n    Vec2 x38_grab_range; // 0x38\n    ECB x40;\n    s32 x50; // 0x50\n    s32 x54; // 0x54\n    s32 x58; // 0x58\n    s32 x5c; // 0x5c\n    f32 x60_scale; // 0x60, does not affect hitboxes\n    /// @at{64} @sz{4}\n    /// @brief GFX to play on destroy.\n    enum_t destroy_gfx;\n    s32 x68; // 0x68\n    s32 x6C; // 0x6c\n    s32 x70; // 0x70\n    s32 x74; // 0x74\n    /// @at{78} @sz{4}\n    /// @brief SFX that plays when this item is destroyed\n    enum_t destroy_sfx;\n    s32 x7C; // 0x7c\n    s32 x80; // 0x80\n    s32 x84; // 0x84\n    s32 x88; // 0x88\n    s32 x8C; // 0x8c\n    s32 x90; // 0x90\n    s32 x94; // 0x94\n    s32 x98; // 0x98\n    s32 x9C; // 0x9c\n};\nstruct ItemDynamicsDesc {\n    int x0_boneID; // bone index;\n    unk_t x4_params; // dynamics params;\n    /// @at{8} @sz{4}\n    /// @brief Number of children bones to make dynamic.\n    int child_count;\n    f32 xC;\n    f32 x10;\n    f32 x14;\n};\n/// @sz{8}\nstruct ItemDynamics {\n    /// @at{0} @sz{4}\n    int count;\n    /// @at{4} @sz{4}\n    ItemDynamicsDesc* dyn_descs;\n};\n/// @sz{10}\nstruct ItemStateDesc {\n    /// @at{0} @sz{4}\n    HSD_AnimJoint* x0_anim_joint;\n    /// @at{0} @sz{4}\n    HSD_MatAnimJoint* x4_matanim_joint;\n    /// @at{0} @sz{4}\n    unk_t x8_parameters;\n    /// @at{0} @sz{4}\n    unk_t xC_script;\n};\nstruct ItemStateArray {\n    struct ItemStateDesc x0_itemStateDesc[8];\n};\n/// @sz{10}\nstruct ItemModelDesc {\n    /// @at{0} @sz{4}\n    HSD_Joint* x0_joint;\n    /// @at{4} @sz{4}\n    u32 x4_bone_count;\n    /// @at{8} @sz{4}\n    s32 x8_bone_attach_id;\n    /// @at{C} @sz{4}\n    int xC_bit_field;\n};\nstruct Article {\n    ItemAttr* x0_common_attr;\n    unk_t x4_specialAttributes;\n    unk_t x8_hurtbox;\n    ItemStateArray* xC_itemStates;\n    ItemModelDesc* x10_modelDesc;\n    ItemDynamics* x14_dynamics;\n};\nstruct Item {\n    void* x0;\n    /// @at{4} @sz{4}\n    HSD_GObj* entity;\n    s32 x8;\n    /// @at{C} @sz{4}\n    enum_t spawn_kind;\n    /// @at{10} @sz{4}\n    ItemKind kind;\n    /// @at{14} @sz{4}\n    enum_t hold_kind;\n    s32 x18;\n    s32 x1C;\n    /// @at{20} @sz1\n    u8 x20_team_id;\n    u8 x21;\n    u8 x22;\n    u8 x23;\n    /// @at{24} @sz{4}\n    enum_t msid;\n    /// @at{28} @sz{4}\n    enum_t anim_id;\n    /// @at{2C} @sz{4}\n    f32 facing_dir;\n    /// @at{30} @sz{4}\n    f32 init_facing_dir;\n    /// @at{34} @sz{4}\n    f32 spin_spd;\n    /// @at{38} @sz{4}\n    f32 scl;\n    /// @at{3C} @sz{4}\n    f32 x3C;\n    /// @at{40} @sz{C}\n    Vec3 x40_vel;\n    /// @at{4C} @sz{C}\n    Vec3 pos;\n    /// @at{58} @sz{C}\n    Vec3 x58_vec_unk;\n    /// @at{64} @sz{C}\n    Vec3 x64_vec_unk2;\n    /// @at{70} @sz{C}\n    Vec3 x70_nudge;\n    u8 padding_x7C[0xB8 - 0x7C];\n    ItemLogicTable* xB8_itemLogicTable; // Global item callbacks\n    ItemStateTable* xBC_itemStateContainer;\n    GroundOrAir ground_or_air;\n    Article* xC4_article_data;\n    HSD_Joint* xC8_joint;\n    ItemAttr* xCC_item_attr;\n    ItemStateDesc* xD0_itemStateDesc;\n    Item_DynamicBones xD4_dynamicBones[24];\n    s32 x374_dynamicBonesNum;\n    CollData x378_itemColl;\n    /// @at{518} @sz{4}\n    /// @brief Item's current owner\n    HSD_GObj* owner;\n    s32 x51C;\n    CameraBox* x520_cameraBox; // CameraBox\n    f32 x524;\n    s32 x528;\n    void* x52C_item_script; // Script parse?\n    u32 x530;\n    u32 x534;\n    u32 x538;\n    u32 x53C;\n    u32 x540;\n    u32 x544;\n    ColorOverlay x548_colorOverlay;\n    u8 x5C8;\n    u8 x5C9;\n    u8 x5CA;\n    u8 x5CB;\n    f32 x5CC_currentAnimFrame;\n    f32 x5D0_animFrameSpeed;\n    struct {\n        HitCapsule hit;\n        s32 x138;\n    } x5D4_hitboxes[4];\n    s32 xAC4_ignoreItemID; // Cannot hit items with this index?\n    s32 xAC8_hurtboxNum; // Number of hurtboxes this item has\n    HurtCapsule xACC_itemHurtbox[2];\n    u32 xB64;\n    u8 xB68;\n    u8 xB69;\n    u8 xB6A;\n    u8 xB6B;\n    u32 xB6C;\n    u32 xB70;\n    u32 xB74;\n    u32 xB78;\n    u32 xB7C;\n    u32 xB80;\n    u32 xB84;\n    u32 xB88;\n    u32 xB8C;\n    u32 xB90;\n    u32 xB94;\n    u32 xB98;\n    u32 xB9C;\n    u32 xBA0;\n    u32 xBA4;\n    u32 xBA8;\n    u32 xBAC;\n    u32 xBB0;\n    u32 xBB4;\n    u32 xBB8;\n    DynamicBoneTable* xBBC_dynamicBoneTable;\n    unk_t xBC0;\n    u8 xBC4;\n    u8 xBC5;\n    u8 xBC6;\n    u8 xBC7;\n    u32 xBC8;\n    Vec2 xBCC_unk;\n    Vec2 xBD4_grabRange;\n    ECB xBDC;\n    ECB xBEC;\n    ECB xBFC;\n    ECB xC0C;\n    ECB xC1C;\n    u32 xC2C;\n    u32 xC30;\n    s32 xC34_damageDealt; // Rounded down\n    s32 xC38; // 0xc38\n    f32 xC3C; // 0xc3c\n    f32 xC40; // 0xc40\n    f32 xC44; // 0xc44\n    s32 xC48; // 0xc48\n    s32 xC4C; // Something to do with damage. 0x80077464 checks this against\n               // reflectors' maximum damage threshold\n    s32 xC50; // 0xc50\n    f32 xC54; // 0xc54\n    Vec3 xC58; // 0xc58\n    HSD_GObj* xC64_reflectGObj; // GObj that reflected this item?\n    f32 xC68; // 0xc68\n    f32 xC6C; // 0xc6c\n    f32 xC70; // 0xc70\n    s32 xC74;\n    Vec2 xC78; // 0xc74\n    Vec2 xC80; // 0xc7c\n    s32 xC88; // 0xc88\n    s16 xC8C; // 0xc8c\n    HSD_GObj* xC90_absorbGObj; // 0xc90\n    s32 xC94; // 0xc94\n    s32 xC98; // 0xc98\n    s32 xC9C; // Total damage taken?\n    s32 xCA0; // Last amount of damage taken?\n    s32 xCA4; // 0xca4\n    s32 xCA8; // 0xca8, hitlag related\n    s32 xCAC_angle; // 0xcac\n    s32 xCB0_source_ply; // 0xcb0, damage source ply number\n    s32 xCB4; // 0xcb4\n    f32 xCB8_outDamageDirection; // 0xcb8, updated @ 80078184\n    f32 xCBC_hitlagFrames; // 0xcbc, hitlag frames remaining\n    f32 xCC0; // 0xcc0\n    s32 xCC4; // 0xcc4\n    f32 xCC8_knockback; // 0xcc8\n    f32 xCCC_incDamageDirection; // Direction from which damage was applied?\n    f32 xCD0; // 0xcd0\n    f32 xCD4; // 0xcd4\n    f32 xCD8; // 0xcd8\n    f32 xCDC; // 0xcdc\n    f32 xCE0; // 0xce0\n    f32 xCE4; // 0xce4\n    f32 xCE8; // 0xce8\n    HSD_GObj* xCEC_fighterGObj; // 0xcec\n    HSD_GObj* xCF0_itemGObj; // 0xcf0, is a fp GObj, but is the owner of the\n    HSD_GObj* xCF4_fighterGObjUnk;\n    /// @at{CF8} @sz{4}\n    /// @brief The entity that was detected by this item's inert hitbox.\n    HSD_GObj* toucher;\n    u32 xCFC;\n    /// @at{D00} @sz{4}\n    /// @brief The entity that got grabbed by this item.\n    HSD_GObj* grab_victim;\n    /// @at{D04} @sz{4}\n    /// @brief The entity that collided with this item's hitbox?\n    HSD_GObj* atk_victim;\n    u8 xD08;\n    u8 xD09;\n    u8 xD0A;\n    u8 xD0B;\n    /// @at{D0C} @sz{4}\n    enum_t xD0C;\n    s32 xD10;\n    /// @at{D14} @sz{4}\n    HSD_GObjPredicate animated;\n    /// @at{D18} @sz{4}\n    HSD_GObjEvent physics_updated;\n    /// @at{D1C} @sz{4}\n    HSD_GObjPredicate collided;\n    /// @at{D20} @sz{4}\n    /// @todo What does this mean?\n    HSD_GObjEvent on_accessory;\n    /// @at{D24} @sz{4}\n    /// @brief Runs when an entity is detected by this item's inert hibox.\n    HSD_GObjPredicate touched;\n    /// @at{D28} @sz{4}\n    /// @brief Runs after applying hitlag in damage.\n    /// @todo What function is @c 8026a62c?\n    HSD_GObjEvent entered_hitlag;\n    // 0xd2c, runs after exiting hitlag in hitlag, update proc 8026a200\n    HSD_GObjEvent exited_hitlag;\n    /// @at{D28} @sz{4}\n    /// @brief Runs when the item is jumped on.\n    /// @todo What function is @c 80269bac?\n    HSD_GObjPredicate jumped_on;\n    /// @at{D34} @sz{4}\n    /// @brief When grabbing a fighter, run this function on self.\n    HSD_GObjEvent grab_dealt;\n    /** @at{D38} @sz{4}\n     * @brief When grabbing a fighter, run this function on them.\n     *\n     * @p gobj0 - The victim of the grab. \\n\n     * @p gobj1 - This item's entity.\n     */\n    HSD_GObjInteraction grabbed_for_victim;\n    f32 xD3C_spinSpeed;\n    f32 xD40;\n    f32 xD44_lifeTimer;\n    f32 xD48_halfLifeTimer; // Not radioactive, just the item's original\n                            // lifetime halved\n    int xD4C;\n    s32 xD50_landNum; // Number of times this item has landed\n    s32 xD54_throwNum; // Number of times this item has been thrown\n    s32 xD58;\n    s32 xD5C;\n    /// @at{D60} @sz{4}\n    enum_t destroy_type;\n    /// @at{D64} @sz{4}\n    enum_t sfx_unk1;\n    /// @at{D68} @sz{4}\n    enum_t sfx_unk2;\n    s32 xD6C;\n    s32 xD70;\n    s32 xD74;\n    s32 xD78;\n    /// @at{D7C} @sz{4}\n    /// @brief SFX that plays when this item is destroyed\n    enum_t destroy_sfx;\n    s32 xD80;\n    s32 xD84;\n    s32 xD88_attackID; // ???\n    s16 xD8C_attackInstance;\n    s16 xD8E;\n    s32 xD90;\n    Vec2 xD94;\n    Vec2 xD9C;\n    union {\n        UnkFlagStruct xDA4_flag;\n        u32 xDA4_word;\n    };\n    union {\n        UnkFlagStruct xDA8_flag;\n        u16 xDA8_short;\n    };\n    union {\n        UnkFlagStruct xDAA_flag; // Develop mode stuff?\n        u8 xDAA_byte;\n    };\n    u32 xDAC_itcmd_var0;\n    u32 xDB0_itcmd_var1;\n    u32 xDB4_itcmd_var2;\n    u32 xDB8_itcmd_var3;\n    u32 xDBC_itcmd_var4;\n    u32 xDC0;\n    u32 xDC4;\n    flag32 xDC8_word;\n    struct {\n        u8 b0 : 1;\n        u8 b1 : 1;\n        u8 b2 : 1;\n        u8 b3 : 1;\n        u8 b4567 : 4;\n    } xDCC_flag;\n    CameraBoxFlags xDCD_flag;\n    UnkFlagStruct xDCE_flag;\n    UnkFlagStruct xDCF_flag;\n    UnkFlagStruct xDD0_flag;\n    UnkFlagStruct xDD1_flag;\n    UnkFlagStruct xDD2_flag;\n    UnkFlagStruct xDD3_flag;\n    union {\n        ItCapsuleAttrs capsule;\n        ItStarVars star;\n        BobOmbVars BobOmb;\n        HeartContainerVars HeartContainer;\n        MaximTomatoVars MaximTomato;\n        FoodVars Food;\n        EggVars Egg;\n        WhispyAppleVars WhispyApple;\n        PKFlashVars PKFlash;\n        PKFlashExplVars PKFlashExpl;\n        PKThunderVars PKThunderVars;\n        FoxLaserVars foxlaser;\n        FoxIllusionVars foxillusion;\n        u8 padding[0xFCC - 0xDD4];\n    } xDD4_itemVar;\n};\ntypedef struct ItemLink // user_data struct of GObj class 7\n{\n    struct ItemLink* prev;\n    struct ItemLink* next;\n    Vec3 x8_vel;\n    Vec3 pos;\n    Vec3 x20_vec; // Previous position?\n    u8 flag0 : 1;\n    u8 flag1 : 1;\n    u8 flag2 : 1;\n    u8 flag3 : 1;\n    u8 flag4 : 1;\n    u8 flag5 : 1;\n    u8 flag6 : 1;\n    u8 flag7 : 1;\n    CollData x30_collData;\n    HSD_GObj* x1D0_GObj;\n    HSD_GObj* x1D4_GObjLinkNext;\n} ItemLink;\nstruct sdata_ItemGXLink {\n    GObj_RenderFunc x0_renderFunc;\n};\nstruct r13_ItemTable {\n    s32 filler;\n    Article* x0_article[0x9F];\n};\nstruct BobOmbRain {\n    enum_t x0;\n    HSD_JObj* x4;\n    Vec3 x8_vec;\n    enum_t x14;\n    s32 x18;\n    UnkFlagStruct x1C;\n};\nstruct SpawnItem {\n    HSD_GObj* x0_parent_gobj; // Primary owner of the item; usually a fp GObj\n    HSD_GObj* x4_parent_gobj2; // Secondary owner GObj of the item; e.g. Ness'\n                               // PK Fire Pillar has this set to PK Fire\n                               // Spark's item GObj\n    ItemKind kind; // 0x8, ID of the item to spawn\n    /// @at{C} @sz{4}\n    /// @brief Defines the behavior of the item, such as thrown and pickup.\n    /// @todo 0 = capsule.\n    enum_t hold_kind;\n    s32 x10;\n    /// @at{14} @sz{C}\n    Vec3 pos;\n    /// @at{20} @sz{C}\n    Vec3 prev_pos;\n    /// @at{2C} @sz{C}\n    Vec3 vel;\n    /// @at{38} @sz{4}\n    f32 facing_dir;\n    s16 x3C_damage;\n    s16 x3E;\n    s32 x40; // 0x1 = correct initial position\n    UnkFlagStruct x44_flag; // 0x80 = perform initial collision check\n    UnkFlagStruct x45_flag;\n    UnkFlagStruct x46_flag;\n    UnkFlagStruct x47_flag;\n    GroundOrAir x48_ground_or_air; // 0x0 = stationary, 0x1 = air (?)\n};\nstruct ItemModStruct {\n    GXColor x0_unk;\n};\nstruct ItemCommonData {\n    u32 x0;\n    u32 x4;\n    u32 x8;\n    u32 xC;\n    u32 x10;\n    u32 x14;\n    u32 x18;\n    u32 x1C;\n    u32 x20;\n    u32 x24;\n    u32 x28;\n    u32 x2C;\n    u32 x30;\n    u32 x34;\n    s32 x38_float;\n    s32 x3C_float;\n    s32 x40_float;\n    s32 x44_float;\n    s32 x48_float;\n    s32 x4C_float;\n    s32 x50_float;\n    s32 x54_float;\n    s32 x58_float;\n    s32 x5C_float;\n    s32 x60_float;\n    s32 x64_float;\n    f32 x68_float;\n    f32 x6C_float;\n    f32 x70_float;\n    f32 x74_float;\n    f32 x78_float;\n    f32 x7C_float;\n    f32 x80_float[13];\n    s32 xB4;\n    f32 xB8;\n    f32 xBC;\n    f32 xC0;\n    f32 xC4;\n    f32 xC8;\n    f32 xCC;\n    f32 xD0;\n    f32 xD4;\n    uint xD8;\n    s32 xDC;\n    f32 unk_degrees; ///< @at{E0}\n    u8 filler[0x148 - 0xE4];\n    s32 x148;\n    f32 x14C;\n    f32 x150;\n    f32 x154;\n    f32 x158;\n    f32 x15C;\n};\nstruct Item_r13_Data {\n    ItemCommonData* item_common;\n    void** common_items;\n    void** adventure_items;\n    void** pokeball_items;\n    s32 x10;\n    s32 x14;\n};\nstruct HSD_ObjAllocUnk2 {\n    float x0;\n    float x4;\n    float x8;\n    float xC;\n    u8 pad_10[0xB0 - 0x10];\n    int xB0;\n    int xB4;\n    int xB8;\n    M2C_UNK xBC;\n    Vec3 xC0;\n    u8 pad_CC[0x148 - 0xCC];\n    u32 x148;\n    u32 x14C;\n    u32 x150;\n    UnkFlagStruct x154;\n};\nstruct x1C_struct {\n    s32 x1C;\n};\nstruct HSD_ObjAllocUnk {\n    s32 x0;\n    s32 x4;\n    s32 x8;\n    s32 xC;\n    s32 x10;\n    s32 x14;\n    u32 x18;\n    s32 x1C;\n    s32 x20;\n    s32 x24;\n    s32 x28;\n    u32 x2C;\n    u32 x30;\n    s32 x34;\n    s32 x38;\n    s32 x3C;\n    s32 x40;\n    s32 x44;\n    s32 x48;\n    s32 x4C;\n    s32 x50;\n    s32 x54;\n    s32 x58;\n    s32 x5C;\n    u32 x60;\n    u32 x64;\n};\nstruct HSD_ObjAllocUnk4 {\n    u8 x0;\n    u8 x1;\n    u8 x2;\n    u8 x3;\n    u8 x4;\n    u16 x6;\n    u16 x8;\n    u16 xA;\n    u16 xC;\n    u32 x10;\n    u8 pad[0x20 - 0x10];\n};\nstruct HSD_ObjAllocUnk5 {\n    u8 x0;\n    u32 x4;\n    u16 x8;\n    u16 xA;\n    u16 xC;\n};\nstruct HSD_ObjAllocUnk6 {\n    u8 x0;\n    u32 x4;\n    u16 x8;\n    u16 xA;\n    u16 xC;\n};\nvoid it_8027D730(Item_GObj*);\nHSD_GObj* it_80283AE4(s32, Vec3*, s32);\nHSD_GObj* it_802841B4(s32, Vec3*, s32);\nHSD_GObj* it_80284854(Vec3*);\nHSD_GObj* it_802896CC(Vec3*);\nvoid it_8028FE90(Item_GObj*);\nHSD_GObj* it_80284D54(Vec3*);\nvoid it_8028428C(Item_GObj*);\nvoid it_80283BD4(Item_GObj*);\nHSD_GObj* it_80286088(s32);\nHSD_GObj* it_80290938(HSD_JObj*);\nHSD_GObj* it_80291BE0(Vec3*);\nHSD_GObj* it_80292D48(Vec3*);\nvoid it_8029D968(Item_GObj*);\nvoid it_802D09D0(Item_GObj*);\n/// @attention Above this line, symbols are placed correctly.\nvoid it_80294E78(Item_GObj*, f32);\nHSD_GObj* it_8029A748(Item_GObj*, Vec3*, u8, f32);\nvoid it_8029A89C(Item_GObj*, f32);\nvoid it_8029A8F4(Item_GObj*, Vec3*, f32);\ns32 it_802B1DEC(u32);\nu32 it_802B1DF8(Item_GObj*, Vec3*, Vec3*, s32, s32, s32);\ns32 it_802B1FC8(u32);\nvoid it_802B1FE8(u32, Vec3*);\nvoid it_802B56E4(Item_GObj*, Vec3*, f32, f32, f32);\nHSD_GObj* it_802C8B28(Item_GObj*, Vec3*, u32, f32);\nvoid it_802D8618(s32, Vec3*, s32, s32);\nu32 it_802F0340(Item_GObj*, Vec3*, Vec3*, u32, u32, f32);\nvoid it_802F046C(s32);\nvoid it_802F0AE0(Item_GObj* fighter_gobj, Vec3*, Vec3*, enum_t, bool,\n                 f32 facing_dir, f32, f32);\n/// @todo @c arg0 is likely a @c HSD_GObj*.\nvoid it_802C0DBC(u32 arg0);\nu32 it_802C0850(Item_GObj*, Vec3*, u32, s32, f32 facing_direction);\nvoid it_802C8C34(Item_GObj*);\nvoid it_802AE1D0(Item_GObj*);\nvoid it_802AEAB4(Item_GObj*);\nHSD_GObj* it_802AE8A8(f32, HSD_GObj*, Vec3*, s32, s32);\nvoid it_802ADDD0(Item_GObj*, s32);\nvoid it_802AE538(Item_GObj*);\nHSD_GObj* it_802C61F4(Item_GObj*, Vec3*, s32, f32);\nvoid it_802C6328(Item_GObj*);\nvoid it_802C6374(Item_GObj*);\nvoid it_802C6394(Item_GObj*);\nvoid it_802C6430(Item_GObj*);\nvoid it_802C6458(Item_GObj*);\nvoid it_802C6480(Item_GObj*);\nvoid it_802C64A8(Item_GObj*);\nHSD_GObj* it_802C6C38(Item_GObj*, Vec3*, enum_t part, f32);\nvoid it_802C7158(Item_GObj*);\nvoid it_802C7074(Item_GObj*);\nvoid it_802C7424(Item_GObj*);\nvoid it_802C6E50(Item_GObj*);\nvoid it_802C6D6C(Item_GObj*);\nHSD_GObj* it_802C6F40(Item_GObj*, Vec3*, s32, f32);\nHSD_GObj* it_802C65E4(Item_GObj*, Vec3*, s32, f32);\nHSD_GObj* it_802C68F8(Item_GObj*, Vec3*, s32, f32);\nvoid it_802C6A2C(Item_GObj*);\nvoid it_802C6A78(Item_GObj*);\nvoid it_802C6A98(Item_GObj*);\nHSD_GObj* it_802C8038(Item_GObj*, Vec3*, s32, s32, f32, f32);\nHSD_GObj* it_802C7D60(Item_GObj*, Vec3*, s32, f32);\nvoid it_802C7E94(Item_GObj*);\nvoid it_802C7EE0(Item_GObj*);\nvoid it_802C7F00(Item_GObj*);\nHSD_GObj* it_802C837C(Item_GObj*, Vec3*, enum_t, u32, f32);\nHSD_GObj* it_802C7774(f32, HSD_GObj*, Vec3*, s32, u32);\nvoid it_8028FAF4(Item_GObj*, Vec3*);\nvoid it_802C7A84(Item_GObj*);\nvoid it_802C7AD0(Item_GObj*);\nvoid it_802C7AF0(Item_GObj*);\nvoid it_802C01AC(Item_GObj*, Vec3*, s32, f32);\nvoid it_8029B6F8(f32 facing_dir, HSD_GObj*, Vec3*, s32);\nvoid it_802C0510(Item_GObj*, Vec3*, s32, s32, f32 facing_dir);\nHSD_GObj* it_802B2560(Item_GObj*, f32, Vec3*, long, u32);\nvoid it_802B2674(Item_GObj*);\nvoid it_802B26C0(Item_GObj*);\nvoid it_802B26E0(Item_GObj*);\nvoid it_802C49E0(Item_GObj*);\nvoid it_802BFE5C(Item_GObj*, Vec3*, f32);\nvoid it_802C0010(Item_GObj*, void*);\nvoid it_802BE5D8(void*, f32);\nvoid it_802BE958(void*);\nvoid it_802BFEC4(void*);\nHSD_GObj* it_802BE9D8(f32, HSD_GObj*, Vec3*, s32);\nvoid it_802BE598(Item_GObj*);\nvoid it_802BE5B8(Item_GObj*);\nHSD_GObj* it_802AD478(Item_GObj*, Vec3*, s32, f32);\nvoid it_802AD6B8(Item_GObj*);\nvoid it_802AB3F0(Item_GObj*, void*, s32);\n/// Spawn an item\nHSD_GObj* it_802AB58C(Item_GObj* owner, Vec3* pos, f32 facing_dir);\nvoid it_802AB9C0(Item_GObj*);\nHSD_GObj* it_802AB568(Item_GObj*);\nvoid it_802AAA50(Item_GObj*);\nHSD_GObj* it_802AA8C0(Item_GObj*, Vec3*, s32, f32);\nHSD_GObj* it_802AA7E4(Item_GObj*);\ns32 it_802AA7F0(Item_GObj*);\nvoid it_802AA054(Item_GObj*, Vec3*, Vec3*, f32, f32);\nvoid it_802B338C(Item_GObj*, Vec3*, f32 facing_dir, u32);\nvoid it_802B5974(Item_GObj*);\nHSD_GObj* it_802B55C8(Item_GObj* owner, Vec3*, s32, s32, f32 facing_dir);\nvoid it_802B62D0(Item_GObj*, Vec3* pos, bool, f32 facing_dir);\n/// Destroys an item?\nvoid it_802C3D44(Item_GObj*);\nHSD_GObj* it_802C3BAC(Item_GObj*, Vec3*, f32 facing_dir, f32);\n/// Clones an entity?\nHSD_GObj* it_802C3AF0(Item_GObj*);\nvoid it_802AE608(Item_GObj*);\nHSD_GObj* it_802C720C(Item_GObj*, Vec3*, s32, f32);\nvoid it_802C7340(Item_GObj*);\nvoid it_802C6DB8(Item_GObj*);\nvoid it_802C70C0(Item_GObj*);\nvoid it_802C738C(Item_GObj*);\nvoid it_802C6DD8(Item_GObj*);\nvoid it_802C70E0(Item_GObj*);\nvoid it_802C73AC(Item_GObj*);\nvoid it_802C6718(Item_GObj*);\nvoid it_802C6764(Item_GObj*);\nvoid it_802C6784(Item_GObj*);\nvoid it_802C8158(Item_GObj*);\nvoid it_802C81C8(Item_GObj*);\nvoid it_802C81E8(Item_GObj*);\nHSD_GObj* it_802C4A40(Item_GObj*, Vec3*, f32);\nvoid it_802C573C(Item_GObj*);\nHSD_GObj* it_802C5000(Item_GObj*, Vec3*, s32, s32, f32);\nvoid it_802C519C(Item_GObj*, Vec3*, s32, s32, f32, f32);\nvoid it_802B4AC8(Item_GObj* gobj, Vec3*, f32 facing_dir, f32 x);\nvoid it_802C53F0(Item_GObj*, Vec3*, f32, f32, f32);\ns32 it_802E5F8C(Item_GObj*, Vec3*, s32, bool, f32, f32);\nvoid it_80284FC4(Item_GObj*, s32, f32);\nvoid it_80285024(Item_GObj*, s32);\nvoid it_802950D4(Item_GObj*, bool);\nvoid it_80294EB0(Item_GObj*, Vec3*, Vec3*);\ns32 it_802F2094(s32, Vec3*, s32, s32);\nHSD_GObj* it_80294DC0(Vec3*);\nvoid it_8027D670(Vec3* const);\nvoid it_802C17DC(uint);\nvoid it_802C16F8(Item_GObj*);\nvoid it_802C1590(Item_GObj*);\nvoid it_802BB20C(Item_GObj*);\nvoid it_802BAEEC(Item_GObj*);\nvoid it_802BAF0C(Item_GObj*);\nvoid it_802BCFC4(Item_GObj* gobj, f32* arg1, itChainSegment* chainSegment,\n                 Item* item_data, f32 arg4);\nHSD_GObj* it_802BB290(Item_GObj* gobj, Vec3* arg1, f32 facing_dir);\nvoid it_802BCF84(Item_GObj*);\nvoid it_802BD158(Item_GObj* gobj, Vec3*, int, float);\n/// @returns An #Item #HSD_GObj.\nHSD_GObj* it_802BD4AC(Item_GObj*, Vec3*, u8, s32, f32);\nvoid it_802BD45C(Item_GObj* gobj);\nvoid it_802BDB94(Item_GObj* gobj);\nvoid it_802BDBF8(Item_GObj* gobj);\nvoid it_802BDC18(Item_GObj* gobj);\nbool it_802BDC38(Item_GObj* gobj);\nHSD_GObj* it_802BDE18(Item_GObj*, Vec3*, Fighter_Part, enum_t, float);\nvoid it_802BE214(Item_GObj* gobj, Vec3* pos, enum_t, float facing_dir);\nvoid it_802BDF40(Item_GObj* gobj);\nvoid it_802BDFA0(Item_GObj* gobj);\nvoid it_802BDFC0(Item_GObj* gobj);\nvoid it_802BE100(Item_GObj* gobj);\n/* 2A07B4 */ void it_802A07B4(Item_GObj* gobj);\n/* 2A0534 */ void it_802A0534(Item_GObj* gobj, Vec3*);\n/* 29FDBC */ bool it_8029FDBC(Item_GObj* gobj);\n/// @returns An #Item #HSD_GObj.\n/* 2A013C */ HSD_GObj* it_802A013C(float facing_dir, Fighter_GObj* owner_gobj,\n                                   Vec3* pos, Fighter_Part, int);\n/* 2A8A7C */ void it_802A8A7C(Item_GObj* gobj);\n/* 2AF304 */ void it_802AF304(Item_GObj* gobj);\n/// @returns An #Item #HSD_GObj.\n/* 29DD58 */ HSD_GObj* it_8029DD58(Item_GObj* fighter_gobj, Vec3*, u8, int,\n                                   float);\n/* 2AF1A4 */ HSD_GObj* it_802AF1A4(float facing_dir, Fighter_GObj* owner_gobj,\n                                   Vec3*, Fighter_Part, int);\n/* 2A8398 */ void it_802A8398(Item_GObj*, Vec3*);\n/* 2A83E0 */ HSD_GObj* it_802A83E0(float facing_dir, Fighter_GObj*, Vec3*,\n                                   Fighter_Part, int);\n/* 2A850C */ void it_802A850C(Item_GObj*, Vec3*, Vec3*, float, float, float);\nextern ItemStateTable it_803F94A0[];\nstatic inline void checkFighter2244(HSD_GObj* gobj)\n{\n    Fighter* fp;\n    if (gobj == ((any_t) 0)) {\n        return;\n    }\n    fp = gobj->user_data;\n    if (fp != ((any_t) 0) && fp->fv.lk.x18 != ((any_t) 0)) {\n        it_802C8C34(fp->fv.lk.x18);\n        fp->fv.lk.x18 = ((any_t) 0);\n    }\n    if (gobj == ((any_t) 0)) {\n        gobj == ((any_t) 0);\n    }\n}\n#define GALE01_0E2888\n/* 0E2888 */ void ftCa_Init_OnDeath(HSD_GObj* gobj);\n/* 0E28C8 */ void ftCa_Init_800E28C8(HSD_GObj* gobj);\n/* 0E28E8 */ void ftCa_Init_OnItemPickup(HSD_GObj* gobj, bool);\n/* 0E29C8 */ void ftCa_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 0E2A10 */ void ftCa_Init_OnItemVisible(HSD_GObj* gobj);\n/* 0E2A58 */ void ftCa_Init_OnItemDrop(HSD_GObj* gobj, bool);\n/* 0E2AAC */ void ftCa_Init_OnLoadForGanon(Fighter*);\n/* 0E2AEC */ void ftCa_Init_OnLoad(HSD_GObj* gobj);\n/* 0E2B40 */ void ftCa_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 3C72B8 */ extern MotionState ftCa_Init_MotionStateTable[ftCa_MS_SelfCount];\n/* 3C7598 */ extern char ftCa_Init_DatFilename[];\n/* 3C75A4 */ extern char ftCa_Init_DataName[];\n/* 3C76A0 */ extern char ftCa_Init_AnimDatFilename[];\n/* 3C772C */ extern Fighter_DemoStrings ftCa_Init_DemoMotionFilenames;\n/* 3C773C */ extern Fighter_CostumeStrings ftCa_Init_CostumeStrings[];\n#define GALE01_0E4040\n/* 0E4354 */ void ftCa_SpecialHi_Anim(HSD_GObj* gobj);\n/* 0E4838 */ void ftCa_SpecialLwEndAir_Coll(HSD_GObj* gobj);\n/* 0E49DC */ void ftCa_SpecialHiThrow1_Coll(HSD_GObj* gobj);\n/* 0E4A78 */ void ftCa_SpecialHi_Enter(HSD_GObj* gobj);\n/* 0E4B60 */ void ftCa_SpecialHi_IASA(HSD_GObj* gobj);\n/* 0E4BF8 */ void ftCa_SpecialHi_Phys(HSD_GObj* gobj);\n/* 0E4CF4 */ void ftCa_SpecialAirHi_Enter(HSD_GObj* gobj);\n/* 0E4E1C */ void ftCa_SpecialHi_Coll(HSD_GObj* gobj);\n/* 0E4EE8 */ void ftCa_SpecialAirHi_Anim(HSD_GObj* gobj);\n/* 0E4F48 */ void ftCa_SpecialAirHi_IASA(HSD_GObj* gobj);\n/* 0E4FDC */ void ftCa_SpecialAirHi_Phys(HSD_GObj* gobj);\n/* 0E50D8 */ void ftCa_SpecialAirHi_Coll(HSD_GObj* gobj);\n/* 0E51F8 */ void ftCa_SpecialHiCatch_Anim(HSD_GObj* gobj);\n/* 0E5234 */ void ftCa_SpecialHiCatch_IASA(HSD_GObj* gobj);\n/* 0E5238 */ void ftCa_SpecialHiCatch_Phys(HSD_GObj* gobj);\n/* 0E523C */ void ftCa_SpecialHiCatch_Coll(HSD_GObj* gobj);\n/* 0E5310 */ void ftCa_SpecialHiThrow0_Anim(HSD_GObj* gobj);\n/* 0E5384 */ void ftCa_SpecialHiThrow0_IASA(HSD_GObj* gobj);\n/* 0E5388 */ void ftCa_SpecialHiThrow0_Phys(HSD_GObj* gobj);\n/* 0E54B8 */ void ftCa_SpecialHiThrow0_Coll(HSD_GObj* gobj);\n#define GALE01_0E415C\n/* 0E4040 */ void ftCa_SpecialLw_Enter(HSD_GObj* gobj);\n/* 0E40D8 */ void ftCa_SpecialAirLw_Enter(HSD_GObj* gobj);\n/* 0E415C */ void ftCa_SpecialLw_Anim(HSD_GObj* gobj);\n/* 0E4268 */ void ftCa_SpecialLwEnd_Anim(HSD_GObj* gobj);\n/* 0E42A4 */ void ftCa_SpecialLwEndAir_Anim(HSD_GObj* gobj);\n/* 0E42E0 */ void ftCa_SpecialAirLw_Anim(HSD_GObj* gobj);\n/* 0E4354 */ void ftCa_SpecialAirLwEnd_Anim(HSD_GObj* gobj);\n/* 0E4390 */ void ftCa_SpecialAirLwEndAir_Anim(HSD_GObj* gobj);\n/* 0E43CC */ void ftCa_SpecialHiThrow1_Anim(HSD_GObj* gobj);\n/* 0E4408 */ void ftCa_SpecialLw_Phys(HSD_GObj* gobj);\n/* 0E449C */ void ftCa_SpecialLwEnd_Phys(HSD_GObj* gobj);\n/* 0E455C */ void ftCa_SpecialLwEndAir_Phys(HSD_GObj* gobj);\n/* 0E45E4 */ void ftCa_SpecialAirLw_Phys(HSD_GObj* gobj);\n/* 0E4618 */ void ftCa_SpecialAirLwEnd_Phys(HSD_GObj* gobj);\n/* 0E4678 */ void ftCa_SpecialAirLwEndAir_Phys(HSD_GObj* gobj);\n/* 0E4698 */ void ftCa_SpecialHiThrow1_Phys(HSD_GObj* gobj);\n/* 0E46B8 */ void ftCa_SpecialLw_Coll(HSD_GObj* gobj);\n/* 0E47B0 */ void ftCa_SpecialLwEnd_Coll(HSD_GObj* gobj);\n/* 0E4838 */ void ftCa_SpecialLwEndAir_Coll(HSD_GObj* gobj);\n/* 0E48BC */ void ftCa_SpecialAirLw_Coll(HSD_GObj* gobj);\n/* 0E493C */ void ftCa_SpecialAirLwEnd_Coll(HSD_GObj* gobj);\n/* 0E495C */ void ftCa_SpecialAirLwEndAir_Coll(HSD_GObj* gobj);\n/* 0E4A78 */ void ftCa_SpecialHi_Enter(HSD_GObj* gobj);\n/* 0E4CF4 */ void ftCa_SpecialAirHi_Enter(HSD_GObj* gobj);\n/// @file\n/// Neutral Special - Falcon/Warlock Punch (SpecialN)\n#define GALE01_0E2B80\n/* 0E2B80 */ void ftCa_SpecialN_Enter(HSD_GObj* gobj);\n/* 0E2C00 */ void ftCa_SpecialAirN_Enter(HSD_GObj* gobj);\n/* 0E2C80 */ void ftCa_SpecialN_Anim(HSD_GObj* gobj);\n/* 0E2D5C */ void ftCa_SpecialAirN_Anim(HSD_GObj* gobj);\n/* 0E2E38 */ void ftCa_SpecialN_IASA(HSD_GObj* gobj);\n/* 0E2E3C */ void ftCa_SpecialAirN_IASA(HSD_GObj* gobj);\n/* 0E2F2C */ void ftCa_SpecialN_Phys(HSD_GObj* gobj);\n/* 0E3018 */ void ftCa_SpecialAirN_Phys(HSD_GObj* gobj);\n/* 0E3168 */ void ftCa_SpecialN_Coll(HSD_GObj* gobj);\n/* 0E31F4 */ void ftCa_SpecialAirN_Coll(HSD_GObj* gobj);\n/// @file\n/// Side Special - Raptor Boost / Gerudo Dragon (SpecialS)\n#define GALE01_0E3278\n/* 0E3278 */ void ftCa_SpecialS_RemoveGFX(HSD_GObj* gobj);\n/* 0E32B0 */ void ftCa_SpecialS_Enter(HSD_GObj* gobj);\n/* 0E33E0 */ void ftCa_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 0E350C */ void ftCa_SpecialS_OnDetect(HSD_GObj* gobj);\n/* 0E384C */ void ftCa_SpecialSStart_Anim(HSD_GObj* gobj);\n/* 0E3888 */ void ftCa_SpecialS_Anim(HSD_GObj* gobj);\n/* 0E3964 */ void ftCa_SpecialAirSStart_Anim(HSD_GObj* gobj);\n/* 0E39F0 */ void ftCa_SpecialAirS_Anim(HSD_GObj* gobj);\n/* 0E3B0C */ void ftCa_SpecialSStart_IASA(HSD_GObj* gobj);\n/* 0E3B10 */ void ftCa_SpecialS_IASA(HSD_GObj* gobj);\n/* 0E3B14 */ void ftCa_SpecialAirSStart_IASA(HSD_GObj* gobj);\n/* 0E3B18 */ void ftCa_SpecialAirS_IASA(HSD_GObj* gobj);\n/* 0E3B1C */ void ftCa_SpecialSStart_Phys(HSD_GObj* gobj);\n/* 0E3B3C */ void ftCa_SpecialS_Phys(HSD_GObj* gobj);\n/* 0E3B5C */ void ftCa_SpecialAirSStart_Phys(HSD_GObj* gobj);\n/* 0E3BD0 */ void ftCa_SpecialAirS_Phys(HSD_GObj* gobj);\n/* 0E3C38 */ void ftCa_SpecialSStart_Coll(HSD_GObj* gobj);\n/* 0E3D44 */ void ftCa_SpecialS_Coll(HSD_GObj* gobj);\n/* 0E3DE4 */ void ftCa_SpecialAirSStart_Coll(HSD_GObj* gobj);\n/* 0E3E40 */ void ftCa_SpecialAirS_Coll(HSD_GObj* gobj);\n#define GALE01_08A698\n/* 08A698 */ /* static */ M2C_UNK ftCo_8008A698();\n/* 08A6D8 */ /* static */ M2C_UNK ftCo_8008A6D8();\n#define GALE01_09C4F8\n/* 09C4F8 */ bool ftCo_8009C4F8(ftCo_GObj* gobj);\n#define GALE01_09CB40\n/* 09CB40 */ /* static */ M2C_UNK ftCo_8009CB40();\n/* 09CF84 */ void ftCo_8009CF84(ftCo_Fighter* fp);\n/* 09D074 */ /* static */ M2C_UNK ftCo_8009D074();\n/* 09D18C */ /* static */ M2C_UNK ftCo_8009D18C();\n/* 09D2A4 */ /* static */ M2C_UNK ftCo_8009D2A4();\n/* 09D3BC */ /* static */ M2C_UNK ftCo_8009D3BC();\n/* 09D4D4 */ /* static */ M2C_UNK ftCo_8009D4D4();\n/* 09D5EC */ /* static */ M2C_UNK ftCo_8009D5EC();\n/* 09D704 */ /* static */ M2C_UNK ftCo_8009D704();\n/* 09D81C */ /* static */ M2C_UNK ftCo_8009D81C();\n/* 09D920 */ /* static */ M2C_UNK ftCo_8009D920();\n/* 09DA38 */ /* static */ M2C_UNK ftCo_8009DA38();\n/* 09DB50 */ /* static */ M2C_UNK ftCo_8009DB50();\n/* 09DC54 */ /* static */ void ftCo_8009DC54(ftCo_Fighter* fp);\n/* 09DD94 */ /* static */ M2C_UNK ftCo_8009DD94();\n/* 09E0A8 */ /* static */ void ftCo_8009E0A8(ftCo_GObj* gobj);\n/* 09E0D4 */ /* static */ void ftCo_8009E0D4(ftCo_Fighter* fp);\n/* 09E140 */ void ftCo_8009E140(ftCo_Fighter* fp, bool);\n/* 09E1D4 */ /* static */ M2C_UNK ftCo_8009E1D4();\n/* 09E318 */ void ftCo_8009E318(int, void*, float);\n/* 09E4A8 */ /* static */ M2C_UNK ftCo_8009E4A8();\n/* 09E614 */ /* static */ M2C_UNK ftCo_8009E614();\n/* 09E714 */ void ftCo_8009E714(u8, s16, char*, u8, float, float, float, float,\n                                float, float);\n/* 09E7B4 */ /* static */ void ftCo_8009E7B4(ftCo_Fighter* fp, u8*);\n/* 09EAF8 */ /* static */ void ftCo_8009EAF8(ftCo_GObj* gobj);\n#define GALE01_09F480\n/* 09F480 */ /* static */ void ftCo_8009F480(ftCo_GObj* gobj);\n/* 09F4A4 */ /* static */ M2C_UNK ftCo_8009F4A4();\n/* 09F54C */ /* static */ M2C_UNK ftCo_8009F54C();\n/* 09F578 */ void ftCo_8009F578(ftCo_Fighter* fp);\n/* 09F5AC */ /* static */ M2C_UNK ftCo_8009F5AC();\n/* 09F75C */ M2C_UNK ftCo_8009F75C(HSD_MObj* mobj, M2C_UNK arg1);\n/* 09F7F8 */ M2C_UNK ftCo_8009F7F8();\n#define GALE01_09F7F8\n/* 09F834 */ void ftCo_8009F834(ftCo_GObj*, int, int, int, int, Vec3*, Vec3*,\n                                float);\n/* 0A0098 */ M2C_UNK ftCo_800A0098();\n#define GALE01_0A0148\n/* 09D044 */ static M2C_UNK ftCo_800A0148();\n/* 09D06C */ static M2C_UNK ftCo_800AC7D4();\n/* 09D280 */ static M2C_UNK ftCo_800A0384();\n/* 09D3DC */ static M2C_UNK ftCo_800ACB44();\n/* 09D404 */ static M2C_UNK ftCo_800A0508();\n/* 09D4F0 */ M2C_UNK ftCo_800A05F4();\n/* 09D5F4 */ static M2C_UNK ftCo_800ACD5C();\n/* 09D694 */ M2C_UNK ftCo_800A0798();\n/* 09D7EC */ static M2C_UNK ftCo_800A08F0();\n/* 09D9F0 */ static M2C_UNK ftCo_800A0AF4();\n/* 09DB88 */ M2C_UNK ftCo_800A0C8C(M2C_UNK);\n/* 09DBAC */ static M2C_UNK ftCo_800A0CB0();\n/* 09DCA0 */ void ftCo_800A0DA4(Fighter* fp);\n/* 09DCC4 */ static M2C_UNK ftCo_800AD42C();\n/* 09DDE4 */ static M2C_UNK ftCo_800AD54C();\n/* 09DDFC */ static M2C_UNK ftCo_800A0F00();\n/* 09DEAC */ M2C_UNK ftCo_800A0FB0();\n/* 09DF18 */ void ftCo_800A101C(Fighter*, s8, s8, s32);\n/* 09E094 */ static M2C_UNK ftCo_800AD7FC();\n/* 09E4C0 */ static M2C_UNK ftCo_800ADC28();\n/* 09E6E0 */ float ftCo_800A17E4(Fighter* fp);\n/* 09E6E0 */ static M2C_UNK ftCo_800ADE48();\n/* 09E770 */ float ftCo_800A1874(Fighter* fp);\n/* 09E800 */ float ftCo_800A1904(Fighter* fp);\n/* 09E844 */ float ftCo_800A1948(Fighter* fp);\n/* 09E888 */ HSD_Pad ftCo_800A198C(Fighter* fp);\n/* 09E890 */ float ftCo_800A1994(Fighter* fp);\n/* 09E920 */ float ftCo_800A1A24(Fighter* fp);\n/* 09EBC0 */ static M2C_UNK ftCo_800A1CC4();\n/* 09EE38 */ static M2C_UNK ftCo_800A1F3C();\n/* 09EE94 */ static M2C_UNK ftCo_800A1F98();\n/* 09EF9C */ static M2C_UNK ftCo_800A20A0();\n/* 09F044 */ static M2C_UNK ftCo_800AE7AC();\n/* 09F06C */ M2C_UNK ftCo_800A2170();\n/* 09F0F8 */ static M2C_UNK ftCo_800A21FC();\n/* 09F198 */ static M2C_UNK ftCo_800A229C();\n/* 09F324 */ static M2C_UNK ftCo_800AEA8C();\n/* 09F588 */ static M2C_UNK ftCo_800AECF0();\n/* 09F614 */ static M2C_UNK ftCo_800A2718();\n/* 09F7CC */ M2C_UNK ftCo_800A28D0();\n/* 09F850 */ static M2C_UNK ftCo_800AEFB8();\n/* 09F894 */ M2C_UNK ftCo_800A2998();\n/* 09F96C */ M2C_UNK ftCo_800A2A70();\n/* 09FAD0 */ bool ftCo_800A2BD4(ftCo_Fighter* fp);\n/* 09FB04 */ M2C_UNK ftCo_800A2C08();\n/* 09FB28 */ static M2C_UNK ftCo_800AF290();\n/* 09FB7C */ static M2C_UNK ftCo_800A2C80();\n/* 0A0024 */ static M2C_UNK ftCo_800AF78C();\n/* 0A0030 */ M2C_UNK ftCo_800A3134();\n/* 0A007C */ M2C_UNK ftCo_800A3180();\n/* 0A00FC */ bool ftCo_800A3200(ftCo_Fighter* fp);\n/* 0A0130 */ static M2C_UNK ftCo_800A3234();\n/* 0A0394 */ static M2C_UNK ftCo_800A3498();\n/* 0A0450 */ static M2C_UNK ftCo_800A3554();\n/* 0A04D8 */ static M2C_UNK ftCo_800AFC40();\n/* 0A060C */ static M2C_UNK ftCo_800A3710();\n/* 0A06D4 */ static M2C_UNK ftCo_800AFE3C();\n/* 0A0740 */ M2C_UNK ftCo_800A3844();\n/* 0A0804 */ static M2C_UNK ftCo_800A3908();\n/* 0A0990 */ static M2C_UNK ftCo_800B00F8();\n/* 0A0D74 */ static M2C_UNK ftCo_800B04DC();\n/* 0A0F34 */ static M2C_UNK ftCo_800A4038();\n/* 0A0FF8 */ static M2C_UNK ftCo_800B0760();\n/* 0A11B0 */ static M2C_UNK ftCo_800B0918();\n/* 0A138C */ static void ftCo_800B0AF4(ftCo_Fighter* fp);\n/* 0A1540 */ static M2C_UNK ftCo_800B0CA8();\n/* 0A1664 */ static M2C_UNK ftCo_800A4768();\n/* 0A1730 */ static M2C_UNK ftCo_800B0E98();\n/* 0A18B4 */ static M2C_UNK ftCo_800B101C();\n/* 0A193C */ M2C_UNK ftCo_800A4A40();\n/* 0A1AB4 */ M2C_UNK ftCo_800A1AB4();\n/* 0A1AE8 */ static M2C_UNK ftCo_800A4BEC();\n/* 0A1B04 */ static M2C_UNK ftCo_800B126C();\n/* 0A1B38 */ static M2C_UNK ftCo_800A1B38();\n/* 0A1BA8 */ M2C_UNK ftCo_800A1BA8();\n/* 0A1C44 */ bool ftCo_800A1C44(ftCo_Fighter* fp);\n/* 0A1CA8 */ bool ftCo_800A1CA8(ftCo_Fighter* fp);\n/* 0A1D10 */ static M2C_UNK ftCo_800B1478();\n/* 0A1D88 */ M2C_UNK ftCo_800A4E8C();\n/* 0A1FD0 */ static M2C_UNK ftCo_800A50D4();\n/* 0A2040 */ bool ftCo_800A2040(Fighter* fp);\n/* 0A2068 */ static M2C_UNK ftCo_800B17D0();\n/* 0A2190 */ static M2C_UNK ftCo_800A5294();\n/* 0A22D8 */ static M2C_UNK ftCo_800A53DC();\n/* 0A2350 */ static M2C_UNK ftCo_800B1AB8();\n/* 0A2638 */ static M2C_UNK ftCo_800B1DA0();\n/* 0A2788 */ static M2C_UNK ftCo_800B1EF0();\n/* 0A2798 */ static M2C_UNK ftCo_800A589C();\n/* 0A2804 */ M2C_UNK ftCo_800A5908();\n/* 0A2840 */ static M2C_UNK ftCo_800A5944();\n/* 0A287C */ M2C_UNK ftCo_800A5980();\n/* 0A28BC */ bool ftCo_800A59C0(M2C_UNK);\n/* 0A28E0 */ bool ftCo_800A59E4(ftCo_Fighter* fp);\n/* 0A2924 */ M2C_UNK ftCo_800A5A28();\n/* 0A2A60 */ static M2C_UNK ftCo_800B21C8();\n/* 0A2D50 */ static M2C_UNK ftCo_800B24B8();\n/* 0A3028 */ static void ftCo_800B2790(ftCo_Fighter* fp);\n/* 0A3C48 */ static void ftCo_800B33B0(ftCo_Fighter* fp);\n/* 0A41F4 */ M2C_UNK ftCo_800B395C();\n/* 0A5A5C */ M2C_UNK ftCo_800A5A5C();\n/* 0A5A90 */ M2C_UNK ftCo_800A5A90();\n/* 0A5ACC */ static M2C_UNK ftCo_800A5ACC();\n/* 0A5CE0 */ static M2C_UNK ftCo_800A5CE0();\n/* 0A5F4C */ static M2C_UNK ftCo_800A5F4C();\n/* 0A61D8 */ static M2C_UNK ftCo_800A61D8();\n/* 0A648C */ static M2C_UNK ftCo_800A648C();\n/* 0A6700 */ static M2C_UNK ftCo_800A6700();\n/* 0A6A98 */ static M2C_UNK ftCo_800A6A98();\n/* 0A6D2C */ static M2C_UNK ftCo_800A6D2C();\n/* 0A6FC4 */ static M2C_UNK ftCo_800A6FC4();\n/* 0A75DC */ static M2C_UNK ftCo_800A75DC();\n/* 0A7AAC */ static M2C_UNK ftCo_800A7AAC();\n/* 0A80E4 */ static M2C_UNK ftCo_800A80E4();\n/* 0A8210 */ static M2C_UNK ftCo_800A8210();\n/* 0A866C */ static M2C_UNK ftCo_800A866C();\n/* 0A8940 */ static M2C_UNK ftCo_800A8940();\n/* 0A8DE4 */ static M2C_UNK ftCo_800A8DE4();\n/* 0A8EB0 */ static M2C_UNK ftCo_800A8EB0();\n/* 0A92CC */ static M2C_UNK ftCo_800A92CC();\n/* 0A949C */ static M2C_UNK ftCo_800A949C();\n/* 0A963C */ static M2C_UNK ftCo_800A963C();\n/* 0A96B8 */ static M2C_UNK ftCo_800A96B8();\n/* 0A9904 */ static M2C_UNK ftCo_800A9904();\n/* 0A9CB4 */ static M2C_UNK ftCo_800A9CB4();\n/* 0AA320 */ static M2C_UNK ftCo_800AA320();\n/* 0AA42C */ static M2C_UNK ftCo_800AA42C();\n/* 0AA844 */ static M2C_UNK ftCo_800AA844();\n/* 0AABC8 */ static M2C_UNK ftCo_800AABC8();\n/* 0AACD0 */ static M2C_UNK ftCo_800AACD0();\n/* 0AAF48 */ static M2C_UNK ftCo_800AAF48();\n/* 0AB224 */ static M2C_UNK ftCo_800AB224();\n/* 0ABA34 */ static M2C_UNK ftCo_800ABA34();\n/* 0ABBA8 */ static M2C_UNK ftCo_800ABBA8();\n/* 0AC30C */ static M2C_UNK ftCo_800AC30C();\n/* 0AC434 */ static M2C_UNK ftCo_800AC434();\n/* 0AC5A0 */ static M2C_UNK ftCo_800AC5A0();\n/* 0B07FC */ void ftCo_800B3900(Fighter_GObj* gobj);\n/* 0B0858 */ M2C_UNK ftCo_800B3958();\n/* 0B2AFC */ static void ftCo_800B2AFC(ftCo_Fighter* fp);\n#define GALE01_0B3E04\n/* 0B3E04 */ void ftCo_800B3E04(ftCo_Fighter* fp);\n/* 0B462C */ /* static */ M2C_UNK ftCo_800B462C();\n/* 0B463C */ void ftCo_800B463C(M2C_UNK, int);\n/* 0B46B8 */ /* static */ M2C_UNK ftCo_800B46B8();\n/* 0B4778 */ /* static */ M2C_UNK ftCo_800B4778();\n/* 0B4880 */ /* static */ M2C_UNK ftCo_800B4880();\n/* 0B49F4 */ /* static */ M2C_UNK ftCo_800B49F4();\n/* 0B4A78 */ /* static */ M2C_UNK ftCo_800B4A78();\n/* 0B4AB0 */ /* static */ M2C_UNK ftCo_800B4AB0();\n/* 0B52AC */ /* static */ M2C_UNK ftCo_800B52AC();\n/* 0B5AB0 */ /* static */ M2C_UNK ftCo_800B5AB0();\n/* 0B6208 */ /* static */ M2C_UNK ftCo_800B6208();\n/* 0B630C */ /* static */ M2C_UNK ftCo_800B630C();\n/* 0B63D8 */ /* static */ M2C_UNK ftCo_800B63D8();\n/* 0B658C */ /* static */ M2C_UNK ftCo_800B658C();\n/* 0B683C */ /* static */ M2C_UNK ftCo_800B683C();\n/* 0B7180 */ /* static */ M2C_UNK ftCo_800B7180();\n/* 0B732C */ /* static */ M2C_UNK ftCo_800B732C();\n/* 0B7638 */ /* static */ M2C_UNK ftCo_800B7638();\n/* 0B77E8 */ /* static */ M2C_UNK ftCo_800B77E8();\n/* 0B885C */ /* static */ M2C_UNK ftCo_800B885C();\n/* 0B89CC */ /* static */ M2C_UNK ftCo_800B89CC();\n/* 0B8A9C */ /* static */ M2C_UNK ftCo_800B8A9C();\n/* 0B9020 */ /* static */ M2C_UNK ftCo_800B9020();\n/* 0B920C */ /* static */ M2C_UNK ftCo_800B920C();\n/* 0B92D4 */ /* static */ M2C_UNK ftCo_800B92D4();\n/* 0B9340 */ /* static */ M2C_UNK ftCo_800B9340();\n/* 0B9504 */ /* static */ M2C_UNK ftCo_800B9504();\n/* 0B9704 */ /* static */ M2C_UNK ftCo_800B9704();\n/* 0B9790 */ /* static */ M2C_UNK ftCo_800B9790();\n/* 0B98C8 */ /* static */ M2C_UNK ftCo_800B98C8();\n/* 0B9A04 */ /* static */ M2C_UNK ftCo_800B9A04();\n/* 0B9CBC */ /* static */ M2C_UNK ftCo_800B9CBC();\n/* 0B9F6C */ /* static */ M2C_UNK ftCo_800B9F6C();\n/* 0B9F90 */ /* static */ M2C_UNK ftCo_800B9F90();\n/* 0BA080 */ /* static */ M2C_UNK ftCo_800BA080();\n/* 0BA160 */ /* static */ M2C_UNK ftCo_800BA160();\n/* 0BA224 */ /* static */ M2C_UNK ftCo_800BA224();\n/* 0BA2E8 */ /* static */ M2C_UNK ftCo_800BA2E8();\n/* 0BA674 */ /* static */ M2C_UNK ftCo_800BA674();\n/* 0BA9A0 */ /* static */ M2C_UNK ftCo_800BA9A0();\n/* 0BB104 */ /* static */ M2C_UNK ftCo_800BB104();\n/* 0BB220 */ /* static */ M2C_UNK ftCo_800BB220();\n/* 0BB768 */ /* static */ M2C_UNK ftCo_800BB768();\n/* 0BB9B4 */ /* static */ M2C_UNK ftCo_800BB9B4();\n#define GALE01_08A9F8\n/* 08A9F8 */ bool ftCo_Attack1_CheckInput(ftCo_GObj* gobj);\n/* 08AC9C */ void ftCo_Attack11_Anim(ftCo_GObj* gobj);\n/* 08ACD8 */ void ftCo_Attack11_IASA(ftCo_GObj* gobj);\n/* 08ADF0 */ void ftCo_Attack11_Phys(ftCo_GObj* gobj);\n/* 08AE10 */ void ftCo_Attack11_Coll(ftCo_GObj* gobj);\n/* 08B040 */ void ftCo_Attack12_Anim(ftCo_GObj* gobj);\n/* 08B07C */ void ftCo_Attack12_IASA(ftCo_GObj* gobj);\n/* 08B354 */ void ftCo_Attack13_Anim(ftCo_GObj* gobj);\n/* 08B390 */ void ftCo_Attack13_IASA(ftCo_GObj* gobj);\n#define GALE01_08CD68\n/* 08CD68 */ bool ftCo_AttackAir_CheckItemThrowInput(ftCo_GObj* gobj);\n/* 08CE68 */ FtMotionId ftCo_AttackAir_GetMsidFromCStick(ftCo_Fighter* fp);\n/* 08CF70 */ void ftCo_AttackAir_EnterFromCStick(ftCo_GObj* gobj);\n/* 08CFAC */ void ftCo_AttackAir_EnterFromMsid(ftCo_GObj* gobj, FtMotionId);\n/* 08D010 */ void ftCo_AttackAir_Anim(ftCo_GObj* gobj);\n/* 08D08C */ void ftCo_AttackAirN_IASA(ftCo_GObj* gobj);\n/* 08D194 */ void ftCo_AttackAirF_IASA(ftCo_GObj* gobj);\n/* 08D29C */ void ftCo_AttackAirB_IASA(ftCo_GObj* gobj);\n/* 08D3A4 */ void ftCo_AttackAirHi_IASA(ftCo_GObj* gobj);\n/* 08D4AC */ void ftCo_AttackAirLw_IASA(ftCo_GObj* gobj);\n/* 08D5B4 */ void ftCo_AttackAir_Phys(ftCo_GObj* gobj);\n/* 08D5D4 */ void ftCo_AttackAir_Coll(ftCo_GObj* gobj);\n#define GALE01_08B3E4\n/* 08B3E4 */ bool ftCo_AttackDash_CheckInput(ftCo_GObj* gobj);\n/* 08B548 */ void ftCo_AttackDash_Anim(ftCo_GObj* gobj);\n/* 08B584 */ void ftCo_AttackDash_SetMv0(ftCo_GObj* gobj);\n/* 08B5AC */ void ftCo_AttackDash_IASA(ftCo_GObj* gobj);\n/* 08B600 */ void ftCo_AttackDash_Phys(ftCo_GObj* gobj);\n/* 08B638 */ void ftCo_AttackDash_Coll(ftCo_GObj* gobj);\n#define GALE01_08B980\n/* 08B980 */ bool ftCo_AttackHi3_CheckInput(ftCo_GObj* gobj);\n/* 08BA98 */ void ftCo_AttackHi3_Anim(ftCo_GObj* gobj);\n/* 08BAD4 */ void ftCo_AttackHi3_IASA(ftCo_GObj* gobj);\n/* 08BB04 */ void ftCo_AttackHi3_Phys(ftCo_GObj* gobj);\n/* 08BB24 */ void ftCo_AttackHi3_Coll(ftCo_GObj* gobj);\n#define GALE01_08C830\n/* 08C830 */ bool ftCo_AttackHi4_CheckInput(ftCo_GObj* gobj);\n/* 08C948 */ bool ftCo_AttackHi4_CheckInputNoD0(ftCo_GObj* gobj);\n/* 08CA98 */ void ftCo_AttackHi4_Anim(ftCo_GObj* gobj);\n/* 08CAD4 */ void ftCo_AttackHi4_IASA(ftCo_GObj* gobj);\n/* 08CB04 */ void ftCo_AttackHi4_Phys(ftCo_GObj* gobj);\n/* 08CB24 */ void ftCo_AttackHi4_Coll(ftCo_GObj* gobj);\n#define GALE01_08BB44\n/* 08BB44 */ bool ftCo_AttackLw3_CheckInput(ftCo_GObj* gobj);\n/* 08BCFC */ void ftCo_AttackLw3_Anim(ftCo_GObj* gobj);\n/* 08BD80 */ void ftCo_AttackLw3_IASA(ftCo_GObj* gobj);\n/* 08BF84 */ void ftCo_AttackLw3_Phys(ftCo_GObj* gobj);\n/* 08BFA4 */ void ftCo_AttackLw3_Coll(ftCo_GObj* gobj);\n#define GALE01_08CB44\n/* 08CB44 */ bool ftCo_AttackLw4_CheckInput(ftCo_GObj* gobj);\n/* 08CCBC */ void ftCo_AttackLw4_Anim(ftCo_GObj* gobj);\n/* 08CCF8 */ void ftCo_AttackLw4_IASA(ftCo_GObj* gobj);\n/* 08CD28 */ void ftCo_AttackLw4_Phys(ftCo_GObj* gobj);\n/* 08CD48 */ void ftCo_AttackLw4_Coll(ftCo_GObj* gobj);\n#define GALE01_08B8D4\n/* 08B658 */ bool ftCo_AttackS3_CheckInput(ftCo_GObj* gobj);\n/* 08B8D4 */ void ftCo_AttackS3_Anim(ftCo_GObj* gobj);\n/* 08B910 */ void ftCo_AttackS3_IASA(ftCo_GObj* gobj);\n/* 08B940 */ void ftCo_AttackS3_Phys(ftCo_GObj* gobj);\n/* 08B960 */ void ftCo_AttackS3_Coll(ftCo_GObj* gobj);\n#define GALE01_08BFC4\n/* 08BFC4 */ bool ftCo_AttackS4_CheckInput(ftCo_GObj* gobj);\n/* 08C114 */ bool ftCo_AttackS4_8008C114(ftCo_GObj* gobj);\n/* 08C520 */ void ftCo_AttackS4_Anim(ftCo_GObj* gobj);\n/* 08C55C */ void ftCo_AttackS4_IASA(ftCo_GObj* gobj);\n/* 08C7F0 */ void ftCo_AttackS4_Phys(ftCo_GObj* gobj);\n/* 08C810 */ void ftCo_AttackS4_Coll(ftCo_GObj* gobj);\n#define GALE01_09EB18\n/* 09EB18 */ /* static */ void ftCo_8009EB18(ftCo_GObj* gobj);\n/* 09EC08 */ void ftCo_BarrelWait_Anim(ftCo_GObj* gobj);\n/* 09EC0C */ void ftCo_BarrelWait_IASA(ftCo_GObj* gobj);\n/* 09EC3C */ void ftCo_BarrelWait_Phys(ftCo_GObj* gobj);\n/* 09EC40 */ void ftCo_BarrelWait_Coll(ftCo_GObj* gobj);\n/* 09EC44 */ /* static */ void ftCo_8009EC44(ftCo_GObj* gobj);\n/* 09EC70 */ /* static */ void ftCo_8009EC70(ftCo_GObj* gobj, Vec3* pos,\n                                             int arg2, float kb_angle);\n#define GALE01_09CA0C\n/* 09CA0C */ void ftCo_8009CA0C(ftCo_GObj* gobj, ftCo_GObj* vic_gobj);\n/* 09CB04 */ void ftCo_CaptureCaptain_Anim(ftCo_GObj* gobj);\n/* 09CB08 */ void ftCo_CaptureCaptain_IASA(ftCo_GObj* gobj);\n/* 09CB0C */ void ftCo_CaptureCaptain_Phys(ftCo_GObj* gobj);\n/* 09CB10 */ void ftCo_CaptureCaptain_Coll(ftCo_GObj* gobj);\n#define GALE01_0BC9C8\n/* 0BC9C8 */ void ftCo_800BC9C8(ftCo_GObj* gobj);\n/* 0BCA54 */ void ftCo_CaptureDamageKoopa_Anim(ftCo_GObj* gobj);\n/* 0BCAE8 */ void ftCo_CaptureDamageKoopa_IASA(ftCo_GObj* gobj);\n/* 0BCAEC */ void ftCo_CaptureDamageKoopa_Phys(ftCo_GObj* gobj);\n/* 0BCAF0 */ void ftCo_CaptureDamageKoopa_Coll(ftCo_GObj* gobj);\n/* 0BCAF4 */ void ftCo_800BCAF4(ftCo_GObj* gobj);\n/* 0BCB80 */ void ftCo_CaptureDamageKoopaAir_Anim(ftCo_GObj* gobj);\n/* 0BCC14 */ void ftCo_CaptureDamageKoopaAir_IASA(ftCo_GObj* gobj);\n/* 0BCC18 */ void ftCo_CaptureDamageKoopaAir_Phys(ftCo_GObj* gobj);\n/* 0BCC1C */ void ftCo_CaptureDamageKoopaAir_Coll(ftCo_GObj* gobj);\n#define GALE01_0BD19C\nstruct _m2c_stack_ftCo_800BD1DC {\n    /* 0x00 */ char pad_0[0x24];\n    /* 0x24 */ float sp24; /* inferred */\n    /* 0x28 */ float sp28; /* inferred */\n    /* 0x2C */ char pad_2C[4];\n    /* 0x30 */ float sp30; /* inferred */\n    /* 0x34 */ float sp34; /* inferred */\n    /* 0x38 */ char pad_38[0x20];\n}; /* size = 0x58 */\nstruct _m2c_stack_ftCo_800BD39C {\n    /* 0x00 */ char pad_0[0x24];\n    /* 0x24 */ Vec3 scale;\n    /* 0x30 */ char pad_30[4];\n    /* 0x34 */ Vec3 pos;\n    /* 0x40 */ char pad_40[0x18];\n}; /* size = 0x58 */\n/* static */ extern char* ftCo_804D3BB0;\n/* static */ extern char* ftCo_804D3BB8;\n/* static */ extern char* ftCo_804D3BC0;\n/* 0BD19C */ float ftCo_800BD19C(Fighter_GObj* gobj, Vec3* pos);\n/* 0BD1DC */ void ftCo_800BD1DC(Fighter_GObj* gobj, Fighter_GObj* victim_gobj);\n/* 0BD38C */ void ftCo_CaptureKirby_Anim(Fighter_GObj*);\n/* 0BD390 */ void ftCo_CaptureKirby_IASA(Fighter_GObj*);\n/* 0BD394 */ void ftCo_CaptureKirby_Phys(Fighter_GObj*);\n/* 0BD398 */ void ftCo_CaptureKirby_Coll(Fighter_GObj*);\n/* 0BD39C */ void ftCo_800BD39C(Fighter_GObj* gobj);\n#define GALE01_098660\n/* 098680 */ void ftCo_800BC458(ftCo_GObj* gobj);\n/* 0986D0 */ void ftCo_800BC4A8(ftCo_GObj* gobj);\n/* 098A08 */ void ftCo_800BC7E0(ftCo_GObj* gobj, ftCo_GObj* arg1);\n/* 098AEC */ void ftCo_CaptureKoopa_Anim(ftCo_GObj* gobj);\n/* 098AF0 */ void ftCo_CaptureKoopa_IASA(ftCo_GObj* gobj);\n/* 098AF4 */ void ftCo_CaptureKoopa_Phys(ftCo_GObj* gobj);\n/* 098AF8 */ void ftCo_CaptureKoopa_Coll(ftCo_GObj* gobj);\n/* 098AFC */ void ftCo_800BC8D4(ftCo_GObj* gobj, ftCo_GObj* arg1);\n/* 098BE0 */ void ftCo_CaptureKoopaAir_Anim(ftCo_GObj* gobj);\n/* 098BE4 */ void ftCo_CaptureKoopaAir_IASA(ftCo_GObj* gobj);\n/* 098BE8 */ void ftCo_CaptureKoopaAir_Phys(ftCo_GObj* gobj);\n/* 098BEC */ void ftCo_CaptureKoopaAir_Coll(ftCo_GObj* gobj);\n/* 0BC438 */ void ftCo_800BC438(ftCo_GObj* gobj);\n#define GALE01_0BCF18\n/* 0BCF18 */ void ftCo_800BCF18(ftCo_GObj*, ftCo_GObj* gobj);\n/* 0BCF18 */ void ftCo_800BCF18(ftCo_GObj* gobj, ftCo_GObj* victim_gobj);\n/* 0BD000 */ void ftCo_800BD000(ftCo_GObj* gobj, ftCo_GObj* victim_gobj);\n#define GALE01_0BD620\n/* static */ extern char* ftCo_804D3BC8;\n/* static */ extern char* ftCo_804D3BD0;\n/* static */ extern char* ftCo_804D3BD8;\n/* 0BD620 */ void ftCo_800BD620(ftCo_GObj* gobj);\n/* 0BD6E8 */ void ftCo_CaptureWaitKirby_Anim(ftCo_GObj* gobj);\n/* 0BD6EC */ void ftCo_800BD6EC(Fighter_GObj* gobj);\n/* 0BD7BC */ void ftCo_CaptureWaitKirby_IASA(ftCo_GObj* gobj);\n/* 0BD9D8 */ void ftCo_CaptureWaitKirby_Phys(ftCo_GObj* gobj);\n/* 0BD9DC */ void ftCo_CaptureWaitKirby_Coll(ftCo_GObj* gobj);\n#define GALE01_0BCC20\n/* 099150 */ void ftCo_CaptureWaitKoopa_Anim(ftCo_GObj* gobj);\n/* 0991C8 */ void ftCo_CaptureWaitKoopa_IASA(ftCo_GObj* gobj);\n/* 0991CC */ void ftCo_CaptureWaitKoopa_Phys(ftCo_GObj* gobj);\n/* 0991D0 */ void ftCo_CaptureWaitKoopa_Coll(ftCo_GObj* gobj);\n/* 099230 */ void ftCo_CaptureWaitKoopaAir_Anim(ftCo_GObj* gobj);\n/* 0992A8 */ void ftCo_CaptureWaitKoopaAir_IASA(ftCo_GObj* gobj);\n/* 0992AC */ void ftCo_CaptureWaitKoopaAir_Phys(ftCo_GObj* gobj);\n/* 0992B0 */ void ftCo_CaptureWaitKoopaAir_Coll(ftCo_GObj* gobj);\n/* 0BCC20 */ void ftCo_800BCC20(ftCo_GObj* gobj);\n/* 0BCD00 */ void ftCo_800BCD00(ftCo_GObj* gobj);\n#define GALE01_09D6E8\n/* 09D6E8 */ void ftCo_800BBB8C(ftCo_GObj* gobj, ftCo_GObj* attacker_gobj);\n/* 09D7D4 */ void ftCo_CaptureYoshi_Anim(ftCo_GObj* gobj);\n/* 09D7D8 */ void ftCo_CaptureYoshi_IASA(ftCo_GObj* gobj);\n/* 09D7DC */ void ftCo_CaptureYoshi_Phys(ftCo_GObj* gobj);\n/* 09D7E0 */ void ftCo_CaptureYoshi_Coll(ftCo_GObj* gobj);\n#define GALE01_09BC58\n/* 09BC58 */ void ftCo_8009BC58(ftCo_GObj* gobj);\n/* 09BCDC */ void ftCo_CargoFall_Anim(ftCo_GObj* gobj);\n/* 09BCE0 */ void ftCo_CargoFall_IASA(ftCo_GObj* gobj);\n/* 09BD04 */ void ftCo_CargoFall_Phys(ftCo_GObj* gobj);\n/* 09BD24 */ void ftCo_CargoFall_Coll(ftCo_GObj* gobj);\n#define GALE01_09BB1C\n/* 09BB1C */ bool ftCo_8009BB1C(ftCo_GObj* gobj);\n/* 09BB64 */ void ftCo_8009BB64(ftCo_GObj* gobj);\n/* 09BBF0 */ void ftCo_CargoJump_Anim(ftCo_GObj* gobj);\n/* 09BBF4 */ void ftCo_CargoJump_IASA(ftCo_GObj* gobj);\n/* 09BC18 */ void ftCo_CargoJump_Phys(ftCo_GObj* gobj);\n/* 09BC38 */ void ftCo_CargoJump_Coll(ftCo_GObj* gobj);\n#define GALE01_09B9C8\n/* 09B9C8 */ void ftCo_8009B9C8(ftCo_GObj* gobj, int arg1);\n/* 09BA50 */ void ftCo_CargoKneebend_Anim(ftCo_GObj* gobj);\n/* 09BAA0 */ void ftCo_CargoKneebend_IASA(ftCo_GObj* gobj);\n/* 09BADC */ void ftCo_CargoKneebend_Phys(ftCo_GObj* gobj);\n/* 09BAFC */ void ftCo_CargoKneebend_Coll(ftCo_GObj* gobj);\n#define GALE01_09BD4C\n/* 09BD4C */ void ftCo_8009BD4C(ftCo_GObj* gobj);\n/* 09BDC4 */ void ftCo_CargoLanding_Anim(ftCo_GObj* gobj);\n/* 09BE14 */ void ftCo_CargoLanding_Phys(ftCo_GObj* gobj);\n/* 09BE34 */ void ftCo_CargoLanding_Coll(ftCo_GObj* gobj);\n#define GALE01_09BE54\n/* 09BE54 */ void ftCo_CargoWait2_Anim(ftCo_GObj* gobj);\n/* 09BEB8 */ void ftCo_CargoWait2_Phys(ftCo_GObj* gobj);\n/* 09BED8 */ void ftCo_CargoWait2_Coll(ftCo_GObj* gobj);\n/* 09BF3C */ bool ftCo_8009BF3C(ftCo_GObj* gobj);\n/* 09C0EC */ void ftCo_CargoThrowF_Anim(ftCo_GObj* gobj);\n/* 09C130 */ void ftCo_CargoThrowF_IASA(ftCo_GObj* gobj);\n/* 09C150 */ void ftCo_CargoThrowF_Phys(ftCo_GObj* gobj);\n/* 09C20C */ void ftCo_CargoThrowF_Coll(ftCo_GObj* gobj);\n/* 09C234 */ void ftCo_CargoThrowB_Anim(ftCo_GObj* gobj);\n/* 09C254 */ void ftCo_CargoThrowB_IASA(ftCo_GObj* gobj);\n/* 09C274 */ void ftCo_CargoThrowB_Phys(ftCo_GObj* gobj);\n/* 09C294 */ void ftCo_CargoThrowB_Coll(ftCo_GObj* gobj);\n/* 09C2BC */ void ftCo_CargoThrowHi_Anim(ftCo_GObj* gobj);\n/* 09C2DC */ void ftCo_CargoThrowHi_IASA(ftCo_GObj* gobj);\n/* 09C2FC */ void ftCo_CargoThrowHi_Phys(ftCo_GObj* gobj);\n/* 09C31C */ void ftCo_CargoThrowHi_Coll(ftCo_GObj* gobj);\n/* 09C344 */ void ftCo_CargoThrowLw_Anim(ftCo_GObj* gobj);\n/* 09C364 */ void ftCo_CargoThrowLw_IASA(ftCo_GObj* gobj);\n/* 09C384 */ void ftCo_CargoThrowLw_Phys(ftCo_GObj* gobj);\n/* 09C3A4 */ void ftCo_CargoThrowLw_Coll(ftCo_GObj* gobj);\n/* 09C3CC */ void ftCo_CargoThrowAir_Anim(ftCo_GObj* gobj);\n/* 09C410 */ void ftCo_CargoThrowAir_IASA(ftCo_GObj* gobj);\n/* 09C414 */ void ftCo_CargoThrowAir_Phys(ftCo_GObj* gobj);\n/* 09C434 */ void ftCo_CargoThrowAir_Coll(ftCo_GObj* gobj);\n#define GALE01_09B818\n/* 09B818 */ bool ftCo_8009B818(ftCo_GObj* gobj);\n/* 09B860 */ /* static */ void ftCo_8009B860(ftCo_GObj* gobj);\n/* 09B8B4 */ void ftCo_CargoTurn_Anim(ftCo_GObj* gobj);\n/* 09B948 */ void ftCo_CargoTurn_IASA(ftCo_GObj* gobj);\n/* 09B988 */ void ftCo_CargoTurn_Phys(ftCo_GObj* gobj);\n/* 09B9A8 */ void ftCo_CargoTurn_Coll(ftCo_GObj* gobj);\n#define GALE01_09B4D0\n/* 09B4D0 */ bool ftCo_8009B4D0(ftCo_GObj* gobj);\n/* 09B518 */ void ftCo_8009B518(ftCo_GObj* gobj);\n/* 09B56C */ void ftCo_8009B56C(ftCo_GObj* gobj);\n/* 09B5C0 */ void ftCo_CargoWait_Anim(ftCo_GObj* gobj);\n/* 09B5C4 */ void ftCo_CargoWait_IASA(ftCo_GObj* gobj);\n/* 09B634 */ void ftCo_CargoWait_Phys(ftCo_GObj* gobj);\n/* 09B654 */ void ftCo_CargoWait_Coll(ftCo_GObj* gobj);\n#define GALE01_09B67C\n/* 09B67C */ bool ftCo_8009B67C(ftCo_GObj* gobj);\n/* 09B744 */ void ftCo_CargoWalk_Anim(ftCo_GObj* gobj);\n/* 09B764 */ void ftCo_CargoWalk_IASA(ftCo_GObj* gobj);\n/* 09B7D8 */ void ftCo_CargoWalk_Phys(ftCo_GObj* gobj);\n/* 09B7F8 */ void ftCo_CargoWalk_Coll(ftCo_GObj* gobj);\n#define GALE01_09AE14\n/* 09AE14 */ void ftCo_8009AE14(ftCo_GObj* gobj);\n/* 09AE38 */ bool ftCo_8009AE38(ftCo_GObj* gobj);\n/* 09AF70 */ void ftCo_CliffAttack_Anim(ftCo_GObj* gobj);\n/* 09AF90 */ void ftCo_CliffAttack_IASA(ftCo_GObj* gobj);\n/* 09AF94 */ void ftCo_CliffAttack_Phys(ftCo_GObj* gobj);\n/* 09AFB4 */ void ftCo_CliffAttack_Coll(ftCo_GObj* gobj);\n/* 09AFD4 */ bool ftCo_8009AFD4(ftCo_GObj* gobj);\n#define GALE01_09AA0C\n/* 09AA0C */ bool ftCo_8009AA0C(ftCo_GObj* gobj);\n/* 09AC68 */ void ftCo_CliffClimb_Anim(ftCo_GObj* gobj);\n/* 09ACA4 */ void ftCo_CliffClimb_IASA(ftCo_GObj* gobj);\n/* 09ACA8 */ void ftCo_CliffClimb_Phys(ftCo_GObj* gobj);\n/* 09ADA4 */ void ftCo_CliffClimb_Coll(ftCo_GObj* gobj);\n#define GALE01_09B040\n/* 09B040 */ void ftCo_8009B040(ftCo_GObj* gobj);\n/* 09B10C */ void ftCo_CliffEscape_Anim(ftCo_GObj* gobj);\n/* 09B12C */ void ftCo_CliffEscape_IASA(ftCo_GObj* gobj);\n/* 09B130 */ void ftCo_CliffEscape_Phys(ftCo_GObj* gobj);\n/* 09B150 */ void ftCo_CliffEscape_Coll(ftCo_GObj* gobj);\n#define GALE01_09B170\n/* 09B170 */ bool ftCo_8009B170(ftCo_GObj* gobj);\n/* 09B278 */ void ftCo_CliffJump1_Anim(ftCo_GObj* gobj);\n/* 09B2B4 */ void ftCo_CliffJump1_IASA(ftCo_GObj* gobj);\n/* 09B2B8 */ void ftCo_CliffJump1_Phys(ftCo_GObj* gobj);\n/* 09B2D8 */ void ftCo_CliffJump1_Coll(ftCo_GObj* gobj);\n/* 09B390 */ void ftCo_8009B390(ftCo_GObj* gobj, float force_mul);\n/* 09B424 */ void ftCo_CliffJump2_Anim(ftCo_GObj* gobj);\n/* 09B460 */ void ftCo_CliffJump2_IASA(ftCo_GObj* gobj);\n/* 09B464 */ void ftCo_CliffJump2_Phys(ftCo_GObj* gobj);\n/* 09B4A0 */ void ftCo_CliffJump2_Coll(ftCo_GObj* gobj);\n#define GALE01_09A804\n/* 09A804 */ void ftCo_8009A804(ftCo_GObj* gobj);\n/* 09A8D8 */ void ftCo_CliffWait_Anim(ftCo_GObj* gobj);\n/* 09A8FC */ void ftCo_CliffWait_IASA(ftCo_GObj* gobj);\n/* 09A96C */ void ftCo_CliffWait_Phys(ftCo_GObj* gobj);\n/* 09A98C */ void ftCo_CliffWait_Coll(ftCo_GObj* gobj);\n#define GALE01_08D7F0\nstruct _m2c_stack_ft_8008DCE0 {\n    /* 0x00 */ char pad_0[0x40];\n    /* 0x40 */ f32 sp40;\n    /* 0x44 */ Vec3 sp44;\n    /* 0x50 */ char pad_50[0x78];\n}; /* size = 0xC8 */\nstruct _m2c_stack_ftCo_8008E5A4 {\n    /* 0x00 */ char pad_0[0xC];\n    /* 0x0C */ f32 spC; /* inferred */\n    /* 0x10 */ char pad_10[4];\n    /* 0x14 */ Vec3 sp14; /* inferred */\n    /* 0x20 */ Vec3 sp20; /* inferred */\n    /* 0x2C */ char pad_2C[0x2C];\n}; /* size = 0x58 */\n/* 08D7F0 */ float ftCo_Damage_CalcAngle(ftCo_Fighter* fp, float kb_applied);\n/* 08D8D8 */ float ftCo_ScaleBy154(float);\n/* 08D8E8 */ bool ftCo_8008D8E8(float);\n/* 08D930 */ void ftCo_Damage_CalcKnockback(ftCo_Fighter* fp);\n/* 08DB10 */ void ftCo_8008DB10(ftCo_GObj* gobj, enum_t, float);\n/* 08DC0C */ /* static */ void ftCo_Damage_CalcVel(ftCo_Fighter* fp, float x,\n                                                   float y);\n/* 08DCE0 */ void ftCo_8008DCE0(ftCo_GObj* gobj, int, float facing_dir);\n/* 08E498 */ bool ftCo_Damage_CheckAirMotion(ftCo_Fighter* fp);\n/* 08E4F0 */ void ftCo_Damage_OnEveryHitlag(ftCo_GObj* gobj);\n/* 08E5A4 */ /* static */ void ftCo_8008E5A4(ftCo_Fighter* fp);\n/* 08E714 */ void ftCo_Damage_OnExitHitlag(ftCo_GObj* gobj);\n/* 08E908 */ void ftCo_8008E908(ftCo_GObj* gobj, float);\n/* 08E984 */ bool ftCo_8008E984(ftCo_Fighter* fp);\n/* 08E9D0 */ void ftCo_8008E9D0(ftCo_GObj* gobj);\n/* 08EB58 */ void ftCo_8008EB58(ftCo_GObj* gobj);\n/* 08EC90 */ void ftCo_8008EC90(ftCo_GObj* gobj);\n/* 08F744 */ void ftCo_8008F744(ftCo_GObj* gobj);\n/* 08F7F0 */ void ftCo_Damage_Anim(ftCo_GObj* gobj);\n/* 08FA44 */ void ftCo_Damage_IASA(ftCo_GObj* gobj);\n/* 08FB18 */ void ftCo_Damage_Phys(ftCo_GObj* gobj);\n/* 08FB64 */ void ftCo_Damage_Coll(ftCo_GObj* gobj);\n/* 08FC94 */ void ftCo_8008FC94(ftCo_GObj* gobj);\n/* 08FCB8 */ void ftCo_Damage_SetMv8FromKbThreshold(ftCo_Fighter* fp);\n/* 08FD98 */ void ftCo_DamageFly_Anim(ftCo_GObj* gobj);\n/* 08FF48 */ void ftCo_DamageFly_IASA(ftCo_GObj* gobj);\n/* 08FF84 */ void ftCo_DamageFly_Phys(ftCo_GObj* gobj);\n/* 0900EC */ void ftCo_DamageFly_Coll(ftCo_GObj* gobj);\n/* 090184 */ void ftCo_80090184(ftCo_GObj* gobj);\n/* 0901D0 */ void ftCo_DamageFlyRoll_Anim(ftCo_GObj* gobj);\n/* 090324 */ void ftCo_DamageFlyRoll_IASA(ftCo_GObj* gobj);\n/* 09035C */ void ftCo_DamageFlyRoll_Phys(ftCo_GObj* gobj);\n/* 0904C0 */ void ftCo_DamageFlyRoll_Coll(ftCo_GObj* gobj);\n/* 3C5520 */ extern int ftCo_803C5520[2][12];\n#define GALE01_090824\n/* 090574 */ void ftCo_80090574(ftCo_GObj* gobj);\n/* 090594 */ void ftCo_80090594(ftCo_Fighter* fp, enum_t arg1, int dmg,\n                                FtMotionId msid, enum_t arg4,\n                                float hitlag_mul);\n/* 090690 */ Vec2* ftCo_80090690(ftCo_Fighter* fp, Vec2* shift);\n/* 090718 */ void ftCo_80090718(ftCo_Fighter* fp);\n/* 090780 */ void ftCo_80090780(ftCo_GObj* gobj);\n/* 090824 */ void ftCo_DamageFall_Anim(ftCo_GObj* gobj);\n/* 090828 */ void ftCo_DamageFall_IASA(ftCo_GObj* gobj);\n/* 09093C */ void ftCo_DamageFall_Phys(ftCo_GObj* gobj);\n/* 09095C */ void ftCo_DamageFall_Coll(ftCo_GObj* gobj);\n#define GALE01_0912A8\nstruct _m2c_stack_ftCo_80091030 {\n    /* 0x00 */ char pad_0[0x20];\n    /* 0x20 */ Vec3 sp20;\n    /* 0x2C */ struct UNK_SAMUS_S2 sp2C;\n    /* 0x58 */ char pad_54[0x1C];\n}; /* size = 0x70 */\nstruct _m2c_stack_ftCo_80090B60 {\n    /* 0x000 */ char pad_0[0x28];\n    /* 0x028 */ s32 sp28; /* inferred */\n    /* 0x02C */ s32 sp2C; /* inferred */\n    /* 0x030 */ s32 sp30; /* inferred */\n    /* 0x034 */ Fighter_Part part; /* inferred */\n    /* 0x038 */ s32 sp38; /* inferred */\n    /* 0x03C */ s32 sp3C; /* inferred */\n    /* 0x040 */ s32 sp40; /* inferred */\n    /* 0x044 */ s32 sp44; /* inferred */\n    /* 0x048 */ s32 sp48; /* inferred */\n    /* 0x04C */ s32 sp4C; /* inferred */\n    /* 0x050 */ s32 sp50; /* inferred */\n    /* 0x054 */ s32 sp54; /* inferred */\n    /* 0x058 */ f32 sp58; /* inferred */\n    /* 0x05C */ f32 sp5C; /* inferred */\n    /* 0x060 */ char pad_60[8]; /* maybe part of sp5C[3]? */\n    /* 0x068 */ Mtx mtx0;\n    /* 0x098 */ s32 sp98; /* inferred */\n    /* 0x09C */ s32 sp9C; /* inferred */\n    /* 0x0A0 */ s32 spA0; /* inferred */\n    /* 0x0A4 */ s32 spA4; /* inferred */\n    /* 0x0A8 */ char pad_A8[4];\n    /* 0x0AC */ Mtx mtx1;\n    /* 0x0DC */ Quaternion rot;\n    /* 0x0EC */ Mtx mtx2;\n    /* 0x11C */ Mtx mtx3;\n    /* 0x14C */ Mtx mtx4;\n    /* 0x17C */ Mtx mtx5;\n    /* 0x1AC */ Vec3 trans;\n    /* 0x1B8 */ char pad_1B8[0x18];\n}; /* size = 0x1D0 */\nstruct _m2c_stack_ftCo_80091854 {\n    /* 0x00 */ char pad_0[0x24];\n    /* 0x24 */ f32 sp24; /* inferred */\n    /* 0x28 */ Vec3 vec;\n    /* 0x34 */ char pad_34[0xC];\n}; /* size = 0x40 */\n/* 090984 */ void ftCo_80090984(ftCo_GObj* gobj);\n/* 0909D0 */ /* static */ void ftCo_800909D0(ftCo_Fighter* fp);\n/* 090AC0 */ /* static */ void ftCo_80090AC0(ftCo_Fighter* fp);\n/* 090B48 */ /* static */ void ftCo_80090B48(ftCo_GObj* gobj);\n/* 090B60 */ void ftCo_80090B60(ftCo_GObj* gobj);\n/* 091030 */ void ftCo_80091030(ftCo_GObj* gobj);\n/* 091274 */ /* static */ void ftCo_80091274(ftCo_GObj* gobj);\n/* 0912A8 */ void ftCo_DamageIce_Anim(ftCo_GObj* gobj);\n/* 0913DC */ void ftCo_DamageIce_IASA(ftCo_GObj* gobj);\n/* 0913E0 */ void ftCo_DamageIce_Phys(ftCo_GObj* gobj);\n/* 09144C */ void ftCo_DamageIce_Coll(ftCo_GObj* gobj);\n/* 0914A4 */ void ftCo_800914A4(ftCo_GObj* gobj);\n/* 091620 */ /* static */ M2C_UNK ftCo_80091620();\n/* 091854 */ void ftCo_80091854(ftCo_GObj* gobj);\n/* 091988 */ void ftCo_DamageIceJump_Anim(ftCo_GObj* gobj);\n/* 0919D8 */ void ftCo_DamageIceJump_IASA(ftCo_GObj* gobj);\n/* 0919DC */ void ftCo_DamageIceJump_Phys(ftCo_GObj* gobj);\n/* 0919FC */ void ftCo_DamageIceJump_Coll(ftCo_GObj* gobj);\n#define GALE01_097D9C\n/* 097D9C */ bool ftCo_Down_CheckInput(ftCo_GObj* gobj);\n/* 097F08 */ void ftCo_Down_Anim(ftCo_GObj* gobj);\n/* 097F44 */ void ftCo_Down_IASA(ftCo_GObj* gobj);\n/* 097F48 */ void ftCo_Down_Phys(ftCo_GObj* gobj);\n/* 097F68 */ void ftCo_Down_Coll(ftCo_GObj* gobj);\n/* 098400 */ bool ftCo_80098400(ftCo_GObj* gobj);\n#define GALE01_09805C\n/* 09813C */ void ftCo_DownAttack_Anim(ftCo_GObj* gobj);\n/* 098178 */ void ftCo_DownAttack_IASA(ftCo_GObj* gobj);\n/* 09817C */ void ftCo_DownAttack_Phys(ftCo_GObj* gobj);\n/* 09819C */ void ftCo_DownAttack_Coll(ftCo_GObj* gobj);\n/* 0981BC */ void ftCo_80098634(HSD_ObjAllocUnk2*);\n/* 098238 */ /* static */ bool ftCo_800986B0(Fighter_GObj* arg0);\n/* 0984D4 */ bool ftCo_800984D4(ftCo_GObj* gobj);\n/* 09856C */ void ftCo_8009856C(ftCo_GObj*, FtMotionId msid);\n/* 09856C */ void ftCo_8009857C(ftCo_GObj*, FtMotionId msid);\n/* 09872C */ bool ftCo_8009872C(ftCo_GObj* gobj);\n#define GALE01_096F0C\nextern enum_t ftCo_DownBound_SfxIds[4];\nstruct _m2c_stack_ftCo_800976A4 {\n    /* 0x00 */ char pad_0[0x14];\n    /* 0x14 */ float sp14;\n    /* 0x18 */ Vec3 vec0;\n    /* 0x24 */ Vec3 vec1;\n    /* 0x30 */ IntVec3 ivec;\n    /* 0x3C */ enum_t sp3C;\n    /* 0x40 */ enum_t sp40;\n    /* 0x44 */ enum_t sp44;\n    /* 0x48 */ char pad_48[0x18];\n}; /* size = 0x60 */\n/* 096FCC */ void ftCo_80097630(ftCo_Fighter* fp, enum_t* sfx_ids,\n                                float threshold);\n/* 097040 */ /* static */ void ftCo_800976A4(ftCo_GObj* gobj);\n/* 097270 */ /* static */ void ftCo_800978D4(ftCo_GObj* gobj);\n/* 0972E8 */ /* static */ void ftCo_8009794C(ftCo_GObj* gobj);\n/* 097490 */ /* static */ void ftCo_80097AF4(ftCo_GObj* gobj);\n/* 097570 */ bool ftCo_80097570(ftCo_GObj* gobj);\n/* 0976DC */ /* static */ void ftCo_80097D40(ftCo_GObj* gobj);\n/* 097724 */ /* static */ void ftCo_80097D88(ftCo_GObj* gobj);\n/* 09775C */ void ftCo_DownBound_Anim(ftCo_GObj* gobj);\n/* 0977B8 */ void ftCo_DownBound_IASA(ftCo_GObj* gobj);\n/* 0977BC */ void ftCo_DownBound_Phys(ftCo_GObj* gobj);\n/* 0977DC */ void ftCo_DownBound_Coll(ftCo_GObj* gobj);\n/* 097A18 */ void ftCo_80097E8C(ftCo_GObj* gobj);\n/* 097B4C */ void ftCo_DownWait_Anim(ftCo_GObj* gobj);\n/* 097BB8 */ void ftCo_DownWait_IASA(ftCo_GObj* gobj);\n/* 097C08 */ void ftCo_DownWait_Phys(ftCo_GObj* gobj);\n/* 097C28 */ void ftCo_DownWait_Coll(ftCo_GObj* gobj);\n/* 097F38 */ void ftCo_80097F38(ftCo_GObj* gobj);\n#define GALE01_09F0F0\n/* 09F0F0 */ bool ftCo_8009F0F0(ftCo_GObj* gobj);\n/* 09CDB0 */ void ftCo_DownDamage_Anim(ftCo_GObj* gobj);\n/* 09CE80 */ void ftCo_DownDamage_IASA(ftCo_GObj* gobj);\n/* 09CE84 */ void ftCo_DownDamage_Phys(ftCo_GObj* gobj);\n/* 09CEA4 */ void ftCo_DownDamage_Coll(ftCo_GObj* gobj);\n#define GALE01_0980BC\n/* static */ bool ftCo_800980BC(ftCo_GObj* gobj);\n/* static */ void ftCo_80098160(ftCo_GObj* gobj, FtMotionId msid);\nvoid ftCo_DownStand_Anim(ftCo_GObj* gobj);\nvoid ftCo_DownStand_IASA(ftCo_GObj* gobj);\nvoid ftCo_DownStand_Phys(ftCo_GObj* gobj);\nvoid ftCo_DownStand_Coll(ftCo_GObj* gobj);\n#define GALE01_09917C\n/* 09917C */ bool ftCo_8009917C(ftCo_GObj* gobj);\n/* 099264 */ /* static */ bool ftCo_80099264(ftCo_GObj* gobj);\n/* 0992A8 */ /* static */ void ftCo_800992A8(ftCo_GObj* gobj, FtMotionId msid,\n                                             bool);\n/* 099314 */ /* static */ void ftCo_80099314(ftCo_GObj* gobj, FtMotionId msid,\n                                             bool arg2);\n/* 099390 */ /* static */ void ftCo_80099390(ftCo_GObj* gobj, FtMotionId msid,\n                                             bool arg2);\n/* 099438 */ /* static */ void ftCo_80099438(ftCo_GObj* gobj, FtMotionId msid,\n                                             bool arg2);\n/* 0994D8 */ void ftCo_Escape_Anim(ftCo_GObj* gobj);\n/* 099564 */ /* static */ void ftCo_80099564(ftCo_GObj* gobj);\n/* 099644 */ /* static */ void ftCo_80099644(ftCo_GObj* gobj);\n/* 0996F0 */ void ftCo_Escape_IASA(ftCo_GObj* gobj);\n/* 099714 */ void ftCo_Escape_Phys(ftCo_GObj* gobj);\n/* 099734 */ void ftCo_Escape_Coll(ftCo_GObj* gobj);\n/* 099754 */ /* static */ void ftCo_80099754(ftCo_GObj* gobj);\n/* 099794 */ /* static */ bool ftCo_80099794(ftCo_GObj* gobj);\n/* 09980C */ bool ftCo_8009980C(ftCo_GObj* gobj);\n/* 099894 */ /* static */ void ftCo_80099894(ftCo_GObj* gobj);\n/* 0998EC */ /* static */ void ftCo_800998EC(ftCo_GObj* gobj);\n/* 099954 */ /* static */ void ftCo_80099954(ftCo_GObj* gobj);\n/* 0999D8 */ void ftCo_EscapeN_Anim(ftCo_GObj* gobj);\n/* 099A14 */ void ftCo_EscapeN_IASA(ftCo_GObj* gobj);\n/* 099A18 */ void ftCo_EscapeN_Phys(ftCo_GObj* gobj);\n/* 099A38 */ void ftCo_EscapeN_Coll(ftCo_GObj* gobj);\n#define GALE01_099A58\n/* 099A58 */ bool ftCo_80099A58(ftCo_GObj* gobj);\n/* 099A9C */ void ftCo_80099A9C(ftCo_GObj* gobj, int);\n/* 099BD0 */ void ftCo_EscapeAir_Anim(ftCo_GObj* gobj);\n/* 099C24 */ void ftCo_EscapeAir_IASA(ftCo_GObj* gobj);\n/* 099CEC */ void ftCo_EscapeAir_Phys(ftCo_GObj* gobj);\n/* 099D48 */ void ftCo_EscapeAir_Coll(ftCo_GObj* gobj);\n#define GALE01_0968C8\n/* 0968C8 */ void ftCo_800968C8(ftCo_GObj* gobj);\n/* 096900 */ void ftCo_80096900(ftCo_GObj* gobj, int, int,\n                                bool allow_interrupt, float, float);\n/* 0969D8 */ void ftCo_800969D8(ftCo_GObj* gobj, int, int, int, float, float,\n                                float);\n/* 096AA0 */ void ftCo_FallSpecial_Anim(ftCo_GObj* gobj);\n/* 096AF4 */ void ftCo_FallSpecial_IASA(ftCo_GObj* gobj);\n/* 096B44 */ void ftCo_FallSpecial_Phys(ftCo_GObj* gobj);\n/* 096C98 */ void ftCo_FallSpecial_Coll(ftCo_GObj* gobj);\n/* 096CC8 */ bool ftCo_80096CC8(ftCo_GObj* gobj, enum_t);\n/* 096D28 */ void ftCo_80096D28(ftCo_GObj* gobj);\n#define GALE01_099010\n/* 099010 */ void ftCo_80099010(ftCo_GObj* gobj);\n/* 0990B8 */ void ftCo_Furafura_Anim(ftCo_GObj* gobj);\n/* 099138 */ void ftCo_Furafura_IASA(ftCo_GObj* gobj);\n/* 09913C */ void ftCo_Furafura_Phys(ftCo_GObj* gobj);\n/* 09915C */ void ftCo_Furafura_Coll(ftCo_GObj* gobj);\n#define GALE01_091A2C\nstruct _m2c_stack_ft_80092450 {\n    /* 0x00 */ char pad_0[0x10];\n    /* 0x10 */ AbsorbDesc absorb;\n    /* 0x24 */ char pad_24[0xC];\n}; /* size = 0x30 */\nstruct _m2c_stack_ft_80093BC0 {\n    /* 0x00 */ char pad_0[0x14];\n    /* 0x14 */ AbsorbDesc absorb;\n    /* 0x28 */ char pad_28[8];\n}; /* size = 0x30 */\nstruct _m2c_stack_ftCo_80092908 {\n    /* 0x00 */ char pad_0[0x18];\n    /* 0x18 */ AbsorbDesc absorb;\n    /* 0x2C */ char pad_2C[0x14];\n}; /* size = 0x40 */\nstruct _m2c_stack_ft_80091D58 {\n    /* 0x00 */ char pad_0[0x18];\n    /* 0x18 */ Vec3 scl;\n    /* 0x24 */ char pad_24[0xC];\n}; /* size = 0x30 */\nstruct _m2c_stack_ftCo_8009388C {\n    /* 0x00 */ char pad_0[0x14];\n    /* 0x14 */ ReflectDesc reflect;\n    /* 0x35 */ char pad_35[0x10];\n}; /* size = 0x48 */\nstruct _m2c_stack_ftCo_80093A50 {\n    /* 0x00 */ char pad_0[0x18];\n    /* 0x18 */ ReflectDesc reflect;\n    /* 0x3C */ AbsorbDesc absorb;\n    /* 0x50 */ char pad_50[0x18];\n}; /* size = 0x68 */\nstruct _m2c_stack_ftCo_800921DC {\n    /* 0x00 */ char pad_0[0x18];\n    /* 0x18 */ Vec3 vec;\n    /* 0x24 */ char pad_24[0x14];\n}; /* size = 0x38 */\nstruct _m2c_stack_ftCo_GuardReflect_Anim {\n    /* 0x00 */ char pad_0[0x24];\n    /* 0x24 */ AbsorbDesc absorb;\n    /* 0x38 */ char pad_38[0x10];\n}; /* size = 0x48 */\nstruct _m2c_stack_ftCo_GuardSetOff_Anim {\n    /* 0x00 */ char pad_0[0x30];\n    /* 0x30 */ AbsorbDesc absorb;\n    /* 0x44 */ char pad_44[4];\n    /* 0x48 */ Vec3 scl;\n    /* 0x54 */ char pad_54[0x14];\n}; /* size = 0x68 */\nstruct _m2c_stack_ftCo_80091E78 {\n    /* 0x00 */ char pad_0[0x24];\n    /* 0x24 */ Vec3 scl;\n    /* 0x30 */ char pad_30[0x30];\n}; /* size = 0x60 */\nstruct _m2c_stack_ftCo_80092F2C {\n    /* 0x00 */ char pad_0[0x2C];\n    /* 0x2C */ Vec3 scl;\n    /* 0x38 */ AbsorbDesc absorb;\n    /* 0x4C */ char pad_4C[0x2C];\n}; /* size = 0x78 */\nstatic char* ftCo_804D3AF8 = \"jobj.h\";\nstatic char* ftCo_804D3B00 = \"jobj\";\n/* 091A2C */ bool ftCo_80091A2C(ftCo_GObj* gobj);\n/* 091A4C */ bool ftCo_80091A4C(ftCo_GObj* gobj);\n/* 091AD8 */ bool ftCo_80091AD8(ftCo_GObj* gobj, int mv_x20);\n/* 091B90 */ void ftCo_80091B90(ftCo_GObj* gobj, int);\n/* 091B9C */ void ftCo_80091B9C(ftCo_GObj* gobj);\n/* 091D58 */ void ftCo_80091D58(ftCo_Fighter* fp);\n/* 092450 */ void ftCo_80092450(ftCo_GObj* gobj);\n/* 0925A4 */ bool ftCo_800925A4(ftCo_GObj* gobj);\n/* 0926DC */ void ftCo_GuardOn_Anim(ftCo_GObj* gobj);\n/* 092758 */ void ftCo_GuardOn_IASA(ftCo_GObj* gobj);\n/* 092870 */ void ftCo_GuardOn_Phys(ftCo_GObj* gobj);\n/* 0928AC */ void ftCo_GuardOn_Coll(ftCo_GObj* gobj);\n/* 0928CC */ void ftCo_800928CC(ftCo_GObj* gobj);\n/* 092A24 */ void ftCo_Guard_Anim(ftCo_GObj* gobj);\n/* 092A78 */ void ftCo_Guard_IASA(ftCo_GObj* gobj);\n/* 092B70 */ void ftCo_Guard_Phys(ftCo_GObj* gobj);\n/* 092BAC */ void ftCo_Guard_Coll(ftCo_GObj* gobj);\n/* 092BCC */ void ftCo_80092BCC(ftCo_GObj* gobj);\n/* 092BE8 */ void ftCo_80092BE8(ftCo_GObj* gobj);\n/* 092CAC */ void ftCo_GuardOff_Anim(ftCo_GObj* gobj);\n/* 092CFC */ void ftCo_GuardOff_IASA(ftCo_GObj* gobj);\n/* 092E10 */ void ftCo_GuardOff_Phys(ftCo_GObj* gobj);\n/* 092E30 */ void ftCo_GuardOff_Coll(ftCo_GObj* gobj);\n/* 092ED8 */ float ftCo_80092ED8(int, float);\n/* 093240 */ void ftCo_80093240(ftCo_GObj* gobj);\n/* 0932DC */ void ftCo_800932DC(ftCo_GObj* gobj);\n/* 093354 */ void ftCo_GuardSetOff_Anim(ftCo_GObj* gobj);\n/* 093624 */ void ftCo_GuardSetOff_IASA(ftCo_GObj* gobj);\n/* 093628 */ void ftCo_GuardSetOff_Phys(ftCo_GObj* gobj);\n/* 09365C */ void ftCo_GuardSetOff_Coll(ftCo_GObj* gobj);\n/* 093694 */ bool ftCo_80093694(ftCo_GObj* gobj);\n/* 09370C */ void ftCo_8009370C(HSD_GObj*, HSD_GObjEvent);\n/* 093BC0 */ void ftCo_80093BC0(ftCo_GObj* gobj);\n/* 093C3C */ /* static */ M2C_UNK ftCo_80094098();\n/* 093CD0 */ void ftCo_GuardReflect_Anim(ftCo_GObj* gobj);\n/* 093CDC */ /* static */ M2C_UNK ftCo_80094138();\n/* 093EC0 */ void ftCo_GuardReflect_IASA(ftCo_GObj* gobj);\n/* 09403C */ void ftCo_GuardReflect_Phys(ftCo_GObj* gobj);\n/* 094078 */ void ftCo_GuardReflect_Coll(ftCo_GObj* gobj);\n/* 094098 */ M2C_UNK ftCo_80094098();\n/* 094138 */ M2C_UNK ftCo_80094138();\n#define MELEE_FT_FTDATA3_H\nextern MotionState ftData_MotionStateList[ftCo_MS_Count];\nextern MotionState ftData_803C52A0[14];\nextern MotionState* ftData_UnkMotionStates0[FTKIND_MAX];\nextern s8 ftData_UnkBytePerCharacter[FTKIND_MAX];\n#define GALE01_093C3C\n/* 094DF8 */ void ftCo_80094DF8(ftCo_GObj* gobj);\n/* 094D90 */ void ftCo_80094D90(ftCo_GObj* gobj);\n/* 093CF4 */ /* static */ bool ftCo_80094150(HSD_GObj* arg0, HSD_GObj* arg1);\n/* 094020 */ /* static */ bool ftCo_8009447C(ftCo_GObj* gobj,\n                                             HSD_GObj* item_gobj);\n/* 094238 */ /* static */ void ftCo_80094694(HSD_GObj* gobj, FtMotionId msid,\n                                             bool loop);\n/* 0942A0 */ /* static */ ftCo_GObj* ftCo_800942A0(ftCo_GObj* gobj, u32 flags);\n/* 094334 */ bool ftCo_80094790(HSD_GObj* gobj);\n/* 0943BC */ void ftCo_80094818(HSD_GObj* gobj, bool);\n/* 09444C */ /* static */ void ftCo_800948A8(ftCo_GObj* gobj,\n                                             Item_GObj* item_gobj);\n/* 0945B8 */ void ftCo_ItemGet_Anim(ftCo_GObj* gobj);\n/* 0946C4 */ void ftCo_ItemGet_IASA(ftCo_GObj* gobj);\n/* 0946C8 */ void ftCo_ItemGet_Phys(ftCo_GObj* gobj);\n/* 0946E8 */ void ftCo_ItemGet_Coll(ftCo_GObj* gobj);\n#define GALE01_0949F4\nstruct _m2c_stack_ftCo_80095EFC {\n    /* 0x00 */ char pad_0[0x18];\n    /* 0x18 */ Vec3 sp18;\n    /* 0x24 */ Vec3 sp24;\n    /* 0x30 */ Vec3 sp30;\n    /* 0x3C */ char pad_3C[0x1C];\n}; /* size = 0x58 */\n/* 0949F4 */ bool ftCo_80094E54(ftCo_Fighter* fp);\n/* 094CFC */ /* static */ bool ftCo_8009515C(ftCo_GObj* gobj);\n/* 094D70 */ /* static */ bool ftCo_800951D0(ftCo_GObj* gobj);\n/* 094DF4 */ /* static */ bool ftCo_80095254(ftCo_GObj* gobj);\n/* 094E7C */ /* static */ bool ftCo_800952DC(ftCo_GObj* gobj);\n/* 094EA4 */ bool ftCo_80094EA4(ftCo_GObj* gobj);\n/* 0951DC */ /* static */ bool ftCo_8009563C(ftCo_GObj* gobj);\n/* 0952A0 */ /* static */ void ftCo_80095700(ftCo_GObj* gobj, enum_t arg1);\n/* 0952C8 */ /* static */ M2C_UNK lbl_80095728();\n/* 0952D8 */ /* static */ M2C_UNK lbl_80095738();\n/* 0952E4 */ void ftCo_80095744(ftCo_GObj* gobj, int*);\n/* 095328 */ bool ftCo_80095328(ftCo_GObj*, bool*);\n/* 095394 */ void ftCo_800957F4(ftCo_GObj* gobj, FtMotionId msid);\n/* 09542C */ /* static */ M2C_UNK ftCo_8009588C();\n/* 09543C */ /* static */ M2C_UNK ftCo_8009589C();\n/* 09549C */ /* static */ void ftCo_800958FC(ftCo_GObj* gobj, int);\n/* 095530 */ /* static */ M2C_UNK ftCo_80095990();\n/* 095540 */ /* static */ M2C_UNK ftCo_800959A0();\n/* 0955D0 */ /* static */ void ftCo_80095A30(ftCo_GObj* gobj);\n/* 0958FC */ /* static */ void ftCo_80095D5C(ftCo_Fighter* fp, Vec3* arg1);\n/* 095A20 */ void ftCo_ItemThrow_Anim(ftCo_GObj* gobj);\n/* 095A9C */ /* static */ void ftCo_80095EFC(ftCo_GObj* gobj);\n/* 095CC0 */ void ftCo_ItemThrow_IASA(ftCo_GObj* gobj);\n/* 095CC4 */ void ftCo_ItemThrow_Phys(ftCo_GObj* gobj);\n/* 095CE4 */ void ftCo_LightThrowDash_Phys(ftCo_GObj* gobj);\n/* 095D50 */ void ftCo_LightThrowAir_Phys(ftCo_GObj* gobj);\n/* 095DA8 */ void ftCo_LightThrowDashDrop_Coll(ftCo_GObj* gobj);\n/* 095DC8 */ void ftCo_LightThrow_Coll(ftCo_GObj* gobj);\n/* 095EEC */ void ftCo_LightThrowAir_Coll(ftCo_GObj* gobj);\n/* 096010 */ void ftCo_HeavyThrow_Coll(ftCo_GObj* gobj);\n/* 0961D0 */ void ftCo_800961D0(ftCo_GObj* gobj);\n/* 096250 */ void ftCo_80096250(ftCo_GObj* gobj);\n/* 096374 */ void ftCo_80096374(ftCo_GObj* gobj);\n/* 096498 */ void ftCo_80096498(ftCo_GObj* gobj);\n#define GALE01_08D5FC\n/* 08D5FC */ void ftCo_LandingAir_EnterWithLag(ftCo_GObj* gobj);\n/* 08D708 */ void ftCo_LandingAir_EnterWithMsidLag(ftCo_GObj* gobj,\n                                                   FtMotionId msid, float lag);\n/* 08D78C */ void ftCo_LandingAir_Anim(ftCo_GObj* gobj);\n/* 08D7AC */ void ftCo_LandingAir_IASA(ftCo_GObj* gobj);\n/* 08D7B0 */ void ftCo_LandingAir_Phys(ftCo_GObj* gobj);\n/* 08D7D0 */ void ftCo_LandingAir_Coll(ftCo_GObj* gobj);\n#define GALE01_0968E0\nstruct _m2c_stack_ftCo_800974C4 {\n    /* 0x00 */ char pad_0[0x10];\n    /* 0x10 */ Vec3 vec; /* inferred */\n    /* 0x1C */ char pad_1C[4];\n}; /* size = 0x20 */\nstruct _m2c_stack_ft_8009750C {\n    /* 0x00 */ char pad_0[0x10];\n    /* 0x10 */ Vec3 vec;\n    /* 0x1C */ char pad_1C[0xC];\n}; /* size = 0x28 */\n/* 0968E0 */ void ftCo_LiftWait_Anim(ftCo_GObj* gobj);\n/* 0968E4 */ void ftCo_LiftWait_IASA(ftCo_GObj* gobj);\n/* 096934 */ void ftCo_LiftWait_Phys(ftCo_GObj* gobj);\n/* 0969BC */ void ftCo_LiftWait_Coll(ftCo_GObj* gobj);\n/* 096D9C */ void ftCo_80096D9C(ftCo_GObj* gobj);\n/* 096E68 */ void ftCo_80096E68(ftCo_GObj* gobj);\n/* 096EF8 */ bool ftCo_80096EF8(ftCo_GObj* gobj);\n/* 096F48 */ void ftCo_80096F48(ftCo_GObj* gobj);\n/* 096FD0 */ void ftCo_LiftWalk_Anim(ftCo_GObj* gobj);\n/* 097074 */ void ftCo_LiftWalk_IASA(ftCo_GObj* gobj);\n/* 097098 */ void ftCo_LiftWalk_Phys(ftCo_GObj* gobj);\n/* 0970B8 */ void ftCo_LiftWalk_Coll(ftCo_GObj* gobj);\n/* 0970E0 */ bool ftCo_800970E0(ftCo_GObj* gobj);\n/* 097130 */ void ftCo_80097130(ftCo_GObj* gobj);\n/* 0971B0 */ void ftCo_LiftTurn_Anim(ftCo_GObj* gobj);\n/* 097458 */ void ftCo_LiftTurn_IASA(ftCo_GObj* gobj);\n/* 09747C */ void ftCo_LiftTurn_Phys(ftCo_GObj* gobj);\n/* 09749C */ void ftCo_LiftTurn_Coll(ftCo_GObj* gobj);\n/* 0974C4 */ void ftCo_800974C4(ftCo_GObj* gobj);\n/* 09750C */ void ftCo_8009750C(ftCo_GObj* gobj);\n#define GALE01_09CD5C\n/* 09CD5C */ void ftCo_8009F39C(ftCo_GObj* gobj);\n/* 09CDC0 */ void ftCo_MissFoot_Anim(ftCo_GObj* gobj);\n/* 09CDFC */ void ftCo_MissFoot_IASA(ftCo_GObj* gobj);\n/* 09CE00 */ void ftCo_MissFoot_Phys(ftCo_GObj* gobj);\n/* 09CE20 */ void ftCo_MissFoot_Coll(ftCo_GObj* gobj);\n#define GALE01_09A3C8\n/* 09A3C8 */ bool ftCo_8009A3C8(ftCo_GObj* gobj);\n/* 09A468 */ void ftCo_Ottotto_Anim(ftCo_GObj* gobj);\n/* 09A4A4 */ void ftCo_Ottotto_IASA(ftCo_GObj* gobj);\n/* 09A5F4 */ void ftCo_Ottotto_Phys(ftCo_GObj* gobj);\n/* 09A5F8 */ void ftCo_Ottotto_Coll(ftCo_GObj* gobj);\n/* 09A728 */ void ftCo_OttottoWait_Anim(ftCo_GObj* gobj);\n/* 09A72C */ void ftCo_OttottoWait_IASA(ftCo_GObj* gobj);\n/* 09A74C */ void ftCo_OttottoWait_Phys(ftCo_GObj* gobj);\n/* 09A750 */ void ftCo_OttottoWait_Coll(ftCo_GObj* gobj);\n#define GALE01_099F1C\n/* 099F1C */ bool ftCo_80099F1C(ftCo_GObj* gobj);\n/* 099F9C */ bool ftCo_80099F9C(ftCo_GObj* gobj);\n/* 09A080 */ bool ftCo_8009A080(ftCo_GObj* gobj);\n/* 09A134 */ bool ftCo_8009A134(ftCo_GObj* gobj);\n/* 09A184 */ void ftCo_8009A184(ftCo_GObj* gobj, FtMotionId msid,\n                                MotionFlags mf, float anim_start);\n/* 09A228 */ void ftCo_8009A228(ftCo_GObj* gobj);\n/* 09A2A8 */ void ftCo_Pass_Anim(ftCo_GObj* gobj);\n/* 09A2E4 */ void ftCo_Pass_IASA(ftCo_GObj* gobj);\n/* 09A388 */ void ftCo_Pass_Phys(ftCo_GObj* gobj);\n/* 09A3A8 */ void ftCo_Pass_Coll(ftCo_GObj* gobj);\n#define GALE01_098430\n/* 098358 */ void ftCo_800987D0(ftCo_GObj* gobj);\n/* 098430 */ void ftCo_Passive_Anim(ftCo_GObj* gobj);\n/* 09846C */ void ftCo_Passive_IASA(ftCo_GObj* gobj);\n/* 098470 */ void ftCo_Passive_Phys(ftCo_GObj* gobj);\n/* 098490 */ void ftCo_Passive_Coll(ftCo_GObj* gobj);\n#define GALE01_0984B0\n/* 0984B0 */ bool ftCo_80098928(ftCo_GObj* gobj);\n/* 098628 */ void ftCo_PassiveStand_Anim(ftCo_GObj* gobj);\n/* 098664 */ void ftCo_PassiveStand_IASA(ftCo_GObj* gobj);\n/* 098668 */ void ftCo_PassiveStand_Phys(ftCo_GObj* gobj);\n/* 098688 */ void ftCo_PassiveStand_Coll(ftCo_GObj* gobj);\n#define GALE01_099D9C\n/* 099D9C */ void ftCo_80099D9C(ftCo_GObj* gobj);\n/* 099E24 */ void ftCo_ReboundStop_Anim(ftCo_GObj* gobj);\n/* 099E80 */ void ftCo_Rebound_Anim(ftCo_GObj* gobj);\n/* 099EBC */ void ftCo_Rebound_IASA(ftCo_GObj* gobj);\n/* 099EC0 */ void ftCo_Rebound_Phys(ftCo_GObj* gobj);\n/* 099EFC */ void ftCo_Rebound_Coll(ftCo_GObj* gobj);\n#define GALE01_098E3C\n/* 098E3C */ void ftCo_80098E3C(ftCo_GObj* gobj);\n/* 098A44 */ void ftCo_ShieldBreakDown_Anim(ftCo_GObj* gobj);\n/* 098A80 */ void ftCo_ShieldBreakDown_IASA(ftCo_GObj* gobj);\n/* 098A84 */ void ftCo_ShieldBreakDown_Phys(ftCo_GObj* gobj);\n/* 098AA4 */ void ftCo_ShieldBreakDown_Coll(ftCo_GObj* gobj);\n#define GALE01_0988E4\n/* 0988E4 */ void ftCo_80098D90(ftCo_GObj* gobj);\n/* 098940 */ void ftCo_ShieldBreakFall_Anim(ftCo_GObj* gobj);\n/* 098944 */ void ftCo_ShieldBreakFall_IASA(ftCo_GObj* gobj);\n/* 098948 */ void ftCo_ShieldBreakFall_Phys(ftCo_GObj* gobj);\n/* 098968 */ void ftCo_ShieldBreakFall_Coll(ftCo_GObj* gobj);\n#define GALE01_0986A0\n/* 0986A0 */ void ftCo_80098B20(ftCo_GObj* gobj);\n/* 098794 */ void ftCo_ShieldBreakFly_Anim(ftCo_GObj* gobj);\n/* 0987D0 */ void ftCo_ShieldBreakFly_IASA(ftCo_GObj* gobj);\n/* 0987D4 */ void ftCo_ShieldBreakFly_Phys(ftCo_GObj* gobj);\n/* 0987F4 */ void ftCo_ShieldBreakFly_Coll(ftCo_GObj* gobj);\n/* 098820 */ void ftCo_80098C9C(Fighter_GObj* gobj);\n#define GALE01_098F3C\n/* 098F3C */ void ftCo_80098F3C(ftCo_GObj* gobj);\n/* 098F90 */ void ftCo_ShieldBreakStand_Anim(ftCo_GObj* gobj);\n/* 098FCC */ void ftCo_ShieldBreakStand_IASA(ftCo_GObj* gobj);\n/* 098FD0 */ void ftCo_ShieldBreakStand_Phys(ftCo_GObj* gobj);\n/* 098FF0 */ void ftCo_ShieldBreakStand_Coll(ftCo_GObj* gobj);\n#define GALE01_08A7A8\n/* 08A7A8 */ void ftCo_8008A7A8(ftCo_GObj* gobj, int);\n/* 09C5A4 */ void ftCo_8009C5A4(ftCo_GObj* gobj, int);\n/* 09C640 */ void ftCo_8009C640(ftCo_GObj* gobj, int);\n/* 09C830 */ void ftCo_Shouldered_Anim(ftCo_GObj* gobj);\n/* 09CA00 */ void ftCo_Shouldered_IASA(ftCo_GObj* gobj);\n/* 09CA04 */ void ftCo_Shouldered_Phys(ftCo_GObj* gobj);\n/* 09CA08 */ void ftCo_Shouldered_Coll(ftCo_GObj* gobj);\n#define GALE01_09614C\n/* 09614C */ bool ftCo_SpecialAir_CheckInput(ftCo_GObj* gobj);\n#define GALE01_095FEC\n/* 0964FC */ bool ftCo_SpecialS_HasInput(Fighter* fp);\n/* 096030 */ bool ftCo_SpecialS_CheckInput(ftCo_GObj* gobj);\n#define GALE01_09CA98\n/* 09CA98 */ bool ftCo_8009EF68(ftCo_GObj* gobj);\n/* 09CB78 */ void ftCo_StopCeil_Anim(ftCo_GObj* gobj);\n/* 09CBE8 */ void ftCo_StopCeil_IASA(ftCo_GObj* gobj);\n/* 09CBEC */ void ftCo_StopCeil_Phys(ftCo_GObj* gobj);\n/* 09CBF0 */ void ftCo_StopCeil_Coll(ftCo_GObj* gobj);\n#define GALE01_09EDA4\n/* 09EDA4 */ bool ftCo_8009EDA4(ftCo_GObj* gobj);\n/* 09EF04 */ void ftCo_StopWall_Anim(ftCo_GObj* gobj);\n/* 09EF40 */ void ftCo_StopWall_IASA(ftCo_GObj* gobj);\n/* 09EF44 */ void ftCo_StopWall_Phys(ftCo_GObj* gobj);\n/* 09EF48 */ void ftCo_StopWall_Coll(ftCo_GObj* gobj);\n#define MELEE_FT_CHARA_FTCOMMON_FTCO_THROWNCOPYSTAR_H\n#define GALE01_0BD9E0\n/* 0BD9E0 */ FighterKind ftCo_800BD9E0(ftKb_GObj* gobj,\n                                       Fighter_GObj* victim_gobj);\n/* 0BDA50 */ void ftCo_800BDA50(ftCo_GObj* gobj);\n/* 0BDA74 */ void ftCo_800BDA74(ftCo_GObj* gobj, Vec3* normal);\n/* 0BDB58 */ void ftCo_800BDB58(ftCo_GObj* gobj, ftKb_GObj* thrower_gobj);\n/* 0BDDC4 */ void ftCo_ThrownKirbyStar_Anim(ftCo_GObj* gobj);\n/* 0BDDC8 */ void ftCo_ThrownKirbyStar_IASA(ftCo_GObj* gobj);\n/* 0BDDCC */ void ftCo_ThrownKirbyStar_Phys(ftCo_GObj* gobj);\n/* 0BDF10 */ void ftCo_ThrownKirbyStar_Coll(ftCo_GObj* gobj);\n/* 0BE000 */ void ftCo_800BE000(ftCo_GObj* gobj, ftKb_GObj* thrower_gobj);\n/* 0BE258 */ void ftCo_ThrownCopyStar_Anim(ftCo_GObj* gobj);\n/* 0BE25C */ void ftCo_ThrownCopyStar_IASA(ftCo_GObj* gobj);\n/* 0BE260 */ void ftCo_ThrownCopyStar_Phys(ftCo_GObj* gobj);\n/* 0BE3A4 */ void ftCo_ThrownCopyStar_Coll(ftCo_GObj* gobj);\n/* 0BE494 */ void ftCo_800BE494(ftCo_GObj* gobj);\n/* 0BE618 */ void ftCo_ThrownKirby_Anim(ftCo_GObj* gobj);\n/* 0BE61C */ void ftCo_ThrownKirby_IASA(ftCo_GObj* gobj);\n/* 0BE620 */ void ftCo_ThrownKirby_Phys(ftCo_GObj* gobj);\n/* 0BE6A8 */ void ftCo_ThrownKirby_Coll(ftCo_GObj* gobj);\n/* 0BE6AC */ void ftCo_800BE6AC(ftCo_GObj* gobj);\n/* 0BE7C0 */ void ftCo_800BE7C0(ftCo_GObj* gobj);\n#define GALE01_0BCDE0\n/* 0BCDE0 */ void ftCo_800BCDE0(ftCo_GObj* gobj, FtMotionId msid);\n/* 0BCE64 */ void ftCo_800BCE64(ftCo_GObj* gobj, FtMotionId msid);\n/* 0BCED8 */ void ftCo_ThrownKoopaF_Anim(ftCo_GObj* gobj);\n/* 0BCEDC */ void ftCo_ThrownKoopaF_IASA(ftCo_GObj* gobj);\n/* 0BCEE0 */ void ftCo_ThrownKoopaF_Phys(ftCo_GObj* gobj);\n/* 0BCEE4 */ void ftCo_ThrownKoopaF_Coll(ftCo_GObj* gobj);\n/* 0BCEE8 */ void ftCo_ThrownKoopaB_Anim(ftCo_GObj* gobj);\n/* 0BCEEC */ void ftCo_ThrownKoopaB_IASA(ftCo_GObj* gobj);\n/* 0BCEF0 */ void ftCo_ThrownKoopaB_Phys(ftCo_GObj* gobj);\n/* 0BCEF4 */ void ftCo_ThrownKoopaB_Coll(ftCo_GObj* gobj);\n/* 0BCEF8 */ void ftCo_ThrownKoopaAirF_Anim(ftCo_GObj* gobj);\n/* 0BCEFC */ void ftCo_ThrownKoopaAirF_IASA(ftCo_GObj* gobj);\n/* 0BCF00 */ void ftCo_ThrownKoopaAirF_Phys(ftCo_GObj* gobj);\n/* 0BCF04 */ void ftCo_ThrownKoopaAirF_Coll(ftCo_GObj* gobj);\n/* 0BCF08 */ void ftCo_ThrownKoopaAirB_Anim(ftCo_GObj* gobj);\n/* 0BCF0C */ void ftCo_ThrownKoopaAirB_IASA(ftCo_GObj* gobj);\n/* 0BCF10 */ void ftCo_ThrownKoopaAirB_Phys(ftCo_GObj* gobj);\n/* 0BCF14 */ void ftCo_ThrownKoopaAirB_Coll(ftCo_GObj* gobj);\n#define GALE01_0BD17C\n/* 0BD0E8 */ void ftCo_800BD0E8(ftCo_GObj* gobj, FtMotionId msid);\n/* 0BD17C */ void ftCo_ThrownMewtwo_Anim(ftCo_GObj* gobj);\n/* 0BD180 */ void ftCo_ThrownMewtwo_IASA(ftCo_GObj* gobj);\n/* 0BD184 */ void ftCo_ThrownMewtwo_Phys(ftCo_GObj* gobj);\n/* 0BD188 */ void ftCo_ThrownMewtwo_Coll(ftCo_GObj* gobj);\n/* 0BD18C */ void ftCo_ThrownMewtwoAir_Anim(ftCo_GObj* gobj);\n/* 0BD190 */ void ftCo_ThrownMewtwoAir_IASA(ftCo_GObj* gobj);\n/* 0BD194 */ void ftCo_ThrownMewtwoAir_Phys(ftCo_GObj* gobj);\n/* 0BD198 */ void ftCo_ThrownMewtwoAir_Coll(ftCo_GObj* gobj);\n#define GALE01_08A494\n/* 08A494 */ void ftCo_Wait_Anim(ftCo_GObj* gobj);\n/* 08A4D4 */ void ftCo_Wait_IASA(ftCo_GObj* gobj);\n/* 08A644 */ void ftCo_Wait_Phys(ftCo_GObj* gobj);\n/* 08A678 */ void ftCo_Wait_Coll(ftCo_GObj* gobj);\n#define GALE01_09D7E4\nstruct _m2c_stack_ftCo_800BBED4 {\n    /* 0x00 */ char pad_0[0x2C];\n    /* 0x2C */ struct UNK_SAMUS_S2 x2C;\n    /* 0x54 */ Vec3 vec;\n    /* 0x60 */ char pad_60[0x18];\n}; /* size = 0x78 */\n/* 09D7E4 */ /* static */ void ftCo_800BBC88(ftCo_GObj* gobj);\n/* 0BBCC0 */ /* static */ void ftCo_800BBCC0(ftCo_GObj* gobj);\n/* 09DA30 */ void ftCo_800BBED4(ftCo_GObj* arg0, ftCo_GObj* arg1);\n/* 09DD0C */ void ftCo_YoshiEgg_Anim(ftCo_GObj* gobj);\n/* 09DE60 */ void ftCo_YoshiEgg_IASA(ftCo_GObj* gobj);\n/* 09DE64 */ void ftCo_YoshiEgg_Phys(ftCo_GObj* gobj);\n/* 09DE9C */ void ftCo_YoshiEgg_Coll(ftCo_GObj* gobj);\n/* 0BC388 */ void ftCo_800BC388(ftCo_GObj* gobj);\n/* 0BC3AC */ void ftCo_800BC3AC(ftCo_GObj* gobj);\n/* 0BC3D0 */ void ftCo_800BC3D0(ftCo_GObj* gobj);\n#define MELEE_FT_CHARA_FTCOMMON_INLINES_H\n#define _fighter_h_\n#define MELEE_FT_INLINES_H\n#define MELEE_IT_ITEM2_H\n/// Transfer item on character swap - used for Zelda <-> Sheik\nvoid it_8026B9A8(Item_GObj* gobj, HSD_GObj* arg1, u8 arg2);\n/// Return flag from Item Attributes\nenum_t it_8026B30C(Item_GObj* gobj);\n/// Return item hold kind\nenum_t it_8026B320(Item_GObj* gobj);\n/// Apply Item Damage\nf32 it_8026B1D4(Item_GObj* gobj, HitCapsule* itemHitboxUnk);\n/// Copy Item position vector\nvoid it_8026B294(Item_GObj* gobj, Vec3* pos);\n/// Check if item is heavy\nenum_t it_8026B2B4(Item_GObj* gobj);\n/// Check if item is heavy again?\nbool it_8026B2D8(Item_GObj* gobj);\n/// Get Item ID\ns32 itGetKind(Item_GObj* gobj);\n/// Return item damage multiplier\nf32 it_8026B334(Item_GObj* gobj);\n/// Unknown item position math, related to velocity?\nvoid it_8026B344(Item_GObj* gobj, Vec3* pos);\n/// Return item's X-Axis grab range?\nf32 it_8026B378(Item_GObj* gobj);\n/// Return item's Y-Axis grab range?\nf32 it_8026B384(Item_GObj* gobj);\n/// Toggle item flag 0x15 in 0xDC8 word ON\nvoid it_8026B390(Item_GObj* gobj);\n/// Toggle item flag 0x15 in 0xDC8 word OFF\nvoid it_8026B3A8(Item_GObj* gobj);\n/// Count item entities of identical kind?\nint it_8026B3C0(ItemKind kind);\n/// Store Item article pointer to table\nvoid it_8026B3F8(Article* article, s32 kind);\n/// Store Stage Item article pointer to table\nvoid it_8026B40C(Article* article, s32 kind);\n/// Item Damage Math\nf32 it_8026B424(s32 damage);\n/// Get heal value of healing items\ns32 it_8026B47C(Item_GObj* gobj);\n/// Check if item is a healing item\nbool it_8026B4F0(Item_GObj* gobj);\n/// Get unknown float from 0x0 of item's special attributes\nf32 it_8026B54C(Item_GObj* gobj);\n/// Identical to #it_8026B54C but likely using a different itAttributes struct\nf32 it_8026B560(Item_GObj* gobj);\n/// Get unknown float from 0x4 of item's special attributes\nf32 it_8026B574(Item_GObj* gobj);\n/// Get unknown integer from itCommonData\ns32 it_8026B588(void);\n/// Check if item can fire projectiles\nbool it_8026B594(Item_GObj* gobj);\n/// Unknown item camera check?\nHSD_GObj* it_8026B5E4(Vec3* vector, Vec3* vector2, Item_GObj* gobj);\n/// Unknown item camera check 2?\nHSD_GObj* it_8026B634(Vec3* vector, Vec3* vector2, Item_GObj* gobj);\n/// Get facing direction of fp (?) with argument 0\nf32 it_8026B684(Vec3* pos);\n/// Get facing direction of fp (?) with variable argument\nf32 it_8026B6A8(Vec3* pos, HSD_GObj* arg);\n/// Check if item is a stage item?\nbool it_8026B6C8(Item_GObj* gobj);\n/// Set item's hitlag frames\nvoid it_8026B718(Item_GObj* gobj, f32 hitlagFrames);\n/// Toggle bit 3 of 0xDC8 word ON\nvoid it_8026B724(Item_GObj* gobj);\n/// Toggle bits in 0xDC8 word\nvoid it_8026B73C(Item_GObj* gobj);\n/// Bitwise operations in 0xDC8 word\nbool it_8026B774(Item_GObj* gobj, u8 arg1);\n/// Get Item State ID\ns32 it_8026B7A4(Item_GObj* gobj);\n/// Get Item Team ID\nu8 it_8026B7B0(Item_GObj* gobj);\n/// Get flag 0x14 of 0xDC8 word\ns32 it_8026B7BC(Item_GObj* gobj);\n/// Get 0x1C of Item - something to do with stale moves?\ns32 it_8026B7CC(Item_GObj* gobj);\n/// Get unknown var from global data\ns32 it_8026B7D8(void);\n/// Get unknown var from global data\ns32 it_8026B7E0(void);\n/// Get bit 1 of 0xDC8 word\ns32 it_8026B7E8(Item_GObj* gobj);\n/// Remove item from player on death?\nvoid it_8026B7F8(Item_GObj* gobj);\n/// Remove all GObj interaction references from item\nbool it_8026B894(Item_GObj* gobj, HSD_GObj* referenced_gobj);\n/// Return result of unk item check\ns32 it_8026B924(Item_GObj* gobj);\n/// Return float result of item kind and state checks\nf32 it_8026B960(Item_GObj* gobj);\n/// Multiply item's scale\nvoid it_8026BAE8(Item_GObj* gobj, f32 scale_mul);\n/// Clear JObj flags on item model\nvoid it_8026BB20(Item_GObj* gobj);\n/// Set JObj flags on item model\nvoid it_8026BB44(Item_GObj* gobj);\n/// Adjust item's position to fp bone\nvoid it_8026BB68(Item_GObj* gobj, Vec3* pos);\n/// Adjust item's position based on ECB?\nvoid it_8026BB88(Item_GObj* gobj, Vec3* pos);\n/// Adjust item's ECB position?\nvoid it_8026BBCC(Item_GObj* gobj, Vec3* pos);\n/// Check if item owner is a fp + decrement hitlag\nvoid it_8026BC14(Item_GObj* gobj);\n/// Return bit 0 of 0xDD0\nbool it_8026BC68(Item_GObj* gobj);\n/// Get item owner\nHSD_GObj* it_8026BC78(Item_GObj* gobj);\n/// Get item attack kind\nbool it_8026BC84(Item_GObj* gobj);\n/// Unknown item ECB / position update\nvoid it_8026BC90(Item_GObj* gobj, Vec3* pos);\n/// Toggle bit 2 of 0xDCD OFF\nvoid it_8026BCF4(Item_GObj* gobj);\n/// Toggle bit 2 of 0xDCD ON\nvoid it_8026BD0C(Item_GObj* gobj);\n/// Toggle bit 3 of 0xDD0 ON\nvoid it_8026BD24(Item_GObj* gobj);\n/// Toggle bit 3 of 0xDCC ON\nvoid it_8026BD3C(Item_GObj* gobj);\n/// Toggle bit 3 of 0xDCC OFF\nvoid it_8026BD54(Item_GObj* gobj);\n/// Toggle bit 3 of 0xDCD ON\nvoid it_8026BD6C(Item_GObj* gobj);\n/// Toggle bit 4 of 0xDCD ON\nvoid it_8026BD84(Item_GObj* gobj);\n/// Toggle 0x1A of 0xDC8 word ON\nvoid it_8026BD9C(Item_GObj* gobj);\n/// Toggle 0x1A of 0xDC8 word OFF\nvoid it_8026BDB4(Item_GObj* gobj);\n/// Toggle several item flags\nvoid it_8026BDCC(Item_GObj* gobj);\n/// Toggle several item flags, inverted\nvoid it_8026BE28(Item_GObj* gobj);\n/// Bob-Omb Rain Switch\nHSD_GObj* it_8026BE84(BobOmbRain* bobOmbRain);\n/// Get item's CollData pointer\nCollData* it_8026C100(Item_GObj* gobj);\n/// Check if Hammer item's head should break off\nvoid it_8026C16C(Item_GObj* gobj, bool isHeadless);\n/// Check if item has a hitbox\nvoid it_8026C1B4(Item_GObj* gobj);\n/// Get unknown var from r13 pointer\nu32 it_8026C1D4(void);\n/// Check if item has grabbed a GObj?\nbool it_8026C1E8(Item_GObj* gobj);\n/// Get item owner's port number\nvoid it_8026C220(Item_GObj* gobj, HSD_GObj* arg1);\n/// Find the closest item to the given position?\nHSD_GObj* it_8026C258(Vec3* vector, f32 facingDir);\n/// Unknown item position / ECB update\nvoid it_8026C334(Item_GObj* gobj, Vec3* pos);\n/// Run bomb item explosion callbacks\nvoid it_8026C368(Item_GObj* gobj);\n/// Toggle bit 3 of 0xDC8 ON for all active item GObjs?\nvoid it_8026C3FC(void);\n/// Toggle bits in 0xDC8 for all active item GObjs?\nvoid it_8026C42C(void);\n#define PUSH_ATTRS(fp, attributeName) do { void* backup = (fp)->x2D8_specialAttributes2; attributeName* src = (attributeName*) (fp)->ft_data->ext_attr; void** da = &(fp)->dat_attrs; *(attributeName*) (fp)->x2D8_specialAttributes2 = *src; *da = backup; } while (0)\n/// @todo Remove declarations. Doesn't really need to be a macro.\n#define COPY_ATTRS(gobj, attributeName) Fighter* fp = GET_FIGHTER(gobj); attributeName* sA2 = (attributeName*) fp->dat_attrs; attributeName* ext_attr = (attributeName*) fp->ft_data->ext_attr; *sA2 = *ext_attr;\n#define GET_FIGHTER(gobj) ((Fighter*) HSD_GObjGetUserData((HSD_GObj*) gobj))\n/// @deprecated Use #GET_FIGHTER instead.\nstatic inline Fighter* getFighter(Fighter_GObj* gobj)\n{\n    return gobj->user_data;\n}\n/// @deprecated use #GET_FIGHTER instead.\nstatic inline Fighter* getFighterPlus(Fighter_GObj* gobj)\n{\n    Fighter* fp = gobj->user_data;\n    return fp;\n}\nstatic inline void* getFtSpecialAttrs(Fighter* fp)\n{\n    void* fighter_attr = fp->dat_attrs;\n    return fighter_attr;\n}\nstatic inline void* getFtSpecialAttrsD(Fighter* fp) // Direct\n{\n    return fp->dat_attrs;\n}\nstatic inline s32 ftGetKind(Fighter* fp)\n{\n    return fp->kind;\n}\nstatic inline s32 ftGetAction(Fighter* fp)\n{\n    return fp->motion_id;\n}\nstatic inline void* getFtSpecialAttrs2CC(Fighter* fp)\n{\n    void* fighter_attr = fp->x2CC;\n    return fighter_attr;\n}\nstatic inline ftCo_DatAttrs* getFtAttrs(Fighter* fp)\n{\n    return &fp->co_attrs;\n}\nstatic inline CollData* getFtColl(Fighter* fp)\n{\n    return &fp->coll_data;\n}\nstatic inline bool ftGetGroundAir(Fighter* fp)\n{\n    return fp->ground_or_air;\n}\nstatic inline f32 stickGetDir(f32 x1, f32 x2)\n{\n    if (x1 < x2) {\n        return -x1;\n    } else {\n        return x1;\n    }\n}\n/// used for all fighters except Kirby and Purin\nstatic inline void Fighter_OnItemPickup(Fighter_GObj* gobj, bool catchItemFlag,\n                                        bool bool2, bool bool3)\n{\n    Fighter* fp = ((Fighter*) HSD_GObjGetUserData((HSD_GObj*) gobj));\n    if (!it_8026B2B4(fp->item_gobj)) {\n        switch (it_8026B320(fp->item_gobj)) {\n        case 1:\n            ftAnim_80070FB4(gobj, bool2, 1);\n            break;\n        case 2:\n            ftAnim_80070FB4(gobj, bool2, 0);\n            break;\n        case 3:\n            ftAnim_80070FB4(gobj, bool2, 2);\n            break;\n        case 4:\n            ftAnim_80070FB4(gobj, bool2, 3);\n            break;\n        }\n        if (catchItemFlag) {\n            ftAnim_80070C48(gobj, bool3);\n        }\n    }\n}\nstatic inline void Fighter_OnItemInvisible(Fighter_GObj* gobj, bool flag)\n{\n    Fighter* fp = ((Fighter*) HSD_GObjGetUserData((HSD_GObj*) gobj));\n    if (!it_8026B2B4(fp->item_gobj)) {\n        ftAnim_80070CC4(gobj, flag);\n    }\n}\nstatic inline void Fighter_OnItemVisible(Fighter_GObj* gobj, bool flag)\n{\n    Fighter* fp = ((Fighter*) HSD_GObjGetUserData((HSD_GObj*) gobj));\n    if (!it_8026B2B4(fp->item_gobj)) {\n        ftAnim_80070C48(gobj, flag);\n    }\n}\nstatic inline void Fighter_OnItemDrop(Fighter_GObj* gobj, bool dropItemFlag,\n                                      bool bool2, bool bool3)\n{\n    ftAnim_80070FB4(gobj, bool2, -1);\n    if (dropItemFlag) {\n        ftAnim_80070CC4(gobj, bool3);\n    }\n}\nstatic inline void Fighter_OnKnockbackEnter(Fighter_GObj* gobj, s32 arg1)\n{\n    ftAnim_800704F0(gobj, arg1, 3.0f);\n    ftAnim_800704F0(gobj, 0, 3.0f);\n}\nstatic inline void Fighter_OnKnockbackExit(Fighter_GObj* gobj, s32 arg1)\n{\n    ftAnim_800704F0(gobj, arg1, 0.0f);\n    ftAnim_800704F0(gobj, 0, 0.0f);\n}\nstatic inline void Fighter_UnsetCmdVar0(Fighter_GObj* gobj)\n{\n    Fighter* fp = ((Fighter*) HSD_GObjGetUserData((HSD_GObj*) gobj));\n    fp->cmd_vars[0] = 0;\n}\nstatic inline CollData* Fighter_GetCollData(Fighter* fp)\n{\n    return &fp->coll_data;\n}\n/// @todo This and #ftCheckThrowB3, etc. are probably one macro or something.\nstatic inline bool ftCheckThrowB0(Fighter* fp)\n{\n    if (fp->throw_flags_b0) {\n        fp->throw_flags_b0 = 0;\n        return 1;\n    } else {\n        return 0;\n    }\n}\nstatic inline bool ftCheckThrowB3(Fighter* fp)\n{\n    if (fp->throw_flags_b3) {\n        fp->throw_flags_b3 = 0;\n        return 1;\n    } else {\n        return 0;\n    }\n}\nstatic inline bool ftCheckThrowB4(Fighter* fp)\n{\n    if (fp->throw_flags_b4) {\n        fp->throw_flags_b4 = 0;\n        return 1;\n    } else {\n        return 0;\n    }\n}\n/// Ternary macro for fcmpo-based facing direction check\n#define CLIFFCATCH_O(fp) ((fp)->facing_dir < 0.0f) ? CLIFFCATCH_LEFT : CLIFFCATCH_RIGHT\n/// Ternary macro for fcmpu-based facing direction check\n#define CLIFFCATCH_U(fp) ((fp)->facing_dir != 1.0f) ? CLIFFCATCH_LEFT : CLIFFCATCH_RIGHT\n/// @todo Fix naming.\n#define gmScriptEventCast(p_event, type) ((type*) p_event)\n#define gmScriptEventUpdatePtr(event, type) (event = (void*) ((uintptr_t) event + (sizeof(type))))\ninline ftCmdScript* getCmdScript(Fighter* fp)\n{\n    return &fp->x3E4_fighterCmdScript;\n}\n/// @todo #Fighter_804D64FC..#Fighter_804D6550 are initialized to 0 in\n///       #Fighter_LoadCommonData, probably all pointers\nextern M2C_UNK Fighter_804D64FC;\nextern M2C_UNK Fighter_804D6500;\nextern M2C_UNK Fighter_804D6504;\nextern M2C_UNK Fighter_804D6508;\nextern int* Fighter_804D650C;\nextern M2C_UNK Fighter_804D6510;\nextern M2C_UNK Fighter_804D6514;\nextern M2C_UNK Fighter_804D6518;\nextern M2C_UNK Fighter_804D651C;\nextern float* Fighter_804D6524;\nextern M2C_UNK Fighter_804D6528;\nextern Vec2** Fighter_804D6530;\nextern M2C_UNK Fighter_804D6534;\nextern M2C_UNK Fighter_804D6538;\nextern M2C_UNK Fighter_804D653C;\nextern int** Fighter_804D6540;\nextern M2C_UNK Fighter_804D6548;\nextern M2C_UNK Fighter_804D654C;\nextern int** Fighter_804D6550;\nextern unk_t Fighter_804D6520;\nextern ftCommonData* p_ftCommonData;\nextern FighterPartsTable** ftPartsTable;\nextern HSD_ObjAllocData fighter_alloc_data;\nextern HSD_ObjAllocData Fighter_80458FFC;\nextern HSD_ObjAllocData fighter_bones_alloc_data;\nextern HSD_ObjAllocData Fighter_80459054;\nextern HSD_ObjAllocData Fighter_80459080;\nextern HSD_ObjAllocData Fighter_804590AC;\n// functions in fighter.c\nvoid Fighter_800679B0(void);\nvoid Fighter_FirstInitialize_80067A84(void);\nvoid Fighter_LoadCommonData(void);\nvoid Fighter_UpdateModelScale(Fighter_GObj* gobj);\nvoid Fighter_UnkInitReset_80067C98(Fighter*);\nvoid Fighter_UnkProcessDeath_80068354(Fighter_GObj* gobj);\nvoid Fighter_UnkUpdateCostumeJoint_800686E4(Fighter_GObj* gobj);\nvoid Fighter_UnkUpdateVecFromBones_8006876C(Fighter* fp);\nvoid Fighter_ResetInputData_80068854(Fighter_GObj* gobj);\nvoid Fighter_UnkInitLoad_80068914(Fighter_GObj* gobj, struct S_TEMP1* argdata);\nu32 Fighter_NewSpawn_80068E40(void);\nvoid Fighter_80068E64(Fighter_GObj* gobj);\nFighter_GObj* Fighter_Create(struct S_TEMP1* input);\nvoid Fighter_ChangeMotionState(Fighter_GObj* gobj, FtMotionId msid,\n                               MotionFlags flags, float anim_start,\n                               float anim_speed, float anim_blend,\n                               Fighter_GObj* arg3);\nvoid Fighter_8006A1BC(Fighter_GObj* gobj);\nvoid Fighter_8006A360(Fighter_GObj* gobj);\nvoid Fighter_8006ABA0(Fighter_GObj* gobj);\nvoid Fighter_UnkIncrementCounters_8006ABEC(Fighter_GObj* gobj);\nvoid Fighter_Spaghetti_8006AD10(Fighter_GObj* gobj);\nvoid Fighter_procUpdate(Fighter_GObj* gobj);\nvoid Fighter_UnkApplyTransformation_8006C0F0(Fighter_GObj* gobj);\nvoid Fighter_8006C27C(Fighter_GObj* gobj);\nvoid Fighter_8006C5F4(Fighter_GObj* gobj);\nvoid Fighter_CallAcessoryCallbacks_8006C624(Fighter_GObj* gobj);\nvoid Fighter_8006C80C(Fighter_GObj* gobj);\nvoid Fighter_UnkProcessGrab_8006CA5C(Fighter_GObj* gobj);\nvoid Fighter_8006CB94(Fighter_GObj* gobj);\nvoid Fighter_UnkTakeDamage_8006CC30(Fighter* fp, f32 damage_amount);\nvoid Fighter_TakeDamage_8006CC7C(Fighter*, f32);\nvoid Fighter_8006CDA4(Fighter* fp, s32 arg1, s32 arg2);\nvoid Fighter_8006CF5C(Fighter* fp, s32 arg1);\nvoid Fighter_UnkSetFlag_8006CFBC(Fighter_GObj* gobj);\nvoid Fighter_8006CFE0(Fighter_GObj* gobj);\nvoid Fighter_UnkRecursiveFunc_8006D044(Fighter_GObj* gobj);\nvoid Fighter_8006D10C(Fighter_GObj* gobj);\nvoid Fighter_UnkProcessShieldHit_8006D1EC(Fighter_GObj* gobj);\nvoid Fighter_8006D9AC(Fighter_GObj* gobj);\nvoid Fighter_UnkCallCameraCallback_8006D9EC(Fighter_GObj* gobj);\nvoid Fighter_8006DA4C(Fighter_GObj* gobj);\nvoid Fighter_Unload_8006DABC(void* user_data);\n#define GALE01_0D14E4\n/* 0D14E4 */ void ftCo_800D14E4(ftCo_GObj* gobj);\n/* 0D15D0 */ M2C_UNK ftCo_800D15D0();\n/* 0D170C */ M2C_UNK ftCo_800D170C();\n/* 0D1868 */ void ftCo_KinokoGiantStart_Anim(ftCo_GObj* gobj);\n/* 0D18A4 */ void ftCo_KinokoGiantStart_Coll(ftCo_GObj* gobj);\n/* 0D18CC */ M2C_UNK ftCo_800D18CC();\n/* 0D1A28 */ void ftCo_KinokoGiantStartAir_Anim(ftCo_GObj* gobj);\n/* 0D1A64 */ void ftCo_KinokoGiantStartAir_Coll(ftCo_GObj* gobj);\n/* 0D1A8C */ void ftCo_800D1A8C(ftCo_GObj* gobj);\n/* 0D1B04 */ M2C_UNK ftCo_800D1B04();\n/* 0D1BA0 */ M2C_UNK ftCo_800D1BA0();\n/* 0D1CAC */ void ftCo_KinokoGiantEnd_Anim(ftCo_GObj* gobj);\n/* 0D1CE8 */ void ftCo_KinokoGiantEnd_Coll(ftCo_GObj* gobj);\n/* 0D1D10 */ M2C_UNK ftCo_800D1D10();\n/* 0D1E1C */ void ftCo_KinokoGiantEndAir_Anim(ftCo_GObj* gobj);\n/* 0D1E58 */ void ftCo_KinokoGiantEndAir_Coll(ftCo_GObj* gobj);\n/* 0D1E80 */ void ftCo_800D1E80(ftCo_GObj* gobj);\n/* 0D1F6C */ M2C_UNK ftCo_800D1F6C();\n/* 0D1FFC */ M2C_UNK ftCo_800D1FFC();\n/* 0D2158 */ void ftCo_KinokoSmallStart_Anim(ftCo_GObj* gobj);\n/* 0D2194 */ void ftCo_KinokoSmallStart_Coll(ftCo_GObj* gobj);\n/* 0D21BC */ M2C_UNK ftCo_800D21BC();\n/* 0D2318 */ void ftCo_KinokoSmallStartAir_Anim(ftCo_GObj* gobj);\n/* 0D2354 */ void ftCo_KinokoSmallStartAir_Coll(ftCo_GObj* gobj);\n/* 0D237C */ void ftCo_800D237C(ftCo_GObj* gobj);\n/* 0D23F4 */ M2C_UNK ftCo_800D23F4();\n/* 0D2490 */ M2C_UNK ftCo_800D2490();\n/* 0D259C */ void ftCo_KinokoSmallEnd_Anim(ftCo_GObj* gobj);\n/* 0D25D8 */ void ftCo_KinokoSmallEnd_Coll(ftCo_GObj* gobj);\n/* 0D2600 */ M2C_UNK ftCo_800D2600();\n/* 0D270C */ void ftCo_KinokoSmallEndAir_Anim(ftCo_GObj* gobj);\n/* 0D2748 */ void ftCo_KinokoSmallEndAir_Coll(ftCo_GObj* gobj);\n/* 0D2770 */ M2C_UNK ftCo_800D2770();\n/* 0D27C4 */ M2C_UNK ftCo_800D27C4();\n/* 0D2D0C */ M2C_UNK ft_800D2D0C();\n/* 0D2D50 */ M2C_UNK ft_800D2D50();\n/* 0D2DD0 */ void ftCo_ItemScrew_Anim(ftCo_GObj* gobj);\n/* 0D2E0C */ void ftCo_ItemScrew_IASA(ftCo_GObj* gobj);\n/* 0D2E2C */ void ftCo_ItemScrew_Phys(ftCo_GObj* gobj);\n/* 0D2E4C */ void ftCo_ItemScrew_Coll(ftCo_GObj* gobj);\n/* 0D2E7C */ M2C_UNK ft_800D2E7C();\n/* 0D2EF8 */ void ftCo_ItemScrewAir_Anim(ftCo_GObj* gobj);\n/* 0D2F34 */ void ftCo_ItemScrewAir_IASA(ftCo_GObj* gobj);\n/* 0D2F54 */ void ftCo_ItemScrewAir_Phys(ftCo_GObj* gobj);\n/* 0D2F74 */ void ftCo_ItemScrewAir_Coll(ftCo_GObj* gobj);\n/* 0D2FA4 */ bool ftCo_800D2FA4(ftCo_GObj* gobj);\n/* 0D3004 */ M2C_UNK ftCo_800D3004();\n/* 0D30C0 */ void ftCo_DamageScrew_Anim(ftCo_GObj* gobj);\n/* 0D30FC */ void ftCo_DamageScrew_IASA(ftCo_GObj* gobj);\n/* 0D3100 */ void ftCo_DamageScrew_Phys(ftCo_GObj* gobj);\n/* 0D3120 */ void ftCo_DamageScrew_Coll(ftCo_GObj* gobj);\n/* 0D3158 */ void ftCo_800D3158(ftCo_GObj* gobj);\n/* 0D331C */ M2C_UNK ftCo_800D331C();\n/* 0D34E0 */ M2C_UNK ftCo_800D34E0();\n/* 0D35FC */ M2C_UNK ftCo_800D35FC();\n/* 0D3680 */ M2C_UNK ftCo_800D3680();\n/* 0D38B8 */ M2C_UNK ftCo_800D38B8();\n/* 0D3910 */ void ftCo_DeadLeft_Anim(ftCo_GObj* gobj);\n/* 0D394C */ void ftCo_DeadLeft_Cam(ftCo_GObj* gobj);\n/* 0D3950 */ M2C_UNK ftCo_800D3950();\n/* 0D3B88 */ void ftCo_DeadRight_Anim(ftCo_GObj* gobj);\n/* 0D3BC4 */ void ftCo_DeadRight_Cam(ftCo_GObj* gobj);\n/* 0D3BC8 */ M2C_UNK ftCo_800D3BC8();\n/* 0D3E00 */ void ftCo_DeadDown_Anim(ftCo_GObj* gobj);\n/* 0D3E3C */ void ftCo_DeadDown_Cam(ftCo_GObj* gobj);\n/* 0D3E40 */ M2C_UNK ftCo_800D3E40();\n/* 0D4078 */ void ftCo_DeadUp_Anim(ftCo_GObj* gobj);\n/* 0D40B4 */ void ftCo_DeadUp_Cam(ftCo_GObj* gobj);\n/* 0D40B8 */ M2C_UNK ftCo_800D40B8();\n/* 0D41C4 */ M2C_UNK ftCo_800D41C4();\n/* 0D42E4 */ void ftCo_DeadUpStar_Anim(ftCo_GObj* gobj);\n/* 0D4560 */ void ftCo_DeadUpStar_Cam(ftCo_GObj* gobj);\n/* 0D4580 */ M2C_UNK ftCo_800D4580();\n/* 0D4780 */ M2C_UNK ftCo_800D4780();\n/* 0D47B8 */ M2C_UNK ftCo_800D47B8();\n/* 0D481C */ M2C_UNK ftCo_800D481C();\n/* 0D4A08 */ void ftCo_DeadUpFall_Anim(ftCo_GObj* gobj);\n/* 0D4CE8 */ void ftCo_DeadUpFall_Phys(ftCo_GObj* gobj);\n/* 0D4E30 */ void ftCo_DeadUpFall_Cam(ftCo_GObj* gobj);\n/* 0D4E50 */ M2C_UNK ftCo_800D4E50();\n/* 0D4F24 */ void ftCo_800D4F24(ftCo_GObj* gobj, int index);\n/* 0D4FF4 */ void ftCo_800D4FF4(ftCo_GObj* gobj);\n/* 0D52F8 */ void ftCo_Rebirth_Anim(ftCo_GObj* gobj);\n/* 0D5358 */ void ftCo_Rebirth_IASA(ftCo_GObj* gobj);\n/* 0D535C */ void ftCo_Rebirth_Phys(ftCo_GObj* gobj);\n/* 0D5470 */ void ftCo_Rebirth_Coll(ftCo_GObj* gobj);\n/* 0D5600 */ M2C_UNK ftCo_800D5600();\n/* 0D56EC */ void ftCo_RebirthWait_Anim(ftCo_GObj* gobj);\n/* 0D575C */ void ftCo_RebirthWait_IASA(ftCo_GObj* gobj);\n/* 0D58F4 */ void ftCo_RebirthWait_Phys(ftCo_GObj* gobj);\n/* 0D5A08 */ void ftCo_RebirthWait_Coll(ftCo_GObj* gobj);\n/* 0D5A6C */ void ftCo_Rebirth_Cam(ftCo_GObj* gobj);\n/* 0D5AEC */ void ftCo_800D5AEC(ftCo_GObj*, s32, s32, s32, f32, f32);\n/* 0D5BF8 */ void ftCo_800D5BF8(ftCo_GObj* gobj);\n/* 0D5C54 */ M2C_UNK ft_800D5C54();\n/* 0D5CB0 */ void ftCo_800D5CB0(ftCo_GObj*, bool, float landing_lag);\n/* 0D5D3C */ void ftCo_Landing_Anim(ftCo_GObj* gobj);\n/* 0D5D78 */ void ftCo_Landing_IASA(ftCo_GObj* gobj);\n/* 0D5F18 */ void ftCo_Landing_Phys(ftCo_GObj* gobj);\n/* 0D5F38 */ void ftCo_Landing_Coll(ftCo_GObj* gobj);\n/* 0D5F58 */ bool ftCo_Squat_CheckInput(ftCo_GObj* gobj);\n/* 0D5FB0 */ bool ftCo_800D5FB0(ftCo_GObj* gobj);\n/* 0D607C */ void ftCo_Squat_Anim(ftCo_GObj* gobj);\n/* 0D60B8 */ void ftCo_Squat_IASA(ftCo_GObj* gobj);\n/* 0D623C */ void ftCo_Squat_Phys(ftCo_GObj* gobj);\n/* 0D625C */ void ftCo_Squat_Coll(ftCo_GObj* gobj);\n/* 0D638C */ void ftCo_800D638C(ftCo_GObj* gobj);\n/* 0D6448 */ void ftCo_SquatWait_Anim(ftCo_GObj* gobj);\n/* 0D6474 */ void ftCo_SquatWait_IASA(ftCo_GObj* gobj);\n/* 0D6584 */ void ftCo_SquatWait_Phys(ftCo_GObj* gobj);\n/* 0D65B8 */ void ftCo_SquatWait_Coll(ftCo_GObj* gobj);\n/* 0D6658 */ void ftCo_SquatRv_Anim(ftCo_GObj* gobj);\n/* 0D6694 */ void ftCo_SquatRv_IASA(ftCo_GObj* gobj);\n/* 0D6784 */ void ftCo_SquatRv_Phys(ftCo_GObj* gobj);\n/* 0D67A4 */ void ftCo_SquatRv_Coll(ftCo_GObj* gobj);\n/* 0D67C4 */ s32 ftCo_800D67C4(Fighter*);\n/* 0D6824 */ bool ftCo_800D6824(ftCo_GObj* gobj);\n/* 0D688C */ s32 ftCo_800D688C(Fighter*);\n/* 0D68C0 */ bool ftCo_800D68C0(ftCo_GObj* gobj);\n/* 0D6928 */ s32 ftCo_800D6928(Fighter*);\n/* 0D695C */ bool ftCo_Attack100_CheckInput(ftCo_GObj* gobj);\n/* 0D69C4 */ bool ftCo_800D69C4(ftCo_GObj* gobj);\n/* 0D6A50 */ bool ftCo_Attack_800D6A50(ftCo_GObj* gobj);\n/* 0D6B00 */ void ftCo_800D6B00(ftCo_GObj*, s32);\n/* 0D6C0C */ void ftCo_Attack100Start_Anim(ftCo_GObj* gobj);\n/* 0D6C60 */ void ftCo_800D6C60(ftCo_GObj*, HSD_GObjEvent callback);\n/* 0D6D48 */ void ftCo_Attack100Loop_Anim(ftCo_GObj* gobj);\n/* 0D6E34 */ void ftCo_Attack100End_Anim(ftCo_GObj* gobj);\n/* 0D6E70 */ void ftCo_Attack100Loop_IASA(ftCo_GObj* gobj);\n/* 0D6E98 */ void ftCo_Attack100Start_Phys(ftCo_GObj* gobj);\n/* 0D6EB8 */ void ftCo_Attack100Loop_Phys(ftCo_GObj* gobj);\n/* 0D6ED8 */ void ftCo_Attack100End_Phys(ftCo_GObj* gobj);\n/* 0D6EF8 */ void ftCo_Attack100Start_Coll(ftCo_GObj* gobj);\n/* 0D6F18 */ void ftCo_Attack100Loop_Coll(ftCo_GObj* gobj);\n/* 0D6F38 */ void ftCo_Attack100End_Coll(ftCo_GObj* gobj);\n/* 0D705C */ bool ftCo_800D705C(ftCo_GObj* gobj);\n/* 0D7100 */ bool ftCo_800D7100(ftCo_GObj* gobj);\n/* 0D71D8 */ void ftCo_800D71D8(ftCo_GObj* gobj);\n/* 0D7268 */ M2C_UNK ftCo_800D7268();\n/* 0D72A0 */ M2C_UNK ftCo_800D72A0();\n/* 0D730C */ M2C_UNK ftCo_800D730C();\n/* 0D74A4 */ M2C_UNK ftCo_800D74A4();\n/* 0D7590 */ void ftCo_JumpAerialF1_Anim(ftCo_GObj* gobj);\n/* 0D7614 */ void ftCo_JumpAerialF1_IASA(ftCo_GObj* gobj);\n/* 0D7634 */ void ftCo_JumpAerialF1_Phys(ftCo_GObj* gobj);\n/* 0D767C */ void ftCo_JumpAerialF1_Coll(ftCo_GObj* gobj);\n/* 0D76B8 */ M2C_UNK ft_800D76B8();\n/* 0D7770 */ M2C_UNK ft_800D7770();\n/* 0D79AC */ void ftCo_ItemScopeStart_Anim(ftCo_GObj* gobj);\n/* 0D79B0 */ void ftCo_ItemScopeAirStart_Anim(ftCo_GObj* gobj);\n/* 0D7AEC */ void ftCo_ItemScopeStart_IASA(ftCo_GObj* gobj);\n/* 0D7B1C */ void ftCo_ItemScopeAirStart_IASA(ftCo_GObj* gobj);\n/* 0D7B4C */ void ftCo_ItemScopeStart_Phys(ftCo_GObj* gobj);\n/* 0D7B6C */ void ftCo_ItemScopeAirStart_Phys(ftCo_GObj* gobj);\n/* 0D7B8C */ void ftCo_ItemScopeStart_Coll(ftCo_GObj* gobj);\n/* 0D7BB4 */ void ftCo_ItemScopeAirStart_Coll(ftCo_GObj* gobj);\n/* 0D7DFC */ void ftCo_ItemScopeRapid_Anim(ftCo_GObj* gobj);\n/* 0D7F10 */ void ftCo_ItemScopeAirRapid_Anim(ftCo_GObj* gobj);\n/* 0D8024 */ void ftCo_ItemScopeRapid_IASA(ftCo_GObj* gobj);\n/* 0D8044 */ void ftCo_ItemScopeAirRapid_IASA(ftCo_GObj* gobj);\n/* 0D8064 */ void ftCo_ItemScopeRapid_Phys(ftCo_GObj* gobj);\n/* 0D8084 */ void ftCo_ItemScopeAirRapid_Phys(ftCo_GObj* gobj);\n/* 0D80A4 */ void ftCo_ItemScopeRapid_Coll(ftCo_GObj* gobj);\n/* 0D80CC */ void ftCo_ItemScopeAirRapid_Coll(ftCo_GObj* gobj);\n/* 0D83AC */ void ftCo_ItemScopeFire_Anim(ftCo_GObj* gobj);\n/* 0D83F4 */ void ftCo_ItemScopeAirFire_Anim(ftCo_GObj* gobj);\n/* 0D843C */ void ftCo_ItemScopeFire_IASA(ftCo_GObj* gobj);\n/* 0D8440 */ void ftCo_ItemScopeAirFire_IASA(ftCo_GObj* gobj);\n/* 0D8444 */ void ftCo_ItemScopeFire_Phys(ftCo_GObj* gobj);\n/* 0D8464 */ void ftCo_ItemScopeAirFire_Phys(ftCo_GObj* gobj);\n/* 0D8484 */ void ftCo_ItemScopeFire_Coll(ftCo_GObj* gobj);\n/* 0D84AC */ void ftCo_ItemScopeAirFire_Coll(ftCo_GObj* gobj);\n/* 0D88B8 */ void ftCo_ItemScopeEnd_Anim(ftCo_GObj* gobj);\n/* 0D88D8 */ void ftCo_ItemScopeAirEnd_Anim(ftCo_GObj* gobj);\n/* 0D88F8 */ void ftCo_ItemScopeEnd_IASA(ftCo_GObj* gobj);\n/* 0D88FC */ void ftCo_ItemScopeAirEnd_IASA(ftCo_GObj* gobj);\n/* 0D8900 */ void ftCo_ItemScopeEnd_Phys(ftCo_GObj* gobj);\n/* 0D8920 */ void ftCo_ItemScopeAirEnd_Phys(ftCo_GObj* gobj);\n/* 0D8940 */ void ftCo_ItemScopeEnd_Coll(ftCo_GObj* gobj);\n/* 0D8968 */ void ftCo_ItemScopeAirEnd_Coll(ftCo_GObj* gobj);\n/* 0D8990 */ bool ftCo_Catch_CheckInput(ftCo_GObj* gobj);\n/* 0D8A38 */ M2C_UNK ftCo_800D8A38();\n/* 0D8AE0 */ bool ftCo_800D8AE0(ftCo_GObj* gobj);\n/* 0D8B9C */ bool ftCo_800D8B9C(ftCo_GObj* gobj);\n/* 0D8C54 */ M2C_UNK ftCo_800D8C54();\n/* 0D8CC8 */ void ftCo_Catch_Anim(ftCo_GObj* gobj);\n/* 0D8D24 */ void ftCo_CatchDash_Anim(ftCo_GObj* gobj);\n/* 0D8D80 */ void ftCo_Catch_IASA(ftCo_GObj* gobj);\n/* 0D8D84 */ void ftCo_CatchDash_IASA(ftCo_GObj* gobj);\n/* 0D8D88 */ void ftCo_Catch_Phys(ftCo_GObj* gobj);\n/* 0D8DD0 */ void ftCo_CatchDash_Phys(ftCo_GObj* gobj);\n/* 0D8E08 */ void ftCo_Catch_Coll(ftCo_GObj* gobj);\n/* 0D8E6C */ void ftCo_CatchDash_Coll(ftCo_GObj* gobj);\n/* 0D94D8 */ void ftCo_800D94D8(ftCo_GObj* gobj);\n/* 0D9C98 */ void ftCo_800D9C98(ftCo_GObj* gobj);\n/* 0D9E80 */ void ftCo_CatchPull_Anim(ftCo_GObj* gobj);\n/* 0D9F90 */ void ftCo_CatchPull_IASA(ftCo_GObj* gobj);\n/* 0D9F94 */ void ftCo_CatchPull_Phys(ftCo_GObj* gobj);\n/* 0D9FDC */ void ftCo_CatchPull_Coll(ftCo_GObj* gobj);\n/* 0DA318 */ void ftCo_CatchWait_Anim(ftCo_GObj* gobj);\n/* 0DA31C */ void ftCo_CatchWait_IASA(ftCo_GObj* gobj);\n/* 0DA3D0 */ void ftCo_CatchWait_Phys(ftCo_GObj* gobj);\n/* 0DA418 */ void ftCo_CatchWait_Coll(ftCo_GObj* gobj);\n/* 0DA568 */ void ftCo_CatchAttack_Anim(ftCo_GObj* gobj);\n/* 0DA5A4 */ void ftCo_CatchAttack_IASA(ftCo_GObj* gobj);\n/* 0DA5A8 */ void ftCo_CatchAttack_Phys(ftCo_GObj* gobj);\n/* 0DA5F0 */ void ftCo_CatchAttack_Coll(ftCo_GObj* gobj);\n/* 0DA698 */ void ftCo_800DA698(ftCo_GObj* gobj, bool);\n/* 0DA744 */ void ftCo_CatchCut_Anim(ftCo_GObj* gobj);\n/* 0DA780 */ void ftCo_CatchCut_IASA(ftCo_GObj* gobj);\n/* 0DA784 */ void ftCo_CatchCut_Phys(ftCo_GObj* gobj);\n/* 0DA7E4 */ void ftCo_CatchCut_Coll(ftCo_GObj* gobj);\n/* 0DA824 */ f32 ftCo_800DA824(Fighter*);\n/* 0DAC70 */ void ftCo_CapturePulledHi_Anim(ftCo_GObj* gobj);\n/* 0DAC74 */ void ftCo_CapturePulledHi_IASA(ftCo_GObj* gobj);\n/* 0DADE8 */ void ftCo_CapturePulledHi_Phys(ftCo_GObj* gobj);\n/* 0DAE94 */ void ftCo_CapturePulledHi_Coll(ftCo_GObj* gobj);\n/* 0DB004 */ void ftCo_CapturePulledLw_Anim(ftCo_GObj* gobj);\n/* 0DB008 */ void ftCo_CapturePulledLw_IASA(ftCo_GObj* gobj);\n/* 0DB00C */ void ftCo_CapturePulledLw_Phys(ftCo_GObj* gobj);\n/* 0DB1F8 */ void ftCo_CapturePulledLw_Coll(ftCo_GObj* gobj);\n/* 0DB368 */ void ftCo_800DB368(Fighter*, Fighter*);\n/* 0DB464 */ void ftCo_800DB464(ftCo_GObj* gobj);\n/* 0DB500 */ M2C_UNK ftCo_800DB500();\n/* 0DB908 */ void ftCo_CaptureWaitHi_Anim(ftCo_GObj* gobj);\n/* 0DBA4C */ void ftCo_CaptureWaitHi_IASA(ftCo_GObj* gobj);\n/* 0DBA6C */ void ftCo_CaptureWaitHi_Phys(ftCo_GObj* gobj);\n/* 0DBA8C */ void ftCo_CaptureWaitHi_Coll(ftCo_GObj* gobj);\n/* 0DBD10 */ void ftCo_CaptureWaitLw_Anim(ftCo_GObj* gobj);\n/* 0DBD30 */ void ftCo_CaptureWaitLw_IASA(ftCo_GObj* gobj);\n/* 0DBD50 */ void ftCo_CaptureWaitLw_Phys(ftCo_GObj* gobj);\n/* 0DBE9C */ void ftCo_CaptureWaitLw_Coll(ftCo_GObj* gobj);\n/* 0DC110 */ void ftCo_CaptureJump_Anim(ftCo_GObj* gobj);\n/* 0DC160 */ void ftCo_CaptureJump_IASA(ftCo_GObj* gobj);\n/* 0DC224 */ void ftCo_CaptureJump_Phys(ftCo_GObj* gobj);\n/* 0DC264 */ void ftCo_CaptureJump_Coll(ftCo_GObj* gobj);\n/* 0DC284 */ void ftCo_800DC284(ftCo_GObj* gobj);\n/* 0DC2E4 */ void ftCo_CaptureDamageHi_Anim(ftCo_GObj* gobj);\n/* 0DC328 */ void ftCo_CaptureDamageHi_IASA(ftCo_GObj* gobj);\n/* 0DC32C */ void ftCo_CaptureDamageHi_Phys(ftCo_GObj* gobj);\n/* 0DC34C */ void ftCo_CaptureDamageHi_Coll(ftCo_GObj* gobj);\n/* 0DC3A4 */ void ftCo_800DC3A4(ftCo_GObj* gobj);\n/* 0DC468 */ void ftCo_CaptureDamageLw_Anim(ftCo_GObj* gobj);\n/* 0DC4AC */ void ftCo_CaptureDamageLw_IASA(ftCo_GObj* gobj);\n/* 0DC4B0 */ void ftCo_CaptureDamageLw_Phys(ftCo_GObj* gobj);\n/* 0DC5EC */ void ftCo_CaptureDamageLw_Coll(ftCo_GObj* gobj);\n/* 0DC750 */ void ftCo_800DC750(ftCo_GObj* gobj);\n/* 0DC7F0 */ void ftCo_CaptureCut_Anim(ftCo_GObj* gobj);\n/* 0DC82C */ void ftCo_CaptureCut_IASA(ftCo_GObj* gobj);\n/* 0DC830 */ void ftCo_CaptureCut_Phys(ftCo_GObj* gobj);\n/* 0DC890 */ void ftCo_CaptureCut_Coll(ftCo_GObj* gobj);\n/* 0DC920 */ void ftCo_800DC920(ftCo_GObj*, ftCo_GObj* gobj);\n/* 0DCE34 */ void ftCo_800DCE34(ftCo_GObj* gobj0, ftCo_GObj* gobj1);\n/* 0DCFD4 */ void ftCo_800DCFD4(ftCo_GObj* gobj);\n/* 0DD100 */ M2C_UNK ftCo_800DD100();\n/* 0DD168 */ void ftCo_800DD168(ftCo_GObj* gobj);\n/* 0DD1E4 */ M2C_UNK ftCo_800DD1E4();\n/* 0DD398 */ M2C_UNK ftCo_800DD398();\n/* 0DD4B0 */ M2C_UNK ftCo_800DD4B0();\n/* 0DD724 */ void ftCo_800DD724(ftCo_GObj* gobj);\n/* 0DD8C4 */ void ftCo_ThrowF_Anim(ftCo_GObj* gobj);\n/* 0DD92C */ void ftCo_ThrowF_IASA(ftCo_GObj* gobj);\n/* 0DD930 */ void ftCo_ThrowF_Phys(ftCo_GObj* gobj);\n/* 0DD990 */ void ftCo_ThrowF_Coll(ftCo_GObj* gobj);\n/* 0DDA10 */ void ftCo_ThrowB_Anim(ftCo_GObj* gobj);\n/* 0DDA5C */ void ftCo_ThrowB_IASA(ftCo_GObj* gobj);\n/* 0DDA60 */ void ftCo_ThrowB_Phys(ftCo_GObj* gobj);\n/* 0DDAC0 */ void ftCo_ThrowB_Coll(ftCo_GObj* gobj);\n/* 0DDB40 */ void ftCo_ThrowHi_Anim(ftCo_GObj* gobj);\n/* 0DDB8C */ void ftCo_ThrowHi_IASA(ftCo_GObj* gobj);\n/* 0DDB90 */ void ftCo_ThrowHi_Phys(ftCo_GObj* gobj);\n/* 0DDBF0 */ void ftCo_ThrowHi_Coll(ftCo_GObj* gobj);\n/* 0DDC70 */ void ftCo_ThrowHi_Cam(ftCo_GObj* gobj);\n/* 0DDCB4 */ void ftCo_ThrowLw_Anim(ftCo_GObj* gobj);\n/* 0DDD00 */ void ftCo_ThrowLw_IASA(ftCo_GObj* gobj);\n/* 0DDD04 */ void ftCo_ThrowLw_Phys(ftCo_GObj* gobj);\n/* 0DDD64 */ void ftCo_ThrowLw_Coll(ftCo_GObj* gobj);\n/* 0DDDE4 */ M2C_UNK ftCo_800DDDE4();\n/* 0DE2A8 */ void ftCo_800DE2A8(ftCo_GObj*, ftCo_GObj* gobj);\n/* 0DE2CC */ M2C_UNK ftCo_800DE2CC();\n/* 0DE2F0 */ void ftCo_800DE2F0(ftCo_GObj* gobj);\n/* 0DE3FC */ bool ftCo_800DE3FC(ftCo_GObj* gobj, FtMotionId msid, float arg2);\n/* 0DE508 */ void ftCo_800DE508(ftCo_GObj* gobj);\n/* 0DE5A4 */ M2C_UNK ftCo_800DE5A4();\n/* 0DE69C */ void ftCo_ThrownF_Anim(ftCo_GObj* gobj);\n/* 0DE6BC */ void ftCo_ThrownF_IASA(ftCo_GObj* gobj);\n/* 0DE6C0 */ void ftCo_ThrownF_Phys(ftCo_GObj* gobj);\n/* 0DE6C4 */ void ftCo_ThrownF_Coll(ftCo_GObj* gobj);\n/* 0DE6C8 */ void ftCo_ThrownB_Anim(ftCo_GObj* gobj);\n/* 0DE6E8 */ void ftCo_ThrownB_IASA(ftCo_GObj* gobj);\n/* 0DE6EC */ void ftCo_ThrownB_Phys(ftCo_GObj* gobj);\n/* 0DE6F0 */ void ftCo_ThrownB_Coll(ftCo_GObj* gobj);\n/* 0DE6F4 */ void ftCo_ThrownHi_Anim(ftCo_GObj* gobj);\n/* 0DE714 */ void ftCo_ThrownHi_IASA(ftCo_GObj* gobj);\n/* 0DE718 */ void ftCo_ThrownHi_Phys(ftCo_GObj* gobj);\n/* 0DE71C */ void ftCo_ThrownHi_Coll(ftCo_GObj* gobj);\n/* 0DE720 */ void ftCo_ThrownHi_Cam(ftCo_GObj* gobj);\n/* 0DE76C */ void ftCo_ThrownLw_Anim(ftCo_GObj* gobj);\n/* 0DE78C */ void ftCo_ThrownLw_IASA(ftCo_GObj* gobj);\n/* 0DE790 */ void ftCo_ThrownLw_Phys(ftCo_GObj* gobj);\n/* 0DE794 */ void ftCo_ThrownLw_Coll(ftCo_GObj* gobj);\n/* 0DE7C0 */ void ftCo_800DE7C0(ftCo_GObj*, s32, s32);\n/* 0DE854 */ void ftCo_800DE854(ftCo_GObj* gobj);\n/* 0DE920 */ M2C_UNK ftCo_800DE920();\n/* 0DE974 */ M2C_UNK ftCo_800DE974();\n/* 0DE9B8 */ M2C_UNK ftCo_800DE9B8();\n/* 0DE9D8 */ bool ftCo_800DE9D8(ftCo_GObj* gobj);\n/* 0DEA28 */ M2C_UNK ftCo_800DEA28();\n/* 0DEAE8 */ void ftCo_800DEAE8(ftCo_GObj* gobj, enum_t asid0, enum_t asid1);\n/* 0DEBD0 */ M2C_UNK ftCo_800DEBD0();\n/* 0DECF4 */ void ftCo_AppealS_Anim(ftCo_GObj* gobj);\n/* 0DED30 */ void ftCo_AppealS_IASA(ftCo_GObj* gobj);\n/* 0DEE44 */ void ftCo_AppealS_Phys(ftCo_GObj* gobj);\n/* 0DEE64 */ void ftCo_AppealS_Coll(ftCo_GObj* gobj);\n/* 0DEE84 */ void ftCo_800DEE84(int, u8, char*, u32, float, float);\n/* 0DEEA8 */ void ftCo_800DEEA8(ftCo_GObj* gobj);\n/* 0DEEB8 */ void ftCo_800DEEB8(void);\n/* 0DEEE8 */ M2C_UNK ftCo_800DEEE8(ftCo_Fighter* fp, Vec2* shift);\n/* 0DEF38 */ void ftCo_800DEF38(ftCo_GObj* gobj);\n/* 0DF0D0 */ void ftCo_800DF0D0(ftCo_GObj* gobj);\n/* 0DF1C8 */ bool ftCo_800DF1C8(ftCo_Fighter* fp);\n/* 0DF21C */ bool ftCo_800DF21C(ftCo_Fighter* fp);\n/* 0DF2D8 */ bool ftCo_800DF2D8(ftCo_Fighter* fp);\n/* 0DF30C */ bool ftCo_800DF30C(ftCo_Fighter* fp);\n/* 0DF3A8 */ bool ftCo_800DF3A8(ftCo_Fighter* fp);\n/* 0DF3DC */ bool ftCo_800DF3DC(ftCo_Fighter* fp);\n/* 0DF478 */ bool ftCo_800DF478(Fighter*);\n/* 0DF50C */ bool ftCo_800DF50C(ftCo_Fighter* fp);\n/* 0DF608 */ bool ftCo_800DF608(ftCo_Fighter* fp);\n/* 0DF644 */ bool ftCo_800DF644(ftCo_Fighter* fp);\n/* 0DF678 */ bool ftCo_800DF678(Fighter* fp);\n/* 0DF6F8 */ bool ftCo_800DF6F8(ftCo_Fighter* fp);\n/* 0DF72C */ bool ftCo_800DF72C(ftCo_Fighter* fp);\n/* 0DF79C */ bool ftCo_800DF79C(ftCo_Fighter* fp);\n/* 0DF7F4 */ M2C_UNK ftCo_800DF7F4();\n/* 0DF844 */ M2C_UNK ftCo_800DF844();\n/* 0DF878 */ M2C_UNK ftCo_800DF878();\n/* 0DF8B0 */ bool ftCo_800DF8B0(ftCo_Fighter* fp);\n/* 0DF8E8 */ bool ftCo_800DF8E8(ftCo_Fighter* fp);\n/* 0DF910 */ M2C_UNK ftCo_800DF910();\n#define GALE01_07C930\nvoid ftCommon_8007C930(ftCo_Fighter*, float);\nvoid ftCommon_8007C98C(ftCo_Fighter*, float vel, float, float gr_friction);\nvoid ftCommon_8007CA80(ftCo_Fighter* fp, float result, float, float);\nvoid ftCommon_8007CADC(ftCo_Fighter*, float, float, float);\nvoid ftCommon_8007CB74(ftCo_GObj*);\nftCo_GObj* ftCommon_8007CC1C(ftCo_GObj*);\nvoid ftCommon_8007CC78(ftCo_Fighter*, float);\nvoid ftCommon_8007CCA0(ftCo_Fighter*, float);\nvoid ftCommon_8007CCE8(ftCo_Fighter*);\nfloat ftCommon_8007CD6C(float, float decrement);\nfloat ftCommon_8007CDA4(ftCo_Fighter*);\nfloat ftCommon_8007CDF8(ftCo_Fighter*);\nvoid ftCommon_8007CE4C(ftCo_Fighter*, float);\nvoid ftCommon_8007CE94(ftCo_Fighter*, float);\nvoid ftCommon_8007CEF4(ftCo_Fighter*);\nbool ftCommon_8007CF58(ftCo_Fighter*);\nbool ftCommon_8007D050(ftCo_Fighter*, float);\nvoid ftCommon_8007D140(ftCo_Fighter*, float, float, float);\nvoid ftCommon_8007D174(ftCo_Fighter*, float, float, float, float);\nvoid ftCommon_8007D268(ftCo_Fighter*);\nvoid ftCommon_8007D28C(ftCo_Fighter*, float);\nvoid ftCommon_8007D2E8(ftCo_Fighter*, float, float);\nvoid ftCommon_8007D344(ftCo_Fighter*, float, float, float);\nvoid ftCommon_8007D3A8(ftCo_Fighter*, float, float, float);\nvoid ftCommon_8007D440(ftCo_Fighter*, float);\nvoid ftCommon_8007D468(ftCo_Fighter*);\nvoid ftCommon_8007D494(ftCo_Fighter*, float, float);\nvoid ftCommon_8007D4B8(ftCo_Fighter*);\nvoid ftCommon_8007D4E4(ftCo_Fighter*);\nvoid ftCommon_ClampFallSpeed(ftCo_Fighter*, float);\nvoid ftCommon_8007D508(ftCo_Fighter*, float, float);\nbool ftCommon_8007D528(ftCo_Fighter*);\nvoid ftCommon_8007D5BC(ftCo_Fighter*);\nvoid ftCommon_8007D5D4(ftCo_Fighter*);\nvoid ftCommon_8007D60C(ftCo_Fighter*);\nvoid ftCommon_8007D698(ftCo_Fighter*);\nvoid ftCommon_8007D6A4(ftCo_Fighter*);\nvoid ftCommon_8007D780(ftCo_Fighter*);\nvoid ftCommon_8007D7FC(ftCo_Fighter*);\nvoid ftCommon_8007D92C(ftCo_GObj*);\nfloat ftCo_GetLStickAngle(ftCo_Fighter* fp);\nfloat ftCo_GetCStickAngle(ftCo_Fighter* fp);\nfloat ftCommon_8007D9D4(ftCo_Fighter*);\nvoid ftCommon_8007D9FC(ftCo_Fighter*);\nvoid ftCommon_8007DA24(ftCo_Fighter*);\nfloat ftCommon_CalcHitlag(int dmg, FtMotionId msid, float mul);\nvoid ftCommon_8007DB24(ftCo_GObj*);\nvoid ftCommon_8007DB58(ftCo_GObj*);\nvoid ftCommon_8007DBCC(ftCo_Fighter*, bool, float);\nbool ftCommon_8007DC08(ftCo_Fighter*, float);\nvoid ftCommon_8007DD7C(ftCo_GObj*, Vec3*);\nvoid ftCommon_8007DFD0(ftCo_GObj* gobj, Vec3* arg1);\nvoid ftCommon_8007E0E4(ftCo_GObj*);\nftCo_GObj* ftCommon_8007E2A4(ftCo_GObj*);\nvoid ftCommon_8007E2F4(ftCo_Fighter*, s16 val);\nvoid ftCommon_8007E2FC(ftCo_GObj*);\nvoid ftCommon_8007E358(ftCo_GObj*);\nvoid ftCommon_8007E3EC(ftCo_GObj*);\nvoid ftCommon_8007E5AC(ftCo_Fighter*);\nvoid ftCommon_SetAccessory(ftCo_Fighter*, HSD_Joint*);\nvoid ftCommon_8007E690(ftCo_Fighter*, HSD_AnimJoint*);\nvoid ftCommon_8007E6DC(ftCo_GObj*, ftCo_GObj* gobj, s32);\nvoid ftCommon_8007E79C(ftCo_GObj*, s32);\nvoid ftCommon_8007E7E4(ftCo_GObj*, s32);\nvoid ftCommon_8007E82C(ftCo_GObj*);\nvoid ftCommon_8007E83C(ftCo_GObj*, s32, float div);\ns32 ftCo_GetParasolStatus(ftCo_GObj*);\nvoid ftCommon_8007EA90(ftCo_Fighter*, s32);\nvoid ftCommon_8007EBAC(ftCo_Fighter*, u32, u32);\nvoid ftCommon_8007EC30(u32, u32);\nvoid ftCommon_8007ECD4(ftCo_Fighter*, s32);\nvoid ftCommon_8007ED2C(ftCo_Fighter*);\nvoid ftCommon_8007ED50(ftCo_Fighter*, s32);\nvoid ftCommon_8007EE0C(ftCo_Fighter*, s32);\nvoid ftCommon_8007EEC8(ftCo_Fighter*, s32, s32);\nvoid ftCommon_8007EF5C(ftCo_Fighter*, s32);\nvoid ftCommon_8007EFC0(ftCo_Fighter*, u32 val);\nvoid ftCommon_8007EFC8(ftCo_GObj*, void (*)(ftCo_GObj*));\nvoid ftCommon_8007F578(ftCo_GObj*);\nvoid ftCommon_8007F5CC(ftCo_GObj*, s32);\nfloat ftCommon_GetModelScale(ftCo_Fighter*);\nvoid ftCommon_8007F6A4(ftCo_Fighter*, HSD_JObj*);\nvoid ftCommon_8007F76C(ftCo_GObj*);\nvoid ftCommon_8007F7B4(ftCo_GObj*);\nMtx* ftCommon_8007F804(ftCo_Fighter*);\nvoid ftCommon_8007F824(ftCo_GObj*);\nvoid ftCommon_8007F86C(ftCo_GObj*);\nvoid ftCommon_8007F8B4(ftCo_Fighter*, Vec3* v);\nvoid ftCommon_8007F8E8(ftCo_GObj*);\nvoid ftCommon_8007F948(ftCo_GObj*, ftCo_GObj*, s32);\nvoid ftCommon_8007F9B4(ftCo_GObj*);\nvoid ftCommon_8007FA00(ftCo_GObj*);\nvoid ftCommon_8007FA58(ftCo_GObj*, ftCo_GObj*);\nvoid ftCommon_8007FC7C(ftCo_GObj*, float);\nvoid ftCommon_8007FDA0(ftCo_GObj*);\nvoid ftCommon_8007FF74(ftCo_GObj*);\nbool ftCommon_8007FFD8(ftCo_Fighter*, float);\nbool ftCommon_80080144(ftCo_Fighter*);\nvoid ftCommon_80080174(ftCo_Fighter* fp);\nvoid ftCommon_8008021C(ftCo_GObj*);\nvoid ftCommon_8008031C(ftCo_GObj*);\nvoid ftCommon_80080460(ftCo_Fighter*);\nvoid ftCommon_80080474(ftCo_Fighter*);\nvoid ftCommon_80080484(ftCo_Fighter*);\nvoid ftCommon_800804A0(ftCo_Fighter*, float);\nvoid ftCommon_800804FC(ftCo_Fighter*);\nvoid ftCommon_8007E2D0(ftCo_Fighter*, s16, HSD_GObjEvent, HSD_GObjEvent,\n                       void (*)(ftCo_GObj*, ftCo_GObj*));\n/// @todo static\nvoid ftCommon_8007FE84(ftCo_GObj*, ftCo_GObj*, s32, float);\n/// @todo @c DataOffset_PlayerScale_MultiplyBySomething\n/// @returns <tt>fp->x40*fp->x34</tt>\nfloat ftCommon_800804EC(ftCo_Fighter*);\nstatic inline void ftCo_SpawnEf(ftCo_GObj* gobj, HSD_JObj* joint, uint arg2,\n                                enum_t arg3)\n{\n    /// @todo Unused stack.\n    u8 _[8] = { 0 };\n    ftCo_Fighter* fp = gobj->user_data;\n    efAsync_Spawn((HSD_GObj*) gobj, &fp->x60C, arg2, arg3, joint);\n}\nstatic inline void ftCo_Thrown_Enter(ftCo_GObj* gobj, FtMotionId msid,\n                                     MotionFlags mf, float anim_start)\n{\n    ftCo_Fighter* fp = ((Fighter*) HSD_GObjGetUserData((HSD_GObj*) gobj));\n    fp->facing_dir = ((Fighter*) HSD_GObjGetUserData((HSD_GObj*) fp->victim_gobj))->facing_dir;\n    fp->mv.co.capturekoopa.x0 = 0;\n    Fighter_ChangeMotionState(gobj, msid, mf, anim_start, 1, 0,\n                              fp->victim_gobj);\n    fp->accessory1_cb = (HSD_GObjEvent) ftCo_800DE508;\n    ftCommon_8007E2F4(fp, 0x1FF);\n}\n#define MELEE_FT_CHARA_FTCRAZYHAND_FORWARD_H\ntypedef enum ftCrazyhand_MotionState {\n    ftCh_MS_Count = ftMh_MS_Count - 1,\n    ftCh_MS_SelfCount = ftMh_MS_SelfCount - 1,\n} ftCrazyhand_MotionState;\n#define GALE01_155E18\n/* 155E18 */ void ftCh_Init_OnDeath(HSD_GObj* gobj);\n/* 155E1C */ void ftCh_Init_OnLoad(HSD_GObj* gobj);\n/* 155F8C */ void ftCh_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 155FCC */ void ftCh_Init_80155FCC(HSD_GObj* gobj);\n/* 156014 */ void ftCh_Init_80156014(HSD_GObj* gobj);\n/* 156404 */ void ftCh_Wait1_0_Anim(HSD_GObj* gobj);\n/* 156A70 */ void ftCh_Wait1_0_IASA(HSD_GObj* gobj);\n/* 156AB4 */ void ftCh_Wait1_0_Phys(HSD_GObj* gobj);\n/* 156AD4 */ void ftCh_Wait1_0_Coll(HSD_GObj* gobj);\n/* 156FDC */ void ftCh_Entry_Anim(HSD_GObj* gobj);\n/* 157018 */ void ftCh_Entry_IASA(HSD_GObj* gobj);\n/* 15705C */ void ftCh_Entry_Phys(HSD_GObj* gobj);\n/* 15707C */ void ftCh_Entry_Coll(HSD_GObj* gobj);\n/* 1570CC */ void ftCh_Damage_Anim(HSD_GObj* gobj);\n/* 157108 */ void ftCh_Damage_IASA(HSD_GObj* gobj);\n/* 15714C */ void ftCh_Damage_Phys(HSD_GObj* gobj);\n/* 15716C */ void ftCh_Damage_Coll(HSD_GObj* gobj);\n/* 157204 */ void ftCh_Damage2_Anim(HSD_GObj* gobj);\n/* 1572D4 */ void ftCh_Damage2_IASA(HSD_GObj* gobj);\n/* 157318 */ void ftCh_Damage2_Phys(HSD_GObj* gobj);\n/* 157378 */ void ftCh_Damage2_Coll(HSD_GObj* gobj);\n/* 1573C8 */ void ftCh_WaitSweep_Anim(HSD_GObj* gobj);\n/* 157404 */ void ftCh_WaitSweep_Phys(HSD_GObj* gobj);\n/* 157424 */ void ftCh_WaitSweep_IASA(HSD_GObj* gobj);\n/* 157468 */ void ftCh_WaitSweep_Coll(HSD_GObj* gobj);\n/* 1574B8 */ void ftCh_SweepLoop_Anim(HSD_GObj* gobj);\n/* 1574F4 */ void ftCh_SweepLoop_IASA(HSD_GObj* gobj);\n/* 157538 */ void ftCh_SweepLoop_Phys(HSD_GObj* gobj);\n/* 157558 */ void ftCh_SweepLoop_Coll(HSD_GObj* gobj);\n/* 1575A8 */ void ftCh_SweepWait_Anim(HSD_GObj* gobj);\n/* 1575E4 */ void ftCh_SweepWait_IASA(HSD_GObj* gobj);\n/* 157628 */ void ftCh_SweepWait_Phys(HSD_GObj* gobj);\n/* 157648 */ void ftCh_SweepWait_Coll(HSD_GObj* gobj);\n/* 1576B0 */ void ftCh_Slap_Anim(HSD_GObj* gobj);\n/* 157724 */ void ftCh_Slap_IASA(HSD_GObj* gobj);\n/* 157768 */ void ftCh_Slap_Phys(HSD_GObj* gobj);\n/* 157844 */ void ftCh_Walk2_Anim(HSD_GObj* gobj);\n/* 157880 */ void ftCh_Walk2_IASA(HSD_GObj* gobj);\n/* 1578C4 */ void ftCh_Walk2_Phys(HSD_GObj* gobj);\n/* 1578E4 */ void ftCh_Slap_Coll(HSD_GObj* gobj);\n/* 157934 */ void ftCh_WalkLoop_Anim(HSD_GObj* gobj);\n/* 15798C */ void ftCh_WalkLoop_IASA(HSD_GObj* gobj);\n/* 1579D0 */ void ftCh_WalkLoop_Phys(HSD_GObj* gobj);\n/* 1579F0 */ void ftCh_WalkLoop_Coll(HSD_GObj* gobj);\n/* 157A40 */ void ftCh_WalkWait_Anim(HSD_GObj* gobj);\n/* 157ABC */ void ftCh_WalkWait_IASA(HSD_GObj* gobj);\n/* 157B00 */ void ftCh_WalkWait_Phys(HSD_GObj* gobj);\n/* 157B54 */ void ftCh_WalkWait_Coll(HSD_GObj* gobj);\n/* 157BAC */ void ftCh_WalkShoot_Anim(HSD_GObj* gobj);\n/* 157BE8 */ void ftCh_WalkShoot_IASA(HSD_GObj* gobj);\n/* 157C2C */ void ftCh_WalkShoot_Phys(HSD_GObj* gobj);\n/* 157C4C */ void ftCh_WalkShoot_Coll(HSD_GObj* gobj);\n/* 157CB0 */ void ftCh_Drill_Anim(HSD_GObj* gobj);\n/* 157CEC */ void ftCh_Drill_IASA(HSD_GObj* gobj);\n/* 157D30 */ void ftCh_Drill_Phys(HSD_GObj* gobj);\n/* 157DF4 */ void ftCh_Drill_Coll(HSD_GObj* gobj);\n/* 157EA0 */ void ftCh_RockCrushUp_Anim(HSD_GObj* gobj);\n/* 157F48 */ void ftCh_RockCrushWait_Anim(HSD_GObj* gobj);\n/* 157F84 */ void ftCh_RockCrushUp_IASA(HSD_GObj* gobj);\n/* 157FC8 */ void ftCh_RockCrushUp_Phys(HSD_GObj* gobj);\n/* 158140 */ void ftCh_RockCrushUp_Coll(HSD_GObj* gobj);\n/* 1581A4 */ void ftCh_RockCrushDown_Anim(HSD_GObj* gobj);\n/* 1581E0 */ void ftCh_RockCrushDown_IASA(HSD_GObj* gobj);\n/* 158224 */ void ftCh_RockCrushDown_Phys(HSD_GObj* gobj);\n/* 1582D4 */ void ftCh_RockCrushDown_Coll(HSD_GObj* gobj);\n/* 158340 */ void ftCh_PaperCrush_Anim(HSD_GObj* gobj);\n/* 15837C */ void ftCh_PaperCrush_IASA(HSD_GObj* gobj);\n/* 1583C0 */ void ftCh_PaperCrush_Phys(HSD_GObj* gobj);\n/* 1583E0 */ void ftCh_PaperCrush_Coll(HSD_GObj* gobj);\n/* 158450 */ void ftCh_Poke1_Anim(HSD_GObj* gobj);\n/* 1584CC */ void ftCh_Poke1_IASA(HSD_GObj* gobj);\n/* 158510 */ void ftCh_Poke1_Phys(HSD_GObj* gobj);\n/* 158530 */ void ftCh_Poke1_Coll(HSD_GObj* gobj);\n/* 15870C */ void ftCh_Poke2_Anim(HSD_GObj* gobj);\n/* 158748 */ void ftCh_Poke2_IASA(HSD_GObj* gobj);\n/* 15878C */ void ftCh_Poke2_Phys(HSD_GObj* gobj);\n/* 1587AC */ void ftCh_Poke2_Coll(HSD_GObj* gobj);\n/* 158814 */ void ftCh_FingerBeamStart_Anim(HSD_GObj* gobj);\n/* 158850 */ void ftCh_FingerBeamStart_IASA(HSD_GObj* gobj);\n/* 158894 */ void ftCh_FingerBeamStart_Phys(HSD_GObj* gobj);\n/* 1588B4 */ void ftCh_FingerBeamStart_Coll(HSD_GObj* gobj);\n/* 158BBC */ void ftCh_FingerBeamLoop_Anim(HSD_GObj* gobj);\n/* 158C44 */ void ftCh_FingerBeamLoop_IASA(HSD_GObj* gobj);\n/* 158C88 */ void ftCh_FingerBeamLoop_Phys(HSD_GObj* gobj);\n/* 158DF8 */ void ftCh_FingerBeamLoop_Coll(HSD_GObj* gobj);\n/* 158E7C */ void ftCh_FingerBeamEnd_Anim(HSD_GObj* gobj);\n/* 158ECC */ void ftCh_FingerBeamEnd_IASA(HSD_GObj* gobj);\n/* 158F10 */ void ftCh_FingerBeamEnd_Phys(HSD_GObj* gobj);\n/* 158F30 */ void ftCh_FingerBeamEnd_Coll(HSD_GObj* gobj);\n/* 158FB4 */ void ftCh_BackPunch_Anim(HSD_GObj* gobj);\n/* 158FF0 */ void ftCh_BackPunch_IASA(HSD_GObj* gobj);\n/* 159034 */ void ftCh_BackPunch_Phys(HSD_GObj* gobj);\n/* 159094 */ void ftCh_BackPunch_Coll(HSD_GObj* gobj);\n/* 159134 */ void ftCh_FingerGun1_Anim(HSD_GObj* gobj);\n/* 1591C0 */ void ftCh_FingerGun1_IASA(HSD_GObj* gobj);\n/* 159204 */ void ftCh_FingerGun1_Phys(HSD_GObj* gobj);\n/* 159264 */ void ftCh_FingerGun1_Coll(HSD_GObj* gobj);\n/* 159388 */ void ftCh_BackAirplane1_Anim(HSD_GObj* gobj);\n/* 15940C */ void ftCh_BackAirplane1_IASA(HSD_GObj* gobj);\n/* 159450 */ void ftCh_BackAirplane1_Phys(HSD_GObj* gobj);\n/* 1594B0 */ void ftCh_BackAirplane1_Coll(HSD_GObj* gobj);\n/* 159534 */ void ftCh_BackAirplane2_Anim(HSD_GObj* gobj);\n/* 159608 */ void ftCh_BackAirplane2_IASA(HSD_GObj* gobj);\n/* 15964C */ void ftCh_BackAirplane2_Phys(HSD_GObj* gobj);\n/* 15966C */ void ftCh_BackAirplane2_Coll(HSD_GObj* gobj);\n/* 1596D0 */ void ftCh_BackAirplane3_Anim(HSD_GObj* gobj);\n/* 159788 */ void ftCh_BackAirplane3_IASA(HSD_GObj* gobj);\n/* 1597CC */ void ftCh_BackAirplane3_Phys(HSD_GObj* gobj);\n/* 1597EC */ void ftCh_BackAirplane3_Coll(HSD_GObj* gobj);\n/* 159858 */ void ftCh_BackCrush_Anim(HSD_GObj* gobj);\n/* 1598A0 */ void ftCh_BackCrush_IASA(HSD_GObj* gobj);\n/* 1598E4 */ void ftCh_BackCrush_Phys(HSD_GObj* gobj);\n/* 159904 */ void ftCh_BackCrush_Coll(HSD_GObj* gobj);\n/* 1599C0 */ void ftCh_BackDisappear_Anim(HSD_GObj* gobj);\n/* 159A08 */ void ftCh_BackDisappear_IASA(HSD_GObj* gobj);\n/* 159A4C */ void ftCh_BackDisappear_Phys(HSD_GObj* gobj);\n/* 159AA0 */ void ftCh_BackDisappear_Coll(HSD_GObj* gobj);\n/* 159D04 */ void ftCh_Wait1_1_Anim(HSD_GObj* gobj);\n/* 159E8C */ void ftCh_Wait1_1_IASA(HSD_GObj* gobj);\n/* 159ED0 */ void ftCh_Wait1_1_Phys(HSD_GObj* gobj);\n/* 159F3C */ void ftCh_Wait1_1_Coll(HSD_GObj* gobj);\n/* 159F8C */ void ftCh_Grab_Anim(HSD_GObj* gobj);\n/* 159FC8 */ void ftCh_Grab_IASA(HSD_GObj* gobj);\n/* 15A00C */ void ftCh_Grab_Phys(HSD_GObj* gobj);\n/* 15A02C */ void ftCh_Grab_Coll(HSD_GObj* gobj);\n/* 15A0C4 */ void ftCh_Cancel_Anim(HSD_GObj* gobj);\n/* 15A10C */ void ftCh_Cancel_IASA(HSD_GObj* gobj);\n/* 15A150 */ void ftCh_Cancel_Phys(HSD_GObj* gobj);\n/* 15A180 */ void ftCh_Cancel_Coll(HSD_GObj* gobj);\n/* 15A20C */ void ftCh_Squeezing0_Anim(HSD_GObj* gobj);\n/* 15A248 */ void ftCh_Squeezing0_IASA(HSD_GObj* gobj);\n/* 15A28C */ void ftCh_Squeezing0_Phys(HSD_GObj* gobj);\n/* 15A2AC */ void ftCh_Squeezing0_Coll(HSD_GObj* gobj);\n/* 15A2B0 */ void ftCh_Init_8015A2B0(HSD_GObj* gobj);\n/* 15A318 */ void ftCh_Squeezing1_Anim(HSD_GObj* gobj);\n/* 15A38C */ void ftCh_Squeezing1_IASA(HSD_GObj* gobj);\n/* 15A3D0 */ void ftCh_Squeezing1_Phys(HSD_GObj* gobj);\n/* 15A3F0 */ void ftCh_Squeezing1_Coll(HSD_GObj* gobj);\n/* 15A3F4 */ void ftCh_Init_8015A3F4(HSD_GObj* gobj);\n/* 15A464 */ void ftCh_Squeeze_Anim(HSD_GObj* gobj);\n/* 15A4F8 */ void ftCh_Squeeze_IASA(HSD_GObj* gobj);\n/* 15A53C */ void ftCh_Squeeze_Phys(HSD_GObj* gobj);\n/* 15A55C */ void ftCh_Squeeze_Coll(HSD_GObj* gobj);\n/* 15A560 */ void ftCh_Init_8015A560(HSD_GObj* gobj);\n/* 15A5D0 */ void ftCh_Throw_Anim(HSD_GObj* gobj);\n/* 15A664 */ void ftCh_Throw_IASA(HSD_GObj* gobj);\n/* 15A6A8 */ void ftCh_Throw_Phys(HSD_GObj* gobj);\n/* 15A6C8 */ void ftCh_Throw_Coll(HSD_GObj* gobj);\n/* 15A6CC */ void ftCh_Slam_Anim(HSD_GObj* gobj);\n/* 15A750 */ void ftCh_Slam_IASA(HSD_GObj* gobj);\n/* 15A794 */ void ftCh_Slam_Phys(HSD_GObj* gobj);\n/* 15A7B4 */ void ftCh_Slam_Coll(HSD_GObj* gobj);\n/* 15A7B8 */ void ftCh_Fail_Anim(HSD_GObj* gobj);\n/* 15A820 */ void ftCh_Fail_IASA(HSD_GObj* gobj);\n/* 15A864 */ void ftCh_Fail_Phys(HSD_GObj* gobj);\n/* 15A884 */ void ftCh_Fail_Coll(HSD_GObj* gobj);\n/* 15A8D4 */ void ftCh_TagCrush_Anim(HSD_GObj* gobj);\n/* 15A910 */ void ftCh_TagCrush_IASA(HSD_GObj* gobj);\n/* 15A954 */ void ftCh_TagCrush_Phys(HSD_GObj* gobj);\n/* 15A974 */ void ftCh_TagCrush_Coll(HSD_GObj* gobj);\n/* 15A978 */ void ftCh_TagApplaud_Anim(HSD_GObj* gobj);\n/* 15AA00 */ void ftCh_TagApplaud_IASA(HSD_GObj* gobj);\n/* 15AA44 */ void ftCh_TagApplaud_Phys(HSD_GObj* gobj);\n/* 15AAA4 */ void ftCh_TagApplaud_Coll(HSD_GObj* gobj);\n/* 15AB04 */ void ftCh_TagRockPaper_Anim(HSD_GObj* gobj);\n/* 15AB84 */ void ftCh_TagRockPaper_IASA(HSD_GObj* gobj);\n/* 15ABC8 */ void ftCh_TagRockPaper_Phys(HSD_GObj* gobj);\n/* 15ABCC */ void ftCh_TagRockPaper_Coll(HSD_GObj* gobj);\n/* 15ACD0 */ void ftCh_FingerGun2_Anim(HSD_GObj* gobj);\n/* 15AD28 */ void ftCh_FingerGun2_IASA(HSD_GObj* gobj);\n/* 15AD6C */ void ftCh_FingerGun2_Phys(HSD_GObj* gobj);\n/* 15ADCC */ void ftCh_FingerGun2_Coll(HSD_GObj* gobj);\n/* 15AF04 */ void ftCh_TagGrab_Anim(HSD_GObj* gobj);\n/* 15B000 */ void ftCh_TagSqueeze_Anim(HSD_GObj* gobj);\n/* 15B0FC */ void ftCh_TagGrab_IASA(HSD_GObj* gobj);\n/* 15B140 */ void ftCh_TagGrab_Phys(HSD_GObj* gobj);\n/* 15B170 */ void ftCh_TagGrab_Coll(HSD_GObj* gobj);\n/* 15B22C */ void ftCh_TagFail_Anim(HSD_GObj* gobj);\n/* 15B274 */ void ftCh_TagFail_IASA(HSD_GObj* gobj);\n/* 15B2B8 */ void ftCh_TagFail_Phys(HSD_GObj* gobj);\n/* 15B2BC */ void ftCh_TagFail_Coll(HSD_GObj* gobj);\n/* 15B660 */ void ftCo_CaptureCrazyHand_Anim(HSD_GObj* gobj);\n/* 15B664 */ void ftCo_CaptureCrazyHand_IASA(HSD_GObj* gobj);\n/* 15B668 */ void ftCo_CaptureCrazyHand_Phys(HSD_GObj* gobj);\n/* 15B66C */ void ftCo_CaptureCrazyHand_Coll(HSD_GObj* gobj);\n/* 15B704 */ void ftCo_CaptureDamageCrazyHand_Anim(HSD_GObj* gobj);\n/* 15B76C */ void ftCo_CaptureDamageCrazyHand_IASA(HSD_GObj* gobj);\n/* 15B770 */ void ftCo_CaptureDamageCrazyHand_Phys(HSD_GObj* gobj);\n/* 15B774 */ void ftCo_CaptureDamageCrazyHand_Coll(HSD_GObj* gobj);\n/* 15B840 */ void ftCo_CaptureWaitCrazyHand_Anim(HSD_GObj* gobj);\n/* 15B844 */ void ftCo_CaptureWaitCrazyHand_IASA(HSD_GObj* gobj);\n/* 15B848 */ void ftCo_CaptureWaitCrazyHand_Phys(HSD_GObj* gobj);\n/* 15B84C */ void ftCo_CaptureWaitCrazyHand_Coll(HSD_GObj* gobj);\n/* 15B8EC */ void ftCo_ThrownCrazyHand_Anim(HSD_GObj* gobj);\n/* 15B8F0 */ void ftCo_ThrownCrazyHand_IASA(HSD_GObj* gobj);\n/* 15B8F4 */ void ftCo_ThrownCrazyHand_Phys(HSD_GObj* gobj);\n/* 15B8F8 */ void ftCo_ThrownCrazyHand_Coll(HSD_GObj* gobj);\n/* 15BB70 */ void ftCh_TagCancel_Anim(HSD_GObj* gobj);\n/* 15BBD8 */ void ftCh_TagCancel_Phys(HSD_GObj* gobj);\n/* 15BC38 */ void ftCh_TagCancel_Coll(HSD_GObj* gobj);\n/* 3D41F8 */ extern MotionState ftCh_Init_MotionStateTable[ftCh_MS_SelfCount];\n/* 3D4818 */ extern char ftCh_Init_DatFilename[];\n/* 3D4824 */ extern char ftCh_Init_DataName[];\n/* 3D485C */ extern char ftCh_Init_AnimDatFilename[];\n/* 3D4868 */ extern Fighter_CostumeStrings ftCh_Init_CostumeStrings[];\n#define MELEE_FT_CHARA_FTCRAZYHAND_TYPES_H\ntypedef struct _ftCrazyHandAttributes {\n    s32 x0;\n    s32 x4;\n    s32 x8;\n    s32 xC;\n    s32 x10;\n    f32 x14;\n    f32 x18;\n    f32 x1C;\n    s32 x20;\n    s32 x24;\n    f32 x28;\n    f32 x2C;\n    Vec2 x30_pos2;\n    f32 x38;\n    f32 x3C;\n    Vec3 x40_pos;\n    f32 x4C;\n    Vec2 x50;\n    f32 x58;\n    f32 x5C;\n    f32 x60;\n    f32 x64;\n    f32 x68;\n    s32 x6C;\n    s32 x70;\n    s32 x74;\n    f32 x78;\n    s32 x7C;\n    f32 x80;\n    s32 x84;\n    Vec2 x88_pos;\n    s32 x90;\n    s32 x94;\n    f32 x98;\n    f32 x9C;\n    s32 xA0;\n    f32 xA4;\n    Vec2 xA8_pos;\n    s32 xB0;\n    s32 xB4;\n    f32 xB8;\n    Vec2 xBC_pos;\n    Vec2 xC4_pos;\n    Vec2 xCC_pos;\n    f32 xD4;\n    f32 xD8;\n    f32 xDC;\n    f32 xE0;\n    f32 xE4;\n    f32 xE8;\n    s32 xEC;\n    s32 xF0;\n    f32 xF4;\n    f32 xF8;\n    f32 xFC;\n    f32 x100;\n    f32 x104;\n    f32 x108;\n    f32 x10C;\n    Vec2 x110_pos;\n    Vec2 x118_pos;\n    f32 x120;\n    Vec2 x124_pos;\n    Vec2 x12C_pos;\n    Vec2 x134_pos;\n    Vec2 x13C_pos;\n} ftCrazyHandAttributes;\n#define MELEE_FT_CHARA_FTDONKEY_FORWARD_H\nstatic MotionFlags const ftDk_MF_Special =\n    ftCo_MF_Special | Ft_MF_SkipModel | Ft_MF_KeepSfx | Ft_MF_SkipItemVis |\n    Ft_MF_UnkUpdatePhys | Ft_MF_FreezeState;\nstatic MotionFlags const ftDk_MF_SpecialN =\n    ftDk_MF_Special | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftDk_MF_SpecialS =\n    ftDk_MF_Special | Ft_MF_KeepGfx;\nstatic MotionFlags const ftDk_MF_SpecialHi =\n    ftDk_MF_Special | Ft_MF_KeepFastFall | Ft_MF_KeepGfx;\nstatic MotionFlags const ftDk_MF_SpecialLwStart =\n    ftDk_MF_Special | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftDk_MF_SpecialAirN =\n    ftDk_MF_Special | Ft_MF_KeepFastFall | Ft_MF_SkipParasol;\nstatic MotionFlags const ftDk_MF_SpecialAirS =\n    ftDk_MF_Special | Ft_MF_KeepGfx | Ft_MF_SkipParasol;\nstatic MotionFlags const ftDk_MF_SpecialAirHi =\n    ftDk_MF_Special | Ft_MF_KeepFastFall | Ft_MF_KeepGfx | Ft_MF_SkipParasol;\nstatic MotionFlags const ftDk_MF_MS_386 =\n    ftDk_MF_Special | Ft_MF_KeepColAnimHitStatus | Ft_MF_SkipParasol;\nstatic MotionFlags const ftDk_MF_SpecialLw =\n    ftDk_MF_Special | Ft_MF_KeepColAnimHitStatus | Ft_MF_Unk19;\nstatic MotionFlags const ftDk_MF_MS_350 =\n    Ft_MF_KeepSwordTrail | Ft_MF_Unk19 | Ft_MF_SkipModelPartVis;\nstatic MotionFlags const ftDk_MF_Cargo =\n    Ft_MF_SkipModel | Ft_MF_SkipAnimVel | Ft_MF_FreezeState | Ft_MF_SkipMetalB;\nstatic MotionFlags const ftDk_MF_CargoThrow =\n    ftDk_MF_Cargo | Ft_MF_SkipHit | Ft_MF_SkipItemVis;\nstatic MotionFlags const ftDk_MF_CargoThrowF =\n    ftDk_MF_CargoThrow | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftDk_MF_CargoThrowB =\n    ftDk_MF_CargoThrow | Ft_MF_KeepGfx;\nstatic MotionFlags const ftDk_MF_CargoThrowHi =\n    ftDk_MF_CargoThrow | Ft_MF_KeepFastFall | Ft_MF_KeepGfx;\nstatic MotionFlags const ftDk_MF_CargoThrowLw =\n    ftDk_MF_CargoThrow | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftDk_MF_CargoWait =\n    ftDk_MF_Cargo | Ft_MF_KeepFastFall | Ft_MF_KeepColAnimHitStatus |\n    Ft_MF_Unk19;\nstatic MotionFlags const ftDk_MF_CargoTurn =\n    ftDk_MF_CargoWait | Ft_MF_KeepAccessory;\nstatic MotionFlags const ftDk_MF_CargoWalk =\n    ftDk_MF_CargoWait | Ft_MF_UpdateCmd;\nstatic MotionFlags const ftDk_MF_CargoJump =\n    ftDk_MF_CargoWait | Ft_MF_SkipNametagVis;\nstatic MotionFlags const ftDk_MF_MS_360 =\n    ftDk_MF_CargoWait | Ft_MF_KeepSwordTrail;\nstatic MotionFlags const ftDk_MF_MS_341 =\n    Ft_MF_Unk19 | Ft_MF_SkipModelPartVis;\nstatic MotionFlags const ftDk_MF_Move_53 =\n    ftDk_MF_MS_341 | Ft_MF_SkipAnimVel | Ft_MF_Unk06;\nstatic MotionFlags const ftDk_MF_MS_342_Base =\n    ftDk_MF_Move_53 | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftDk_MF_MS_342 =\n    ftDk_MF_MS_342_Base | Ft_MF_KeepGfx | Ft_MF_UpdateCmd;\nstatic MotionFlags const ftDk_MF_MS_345 =\n    ftDk_MF_MS_342_Base | Ft_MF_KeepAccessory;\nstatic MotionFlags const ftDk_MF_MS_348 =\n    ftDk_MF_Move_53 | Ft_MF_KeepFastFall | Ft_MF_SkipHit |\n    Ft_MF_SkipNametagVis;\ntypedef enum ftDk_MotionState {\n    ftDk_MS_HeavyWait = ftCo_MS_Count,\n    ftDk_MS_HeavyWalkSlow,\n    ftDk_MS_HeavyWalkMiddle,\n    ftDk_MS_HeavyWalkFast,\n    ftDk_MS_HeavyTurn,\n    ftDk_MS_HeavyKneebend,\n    ftDk_MS_HeavyFall,\n    ftDk_MS_HeavyJump,\n    ftDk_MS_HeavyLanding,\n    ftDk_MS_HeavyWait2,\n    ftDk_MS_ThrowFWait0,\n    ftDk_MS_ThrowFWalkSlow,\n    ftDk_MS_ThrowFWalkMiddle,\n    ftDk_MS_ThrowFWalkFast,\n    ftDk_MS_ThrowFTurn,\n    ftDk_MS_ThrowFKneebend,\n    ftDk_MS_ThrowFFall,\n    ftDk_MS_ThrowFJump,\n    ftDk_MS_ThrowFLanding,\n    ftDk_MS_ThrowFWait2,\n    ftDk_MS_ThrowFF,\n    ftDk_MS_ThrowFB,\n    ftDk_MS_ThrowFHi,\n    ftDk_MS_ThrowFLw,\n    ftDk_MS_ThrowAirFF,\n    ftDk_MS_ThrowAirFB,\n    ftDk_MS_ThrowAirFHi,\n    ftDk_MS_ThrowAirFLw,\n    ftDk_MS_SpecialNStart,\n    ftDk_MS_SpecialNLoop,\n    ftDk_MS_SpecialNCancel,\n    ftDk_MS_SpecialN,\n    ftDk_MS_SpecialNFull,\n    ftDk_MS_SpecialAirNStart,\n    ftDk_MS_SpecialAirNLoop,\n    ftDk_MS_SpecialAirNCancel,\n    ftDk_MS_SpecialAirN,\n    ftDk_MS_SpecialAirNFull,\n    ftDk_MS_SpecialS,\n    ftDk_MS_SpecialAirS,\n    ftDk_MS_SpecialHi,\n    ftDk_MS_SpecialAirHi,\n    ftDk_MS_SpecialLwStart,\n    ftDk_MS_SpecialLwLoop,\n    ftDk_MS_SpecialLwEnd0,\n    ftDk_MS_SpecialLwEnd1,\n    ftDk_MS_Count,\n    ftDk_MS_SelfCount = ftDk_MS_Count - ftCo_MS_Count,\n} ftDk_MotionState;\ntypedef enum ftDk_Submotion {\n    ftDk_SM_HeavyWait = ftCo_SM_Count,\n    ftDk_SM_HeavyWalkSlow,\n    ftDk_SM_HeavyWalkMiddle,\n    ftDk_SM_HeavyWalkFast,\n    ftDk_SM_HeavyTurn,\n    ftDk_SM_HeavyKneebend,\n    ftDk_SM_HeavyFall,\n    ftDk_SM_HeavyJump,\n    ftDk_SM_HeavyLanding,\n    ftDk_SM_HeavyWait2,\n    ftDk_SM_ThrowFWait0,\n    ftDk_SM_ThrowFWalkSlow,\n    ftDk_SM_ThrowFWalkMiddle,\n    ftDk_SM_ThrowFWalkFast,\n    ftDk_SM_ThrowFTurn,\n    ftDk_SM_ThrowFKneebend,\n    ftDk_SM_ThrowFFall,\n    ftDk_SM_ThrowFJump,\n    ftDk_SM_ThrowFLanding,\n    ftDk_SM_ThrowFWait2,\n    ftDk_SM_ThrowFF,\n    ftDk_SM_ThrowFB,\n    ftDk_SM_ThrowFHi,\n    ftDk_SM_ThrowFLw,\n    ftDk_SM_SpecialNStart,\n    ftDk_SM_SpecialNLoop,\n    ftDk_SM_SpecialNCancel,\n    ftDk_SM_SpecialN,\n    ftDk_SM_SpecialNFull,\n    ftDk_SM_SpecialAirNStart,\n    ftDk_SM_SpecialAirNLoop,\n    ftDk_SM_SpecialAirNCancel,\n    ftDk_SM_SpecialAirN,\n    ftDk_SM_SpecialAirNFull,\n    ftDk_SM_SpecialS,\n    ftDk_SM_SpecialAirS,\n    ftDk_SM_SpecialHi,\n    ftDk_SM_SpecialAirHi,\n    ftDk_SM_SpecialLwStart,\n    ftDk_SM_SpecialLwLoop,\n    ftDk_SM_SpecialLwEnd0,\n    ftDk_SM_SpecialLwEnd1,\n    ftDk_SM_Count,\n    ftDk_SM_SelfCount = ftDk_SM_Count - ftCo_SM_Count,\n} ftDk_Submotion;\n#define GALE01_0E030C\n/* 0E030C */ void ftDk_HeavyFall_IASA(HSD_GObj* gobj);\n/* 0E0330 */ void ftDk_HeavyFall_Phys(HSD_GObj* gobj);\n/* 0E0350 */ void ftDk_HeavyFall_Coll(HSD_GObj* gobj);\n/* 0E0378 */ bool ftDk_MS_347_800E0378(HSD_GObj* gobj);\n/* 0E03C0 */ void ftDk_MS_347_800E03C0(HSD_GObj* gobj);\n#define GALE01_0E0440\n/* 0E0440 */ void ftDk_HeavyJump_IASA(HSD_GObj* gobj);\n/* 0E0464 */ void ftDk_HeavyJump_Phys(HSD_GObj* gobj);\n/* 0E0484 */ void ftDk_HeavyJump_Coll(HSD_GObj* gobj);\n/* 0E04A4 */ void ftDk_MS_348_800E04A4(HSD_GObj* gobj, s32 arg1);\n/* 0E0518 */ void ftDk_HeavyWait1_Anim(HSD_GObj* gobj);\n#define GALE01_0E0698\n/* 0E0698 */ void ftDk_HeavyLanding_Phys(HSD_GObj* gobj);\n/* 0E06B8 */ void ftDk_HeavyLanding_Coll(HSD_GObj* gobj);\n/* 0E06D8 */ void ftDk_MS_349_800E06D8(HSD_GObj* gobj);\n/* 0E07E4 */ void ftDk_HeavyWait2_Anim(HSD_GObj* gobj);\n/* 0E0848 */ void ftDk_HeavyWait2_Phys(HSD_GObj* gobj);\n/* 0E0868 */ void ftDk_HeavyWait2_Coll(HSD_GObj* gobj);\n#define GALE01_0E01BC\n/* 0E01BC */ void ftDk_HeavyTurn_Anim(HSD_GObj* gobj);\n/* 0E0200 */ void ftDk_HeavyTurn_IASA(HSD_GObj* gobj);\n/* 0E0254 */ void ftDk_HeavyTurn_Phys(HSD_GObj* gobj);\n/* 0E0274 */ void ftDk_HeavyTurn_Coll(HSD_GObj* gobj);\n/* 0E0294 */ void ftDk_MS_345_800E0294(HSD_GObj* gobj);\n#define GALE01_0DF938\n/* 0DF938 */ bool ftDk_MS_341_800DF938(HSD_GObj* gobj);\n/* 0DF980 */ void ftDk_MS_341_800DF980(HSD_GObj* gobj);\n/* 0DF9F0 */ void ftDk_HeavyWait0_IASA(HSD_GObj* gobj);\n/* 0DFA50 */ void ftDk_HeavyWait0_Phys(HSD_GObj* gobj);\n/* 0DFA70 */ void ftDk_HeavyWait0_Coll(HSD_GObj* gobj);\n/* 0DFA98 */ bool ftDk_MS_341_800DFA98(HSD_GObj* gobj);\n/* 0DFAE4 */ void ftDk_MS_341_800DFAE4(HSD_GObj* gobj, float);\n#define GALE01_0E0568\n/* 0E0568 */ void ftDk_HeavyWait1_IASA(HSD_GObj* gobj);\n/* 0E05A4 */ void ftDk_HeavyWait1_Phys(HSD_GObj* gobj);\n/* 0E05C4 */ void ftDk_HeavyWait1_Coll(HSD_GObj* gobj);\n/* 0E05E4 */ void ftDk_MS_346_800E05E4(HSD_GObj* gobj);\n/* 0E0648 */ void ftDk_HeavyLanding_Anim(HSD_GObj* gobj);\n#define GALE01_0DFB34\n/* 0DFB34 */ void ftDk_HeavyWalk_Anim(HSD_GObj* gobj);\n/* 0DFB54 */ void ftDk_HeavyWalk_IASA(HSD_GObj* gobj);\n/* 0DFBB8 */ void ftDk_HeavyWalk_Phys(HSD_GObj* gobj);\n/* 0DFBD8 */ void ftDk_HeavyWalk_Coll(HSD_GObj* gobj);\n#define GALE01_10D740\n/* 10D740 */ void ftDk_Init_OnDeath(HSD_GObj* gobj);\n/* 10D774 */ void ftDk_Init_8010D774(HSD_GObj* gobj);\n/* 10D7A8 */ void ftDk_Init_OnItemPickup(HSD_GObj* gobj, bool flag);\n/* 10D888 */ void ftDk_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 10D8D0 */ void ftDk_Init_OnItemVisible(HSD_GObj* gobj);\n/* 10D918 */ void ftDk_Init_OnItemDrop(HSD_GObj* gobj, bool bool1);\n/* 10D96C */ void ftDk_Init_UnkMotionStates4(HSD_GObj* gobj);\n/* 10D9AC */ void ftDk_Init_OnLoad(HSD_GObj* gobj);\n/* 10DA74 */ void ftDk_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 10DAB4 */ void ftDk_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 10DAF8 */ void ftDk_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 10DB3C */ void ftDk_Init_8010DB3C(HSD_GObj* gobj);\n/* 3CB838 */ extern MotionState ftDk_Init_MotionStateTable[ftDk_MS_SelfCount];\n/* 3CBDF8 */ extern Fighter_CostumeStrings ftDk_Init_CostumeStrings[];\n/* 3CBE04 */ extern char ftDk_Init_DatFilename[];\n/* 3CBF88 */ extern char ftDk_Init_AnimDatFilename[];\n/* 3CC010 */ extern Fighter_DemoStrings ftDk_Init_DemoMotionFilenames;\n/* 3CC020 */ extern char ftDk_Init_DataName[];\n#define GALE01_0E0134\n/* 0E0134 */ bool ftDk_MS_345_800E0134(HSD_GObj* gobj);\n#define GALE01_10FB1C\n/* 10FB1C */ void ftDk_SpecialHi_Enter(HSD_GObj* gobj);\n/* 10FBFC */ void ftDk_SpecialAirHi_Enter(HSD_GObj* gobj);\n/* 10FCD4 */ void ftDk_SpecialHi_Anim(HSD_GObj* gobj);\n/* 10FD10 */ void ftDk_SpecialAirHi_Anim(HSD_GObj* gobj);\n/* 10FD9C */ void ftDk_SpecialHi_IASA(HSD_GObj* gobj);\n/* 10FDA0 */ void ftDk_SpecialAirHi_IASA(HSD_GObj* gobj);\n/* 10FDA4 */ void ftDk_SpecialHi_Phys(HSD_GObj* gobj);\n/* 10FDEC */ void ftDk_SpecialAirHi_Phys(HSD_GObj* gobj);\n/* 10FE60 */ void ftDk_SpecialHi_Coll(HSD_GObj* gobj);\n/* 10FF14 */ void ftDk_SpecialAirHi_Coll(HSD_GObj* gobj);\n/* 110074 */ void ftDk_SpecialHi_DestroyAllEffects(HSD_GObj* gobj);\n#define GALE01_10DC80\n/* 10DC80 */ void ftDk_SpecialLw_Enter(HSD_GObj* gobj);\n/* 10DCD8 */ void ftDk_SpecialLwStart_Anim(HSD_GObj* gobj);\n/* 10DD14 */ void ftDk_SpecialLwStart_IASA(HSD_GObj* gobj);\n/* 10DD18 */ void ftDk_SpecialLwStart_Phys(HSD_GObj* gobj);\n/* 10DD38 */ void ftDk_SpecialLwStart_Coll(HSD_GObj* gobj);\n/* 10DD74 */ void ftDk_SpecialLwLoop_Anim(HSD_GObj* gobj);\n/* 10DDDC */ void ftDk_SpecialLwLoop_IASA(HSD_GObj* gobj);\n/* 10DDF8 */ void ftDk_SpecialLwLoop_Phys(HSD_GObj* gobj);\n/* 10DE18 */ void ftDk_SpecialLwLoop_Coll(HSD_GObj* gobj);\n/* 10DF5C */ void ftDk_SpecialLwEnd0_Anim(HSD_GObj* gobj);\n/* 10DF98 */ void ftDk_SpecialLwEnd0_IASA(HSD_GObj* gobj);\n/* 10DF9C */ void ftDk_SpecialLwEnd0_Phys(HSD_GObj* gobj);\n/* 10DFBC */ void ftDk_SpecialLwEnd0_Coll(HSD_GObj* gobj);\n/* 10E030 */ void ftDk_SpecialLwEnd1_Anim(HSD_GObj* gobj);\n/* 10E06C */ void ftDk_SpecialLwEnd1_IASA(HSD_GObj* gobj);\n/* 10E070 */ void ftDk_SpecialLwEnd1_Phys(HSD_GObj* gobj);\n/* 10E090 */ void ftDk_SpecialLwEnd1_Coll(HSD_GObj* gobj);\n/* 10E0CC */ void ftDk_SpecialLw_8010E0CC(HSD_GObj* gobj);\n/* 10E148 */ void ftDk_SpecialLw_8010E148(HSD_GObj* gobj);\n#define GALE01_10E574\n/* 10E574 */ void ftDk_SpecialN_Enter(HSD_GObj* gobj);\n/* 10E69C */ void ftDk_SpecialAirN_Enter(HSD_GObj* gobj);\n/* 10E7B4 */ void ftDk_SpecialNStart_Anim(HSD_GObj* gobj);\n/* 10E840 */ void ftDk_SpecialNLoop_Anim(HSD_GObj* gobj);\n/* 10E8E0 */ void ftDk_SpecialNCancel_Anim(HSD_GObj* gobj);\n/* 10E930 */ void ftDk_SpecialN_Anim(HSD_GObj* gobj);\n/* 10EB0C */ void ftDk_SpecialNFull_Anim(HSD_GObj* gobj);\n/* 10EC5C */ void ftDk_SpecialAirNStart_Anim(HSD_GObj* gobj);\n/* 10ECE8 */ void ftDk_SpecialAirNLoop_Anim(HSD_GObj* gobj);\n/* 10ED88 */ void ftDk_SpecialAirNCancel_Anim(HSD_GObj* gobj);\n/* 10EDD8 */ void ftDk_SpecialAirN_Anim(HSD_GObj* gobj);\n/* 10EF7C */ void ftDk_SpecialAirNFull_Anim(HSD_GObj* gobj);\n/* 10F094 */ void ftDk_SpecialNStart_IASA(HSD_GObj* gobj);\n/* 10F098 */ void ftDk_SpecialNLoop_IASA(HSD_GObj* gobj);\n/* 10F1D8 */ void ftDk_SpecialNCancel_IASA(HSD_GObj* gobj);\n/* 10F1DC */ void ftDk_SpecialN_IASA(HSD_GObj* gobj);\n/* 10F1E0 */ void ftDk_SpecialNFull_IASA(HSD_GObj* gobj);\n/* 10F1E4 */ void ftDk_SpecialAirNStart_IASA(HSD_GObj* gobj);\n/* 10F1E8 */ void ftDk_SpecialAirNLoop_IASA(HSD_GObj* gobj);\n/* 10F31C */ void ftDk_SpecialAirNCancel_IASA(HSD_GObj* gobj);\n/* 10F320 */ void ftDk_SpecialAirN_IASA(HSD_GObj* gobj);\n/* 10F324 */ void ftDk_SpecialAirNFull_IASA(HSD_GObj* gobj);\n/* 10F328 */ void ftDk_SpecialNStart_Phys(HSD_GObj* gobj);\n/* 10F348 */ void ftDk_SpecialNLoop_Phys(HSD_GObj* gobj);\n/* 10F368 */ void ftDk_SpecialNCancel_Phys(HSD_GObj* gobj);\n/* 10F388 */ void ftDk_SpecialN_Phys(HSD_GObj* gobj);\n/* 10F3A8 */ void ftDk_SpecialNFull_Phys(HSD_GObj* gobj);\n/* 10F3C8 */ void ftDk_SpecialAirNStart_Phys(HSD_GObj* gobj);\n/* 10F3E8 */ void ftDk_SpecialAirNLoop_Phys(HSD_GObj* gobj);\n/* 10F408 */ void ftDk_SpecialAirNCancel_Phys(HSD_GObj* gobj);\n/* 10F428 */ void ftDk_SpecialAirN_Phys(HSD_GObj* gobj);\n/* 10F448 */ void ftDk_SpecialAirNFull_Phys(HSD_GObj* gobj);\n/* 10F468 */ void ftDk_SpecialNStart_Coll(HSD_GObj* gobj);\n/* 10F50C */ void ftDk_SpecialNLoop_Coll(HSD_GObj* gobj);\n/* 10F5B0 */ void ftDk_SpecialNCancel_Coll(HSD_GObj* gobj);\n/* 10F654 */ void ftDk_SpecialN_Coll(HSD_GObj* gobj);\n/* 10F6F8 */ void ftDk_SpecialNFull_Coll(HSD_GObj* gobj);\n/* 10F79C */ void ftDk_SpecialAirNStart_Coll(HSD_GObj* gobj);\n/* 10F840 */ void ftDk_SpecialAirNLoop_Coll(HSD_GObj* gobj);\n/* 10F8E4 */ void ftDk_SpecialAirNCancel_Coll(HSD_GObj* gobj);\n/* 10F988 */ void ftDk_SpecialAirN_Coll(HSD_GObj* gobj);\n/* 10FA2C */ void ftDk_SpecialAirNFull_Coll(HSD_GObj* gobj);\n/* 10FAD0 */ void ftDk_SpecialN_DestroyAllEffects(HSD_GObj* gobj);\n/* 10FAF0 */ void ftDk_SpecialN_DestroyAllEffectsPlus(HSD_GObj* gobj);\n#define GALE01_10E1C4\n/* 10E1C4 */ void ftDk_SpecialS_Enter(HSD_GObj* gobj);\n/* 10E234 */ void ftDk_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 10E2BC */ void ftDk_SpecialS_Anim(HSD_GObj* gobj);\n/* 10E2F8 */ void ftDk_SpecialAirS_Anim(HSD_GObj* gobj);\n/* 10E334 */ void ftDk_SpecialS_IASA(HSD_GObj* gobj);\n/* 10E338 */ void ftDk_SpecialAirS_IASA(HSD_GObj* gobj);\n/* 10E33C */ void ftDk_SpecialS_Phys(HSD_GObj* gobj);\n/* 10E35C */ void ftDk_SpecialAirS_Phys(HSD_GObj* gobj);\n/* 10E3BC */ void ftDk_SpecialS_Coll(HSD_GObj* gobj);\n/* 10E428 */ void ftDk_SpecialAirS_Coll(HSD_GObj* gobj);\n#define MELEE_FT_CHARA_FTDRMARIO_FORWARD_H\nstatic MotionFlags const ftDr_MF_Appeal =\n    Ft_MF_KeepFastFall | Ft_MF_SkipModel | Ft_MF_SkipAnimVel | Ft_MF_Unk06;\n#define GALE01_149954\n/* 149954 */ void ftDr_AppealS_Anim(HSD_GObj* gobj);\n/* 149A6C */ void ftDr_AppealS_IASA(HSD_GObj* gobj);\n/* 149A8C */ void ftDr_AppealS_Phys(HSD_GObj* gobj);\n/* 149AAC */ void ftDr_AppealS_Coll(HSD_GObj* gobj);\n#define GALE01_14949C\n/* 14949C */ void ftDr_Init_OnDeath(HSD_GObj* gobj);\n/* 1494E4 */ void ftDr_Init_OnLoad(HSD_GObj* gobj);\n/* 149540 */ void ftDr_Init_80149540(HSD_GObj* gobj);\n/* 149560 */ void ftDr_Init_OnItemPickup(HSD_GObj* gobj, bool);\n/* 149640 */ void ftDr_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 149688 */ void ftDr_Init_OnItemVisible(HSD_GObj* gobj);\n/* 1496D0 */ void ftDr_Init_OnItemDrop(HSD_GObj* gobj, bool);\n/* 149724 */ void ftDr_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 149744 */ void ftDr_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 149788 */ void ftDr_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 1497CC */ void ftDr_Init_801497CC(HSD_GObj* gobj);\n/* 149844 */ bool ftDr_Init_80149844(HSD_GObj* gobj);\n/* 1498A0 */ void ftDr_Init_801498A0(HSD_GObj* gobj);\n/* 1498EC */ u32 ftDr_Init_801498EC(HSD_GObj* gobj);\n/* 149910 */ void ftDr_Init_80149910(HSD_GObj* gobj);\n/* 3D1498 */ extern MotionState ftDr_Init_MotionStateTable[ftMr_MS_SelfCount];\n/* 3D15D8 */ extern Fighter_CostumeStrings ftDr_Init_CostumeStrings[];\n/* 3D15E4 */ extern char ftDr_Init_DatFilename[];\n/* 3D1770 */ extern char ftDr_Init_AnimDatFilename[];\n/* 3D17FC */ extern Fighter_DemoStrings ftDr_Init_DemoMotionFilenames;\n/* 3D180C */ extern char ftDr_Init_DataName[];\n#define MELEE_FT_CHARA_FTDRMARIO_TYPES_H\ntypedef struct _ftDrMarioAttributes {\n    u8 pad_x0[4];\n    u32 x4;\n    u8 pad_x8[4];\n    u32 xC;\n    u8 pad_x10[4];\n    u32 x14;\n} ftDrMarioAttributes;\n#define GALE01_14EEF8\n#define MELEE_FT_CHARA_FTMARS_FORWARD_H\nstatic MotionFlags const ftMs_MF_Special =\n    Ft_MF_SkipModel | Ft_MF_KeepSfx | Ft_MF_SkipItemVis | Ft_MF_UnkUpdatePhys |\n    Ft_MF_FreezeState;\nstatic MotionFlags const ftMs_MF_SpecialN =\n    ftMs_MF_Special | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftMs_MF_SpecialS =\n    ftMs_MF_Special | Ft_MF_KeepGfx;\nstatic MotionFlags const ftMs_MF_SpecialHi =\n    ftMs_MF_Special | Ft_MF_KeepFastFall | Ft_MF_KeepGfx;\nstatic MotionFlags const ftMs_MF_SpecialLw =\n    ftMs_MF_Special | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftMs_MF_SpecialAirN =\n    ftMs_MF_Special | Ft_MF_KeepFastFall | Ft_MF_SkipParasol;\nstatic MotionFlags const ftMs_MF_SpecialS1 =\n    ftMs_MF_Special | Ft_MF_KeepGfx | Ft_MF_SkipParasol;\nstatic MotionFlags const ftMs_MF_SpecialAirHi =\n    ftMs_MF_SpecialHi | Ft_MF_SkipParasol;\nstatic MotionFlags const ftMs_MF_SpecialAirLw =\n    ftMs_MF_SpecialLw | Ft_MF_SkipParasol;\ntypedef enum ftMars_MotionState {\n    ftMs_MS_SpecialNStart = ftCo_MS_Count,\n    ftMs_MS_SpecialNLoop,\n    ftMs_MS_SpecialNEnd0,\n    ftMs_MS_SpecialNEnd1,\n    ftMs_MS_SpecialAirNStart,\n    ftMs_MS_SpecialAirNLoop,\n    ftMs_MS_SpecialAirNEnd0,\n    ftMs_MS_SpecialAirNEnd1,\n    ftMs_MS_SpecialS1,\n    ftMs_MS_SpecialS2Hi,\n    ftMs_MS_SpecialS2Lw,\n    ftMs_MS_SpecialS3Hi,\n    ftMs_MS_SpecialS3S,\n    ftMs_MS_SpecialS3Lw,\n    ftMs_MS_SpecialS4Hi,\n    ftMs_MS_SpecialS4S,\n    ftMs_MS_SpecialS4Lw,\n    ftMs_MS_SpecialAirS1,\n    ftMs_MS_SpecialAirS2Hi,\n    ftMs_MS_SpecialAirS2Lw,\n    ftMs_MS_SpecialAirS3Hi,\n    ftMs_MS_SpecialAirS3S,\n    ftMs_MS_SpecialAirS3Lw,\n    ftMs_MS_SpecialAirS4Hi,\n    ftMs_MS_SpecialAirS4S,\n    ftMs_MS_SpecialAirS4Lw,\n    ftMs_MS_SpecialHi,\n    ftMs_MS_SpecialAirHi,\n    ftMs_MS_SpecialLw,\n    ftMs_MS_SpecialLwHit,\n    ftMs_MS_SpecialAirLw,\n    ftMs_MS_SpecialAirLwHit,\n    ftMs_MS_Count,\n    ftMs_MS_SelfCount = ftMs_MS_Count - ftCo_MS_Count,\n} ftMars_MotionState;\ntypedef enum ftMs_Submotion {\n    ftMs_SM_SpecialNStart = ftCo_SM_Count,\n    ftMs_SM_SpecialNLoop,\n    ftMs_SM_SpecialNEnd0,\n    ftMs_SM_SpecialNEnd1,\n    ftMs_SM_SpecialAirNStart,\n    ftMs_SM_SpecialAirNLoop,\n    ftMs_SM_SpecialAirNEnd0,\n    ftMs_SM_SpecialAirNEnd1,\n    ftMs_SM_SpecialS1,\n    ftMs_SM_SpecialS2Hi,\n    ftMs_SM_SpecialS2Lw,\n    ftMs_SM_SpecialS3Hi,\n    ftMs_SM_SpecialS3S,\n    ftMs_SM_SpecialS3Lw,\n    ftMs_SM_SpecialS4Hi,\n    ftMs_SM_SpecialS4S,\n    ftMs_SM_SpecialS4Lw,\n    ftMs_SM_SpecialAirS1,\n    ftMs_SM_SpecialAirS2Hi,\n    ftMs_SM_SpecialAirS2Lw,\n    ftMs_SM_SpecialAirS3Hi,\n    ftMs_SM_SpecialAirS3S,\n    ftMs_SM_SpecialAirS3Lw,\n    ftMs_SM_SpecialAirS4Hi,\n    ftMs_SM_SpecialAirS4S,\n    ftMs_SM_SpecialAirS4Lw,\n    ftMs_SM_SpecialHi,\n    ftMs_SM_SpecialAirHi,\n    ftMs_SM_SpecialLw,\n    ftMs_SM_SpecialLwHit,\n    ftMs_SM_SpecialAirLw,\n    ftMs_SM_SpecialAirLwHit,\n    ftMs_SM_Count,\n    ftMs_SM_SelfCount = ftMs_SM_Count - ftCo_SM_Count,\n} ftMs_Submotion;\n/* 14EEF8 */ void ftFe_Init_OnDeath(HSD_GObj*);\n/* 14EF60 */ void ftFe_Init_OnItemPickup(HSD_GObj*, bool);\n/* 14F040 */ void ftFe_Init_OnItemInvisible(HSD_GObj*);\n/* 14F088 */ void ftFe_Init_OnItemVisible(HSD_GObj*);\n/* 14F0D0 */ void ftFe_Init_OnItemDrop(HSD_GObj*, bool);\n/* 14F124 */ void ftFe_Init_OnLoad(HSD_GObj*);\n/* 14F148 */ void ftFe_Init_LoadSpecialAttrs(HSD_GObj*);\n/* 14F168 */ void ftFe_Init_OnKnockbackEnter(HSD_GObj*);\n/* 14F1AC */ void ftFe_Init_OnKnockbackExit(HSD_GObj*);\n/* 3D2E80 */ extern MotionState ftFe_Init_MotionStateTable[ftMs_MS_SelfCount];\n/* 3D3280 */ extern Fighter_CostumeStrings ftFe_Init_CostumeStrings[];\n/* 3D328C */ extern char ftFe_Init_DatFilename[];\n/* 3D3410 */ extern char ftFe_Init_AnimDatFilename[];\n/* 3D3498 */ extern Fighter_DemoStrings ftFe_Init_DemoMotionFilenames;\n/* 3D34A8 */ extern char ftFe_Init_DataName[];\n#define GALE01_149ACC\n/* 149ACC */ void ftFc_Init_OnDeath(HSD_GObj*);\n/* 149B00 */ void ftFc_Init_OnItemPickup(HSD_GObj*, bool flag);\n/* 149BE0 */ void ftFc_Init_OnItemInvisible(HSD_GObj*);\n/* 149C28 */ void ftFc_Init_OnItemVisible(HSD_GObj*);\n/* 149C70 */ void ftFc_Init_OnItemDrop(HSD_GObj*, bool flag);\n/* 149CC4 */ void ftFc_Init_OnLoad(HSD_GObj*);\n/* 149D3C */ void ftFc_Init_LoadSpecialAttrs(HSD_GObj*);\n/* 149D5C */ void ftFc_Init_OnKnockbackEnter(HSD_GObj*);\n/* 149DC8 */ void ftFc_Init_OnKnockbackExit(HSD_GObj*);\n/* 3D1848 */ extern MotionState ftFc_Init_MotionStateTable[ftFx_MS_SelfCount];\n/* 3D1CA8 */ extern Fighter_CostumeStrings ftFc_Init_CostumeStrings[];\n/* 3D1CB4 */ extern char ftFc_Init_DatFilename[];\n/* 3D1DE8 */ extern char ftFc_Init_AnimDatFilename[];\n/* 3D1E64 */ extern Fighter_DemoStrings ftFc_Init_DemoMotionFilenames;\n/* 3D1E74 */ extern char ftFc_Init_DataName[];\n#define GALE01_0E5970\n/* 0E5970 */ bool ftFx_AppealS_CheckIfUsed(Fighter* fp);\n/* 0E59BC */ bool ftFx_AppealS_CheckInput(HSD_GObj* gobj);\n/* 0E5A90 */ void ftFx_AppealS_Enter(HSD_GObj* gobj);\n/* 0E5B18 */ void ftFx_AppealS_Anim(HSD_GObj* gobj);\n/* 0E5C38 */ void ftFx_AppealS_IASA(HSD_GObj* gobj);\n/* 0E5C3C */ void ftFx_AppealS_Phys(HSD_GObj* gobj);\n/* 0E5C5C */ void ftFx_AppealS_Coll(HSD_GObj* gobj);\n#define GALE01_0E5534\n/// @file\n/// @attention Symbols in this file are placed correctly.\n/// @defgroup melee_it_item item\n/// @{\n#define MELEE_IT_ITEM_H\nextern HSD_ObjAllocData itemAllocData;\nextern HSD_ObjAllocData unkAllocData1;\nextern HSD_ObjAllocData Item_804A0C38;\nextern HSD_ObjAllocUnk Item_804A0C64;\nextern HSD_ObjAllocUnk2 Item_804A0CCC;\nextern S32Vec3 Item_804A0E24;\n/// Checks if items are enabled\nbool Item_80266F3C(void);\n/// Check to load ItCo.dat/usd\nvoid Item_80266F70(void);\n/// ItCo prefunction with 0\nvoid Item_80266FA8(void);\n/// Init item struct?\nvoid Item_80266FCC(void);\n/// Remove Camera Box\nvoid Item_80267454(HSD_GObj* gobj);\n/// Setup Item JObj\nvoid Item_802680CC(HSD_GObj* gobj);\n/// Set item model scale\nvoid Item_8026849C(HSD_GObj* gobj);\n/// Item spawn prefunction - spawn airborne\nHSD_GObj* Item_80268B18(SpawnItem* spawnItem);\n/// Item spawn prefunction - spawn grounded\nvoid Item_80268B5C(SpawnItem* spawnItem);\n/// Item spawn prefunction - spawn grounded and toggle unknown true\nvoid Item_80268B9C(SpawnItem* spawnItem);\n/// Unk Item AObj-related function\nvoid Item_80268D34(HSD_GObj* gobj, struct ItemStateDesc* itemStateDesc);\n/// Advance item animation?\nvoid Item_80268DD4(HSD_GObj* gobj, float arg8);\n/// Copy item script\nvoid Item_80268E40(Item* item_data, struct ItemStateDesc* itemStateDesc);\n/// Item State Change\nvoid Item_80268E5C(HSD_GObj* gobj, enum_t msid, Item_StateChangeFlags flags);\n/// Advance item animation + script?\nvoid Item_802694CC(HSD_GObj* gobj);\n/// Item Think - Physics\nvoid Item_802697D4(HSD_GObj* gobj);\n/// Item Think - Collision\nvoid Item_80269978(HSD_GObj* gobj);\n/// Set damage taken\nvoid Item_80269CA0(Item* item_data, s32 damage);\n/// Remove Item from Player\nvoid Item_8026A848(HSD_GObj* gobj, HSD_GObj* fgobj);\n/// Destroy Item\nvoid Item_8026A8EC(HSD_GObj* gobj);\n/// Make Item Held\nvoid Item_8026AB54(HSD_GObj* gobj, HSD_GObj* owner_gobj, u8 part);\n/// Drop Item\nvoid Item_8026ABD8(HSD_GObj* gobj, Vec3* pos, float arg2);\n/// This is actually another Item Drop function\nvoid Item_8026AC74(HSD_GObj* gobj, Vec3* arg1, Vec3* arg2, float arg3);\n/// Throw Item\nvoid Item_8026AD20(HSD_GObj* gobj, Vec3* arg1, Vec3* arg2, float arg3);\n/// Make Item Airborne\nvoid Item_8026ADC0(HSD_GObj* gobj);\n/// Increment something\nuint Item_8026AE60(void);\n/// Play Item SFX\nvoid Item_8026AE84(Item* item_data, enum_t sfx, int pan, int volume);\n/// Play Item SFX 2\nvoid Item_8026AF0C(Item* item_data, enum_t sfx, int pan, int volume);\n/// Play Item SFX 3\nvoid Item_8026AFA0(Item* item_data, enum_t sfx, int pan, int volume);\n/// Stop Item SFX\nvoid Item_8026B034(Item* item_data);\n/// Stop Item SFX 2\nvoid Item_8026B074(Item* item_data);\n/// Check if item is grabbable\nbool Item_IsGrabbable(HSD_GObj* gobj);\n/// Initialize item coordinates?\nvoid Item_80267130(HSD_GObj* gobj, SpawnItem* spawnItem);\n/// Set Item Hold kind\nvoid Item_802674AC(SpawnItem* spawnItem);\nvoid Item_802675A8(HSD_GObj* gobj);\nvoid Item_802676F4(HSD_GObj* gobj);\nbool Item_8026784C(enum_t dropItem, int _);\n/// Store Item Pointers\nvoid Item_80267978(HSD_GObj* gobj);\nvoid ItUnkHoldKind(HSD_GObj* gobj);\nvoid HSD_JObjSetScaleItem(Item* it, HSD_JObj* jobj, Vec3* scl);\n/// Initialize item variables\nvoid Item_80267AA8(HSD_GObj* gobj, SpawnItem* spawnItem);\n/// Set up item render objects?\nvoid Item_8026814C(HSD_GObj* gobj);\n/// Initialize item bones\nbool Item_802682F0(HSD_GObj* gobj);\n/// Set up item dynamic bones\nvoid Item_80268560(HSD_GObj* gobj);\nvoid Item_802693E4(HSD_GObj* gobj);\n/// Item Think - Animation\nvoid Item_80269528(HSD_GObj* gobj);\n/// Item Think - Accessory + Camera Box\nvoid Item_80269A9C(HSD_GObj* gobj);\n/// Item Think - Yellow Bar Collision (cb_JumpedOn)\nvoid Item_80269B60(HSD_GObj* gobj);\n/// Item Think - Grab\nvoid Item_80269BE4(HSD_GObj* gobj);\n/// Item Think - Hit Collision Logic\nvoid Item_80269C5C(HSD_GObj* gobj);\n/// Item Think - Hit Collision\nvoid Item_8026A294(HSD_GObj* gobj);\n/// Item Think - Process Dynamic Bones\nvoid Item_8026A788(HSD_GObj* gobj);\n/// Item Think - Spawn\nvoid Item_8026A810(HSD_GObj* gobj);\n/// Clear Item Struct ?\nvoid lbl_8026AE10(void* user_data);\n/// Create Item\nHSD_GObj* Item_8026862C(SpawnItem* spawnItem);\n/// Adds #HSD_AObj instances to item model\nvoid Item_80268BE0(HSD_JObj* item_jobj, HSD_AnimJoint* anim_joint,\n                   HSD_MatAnimJoint* matanim_joint,\n                   HSD_ShapeAnimJoint* shapeanim_joint, Item* item_data);\n/// Item Think - Exit Hitlag Check\nvoid Item_8026A0A0(HSD_GObj* gobj);\n/// Item Think - Exit Hitlag Check 2\nvoid Item_8026A0FC(HSD_GObj* gobj);\n/// Item Think - Exit Hitlag\nvoid Item_8026A1E8(HSD_GObj* gobj);\n/// Item Think - Check for Blast Zones\nbool Item_802696CC(HSD_GObj* gobj);\n/// Set damage struct\nvoid Item_80269CC4(HSD_GObj* gobj);\n/// Item Think - Shield Collision\nbool Item_80269DC8(HSD_GObj* gobj);\n/// Item Think - On Reflect\nbool Item_80269F14(HSD_GObj* gobj);\n/// Item Think - Enter Hitlag\nvoid Item_8026A158(HSD_GObj* gobj);\nvoid func_8026A158_helper(HSD_GObj* atkCollGObj);\nvoid func_8026A1E8_inline(HSD_GObj* atkCollGObj);\nbool processCallback(HSD_GObjPredicate cb, HSD_GObj* gobj, Item* item_data);\nbool OnTakeDamageThink(HSD_GObj* gobj, Item* item_data);\nbool OnClankThink(HSD_GObj* gobj, Item* item_data);\nbool OnGiveDamageThink(HSD_GObj* gobj, Item* item_data);\nvoid EnterHitlagThink(HSD_GObj* gobj, Item* item_data);\nvoid checkHitLag(float min_value, Item* item_data);\nvoid DestroyItemInline(HSD_GObj* gobj, Item* item_data);\nvoid ItemSwitch(HSD_GObj* gobj);\nvoid RunCallback(HSD_GObj* gobj, HSD_GObjEvent arg1);\nvoid func_8026A8EC_inline1(HSD_GObj* gobj);\nvoid func_8026A8EC_inline2(HSD_GObj* gobj);\nvoid func_8026A8EC_inline3(HSD_GObj* gobj);\nvoid foobar(HSD_GObj* gobj);\nvoid foobar2(HSD_GObj* gobj);\nvoid foobar3(HSD_GObj* gobj);\n/// Stop All Item SFX\nvoid Item_8026B0B4(HSD_GObj* gobj);\nvoid Item_OnUserDataRemove(any_t user_data);\nvoid HSD_JObjSetFacingDirItem(HSD_JObj* jobj, Item* ip);\n#define GET_ITEM(gobj) ((Item*) HSD_GObjGetUserData(gobj))\n/// @deprecated Use #GET_ITEM instead.\nstatic inline Item* GetItemData(HSD_GObj* gobj)\n{\n    Item* item_data = gobj->user_data;\n    return item_data;\n}\n/// @}\n#define _lbvector_h_\nextern inline float sqrtf_accurate(float x);\nstatic float lbVector_Len(Vec3* vec);\nstatic float lbVector_Len_xy(Vec3* vec);\nfloat lbVector_Normalize(Vec3* vec);\nfloat lbVector_NormalizeXY(Vec3* a);\nVec3* lbVector_Add(Vec3* a, Vec3* b);\nVec3* lbVector_Add_xy(Vec3* a, Vec3* b);\nVec3* lbVector_Sub(Vec3* a, Vec3* b);\nVec3* lbVector_Diff(Vec3* a, Vec3* b, Vec3* result);\nVec3* lbVector_CrossprodNormalized(Vec3* a, Vec3* b, Vec3* result);\nfloat lbVector_Angle(Vec3* a, Vec3* b);\nfloat lbVector_AngleXY(Vec3* a, Vec3* b);\nstatic float sin(float angle);\nstatic float cos(float angle);\nvoid lbVector_RotateAboutUnitAxis(Vec3* v, Vec3* axis, float angle);\nvoid lbVector_Rotate(Vec3* v, int axis, float angle);\nfloat dummy(void);\nvoid lbVector_Mirror(Vec3* a, Vec3* b);\nfloat lbVector_CosAngle(Vec3* a, Vec3* b);\nVec3* lbVector_Lerp(Vec3* a, Vec3* b, Vec3* result, float f);\nVec3* lbVector_8000DE38(Mtx m, Vec3* v, float c);\nVec3* lbVector_EulerAnglesFromONB(Vec3* result_angles, Vec3* a, Vec3* b,\n                                  Vec3* c);\nVec3* lbVector_EulerAnglesFromPartialONB(Vec3* result_angles, Vec3* a,\n                                         Vec3* c);\nVec3* lbVector_ApplyEulerRotation(Vec3* v, Vec3* angles);\nfloat lbVector_sqrtf_accurate(float x);\nVec3* lbVector_WorldToScreen(HSD_CObj* cobj, const Vec3* pos3d,\n                             Vec3* screenCoords, int d);\nvoid lbVector_CreateEulerMatrix(Mtx m, Vec3* angles);\nfloat lbVector_8000E838(Vec3* a, Vec3* b, Vec3* c, Vec3* d);\n/* 0E5534 */ bool ftFx_Init_800E5534(HSD_GObj* gobj);\n/* 0E5554 */ void ftFx_Init_OnDeath(HSD_GObj* gobj);\n/* 0E5588 */ void ftFx_Init_800E5588(HSD_GObj* gobj);\n/* 0E55A8 */ void ftFx_Init_OnItemPickup(HSD_GObj* gobj, bool flag);\n/* 0E5688 */ void ftFx_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 0E56D0 */ void ftFx_Init_OnItemVisible(HSD_GObj* gobj);\n/* 0E5718 */ void ftFx_Init_OnItemDrop(HSD_GObj* gobj, bool flag);\n/* 0E576C */ void ftFx_Init_OnLoadForFalco(Fighter* fp);\n/* 0E57AC */ void ftFx_Init_OnLoad(HSD_GObj* gobj);\n/* 0E5858 */ void ftFx_Init_LoadSpecialAttrs(HSD_GObj*);\n/* 0E5898 */ void ftFx_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 0E5904 */ void ftFx_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 3C7788 */ extern MotionState ftFx_Init_MotionStateTable[ftFx_MS_SelfCount];\n/* 3C7BE8 */ extern char ftFx_Init_DatFilename[];\n/* 3C7BF4 */ extern char ftFx_Init_DataName[];\n/* 3C7D10 */ extern char ftFx_Init_AnimDatFilename[];\n/* 3C7D8C */ extern Fighter_DemoStrings ftFx_Init_DemoMotionFilenames;\n/* 3C7D9C */ extern Fighter_CostumeStrings ftFx_Init_CostumeStrings[];\n#define GALE01_0E7100\n/* 0E7100 */ void ftFx_SpecialHi_CreateLaunchGFX(HSD_GObj* gobj);\n/* 0E719C */ void ftFx_SpecialHi_CreateChargeGFX(HSD_GObj* gobj);\n/* 0E7238 */ void ftFx_SpecialHi_Enter(HSD_GObj* gobj);\n/* 0E72C4 */ void ftFx_SpecialAirHiStart_Enter(HSD_GObj* gobj);\n/* 0E7354 */ void ftFx_SpecialHiHold_Anim(HSD_GObj* gobj);\n/* 0E73B4 */ void ftFx_SpecialHiHoldAir_Anim(HSD_GObj* gobj);\n/* 0E7414 */ void ftFx_SpecialHiHold_IASA(HSD_GObj* gobj);\n/* 0E7418 */ void ftFx_SpecialHiHoldAir_IASA(HSD_GObj* gobj);\n/* 0E741C */ void ftFx_SpecialHiHold_Phys(HSD_GObj* gobj);\n/* 0E743C */ void ftFx_SpecialHiHoldAir_Phys(HSD_GObj* gobj);\n/* 0E74A8 */ void ftFx_SpecialHiHold_Coll(HSD_GObj* gobj);\n/* 0E74E4 */ void ftFx_SpecialHiHoldAir_Coll(HSD_GObj* gobj);\n/* 0E7554 */ void ftFx_SpecialHiHold_GroundToAir(HSD_GObj* gobj);\n/* 0E75C0 */ void ftFx_SpecialHiHoldAir_AirToGround(HSD_GObj* gobj);\n/* 0E7634 */ void ftFx_SpecialHi_Anim(HSD_GObj* gobj);\n/* 0E7684 */ void ftFx_SpecialAirHi_Anim(HSD_GObj* gobj);\n/* 0E76D4 */ void ftFx_SpecialHi_IASA(HSD_GObj* gobj);\n/* 0E76D8 */ void ftFx_SpecialAirHi_IASA(HSD_GObj* gobj);\n/* 0E76DC */ void ftFx_SpecialHi_Phys(HSD_GObj* gobj);\n/* 0E7758 */ void ftFx_SpecialAirHi_Phys(HSD_GObj* gobj);\n/* 0E7800 */ void ftFx_SpecialHi_Coll(HSD_GObj* gobj);\n/* 0E78B4 */ void ftFx_SpecialAirHi_Coll(HSD_GObj* gobj);\n/* 0E7A78 */ void ftFx_SpecialHi_GroundToAir(HSD_GObj* gobj);\n/* 0E7AF4 */ void ftFx_SpecialAirHi_AirToGround(HSD_GObj* gobj);\n/* 0E7C98 */ void ftFx_SpecialAirHi_Enter(HSD_GObj* gobj);\n/* 0E7E3C */ void ftFx_SpecialHiLanding_Anim(HSD_GObj* gobj);\n/* 0E7E78 */ void ftFx_SpecialHiFall_Anim(HSD_GObj* gobj);\n/* 0E7ED8 */ void ftFx_SpecialHiLanding_IASA(HSD_GObj* gobj);\n/* 0E7EDC */ void ftFx_SpecialHiFall_IASA(HSD_GObj* gobj);\n/* 0E7EE0 */ void ftFx_SpecialHiLanding_Phys(HSD_GObj* gobj);\n/* 0E7F20 */ void ftFx_SpecialHiFall_Phys(HSD_GObj* gobj);\n/* 0E7F40 */ void ftFx_SpecialHiLanding_Coll(HSD_GObj* gobj);\n/* 0E7FA0 */ void ftFx_SpecialHiFall_Coll(HSD_GObj* gobj);\n/* 0E7FF0 */ void ftFx_SpecialHiFall_Enter(HSD_GObj* gobj);\n/* 0E8048 */ void ftFx_SpecialHiFall_AirToGround(HSD_GObj* gobj);\n/* 0E80C0 */ void ftFx_SpecialHiLanding_GroundToAir(HSD_GObj* gobj);\n/* 0E8124 */ void ftFx_SpecialHiBound_Anim(HSD_GObj* gobj);\n/* 0E81FC */ void ftFx_SpecialHiBound_IASA(HSD_GObj* gobj);\n/* 0E8200 */ void ftFx_SpecialHiBound_Phys(HSD_GObj* gobj);\n/* 0E824C */ void ftFx_SpecialHiBound_Coll(HSD_GObj* gobj);\n/* 0E82E4 */ void ftFx_SpecialHiBound_Enter(HSD_GObj* gobj);\n#define GALE01_0E83E0\n/* 0E83E0 */ void ftFx_SpecialLw_CreateLoopGFX(HSD_GObj* gobj);\n/* 0E845C */ void ftFx_SpecialLw_CreateStartGFX(HSD_GObj* gobj);\n/* 0E84D8 */ void ftFx_SpecialLw_CreateReflectGFX(HSD_GObj* gobj);\n/* 0E8560 */ void ftFx_SpecialLw_Enter(HSD_GObj* gobj);\n/* 0E85EC */ void ftFx_SpecialAirLw_Enter(HSD_GObj* gobj);\n/* 0E8694 */ void ftFx_SpecialLwStart_Anim(HSD_GObj* gobj);\n/* 0E8720 */ void ftFx_SpecialAirLwStart_Anim(HSD_GObj* gobj);\n/* 0E87AC */ void ftFx_SpecialLwStart_IASA(HSD_GObj* gobj);\n/* 0E87D0 */ void ftFx_SpecialAirLwStart_IASA(HSD_GObj* gobj);\n/* 0E87D4 */ bool ftFx_SpecialLwStart_CheckPass(HSD_GObj* gobj);\n/* 0E881C */ void ftFx_SpecialLwStart_Pass(HSD_GObj* gobj);\n/* 0E8864 */ void ftFx_SpecialLwStart_Phys(HSD_GObj* gobj);\n/* 0E8884 */ void ftFx_SpecialAirLwStart_Phys(HSD_GObj* gobj);\n/* 0E88E4 */ void ftFx_SpecialLwStart_Coll(HSD_GObj* gobj);\n/* 0E8920 */ void ftFx_SpecialAirLwStart_Coll(HSD_GObj* gobj);\n/* 0E895C */ void ftFx_SpecialLwStart_GroundToAir(HSD_GObj* gobj);\n/* 0E89BC */ void ftFx_SpecialAirLwStart_AirToGround(HSD_GObj* gobj);\n/* 0E8A24 */ void ftFx_SpecialLwLoop_Anim(HSD_GObj* gobj);\n/* 0E8A9C */ void ftFx_SpecialAirLwLoop_Anim(HSD_GObj* gobj);\n/* 0E8B14 */ void ftFx_SpecialLwLoop_IASA(HSD_GObj* gobj);\n/* 0E8B64 */ void ftFx_SpecialAirLwLoop_IASA(HSD_GObj* gobj);\n/* 0E8C34 */ void ftFx_SpecialLwLoop_Phys(HSD_GObj* gobj);\n/* 0E8C68 */ void ftFx_SpecialAirLwLoop_Phys(HSD_GObj* gobj);\n/* 0E8CDC */ void ftFx_SpecialLwLoop_Coll(HSD_GObj* gobj);\n/* 0E8D18 */ void ftFx_SpecialAirLwLoop_Coll(HSD_GObj* gobj);\n/* 0E8FDC */ void ftFx_SpecialLwTurn_Anim(HSD_GObj* gobj);\n/* 0E90EC */ void ftFx_SpecialAirLwTurn_Anim(HSD_GObj* gobj);\n/* 0E91FC */ void ftFx_SpecialLwTurn_IASA(HSD_GObj* gobj);\n/* 0E9200 */ void ftFx_SpecialAirLwTurn_IASA(HSD_GObj* gobj);\n/* 0E9204 */ void ftFx_SpecialLwTurn_Phys(HSD_GObj* gobj);\n/* 0E9238 */ void ftFx_SpecialAirLwTurn_Phys(HSD_GObj* gobj);\n/* 0E92AC */ void ftFx_SpecialLwTurn_Coll(HSD_GObj* gobj);\n/* 0E92E8 */ void ftFx_SpecialAirLwTurn_Coll(HSD_GObj* gobj);\n/* 0E9324 */ void ftFx_SpecialLwTurn_GroundToAir(HSD_GObj* gobj);\n/* 0E93A4 */ void ftFx_SpecialAirLwTurn_GroundToAir(HSD_GObj* gobj);\n/* 0E942C */ bool ftFx_SpecialLwTurn_Check(HSD_GObj* gobj);\n/* 0E9564 */ bool ftFx_SpecialLwHit_Check(HSD_GObj* gobj);\n/* 0E965C */ void ftFx_SpecialLwHit_Anim(HSD_GObj* gobj);\n/* 0E97B4 */ void ftFx_SpecialAirLwHit_Anim(HSD_GObj* gobj);\n/* 0E9844 */ void ftFx_SpecialLwHit_IASA(HSD_GObj* gobj);\n/* 0E9848 */ void ftFx_SpecialAirLwHit_IASA(HSD_GObj* gobj);\n/* 0E984C */ void ftFx_SpecialLwHit_Phys(HSD_GObj* gobj);\n/* 0E9880 */ void ftFx_SpecialAirLwHit_Phys(HSD_GObj* gobj);\n/* 0E98F4 */ void ftFx_SpecialLwHit_Coll(HSD_GObj* gobj);\n/* 0E9930 */ void ftFx_SpecialAirLwHit_Coll(HSD_GObj* gobj);\n/* 0E996C */ void ftFx_SpecialLwHit_GroundToAir(HSD_GObj* gobj);\n/* 0E99D4 */ void ftFx_SpecialAirLwHit_AirToGround(HSD_GObj* gobj);\n/* 0E9A44 */ void ftFx_SpecialLwHit_SetCall(HSD_GObj* gobj);\n/* 0E9A68 */ void ftFx_SpecialLwHit_Enter(HSD_GObj* gobj);\n/* 0E9B40 */ void ftFx_SpecialLwEnd_Anim(HSD_GObj* gobj);\n/* 0E9B84 */ void ftFx_SpecialAirLwEnd_Anim(HSD_GObj* gobj);\n/* 0E9BC8 */ void ftFx_SpecialLwEnd_IASA(HSD_GObj* gobj);\n/* 0E9BCC */ void ftFx_SpecialAirLwEnd_IASA(HSD_GObj* gobj);\n/* 0E9BD0 */ void ftFx_SpecialLwEnd_Phys(HSD_GObj* gobj);\n/* 0E9BF0 */ void ftFx_SpecialAirLwEnd_Phys(HSD_GObj* gobj);\n/* 0E9C50 */ void ftFx_SpecialLwEnd_Coll(HSD_GObj* gobj);\n/* 0E9C8C */ void ftFx_SpecialAirLwEnd_Coll(HSD_GObj* gobj);\n/* 0E9CC8 */ void ftFx_SpecialLwEnd_GroundToAir(HSD_GObj* gobj);\n/* 0E9D24 */ void ftFx_SpecialAirLwEnd_AirToGround(HSD_GObj* gobj);\n/* 0E9D88 */ void ftFx_SpecialLwEnd_Enter(HSD_GObj* gobj);\n/* 0E9DC0 */ void ftFx_SpecialAirLwEnd_Enter(HSD_GObj* gobj);\n#define MELEE_FT_CHARA_FTFOX_FTFOX_SPECIALN_H\n/* 0E5CB0 */ void ftFx_SpecialN_FtGetHoldJoint(HSD_GObj* gobj, Vec3* pos);\n/* 0E5D20 */ void ftFx_SpecialN_ItGetHoldJoint(HSD_GObj* gobj, Vec3* pos);\n/* 0E5D90 */ void ftFx_SpecialN_OnChangeAction(HSD_GObj* gobj);\n/* 0E5DC4 */ bool ftFx_SpecialN_CheckRemoveBlaster(HSD_GObj* gobj);\n/* 0E5DE4 */ s32 ftFx_SpecialN_GetBlasterAction(HSD_GObj* gobj);\n/* 0E5E38 */ bool ftFx_SpecialN_CheckBlasterAction(HSD_GObj* gobj);\n/* 0E5E90 */ void ftFx_SpecialN_ClearBlaster(HSD_GObj* gobj);\n/* 0E5EBC */ void ftFx_SpecialN_RemoveBlaster(HSD_GObj* gobj);\n/* 0E5F28 */ void ftFx_SpecialN_CreateBlasterShot(HSD_GObj* gobj);\n/* 0E608C */ void ftFx_SpecialN_Enter(HSD_GObj* gobj);\n/* 0E61A8 */ void ftFx_SpecialAirN_Enter(HSD_GObj* gobj);\n/* 0E62A4 */ void ftFx_SpecialNStart_Anim(HSD_GObj* gobj);\n/* 0E6368 */ void ftFx_SpecialNLoop_Anim(HSD_GObj* gobj);\n/* 0E65BC */ void ftFx_SpecialNEnd_Anim(HSD_GObj* gobj);\n/* 0E667C */ void ftFx_SpecialAirNStart_Anim(HSD_GObj* gobj);\n/* 0E6740 */ void ftFx_SpecialAirNLoop_Anim(HSD_GObj* gobj);\n/* 0E69BC */ void ftFx_SpecialAirNEnd_Anim(HSD_GObj* gobj);\n/* 0E6AB4 */ void ftFx_SpecialNStart_IASA(HSD_GObj* gobj);\n/* 0E6ADC */ void ftFx_SpecialNLoop_IASA(HSD_GObj* gobj);\n/* 0E6B04 */ void ftFx_SpecialNEnd_IASA(HSD_GObj* gobj);\n/* 0E6B08 */ void ftFx_SpecialAirNStart_IASA(HSD_GObj* gobj);\n/* 0E6B30 */ void ftFx_SpecialAirNLoop_IASA(HSD_GObj* gobj);\n/* 0E6B58 */ void ftFx_SpecialAirNEnd_IASA(HSD_GObj* gobj);\n/* 0E6B5C */ void ftFx_SpecialNStart_Phys(HSD_GObj* gobj);\n/* 0E6B7C */ void ftFx_SpecialNLoop_Phys(HSD_GObj* gobj);\n/* 0E6B9C */ void ftFx_SpecialNEnd_Phys(HSD_GObj* gobj);\n/* 0E6BBC */ void ftFx_SpecialAirNStart_Phys(HSD_GObj* gobj);\n/* 0E6BDC */ void ftFx_SpecialAirNLoop_Phys(HSD_GObj* gobj);\n/* 0E6BFC */ void ftFx_SpecialAirNEnd_Phys(HSD_GObj* gobj);\n/* 0E6C1C */ void ftFx_SpecialNStart_Coll(HSD_GObj* gobj);\n/* 0E6C3C */ void ftFx_SpecialNLoop_Coll(HSD_GObj* gobj);\n/* 0E6C5C */ void ftFx_SpecialNEnd_Coll(HSD_GObj* gobj);\n/* 0E6C7C */ void ftFx_SpecialAirNStart_Coll(HSD_GObj* gobj);\n/* 0E6C9C */ void ftFx_SpecialAirNLoop_Coll(HSD_GObj* gobj);\n/* 0E6CBC */ void ftFx_SpecialAirNEnd_Coll(HSD_GObj* gobj);\n/* 0E6CDC */ void ftFx_Throw_Anim(HSD_GObj* gobj);\n#define GALE01_0E9DF8\n/* 0E9DF8 */ void ftFx_SpecialS_CreateGFX(HSD_GObj* gobj);\n/* 0E9E78 */ bool ftFx_SpecialS_CheckGhostRemove(HSD_GObj* gobj);\n/* 0E9EA0 */ s32 ftFx_SpecialS_GetCmdVar2(HSD_GObj* gobj);\n/* 0E9EAC */ void ftFx_SpecialS_CopyGhostPosIndexed(HSD_GObj* gobj, s32 index,\n                                                    Vec3* ghostPos);\n/* 0E9ED4 */ f32 ftFx_SpecialS_ReturnFloatVarIndexed(HSD_GObj* gobj,\n                                                     s32 index);\n/* 0E9EE8 */ void ftFx_SpecialSStart_Enter(HSD_GObj* gobj);\n/* 0E9F6C */ void ftFx_SpecialAirSStart_Enter(HSD_GObj* gobj);\n/* 0EA004 */ void ftFx_SpecialSStart_Anim(HSD_GObj* gobj);\n/* 0EA040 */ void ftFx_SpecialAirSStart_Anim(HSD_GObj* gobj);\n/* 0EA07C */ void ftFx_SpecialSStart_IASA(HSD_GObj* gobj);\n/* 0EA080 */ void ftFx_SpecialAirSStart_IASA(HSD_GObj* gobj);\n/* 0EA084 */ void ftFx_SpecialSStart_Phys(HSD_GObj* gobj);\n/* 0EA0BC */ void ftFx_SpecialAirSStart_Phys(HSD_GObj* gobj);\n/* 0EA128 */ void ftFx_SpecialSStart_Coll(HSD_GObj* gobj);\n/* 0EA164 */ void ftFx_SpecialAirSStart_Coll(HSD_GObj* gobj);\n/* 0EA1D4 */ void ftFx_SpecialSStart_GroundToAir(HSD_GObj* gobj);\n/* 0EA234 */ void ftFx_SpecialAirSStart_AirToGround(HSD_GObj* gobj);\n/* 0EA294 */ void ftFx_SpecialS_Anim(HSD_GObj* gobj);\n/* 0EA344 */ void ftFx_SpecialAirS_Anim(HSD_GObj* gobj);\n/* 0EA3F4 */ void ftFx_SpecialS_IASA(HSD_GObj* gobj);\n/* 0EA438 */ void ftFx_SpecialAirS_IASA(HSD_GObj* gobj);\n/* 0EA47C */ void ftFx_SpecialS_Phys(HSD_GObj* gobj);\n/* 0EA534 */ void ftFx_SpecialAirS_Phys(HSD_GObj* gobj);\n/* 0EA5EC */ void ftFx_SpecialS_Coll(HSD_GObj* gobj);\n/* 0EA628 */ void ftFx_SpecialAirS_Coll(HSD_GObj* gobj);\n/* 0EA698 */ void ftFx_SpecialS_GroundToAir(HSD_GObj* gobj);\n/* 0EA700 */ void ftFx_SpecialAirS_AirToGround(HSD_GObj* gobj);\n/* 0EA768 */ void ftFx_SpecialS_Enter(HSD_GObj* gobj);\n/* 0EA838 */ void ftFx_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 0EA908 */ void ftFx_SpecialSEnd_Anim(HSD_GObj* gobj);\n/* 0EA944 */ void ftFx_SpecialAirSEnd_Anim(HSD_GObj* gobj);\n/* 0EA9A4 */ void ftFx_SpecialSEnd_IASA(HSD_GObj* gobj);\n/* 0EA9A8 */ void ftFx_SpecialAirSEnd_IASA(HSD_GObj* gobj);\n/* 0EA9AC */ void ftFx_SpecialSEnd_Phys(HSD_GObj* gobj);\n/* 0EAA8C */ void ftFx_SpecialAirSEnd_Phys(HSD_GObj* gobj);\n/* 0EAB90 */ void ftFx_SpecialSEnd_Coll(HSD_GObj* gobj);\n/* 0EABCC */ void ftFx_SpecialAirSEnd_Coll(HSD_GObj* gobj);\n/* 0EAC50 */ void ftFx_SpecialSEnd_Enter(HSD_GObj* gobj);\n/* 0EACD8 */ void ftFx_SpecialAirSEnd_Enter(HSD_GObj* gobj);\n#define MELEE_FT_CHARA_FTGAMEWATCH_FORWARD_H\nstatic MotionFlags const ftGw_MF_Base =\n    Ft_MF_SkipItemVis | Ft_MF_FreezeState;\nstatic MotionFlags const ftGw_MF_Landing =\n    Ft_MF_KeepColAnimHitStatus | Ft_MF_SkipHit | Ft_MF_KeepSfx |\n    Ft_MF_SkipParasol;\nstatic MotionFlags const ftGw_MF_LandingAirB =\n    ftGw_MF_Landing | Ft_MF_KeepGfx;\nstatic MotionFlags const ftGw_MF_LandingAirHi =\n    ftGw_MF_LandingAirB | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftGw_MF_Attack =\n    ftGw_MF_Base | Ft_MF_KeepSfx;\nstatic MotionFlags const ftGw_MF_AttackLw3 =\n    ftGw_MF_Attack | Ft_MF_SkipHit;\nstatic MotionFlags const ftGw_MF_AttackAirN =\n    ftGw_MF_Attack | ftGw_MF_Landing;\nstatic MotionFlags const ftGw_MF_AttackAirB =\n    ftGw_MF_AttackAirN | Ft_MF_KeepGfx;\nstatic MotionFlags const ftGw_MF_AttackAirHi =\n    ftGw_MF_AttackAirB | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftGw_MF_AttackS4 =\n    ftGw_MF_AttackLw3 | Ft_MF_KeepFastFall | Ft_MF_SkipRumble;\nstatic MotionFlags const ftGw_MF_Attack11 =\n    ftGw_MF_Attack | Ft_MF_KeepFastFall | Ft_MF_Unk19;\nstatic MotionFlags const ftGw_MF_Attack100 =\n    ftGw_MF_Attack | Ft_MF_KeepColAnimHitStatus | Ft_MF_Unk19;\nstatic MotionFlags const ftGw_MF_Special =\n    ftGw_MF_Base | Ft_MF_SkipModel | Ft_MF_UnkUpdatePhys;\nstatic MotionFlags const ftGw_MF_SpecialS =\n    ftGw_MF_Special | Ft_MF_KeepGfx;\nstatic MotionFlags const ftGw_MF_SpecialHi =\n    ftGw_MF_Special | Ft_MF_KeepFastFall | Ft_MF_KeepGfx;\nstatic MotionFlags const ftGw_MF_SpecialLwCatch =\n    ftGw_MF_Special | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftGw_MF_SpecialN =\n    ftGw_MF_Special | Ft_MF_KeepFastFall | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftGw_MF_SpecialAirS =\n    ftGw_MF_SpecialS | Ft_MF_SkipParasol;\nstatic MotionFlags const ftGw_MF_SpecialAirHi =\n    ftGw_MF_SpecialHi | Ft_MF_SkipParasol;\nstatic MotionFlags const ftGw_MF_SpecialAirLwCatch =\n    ftGw_MF_SpecialLwCatch | Ft_MF_SkipParasol;\nstatic MotionFlags const ftGw_MF_SpecialAirN =\n    ftGw_MF_SpecialN | Ft_MF_SkipParasol;\nstatic MotionFlags const ftGw_MF_SpecialLw =\n    ftGw_MF_SpecialLwCatch | Ft_MF_Unk19;\nstatic MotionFlags const ftGw_MF_SpecialAirLw =\n    ftGw_MF_SpecialLw | Ft_MF_SkipParasol;\n// Mr. Game & Watch Motion State IDs\ntypedef enum ftGameWatch_MotionState {\n    ftGw_MS_Attack11 = ftCo_MS_Count,\n    ftGw_MS_Attack100Start,\n    ftGw_MS_Attack100Loop,\n    ftGw_MS_Attack100End,\n    ftGw_MS_AttackLw3,\n    ftGw_MS_AttackS4,\n    ftGw_MS_AttackAirN,\n    ftGw_MS_AttackAirB,\n    ftGw_MS_AttackAirHi,\n    ftGw_MS_LandingAirN,\n    ftGw_MS_LandingAirB,\n    ftGw_MS_LandingAirHi,\n    ftGw_MS_SpecialN,\n    ftGw_MS_SpecialAirN,\n    ftGw_MS_SpecialS1,\n    ftGw_MS_SpecialS2,\n    ftGw_MS_SpecialS3,\n    ftGw_MS_SpecialS4,\n    ftGw_MS_SpecialS5,\n    ftGw_MS_SpecialS6,\n    ftGw_MS_SpecialS7,\n    ftGw_MS_SpecialS8,\n    ftGw_MS_SpecialS9,\n    ftGw_MS_SpecialAirS1,\n    ftGw_MS_SpecialAirS2,\n    ftGw_MS_SpecialAirS3,\n    ftGw_MS_SpecialAirS4,\n    ftGw_MS_SpecialAirS5,\n    ftGw_MS_SpecialAirS6,\n    ftGw_MS_SpecialAirS7,\n    ftGw_MS_SpecialAirS8,\n    ftGw_MS_SpecialAirS9,\n    ftGw_MS_SpecialHi,\n    ftGw_MS_SpecialAirHi,\n    ftGw_MS_SpecialLw,\n    ftGw_MS_SpecialLwCatch,\n    ftGw_MS_SpecialLwShoot,\n    ftGw_MS_SpecialAirLw,\n    ftGw_MS_SpecialAirLwCatch,\n    ftGw_MS_SpecialAirLwShoot,\n    ftGw_MS_Count,\n    ftGw_MS_SelfCount = ftGw_MS_Count - ftCo_MS_Count,\n} ftGameWatch_MotionState;\ntypedef enum ftGw_Submotion {\n    ftGw_SM_SpecialN = ftCo_SM_Count,\n    ftGw_SM_SpecialAirN,\n    ftGw_SM_SpecialS1,\n    ftGw_SM_SpecialS2,\n    ftGw_SM_SpecialS3,\n    ftGw_SM_SpecialS4,\n    ftGw_SM_SpecialS5,\n    ftGw_SM_SpecialS6,\n    ftGw_SM_SpecialS7,\n    ftGw_SM_SpecialS8,\n    ftGw_SM_SpecialS9,\n    ftGw_SM_SpecialAirS1,\n    ftGw_SM_SpecialAirS2,\n    ftGw_SM_SpecialAirS3,\n    ftGw_SM_SpecialAirS4,\n    ftGw_SM_SpecialAirS5,\n    ftGw_SM_SpecialAirS6,\n    ftGw_SM_SpecialAirS7,\n    ftGw_SM_SpecialAirS8,\n    ftGw_SM_SpecialAirS9,\n    ftGw_SM_SpecialHi,\n    ftGw_SM_SpecialAirHi,\n    ftGw_SM_SpecialLw,\n    ftGw_SM_SpecialLwCatch,\n    ftGw_SM_SpecialLwShoot,\n    ftGw_SM_SpecialAirLw,\n    ftGw_SM_SpecialAirLwCatch,\n    ftGw_SM_SpecialAirLwShoot,\n    ftGw_SM_Count,\n    ftGw_SM_SelfCount = ftGw_SM_Count - ftCo_SM_Count,\n} ftGw_Submotion;\ntypedef enum ftGameWatch_PanicLevel {\n    ftGw_Panic_Empty,\n    ftGw_Panic_Low,\n    ftGw_Panic_Mid,\n    ftGw_Panic_Full,\n} ftGameWatch_PanicLevel;\n/// @file\n/// Neutral Attack - Greenhouse (Attack100Start/Loop/End)\n#define GALE01_14C1E8\n/* 14C1E8 */ void ftGw_Attack100Start_Enter(HSD_GObj* gobj);\n/* 14C224 */ void ftGw_Attack100Start_Anim(HSD_GObj* gobj);\n/* 14C260 */ void ftGw_Attack100Start_IASA(HSD_GObj* gobj);\n/* 14C264 */ void ftGw_Attack100Start_Phys(HSD_GObj* gobj);\n/* 14C284 */ void ftGw_Attack100Start_Coll(HSD_GObj* gobj);\n/* 14C2B8 */ void ftGw_Attack100Loop_Enter(HSD_GObj* gobj);\n/* 14C308 */ void ftGw_Attack100Loop_Anim(HSD_GObj* gobj);\n/* 14C330 */ void ftGw_Attack100Loop_IASA(HSD_GObj* gobj);\n/* 14C350 */ void ftGw_Attack100Loop_Phys(HSD_GObj* gobj);\n/* 14C370 */ void ftGw_Attack100Loop_Coll(HSD_GObj* gobj);\n/* 14C3A4 */ void ftGw_Attack100End_Enter(HSD_GObj* gobj);\n/* 14C3F4 */ void ftGw_Attack100End_Anim(HSD_GObj* gobj);\n/* 14C414 */ void ftGw_Attack100End_IASA(HSD_GObj* gobj);\n/* 14C418 */ void ftGw_Attack100End_Phys(HSD_GObj* gobj);\n/* 14C438 */ void ftGw_Attack100End_Coll(HSD_GObj* gobj);\n/// @file\n/// Neutral Attack - Greenhouse (Attack11)\n#define GALE01_14BDB0\n/* 14BDB0 */ void ftGw_Attack11_ItemGreenhouseSetup(HSD_GObj* gobj);\n/* 14BE84 */ void ftGw_Attack11_DecideAction(HSD_GObj* gobj);\n/* 14BF48 */ void ftGw_Attack11_ItemGreenhouseSetFlag(HSD_GObj* gobj);\n/* 14BF7C */ void ftGw_Attack11_ItemGreenhouseRemove(HSD_GObj* gobj);\n/* 14BFD4 */ void ftGw_Attack11_ItemGreenhouseEnterHitlag(HSD_GObj* gobj);\n/* 14C004 */ void ftGw_Attack11_ItemGreenhouseExitHitlag(HSD_GObj* gobj);\n/* 14C034 */ bool ftGw_Attack11_ItemGreenhouse_CheckAll(HSD_GObj* gobj);\n/* 14C05C */ bool ftGw_Attack11_ItemGreenhouse_CheckAttack11(HSD_GObj* gobj);\n/* 14C07C */ void ftGw_Attack11_Enter(HSD_GObj* gobj);\n/* 14C138 */ void ftGw_Attack11_Anim(HSD_GObj* gobj);\n/* 14C174 */ void ftGw_Attack11_IASA(HSD_GObj* gobj);\n/* 14C194 */ void ftGw_Attack11_Phys(HSD_GObj* gobj);\n/* 14C1B4 */ void ftGw_Attack11_Coll(HSD_GObj* gobj);\n/// @file\n/// Aerial Attacks (AttackAir)\n#define MELEE_FT_CHARA_FTGAMEWATCH_FTGAMEWATCH_ATTACKAIR_H\n/* 14AFC0 */ void ftGw_AttackAirN_ItemParachuteSetup(HSD_GObj* gobj);\n/* 14B074 */ void ftGw_AttackAirN_ItemParachuteOnLand(HSD_GObj* gobj);\n/* 14B0F0 */ void ftGw_AttackAirN_ItemParachuteSetFlag(HSD_GObj* gobj);\n/* 14B12C */ void ftGw_AttackAirN_ItemParachuteRemove(HSD_GObj* gobj);\n/* 14B18C */ bool ftGw_AttackAirN_ItemCheckParachuteRemove(HSD_GObj* gobj);\n/* 14B1B4 */ void ftGw_AttackAirN_ItemTurtleSetup(HSD_GObj* gobj);\n/* 14B2E4 */ void ftGw_AttackAirN_ItemTurtleSetFlag(HSD_GObj* gobj);\n/* 14B320 */ void ftGw_AttackAirN_ItemTurtleRemove(HSD_GObj* gobj);\n/* 14B380 */ bool ftGw_AttackAirN_ItemCheckTurtleRemove(HSD_GObj* gobj);\n/* 14B3A8 */ void ftGw_AttackAirN_ItemSparkySetup(HSD_GObj* gobj);\n/* 14B45C */ void ftGw_AttackAirN_ItemSparkyOnLand(HSD_GObj* gobj);\n/* 14B4D8 */ void ftGw_AttackAirN_ItemSparkySetFlag(HSD_GObj* gobj);\n/* 14B514 */ void ftGw_AttackAirN_ItemSparkyRemove(HSD_GObj* gobj);\n/* 14B574 */ void ftGw_AttackAirN_EnterItemHitlag(HSD_GObj* gobj);\n/* 14B624 */ bool ftGw_AttackAirN_ItemCheckSparkyRemove(HSD_GObj* gobj);\n/* 14B64C */ void ftGw_AttackAirN_DecideAction(HSD_GObj* gobj);\n/* 14B6E4 */ void ftGw_AttackAirN_Enter(HSD_GObj* gobj);\n/* 14B720 */ void ftGw_AttackAirN_Anim(HSD_GObj* gobj);\n/* 14B740 */ void ftGw_AttackAirN_IASA(HSD_GObj* gobj);\n/* 14B760 */ void ftGw_AttackAirN_Phys(HSD_GObj* gobj);\n/* 14B780 */ void ftGw_AttackAirN_Coll(HSD_GObj* gobj);\n/* 14B7A8 */ void ftGw_LandingAirN_Enter(HSD_GObj* gobj);\n/* 14B87C */ void ftGw_AttackAirB_Anim(HSD_GObj* gobj);\n/* 14B89C */ void ftGw_AttackAirB_IASA(HSD_GObj* gobj);\n/* 14B8BC */ void ftGw_AttackAirB_Phys(HSD_GObj* gobj);\n/* 14B8DC */ void ftGw_AttackAirB_Coll(HSD_GObj* gobj);\n/* 14B904 */ void ftGw_LandingAirB_Enter(HSD_GObj* gobj);\n/* 14B9D8 */ void ftGw_AttackAirHi_Anim(HSD_GObj* gobj);\n/* 14B9F8 */ void ftGw_AttackAirHi_IASA(HSD_GObj* gobj);\n/* 14BA18 */ void ftGw_AttackAirHi_Phys(HSD_GObj* gobj);\n/* 14BA38 */ void ftGw_AttackAirHi_Coll(HSD_GObj* gobj);\n/* 14BA60 */ void ftGw_LandingAirHi_Enter(HSD_GObj* gobj);\n/* 14BB24 */ void ftGw_LandingAirN_Anim(HSD_GObj* gobj);\n/* 14BB70 */ void ftGw_LandingAirN_IASA(HSD_GObj* gobj);\n/* 14BB74 */ void ftGw_LandingAirN_Phys(HSD_GObj* gobj);\n/* 14BB94 */ void ftGw_LandingAirN_Coll(HSD_GObj* gobj);\n/* 14BBE0 */ void ftGw_LandingAirB_Init(HSD_GObj* gobj);\n/* 14BC0C */ void ftGw_LandingAirB_Anim(HSD_GObj* gobj);\n/* 14BC58 */ void ftGw_LandingAirB_IASA(HSD_GObj* gobj);\n/* 14BC5C */ void ftGw_LandingAirB_Phys(HSD_GObj* gobj);\n/* 14BC7C */ void ftGw_LandingAirB_Coll(HSD_GObj* gobj);\n/* 14BCC8 */ void ftGw_LandingAirHi_Init(HSD_GObj* gobj);\n/* 14BCF4 */ void ftGw_LandingAirHi_Anim(HSD_GObj* gobj);\n/* 14BD40 */ void ftGw_LandingAirHi_IASA(HSD_GObj* gobj);\n/* 14BD44 */ void ftGw_LandingAirHi_Phys(HSD_GObj* gobj);\n/* 14BD64 */ void ftGw_LandingAirHi_Coll(HSD_GObj* gobj);\n/// @file\n/// Down Tilt (AttackLw3)\n#define GALE01_14AB48\n/* 14AB48 */ void ftGw_AttackLw3_ItemManholeSetup(HSD_GObj* gobj);\n/* 14AC40 */ void ftGw_AttackLw3_ItemManholeRemove(HSD_GObj* gobj);\n/* 14ACB0 */ void ftGw_AttackLw3_ItemManholeOnDamage(HSD_GObj* gobj);\n/* 14AD98 */ bool ftGw_AttackLw3_ItemCheckManholeRemove(HSD_GObj* gobj);\n/* 14ADB8 */ void ftGw_AttackLw3_Enter(HSD_GObj* gobj);\n/* 14AE3C */ void ftGw_AttackLw3_Anim(HSD_GObj* gobj);\n/* 14AE78 */ void ftGw_AttackLw3_IASA(HSD_GObj* gobj);\n/* 14AF6C */ void ftGw_AttackLw3_Phys(HSD_GObj* gobj);\n/* 14AF8C */ void ftGw_AttackLw3_Coll(HSD_GObj* gobj);\n/// @file\n/// Forward Smash (AttackS4)\n#define GALE01_14A848\n/* 14A848 */ void ftGw_ItemTorchSetup(HSD_GObj* gobj);\n/* 14A904 */ void ftGw_AttackS4_ItemTorchSetFlag(HSD_GObj* gobj);\n/* 14A938 */ void ftGw_AttackS4_ItemTorchOnDamage(HSD_GObj* gobj);\n/* 14A990 */ void ftGw_AttackS4_ItemTorchEnterHitlag(HSD_GObj* gobj);\n/* 14A9C0 */ void ftGw_AttackS4_ItemTorchExitHitlag(HSD_GObj* gobj);\n/* 14A9F0 */ bool ftGw_AttackS4_ItemCheckTorchRemove(HSD_GObj* gobj);\n/* 14AA10 */ void ftGw_AttackS4_Enter(HSD_GObj* gobj);\n/* 14AA88 */ void ftGw_AttackS4_Anim(HSD_GObj* gobj);\n/* 14AAC4 */ void ftGw_AttackS4_IASA(HSD_GObj* gobj);\n/* 14AAF4 */ void ftGw_AttackS4_Phys(HSD_GObj* gobj);\n/* 14AB14 */ void ftGw_AttackS4_Coll(HSD_GObj* gobj);\n#define GALE01_14A250\n/* 14A250 */ void ftGw_Init_OnDeath(HSD_GObj* gobj);\n/* 14A37C */ void ftGw_Init_OnLoad(HSD_GObj* gobj);\n/* 14A4CC */ void ftGw_Init_OnDamage(HSD_GObj* gobj);\n/* 14A538 */ void ftGw_Init_8014A538(HSD_GObj* gobj);\n/* 14A5B8 */ void ftGw_Init_OnItemPickup(HSD_GObj* gobj, bool flag);\n/* 14A698 */ void ftGw_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 14A6E0 */ void ftGw_Init_OnItemVisible(HSD_GObj* gobj);\n/* 14A728 */ void ftGw_Init_OnItemDrop(HSD_GObj* gobj, bool dropItemFlag);\n/* 14A77C */ void ftGw_Init_UnkMotionStates4(HSD_GObj* gobj);\n/* 14A7B4 */ void ftGameWatch_CopySpecialAttrs(HSD_GObj* gobj);\n/* 14A7F4 */ void ftGw_Init_8014A7F4(HSD_GObj* gobj, ItemModStruct* item_mod);\n/* 14A814 */ void ftGw_Init_8014A814(HSD_GObj* gobj, ItemModStruct* item_mod);\n/* 14A828 */ void ftGw_Init_OnAbsorb(HSD_GObj* gobj);\n/* 3D23E8 */ extern MotionState ftGw_Init_MotionStateTable[ftGw_MS_SelfCount];\n/* 3D28E8 */ extern char ftGw_Init_DatFilename[];\n/* 3D28F4 */ extern char ftGw_Init_DataName[];\n/* 3D292C */ extern char ftGw_Init_AnimDatFilename[];\n/* 3D29B8 */ extern Fighter_DemoStrings ftGw_Init_DemoMotionFilenames;\n/* 3D29C8 */ extern Fighter_CostumeStrings ftGw_Init_CostumeStrings[];\n/// @file\n/// Up Special - Fire Rescue (SpeciialHi)\n#define GALE01_14DEF0\n/* 14DEF0 */ void ftGw_SpecialHi_ItemRescueSetup(HSD_GObj* gobj);\n/* 14DFB8 */ bool ftGw_SpecialHi_ItemCheckRescueRemove(HSD_GObj* gobj);\n/* 14DFE4 */ void ftGw_SpecialHi_ItemRescueSetNULL(HSD_GObj* gobj);\n/* 14DFFC */ void ftGw_SpecialHi_ItemRescueRemove(HSD_GObj* gobj);\n/* 14E0AC */ void ftGw_SpecialHi_Enter(HSD_GObj* gobj);\n/* 14E158 */ void ftGw_SpecialAirHi_Enter(HSD_GObj* gobj);\n/* 14E1F8 */ void ftGw_SpecialHi_Anim(HSD_GObj* gobj);\n/* 14E218 */ void ftGw_SpecialAirHi_Anim(HSD_GObj* gobj);\n/* 14E290 */ void ftGw_SpecialHi_IASA(HSD_GObj* gobj);\n/* 14E2B0 */ void ftGw_SpecialAirHi_IASA(HSD_GObj* gobj);\n/* 14E374 */ void ftGw_SpecialHi_Phys(HSD_GObj* gobj);\n/* 14E394 */ void ftGw_SpecialAirHi_Phys(HSD_GObj* gobj);\n/* 14E3B4 */ void ftGw_SpecialHi_Coll(HSD_GObj* gobj);\n/* 14E3D4 */ void ftGw_SpecialAirHi_Coll(HSD_GObj* gobj);\n/// @file Down Special - Oil Panic (SpecialLw)\n#define GALE01_14CBF4\n/* 14CBF4 */ void ftGw_SpecialLw_ItemPanicSetup(HSD_GObj* gobj);\n/* 14CC9C */ void ftGw_SpecialLw_ItemPanicSetFlag(HSD_GObj* gobj);\n/* 14CCD8 */ void ftGw_SpecialLw_ItemPanicRemove(HSD_GObj* gobj);\n/* 14CD38 */ void ftGw_SpecialLw_ItemPanicEnterHitlag(HSD_GObj* gobj);\n/* 14CD68 */ void ftGw_SpecialLw_ItemPanicExitHitlag(HSD_GObj* gobj);\n/* 14CD98 */ bool ftGw_SpecialLw_ItemCheckPanicRemove(HSD_GObj* gobj);\n/* 14CDC0 */ void ftGw_SpecialLw_UpdateBucketModel(HSD_GObj* gobj);\n/* 14CEF0 */ void ftGw_SpecialLw_Enter(HSD_GObj* gobj);\n/* 14CF78 */ void ftGw_SpecialAirLw_Enter(HSD_GObj* gobj);\n/* 14D014 */ void ftGw_SpecialLw_Anim(HSD_GObj* gobj);\n/* 14D0E0 */ void ftGw_SpecialAirLw_Anim(HSD_GObj* gobj);\n/* 14D1AC */ void ftGw_SpecialLw_IASA(HSD_GObj* gobj);\n/* 14D264 */ void ftGw_SpecialAirLw_IASA(HSD_GObj* gobj);\n/* 14D31C */ void ftGw_SpecialLw_Phys(HSD_GObj* gobj);\n/* 14D350 */ void ftGw_SpecialAirLw_Phys(HSD_GObj* gobj);\n/* 14D3B4 */ void ftGw_SpecialLw_Coll(HSD_GObj* gobj);\n/* 14D3F0 */ void ftGw_SpecialAirLw_Coll(HSD_GObj* gobj);\n/* 14D42C */ void ftGw_SpecialLw_GroundToAir(HSD_GObj* gobj);\n/* 14D4DC */ void ftGw_SpecialAirLw_AirToGround(HSD_GObj* gobj);\n/* 14D58C */ void ftGw_SpecialLw_UpdateAction(HSD_GObj* gobj, f32 animFrame);\n/* 14D620 */ void ftGw_SpecialAirLw_UpdateAction(HSD_GObj* gobj,\n                                                 f32 animFrame);\n/* 14D6B4 */ void ftGw_SpecialLwCatch_Anim(HSD_GObj* gobj);\n/* 14D774 */ void ftGw_SpecialAirLwCatch_Anim(HSD_GObj* gobj);\n/* 14D834 */ void ftGw_SpecialLwCatch_IASA(HSD_GObj* gobj);\n/* 14D838 */ void ftGw_SpecialAirLwCatch_IASA(HSD_GObj* gobj);\n/* 14D83C */ void ftGw_SpecialLwCatch_Phys(HSD_GObj* gobj);\n/* 14D85C */ void ftGw_SpecialAirLwCatch_Phys(HSD_GObj* gobj);\n/* 14D87C */ void ftGw_SpecialLwCatch_Coll(HSD_GObj* gobj);\n/* 14D8B8 */ void ftGw_SpecialAirLwCatch_Coll(HSD_GObj* gobj);\n/* 14D8F4 */ void ftGw_SpecialLwCatch_GroundToAir(HSD_GObj* gobj);\n/* 14D954 */ void ftGw_SpecialAirLwCatch_AirToGround(HSD_GObj* gobj);\n/* 14D9B4 */ void ftGw_SpecialLw_AbsorbThink_DecideAction(HSD_GObj* gobj);\n/* 14DA60 */ void ftGw_SpecialLwShoot_Anim(HSD_GObj* gobj);\n/* 14DAF0 */ void ftGw_SpecialAirLwShoot_Anim(HSD_GObj* gobj);\n/* 14DB80 */ void ftGw_SpecialLwShoot_IASA(HSD_GObj* gobj);\n/* 14DB84 */ void ftGw_SpecialAirLwShoot_IASA(HSD_GObj* gobj);\n/* 14DB88 */ void ftGw_SpecialLwShoot_Phys(HSD_GObj* gobj);\n/* 14DBA8 */ void ftGw_SpecialAirLwShoot_Phys(HSD_GObj* gobj);\n/* 14DBC8 */ void ftGw_SpecialLwShoot_Coll(HSD_GObj* gobj);\n/* 14DC04 */ void ftGw_SpecialAirLwShoot_Coll(HSD_GObj* gobj);\n/* 14DC40 */ void ftGw_SpecialLwShoot_GroundToAir(HSD_GObj* gobj);\n/* 14DCB4 */ void ftGw_SpecialAirLwShoot_AirToGround(HSD_GObj* gobj);\n/* 14DD28 */ void ftGw_SpecialLwShoot_ReleaseOil(HSD_GObj* gobj);\n/* 14DE0C */ void ftGw_SpecialAirLwShoot_ReleaseOil(HSD_GObj* gobj);\n/// @file\n/// Neutral Special - Chef (SpecialN/)\n#define GALE01_14E4F0\n/* 14E4F0 */ void ftGw_SpecialN_Coll(HSD_GObj* gobj);\n/* 14E644 */ void ftGw_SpecialN_Enter(HSD_GObj* gobj);\n/* 14E6C0 */ void ftGw_SpecialAirN_Coll(HSD_GObj* gobj);\n/* 14E73C */ void ftGw_SpecialAirN_Phys(HSD_GObj* gobj);\n/* 14E7DC */ void ftGw_SpecialAirN_AirToGround(HSD_GObj* gobj);\n/* 14E87C */ void ftGw_SpecialN_IASA(HSD_GObj* gobj);\n/* 14E900 */ void ftGw_SpecialAirN_Enter(HSD_GObj* gobj);\n/* 14E984 */ void ftGw_SpecialN_Phys(HSD_GObj* gobj);\n/* 14E9A4 */ void ftGw_SpecialAirN_Loop(HSD_GObj* gobj, f32 anim_frame);\n/* 14E9C4 */ void ftGw_SpecialN_Anim(HSD_GObj* gobj);\n/* 14EA00 */ void ftGw_SpecialAirN_Anim(HSD_GObj* gobj);\n/* 14EA3C */ void ftGw_SpecialN_GroundToAir(HSD_GObj* gobj);\n/* 14EAAC */ void ftGw_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 14EB1C */ void ftGw_SpecialN_Loop(HSD_GObj* gobj, f32 anim_frame);\n/* 14EB8C */ void ftGw_SpecialAirN_IASA(HSD_GObj* gobj);\n/// @file\n/// Side Special - Judgement (SpecialS)\n#define GALE01_14C46C\n/* 14C46C */ void ftGw_SpecialS_ItemJudgementSetup(HSD_GObj* gobj);\n/* 14C590 */ void ftGw_SpecialS_ItemJudgementSetFlag(HSD_GObj* gobj);\n/* 14C5CC */ void ftGw_SpecialS_ItemJudgementRemove(HSD_GObj* gobj);\n/* 14C68C */ bool ftGw_SpecialS_ItemCheckJudgementRemove(HSD_GObj* gobj);\n/* 14C6B4 */ int ftGw_SpecialS_GetRandomInt(HSD_GObj* gobj);\n/* 14C7A0 */ void ftGw_SpecialS_Enter(HSD_GObj* gobj);\n/* 14C828 */ void ftGw_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 14C8BC */ void ftGw_SpecialS_Anim(HSD_GObj* gobj);\n/* 14C8F8 */ void ftGw_SpecialAirS_Anim(HSD_GObj* gobj);\n/* 14C934 */ void ftGw_SpecialS_IASA(HSD_GObj* gobj);\n/* 14C938 */ void ftGw_SpecialAirS_IASA(HSD_GObj* gobj);\n/* 14C93C */ void ftGw_SpecialS_Phys(HSD_GObj* gobj);\n/* 14C974 */ void ftGw_SpecialAirS_Phys(HSD_GObj* gobj);\n/* 14CA10 */ void ftGw_SpecialS_Coll(HSD_GObj* gobj);\n/* 14CA4C */ void ftGw_SpecialAirS_Coll(HSD_GObj* gobj);\n#define GALE01_14EE40\n/* 14EBFC */ void ftGn_Init_OnDeath(HSD_GObj* gobj);\n/* 14EC58 */ void ftGn_Init_OnItemPickup(HSD_GObj* gobj, bool);\n/* 14ED38 */ void ftGn_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 14ED80 */ void ftGn_Init_OnItemVisible(HSD_GObj* gobj);\n/* 14EDC8 */ void ftGn_Init_OnItemDrop(HSD_GObj* gobj, bool);\n/* 14EE1C */ void ftGn_Init_OnLoad(HSD_GObj* gobj);\n/* 14EE40 */ void ftGn_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 14EE60 */ void ftGn_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 14EEAC */ void ftGn_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 3D29F8 */ extern MotionState ftGn_Init_MotionStateTable[ftCa_MS_SelfCount];\n/* 3D2CD8 */ extern char ftGn_Init_DatFilename[];\n/* 3D2CE4 */ extern char ftGn_Init_DataName[];\n/* 3D2DB4 */ extern char ftGn_Init_AnimDatFilename[];\n/* 3D2E30 */ extern Fighter_DemoStrings ftGn_Init_DemoMotionFilenames;\n/* 3D2E40 */ extern Fighter_CostumeStrings ftGn_Init_CostumeStrings[];\n#define GALE01_14F640\n#define MELEE_FT_CHARA_FTKOOPA_FORWARD_H\nstatic MotionFlags const ftKp_MF_Special =\n    Ft_MF_SkipModel | Ft_MF_SkipItemVis | Ft_MF_UnkUpdatePhys |\n    Ft_MF_FreezeState;\nstatic MotionFlags const ftKp_MF_SpecialN =\n    ftKp_MF_Special | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftKp_MF_SpecialS =\n    ftKp_MF_Special | Ft_MF_KeepGfx;\nstatic MotionFlags const ftKp_MF_SpecialHi =\n    ftKp_MF_Special | Ft_MF_KeepFastFall | Ft_MF_KeepGfx | Ft_MF_KeepSfx;\nstatic MotionFlags const ftKp_MF_SpecialLwStart =\n    ftKp_MF_Special | Ft_MF_KeepColAnimHitStatus | Ft_MF_KeepSfx;\nstatic MotionFlags const ftKp_MF_SpecialNStart =\n    ftKp_MF_SpecialN | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKp_MF_SpecialAirS =\n    ftKp_MF_SpecialS | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKp_MF_SpecialAirHi =\n    ftKp_MF_SpecialHi | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKp_MF_SpecialAirLw =\n    ftKp_MF_SpecialLwStart | Ft_MF_SkipParasol;\nstatic MotionFlags const ftKp_MF_SpecialNLoop =\n    ftKp_MF_SpecialN | Ft_MF_Unk19;\nstatic MotionFlags const ftKp_MF_SpecialAirNLoop =\n    ftKp_MF_SpecialNLoop | Ft_MF_SkipParasol;\ntypedef enum ftKoopa_MotionState {\n    ftKp_MS_SpecialNStart = ftCo_MS_Count,\n    ftKp_MS_SpecialN,\n    ftKp_MS_SpecialNEnd,\n    ftKp_MS_SpecialAirNStart,\n    ftKp_MS_SpecialAirN,\n    ftKp_MS_SpecialAirNEnd,\n    ftKp_MS_SpecialSStart,\n    ftKp_MS_SpecialSHit0_0,\n    ftKp_MS_SpecialSHit1,\n    ftKp_MS_SpecialSHit0_1,\n    ftKp_MS_SpecialSEndF,\n    ftKp_MS_SpecialSEndB,\n    ftKp_MS_SpecialAirSStart,\n    ftKp_MS_SpecialAirSHit0_0,\n    ftKp_MS_SpecialAirSHit1,\n    ftKp_MS_SpecialAirSHit0_1,\n    ftKp_MS_SpecialAirSEndF,\n    ftKp_MS_SpecialAirSEndB,\n    ftKp_MS_SpecialHi,\n    ftKp_MS_SpecialAirHi,\n    ftKp_MS_SpecialLw,\n    ftKp_MS_SpecialAirLw,\n    ftKp_MS_SpecialLwLanding,\n    ftKp_MS_Count,\n    ftKp_MS_SelfCount = ftKp_MS_Count - ftCo_MS_Count,\n} ftKoopa_MotionState;\ntypedef enum ftKp_Submotion {\n    ftKp_SM_SpecialNStart = ftCo_SM_Count,\n    ftKp_SM_SpecialN,\n    ftKp_SM_SpecialNEnd,\n    ftKp_SM_SpecialAirNStart,\n    ftKp_SM_SpecialAirN,\n    ftKp_SM_SpecialAirNEnd,\n    ftKp_SM_SpecialSStart,\n    ftKp_SM_SpecialSHit0,\n    ftKp_SM_SpecialSHit1,\n    ftKp_SM_SpecialSEndF,\n    ftKp_SM_SpecialSEndB,\n    ftKp_SM_SpecialAirSStart,\n    ftKp_SM_SpecialAirSHit0,\n    ftKp_SM_SpecialAirSHit1,\n    ftKp_SM_SpecialAirSEndF,\n    ftKp_SM_SpecialAirSEndB,\n    ftKp_SM_SpecialHi,\n    ftKp_SM_SpecialAirHi,\n    ftKp_SM_SpecialLw,\n    ftKp_SM_SpecialAirLw,\n    ftKp_SM_SpecialLwLanding,\n    ftKp_SM_Count,\n    ftKp_SM_SelfCount = ftKp_SM_Count - ftCo_SM_Count,\n} ftKp_Submotion;\n/* 14F640 */ void ftGk_Init_OnDeath(HSD_GObj*);\n/* 14F698 */ void ftGk_Init_UnkMotionStates3(HSD_GObj*);\n/* 14F6B8 */ void ftGk_Init_OnLoad(HSD_GObj*);\n/* 14F720 */ void ftGk_Init_OnItemPickup(HSD_GObj*, bool);\n/* 14F800 */ void ftGk_Init_OnItemInvisible(HSD_GObj*);\n/* 14F848 */ void ftGk_Init_OnItemVisible(HSD_GObj*);\n/* 14F890 */ void ftGk_Init_OnItemDrop(HSD_GObj*, bool);\n/* 14F8E4 */ void ftGk_Init_LoadSpecialAttrs(HSD_GObj*);\n/* 14F904 */ void ftGk_Init_OnKnockbackEnter(HSD_GObj*);\n/* 14F948 */ void ftGk_Init_OnKnockbackExit(HSD_GObj*);\n/* 14F98C */ void ftGk_Init_UnkDemoCallbacks0(int, int*, int*);\n/* 14F9A4 */ char* ftGk_Init_GetMotionFileString(enum_t);\n/* 3D35E8 */ extern MotionState ftGk_Init_MotionStateTable[ftKp_MS_SelfCount];\n/* 3D38C8 */ extern MotionState ftGk_Init_UnkMotionStates0[];\n/* 3D38E8 */ extern char ftGk_Init_DatFilename[];\n/* 3D38F4 */ extern char ftGk_Init_DataName[];\n/* 3D3948 */ extern char ftGk_Init_AnimDatFilename[];\n/* 3D3954 */ extern Fighter_DemoStrings ftGk_Init_DemoMotionFilenames;\n/* 3D3988 */ extern Fighter_CostumeStrings ftGk_Init_CostumeStrings[];\n#define GALE01_0EE528\n/* 0EE528 */ void ftKb_Init_800EE528(void);\n/* 0EE5C0 */ void ftKb_Init_OnDeath(ftKb_GObj* gobj);\n/* 0EE680 */ void ftKb_Init_OnLoad(ftKb_GObj* gobj);\n/* 0EE74C */ void ftKb_Init_800EE74C(ftKb_GObj* gobj);\n/* 0EE7B8 */ void ftKb_Init_800EE7B8(ftKb_GObj* gobj);\n/* 0EE818 */ void ftKb_Init_UnkMotionStates4(ftKb_GObj* gobj);\n/* 0EE914 */ void ftKb_Init_OnItemPickup(ftKb_GObj* gobj, bool flag);\n/* 0EE9DC */ void ftKb_Init_OnItemInvisible(ftKb_GObj* gobj);\n/* 0EEA24 */ void ftKb_Init_OnItemVisible(ftKb_GObj* gobj);\n/* 0EEA6C */ void ftKb_Init_OnItemDrop(ftKb_GObj* gobj, bool);\n/* 0EEAC0 */ void ftKb_Init_LoadSpecialAttrs(ftKb_GObj* gobj);\n/* 0EEB00 */ void ftKb_Init_800EEB00(ftKb_GObj* gobj, void*);\n/* 0EEB1C */ void ftKb_Init_800EEB1C(ftKb_GObj* gobj, void*);\n/* 0EEB38 */ void ftKb_Init_OnKnockbackEnter(ftKb_GObj* gobj);\n/* 0EEB7C */ void ftKb_Init_OnKnockbackExit(ftKb_GObj* gobj);\n/* 0EEBC0 */ void ftKb_Init_UnkDemoCallbacks0(int, int*, int*);\n/* 0EEBF8 */ char* ftKb_Init_GetMotionFileString(enum_t);\n/* 0EEC34 */ void ftKb_SpecialN_800EEC34(ftKb_GObj* gobj);\n/* 0EED50 */ void ftKb_SpecialN_800EED50(s32, s32);\n/* 0EEE9C */ void ftKb_Init_UnkMotionStates5(ftKb_GObj* gobj);\n/* 0EEEC4 */ void ftKb_SpecialN_800EEEC4(ftKb_GObj* gobj,\n                                         FighterKind victim_kind);\n/* 0EEF04 */ void ftKb_UnkMtxFunc0(ftKb_GObj* gobj, int, Mtx);\n/* 0EF028 */ M2C_UNK ftKb_Init_UnkMotionStates6(ftKb_GObj* gobj);\n/* 0EF040 */ M2C_UNK ftKb_SpecialN_800EF040();\n/* 0EF0E4 */ M2C_UNK ftKb_SpecialN_800EF0E4();\n/* 0EF35C */ M2C_UNK ftKb_SpecialN_800EF35C();\n/* 0EF438 */ M2C_UNK ftKb_SpecialN_800EF438();\n/* 0EF69C */ M2C_UNK ftKb_SpecialN_800EF69C();\n/* 0EF87C */ void ftKb_UnkIntBoolFunc0(Fighter*, int, bool);\n/* 0EF9BC */ void ftKb_Init_UnkCallbackPairs0_0(ftKb_GObj* gobj);\n/* 0EF9FC */ void ftKb_Init_UnkCallbackPairs0_1(ftKb_GObj* gobj);\n/* 0EFA40 */ void ftKb_SpecialN_800EFA40(ftKb_GObj* gobj);\n/* 0EFAF0 */ void ftKb_SpecialN_800EFAF0(ftKb_GObj* gobj);\n/* 0EFB4C */ void ftKb_SpecialN_800EFB4C(ftKb_GObj* gobj);\n/* 0EFBFC */ void ftKb_SpecialN_800EFBFC(ftKb_GObj* gobj);\n/* 0EFC58 */ void ftKb_SpecialN_800EFC58(ftKb_GObj* gobj);\n/* 0EFD08 */ void ftKb_SpecialN_800EFD08(ftKb_GObj* gobj);\n/* 0EFD64 */ void ftKb_SpecialN_800EFD64(ftKb_GObj* gobj);\n/* 0EFE1C */ void ftKb_SpecialN_800EFE1C(ftKb_GObj* gobj);\n/* 0EFE80 */ void ftKb_SpecialN_800EFE80(ftKb_GObj* gobj);\n/* 0EFF38 */ void ftKb_SpecialN_800EFF38(ftKb_GObj* gobj);\n/* 0EFF9C */ void ftKb_SpecialN_800EFF9C(ftKb_GObj* gobj);\n/* 0F0054 */ void ftKb_SpecialN_800F0054(ftKb_GObj* gobj);\n/* 0F00B8 */ void ftKb_SpecialN_800F00B8(ftKb_GObj* gobj);\n/* 0F0168 */ void ftKb_SpecialN_800F0168(ftKb_GObj* gobj);\n/* 0F01C4 */ void ftKb_SpecialN_800F01C4(ftKb_GObj* gobj);\n/* 0F0274 */ void ftKb_SpecialN_800F0274(ftKb_GObj* gobj);\n/* 0F02D0 */ void ftKb_SpecialN_800F02D0(ftKb_GObj* gobj);\n/* 0F0380 */ void ftKb_SpecialN_800F0380(ftKb_GObj* gobj);\n/* 0F03DC */ void ftKb_SpecialN_800F03DC(ftKb_GObj* gobj);\n/* 0F0494 */ void ftKb_SpecialN_800F0494(ftKb_GObj* gobj);\n/* 0F04F8 */ void ftKb_SpecialN_800F04F8(ftKb_GObj* gobj);\n/* 0F05A8 */ void ftKb_SpecialN_800F05A8(ftKb_GObj* gobj);\n/* 0F0604 */ void ftKb_SpecialN_800F0604(ftKb_GObj* gobj);\n/* 0F06B4 */ void ftKb_SpecialN_800F06B4(ftKb_GObj* gobj);\n/* 0F0710 */ void ftKb_SpecialN_800F0710(ftKb_GObj* gobj);\n/* 0F07C0 */ void ftKb_SpecialN_800F07C0(ftKb_GObj* gobj);\n/* 0F081C */ void ftKb_SpecialN_800F081C(ftKb_GObj* gobj);\n/* 0F08D4 */ void ftKb_SpecialN_800F08D4(ftKb_GObj* gobj);\n/* 0F0938 */ void ftKb_SpecialN_800F0938(ftKb_GObj* gobj);\n/* 0F09F0 */ void ftKb_SpecialN_800F09F0(ftKb_GObj* gobj);\n/* 0F0A54 */ void ftKb_SpecialN_800F0A54(ftKb_GObj* gobj);\n/* 0F0B0C */ void ftKb_SpecialN_800F0B0C(ftKb_GObj* gobj);\n/* 0F0B70 */ void ftKb_SpecialN_800F0B70(ftKb_GObj* gobj);\n/* 0F0C20 */ void ftKb_SpecialN_800F0C20(ftKb_GObj* gobj);\n/* 0F0C7C */ void ftKb_SpecialN_800F0C7C(ftKb_GObj* gobj);\n/* 0F0D34 */ void ftKb_SpecialN_800F0D34(ftKb_GObj* gobj);\n/* 0F0D98 */ void ftKb_SpecialN_800F0D98(ftKb_GObj* gobj);\n/* 0F0E48 */ void ftKb_SpecialN_800F0E48(ftKb_GObj* gobj);\n/* 0F0EA4 */ void ftKb_SpecialN_800F0EA4(ftKb_GObj* gobj);\n/* 0F0F5C */ void ftKb_SpecialN_800F0F5C(ftKb_GObj* gobj);\n/* 0F0FC0 */ void ftKb_SpecialN_800F0FC0(ftKb_GObj* gobj);\n/* 0F10A4 */ void ftKb_SpecialN_800F10A4(ftKb_GObj* gobj);\n/* 0F10D4 */ void ftKb_SpecialN_800F10D4(ftKb_GObj* gobj);\n/* 0F11AC */ void ftKb_SpecialN_800F11AC(ftKb_GObj* gobj);\n/* 0F11F0 */ void ftKb_SpecialN_800F11F0(ftKb_GObj* gobj);\n/* 0F12C8 */ void ftKb_SpecialN_800F12C8(ftKb_GObj* gobj);\n/* 0F130C */ void ftKb_SpecialN_800F130C(ftKb_GObj* gobj);\n/* 0F13F0 */ void ftKb_SpecialN_800F13F0(ftKb_GObj* gobj);\n/* 0F1420 */ void ftKb_SpecialN_800F1420(ftKb_GObj* gobj);\n/* 0F14B4 */ void ftKb_SpecialN_800F14B4(ftKb_GObj* gobj);\n/* 0F15D8 */ void ftKb_SpecialN_800F15D8(ftKb_GObj* gobj);\n/* 0F1630 */ void ftKb_SpecialN_Enter(ftKb_GObj* gobj);\n/* 0F1680 */ void ftKb_SpecialAirN_Enter(ftKb_GObj* gobj);\n/* 0F16D0 */ M2C_UNK ftKb_SpecialN_800F16D0();\n/* 0F190C */ void ftKb_SpecialN_800F190C(ftCo_GObj* gobj,\n                                         FighterKind victim_kind);\n/* 0F19AC */ void ftKb_SpecialN_800F19AC(ftKb_GObj* gobj);\n/* 0F1A8C */ void ftKb_SpecialN_800F1A8C(ftKb_GObj* gobj);\n/* 0F1B6C */ void ftKb_Init_UnkMotionStates3(ftKb_GObj* gobj);\n/* 0F1BAC */ void ftKb_SpecialN_800F1BAC(ftKb_GObj* gobj, s32, bool);\n/* 0F1CD8 */ M2C_UNK ftKb_SpecialN_800F1CD8();\n/* 0F1D24 */ void ftKb_SpecialN_800F1D24(ftKb_GObj* gobj);\n/* 0F1DAC */ M2C_UNK ftKb_SpecialN_800F1DAC();\n/* 0F1F1C */ void ftKb_SpecialN_800F1F1C(ftKb_GObj* gobj, Vec3*);\n/* 0F1F68 */ void ftKb_SpecialN_800F1F68(ftKb_GObj* gobj);\n/* 0F203C */ void ftKb_AttackDash_Anim(ftKb_GObj* gobj);\n/* 0F205C */ void ftKb_AttackDash_IASA(ftKb_GObj* gobj);\n/* 0F207C */ void ftKb_AttackDash_Phys(ftKb_GObj* gobj);\n/* 0F209C */ void ftKb_AttackDash_Coll(ftKb_GObj* gobj);\n/* 0F2124 */ void ftKb_AttackDashAir_Anim(ftKb_GObj* gobj);\n/* 0F2160 */ void ftKb_AttackDashAir_IASA(ftKb_GObj* gobj);\n/* 0F2164 */ void ftKb_AttackDashAir_Phys(ftKb_GObj* gobj);\n/* 0F2198 */ void ftKb_AttackDashAir_Coll(ftKb_GObj* gobj);\n/* 0F21C0 */ void ftKb_AttackDashAir_800F21C0(ftKb_GObj* gobj);\n/* 0F22D4 */ void ftKb_AttackDashAir_800F22D4(ftKb_GObj* gobj);\n/* 0F2300 */ void ftKb_SpecialHi_Enter(ftKb_GObj* gobj);\n/* 0F23B8 */ void ftKb_SpecialAirHi_Enter(ftKb_GObj* gobj);\n/* 0F2470 */ void ftKb_SpecialHi1_Anim(ftKb_GObj* gobj);\n/* 0F24F8 */ void ftKb_SpecialHi2_Anim(ftKb_GObj* gobj);\n/* 0F2578 */ void ftKb_SpecialHi3_Anim(ftKb_GObj* gobj);\n/* 0F257C */ void ftKb_SpecialHi4_Anim(ftKb_GObj* gobj);\n/* 0F25EC */ void ftKb_SpecialAirHi1_Anim(ftKb_GObj* gobj);\n/* 0F266C */ void ftKb_SpecialAirHi2_Anim(ftKb_GObj* gobj);\n/* 0F26E4 */ void ftKb_SpecialAirHi3_Anim(ftKb_GObj* gobj);\n/* 0F26E8 */ void ftKb_SpecialAirHiEnd_Anim(ftKb_GObj* gobj);\n/* 0F2758 */ void ftKb_SpecialHi1_IASA(ftKb_GObj* gobj);\n/* 0F2828 */ void ftKb_SpecialHi2_IASA(ftKb_GObj* gobj);\n/* 0F282C */ void ftKb_SpecialHi3_IASA(ftKb_GObj* gobj);\n/* 0F2830 */ void ftKb_SpecialHi4_IASA(ftKb_GObj* gobj);\n/* 0F2834 */ void ftKb_SpecialAirHi1_IASA(ftKb_GObj* gobj);\n/* 0F2904 */ void ftKb_SpecialAirHi2_IASA(ftKb_GObj* gobj);\n/* 0F2908 */ void ftKb_SpecialAirHi3_IASA(ftKb_GObj* gobj);\n/* 0F290C */ void ftKb_SpecialAirHiEnd_IASA(ftKb_GObj* gobj);\n/* 0F2910 */ void ftKb_SpecialHi1_Phys(ftKb_GObj* gobj);\n/* 0F2984 */ void ftKb_SpecialHi2_Phys(ftKb_GObj* gobj);\n/* 0F29F8 */ void ftKb_SpecialHi3_Phys(ftKb_GObj* gobj);\n/* 0F2A48 */ void ftKb_SpecialHi4_Phys(ftKb_GObj* gobj);\n/* 0F2A68 */ void ftKb_SpecialAirHi1_Phys(ftKb_GObj* gobj);\n/* 0F2AE4 */ void ftKb_SpecialAirHi2_Phys(ftKb_GObj* gobj);\n/* 0F2B60 */ void ftKb_SpecialAirHi3_Phys(ftKb_GObj* gobj);\n/* 0F2B9C */ void ftKb_SpecialAirHiEnd_Phys(ftKb_GObj* gobj);\n/* 0F2BBC */ void ftKb_SpecialHi1_Coll(ftKb_GObj* gobj);\n/* 0F2C5C */ void ftKb_SpecialHi2_Coll(ftKb_GObj* gobj);\n/* 0F2D98 */ void ftKb_SpecialHi3_Coll(ftKb_GObj* gobj);\n/* 0F2EA0 */ void ftKb_SpecialHi4_Coll(ftKb_GObj* gobj);\n/* 0F2F70 */ void ftKb_SpecialAirHi1_Coll(ftKb_GObj* gobj);\n/* 0F3004 */ void ftKb_SpecialAirHi2_Coll(ftKb_GObj* gobj);\n/* 0F3140 */ void ftKb_SpecialAirHi3_Coll(ftKb_GObj* gobj);\n/* 0F3248 */ void ftKb_SpecialAirHiEnd_Coll(ftKb_GObj* gobj);\n/* 0F331C */ M2C_UNK ftKb_SpecialHi_800F331C();\n/* 0F346C */ M2C_UNK ftKb_SpecialHi_800F346C();\n/* 0F3570 */ M2C_UNK ftKb_SpecialHi_800F3570();\n/* 0F36DC */ M2C_UNK ftKb_SpecialHi_800F36DC();\n/* 0F37EC */ M2C_UNK ftKb_SpecialHi_800F37EC();\n/* 0F3B28 */ M2C_UNK ftKb_SpecialHi_800F3B28();\n/* 0F3D50 */ void ftKb_SpecialLw_Enter(ftKb_GObj* gobj);\n/* 0F3E68 */ void ftKb_SpecialAirLw_Enter(ftKb_GObj* gobj);\n/* 0F3F80 */ void ftKb_SpecialLw1_Anim(ftKb_GObj* gobj);\n/* 0F402C */ void ftKb_SpecialLw_Anim(ftKb_GObj* gobj);\n/* 0F4074 */ void ftKb_SpecialLwEnd_Anim(ftKb_GObj* gobj);\n/* 0F412C */ void ftKb_SpecialAirLwStart_Anim(ftKb_GObj* gobj);\n/* 0F41D8 */ void ftKb_SpecialAirLw_Anim(ftKb_GObj* gobj);\n/* 0F4220 */ void ftKb_SpecialAirLwEnd_Anim(ftKb_GObj* gobj);\n/* 0F42D8 */ void ftKb_SpecialLw1_IASA(ftKb_GObj* gobj);\n/* 0F42DC */ void ftKb_SpecialLw_IASA(ftKb_GObj* gobj);\n/* 0F43FC */ void ftKb_SpecialLwEnd_IASA(ftKb_GObj* gobj);\n/* 0F4400 */ void ftKb_SpecialAirLwStart_IASA(ftKb_GObj* gobj);\n/* 0F4404 */ void ftKb_SpecialAirLw_IASA(ftKb_GObj* gobj);\n/* 0F4518 */ void ftKb_SpecialAirLwEnd_IASA(ftKb_GObj* gobj);\n/* 0F451C */ void ftKb_SpecialLw1_Phys(ftKb_GObj* gobj);\n/* 0F453C */ void ftKb_SpecialLw_Phys(ftKb_GObj* gobj);\n/* 0F4584 */ void ftKb_SpecialLwEnd_Phys(ftKb_GObj* gobj);\n/* 0F45A4 */ void ftKb_SpecialAirLwStart_Phys(ftKb_GObj* gobj);\n/* 0F45C4 */ void ftKb_SpecialAirLw_Phys(ftKb_GObj* gobj);\n/* 0F4608 */ void ftKb_SpecialAirLwEnd_Phys(ftKb_GObj* gobj);\n/* 0F4628 */ void ftKb_SpecialLw1_Coll(ftKb_GObj* gobj);\n/* 0F4800 */ void ftKb_SpecialLw_Coll(ftKb_GObj* gobj);\n/* 0F49E4 */ void ftKb_SpecialLwEnd_Coll(ftKb_GObj* gobj);\n/* 0F4B3C */ void ftKb_SpecialAirLwStart_Coll(ftKb_GObj* gobj);\n/* 0F4E78 */ void ftKb_SpecialAirLw_Coll(ftKb_GObj* gobj);\n/* 0F51C0 */ void ftKb_SpecialAirLwEnd_Coll(ftKb_GObj* gobj);\n/* 0F5318 */ void ftKb_SpecialAirLw_800F5318(ftKb_GObj* gobj);\n/* 0F539C */ void ftKb_SpecialAirLw_800F539C(ftKb_GObj* gobj);\n/* 0F5524 */ void ftKb_SpecialAirLw_800F5524(ftKb_GObj* gobj);\n/* 0F5564 */ void ftKb_SpecialS_Enter(ftKb_GObj* gobj);\n/* 0F55D0 */ void ftKb_SpecialAirS_Enter(ftKb_GObj* gobj);\n/* 0F5660 */ void ftKb_SpecialS_Anim(ftKb_GObj* gobj);\n/* 0F569C */ void ftKb_SpecialAirS_Anim(ftKb_GObj* gobj);\n/* 0F56D8 */ void ftKb_SpecialS_Phys(ftKb_GObj* gobj);\n/* 0F56F8 */ void ftKb_SpecialAirS_Phys(ftKb_GObj* gobj);\n/* 0F5718 */ void ftKb_SpecialS_Coll(ftKb_GObj* gobj);\n/* 0F5778 */ void ftKb_SpecialAirS_Coll(ftKb_GObj* gobj);\n/* 0F5800 */ M2C_UNK ftKb_SpecialN_800F5800();\n/* 0F5820 */ void ftKb_SpecialN_800F5820(ftKb_GObj* gobj,\n                                         ftCollisionBox* victim_coll_box,\n                                         float victim_scale_x);\n/* 0F5874 */ void ftKb_SpecialN_800F5874(Vec2* arg0);\n/* 0F5898 */ HSD_Joint* ftKb_SpecialN_800F5898(ftKb_GObj* gobj, int);\n/* 0F58AC */ float ftKb_SpecialN_800F58AC(ftKb_GObj* gobj,\n                                          Vec3* victim_self_vel,\n                                          float victim_facing_dir);\n/* 0F58D8 */ float ftKb_SpecialN_800F58D8(ftKb_GObj* gobj,\n                                          Vec3* victim_self_vel,\n                                          float victim_facing_dir);\n/* 0F5954 */ void ftKb_SpecialN_800F5954(ftKb_GObj* gobj);\n/* 0F597C */ bool ftKb_SpecialN_800F597C(ftKb_GObj* gobj);\n/* 0F598C */ void ftKb_SpecialN_800F598C(ftKb_GObj* gobj, int arg1);\n/* 0F5A04 */ void ftKb_SpecialN_800F5A04(ftKb_GObj* gobj);\n/* 0F5A38 */ bool ftKb_SpecialN_800F5A38(ftKb_GObj* gobj,\n                                         ftCo_Fighter* victim_fp);\n/* 0F5A60 */ float ftKb_SpecialN_800F5A60(ftKb_GObj* gobj);\n/* 0F5A70 */ float ftKb_SpecialN_800F5A70(void);\n/* 0F5A88 */ float ftKb_SpecialN_800F5A88(ftKb_GObj* gobj);\n/* 0F5A98 */ float ftKb_SpecialN_800F5A98(void);\n/* 0F5AB0 */ float ftKb_SpecialN_800F5AB0(ftKb_GObj* gobj);\n/* 0F5AC0 */ float ftKb_SpecialN_800F5AC0(void);\n/* 0F5AD8 */ float ftKb_SpecialN_800F5AD8(void);\n/* 0F5AF0 */ float ftKb_SpecialN_800F5AF0(ftKb_GObj* gobj);\n/* 0F5B00 */ float ftKb_SpecialN_800F5B00(ftKb_GObj* gobj);\n/* 0F5B10 */ float ftKb_SpecialN_800F5B10(ftKb_GObj* gobj);\n/* 0F5B20 */ M2C_UNK ftKb_SpecialN_800F5B20(ftKb_GObj* gobj);\n/* 0F5B3C */ float ftKb_SpecialN_800F5B3C(ftKb_GObj* gobj);\n/* 0F5B4C */ float ftKb_SpecialN_800F5B4C(ftKb_GObj* gobj);\n/* 0F5B5C */ void ftKb_SpecialN_800F5B5C(ftKb_GObj* gobj);\n/* 0F5BA4 */ void ftKb_SpecialN_800F5BA4(Fighter* fp);\n/* 0F5C34 */ void ftKb_SpecialN_800F5C34(Fighter* fp);\n/* 0F5D04 */ void ftKb_SpecialN_800F5D04(ftKb_GObj* gobj, bool);\n/* 0F5DE8 */ void ftKb_SpecialN_800F5DE8(ftKb_GObj* gobj);\n/* 0F5EA8 */ void ftKb_SpecialN_800F5EA8(ftKb_GObj* gobj);\n/* 0F5F68 */ void ftKb_SpecialN_800F5F68(ftKb_GObj* gobj);\n/* 0F6070 */ void ftKb_SpecialN_800F6070(ftKb_GObj* gobj);\n/* 0F6388 */ void ftKb_SpecialN_800F6388(ftKb_GObj* gobj);\n/* 0F63EC */ void ftKb_SpecialN_800F63EC(ftKb_GObj* gobj);\n/* 0F6BB0 */ void ftKb_SpecialS_800F6BB0(ftKb_GObj* gobj);\n/* 0F70A0 */ void ftKb_SpecialN_Anim(ftKb_GObj* gobj);\n/* 0F71CC */ void ftKb_SpecialAirN_Anim(ftKb_GObj* gobj);\n/* 0F72F8 */ void ftKb_SpecialNLoop_Anim(ftKb_GObj* gobj);\n/* 0F72FC */ void ftKb_SpecialAirNLoop_Anim(ftKb_GObj* gobj);\n/* 0F7300 */ void ftKb_SpecialNEnd_Anim(ftKb_GObj* gobj);\n/* 0F733C */ void ftKb_SpecialAirNEnd_Anim(ftKb_GObj* gobj);\n/* 0F7378 */ void ftKb_SpecialNCapture0_Anim(ftKb_GObj* gobj);\n/* 0F7498 */ void ftKb_SpecialNCapture_Anim(ftKb_GObj* gobj);\n/* 0F75B8 */ void ftKb_SpecialNCapture1_Anim(ftKb_GObj* gobj);\n/* 0F75D8 */ void ftKb_SpecialAirNCapture_Anim(ftKb_GObj* gobj);\n/* 0F75F8 */ void ftKb_Eat_Anim(ftKb_GObj* gobj);\n/* 0F7674 */ void ftKb_SpecialAirNCaptured_Anim(ftKb_GObj* gobj);\n/* 0F76F8 */ void ftKb_EatWait_Anim(ftKb_GObj* gobj);\n/* 0F76FC */ void ftKb_SpecialAirNCaptureWait_Anim(ftKb_GObj* gobj);\n/* 0F7700 */ void ftKb_SpecialNSpit0_Anim(ftKb_GObj* gobj);\n/* 0F7808 */ void ftKb_SpecialNSpit_Anim(ftKb_GObj* gobj);\n/* 0F78B8 */ void ftKb_SpecialNSpit1_Anim(ftKb_GObj* gobj);\n/* 0F79C0 */ void ftKb_SpecialAirNSpit_Anim(ftKb_GObj* gobj);\n/* 0F7A70 */ void ftKb_SpecialNDrink0_Anim(ftKb_GObj* gobj);\n/* 0F7B20 */ void ftKb_SpecialNDrink_Anim(ftKb_GObj* gobj);\n/* 0F7BE4 */ void ftKb_SpecialNDrink1_Anim(ftKb_GObj* gobj);\n/* 0F7C94 */ void ftKb_SpecialAirNDrink_Anim(ftKb_GObj* gobj);\n/* 0F7D58 */ void ftKb_EatTurn_Anim(ftKb_GObj* gobj);\n/* 0F7DE4 */ void ftKb_SpecialAirNCaptureTurn_Anim(ftKb_GObj* gobj);\n/* 0F7E78 */ void ftKb_EatWalk_Anim(ftKb_GObj* gobj);\n/* 0F7E98 */ void ftKb_EatJump1_Anim(ftKb_GObj* gobj);\n/* 0F7F20 */ void ftKb_EatJump2_Anim(ftKb_GObj* gobj);\n/* 0F7F24 */ void ftKb_EatLanding_Anim(ftKb_GObj* gobj);\n/* 0F7FA0 */ void ftKb_SpecialNLoop_IASA(ftKb_GObj* gobj);\n/* 0F8000 */ void ftKb_SpecialAirNLoop_IASA(ftKb_GObj* gobj);\n/* 0F8060 */ void ftKb_EatWait_IASA(ftKb_GObj* gobj);\n/* 0F844C */ void ftKb_SpecialAirNCaptureWait_IASA(ftKb_GObj* gobj);\n/* 0F8770 */ void ftKb_EatWalk_IASA(ftKb_GObj* gobj);\n/* 0F8870 */ void ftKb_EatJump1_IASA(ftKb_GObj* gobj);\n/* 0F8890 */ void ftKb_SpecialN_Phys(ftKb_GObj* gobj);\n/* 0F88B0 */ void ftKb_SpecialAirN_Phys(ftKb_GObj* gobj);\n/* 0F88D0 */ void ftKb_SpecialNLoop_Phys(ftKb_GObj* gobj);\n/* 0F88F0 */ void ftKb_SpecialAirNLoop_Phys(ftKb_GObj* gobj);\n/* 0F8910 */ void ftKb_SpecialNEnd_Phys(ftKb_GObj* gobj);\n/* 0F8930 */ void ftKb_SpecialAirNEnd_Phys(ftKb_GObj* gobj);\n/* 0F8950 */ void ftKb_SpecialNCapture0_Phys(ftKb_GObj* gobj);\n/* 0F8970 */ void ftKb_SpecialNCapture_Phys(ftKb_GObj* gobj);\n/* 0F8990 */ void ftKb_SpecialNCapture1_Phys(ftKb_GObj* gobj);\n/* 0F89B0 */ void ftKb_SpecialAirNCapture_Phys(ftKb_GObj* gobj);\n/* 0F89D0 */ void ftKb_Eat_Phys(ftKb_GObj* gobj);\n/* 0F89F0 */ void ftKb_SpecialAirNCaptured_Phys(ftKb_GObj* gobj);\n/* 0F8A10 */ void ftKb_EatWait_Phys(ftKb_GObj* gobj);\n/* 0F8A30 */ void ftKb_SpecialAirNCaptureWait_Phys(ftKb_GObj* gobj);\n/* 0F8A50 */ void ftKb_SpecialNSpit0_Phys(ftKb_GObj* gobj);\n/* 0F8A70 */ void ftKb_SpecialNSpit_Phys(ftKb_GObj* gobj);\n/* 0F8A90 */ void ftKb_SpecialNSpit1_Phys(ftKb_GObj* gobj);\n/* 0F8AB0 */ void ftKb_SpecialAirNSpit_Phys(ftKb_GObj* gobj);\n/* 0F8AD0 */ void ftKb_SpecialNDrink0_Phys(ftKb_GObj* gobj);\n/* 0F8AF0 */ void ftKb_SpecialNDrink_Phys(ftKb_GObj* gobj);\n/* 0F8B10 */ void ftKb_SpecialNDrink1_Phys(ftKb_GObj* gobj);\n/* 0F8B30 */ void ftKb_SpecialAirNDrink_Phys(ftKb_GObj* gobj);\n/* 0F8B50 */ void ftKb_EatTurn_Phys(ftKb_GObj* gobj);\n/* 0F8B70 */ void ftKb_SpecialAirNCaptureTurn_Phys(ftKb_GObj* gobj);\n/* 0F8B90 */ void ftKb_EatWalk_Phys(ftKb_GObj* gobj);\n/* 0F8BB0 */ void ftKb_EatJump1_Phys(ftKb_GObj* gobj);\n/* 0F8BD0 */ void ftKb_EatJump2_Phys(ftKb_GObj* gobj);\n/* 0F8BF0 */ void ftKb_EatLanding_Phys(ftKb_GObj* gobj);\n/* 0F8C10 */ void ftKb_SpecialN_Coll(ftKb_GObj* gobj);\n/* 0F8C38 */ void ftKb_SpecialAirN_Coll(ftKb_GObj* gobj);\n/* 0F8C60 */ void ftKb_SpecialNLoop_Coll(ftKb_GObj* gobj);\n/* 0F8C88 */ void ftKb_SpecialAirNLoop_Coll(ftKb_GObj* gobj);\n/* 0F8CB0 */ void ftKb_SpecialNEnd_Coll(ftKb_GObj* gobj);\n/* 0F8CD8 */ void ftKb_SpecialAirNEnd_Coll(ftKb_GObj* gobj);\n/* 0F8D00 */ void ftKb_SpecialNCapture0_Coll(ftKb_GObj* gobj);\n/* 0F8D28 */ void ftKb_SpecialNCapture_Coll(ftKb_GObj* gobj);\n/* 0F8D50 */ void ftKb_SpecialNCapture1_Coll(ftKb_GObj* gobj);\n/* 0F8D78 */ void ftKb_SpecialAirNCapture_Coll(ftKb_GObj* gobj);\n/* 0F8DA0 */ void ftKb_Eat_Coll(ftKb_GObj* gobj);\n/* 0F8DC8 */ void ftKb_SpecialAirNCaptured_Coll(ftKb_GObj* gobj);\n/* 0F8DF0 */ void ftKb_EatWait_Coll(ftKb_GObj* gobj);\n/* 0F8E18 */ void ftKb_SpecialAirNCaptureWait_Coll(ftKb_GObj* gobj);\n/* 0F8E40 */ void ftKb_SpecialNSpit0_Coll(ftKb_GObj* gobj);\n/* 0F8E68 */ void ftKb_SpecialNSpit_Coll(ftKb_GObj* gobj);\n/* 0F8E90 */ void ftKb_SpecialNSpit1_Coll(ftKb_GObj* gobj);\n/* 0F8EB8 */ void ftKb_SpecialAirNSpit_Coll(ftKb_GObj* gobj);\n/* 0F8EE0 */ void ftKb_SpecialNDrink0_Coll(ftKb_GObj* gobj);\n/* 0F8F08 */ void ftKb_SpecialNDrink_Coll(ftKb_GObj* gobj);\n/* 0F8F30 */ void ftKb_SpecialNDrink1_Coll(ftKb_GObj* gobj);\n/* 0F8F58 */ void ftKb_SpecialAirNDrink_Coll(ftKb_GObj* gobj);\n/* 0F8F80 */ void ftKb_EatTurn_Coll(ftKb_GObj* gobj);\n/* 0F8FA8 */ void ftKb_SpecialAirNCaptureTurn_Coll(ftKb_GObj* gobj);\n/* 0F8FD0 */ void ftKb_EatWalk_Coll(ftKb_GObj* gobj);\n/* 0F8FF8 */ void ftKb_EatJump1_Coll(ftKb_GObj* gobj);\n/* 0F9020 */ void ftKb_EatJump2_Coll(ftKb_GObj* gobj);\n/* 0F9048 */ void ftKb_EatLanding_Coll(ftKb_GObj* gobj);\n/* 0F9070 */ void ftKb_SpecialN_800F9070(ftKb_GObj* gobj);\n/* 0F9090 */ void ftKb_SpecialN_800F9090(ftKb_GObj* gobj);\n/* 0F9110 */ void ftKb_SpecialN_800F9110(ftKb_GObj* gobj);\n/* 0F9198 */ void ftKb_MrSpecialN_Anim(ftKb_GObj* gobj);\n/* 0F91D4 */ void ftKb_MrSpecialN_IASA(ftKb_GObj* gobj);\n/* 0F9204 */ void ftKb_MrSpecialN_Phys(ftKb_GObj* gobj);\n/* 0F9224 */ void ftKb_MrSpecialN_Coll(ftKb_GObj* gobj);\n/* 0F93CC */ void ftKb_SpecialNMr_800F93CC(ftKb_GObj* gobj);\n/* 0F9454 */ void ftKb_MrSpecialAirN_Anim(ftKb_GObj* gobj);\n/* 0F9490 */ void ftKb_MrSpecialAirN_IASA(ftKb_GObj* gobj);\n/* 0F94C0 */ void ftKb_MrSpecialAirN_Phys(ftKb_GObj* gobj);\n/* 0F94E0 */ void ftKb_MrSpecialAirN_Coll(ftKb_GObj* gobj);\n/* 0F951C */ void ftKb_SpecialNLg_800F951C(ftKb_GObj* gobj);\n/* 0F9598 */ void ftKb_SpecialNLg_800F9598(ftKb_GObj* gobj);\n/* 0F9614 */ void ftKb_SpecialNLg_800F9614(ftKb_GObj* gobj);\n/* 0F9684 */ void ftKb_SpecialNLg_800F9684(ftKb_GObj* gobj);\n/* 0F96F4 */ void ftKb_LgSpecialN_Anim(ftKb_GObj* gobj);\n/* 0F9730 */ void ftKb_LgSpecialAirN_Anim(ftKb_GObj* gobj);\n/* 0F976C */ void ftKb_LgSpecialN_IASA(ftKb_GObj* gobj);\n/* 0F979C */ void ftKb_LgSpecialAirN_IASA(ftKb_GObj* gobj);\n/* 0F97CC */ void ftKb_LgSpecialN_Phys(ftKb_GObj* gobj);\n/* 0F97EC */ void ftKb_LgSpecialAirN_Phys(ftKb_GObj* gobj);\n/* 0F980C */ void ftKb_LgSpecialN_Coll(ftKb_GObj* gobj);\n/* 0F9880 */ void ftKb_LgSpecialAirN_Coll(ftKb_GObj* gobj);\n/* 0F99BC */ void ftKb_SpecialNCa_800F99BC(ftKb_GObj* gobj);\n/* 0F9A54 */ void ftKb_SpecialNCa_800F9A54(ftKb_GObj* gobj);\n/* 0F9AEC */ void ftKb_CaSpecialN_Anim(ftKb_GObj* gobj);\n/* 0F9B28 */ void ftKb_CaSpecialAirN_Anim(ftKb_GObj* gobj);\n/* 0F9B64 */ void ftKb_CaSpecialN_IASA(ftKb_GObj* gobj);\n/* 0F9B68 */ void ftKb_CaSpecialAirN_IASA(ftKb_GObj* gobj);\n/* 0F9C58 */ void ftKb_CaSpecialN_Phys(ftKb_GObj* gobj);\n/* 0F9D40 */ void ftKb_CaSpecialAirN_Phys(ftKb_GObj* gobj);\n/* 0F9E8C */ void ftKb_CaSpecialN_Coll(ftKb_GObj* gobj);\n/* 0F9F34 */ void ftKb_CaSpecialAirN_Coll(ftKb_GObj* gobj);\n/* 0F9FD4 */ void ftKb_SpecialNPk_800F9FD4(ftKb_GObj* gobj);\n/* 0FA064 */ void ftKb_SpecialNPk_800FA064(ftKb_GObj* gobj);\n/* 0FA0F4 */ void ftKb_PkSpecialN_Anim(ftKb_GObj* gobj);\n/* 0FA254 */ void ftKb_PkSpecialAirN_Anim(ftKb_GObj* gobj);\n/* 0FA418 */ void ftKb_PkSpecialN_IASA(ftKb_GObj* gobj);\n/* 0FA41C */ void ftKb_PkSpecialAirN_IASA(ftKb_GObj* gobj);\n/* 0FA420 */ void ftKb_PkSpecialN_Phys(ftKb_GObj* gobj);\n/* 0FA440 */ void ftKb_PkSpecialAirN_Phys(ftKb_GObj* gobj);\n/* 0FA460 */ void ftKb_PkSpecialN_Coll(ftKb_GObj* gobj);\n/* 0FA4F0 */ void ftKb_PkSpecialAirN_Coll(ftKb_GObj* gobj);\n/* 0FA588 */ void ftKb_SpecialNKp_800FA588(ftKb_GObj* gobj);\n/* 0FA7D4 */ void ftKb_SpecialNKp_800FA7D4(ftKb_GObj* gobj);\n/* 0FA83C */ void ftKb_SpecialNKp_800FA83C(ftKb_GObj* gobj);\n/* 0FA878 */ void ftKb_SpecialNKp_800FA878(ftKb_GObj* gobj);\n/* 0FA8B4 */ void ftKb_SpecialNKp_800FA8B4(ftKb_GObj* gobj);\n/* 0FA958 */ void ftKb_SpecialNKp_800FA958(ftKb_GObj* gobj);\n/* 0FA9FC */ void ftKb_KpSpecialNStart_Anim(ftKb_GObj* gobj);\n/* 0FAA74 */ void ftKb_KpSpecialN_Anim(ftKb_GObj* gobj);\n/* 0FAB18 */ void ftKb_KpSpecialNEnd_Anim(ftKb_GObj* gobj);\n/* 0FAB54 */ void ftKb_KpSpecialAirNStart_Anim(ftKb_GObj* gobj);\n/* 0FABCC */ void ftKb_KpSpecialAirN_Anim(ftKb_GObj* gobj);\n/* 0FAC70 */ void ftKb_KpSpecialAirNEnd_Anim(ftKb_GObj* gobj);\n/* 0FACAC */ void ftKb_KpSpecialNStart_IASA(ftKb_GObj* gobj);\n/* 0FACB0 */ void ftKb_KpSpecialN_IASA(ftKb_GObj* gobj);\n/* 0FAE0C */ void ftKb_KpSpecialNEnd_IASA(ftKb_GObj* gobj);\n/* 0FAE10 */ void ftKb_KpSpecialAirNStart_IASA(ftKb_GObj* gobj);\n/* 0FAE14 */ void ftKb_KpSpecialAirN_IASA(ftKb_GObj* gobj);\n/* 0FAF70 */ void ftKb_KpSpecialAirNEnd_IASA(ftKb_GObj* gobj);\n/* 0FAF74 */ void ftKb_KpSpecialNStart_Phys(ftKb_GObj* gobj);\n/* 0FAF94 */ void ftKb_KpSpecialN_Phys(ftKb_GObj* gobj);\n/* 0FAFB4 */ void ftKb_KpSpecialNEnd_Phys(ftKb_GObj* gobj);\n/* 0FAFD4 */ void ftKb_KpSpecialAirNStart_Phys(ftKb_GObj* gobj);\n/* 0FAFF4 */ void ftKb_KpSpecialAirN_Phys(ftKb_GObj* gobj);\n/* 0FB014 */ void ftKb_KpSpecialAirNEnd_Phys(ftKb_GObj* gobj);\n/* 0FB034 */ void ftKb_KpSpecialNStart_Coll(ftKb_GObj* gobj);\n/* 0FB0C4 */ void ftKb_KpSpecialN_Coll(ftKb_GObj* gobj);\n/* 0FB154 */ void ftKb_KpSpecialNEnd_Coll(ftKb_GObj* gobj);\n/* 0FB1E4 */ void ftKb_KpSpecialAirNStart_Coll(ftKb_GObj* gobj);\n/* 0FB274 */ void ftKb_KpSpecialAirN_Coll(ftKb_GObj* gobj);\n/* 0FB304 */ void ftKb_KpSpecialAirNEnd_Coll(ftKb_GObj* gobj);\n/* 0FB394 */ void ftKb_SpecialNLk800FB394(ftKb_GObj* gobj);\n/* 0FB418 */ void ftKb_SpecialNLk800FB418(ftKb_GObj* gobj);\n/* 0FB444 */ void ftKb_SpecialNLk800FB444(ftKb_GObj* gobj);\n/* 0FB470 */ void ftKb_SpecialNLk800FB470(ftKb_GObj* gobj);\n/* 0FB500 */ void ftKb_SpecialNLk800FB500(ftKb_GObj* gobj);\n/* 0FB5F4 */ void ftKb_SpecialNLk800FB5F4(ftKb_GObj* gobj);\n/* 0FB6DC */ void ftKb_SpecialNLk800FB6DC(ftKb_GObj* gobj);\n/* 0FB800 */ void ftKb_SpecialNLk800FB800(ftKb_GObj* gobj);\n/* 0FB840 */ void ftKb_SpecialNLk800FB840(ftKb_GObj* gobj);\n/* 0FB880 */ void ftKb_SpecialNLk800FB880(ftKb_GObj* gobj);\n/* 0FBA00 */ void ftKb_SpecialNLk800FBA00(ftKb_GObj* gobj);\n/* 0FBBC4 */ void ftKb_LkSpecialNStart_Anim(ftKb_GObj* gobj);\n/* 0FBDFC */ void ftKb_LkSpecialNLoop_Anim(ftKb_GObj* gobj);\n/* 0FBED0 */ void ftKb_LkSpecialNEnd_Anim(ftKb_GObj* gobj);\n/* 0FBF34 */ void ftKb_LkSpecialAirNStart_Anim(ftKb_GObj* gobj);\n/* 0FC1A0 */ void ftKb_LkSpecialAirNLoop_Anim(ftKb_GObj* gobj);\n/* 0FC274 */ void ftKb_LkSpecialAirNEnd_Anim(ftKb_GObj* gobj);\n/* 0FC374 */ void ftKb_LkSpecialNStart_IASA(ftKb_GObj* gobj);\n/* 0FC46C */ void ftKb_LkSpecialNLoop_IASA(ftKb_GObj* gobj);\n/* 0FC53C */ void ftKb_LkSpecialNEnd_IASA(ftKb_GObj* gobj);\n/* 0FC540 */ void ftKb_LkSpecialAirNStart_IASA(ftKb_GObj* gobj);\n/* 0FC638 */ void ftKb_LkSpecialAirNLoop_IASA(ftKb_GObj* gobj);\n/* 0FC708 */ void ftKb_LkSpecialAirNEnd_IASA(ftKb_GObj* gobj);\n/* 0FC70C */ void ftKb_LkSpecialNStart_Phys(ftKb_GObj* gobj);\n/* 0FC72C */ void ftKb_LkSpecialNLoop_Phys(ftKb_GObj* gobj);\n/* 0FC74C */ void ftKb_LkSpecialNEnd_Phys(ftKb_GObj* gobj);\n/* 0FC76C */ void ftKb_LkSpecialAirNStart_Phys(ftKb_GObj* gobj);\n/* 0FC78C */ void ftKb_LkSpecialAirNLoop_Phys(ftKb_GObj* gobj);\n/* 0FC7AC */ void ftKb_LkSpecialAirNEnd_Phys(ftKb_GObj* gobj);\n/* 0FC7CC */ void ftKb_LkSpecialNStart_Coll(ftKb_GObj* gobj);\n/* 0FC880 */ void ftKb_LkSpecialNLoop_Coll(ftKb_GObj* gobj);\n/* 0FC934 */ void ftKb_LkSpecialNEnd_Coll(ftKb_GObj* gobj);\n/* 0FC9F0 */ void ftKb_LkSpecialAirNStart_Coll(ftKb_GObj* gobj);\n/* 0FCAA4 */ void ftKb_LkSpecialAirNLoop_Coll(ftKb_GObj* gobj);\n/* 0FCB58 */ void ftKb_LkSpecialAirNEnd_Coll(ftKb_GObj* gobj);\n/* 0FCC14 */ void ftKb_SpecialNSs_800FCC14(ftKb_GObj* gobj);\n/* 0FCC6C */ void ftKb_SpecialNSs_800FCC6C(ftKb_GObj* gobj);\n/* 0FCCBC */ void ftKb_SpecialNSs_800FCCBC(ftKb_GObj* gobj);\n/* 0FCD04 */ void ftKb_SpecialNSs_800FCD04(ftKb_GObj* gobj);\n/* 0FCD60 */ void ftKb_SpecialNSs_800FCD60(ftKb_GObj* gobj);\n/* 0FCDE0 */ void ftKb_SpecialNSs_800FCDE0(ftKb_GObj* gobj);\n/* 0FCF74 */ void ftKb_SpecialNSs_800FCF74(ftKb_GObj* gobj);\n/* 0FD020 */ void ftKb_SpecialNSs_800FD020(ftKb_GObj* gobj);\n/* 0FD0BC */ void ftKb_SsSpecialNStart_Anim(ftKb_GObj* gobj);\n/* 0FD250 */ void ftKb_SsSpecialNHold_Anim(ftKb_GObj* gobj);\n/* 0FD418 */ void ftKb_SsSpecialNCancel_Anim(ftKb_GObj* gobj);\n/* 0FD49C */ void ftKb_SsSpecialN_Anim(ftKb_GObj* gobj);\n/* 0FD4E0 */ void ftKb_SsSpecialAirNStart_Anim(ftKb_GObj* gobj);\n/* 0FD608 */ void ftKb_SsSpecialAirN_Anim(ftKb_GObj* gobj);\n/* 0FD688 */ void ftKb_SsSpecialNStart_IASA(ftKb_GObj* gobj);\n/* 0FD68C */ void ftKb_SsSpecialNHold_IASA(ftKb_GObj* gobj);\n/* 0FD7E0 */ void ftKb_SsSpecialNCancel_IASA(ftKb_GObj* gobj);\n/* 0FD7E4 */ void ftKb_SsSpecialN_IASA(ftKb_GObj* gobj);\n/* 0FD7E8 */ void ftKb_SsSpecialAirNStart_IASA(ftKb_GObj* gobj);\n/* 0FD7EC */ void ftKb_SsSpecialAirN_IASA(ftKb_GObj* gobj);\n/* 0FD7F0 */ void ftKb_SsSpecialNStart_Phys(ftKb_GObj* gobj);\n/* 0FD810 */ void ftKb_SsSpecialNHold_Phys(ftKb_GObj* gobj);\n/* 0FD830 */ void ftKb_SsSpecialNCancel_Phys(ftKb_GObj* gobj);\n/* 0FD850 */ void ftKb_SsSpecialN_Phys(ftKb_GObj* gobj);\n/* 0FD870 */ void ftKb_SsSpecialAirNStart_Phys(ftKb_GObj* gobj);\n/* 0FD890 */ void ftKb_SsSpecialAirN_Phys(ftKb_GObj* gobj);\n/* 0FD8B0 */ void ftKb_SsSpecialNStart_Coll(ftKb_GObj* gobj);\n/* 0FD938 */ void ftKb_SsSpecialNHold_Coll(ftKb_GObj* gobj);\n/* 0FD9E0 */ void ftKb_SsSpecialNCancel_Coll(ftKb_GObj* gobj);\n/* 0FDA68 */ void ftKb_SsSpecialN_Coll(ftKb_GObj* gobj);\n/* 0FDAF0 */ void ftKb_SsSpecialAirNStart_Coll(ftKb_GObj* gobj);\n/* 0FDB78 */ void ftKb_SsSpecialAirN_Coll(ftKb_GObj* gobj);\n/* 0FDC00 */ void ftKb_SpecialNFx_800FDC00(ftKb_GObj* gobj);\n/* 0FDC70 */ void ftKb_SpecialNFx_800FDC70(ftKb_GObj* gobj);\n/* 0FDD14 */ void ftKb_SpecialNFx_800FDD14(ftKb_GObj* gobj);\n/* 0FDD4C */ void ftKb_SpecialNFx_800FDD4C(ftKb_GObj* gobj);\n/* 0FDDF4 */ void ftKb_SpecialNFx_800FDDF4(ftKb_GObj* gobj);\n/* 0FDEB4 */ void ftKb_SpecialNFx_800FDEB4(ftKb_GObj* gobj);\n/* 0FDEE0 */ void ftKb_SpecialNFx_800FDEE0(ftKb_GObj* gobj);\n/* 0FDF30 */ void ftKb_SpecialNFx_800FDF30(ftKb_GObj* gobj);\n/* 0FE100 */ void ftKb_SpecialNFx_800FE100(ftKb_GObj* gobj);\n/* 0FE240 */ void ftKb_SpecialNFx_800FE240(ftKb_GObj* gobj);\n/* 0FE360 */ void ftKb_FxSpecialNStart_Anim(ftKb_GObj* gobj);\n/* 0FE450 */ void ftKb_FxSpecialNLoop_Anim(ftKb_GObj* gobj);\n/* 0FE5C8 */ void ftKb_FxSpecialNEnd_Anim(ftKb_GObj* gobj);\n/* 0FE688 */ void ftKb_FxSpecialAirNStart_Anim(ftKb_GObj* gobj);\n/* 0FE778 */ void ftKb_FxSpecialAirNLoop_Anim(ftKb_GObj* gobj);\n/* 0FE928 */ void ftKb_FxSpecialAirNEnd_Anim(ftKb_GObj* gobj);\n/* 0FEA50 */ void ftKb_FxSpecialNStart_IASA(ftKb_GObj* gobj);\n/* 0FEA78 */ void ftKb_FxSpecialNLoop_IASA(ftKb_GObj* gobj);\n/* 0FEAA0 */ void ftKb_FxSpecialNEnd_IASA(ftKb_GObj* gobj);\n/* 0FEAA4 */ void ftKb_FxSpecialAirNStart_IASA(ftKb_GObj* gobj);\n/* 0FEACC */ void ftKb_FxSpecialAirNLoop_IASA(ftKb_GObj* gobj);\n/* 0FEAF4 */ void ftKb_FxSpecialAirNEnd_IASA(ftKb_GObj* gobj);\n/* 0FEAF8 */ void ftKb_FxSpecialNStart_Phys(ftKb_GObj* gobj);\n/* 0FEB18 */ void ftKb_FxSpecialNLoop_Phys(ftKb_GObj* gobj);\n/* 0FEB38 */ void ftKb_FxSpecialNEnd_Phys(ftKb_GObj* gobj);\n/* 0FEB58 */ void ftKb_FxSpecialAirNStart_Phys(ftKb_GObj* gobj);\n/* 0FEB78 */ void ftKb_FxSpecialAirNLoop_Phys(ftKb_GObj* gobj);\n/* 0FEB98 */ void ftKb_FxSpecialAirNEnd_Phys(ftKb_GObj* gobj);\n/* 0FEBB8 */ void ftKb_FxSpecialNStart_Coll(ftKb_GObj* gobj);\n/* 0FEBD8 */ void ftKb_FxSpecialNLoop_Coll(ftKb_GObj* gobj);\n/* 0FEBF8 */ void ftKb_FxSpecialNEnd_Coll(ftKb_GObj* gobj);\n/* 0FEC18 */ void ftKb_FxSpecialAirNStart_Coll(ftKb_GObj* gobj);\n/* 0FEC38 */ void ftKb_FxSpecialAirNLoop_Coll(ftKb_GObj* gobj);\n/* 0FEC58 */ void ftKb_FxSpecialAirNEnd_Coll(ftKb_GObj* gobj);\n/* 0FEC78 */ void ftKb_SpecialNNs_800FEC78(ftKb_GObj* gobj);\n/* 0FECBC */ void ftKb_SpecialNNs_800FECBC(ftKb_GObj* gobj);\n/* 0FECE8 */ void ftKb_SpecialNNs_800FECE8(ftKb_GObj* gobj);\n/* 0FED38 */ void ftKb_SpecialNNs_800FED38(ftKb_GObj* gobj);\n/* 0FEDD0 */ void ftKb_SpecialNNs_800FEDD0(ftKb_GObj* gobj);\n/* 0FEE70 */ void ftKb_NsSpecialNStart_Anim(ftKb_GObj* gobj);\n/* 0FEF58 */ void ftKb_NsSpecialNHold_Anim(ftKb_GObj* gobj);\n/* 0FF08C */ void ftKb_NsSpecialNEnd_Anim(ftKb_GObj* gobj);\n/* 0FF10C */ void ftKb_NsSpecialAirNStart_Anim(ftKb_GObj* gobj);\n/* 0FF1F4 */ void ftKb_NsSpecialAirNHold_Anim(ftKb_GObj* gobj);\n/* 0FF328 */ void ftKb_NsSpecialAirNEnd_Anim(ftKb_GObj* gobj);\n/* 0FF3DC */ void ftKb_NsSpecialNStart_IASA(ftKb_GObj* gobj);\n/* 0FF3E0 */ void ftKb_NsSpecialNHold_IASA(ftKb_GObj* gobj);\n/* 0FF450 */ void ftKb_NsSpecialNEnd_IASA(ftKb_GObj* gobj);\n/* 0FF454 */ void ftKb_NsSpecialAirNStart_IASA(ftKb_GObj* gobj);\n/* 0FF458 */ void ftKb_NsSpecialAirNHold_IASA(ftKb_GObj* gobj);\n/* 0FF4C8 */ void ftKb_NsSpecialAirNEnd_IASA(ftKb_GObj* gobj);\n/* 0FF4CC */ void ftKb_NsSpecialNStart_Phys(ftKb_GObj* gobj);\n/* 0FF504 */ void ftKb_NsSpecialNHold_Phys(ftKb_GObj* gobj);\n/* 0FF524 */ void ftKb_NsSpecialNEnd_Phys(ftKb_GObj* gobj);\n/* 0FF544 */ void ftKb_NsSpecialAirNStart_Phys(ftKb_GObj* gobj);\n/* 0FF5A4 */ void ftKb_NsSpecialAirNHold_Phys(ftKb_GObj* gobj);\n/* 0FF604 */ void ftKb_NsSpecialAirNEnd_Phys(ftKb_GObj* gobj);\n/* 0FF664 */ void ftKb_NsSpecialNStart_Coll(ftKb_GObj* gobj);\n/* 0FF6D0 */ void ftKb_NsSpecialNHold_Coll(ftKb_GObj* gobj);\n/* 0FF73C */ void ftKb_NsSpecialNEnd_Coll(ftKb_GObj* gobj);\n/* 0FF7A8 */ void ftKb_NsSpecialAirNStart_Coll(ftKb_GObj* gobj);\n/* 0FF814 */ void ftKb_NsSpecialAirNHold_Coll(ftKb_GObj* gobj);\n/* 0FF880 */ void ftKb_NsSpecialAirNEnd_Coll(ftKb_GObj* gobj);\n/* 0FF8EC */ void ftKb_SpecialNDk_800FF8EC(ftKb_GObj* gobj);\n/* 0FFA10 */ void ftKb_SpecialNDk_800FFA10(ftKb_GObj* gobj);\n/* 0FFB24 */ void ftKb_DkSpecialNStart_Anim(ftKb_GObj* gobj);\n/* 0FFBAC */ void ftKb_DkSpecialNLoop_Anim(ftKb_GObj* gobj);\n/* 0FFC48 */ void ftKb_DkSpecialNCancel_Anim(ftKb_GObj* gobj);\n/* 0FFC94 */ void ftKb_DkSpecialN_Anim(ftKb_GObj* gobj);\n/* 0FFE6C */ void ftKb_DkSpecialNFull_Anim(ftKb_GObj* gobj);\n/* 0FFFB8 */ void ftKb_DkSpecialAirNStart_Anim(ftKb_GObj* gobj);\n/* 100040 */ void ftKb_DkSpecialAirNLoop_Anim(ftKb_GObj* gobj);\n/* 1000DC */ void ftKb_DkSpecialAirNCancel_Anim(ftKb_GObj* gobj);\n/* 100128 */ void ftKb_DkSpecialAirN_Anim(ftKb_GObj* gobj);\n/* 1002C8 */ void ftKb_DkSpecialAirNFull_Anim(ftKb_GObj* gobj);\n/* 1003DC */ void ftKb_DkSpecialNStart_IASA(ftKb_GObj* gobj);\n/* 1003E0 */ void ftKb_DkSpecialNLoop_IASA(ftKb_GObj* gobj);\n/* 100518 */ void ftKb_DkSpecialNCancel_IASA(ftKb_GObj* gobj);\n/* 10051C */ void ftKb_DkSpecialN_IASA(ftKb_GObj* gobj);\n/* 100520 */ void ftKb_DkSpecialNFull_IASA(ftKb_GObj* gobj);\n/* 100524 */ void ftKb_DkSpecialAirNStart_IASA(ftKb_GObj* gobj);\n/* 100528 */ void ftKb_DkSpecialAirNLoop_IASA(ftKb_GObj* gobj);\n/* 100654 */ void ftKb_DkSpecialAirNCancel_IASA(ftKb_GObj* gobj);\n/* 100658 */ void ftKb_DkSpecialAirN_IASA(ftKb_GObj* gobj);\n/* 10065C */ void ftKb_DkSpecialAirNFull_IASA(ftKb_GObj* gobj);\n/* 100660 */ void ftKb_DkSpecialNStart_Phys(ftKb_GObj* gobj);\n/* 100680 */ void ftKb_DkSpecialNLoop_Phys(ftKb_GObj* gobj);\n/* 1006A0 */ void ftKb_DkSpecialNCancel_Phys(ftKb_GObj* gobj);\n/* 1006C0 */ void ftKb_DkSpecialN_Phys(ftKb_GObj* gobj);\n/* 1006E0 */ void ftKb_DkSpecialNFull_Phys(ftKb_GObj* gobj);\n/* 100700 */ void ftKb_DkSpecialAirNStart_Phys(ftKb_GObj* gobj);\n/* 100720 */ void ftKb_DkSpecialAirNLoop_Phys(ftKb_GObj* gobj);\n/* 100740 */ void ftKb_DkSpecialAirNCancel_Phys(ftKb_GObj* gobj);\n/* 100760 */ void ftKb_DkSpecialAirN_Phys(ftKb_GObj* gobj);\n/* 100780 */ void ftKb_DkSpecialAirNFull_Phys(ftKb_GObj* gobj);\n/* 1007A0 */ void ftKb_DkSpecialNStart_Coll(ftKb_GObj* gobj);\n/* 100840 */ void ftKb_DkSpecialNLoop_Coll(ftKb_GObj* gobj);\n/* 1008E0 */ void ftKb_DkSpecialNCancel_Coll(ftKb_GObj* gobj);\n/* 100980 */ void ftKb_DkSpecialN_Coll(ftKb_GObj* gobj);\n/* 100A20 */ void ftKb_DkSpecialNFull_Coll(ftKb_GObj* gobj);\n/* 100AC0 */ void ftKb_DkSpecialAirNStart_Coll(ftKb_GObj* gobj);\n/* 100B60 */ void ftKb_DkSpecialAirNLoop_Coll(ftKb_GObj* gobj);\n/* 100C00 */ void ftKb_DkSpecialAirNCancel_Coll(ftKb_GObj* gobj);\n/* 100CA0 */ void ftKb_DkSpecialAirN_Coll(ftKb_GObj* gobj);\n/* 100D40 */ void ftKb_DkSpecialAirNFull_Coll(ftKb_GObj* gobj);\n/* 100DE0 */ void ftKb_SpecialNPr_80100DE0(ftKb_GObj* gobj);\n/* 100F94 */ void ftKb_SpecialNPr_80100F94(ftKb_GObj* gobj);\n/* 1010D4 */ void ftKb_SpecialNPr_801010D4(ftKb_GObj* gobj);\n/* 10131C */ void ftKb_SpecialNPr_8010131C(ftKb_GObj* gobj);\n/* 10140C */ void ftKb_SpecialNPr_8010140C(ftKb_GObj* gobj);\n/* 101560 */ void ftKb_SpecialNPr_80101560(ftKb_GObj* gobj);\n/* 101618 */ void ftKb_SpecialNPr_80101618(ftKb_GObj* gobj);\n/* 1016CC */ void ftKb_PrSpecialNStart_Anim(ftKb_GObj* gobj);\n/* 1017B0 */ void ftKb_PrSpecialNLoop_Anim(ftKb_GObj* gobj);\n/* 101960 */ void ftKb_PrSpecialNFull_Anim(ftKb_GObj* gobj);\n/* 101AD0 */ void ftKb_PrSpecialN1_Anim(ftKb_GObj* gobj);\n/* 101EA0 */ void ftKb_PrSpecialNTurn_Anim(ftKb_GObj* gobj);\n/* 102198 */ void ftKb_PrSpecialNEnd_Anim(ftKb_GObj* gobj);\n/* 102470 */ void ftKb_PrSpecialAirNStart_Anim(ftKb_GObj* gobj);\n/* 10254C */ void ftKb_PrSpecialAirNLoop_Anim(ftKb_GObj* gobj);\n/* 1026FC */ void ftKb_PrSpecialAirNFull_Anim(ftKb_GObj* gobj);\n/* 10286C */ void ftKb_PrSpecialAirN_Anim(ftKb_GObj* gobj);\n/* 102DD0 */ void ftKb_PrSpecialN_Anim(ftKb_GObj* gobj);\n/* 103088 */ void ftKb_PrSpecialAirNEndR_Anim(ftKb_GObj* gobj);\n/* 103374 */ void ftKb_PrSpecialNHit_Anim(ftKb_GObj* gobj);\n/* 1035C8 */ void ftKb_PrSpecialNStart_IASA(ftKb_GObj* gobj);\n/* 1035CC */ void ftKb_PrSpecialNLoop_IASA(ftKb_GObj* gobj);\n/* 103734 */ void ftKb_PrSpecialNFull_IASA(ftKb_GObj* gobj);\n/* 10389C */ void ftKb_PrSpecialN1_IASA(ftKb_GObj* gobj);\n/* 103A24 */ void ftKb_PrSpecialNTurn_IASA(ftKb_GObj* gobj);\n/* 103A28 */ void ftKb_PrSpecialNEnd_IASA(ftKb_GObj* gobj);\n/* 103A2C */ void ftKb_PrSpecialAirNStart_IASA(ftKb_GObj* gobj);\n/* 103A30 */ void ftKb_PrSpecialAirNLoop_IASA(ftKb_GObj* gobj);\n/* 103B98 */ void ftKb_PrSpecialAirNFull_IASA(ftKb_GObj* gobj);\n/* 103D00 */ void ftKb_PrSpecialAirN_IASA(ftKb_GObj* gobj);\n/* 103D04 */ void ftKb_PrSpecialN_IASA(ftKb_GObj* gobj);\n/* 103D08 */ void ftKb_PrSpecialAirNEndR_IASA(ftKb_GObj* gobj);\n/* 103D0C */ void ftKb_PrSpecialNHit_IASA(ftKb_GObj* gobj);\n/* 103D10 */ void ftKb_PrSpecialNStart_Phys(ftKb_GObj* gobj);\n/* 103D40 */ void ftKb_PrSpecialNLoop_Phys(ftKb_GObj* gobj);\n/* 103D70 */ void ftKb_PrSpecialNFull_Phys(ftKb_GObj* gobj);\n/* 103DA0 */ void ftKb_PrSpecialN1_Phys(ftKb_GObj* gobj);\n/* 103FA8 */ void ftKb_PrSpecialNTurn_Phys(ftKb_GObj* gobj);\n/* 1042AC */ void ftKb_PrSpecialNEnd_Phys(ftKb_GObj* gobj);\n/* 1042E8 */ void ftKb_PrSpecialAirNStart_Phys(ftKb_GObj* gobj);\n/* 104318 */ void ftKb_PrSpecialAirNLoop_Phys(ftKb_GObj* gobj);\n/* 104348 */ void ftKb_PrSpecialAirNFull_Phys(ftKb_GObj* gobj);\n/* 104378 */ void ftKb_PrSpecialAirN_Phys(ftKb_GObj* gobj);\n/* 1044F8 */ void ftKb_PrSpecialN_Phys(ftKb_GObj* gobj);\n/* 104610 */ void ftKb_PrSpecialAirNEndR_Phys(ftKb_GObj* gobj);\n/* 104640 */ void ftKb_PrSpecialNHit_Phys(ftKb_GObj* gobj);\n/* 1046A4 */ void ftKb_PrSpecialNStart_Coll(ftKb_GObj* gobj);\n/* 10475C */ void ftKb_PrSpecialNLoop_Coll(ftKb_GObj* gobj);\n/* 104864 */ void ftKb_PrSpecialNFull_Coll(ftKb_GObj* gobj);\n/* 10496C */ void ftKb_PrSpecialN1_Coll(ftKb_GObj* gobj);\n/* 104D14 */ void ftKb_PrSpecialNTurn_Coll(ftKb_GObj* gobj);\n/* 104DF8 */ void ftKb_PrSpecialNEnd_Coll(ftKb_GObj* gobj);\n/* 104E58 */ void ftKb_PrSpecialAirNStart_Coll(ftKb_GObj* gobj);\n/* 104F10 */ void ftKb_PrSpecialAirNLoop_Coll(ftKb_GObj* gobj);\n/* 105018 */ void ftKb_PrSpecialAirNFull_Coll(ftKb_GObj* gobj);\n/* 105120 */ void ftKb_PrSpecialAirN_Coll(ftKb_GObj* gobj);\n/* 1056FC */ void ftKb_PrSpecialN_Coll(ftKb_GObj* gobj);\n/* 1057BC */ void ftKb_PrSpecialAirNEndR_Coll(ftKb_GObj* gobj);\n/* 10581C */ void ftKb_PrSpecialNHit_Coll(ftKb_GObj* gobj);\n/* 105B2C */ void ftKb_SpecialNZd_80105B2C(ftKb_GObj* gobj);\n/* 105BA8 */ void ftKb_SpecialNZd_80105BA8(ftKb_GObj* gobj);\n/* 105C3C */ void ftKb_ZdSpecialN_Anim(ftKb_GObj* gobj);\n/* 105CD0 */ void ftKb_ZdSpecialAirN_Anim(ftKb_GObj* gobj);\n/* 105D64 */ void ftKb_ZdSpecialN_IASA(ftKb_GObj* gobj);\n/* 105D68 */ void ftKb_ZdSpecialAirN_IASA(ftKb_GObj* gobj);\n/* 105D6C */ void ftKb_ZdSpecialN_Phys(ftKb_GObj* gobj);\n/* 105DA0 */ void ftKb_ZdSpecialAirN_Phys(ftKb_GObj* gobj);\n/* 105E14 */ void ftKb_ZdSpecialN_Coll(ftKb_GObj* gobj);\n/* 105E50 */ void ftKb_ZdSpecialAirN_Coll(ftKb_GObj* gobj);\n/* 105E8C */ void ftKb_SpecialNSk_80105E8C(ftKb_GObj* gobj);\n/* 105F3C */ void ftKb_SpecialNSk_80105F3C(ftKb_GObj* gobj);\n/* 105FF0 */ void ftKb_SpecialNSk_80105FF0(ftKb_GObj* gobj);\n/* 106020 */ void ftKb_SpecialNSk_80106020(ftKb_GObj* gobj);\n/* 10603C */ void ftKb_SpecialNSk_8010603C(ftKb_GObj* gobj);\n/* 10612C */ void ftKb_SpecialNSk_8010612C(ftKb_GObj* gobj);\n/* 1061E4 */ void ftKb_SpecialNSk_801061E4(ftKb_GObj* gobj);\n/* 10629C */ void ftKb_SkSpecialNStart_Anim(ftKb_GObj* gobj);\n/* 106334 */ void ftKb_SkSpecialNLoop_Anim(ftKb_GObj* gobj);\n/* 1063E0 */ void ftKb_SkSpecialNCancel_Anim(ftKb_GObj* gobj);\n/* 106428 */ void ftKb_SkSpecialNEnd_Anim(ftKb_GObj* gobj);\n/* 1064AC */ void ftKb_SkSpecialAirNStart_Anim(ftKb_GObj* gobj);\n/* 106544 */ void ftKb_SkSpecialAirNLoop_Anim(ftKb_GObj* gobj);\n/* 1065F0 */ void ftKb_SkSpecialAirNCancel_Anim(ftKb_GObj* gobj);\n/* 106670 */ void ftKb_SkSpecialAirNEnd_Anim(ftKb_GObj* gobj);\n/* 10672C */ void ftKb_SkSpecialNStart_IASA(ftKb_GObj* gobj);\n/* 106730 */ void ftKb_SkSpecialNLoop_IASA(ftKb_GObj* gobj);\n/* 10680C */ void ftKb_SkSpecialNCancel_IASA(ftKb_GObj* gobj);\n/* 106810 */ void ftKb_SkSpecialNEnd_IASA(ftKb_GObj* gobj);\n/* 106814 */ void ftKb_SkSpecialAirNStart_IASA(ftKb_GObj* gobj);\n/* 106818 */ void ftKb_SkSpecialAirNLoop_IASA(ftKb_GObj* gobj);\n/* 1068F4 */ void ftKb_SkSpecialAirNCancel_IASA(ftKb_GObj* gobj);\n/* 1068F8 */ void ftKb_SkSpecialAirNEnd_IASA(ftKb_GObj* gobj);\n/* 1068FC */ void ftKb_SkSpecialNStart_Phys(ftKb_GObj* gobj);\n/* 10691C */ void ftKb_SkSpecialNLoop_Phys(ftKb_GObj* gobj);\n/* 10693C */ void ftKb_SkSpecialNCancel_Phys(ftKb_GObj* gobj);\n/* 10695C */ void ftKb_SkSpecialNEnd_Phys(ftKb_GObj* gobj);\n/* 10697C */ void ftKb_SkSpecialAirNStart_Phys(ftKb_GObj* gobj);\n/* 10699C */ void ftKb_SkSpecialAirNLoop_Phys(ftKb_GObj* gobj);\n/* 1069BC */ void ftKb_SkSpecialAirNCancel_Phys(ftKb_GObj* gobj);\n/* 1069DC */ void ftKb_SkSpecialAirNEnd_Phys(ftKb_GObj* gobj);\n/* 1069FC */ void ftKb_SkSpecialNStart_Coll(ftKb_GObj* gobj);\n/* 106A84 */ void ftKb_SkSpecialNLoop_Coll(ftKb_GObj* gobj);\n/* 106B0C */ void ftKb_SkSpecialNCancel_Coll(ftKb_GObj* gobj);\n/* 106B84 */ void ftKb_SkSpecialNEnd_Coll(ftKb_GObj* gobj);\n/* 106C10 */ void ftKb_SkSpecialAirNStart_Coll(ftKb_GObj* gobj);\n/* 106C98 */ void ftKb_SkSpecialAirNLoop_Coll(ftKb_GObj* gobj);\n/* 106D20 */ void ftKb_SkSpecialAirNCancel_Coll(ftKb_GObj* gobj);\n/* 106D5C */ void ftKb_SkSpecialAirNEnd_Coll(ftKb_GObj* gobj);\n/* 106F44 */ void ftKb_SpecialNMt_80106F44(ftKb_GObj* gobj);\n/* 106F9C */ void ftKb_SpecialNMt_80106F9C(ftKb_GObj* gobj);\n/* 106FEC */ void ftKb_SpecialNMt_80106FEC(ftKb_GObj* gobj);\n/* 107040 */ void ftKb_SpecialNMt_80107040(ftKb_GObj* gobj);\n/* 10709C */ void ftKb_SpecialNMt_8010709C(ftKb_GObj* gobj);\n/* 107130 */ void ftKb_SpecialNMt_80107130(ftKb_GObj* gobj);\n/* 1071FC */ void ftKb_SpecialNMt_801071FC(ftKb_GObj* gobj);\n/* 107410 */ void ftKb_SpecialNMt_80107410(ftKb_GObj* gobj);\n/* 107568 */ void ftKb_SpecialNMt_80107568(ftKb_GObj* gobj);\n/* 107638 */ void ftKb_SpecialNMt_80107638(ftKb_GObj* gobj);\n/* 107700 */ void ftKb_MtSpecialNStart_Anim(ftKb_GObj* gobj);\n/* 107884 */ void ftKb_MtSpecialNLoop_Anim(ftKb_GObj* gobj);\n/* 107A84 */ void ftKb_MtSpecialNLoopFull_Anim(ftKb_GObj* gobj);\n/* 107AB4 */ void ftKb_MtSpecialNCancel_Anim(ftKb_GObj* gobj);\n/* 107B38 */ void ftKb_MtSpecialNEnd_Anim(ftKb_GObj* gobj);\n/* 107B7C */ void ftKb_MtSpecialAirNStart_Anim(ftKb_GObj* gobj);\n/* 107D0C */ void ftKb_MtSpecialAirNLoop_Anim(ftKb_GObj* gobj);\n/* 107F0C */ void ftKb_MtSpecialAirNLoopFull_Anim(ftKb_GObj* gobj);\n/* 107F3C */ void ftKb_MtSpecialAirNCancel_Anim(ftKb_GObj* gobj);\n/* 107FC0 */ void ftKb_MtSpecialAirNEnd_Anim(ftKb_GObj* gobj);\n/* 108040 */ void ftKb_MtSpecialNStart_IASA(ftKb_GObj* gobj);\n/* 108044 */ void ftKb_MtSpecialNLoop_IASA(ftKb_GObj* gobj);\n/* 1081F8 */ void ftKb_MtSpecialNLoopFull_IASA(ftKb_GObj* gobj);\n/* 108394 */ void ftKb_MtSpecialNCancel_IASA(ftKb_GObj* gobj);\n/* 108398 */ void ftKb_MtSpecialNEnd_IASA(ftKb_GObj* gobj);\n/* 10839C */ void ftKb_MtSpecialAirNStart_IASA(ftKb_GObj* gobj);\n/* 1083A0 */ void ftKb_MtSpecialAirNLoop_IASA(ftKb_GObj* gobj);\n/* 108504 */ void ftKb_MtSpecialAirNLoopFull_IASA(ftKb_GObj* gobj);\n/* 108650 */ void ftKb_MtSpecialAirNCancel_IASA(ftKb_GObj* gobj);\n/* 108654 */ void ftKb_MtSpecialAirNEnd_IASA(ftKb_GObj* gobj);\n/* 108658 */ void ftKb_MtSpecialNStart_Phys(ftKb_GObj* gobj);\n/* 108678 */ void ftKb_MtSpecialNLoop_Phys(ftKb_GObj* gobj);\n/* 108698 */ void ftKb_MtSpecialNLoopFull_Phys(ftKb_GObj* gobj);\n/* 1086B8 */ void ftKb_MtSpecialNCancel_Phys(ftKb_GObj* gobj);\n/* 1086D8 */ void ftKb_MtSpecialNEnd_Phys(ftKb_GObj* gobj);\n/* 1086F8 */ void ftKb_MtSpecialAirNStart_Phys(ftKb_GObj* gobj);\n/* 108718 */ void ftKb_MtSpecialAirNLoop_Phys(ftKb_GObj* gobj);\n/* 108738 */ void ftKb_MtSpecialAirNLoopFull_Phys(ftKb_GObj* gobj);\n/* 108758 */ void ftKb_MtSpecialAirNCancel_Phys(ftKb_GObj* gobj);\n/* 108778 */ void ftKb_MtSpecialAirNEnd_Phys(ftKb_GObj* gobj);\n/* 108798 */ void ftKb_MtSpecialNStart_Coll(ftKb_GObj* gobj);\n/* 108820 */ void ftKb_MtSpecialNLoop_Coll(ftKb_GObj* gobj);\n/* 1088A8 */ void ftKb_MtSpecialNLoopFull_Coll(ftKb_GObj* gobj);\n/* 108930 */ void ftKb_MtSpecialNCancel_Coll(ftKb_GObj* gobj);\n/* 1089B8 */ void ftKb_MtSpecialNEnd_Coll(ftKb_GObj* gobj);\n/* 108A40 */ void ftKb_MtSpecialAirNStart_Coll(ftKb_GObj* gobj);\n/* 108AC8 */ void ftKb_MtSpecialAirNLoop_Coll(ftKb_GObj* gobj);\n/* 108B50 */ void ftKb_MtSpecialAirNLoopFull_Coll(ftKb_GObj* gobj);\n/* 108BD8 */ void ftKb_MtSpecialAirNCancel_Coll(ftKb_GObj* gobj);\n/* 108C60 */ void ftKb_MtSpecialAirNEnd_Coll(ftKb_GObj* gobj);\n/* 108CE8 */ void ftKb_SpecialNIc_80108CE8(ftKb_GObj* gobj);\n/* 108D04 */ void ftKb_SpecialNIc_80108D04(ftKb_GObj* gobj);\n/* 108D64 */ void ftKb_SpecialNIc_80108D64(ftKb_GObj* gobj);\n/* 108E14 */ void ftKb_SpecialNIc_80108E14(ftKb_GObj* gobj);\n/* 108EFC */ void ftKb_PpSpecialN_Anim(ftKb_GObj* gobj);\n/* 108F38 */ void ftKb_PpSpecialAirN_Anim(ftKb_GObj* gobj);\n/* 108F74 */ void ftKb_PpSpecialN_IASA(ftKb_GObj* gobj);\n/* 108F78 */ void ftKb_PpSpecialAirN_IASA(ftKb_GObj* gobj);\n/* 108F7C */ void ftKb_PpSpecialN_Phys(ftKb_GObj* gobj);\n/* 108F9C */ void ftKb_PpSpecialAirN_Phys(ftKb_GObj* gobj);\n/* 108FBC */ void ftKb_PpSpecialN_Coll(ftKb_GObj* gobj);\n/* 109030 */ void ftKb_PpSpecialAirN_Coll(ftKb_GObj* gobj);\n/* 109238 */ void ftKb_SpecialNYs_80109238(ftKb_GObj* gobj);\n/* 109260 */ void ftKb_SpecialNYs_80109260(ftKb_GObj* gobj);\n/* 109290 */ void ftKb_SpecialNYs_80109290(ftKb_GObj* gobj);\n/* 10929C */ void ftKb_SpecialNYs_8010929C(ftKb_GObj* gobj);\n/* 1092AC */ void ftKb_SpecialNYs_801092AC(ftKb_GObj* gobj);\n/* 1092BC */ void ftKb_SpecialNYs_801092BC(ftKb_GObj* gobj);\n/* 1092CC */ void ftKb_SpecialNYs_801092CC(ftKb_GObj* gobj);\n/* 1092DC */ void ftKb_SpecialNYs_801092DC(ftKb_GObj* gobj);\n/* 1092F4 */ void ftKb_SpecialNYs_801092F4(ftKb_GObj* gobj);\n/* 10930C */ void ftKb_SpecialNYs_8010930C(ftKb_GObj* gobj);\n/* 109324 */ void ftKb_SpecialNYs_80109324(ftKb_GObj* gobj);\n/* 10933C */ void ftKb_SpecialNYs_8010933C(ftKb_GObj* gobj);\n/* 109354 */ void ftKb_SpecialNYs_80109354(ftKb_GObj* gobj);\n/* 109380 */ void ftKb_SpecialNYs_80109380(ftKb_GObj* gobj);\n/* 1093A0 */ void ftKb_SpecialNYs_801093A0(ftKb_GObj* gobj);\n/* 1093B4 */ void ftKb_SpecialNYs_801093B4(ftKb_GObj* gobj);\n/* 10941C */ void ftKb_SpecialNYs_8010941C(ftKb_GObj* gobj);\n/* 1094FC */ void ftKb_SpecialNYs_801094FC(ftKb_GObj* gobj);\n/* 109D6C */ void ftKb_YsSpecialN1_Anim(ftKb_GObj* gobj);\n/* 109DB8 */ void ftKb_YsSpecialAirNCapture2_Anim(ftKb_GObj* gobj);\n/* 109E04 */ void ftKb_YsSpecialAirNCapture1_Anim(ftKb_GObj* gobj);\n/* 109EE8 */ void ftKb_YsSpecialNCapture1_Anim(ftKb_GObj* gobj);\n/* 109FD4 */ void ftKb_YsSpecialAirCapture2_Anim(ftKb_GObj* gobj);\n/* 10A0B8 */ void ftKb_YsSpecialAirCapture1_Anim(ftKb_GObj* gobj);\n/* 10A1A4 */ void ftKb_YsSpecialNCapture2_0_Anim(ftKb_GObj* gobj);\n/* 10A304 */ void ftKb_YsSpecialNCapture2_1_Anim(ftKb_GObj* gobj);\n/* 10A3C8 */ void ftKb_YsSpecialAirN2_1_Anim(ftKb_GObj* gobj);\n/* 10A528 */ void ftKb_YsSpecialAirN2_0_Anim(ftKb_GObj* gobj);\n/* 10A5EC */ void ftKb_YsSpecialN1_Phys(ftKb_GObj* gobj);\n/* 10A60C */ void ftKb_YsSpecialAirNCapture2_Phys(ftKb_GObj* gobj);\n/* 10A62C */ void ftKb_YsSpecialAirNCapture1_Phys(ftKb_GObj* gobj);\n/* 10A64C */ void ftKb_YsSpecialNCapture1_Phys(ftKb_GObj* gobj);\n/* 10A66C */ void ftKb_YsSpecialAirCapture1_Phys(ftKb_GObj* gobj);\n/* 10A68C */ void ftKb_YsSpecialAirCapture2_Phys(ftKb_GObj* gobj);\n/* 10A6AC */ void ftKb_YsSpecialNCapture2_0_Phys(ftKb_GObj* gobj);\n/* 10A6CC */ void ftKb_YsSpecialNCapture2_1_Phys(ftKb_GObj* gobj);\n/* 10A6EC */ void ftKb_YsSpecialAirN2_1_Phys(ftKb_GObj* gobj);\n/* 10A70C */ void ftKb_YsSpecialAirN2_0_Phys(ftKb_GObj* gobj);\n/* 10A72C */ void ftKb_YsSpecialN1_Coll(ftKb_GObj* gobj);\n/* 10A754 */ void ftKb_YsSpecialAirNCapture2_Coll(ftKb_GObj* gobj);\n/* 10A77C */ void ftKb_YsSpecialAirNCapture1_Coll(ftKb_GObj* gobj);\n/* 10A7A4 */ void ftKb_YsSpecialNCapture1_Coll(ftKb_GObj* gobj);\n/* 10A7CC */ void ftKb_YsSpecialAirCapture2_Coll(ftKb_GObj* gobj);\n/* 10A7F4 */ void ftKb_YsSpecialAirCapture1_Coll(ftKb_GObj* gobj);\n/* 10A81C */ void ftKb_YsSpecialNCapture2_0_Coll(ftKb_GObj* gobj);\n/* 10A844 */ void ftKb_YsSpecialNCapture2_1_Coll(ftKb_GObj* gobj);\n/* 10A86C */ void ftKb_YsSpecialAirN2_1_Coll(ftKb_GObj* gobj);\n/* 10A894 */ void ftKb_YsSpecialAirN2_0_Coll(ftKb_GObj* gobj);\n/* 10A8BC */ void ftKb_SpecialNYs_8010A8BC(ftKb_GObj* gobj);\n/* 10AA1C */ void ftCo_CaptureKirbyYoshi_Anim(ftKb_GObj* gobj);\n/* 10AA20 */ void ftCo_CaptureKirbyYoshi_IASA(ftKb_GObj* gobj);\n/* 10AA24 */ void ftCo_CaptureKirbyYoshi_Phys(ftKb_GObj* gobj);\n/* 10AA28 */ void ftCo_CaptureKirbyYoshi_Coll(ftKb_GObj* gobj);\n/* 10AA2C */ void ftKb_SpecialNYs_8010AA2C(ftKb_GObj* gobj);\n/* 10AC78 */ void ftKb_SpecialNYs_8010AC78(ftKb_GObj* gobj);\n/* 10AF54 */ void ftCo_KirbyYoshiEgg_Anim(ftKb_GObj* gobj);\n/* 10B0A0 */ void ftCo_KirbyYoshiEgg_IASA(ftKb_GObj* gobj);\n/* 10B0A4 */ void ftCo_KirbyYoshiEgg_Phys(ftKb_GObj* gobj);\n/* 10B0DC */ void ftCo_KirbyYoshiEgg_Coll(ftKb_GObj* gobj);\n/* 10B2FC */ void ftKb_SpecialNMs_8010B2FC(ftKb_GObj* gobj);\n/* 10B4A0 */ void ftKb_SpecialNMs_8010B4A0(ftKb_GObj* gobj);\n/* 10B65C */ void ftKb_MsSpecialNStart_Anim(ftKb_GObj* gobj);\n/* 10B6C4 */ void ftKb_MsSpecialAirNStart_Anim(ftKb_GObj* gobj);\n/* 10B72C */ void ftKb_MsSpecialNStart_IASA(ftKb_GObj* gobj);\n/* 10B730 */ void ftKb_MsSpecialAirNStart_IASA(ftKb_GObj* gobj);\n/* 10B734 */ void ftKb_MsSpecialNStart_Phys(ftKb_GObj* gobj);\n/* 10B78C */ void ftKb_MsSpecialAirNStart_Phys(ftKb_GObj* gobj);\n/* 10B7F0 */ void ftKb_MsSpecialNStart_Coll(ftKb_GObj* gobj);\n/* 10B82C */ void ftKb_MsSpecialAirNStart_Coll(ftKb_GObj* gobj);\n/* 10B868 */ void ftKb_SpecialNMs_8010B868(ftKb_GObj* gobj);\n/* 10B8E0 */ void ftKb_SpecialNMs_8010B8E0(ftKb_GObj* gobj);\n/* 10B958 */ void ftKb_MsSpecialNLoop_Anim(ftKb_GObj* gobj);\n/* 10B9C0 */ void ftKb_MsSpecialAirNLoop_Anim(ftKb_GObj* gobj);\n/* 10BA28 */ void ftKb_MsSpecialNLoop_IASA(ftKb_GObj* gobj);\n/* 10BA60 */ void ftKb_MsSpecialAirNLoop_IASA(ftKb_GObj* gobj);\n/* 10BA98 */ void ftKb_MsSpecialNLoop_Phys(ftKb_GObj* gobj);\n/* 10BAB8 */ void ftKb_MsSpecialAirNLoop_Phys(ftKb_GObj* gobj);\n/* 10BAD8 */ void ftKb_MsSpecialNLoop_Coll(ftKb_GObj* gobj);\n/* 10BB14 */ void ftKb_MsSpecialAirNLoop_Coll(ftKb_GObj* gobj);\n/* 10BB50 */ void ftKb_SpecialNMs_8010BB50(ftKb_GObj* gobj);\n/* 10BBC8 */ void ftKb_SpecialNMs_8010BBC8(ftKb_GObj* gobj);\n/* 10BC40 */ void ftKb_SpecialNMs_8010BC40(ftKb_GObj* gobj);\n/* 10BC90 */ void ftKb_SpecialNMs_8010BC90(ftKb_GObj* gobj);\n/* 10BCE0 */ void ftKb_MsSpecialNEnd_Anim(ftKb_GObj* gobj);\n/* 10BDD8 */ void ftKb_MsSpecialAirNEnd_Anim(ftKb_GObj* gobj);\n/* 10BED0 */ void ftKb_MsSpecialNEnd_IASA(ftKb_GObj* gobj);\n/* 10BED4 */ void ftKb_MsSpecialAirNEnd_IASA(ftKb_GObj* gobj);\n/* 10BED8 */ void ftKb_MsSpecialNEnd_Phys(ftKb_GObj* gobj);\n/* 10BEF8 */ void ftKb_MsSpecialAirNEnd_Phys(ftKb_GObj* gobj);\n/* 10BF18 */ void ftKb_MsSpecialNEnd_Coll(ftKb_GObj* gobj);\n/* 10BF54 */ void ftKb_MsSpecialAirNEnd_Coll(ftKb_GObj* gobj);\n/* 10BF90 */ void ftKb_SpecialNPe_8010BF90(ftKb_GObj* gobj);\n/* 10C06C */ void ftKb_SpecialNPe_8010C06C(ftKb_GObj* gobj);\n/* 10C148 */ void ftKb_SpecialNPe_8010C148(ftKb_GObj* gobj);\n/* 10C1E8 */ void ftKb_SpecialNPe_8010C1E8(ftKb_GObj* gobj);\n/* 10C3C0 */ void ftKb_SpecialNPe_8010C3C0(ftKb_GObj* gobj);\n/* 10C3F4 */ void ftKb_SpecialNPe_8010C3F4(ftKb_GObj* gobj);\n/* 10C47C */ void ftKb_SpecialNPe_8010C47C(ftKb_GObj* gobj);\n/* 10C4AC */ void ftKb_SpecialNPe_8010C4AC(ftKb_GObj* gobj);\n/* 10C4D4 */ void ftKb_SpecialNPe_8010C4D4(ftKb_GObj* gobj);\n/* 10C560 */ void ftKb_SpecialNPe_8010C560(ftKb_GObj* gobj);\n/* 10C5FC */ void ftKb_PeSpecialLw_Anim(ftKb_GObj* gobj);\n/* 10C6B8 */ void ftKb_PeSpecialAirLw_Anim(ftKb_GObj* gobj);\n/* 10C774 */ void ftKb_PeSpecialLw_IASA(ftKb_GObj* gobj);\n/* 10C778 */ void ftKb_PeSpecialAirLw_IASA(ftKb_GObj* gobj);\n/* 10C77C */ void ftKb_PeSpecialLw_Phys(ftKb_GObj* gobj);\n/* 10C7B0 */ void ftKb_PeSpecialAirLw_Phys(ftKb_GObj* gobj);\n/* 10C860 */ void ftKb_PeSpecialLw_Coll(ftKb_GObj* gobj);\n/* 10C89C */ void ftKb_PeSpecialAirLw_Coll(ftKb_GObj* gobj);\n/* 10C8D8 */ void ftKb_SpecialNPe_8010C8D8(ftKb_GObj* gobj);\n/* 10C9CC */ void ftKb_SpecialNPe_8010C9CC(ftKb_GObj* gobj);\n/* 10CAB4 */ void ftKb_PeSpecialLwHit_Anim(ftKb_GObj* gobj);\n/* 10CB18 */ void ftKb_PeSpecialAirLwHit_Anim(ftKb_GObj* gobj);\n/* 10CB7C */ void ftKb_PeSpecialLwHit_IASA(ftKb_GObj* gobj);\n/* 10CB80 */ void ftKb_PeSpecialAirLwHit_IASA(ftKb_GObj* gobj);\n/* 10CB84 */ void ftKb_PeSpecialLwHit_Phys(ftKb_GObj* gobj);\n/* 10CBA4 */ void ftKb_PeSpecialAirLwHit_Phys(ftKb_GObj* gobj);\n/* 10CBF4 */ void ftKb_PeSpecialLwHit_Coll(ftKb_GObj* gobj);\n/* 10CC30 */ void ftKb_PeSpecialAirLwHit_Coll(ftKb_GObj* gobj);\n/* 10CC6C */ void ftKb_SpecialNGw_8010CC6C(ftKb_GObj* gobj);\n/* 10CCD4 */ void ftKb_SpecialNGw_8010CCD4(ftKb_GObj* gobj);\n/* 10CD44 */ void ftKb_SpecialNGw_8010CD44(ftKb_GObj* gobj);\n/* 10D074 */ void ftKb_SpecialNGw_8010D074(ftKb_GObj* gobj);\n/* 10D0A8 */ void ftKb_SpecialNGw_8010D0A8(ftKb_GObj* gobj);\n/* 10D130 */ void ftKb_SpecialNGw_8010D130(ftKb_GObj* gobj);\n/* 10D160 */ void ftKb_SpecialNGw_8010D160(ftKb_GObj* gobj);\n/* 10D188 */ void ftKb_SpecialNGw_8010D188(ftKb_GObj* gobj);\n/* 10D204 */ void ftKb_SpecialNGw_8010D204(ftKb_GObj* gobj);\n/* 10D280 */ void ftKb_GwSpecialN_Anim(ftKb_GObj* gobj);\n/* 10D320 */ void ftKb_GwSpecialAirN_Anim(ftKb_GObj* gobj);\n/* 10D3C0 */ void ftKb_GwSpecialN_IASA(ftKb_GObj* gobj);\n/* 10D444 */ void ftKb_GwSpecialAirN_IASA(ftKb_GObj* gobj);\n/* 10D4C8 */ void ftKb_GwSpecialN_Phys(ftKb_GObj* gobj);\n/* 10D4E8 */ void ftKb_GwSpecialAirN_Phys(ftKb_GObj* gobj);\n/* 10D508 */ void ftKb_GwSpecialN_Coll(ftKb_GObj* gobj);\n/* 10D544 */ void ftKb_GwSpecialAirN_Coll(ftKb_GObj* gobj);\n/* 10D580 */ void ftKb_SpecialNGw_8010D580(ftKb_GObj* gobj);\n/* 10D5F0 */ void ftKb_SpecialNGw_8010D5F0(ftKb_GObj* gobj);\n/* 10D660 */ void ftKb_SpecialNGw_8010D660(ftKb_GObj* gobj);\n/* 10D6D0 */ void ftKb_SpecialNGw_8010D6D0(ftKb_GObj* gobj);\n/* 3C8368 */ extern MotionState ftKb_Init_MotionStateTable[ftKb_MS_SelfCount];\n/* 3CA04C */ extern MotionState ftKb_Init_UnkMotionStates0[];\n/* 3CA308 */ extern char ftKb_Init_DatFilename[];\n/* 3CA314 */ extern char ftKb_Init_DataName[];\n/* 3CA4E0 */ extern char ftKb_Init_AnimDatFilename[];\n/* 3CA55C */ extern Fighter_DemoStrings ftKb_Init_DemoMotionFilenames;\n/* 3CA5B4 */ extern Fighter_CostumeStrings ftKb_Init_CostumeStrings[];\n#define GALE01_132A0C\n/* 132A0C */ void ftKp_Init_OnDeath(HSD_GObj* gobj);\n/* 132A64 */ void ftKp_Init_UnkMotionStates3(HSD_GObj* gobj);\n/* 132A84 */ void ftKp_Init_OnLoadForGKoopa(Fighter* fp);\n/* 132ABC */ void ftKp_Init_OnLoad(HSD_GObj* gobj);\n/* 132B38 */ void ftKp_Init_80132B38(void);\n/* 132B3C */ void ftKp_Init_OnItemPickup(HSD_GObj* gobj, bool flag);\n/* 132C1C */ void ftKp_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 132C64 */ void ftKp_Init_OnItemVisible(HSD_GObj* gobj);\n/* 132CAC */ void ftKp_Init_OnItemDrop(HSD_GObj* gobj, bool bool1);\n/* 132D00 */ void ftKp_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 132D38 */ void ftKp_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 132D7C */ void ftKp_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 132DC0 */ f32 ftKp_SpecialS_80132DC0(HSD_GObj* gobj);\n/* 132DD0 */ f32 ftKp_SpecialS_80132DD0(HSD_GObj* gobj);\n/* 132DE0 */ f32 ftKp_SpecialS_80132DE0(HSD_GObj* gobj);\n/* 132DF0 */ f32 ftKp_SpecialS_80132DF0(HSD_GObj* gobj);\n/* 132E00 */ f32 ftKp_SpecialS_80132E00(HSD_GObj* gobj);\n/* 132E10 */ f32 ftKp_SpecialS_80132E10(HSD_GObj* gobj);\n/* 132E20 */ f32 ftKp_SpecialS_80132E20(HSD_GObj* gobj);\n/* 132E30 */ void ftKp_SpecialS_80132E30(HSD_GObj* gobj);\n/* 132EFC */ void ftKp_SpecialS_Enter(HSD_GObj* gobj);\n/* 132F94 */ void ftKp_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 13302C */ void ftKp_SpecialS_8013302C(HSD_GObj* gobj);\n/* 1330E4 */ void ftKp_SpecialS_801330E4(HSD_GObj* gobj);\n/* 13319C */ void ftKp_SpecialS_8013319C(HSD_GObj* gobj);\n/* 13322C */ void ftKp_SpecialS_8013322C(HSD_GObj* gobj);\n/* 1332C4 */ void ftKp_SpecialS_801332C4(HSD_GObj* gobj);\n/* 133324 */ void ftKp_SpecialS_80133324(HSD_GObj* gobj);\n/* 133398 */ void ftKp_SpecialS_80133398(HSD_GObj* gobj);\n/* 1333F8 */ void ftKp_SpecialS_801333F8(HSD_GObj* gobj);\n/* 133484 */ void ftKp_SpecialS_80133484(HSD_GObj* gobj);\n/* 1334E4 */ void ftKp_SpecialS_801334E4(HSD_GObj* gobj);\n/* 13359C */ void ftKp_SpecialS_8013359C(HSD_GObj* gobj);\n/* 133654 */ void ftKp_SpecialSStart_Anim(HSD_GObj* gobj);\n/* 133690 */ void ftKp_SpecialAirSStart_Anim(HSD_GObj* gobj);\n/* 1336CC */ void ftKp_SpecialSHit_Anim(HSD_GObj* gobj);\n/* 13383C */ void ftKp_SpecialAirSHit_Anim(HSD_GObj* gobj);\n/* 1339AC */ void ftKp_SpecialSWait_Anim(HSD_GObj* gobj);\n/* 1339B0 */ void ftKp_SpecialAirSWait_Anim(HSD_GObj* gobj);\n/* 1339B4 */ void ftKp_SpecialSEndF_Anim(HSD_GObj* gobj);\n/* 133A90 */ void ftKp_SpecialSEndB_Anim(HSD_GObj* gobj);\n/* 133AD4 */ void ftKp_SpecialAirSEndF_Anim(HSD_GObj* gobj);\n/* 133BB0 */ void ftKp_SpecialAirSEndB_Anim(HSD_GObj* gobj);\n/* 133BF4 */ void ftKp_SpecialSHit_IASA(HSD_GObj* gobj);\n/* 133D20 */ void ftKp_SpecialAirSHit_IASA(HSD_GObj* gobj);\n/* 133E4C */ void ftKp_SpecialSWait_IASA(HSD_GObj* gobj);\n/* 134038 */ void ftKp_SpecialAirSWait_IASA(HSD_GObj* gobj);\n/* 134224 */ void ftKp_SpecialSStart_Phys(HSD_GObj* gobj);\n/* 134244 */ void ftKp_SpecialAirSStart_Phys(HSD_GObj* gobj);\n/* 134288 */ void ftKp_SpecialSHit_Phys(HSD_GObj* gobj);\n/* 1342A8 */ void ftKp_SpecialAirSHit_Phys(HSD_GObj* gobj);\n/* 1342C8 */ void ftKp_SpecialSWait_Phys(HSD_GObj* gobj);\n/* 1342E8 */ void ftKp_SpecialAirSWait_Phys(HSD_GObj* gobj);\n/* 134308 */ void ftKp_SpecialSEndF_Phys(HSD_GObj* gobj);\n/* 134328 */ void ftKp_SpecialSEndB_Phys(HSD_GObj* gobj);\n/* 134348 */ void ftKp_SpecialAirSEndF_Phys(HSD_GObj* gobj);\n/* 134368 */ void ftKp_SpecialAirSEndB_Phys(HSD_GObj* gobj);\n/* 134388 */ void ftKp_SpecialSStart_Coll(HSD_GObj* gobj);\n/* 1343B0 */ void ftKp_SpecialAirSStart_Coll(HSD_GObj* gobj);\n/* 1343D8 */ void ftKp_SpecialSHit_Coll(HSD_GObj* gobj);\n/* 134400 */ void ftKp_SpecialAirSHit_Coll(HSD_GObj* gobj);\n/* 134428 */ void ftKp_SpecialSWait_Coll(HSD_GObj* gobj);\n/* 134450 */ void ftKp_SpecialAirSWait_Coll(HSD_GObj* gobj);\n/* 134478 */ void ftKp_SpecialSEndF_Coll(HSD_GObj* gobj);\n/* 1344A0 */ void ftKp_SpecialSEndB_Coll(HSD_GObj* gobj);\n/* 1344C8 */ void ftKp_SpecialAirSEndF_Coll(HSD_GObj* gobj);\n/* 1344F0 */ void ftKp_SpecialAirSEndB_Coll(HSD_GObj* gobj);\n/* 13460C */ void ftKp_SpecialLw_Enter(HSD_GObj* gobj);\n/* 1346A4 */ void ftKp_SpecialAirLw_Enter(HSD_GObj* gobj);\n/* 13474C */ void ftKp_SpecialLw_Anim(HSD_GObj* gobj);\n/* 134788 */ void ftKp_SpecialAirLw_Anim(HSD_GObj* gobj);\n/* 1347C4 */ void ftKp_SpecialLw_Phys(HSD_GObj* gobj);\n/* 134804 */ void ftKp_SpecialAirLw_Phys(HSD_GObj* gobj);\n/* 1348A0 */ void ftKp_SpecialLw_Coll(HSD_GObj* gobj);\n/* 1348C0 */ void ftKp_SpecialAirLw_Coll(HSD_GObj* gobj);\n/* 134988 */ void ftKp_SpecialLw_80134988(HSD_GObj* gobj);\n/* 1349C4 */ void ftKp_SpecialLwLanding_Anim(HSD_GObj* gobj);\n/* 134A00 */ void ftKp_SpecialLwLanding_Phys(HSD_GObj* gobj);\n/* 134A20 */ void ftKp_SpecialLwLanding_Coll(HSD_GObj* gobj);\n/* 134A5C */ void ftKp_SpecialLw_80134A5C(HSD_GObj* gobj);\n/* 134ACC */ void ftKp_SpecialLw_80134ACC(HSD_GObj* gobj);\n/* 134D78 */ void ftKp_SpecialLw_80134D78(HSD_GObj* gobj);\n/* 134DE0 */ void ftKp_SpecialLw_80134DE0(HSD_GObj* gobj);\n/* 134E1C */ void ftKp_SpecialLw_80134E1C(HSD_GObj* gobj);\n/* 134E58 */ void ftKp_SpecialN_Enter(HSD_GObj* gobj);\n/* 134ED0 */ void ftKp_SpecialAirN_Enter(HSD_GObj* gobj);\n/* 134F48 */ void ftKp_SpecialNStart_Anim(HSD_GObj* gobj);\n/* 134F9C */ void ftKp_SpecialN_Anim(HSD_GObj* gobj);\n/* 135040 */ void ftKp_SpecialNEnd_Anim(HSD_GObj* gobj);\n/* 13507C */ void ftKp_SpecialAirNStart_Anim(HSD_GObj* gobj);\n/* 1350D0 */ void ftKp_SpecialAirN_Anim(HSD_GObj* gobj);\n/* 135174 */ void ftKp_SpecialAirNEnd_Anim(HSD_GObj* gobj);\n/* 1351B0 */ void ftKp_SpecialNStart_IASA(HSD_GObj* gobj);\n/* 1351B4 */ void ftKp_SpecialN_IASA(HSD_GObj* gobj);\n/* 1352F0 */ void ftKp_SpecialNEnd_IASA(HSD_GObj* gobj);\n/* 1352F4 */ void ftKp_SpecialAirNStart_IASA(HSD_GObj* gobj);\n/* 1352F8 */ void ftKp_SpecialAirN_IASA(HSD_GObj* gobj);\n/* 135434 */ void ftKp_SpecialAirNEnd_IASA(HSD_GObj* gobj);\n/* 135438 */ void ftKp_SpecialNStart_Phys(HSD_GObj* gobj);\n/* 135458 */ void ftKp_SpecialN_Phys(HSD_GObj* gobj);\n/* 135478 */ void ftKp_SpecialNEnd_Phys(HSD_GObj* gobj);\n/* 135498 */ void ftKp_SpecialAirNStart_Phys(HSD_GObj* gobj);\n/* 1354B8 */ void ftKp_SpecialAirN_Phys(HSD_GObj* gobj);\n/* 1354D8 */ void ftKp_SpecialAirNEnd_Phys(HSD_GObj* gobj);\n/* 1354F8 */ void ftKp_SpecialNStart_Coll(HSD_GObj* gobj);\n/* 135564 */ void ftKp_SpecialN_Coll(HSD_GObj* gobj);\n/* 1355D0 */ void ftKp_SpecialNEnd_Coll(HSD_GObj* gobj);\n/* 13563C */ void ftKp_SpecialAirNStart_Coll(HSD_GObj* gobj);\n/* 1356A8 */ void ftKp_SpecialAirN_Coll(HSD_GObj* gobj);\n/* 135714 */ void ftKp_SpecialAirNEnd_Coll(HSD_GObj* gobj);\n/* 135780 */ void ftKp_SpecialN_80135780(HSD_GObj* gobj);\n/* 135A2C */ void ftKp_SpecialHi_Enter(HSD_GObj* gobj);\n/* 135B04 */ void ftKp_SpecialAirHi_Enter(HSD_GObj* gobj);\n/* 135C08 */ void ftKp_SpecialHi_Anim(HSD_GObj* gobj);\n/* 135C60 */ void ftKp_SpecialAirHi_Anim(HSD_GObj* gobj);\n/* 135D78 */ void ftKp_SpecialHi_IASA(HSD_GObj* gobj);\n/* 135D7C */ void ftKp_SpecialAirHi_IASA(HSD_GObj* gobj);\n/* 135D80 */ void ftKp_SpecialHi_Phys(HSD_GObj* gobj);\n/* 135DE0 */ void ftKp_SpecialAirHi_Phys(HSD_GObj* gobj);\n/* 135E4C */ void ftKp_SpecialHi_Coll(HSD_GObj* gobj);\n/* 135F6C */ void ftKp_SpecialAirHi_Coll(HSD_GObj* gobj);\n/* 3CEDC0 */ extern MotionState ftKp_Init_MotionStateTable[ftKp_MS_SelfCount];\n/* 3CF0A0 */ extern char ftKp_Init_DatFilename[];\n/* 3CF0AC */ extern char ftKp_Init_DataName[];\n/* 3CF1E0 */ extern char ftKp_Init_AnimDatFilename[];\n/* 3CF25C */ extern Fighter_DemoStrings ftKp_Init_DemoMotionFilenames;\n/* 3CF26C */ extern Fighter_CostumeStrings ftKp_Init_CostumeStrings[];\n#define GALE01_0EB3BC\n/* 0EB3BC */ void ftLk_AttackAir_800EB3BC(HSD_GObj* gobj);\n/* 0EB42C */ void ftLk_AttackAir_Enter(HSD_GObj* gobj);\n/* 0EB618 */ void ftLk_AttackAir_SetupParts(HSD_GObj* gobj);\n#define GALE01_0EAD64\n/* 0EAD64 */ bool ftLk_Init_BoomerangExists(HSD_GObj* gobj);\n/* 0EAD84 */ void ftLk_Init_OnDeath(HSD_GObj* gobj);\n/* 0EAE04 */ void ftLk_Init_OnLoadForCLink(Fighter* fp);\n/* 0EAE44 */ void ftLk_Init_OnLoad(HSD_GObj* gobj);\n/* 0EAF38 */ void ftLk_800EAF38(HSD_GObj* gobj);\n/* 0EAF58 */ void ftLk_800EAF58(HSD_GObj* gobj);\n/* 0EAFA4 */ void ftLk_Init_OnItemPickup(HSD_GObj* gobj, bool flag);\n/* 0EB018 */ void ftLk_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 0EB060 */ void ftLk_Init_OnItemVisible(HSD_GObj* gobj);\n/* 0EB0A8 */ void ftLk_Init_OnItemDrop(HSD_GObj* gobj, bool arg1);\n/* 0EB11C */ void ftLk_Init_OnItemPickupExt(HSD_GObj* gobj, int arg1);\n/* 0EB1FC */ void ftLk_Init_OnItemDropExt(HSD_GObj* gobj, bool arg1);\n/* 0EB250 */ void ftLk_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 0EB2AC */ void ftLk_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 0EB2F0 */ void ftLk_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 0EB334 */ void ftLk_800EB334(HSD_GObj* gobj);\n/* 0EC354 */ void ftLk_SpecialS_Enter(HSD_GObj* gobj);\n/* 0EC404 */ void ftLk_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 3B7520 */ extern ftLk_SpecialN_Vec3Group const ftLk_Init_Vec3Group;\n/* 3C7E18 */ extern MotionState ftLk_Init_MotionStateTable[ftLk_MS_SelfCount];\n/* 3C80B8 */ extern char ftLk_Init_DatFilename[];\n/* 3C80C4 */ extern char ftLk_Init_DataName[];\n/* 3C8224 */ extern char ftLk_Init_AnimDatFilename[];\n/* 3C82A0 */ extern Fighter_DemoStrings ftLk_Init_DemoMotionFilenames;\n/* 3C82B0 */ extern Fighter_CostumeStrings ftLk_Init_CostumeStrings[];\n#define GALE01_0EBB1C\n/* 0EBB1C */ void ftLk_SpecialHi_Enter(HSD_GObj* gobj);\n/* 0EBB80 */ void ftLk_SpecialAirHi_Enter(HSD_GObj* gobj);\n/* 0EBC10 */ void ftLk_SpecialHi_Anim(HSD_GObj* gobj);\n/* 0EBC4C */ void ftLk_SpecialAirHi_Anim(HSD_GObj* gobj);\n/* 0EBCAC */ void ftLk_SpecialHi_IASA(HSD_GObj* gobj);\n/* 0EBCB0 */ void ftLk_SpecialAirHi_IASA(HSD_GObj* gobj);\n/* 0EBCB4 */ void ftLk_SpecialAirHi_Phys(HSD_GObj* gobj);\n/* 0EBD30 */ void ftLk_SpecialHi_Phys(HSD_GObj* gobj);\n/* 0EBDC0 */ void ftLk_SpecialHi_Coll(HSD_GObj* gobj);\n/* 0EBDFC */ void ftLk_SpecialAirHi_Coll(HSD_GObj* gobj);\n/* 0EBEC4 */ void ftLk_SpecialHi_ProcessPartLThumbNb(HSD_GObj* gobj);\n/**\n * @param[out] pos #Fighter::cur_pos with its #Vec3::y component adjusted by\n *                 #ftLk_DatAttrs::specialhi_pos_y_offset.\n */\n/* 0EBEEC */ void ftLk_SpecialHi_GetPosWithAdjustedY(HSD_GObj* gobj,\n                                                     Vec3* pos);\n/* 0EBF20 */ int ftLk_SpecialHi_GetFv4(HSD_GObj* gobj);\n#define GALE01_0EB65C\n/* 0EB65C */ void ftLk_SpecialLw_Enter(HSD_GObj* gobj);\n/* 0EB6DC */ void ftLk_SpecialAirLw_Enter(HSD_GObj* gobj);\n/* 0EB8A4 */ void ftLk_SpecialLw_Anim(HSD_GObj* gobj);\n/* 0EB8E0 */ void ftLk_SpecialAirLw_Anim(HSD_GObj* gobj);\n/* 0EB91C */ void ftLk_SpecialLw_Phys(HSD_GObj* gobj);\n/* 0EB93C */ void ftLk_SpecialAirLw_Phys(HSD_GObj* gobj);\n/* 0EB95C */ void ftLk_SpecialLw_Coll(HSD_GObj* gobj);\n/* 0EB9D4 */ void ftLk_SpecialAirLw_Coll(HSD_GObj* gobj);\n#define GALE01_0ECBC4\n/* 0ECBC4 */ ftLk_SpecialNIndex ftLk_SpecialN_GetIndex(ftLk_GObj* gobj);\n/* 0ECC0C */ void ftLk_SpecialN_UnsetArrow(ftLk_GObj* gobj);\n/* 0ECC6C */ void ftLk_SpecialN_UnsetFv14(ftLk_GObj* gobj);\n/* 0ECCCC */ bool ftLk_SpecialN_IsActiveAnd2071b6(ftLk_GObj* gobj);\n/* 0ECD04 */ void ftLk_SpecialN_ProcessFv10(ftLk_GObj* gobj);\n/* 0ECD58 */ void ftLk_SpecialN_ProcessFv14(ftLk_GObj* gobj);\n/* 0ECDAC */ void ftLk_SpecialN_Enter(ftLk_GObj* gobj);\n/* 0ECF78 */ void ftLk_SpecialAirN_Enter(ftLk_GObj* gobj);\n/* 0ED15C */ void ftLk_SpecialNStart_Anim(ftLk_GObj* gobj);\n/* 0ED480 */ void ftLk_SpecialNLoop_Anim(ftLk_GObj* gobj);\n/* 0ED5B4 */ void ftLk_SpecialNEnd_Anim(ftLk_GObj* gobj);\n/* 0ED72C */ void ftLk_SpecialAirNStart_Anim(ftLk_GObj* gobj);\n/* 0EDA58 */ void ftLk_SpecialAirNLoop_Anim(ftLk_GObj* gobj);\n/* 0EDB8C */ void ftLk_SpecialAirNEnd_Anim(ftLk_GObj* gobj);\n/* 0EDD88 */ void ftLk_SpecialNStart_IASA(ftLk_GObj* gobj);\n/* 0EDE30 */ void ftLk_SpecialNLoop_IASA(ftLk_GObj* gobj);\n/* 0EDEAC */ void ftLk_SpecialNEnd_IASA(ftLk_GObj* gobj);\n/* 0EDEB0 */ void ftLk_SpecialAirNStart_IASA(ftLk_GObj* gobj);\n/* 0EDF58 */ void ftLk_SpecialAirNLoop_IASA(ftLk_GObj* gobj);\n/* 0EDFD4 */ void ftLk_SpecialAirNEnd_IASA(ftLk_GObj* gobj);\n/* 0EDFD8 */ void ftLk_SpecialNStart_Phys(ftLk_GObj* gobj);\n/* 0EDFF8 */ void ftLk_SpecialNLoop_Phys(ftLk_GObj* gobj);\n/* 0EE018 */ void ftLk_SpecialNEnd_Phys(ftLk_GObj* gobj);\n/* 0EE038 */ void ftLk_SpecialAirNStart_Phys(ftLk_GObj* gobj);\n/* 0EE058 */ void ftLk_SpecialAirNLoop_Phys(ftLk_GObj* gobj);\n/* 0EE078 */ void ftLk_SpecialAirNEnd_Phys(ftLk_GObj* gobj);\n/* 0EE098 */ void ftLk_SpecialNStart_Coll(ftLk_GObj* gobj);\n/* 0EE120 */ void ftLk_SpecialNLoop_Coll(ftLk_GObj* gobj);\n/* 0EE1A8 */ void ftLk_SpecialNEnd_Coll(ftLk_GObj* gobj);\n/* 0EE2E0 */ void ftLk_SpecialAirNStart_Coll(ftLk_GObj* gobj);\n/* 0EE368 */ void ftLk_SpecialAirNLoop_Coll(ftLk_GObj* gobj);\n/* 0EE3F0 */ void ftLk_SpecialAirNEnd_Coll(ftLk_GObj* gobj);\n#define GALE01_0EC354\n/* 0EBFCC */ bool ftLk_SepcialS_Get2219b5(HSD_GObj* gobj);\n/* 0EBFDC */ bool ftLk_SpecialS_Is2071b0_5to13(HSD_GObj* gobj);\n/* 0EC00C */ bool ftLk_SpecialS_Is2071b0_1to13(HSD_GObj* gobj);\n/* 0EC03C */ void ftLk_SpecialS_RemoveBoomerang0(HSD_GObj* gobj);\n/* 0EC06C */ void ftLk_SpecialS_RemoveBoomerang1(HSD_GObj* gobj);\n/* 0EC354 */ void ftLk_SpecialS_Enter(HSD_GObj* gobj);\n/* 0EC404 */ void ftLk_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 0EC4B4 */ void ftLk_SpecialS2_Enter(HSD_GObj* gobj);\n/* 0EC54C */ void ftLk_SpecialS1_Anim(HSD_GObj* gobj);\n/* 0EC588 */ void ftLk_SpecialS2_Anim(HSD_GObj* gobj);\n/* 0EC5F8 */ void ftLk_SpecialS1Empty_Anim(HSD_GObj* gobj);\n/* 0EC634 */ void ftLk_SpecialAirS1_Anim(HSD_GObj* gobj);\n/* 0EC670 */ void ftLk_SpecialAirS2_Anim(HSD_GObj* gobj);\n/* 0EC6E0 */ void ftLk_SpecialAirS1Empty_Anim(HSD_GObj* gobj);\n/* 0EC71C */ void ftLk_SpecialS2_IASA(HSD_GObj* gobj);\n/* 0EC810 */ void ftLk_SpecialAirS2_IASA(HSD_GObj* gobj);\n/* 0EC88C */ void ftLk_SpecialS1_Phys(HSD_GObj* gobj);\n/* 0EC8AC */ void ftLk_SpecialS2_Phys(HSD_GObj* gobj);\n/* 0EC8CC */ void ftLk_SpecialS1Empty_Phys(HSD_GObj* gobj);\n/* 0EC8EC */ void ftLk_SpecialAirS1_Phys(HSD_GObj* gobj);\n/* 0EC90C */ void ftLk_SpecialAirS2_Phys(HSD_GObj* gobj);\n/* 0EC92C */ void ftLk_SpecialAirS1Empty_Phys(HSD_GObj* gobj);\n/* 0EC94C */ void ftLk_SpecialS1_Coll(HSD_GObj* gobj);\n/* 0EC9C4 */ void ftLk_SpecialS2_Coll(HSD_GObj* gobj);\n/* 0ECA1C */ void ftLk_SpecialS1Empty_Coll(HSD_GObj* gobj);\n/* 0ECA88 */ void ftLk_SpecialAirS1_Coll(HSD_GObj* gobj);\n/* 0ECB00 */ void ftLk_SpecialAirS2_Coll(HSD_GObj* gobj);\n/* 0ECB58 */ void ftLk_SpecialAirS1Empty_Coll(HSD_GObj* gobj);\n#define MELEE_FT_CHARA_FTLUIGI_FORWARD_H\nstatic MotionFlags const ftLg_MF_Special =\n    Ft_MF_SkipModel | Ft_MF_SkipItemVis | Ft_MF_UnkUpdatePhys |\n    Ft_MF_FreezeState;\nstatic MotionFlags const ftLg_MF_SpecialN =\n    ftLg_MF_Special | Ft_MF_KeepFastFall | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftLg_MF_SpecialS =\n    ftLg_MF_Special | Ft_MF_KeepGfx | Ft_MF_KeepSfx;\nstatic MotionFlags const ftLg_MF_SpecialHi =\n    ftLg_MF_Special | Ft_MF_KeepFastFall | Ft_MF_KeepGfx | Ft_MF_KeepSfx;\nstatic MotionFlags const ftLg_MF_SpecialLw =\n    ftLg_MF_Special | Ft_MF_KeepColAnimHitStatus | Ft_MF_KeepSfx;\nstatic MotionFlags const ftLg_MF_SpecialAirN =\n    ftLg_MF_SpecialN | Ft_MF_SkipParasol;\nstatic MotionFlags const ftLg_MF_SpecialAirS =\n    ftLg_MF_SpecialS | Ft_MF_SkipParasol;\nstatic MotionFlags const ftLg_MF_SpecialAirHi =\n    ftLg_MF_SpecialHi | Ft_MF_SkipParasol;\nstatic MotionFlags const ftLg_MF_SpecialAirLw =\n    ftLg_MF_SpecialLw | Ft_MF_SkipParasol;\ntypedef enum ftLuigi_MotionState {\n    ftLg_MS_SpecialN = ftCo_MS_Count,\n    ftLg_MS_SpecialAirN,\n    ftLg_MS_SpecialSStart,\n    ftLg_MS_SpecialSHold,\n    ftLg_MS_SpecialS2,\n    ftLg_MS_SpecialSEnd,\n    ftLg_MS_SpecialS,\n    ftLg_MS_SpecialSMisfire,\n    ftLg_MS_SpecialAirSStart,\n    ftLg_MS_SpecialAirSHold,\n    ftLg_MS_SpecialAirS2,\n    ftLg_MS_SpecialAirSEnd,\n    ftLg_MS_SpecialAirS,\n    ftLg_MS_SpecialAirSMisfire,\n    ftLg_MS_SpecialHi,\n    ftLg_MS_SpecialAirHi,\n    ftLg_MS_SpecialLw,\n    ftLg_MS_SpecialAirLw,\n    ftLg_MS_Count,\n    ftLg_MS_SelfCount = ftLg_MS_Count - ftCo_MS_Count,\n} ftLuigi_MotionState;\ntypedef enum ftLg_Submotion {\n    ftLg_SM_SpecialN = ftCo_SM_Count,\n    ftLg_SM_SpecialAirN,\n    ftLg_SM_SpecialSStart,\n    ftLg_SM_SpecialSHold,\n    ftLg_SM_SpecialS,\n    ftLg_SM_SpecialSMisfire,\n    ftLg_SM_SpecialS2,\n    ftLg_SM_SpecialSEnd,\n    ftLg_SM_SpecialAirSStart,\n    ftLg_SM_SpecialAirSHold,\n    ftLg_SM_SpecialAirS,\n    ftLg_SM_SpecialAirSMisfire,\n    ftLg_SM_SpecialAirSEnd,\n    ftLg_SM_SpecialHi,\n    ftLg_SM_SpecialAirHi,\n    ftLg_SM_SpecialLw,\n    ftLg_SM_SpecialAirLw,\n    ftLg_SM_Count,\n    ftLg_SM_SelfCount = ftLg_SM_Count - ftCo_SM_Count,\n} ftLg_Submotion;\n#define GALE01_1422E8\n/* 1422E8 */ void ftLg_Init_OnDeath(HSD_GObj* gobj);\n/* 142324 */ void ftLg_Init_OnLoad(HSD_GObj* gobj);\n/* 142388 */ void ftLg_Init_OnItemPickup(HSD_GObj* gobj, bool flag);\n/* 142468 */ void ftLg_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 1424B0 */ void ftLg_Init_OnItemVisible(HSD_GObj* gobj);\n/* 1424F8 */ void ftLg_Init_OnItemDrop(HSD_GObj* gobj, bool flag);\n/* 14254C */ void ftLg_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 142584 */ void ftLg_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 1425C8 */ void ftLg_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 14260C */ void ftLg_Init_UnkDemoCallbacks0(int arg0, int* arg1, int* arg2);\n/* 142640 */ char* ftLg_Init_GetMotionFileString(enum_t demoMotionArg);\n/* 3D0628 */ extern MotionState ftLg_Init_MotionStateTable[ftLg_MS_SelfCount];\n/* 3D0868 */ extern MotionState ftLg_Init_UnkMotionStates0[];\n/* 3D08A8 */ extern char ftLg_Init_DatFilename[];\n/* 3D08B4 */ extern char ftLg_Init_DataName[];\n/* 3D09E8 */ extern char ftLg_Init_AnimDatFilename[];\n/* 3D0A64 */ extern Fighter_DemoStrings ftLg_Init_DemoMotionFilenames;\n/* 3D0AB4 */ extern Fighter_CostumeStrings ftLg_Init_CostumeStrings[];\n/// @file\n/// Up Special - Super Jump Punch (SpecialHi)\n#define GALE01_143FC8\n/* 143FC8 */ void ftLg_SpecialHi_Enter(HSD_GObj* gobj);\n/* 144024 */ void ftLg_SpecialAirHi_Enter(HSD_GObj* gobj);\n/* 144098 */ void ftLg_SpecialHi_Anim(HSD_GObj* gobj);\n/* 1440F8 */ void ftLg_SpecialAirHi_Anim(HSD_GObj* gobj);\n/* 144158 */ void ftLg_SpecialHi_IASA(HSD_GObj* gobj);\n/* 1442A0 */ void ftLg_SpecialAirHi_IASA(HSD_GObj* gobj);\n/* 1443E8 */ void ftLg_SpecialHi_Phys(HSD_GObj* gobj);\n/* 144420 */ void ftLg_SpecialAirHi_Phys(HSD_GObj* gobj);\n/* 1444B4 */ void ftLg_SpecialHi_CheckLanding(HSD_GObj* gobj);\n/* 1444E4 */ void ftLg_SpecialHi_Coll(HSD_GObj* gobj);\n/* 144554 */ void ftLg_SpecialAirHi_Coll(HSD_GObj* gobj);\n/// @file\n/// Down Special - Luigi Cyclone (SpecialLw)\n#define GALE01_1445C4\n/* 1445C4 */ void ftLg_SpecialLw_UpdateRot(HSD_GObj* gobj);\n/* 1445F0 */ void ftLg_SpecialLw_Enter(HSD_GObj* gobj);\n/* 144708 */ void ftLg_SpecialAirLw_Enter(HSD_GObj* gobj);\n/* 144830 */ void ftLg_SpecialLw_Anim(HSD_GObj* gobj);\n/* 14487C */ void ftLg_SpecialAirLw_Anim(HSD_GObj* gobj);\n/* 144950 */ void ftLg_SpecialLw_IASA(HSD_GObj* gobj);\n/* 144954 */ void ftLg_SpecialAirLw_IASA(HSD_GObj* gobj);\n/* 144958 */ void ftLg_SpecialLw_Phys(HSD_GObj* gobj);\n/* 144A7C */ void ftLg_SpecialAirLw_Phys(HSD_GObj* gobj);\n/* 144B38 */ void ftLg_SpecialLw_Coll(HSD_GObj* gobj);\n/* 144CEC */ void ftLg_SpecialAirLw_Coll(HSD_GObj* gobj);\n/// @file\n/// Netural Special - Fireball (SpecialN)\n#define GALE01_14267C\n/* 14267C */ void ftLg_SpecialN_Enter(HSD_GObj* gobj);\n/* 1426EC */ void ftLg_SpecialAirN_Enter(HSD_GObj* gobj);\n/* 14275C */ void ftLg_SpecialN_Anim(HSD_GObj* gobj);\n/* 142798 */ void ftLg_SpecialAirN_Anim(HSD_GObj* gobj);\n/* 1427D4 */ void ftLg_SpecialN_IASA(HSD_GObj* gobj);\n/* 142804 */ void ftLg_SpecialAirN_IASA(HSD_GObj* gobj);\n/* 142834 */ void ftLg_SpecialN_Phys(HSD_GObj* gobj);\n/* 142854 */ void ftLg_SpecialAirN_Phys(HSD_GObj* gobj);\n/* 142874 */ void ftLg_SpecialN_Coll(HSD_GObj* gobj);\n/* 1428E8 */ void ftLg_SpecialAirN_Coll(HSD_GObj* gobj);\n/* 14295C */ void ftLg_SpecialN_FireSpawn(HSD_GObj* gobj);\n/// @file\n/// Side Special - Green Missile (SpecialS)\n#define GALE01_142A24\n/* 142A24 */ void ftLg_SpecialS_SetGFX(HSD_GObj* gobj);\n/* 142A5C */ void ftLg_SpecialS_SetVars(HSD_GObj* gobj);\n/* 142B14 */ void ftLg_SpecialS_Enter(HSD_GObj* gobj);\n/* 142B88 */ void ftLg_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 142C00 */ void ftLg_SpecialS_OnGiveDamage(HSD_GObj* gobj);\n/* 142C40 */ void ftLg_SpecialSStart_Anim(HSD_GObj* gobj);\n/* 142C7C */ void ftLg_SpecialAirSStart_Anim(HSD_GObj* gobj);\n/* 142CB8 */ void ftLg_SpecialSStart_IASA(HSD_GObj* gobj);\n/* 142CBC */ void ftLg_SpecialAirSStart_IASA(HSD_GObj* gobj);\n/* 142CC0 */ void ftLg_SpecialSStart_Phys(HSD_GObj* gobj);\n/* 142D00 */ void ftLg_SpecialAirSStart_Phys(HSD_GObj* gobj);\n/* 142D60 */ void ftLg_SpecialSStart_Coll(HSD_GObj* gobj);\n/* 142D9C */ void ftLg_SpecialAirSStart_Coll(HSD_GObj* gobj);\n/* 142DD8 */ void ftLg_SpecialSStart_GroundToAir(HSD_GObj* gobj);\n/* 142E38 */ void ftLg_SpecialAirSStart_AirToGround(HSD_GObj* gobj);\n/* 142E98 */ void ftLg_SpecialSHold_Anim(HSD_GObj* gobj);\n/* 142F38 */ void ftLg_SpecialAirSHold_Anim(HSD_GObj* gobj);\n/* 142FD8 */ void ftLg_SpecialSHold_IASA(HSD_GObj* gobj);\n/* 143008 */ void ftLg_SpecialAirSHold_IASA(HSD_GObj* gobj);\n/* 143038 */ void ftLg_SpecialSHold_Phys(HSD_GObj* gobj);\n/* 143058 */ void ftLg_SpecialAirSHold_Phys(HSD_GObj* gobj);\n/* 143078 */ void ftLg_SpecialSHold_Coll(HSD_GObj* gobj);\n/* 1430B4 */ void ftLg_SpecialAirSHold_Coll(HSD_GObj* gobj);\n/* 1430F0 */ void ftLg_SpecialSHold_GroundToAir(HSD_GObj* gobj);\n/* 143150 */ void ftLg_SpecialAirSHold_AirToGround(HSD_GObj* gobj);\n/* 1431B0 */ void ftLg_SpecialSHold_Enter(HSD_GObj* gobj);\n/* 143204 */ void ftLg_SpecialAirSHold_Enter(HSD_GObj* gobj);\n/* 143258 */ void ftLg_SpecialS_Anim(HSD_GObj* gobj);\n/* 143304 */ void ftLg_SpecialAirS_Anim(HSD_GObj* gobj);\n/* 1433A8 */ void ftLg_SpecialS_IASA(HSD_GObj* gobj);\n/* 1433AC */ void ftLg_SpecialAirS_IASA(HSD_GObj* gobj);\n/* 1433B0 */ void ftLg_SpecialS_Phys(HSD_GObj* gobj);\n/* 1433D0 */ void ftLg_SpecialAirS_Phys(HSD_GObj* gobj);\n/* 1433F0 */ void ftLg_SpecialS_Coll(HSD_GObj* gobj);\n/* 14342C */ void ftLg_SpecialAirS_Coll(HSD_GObj* gobj);\n/* 143468 */ void ftLg_SpecialSLaunch_GroundToAir(HSD_GObj* gobj);\n/* 1434C8 */ void ftLg_SpecialAirSLaunch_AirToGround(HSD_GObj* gobj);\n/* 143528 */ void ftLg_SpecialSLaunch_Enter(HSD_GObj* gobj);\n/* 143600 */ void ftLg_SpecialAirSLaunch_Enter(HSD_GObj* gobj);\n/* 1436D8 */ void ftLg_SpecialSMisfire_Anim(HSD_GObj* gobj);\n/* 143784 */ void ftLg_SpecialAirSMisfire_Anim(HSD_GObj* gobj);\n/* 143828 */ void ftLg_SpecialSMisfire_IASA(HSD_GObj* gobj);\n/* 14382C */ void ftLg_SpecialAirSMisfire_IASA(HSD_GObj* gobj);\n/* 143830 */ void ftLg_SpecialSMisfire_Phys(HSD_GObj* gobj);\n/* 143850 */ void ftLg_SpecialAirSMisfire_Phys(HSD_GObj* gobj);\n/* 143870 */ void ftLg_SpecialSMisfire_Coll(HSD_GObj* gobj);\n/* 1438AC */ void ftLg_SpecialAirSMisfire_Coll(HSD_GObj* gobj);\n/* 1438E8 */ void ftLg_SpecialSMisfire_GroundToAir(HSD_GObj* gobj);\n/* 143948 */ void ftLg_SpecialAirSMisfire_AirToGround(HSD_GObj* gobj);\n/* 1439A8 */ void ftLg_SpecialSMisfire_Enter(HSD_GObj* gobj);\n/* 143A60 */ void ftLg_SpecialAirSMisfire_Enter(HSD_GObj* gobj);\n/* 143B18 */ void ftLg_SpecialS2_Anim(HSD_GObj* gobj);\n/* 143B1C */ void ftLg_SpecialAirS2_Anim(HSD_GObj* gobj);\n/* 143B58 */ void ftLg_SpecialS2_IASA(HSD_GObj* gobj);\n/* 143B5C */ void ftLg_SpecialAirS2_IASA(HSD_GObj* gobj);\n/* 143B60 */ void ftLg_SpecialS2_Phys(HSD_GObj* gobj);\n/* 143B64 */ void ftLg_SpecialAirS2_Phys(HSD_GObj* gobj);\n/* 143BE0 */ void ftLg_SpecialS2_Coll(HSD_GObj* gobj);\n/* 143BE4 */ void ftLg_SpecialAirS2_Coll(HSD_GObj* gobj);\n/* 143C60 */ void ftLg_SpecialSFly_Enter(HSD_GObj* gobj);\n/* 143D7C */ void ftLg_SpecialSEnd_Anim(HSD_GObj* gobj);\n/* 143DB8 */ void ftLg_SpecialAirSEnd_Anim(HSD_GObj* gobj);\n/* 143DF4 */ void ftLg_SpecialSEnd_IASA(HSD_GObj* gobj);\n/* 143DF8 */ void ftLg_SpecialAirSEnd_IASA(HSD_GObj* gobj);\n/* 143DFC */ void ftLg_SpecialSEnd_Phys(HSD_GObj* gobj);\n/* 143E3C */ void ftLg_SpecialAirSEnd_Phys(HSD_GObj* gobj);\n/* 143E8C */ void ftLg_SpecialSEnd_Coll(HSD_GObj* gobj);\n/* 143EC8 */ void ftLg_SpecialAirSEnd_Coll(HSD_GObj* gobj);\n/* 143F18 */ void ftLg_SpecialSEnd_Enter(HSD_GObj* gobj);\n/* 143F70 */ void ftLg_SpecialAirSEnd_Enter(HSD_GObj* gobj);\n#define GALE01_0E08CC\nstatic usize_t const aux_states_count = 2;\n/* 0E08CC */ void ftMr_Init_OnDeath(HSD_GObj* gobj);\n/* 0E0920 */ void ftMr_Init_OnLoadForDrMario(Fighter*);\n/* 0E0960 */ void ftMr_Init_OnLoad(HSD_GObj* gobj);\n/* 0E0A00 */ void ftMr_Init_OnTakeDamage(HSD_GObj* gobj);\n/* 0E0A20 */ void ftMr_Init_OnItemPickup(HSD_GObj* gobj, bool flag);\n/* 0E0B00 */ void ftMr_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 0E0B48 */ void ftMr_Init_OnItemVisible(HSD_GObj* gobj);\n/* 0E0B90 */ void ftMr_Init_OnItemDrop(HSD_GObj* gobj, bool flag);\n/* 0E0BE4 */ void ftMr_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 0E0C24 */ void ftMr_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 0E0C68 */ void ftMr_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 0E0CAC */ void ftMr_Init_UnkDemoCallbacks0(int, int*, int*);\n/* 0E0CE0 */ char* ftMr_Init_GetMotionFileString(enum_t);\n/* 3C7120 */ extern MotionState ftMr_Init_MotionStateTable[ftMr_MS_SelfCount];\n/* 3C7260 */ extern MotionState ftMr_Init_UnkMotionStates0[aux_states_count];\n#define GALE01_0E1A54\n/* 0E1A54 */ void ftMr_SpecialHi_Enter(HSD_GObj* gobj);\n/* 0E1AB0 */ void ftMr_SpecialAirHi_Enter(HSD_GObj* gobj);\n/* 0E1B24 */ void ftMr_SpecialHi_Anim(HSD_GObj* gobj);\n/* 0E1B84 */ void ftMr_SpecialAirHi_Anim(HSD_GObj* gobj);\n/* 0E1BE4 */ void ftMr_SpecialHi_IASA(HSD_GObj* gobj);\n/* 0E1D2C */ void ftMr_SpecialAirHi_IASA(HSD_GObj* gobj);\n/* 0E1E74 */ void ftMr_SpecialHi_Phys(HSD_GObj* gobj);\n/* 0E1EAC */ void ftMr_SpecialAirHi_Phys(HSD_GObj* gobj);\n/* 0E1F40 */ void ftMr_SpecialHi_CheckLanding(HSD_GObj* gobj);\n/* 0E1F70 */ void ftMr_SpecialHi_Coll(HSD_GObj* gobj);\n/* 0E1FE0 */ void ftMr_SpecialAirHi_Coll(HSD_GObj* gobj);\n#define GALE01_0E207C\n/* 0E207C */ void ftMr_SpecialLw_Enter(HSD_GObj* gobj);\n/* 0E2194 */ void ftMr_SpecialAirLw_Enter(HSD_GObj* gobj);\n/* 0E22BC */ void ftMr_SpecialLw_Anim(HSD_GObj* gobj);\n/* 0E2308 */ void ftMr_SpecialAirLw_Anim(HSD_GObj* gobj);\n/* 0E23DC */ void ftMr_SpecialLw_IASA(HSD_GObj* gobj);\n/* 0E23E0 */ void ftMr_SpecialAirLw_IASA(HSD_GObj* gobj);\n/* 0E23E4 */ void ftMr_SpecialLw_Phys(HSD_GObj* gobj);\n/* 0E2508 */ void ftMr_SpecialAirLw_Phys(HSD_GObj* gobj);\n/* 0E25C4 */ void ftMr_SpecialLw_Coll(HSD_GObj* gobj);\n/* 0E2778 */ void ftMr_SpecialAirLw_Coll(HSD_GObj* gobj);\n#define GALE01_0E0D1C\n/* 0E0D1C */ int ftMr_SpecialN_VitaminRandom(HSD_GObj* gobj);\n/* 0E0DA8 */ void ftMr_SpecialN_Enter(HSD_GObj* gobj);\n/* 0E0E18 */ void ftMr_SpecialN_Anim(HSD_GObj* gobj);\n/* 0E0E54 */ void ftMr_SpecialN_IASA(HSD_GObj* gobj);\n/* 0E0E84 */ void ftMr_SpecialN_Phys(HSD_GObj* gobj);\n/* 0E0EA4 */ void ftMr_SpecialN_Coll(HSD_GObj* gobj);\n/* 0E0EE0 */ void ftMr_SpecialN_ItemFireSpawn(HSD_GObj* gobj);\n/* 0E1040 */ void ftMr_SpecialAirN_Enter(HSD_GObj* gobj);\n/* 0E10B0 */ void ftMr_SpecialAirN_Anim(HSD_GObj* gobj);\n/* 0E10EC */ void ftMr_SpecialAirN_IASA(HSD_GObj* gobj);\n/* 0E111C */ void ftMr_SpecialAirN_Phys(HSD_GObj* gobj);\n/* 0E113C */ void ftMr_SpecialAirN_Coll(HSD_GObj* gobj);\n/* 0E1178 */ void ftMr_SpecialN_GroundToAir(HSD_GObj* gobj);\n/* 0E11E0 */ void ftMr_SpecialAirN_AirToGround(HSD_GObj* gobj);\n#define GALE01_0E1248\n/* 0E1248 */ void ftMr_SpecialS_CreateCape(HSD_GObj* gobj);\n/* 0E132C */ void ftMr_SpecialS_Reset(HSD_GObj* gobj);\n/* 0E1368 */ void ftMr_SpecialS_RemoveCape(HSD_GObj* gobj);\n/* 0E13C8 */ void ftMr_SpecialS_EnterHitlag(HSD_GObj* gobj);\n/* 0E13F8 */ void ftMr_SpecialS_ExitHitlag(HSD_GObj* gobj);\n/* 0E1428 */ bool ftMr_SpecialS_CheckItemCapeRemove(HSD_GObj* gobj);\n/* 0E1450 */ void ftMr_SpecialS_Enter(HSD_GObj* gobj);\n/* 0E14C8 */ void ftMr_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 0E1550 */ void ftMr_SpecialS_Anim(HSD_GObj* gobj);\n/* 0E158C */ void ftMr_SpecialAirS_Anim(HSD_GObj* gobj);\n/* 0E15C8 */ void ftMr_SpecialS_IASA(HSD_GObj* gobj);\n/* 0E15CC */ void ftMr_SpecialAirS_IASA(HSD_GObj* gobj);\n/* 0E15D0 */ void ftMr_SpecialS_Phys(HSD_GObj* gobj);\n/* 0E16E0 */ void ftMr_SpecialAirS_Phys(HSD_GObj* gobj);\n/* 0E1840 */ void ftMr_SpecialS_Coll(HSD_GObj* gobj);\n/* 0E187C */ void ftMr_SpecialAirS_Coll(HSD_GObj* gobj);\n/* 0E18B8 */ void ftMr_SpecialS_GroundToAir(HSD_GObj* gobj);\n/* 0E198C */ void ftMr_SpecialAirS_AirToGround(HSD_GObj* gobj);\n#define GALE01_3C59D8\n/* 3C59D8 */ extern Fighter_DemoStrings ftMr_Init_DemoMotionFilenames;\n/* 3C5A20 */ extern char* ftMr_Init_DemoViMotionFilenames[];\n#define MELEE_FT_CHARA_FTMARIO_INLINES_H\nstatic inline ftMario_DatAttrs* GetMarioAttr(Fighter* fp)\n{\n    ftMario_DatAttrs* mario_attr = fp->dat_attrs;\n    return mario_attr;\n}\n#define GALE01_136258\n/* 136258 */ void ftMs_Init_OnDeath(HSD_GObj* gobj);\n/* 1362B0 */ void ftMs_Init_OnItemPickup(HSD_GObj* gobj, bool flag);\n/* 136390 */ void ftMs_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 1363D8 */ void ftMs_Init_OnItemVisible(HSD_GObj* gobj);\n/* 136420 */ void ftMs_Init_OnItemDrop(HSD_GObj* gobj, bool flag);\n/* 136474 */ void ftMs_Init_OnLoadForRoy(Fighter* fp);\n/* 1364AC */ void ftMs_Init_OnLoad(HSD_GObj* gobj);\n/* 1364E8 */ void ftMs_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 136520 */ void ftMs_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 136564 */ void ftMs_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 1365A8 */ void ftMs_SpecialN_801365A8(HSD_GObj* gobj);\n/* 13666C */ void ftMs_SpecialN_8013666C(HSD_GObj* gobj);\n/* 136730 */ void ftMs_SpecialN_80136730(HSD_GObj* gobj);\n/* 3CF420 */ extern MotionState ftMs_Init_MotionStateTable[ftMs_MS_SelfCount];\n/* 3CF820 */ extern char ftMs_Init_DatFilename[];\n/* 3CF82C */ extern char ftMs_Init_DataName[];\n/* 3CF98C */ extern char ftMs_Init_AnimDatFilename[];\n/* 3CFA08 */ extern Fighter_DemoStrings ftMs_Init_DemoMotionFilenames;\n/* 3CFA18 */ extern Fighter_CostumeStrings ftMs_Init_CostumeStrings[];\n#define GALE01_138348\n/* 138348 */ void ftMs_SpecialAirHi_Anim(HSD_GObj* gobj);\n/* 138940 */ void ftMs_SpecialAirHi_Coll(HSD_GObj* gobj);\n/* 13826C */ void ftMs_SpecialAirHi_Enter(HSD_GObj* gobj);\n/* 1384F0 */ void ftMs_SpecialAirHi_IASA(HSD_GObj* gobj);\n/* 13873C */ void ftMs_SpecialAirHi_Phys(HSD_GObj* gobj);\n/* 138884 */ void ftMs_SpecialHi_80138884(HSD_GObj* gobj);\n/* 1382E8 */ void ftMs_SpecialHi_Anim(HSD_GObj* gobj);\n/* 1388B4 */ void ftMs_SpecialHi_Coll(HSD_GObj* gobj);\n/* 138208 */ void ftMs_SpecialHi_Enter(HSD_GObj* gobj);\n/* 1383A8 */ void ftMs_SpecialHi_IASA(HSD_GObj* gobj);\n/* 138638 */ void ftMs_SpecialHi_Phys(HSD_GObj* gobj);\n#define GALE01_138B64\n/* 138B64 */ void ftMs_SpecialAirLw_Anim(HSD_GObj* gobj);\n/* 138CFC */ void ftMs_SpecialAirLw_Coll(HSD_GObj* gobj);\n/* 138A30 */ void ftMs_SpecialAirLw_Enter(HSD_GObj* gobj);\n/* 138F14 */ void ftMs_SpecialAirLwHit_Anim(HSD_GObj* gobj);\n/* 139044 */ void ftMs_SpecialAirLwHit_Coll(HSD_GObj* gobj);\n/* 138FC4 */ void ftMs_SpecialAirLwHit_IASA(HSD_GObj* gobj);\n/* 138FE8 */ void ftMs_SpecialAirLwHit_Phys(HSD_GObj* gobj);\n/* 138C24 */ void ftMs_SpecialAirLw_IASA(HSD_GObj* gobj);\n/* 138C5C */ void ftMs_SpecialAirLw_Phys(HSD_GObj* gobj);\n/* 138D38 */ void ftMs_SpecialLw_80138D38(HSD_GObj* gobj);\n/* 138DD0 */ void ftMs_SpecialLw_80138DD0(HSD_GObj* gobj);\n/* 139080 */ void ftMs_SpecialLw_80139080(HSD_GObj* gobj);\n/* 1390E0 */ void ftMs_SpecialLw_801390E0(HSD_GObj* gobj);\n/* 139140 */ void ftMs_SpecialLw_80139140(HSD_GObj* gobj);\n/* 138AA8 */ void ftMs_SpecialLw_Anim(HSD_GObj* gobj);\n/* 138CC0 */ void ftMs_SpecialLw_Coll(HSD_GObj* gobj);\n/* 1389CC */ void ftMs_SpecialLw_Enter(HSD_GObj* gobj);\n/* 138E68 */ void ftMs_SpecialLwHit_Anim(HSD_GObj* gobj);\n/* 139008 */ void ftMs_SpecialLwHit_Coll(HSD_GObj* gobj);\n/* 138FC0 */ void ftMs_SpecialLwHit_IASA(HSD_GObj* gobj);\n/* 138FC8 */ void ftMs_SpecialLwHit_Phys(HSD_GObj* gobj);\n/* 138C20 */ void ftMs_SpecialLw_IASA(HSD_GObj* gobj);\n/* 138C28 */ void ftMs_SpecialLw_Phys(HSD_GObj* gobj);\n#define GALE01_137010\n/* 137010 */ void ftMs_SpecialAirNEnd_Anim(HSD_GObj* gobj);\n/* 1371C0 */ void ftMs_SpecialAirNEnd_Coll(HSD_GObj* gobj);\n/* 137140 */ void ftMs_SpecialAirNEnd_IASA(HSD_GObj* gobj);\n/* 137164 */ void ftMs_SpecialAirNEnd_Phys(HSD_GObj* gobj);\n/* 136BB4 */ void ftMs_SpecialAirNLoop_Anim(HSD_GObj* gobj);\n/* 136D78 */ void ftMs_SpecialAirNLoop_Coll(HSD_GObj* gobj);\n/* 136CC4 */ void ftMs_SpecialAirNLoop_IASA(HSD_GObj* gobj);\n/* 136D1C */ void ftMs_SpecialAirNLoop_Phys(HSD_GObj* gobj);\n/* 1368AC */ void ftMs_SpecialAirNStart_Anim(HSD_GObj* gobj);\n/* 1369E0 */ void ftMs_SpecialAirNStart_Coll(HSD_GObj* gobj);\n/* 136918 */ void ftMs_SpecialAirNStart_IASA(HSD_GObj* gobj);\n/* 13695C */ void ftMs_SpecialAirNStart_Phys(HSD_GObj* gobj);\n/* 1367B8 */ void ftMs_SpecialAirN_Enter(HSD_GObj* gobj);\n/* 136A1C */ void ftMs_SpecialN_80136A1C(HSD_GObj* gobj);\n/* 136A7C */ void ftMs_SpecialN_80136A7C(HSD_GObj* gobj);\n/* 136DB4 */ void ftMs_SpecialN_80136DB4(HSD_GObj* gobj);\n/* 136E14 */ void ftMs_SpecialN_80136E14(HSD_GObj* gobj);\n/* 136E74 */ void ftMs_SpecialN_80136E74(HSD_GObj* gobj);\n/* 136EAC */ void ftMs_SpecialN_80136EAC(HSD_GObj* gobj);\n/* 1371FC */ void ftMs_SpecialN_801371FC(HSD_GObj* gobj);\n/* 1372A8 */ void ftMs_SpecialN_801372A8(HSD_GObj* gobj);\n/* 137354 */ void ftMs_SpecialN_80137354(HSD_GObj* gobj);\n/* 1373B8 */ void ftMs_SpecialN_801373B8(HSD_GObj* gobj);\n/* 136EE4 */ void ftMs_SpecialNEnd_Anim(HSD_GObj* gobj);\n/* 137184 */ void ftMs_SpecialNEnd_Coll(HSD_GObj* gobj);\n/* 13713C */ void ftMs_SpecialNEnd_IASA(HSD_GObj* gobj);\n/* 137144 */ void ftMs_SpecialNEnd_Phys(HSD_GObj* gobj);\n/* 136ADC */ void ftMs_SpecialNLoop_Anim(HSD_GObj* gobj);\n/* 136D3C */ void ftMs_SpecialNLoop_Coll(HSD_GObj* gobj);\n/* 136C8C */ void ftMs_SpecialNLoop_IASA(HSD_GObj* gobj);\n/* 136CFC */ void ftMs_SpecialNLoop_Phys(HSD_GObj* gobj);\n/* 136844 */ void ftMs_SpecialNStart_Anim(HSD_GObj* gobj);\n/* 1369A4 */ void ftMs_SpecialNStart_Coll(HSD_GObj* gobj);\n/* 136914 */ void ftMs_SpecialNStart_IASA(HSD_GObj* gobj);\n/* 13691C */ void ftMs_SpecialNStart_Phys(HSD_GObj* gobj);\n/* 136744 */ void ftMs_SpecialN_Enter(HSD_GObj* gobj);\n#define GALE01_1374A0\n/* 1374A0 */ void ftMs_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 137558 */ void ftMs_SpecialAirS1_Anim(HSD_GObj* gobj);\n/* 13767C */ void ftMs_SpecialAirS1_Coll(HSD_GObj* gobj);\n/* 1375B8 */ void ftMs_SpecialAirS1_IASA(HSD_GObj* gobj);\n/* 137618 */ void ftMs_SpecialAirS1_Phys(HSD_GObj* gobj);\n/* 1377B0 */ void ftMs_SpecialS2_Anim(HSD_GObj* gobj);\n/* 1378D4 */ void ftMs_SpecialS2_Coll(HSD_GObj* gobj);\n/* 137810 */ void ftMs_SpecialS2_IASA(HSD_GObj* gobj);\n/* 137870 */ void ftMs_SpecialS2_Phys(HSD_GObj* gobj);\n/* 137B34 */ void ftMs_SpecialS3_Anim(HSD_GObj* gobj);\n/* 137C50 */ void ftMs_SpecialS3_Coll(HSD_GObj* gobj);\n/* 137B94 */ void ftMs_SpecialS3_IASA(HSD_GObj* gobj);\n/* 137BF4 */ void ftMs_SpecialS3_Phys(HSD_GObj* gobj);\n/* 137ECC */ void ftMs_SpecialS4_Anim(HSD_GObj* gobj);\n/* 137F8C */ void ftMs_SpecialS4_Coll(HSD_GObj* gobj);\n/* 137F2C */ void ftMs_SpecialS4_IASA(HSD_GObj* gobj);\n/* 137F30 */ void ftMs_SpecialS4_Phys(HSD_GObj* gobj);\n/* 1376E8 */ void ftMs_SpecialS_801376E8(HSD_GObj* gobj);\n/* 137748 */ void ftMs_SpecialS_80137748(HSD_GObj* gobj);\n/* 137940 */ void ftMs_SpecialS_80137940(HSD_GObj* gobj);\n/* 1379D0 */ void ftMs_SpecialS_801379D0(HSD_GObj* gobj);\n/* 137A68 */ void ftMs_SpecialS_80137A68(HSD_GObj* gobj);\n/* 137A9C */ void ftMs_SpecialS_80137A9C(HSD_GObj* gobj);\n/* 137CBC */ void ftMs_SpecialS_80137CBC(HSD_GObj* gobj);\n/* 137D60 */ void ftMs_SpecialS_80137D60(HSD_GObj* gobj);\n/* 137E0C */ void ftMs_SpecialS_80137E0C(HSD_GObj* gobj);\n/* 137FF8 */ void ftMs_SpecialS_80137FF8(HSD_GObj* gobj);\n/* 13809C */ void ftMs_SpecialS_8013809C(HSD_GObj* gobj);\n/* 138148 */ void ftMs_SpecialS_80138148(HSD_GObj* gobj);\n/* 13741C */ void ftMs_SpecialS_Enter(HSD_GObj* gobj);\n#define GALE01_15386C\n/* 15386C */ void ftMh_BackAirplane1_Anim(HSD_GObj* gobj);\n/* 1538A8 */ void ftMh_BackAirplane1_IASA(HSD_GObj* gobj);\n/* 1538EC */ void ftMh_BackAirplane1_Phys(HSD_GObj* gobj);\n/* 15390C */ void ftMh_BackAirplane1_Coll(HSD_GObj* gobj);\n/* 1539A4 */ void ftMh_BackAirplane2_Anim(HSD_GObj* gobj);\n#define GALE01_1539EC\n/* 1539EC */ void ftMh_BackAirplane2_IASA(HSD_GObj* gobj);\n/* 153A30 */ void ftMh_BackAirplane2_Phys(HSD_GObj* gobj);\n/* 153A60 */ void ftMh_BackAirplane2_Coll(HSD_GObj* gobj);\n/* 153A64 */ void ftMh_MS_368_80153A64(HSD_GObj* gobj);\n/// @file\n/// 19 Ram\n#define GALE01_153AEC\n/* 153AEC */ void ftMh_BackAirplane3_Anim(HSD_GObj* gobj);\n/* 153B28 */ void ftMh_BackAirplane3_IASA(HSD_GObj* gobj);\n/* 153B6C */ void ftMh_BackAirplane3_Phys(HSD_GObj* gobj);\n/* 153B8C */ void ftMh_BackAirplane3_Coll(HSD_GObj* gobj);\n/* 153B90 */ void ftMh_MS_369_80153B90(HSD_GObj* gobj);\n/* 153C48 */ void ftMh_BackPunch_Anim(HSD_GObj* gobj);\n/* 153C90 */ void ftMh_BackPunch_IASA(HSD_GObj* gobj);\n/* 153CD4 */ void ftMh_BackPunch_Phys(HSD_GObj* gobj);\n/// @file\n/// 20 Crush\n#define GALE01_153D28\n/* 153D28 */ void ftMh_BackPunch_Coll(HSD_GObj* gobj);\n/* 153D2C */ void ftMh_MS_370_80153D2C(HSD_GObj* gobj);\n/* 153F8C */ void ftMh_BackCrush_Anim(HSD_GObj* gobj);\n/* 154114 */ void ftMh_BackCrush_IASA(HSD_GObj* gobj);\n/* 154158 */ void ftMh_BackCrush_Phys(HSD_GObj* gobj);\n#define GALE01_1541C4\n/* 1541C4 */ void ftMh_BackCrush_Coll(HSD_GObj* gobj);\n/* 1541C8 */ void ftMh_MS_371_801541C8(HSD_GObj* gobj, HSD_GObjEvent);\n#define GALE01_154230\n/* 154230 */ void ftMh_BackDisappear_Anim(HSD_GObj* gobj);\n/* 154278 */ void ftMh_BackDisappear_IASA(HSD_GObj* gobj);\n/* 1542BC */ void ftMh_BackDisappear_Phys(HSD_GObj* gobj);\n/* 1542DC */ void ftMh_BackDisappear_Coll(HSD_GObj* gobj);\n/* 1542E0 */ void ftMh_MS_372_801542E0(HSD_GObj* gobj);\n/* 154360 */ void ftMh_Wait1_1_Anim(HSD_GObj* gobj);\n/* 1543E8 */ void ftMh_Wait1_1_IASA(HSD_GObj* gobj);\n/* 15442C */ void ftMh_Wait1_1_Phys(HSD_GObj* gobj);\n/* 15459C */ void ftMh_Wait1_1_Coll(HSD_GObj* gobj);\n/* 1545A0 */ void ftMh_MS_373_801545A0(HSD_GObj* gobj);\n/* 154620 */ void ftMh_Grab_Anim(HSD_GObj* gobj);\n/* 154670 */ void ftMh_Grab_IASA(HSD_GObj* gobj);\n/* 1546B4 */ void ftMh_Grab_Phys(HSD_GObj* gobj);\n/* 1546D4 */ void ftMh_Grab_Coll(HSD_GObj* gobj);\n/* 1546D8 */ void ftMh_MS_374_801546D8(HSD_GObj* gobj);\n/* 154758 */ void ftMh_Fail_Anim(HSD_GObj* gobj);\n/* 154794 */ void ftMh_Fail_IASA(HSD_GObj* gobj);\n/* 1547D8 */ void ftMh_Fail_Phys(HSD_GObj* gobj);\n/* 154838 */ void ftMh_Fail_Coll(HSD_GObj* gobj);\n/* 15483C */ void ftMh_MS_381_8015483C(HSD_GObj* gobj);\n/* 1548D8 */ void ftMh_Cancel_Anim(HSD_GObj* gobj);\n/* 154964 */ void ftMh_Cancel_IASA(HSD_GObj* gobj);\n/* 1549A8 */ void ftMh_Cancel_Phys(HSD_GObj* gobj);\n/* 154A08 */ void ftMh_Cancel_Coll(HSD_GObj* gobj);\n/* 154A2C */ void ftMh_MS_375_80154A2C(HSD_GObj* gobj);\n#define GALE01_155C94\n/* 155C94 */ void ftMh_CaptureDamageMasterHand_80155C94(HSD_GObj* gobj);\n/* 155C20 */ void ftMh_CaptureDamageMasterHand_Anim(HSD_GObj* gobj);\n/* 155C90 */ void ftMh_CaptureDamageMasterHand_Coll(HSD_GObj* gobj);\n/* 155C88 */ void ftMh_CaptureDamageMasterHand_IASA(HSD_GObj* gobj);\n/* 155C8C */ void ftMh_CaptureDamageMasterHand_Phys(HSD_GObj* gobj);\n#define GALE01_155C20\n/* 155B70 */ void ftMh_CaptureMasterHand_Anim(HSD_GObj* gobj);\n/* 155B74 */ void ftMh_CaptureMasterHand_IASA(HSD_GObj* gobj);\n/* 155B78 */ void ftMh_CaptureMasterHand_Phys(HSD_GObj* gobj);\n/* 155B7C */ void ftMh_CaptureMasterHand_Coll(HSD_GObj* gobj);\n/* 155B80 */ void ftMh_CaptureMasterHand_80155B80(HSD_GObj* gobj);\n/* 155C20 */ void ftMh_CaptureDamageMasterHand_Anim(HSD_GObj* gobj);\n#define GALE01_151428\n/* 151428 */ bool ftMh_MS_343_80151428(Vec3* vec);\n/* 151484 */ void ftMh_MS_343_80151484(HSD_GObj* gobj);\n/* 1515B8 */ void ftMh_Damage_Anim(HSD_GObj* gobj);\n/* 1516B4 */ void ftMh_MS_345_Anim(HSD_GObj* gobj);\n/// @file\n/// 10 Drill\n#define GALE01_152138\n/* 152138 */ void ftMh_WalkWait_Anim(HSD_GObj* gobj);\n/* 152174 */ void ftMh_WalkWait_IASA(HSD_GObj* gobj);\n/* 1521B8 */ void ftMh_WalkWait_Phys(HSD_GObj* gobj);\n/* 1521D8 */ void ftMh_WalkWait_Coll(HSD_GObj* gobj);\n/* 1521DC */ void ftMh_MS_352_801521DC(HSD_GObj* gobj);\n/* 15223C */ void ftMh_Drill_Anim(HSD_GObj* gobj);\n/* 152278 */ void ftMh_Drill_IASA(HSD_GObj* gobj);\n/* 1522BC */ void ftMh_Drill_Phys(HSD_GObj* gobj);\n#define GALE01_1510B0\n/* 1510B0 */ void ftMh_MS_343_801510B0(HSD_GObj* gobj);\n/* 151168 */ void ftMh_Entry_Anim(HSD_GObj* gobj);\n/* 1511B0 */ void ftMh_Entry_IASA(HSD_GObj* gobj);\n/* 1511F4 */ void ftMh_Entry_Phys(HSD_GObj* gobj);\n/* 1511F8 */ void ftMh_Entry_Coll(HSD_GObj* gobj);\n/// @file\n/// 14 Lasers\n#define GALE01_152BC8\n/* 152BC8 */ void ftMh_Poke1_Coll(HSD_GObj* gobj);\n/* 152BCC */ void ftMh_MS_359_80152BCC(HSD_GObj* gobj);\n/* 152C34 */ void ftMh_FingerBeamStart_Anim(HSD_GObj* gobj);\n/* 152C70 */ void ftMh_FingerBeamStart_IASA(HSD_GObj* gobj);\n/* 152CB4 */ void ftMh_FingerBeamStart_Phys(HSD_GObj* gobj);\n/* 152CD4 */ void ftMh_FingerBeamStart_Coll(HSD_GObj* gobj);\n/* 152CD8 */ void ftMh_MS_361_80152CD8(HSD_GObj* gobj);\n/* 152D44 */ void ftMh_FingerBeamLoop_Anim(HSD_GObj* gobj);\n/* 152DC0 */ void ftMh_FingerBeamLoop_IASA(HSD_GObj* gobj);\n/* 152E04 */ void ftMh_FingerBeamLoop_Phys(HSD_GObj* gobj);\n/* 152E24 */ void ftMh_FingerBeamLoop_Coll(HSD_GObj* gobj);\n/* 152E28 */ void ftMh_MS_362_80152E28(HSD_GObj* gobj);\n#define GALE01_153000\n/* 153000 */ void ftMh_FingerBeamEnd_Anim(HSD_GObj* gobj);\n/* 15303C */ void ftMh_FingerBeamEnd_IASA(HSD_GObj* gobj);\n/* 153080 */ void ftMh_FingerBeamEnd_Phys(HSD_GObj* gobj);\n/* 1530A0 */ void ftMh_FingerBeamEnd_Coll(HSD_GObj* gobj);\n/* 1530A4 */ void ftMh_MS_363_801530A4(HSD_GObj* gobj);\n/* 153160 */ void ftMh_FingerGun1_Anim(HSD_GObj* gobj);\n/* 153210 */ void ftMh_FingerGun1_IASA(HSD_GObj* gobj);\n/* 153254 */ void ftMh_FingerGun1_Phys(HSD_GObj* gobj);\n/* 1533C8 */ void ftMh_FingerGun1_Coll(HSD_GObj* gobj);\n/* 1533CC */ void ftMh_MS_364_801533CC(HSD_GObj* gobj);\n/* 15346C */ void ftMh_FingerGun2_Anim(HSD_GObj* gobj);\n/* 153548 */ void ftMh_FingerGun2_IASA(HSD_GObj* gobj);\n/* 15358C */ void ftMh_FingerGun2_Phys(HSD_GObj* gobj);\n/* 1535AC */ void ftMh_FingerGun2_Coll(HSD_GObj* gobj);\n/* 1535B0 */ void ftMh_MS_365_801535B0(HSD_GObj* gobj);\n/* 153730 */ void ftMh_MS_365_80153730(HSD_GObj* gobj);\n#define GALE01_15377C\n/* 15377C */ void ftMh_FingerGun3_Anim(HSD_GObj* gobj);\n/* 1537B8 */ void ftMh_FingerGun3_IASA(HSD_GObj* gobj);\n/* 1537FC */ void ftMh_FingerGun3_Phys(HSD_GObj* gobj);\n/* 15381C */ void ftMh_FingerGun3_Coll(HSD_GObj* gobj);\n/* 153820 */ void ftMh_MS_366_80153820(HSD_GObj* gobj);\n#define GALE01_14FC68\n/* 14FC68 */ void ftMh_Init_OnDeath(HSD_GObj* gobj);\n/* 14FC6C */ void ftMh_Init_OnLoad(HSD_GObj* gobj);\n/* 14FDD0 */ void ftMh_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 3D3A30 */ extern MotionState ftMh_Init_MotionStateTable[ftMh_MS_SelfCount];\n/* 3D4070 */ extern char ftMh_Init_DatFilename[];\n/* 3D407C */ extern char ftMh_Init_DataName[];\n/* 3D40B8 */ extern char ftMh_Init_AnimDatFilename[];\n/* 3D40C4 */ extern Fighter_CostumeStrings ftMh_Init_CostumeStrings[];\n/// @file\n/// 12 Ground Slap\n#define GALE01_152634\n/* 152634 */ void ftMh_RockCrushDown_Anim(HSD_GObj* gobj);\n/* 152670 */ void ftMh_RockCrushDown_IASA(HSD_GObj* gobj);\n/* 1526B4 */ void ftMh_RockCrushDown_Phys(HSD_GObj* gobj);\n/* 1526D4 */ void ftMh_RockCrushDown_Coll(HSD_GObj* gobj);\n/* 1526D8 */ void ftMh_MS_357_801526D8(HSD_GObj* gobj);\n/* 152738 */ void ftMh_PaperCrush_Anim(HSD_GObj* gobj);\n/* 152774 */ void ftMh_PaperCrush_IASA(HSD_GObj* gobj);\n/* 1527B8 */ void ftMh_PaperCrush_Phys(HSD_GObj* gobj);\n#define GALE01_15287C\n/* 15287C */ void ftMh_PaperCrush_Coll(HSD_GObj* gobj);\n/* 152880 */ void ftMh_MS_358_80152880(HSD_GObj* gobj);\n/* 152928 */ void ftMh_Poke1_Anim(HSD_GObj* gobj);\n/* 1529D0 */ void ftMh_Poke2_Anim(HSD_GObj* gobj);\n/* 152A0C */ void ftMh_Poke1_IASA(HSD_GObj* gobj);\n/* 152A50 */ void ftMh_Poke1_Phys(HSD_GObj* gobj);\n/// @file\n/// 11 Punch\n#define GALE01_15236C\n/* 15236C */ void ftMh_Drill_Coll(HSD_GObj* gobj);\n/* 152370 */ void ftMh_MS_354_80152370(HSD_GObj* gobj);\n/* 1523BC */ void ftMh_RockCrushUp_Anim(HSD_GObj* gobj);\n/* 152414 */ void ftMh_RockCrushUp_IASA(HSD_GObj* gobj);\n/* 152458 */ void ftMh_RockCrushUp_Phys(HSD_GObj* gobj);\n/* 152478 */ void ftMh_RockCrushUp_Coll(HSD_GObj* gobj);\n/* 15247C */ void ftMh_MS_355_8015247C(HSD_GObj* gobj);\n/* 1524C8 */ void ftMh_RockCrushWait_Anim(HSD_GObj* gobj);\n/* 152544 */ void ftMh_RockCrushWait_IASA(HSD_GObj* gobj);\n/* 152588 */ void ftMh_RockCrushWait_Phys(HSD_GObj* gobj);\n/* 1525DC */ void ftMh_RockCrushWait_Coll(HSD_GObj* gobj);\n/* 1525E0 */ void ftMh_MS_356_801525E0(HSD_GObj* gobj);\n/// @file\n/// 27 Crazy Hand Combo Attack 1\n#define GALE01_155074\n/* 155074 */ void ftMh_Slam_Anim(HSD_GObj* gobj);\n/* 15512C */ void ftMh_Slam_IASA(HSD_GObj* gobj);\n/* 155170 */ void ftMh_Slam_Phys(HSD_GObj* gobj);\n/* 155190 */ void ftMh_Slam_Coll(HSD_GObj* gobj);\n/* 155194 */ void ftMh_MS_380_80155194(HSD_GObj* gobj);\n#define GALE01_151C04\n/* 151C04 */ void ftMh_Slap_Anim(HSD_GObj* gobj);\n/* 151C40 */ void ftMh_Slap_IASA(HSD_GObj* gobj);\n/* 151C84 */ void ftMh_Slap_Phys(HSD_GObj* gobj);\n/* 151CA4 */ void ftMh_Slap_Coll(HSD_GObj* gobj);\n/* 151CA8 */ void ftMh_MS_349_80151CA8(HSD_GObj* gobj);\n#define GALE01_154A78\n/* 154A78 */ void ftMh_MS_378_80154A78(HSD_GObj* gobj);\n/* 154B2C */ void ftMh_Squeeze_Anim(HSD_GObj* gobj);\n/* 154BB0 */ void ftMh_Squeeze_IASA(HSD_GObj* gobj);\n/* 154BF4 */ void ftMh_Squeeze_Phys(HSD_GObj* gobj);\n/* 154C54 */ void ftMh_Squeeze_Coll(HSD_GObj* gobj);\n#define GALE01_154D78\n/* 154D78 */ void ftMh_Squeezing_Anim(HSD_GObj* gobj);\n/* 154DD0 */ void ftMh_Squeezing_IASA(HSD_GObj* gobj);\n/* 154E14 */ void ftMh_Squeezing_Phys(HSD_GObj* gobj);\n/* 154E74 */ void ftMh_Squeezing_Coll(HSD_GObj* gobj);\n/* 154E78 */ void ftMh_MS_376_80154E78(HSD_GObj* gobj);\n/* 154ED8 */ void ftMh_Throw_Anim(HSD_GObj* gobj);\n#define GALE01_151828\n/* 1517B0 */ void ftMh_Damage_IASA(HSD_GObj* gobj);\n/* 1517F4 */ void ftMh_Damage_Phys(HSD_GObj* gobj);\n/* 151824 */ void ftMh_Damage_Coll(HSD_GObj* gobj);\n/* 151828 */ void ftMh_MS_344_80151828(HSD_GObj* gobj);\n/* 151874 */ void ftMh_WaitSweep_Anim(HSD_GObj* gobj);\n/* 1518B0 */ void ftMh_WaitSweep_IASA(HSD_GObj* gobj);\n/* 1518F4 */ void ftMh_WaitSweep_Phys(HSD_GObj* gobj);\n/* 151914 */ void ftMh_WaitSweep_Coll(HSD_GObj* gobj);\n/* 151918 */ void ftMh_MS_346_80151918(HSD_GObj* gobj);\n/* 15198C */ void ftMh_SweepLoop_Anim(HSD_GObj* gobj);\n/* 151A44 */ void ftMh_SweepLoop_IASA(HSD_GObj* gobj);\n/* 151A88 */ void ftMh_SweepLoop_Phys(HSD_GObj* gobj);\n/* 151AC4 */ void ftMh_SweepLoop_Coll(HSD_GObj* gobj);\n#define GALE01_151B14\n/* 151B14 */ void ftMh_SweepWait_Anim(HSD_GObj* gobj);\n/* 151B50 */ void ftMh_SweepWait_Phys(HSD_GObj* gobj);\n/* 151B70 */ void ftMh_SweepWait_IASA(HSD_GObj* gobj);\n/* 151BB4 */ void ftMh_SweepWait_Coll(HSD_GObj* gobj);\n/* 151BB8 */ void ftMh_MS_348_80151BB8(HSD_GObj* gobj);\n/// @file\n/// 29 Crazy Hand Combo Attack 3\n#define GALE01_155388\n/* 155388 */ void ftMh_TagApplaud_Anim(HSD_GObj* gobj);\n/* 15541C */ void ftMh_TagApplaud_IASA(HSD_GObj* gobj);\n/* 155460 */ void ftMh_TagApplaud_Phys(HSD_GObj* gobj);\n/* 155480 */ void ftMh_TagApplaud_Coll(HSD_GObj* gobj);\n/* 155484 */ void ftMh_MS_383_80155484(HSD_GObj* gobj);\n#define GALE01_155A58\n/* 155A58 */ void ftMh_MS_388_80155A58(HSD_GObj* gobj, HSD_GObj* gobj2);\n/// @file\n/// 28 Crazy Hand Combo Attack 2\n#define GALE01_15521C\n/* 15521C */ void ftMh_TagCrush_Anim(HSD_GObj* gobj);\n/* 155290 */ void ftMh_TagCrush_IASA(HSD_GObj* gobj);\n/* 1552D4 */ void ftMh_TagCrush_Phys(HSD_GObj* gobj);\n/* 1552F4 */ void ftMh_TagCrush_Coll(HSD_GObj* gobj);\n/* 1552F8 */ void ftMh_MS_382_801552F8(HSD_GObj* gobj);\n#define GALE01_15550C\n/* 15550C */ void ftMh_TagRockPaper_Anim(HSD_GObj* gobj);\n/* 155580 */ void ftMh_TagRockPaper_IASA(HSD_GObj* gobj);\n/* 1555C4 */ void ftMh_TagRockPaper_Phys(HSD_GObj* gobj);\n/* 1555E4 */ void ftMh_TagRockPaper_Coll(HSD_GObj* gobj);\n/* 1555E8 */ void ftMh_TagGrab_Anim(HSD_GObj* gobj);\n/* 15565C */ void ftMh_TagGrab_IASA(HSD_GObj* gobj);\n/* 1556A0 */ void ftMh_TagGrab_Phys(HSD_GObj* gobj);\n/* 1556C0 */ void ftMh_TagGrab_Coll(HSD_GObj* gobj);\n/* 1556C4 */ void ftMh_TagSqueeze_Anim(HSD_GObj* gobj);\n/* 1557B0 */ void ftMh_TagSqueeze_IASA(HSD_GObj* gobj);\n/* 1557F4 */ void ftMh_TagSqueeze_Phys(HSD_GObj* gobj);\n/* 155814 */ void ftMh_TagSqueeze_Coll(HSD_GObj* gobj);\n/* 155864 */ void ftMh_TagFail_Anim(HSD_GObj* gobj);\n/* 1558A0 */ void ftMh_TagFail_IASA(HSD_GObj* gobj);\n/* 1558E4 */ void ftMh_TagFail_Phys(HSD_GObj* gobj);\n/* 155904 */ void ftMh_TagFail_Coll(HSD_GObj* gobj);\n/* 155908 */ void ftMh_TagCancel_Anim(HSD_GObj* gobj);\n/* 155990 */ void ftMh_TagCancel_IASA(HSD_GObj* gobj);\n/* 1559D4 */ void ftMh_TagCancel_Phys(HSD_GObj* gobj);\n/* 155A34 */ void ftMh_TagCancel_Coll(HSD_GObj* gobj);\n#define GALE01_154FAC\n/* 154FAC */ void ftMh_Throw_IASA(HSD_GObj* gobj);\n/* 154FF0 */ void ftMh_Throw_Phys(HSD_GObj* gobj);\n/* 155010 */ void ftMh_Throw_Coll(HSD_GObj* gobj);\n/* 155014 */ void ftMh_MS_379_80155014(HSD_GObj* gobj);\n#define GALE01_155D1C\n/* 155D1C */ void ftMh_CaptureWaitMasterHand_80155D1C(HSD_GObj* gobj);\n/* 155D5C */ void ftMh_CaptureWaitMasterHand_Anim(HSD_GObj* gobj);\n/* 155D60 */ void ftMh_CaptureWaitMasterHand_IASA(HSD_GObj* gobj);\n/* 155D64 */ void ftMh_CaptureWaitMasterHand_Phys(HSD_GObj* gobj);\n/* 155D68 */ void ftMh_CaptureWaitMasterHand_Coll(HSD_GObj* gobj);\n/* 155D6C */ void ftMh_CaptureWaitMasterHand_80155D6C(HSD_GObj* gobj,\n                                                      s32 arg1);\n/* 155E08 */ void ftMh_ThrownMasterHand_Anim(HSD_GObj* gobj);\n/* 155E0C */ void ftMh_ThrownMasterHand_IASA(HSD_GObj* gobj);\n/* 155E10 */ void ftMh_ThrownMasterHand_Phys(HSD_GObj* gobj);\n/* 155E14 */ void ftMh_ThrownMasterHand_Coll(HSD_GObj* gobj);\n#define GALE01_14FE10\n/* 14FE10 */ void ftMh_MS_341_8014FE10(HSD_GObj* gobj);\n/* 14FE58 */ void ftMh_MS_341_8014FE58(HSD_GObj* gobj);\n/* 14FF1C */ void ftMh_MS_341_8014FF1C(HSD_GObj* gobj);\n/* 14FFDC */ void ftMh_MS_341_8014FFDC(HSD_GObj* gobj);\n/* 150230 */ void ftMh_Wait1_0_Anim(HSD_GObj* gobj);\n/* 15082C */ void ftMh_Wait1_0_IASA(HSD_GObj* gobj);\n/* 150870 */ void ftMh_Wait1_0_Phys(HSD_GObj* gobj);\n/* 150890 */ void ftMh_Wait1_0_Coll(HSD_GObj* gobj);\n/* 150894 */ void ftMh_MS_341_80150894(HSD_GObj* gobj);\n#define GALE01_154C78\n/* 154C78 */ void ftMh_MS_375_80154C78(HSD_GObj* gobj);\n/* 154CF8 */ void ftMh_MS_378_80154CF8(HSD_GObj* gobj);\n#define GALE01_150C8C\n/* 150C8C */ void ftMh_MS_389_80150C8C(HSD_GObj* gobj);\n/* 150D28 */ void ftMh_MS_389_80150D28(HSD_GObj* gobj);\n/* 150DC4 */ void ftMh_MS_389_80150DC4(HSD_GObj* gobj, HSD_GObjEvent, Vec3*);\n/* 150F00 */ void ftMh_Wait1_2_Anim(HSD_GObj* gobj);\n/* 150F68 */ void ftMh_Wait1_2_Phys(HSD_GObj* gobj);\n/* 150FC8 */ void ftMh_Wait1_2_Coll(HSD_GObj* gobj);\n/* 151018 */ void ftMh_MS_389_80151018(HSD_GObj* gobj);\n/// @file\n/// 9 Walk\n#define GALE01_151D20\n/* 151D20 */ void ftMh_WalkShoot_Anim(HSD_GObj* gobj);\n/* 151D5C */ void ftMh_WalkShoot_IASA(HSD_GObj* gobj);\n/* 151DA0 */ void ftMh_WalkShoot_Phys(HSD_GObj* gobj);\n/* 151DC0 */ void ftMh_WalkShoot_Coll(HSD_GObj* gobj);\n/* 151DC4 */ void ftMh_MS_353_80151DC4(HSD_GObj* gobj);\n/* 151E10 */ void ftMh_Walk2_Anim(HSD_GObj* gobj);\n/* 151E4C */ void ftMh_Walk2_IASA(HSD_GObj* gobj);\n/* 151E90 */ void ftMh_Walk2_Phys(HSD_GObj* gobj);\n/* 151EB0 */ void ftMh_Walk2_Coll(HSD_GObj* gobj);\n/* 151EB4 */ void ftMh_MS_350_80151EB4(HSD_GObj* gobj);\n/* 151F00 */ void ftMh_WalkLoop_Anim(HSD_GObj* gobj);\n/* 15204C */ void ftMh_WalkLoop_IASA(HSD_GObj* gobj);\n/* 152090 */ void ftMh_WalkLoop_Phys(HSD_GObj* gobj);\n/* 1520D4 */ void ftMh_WalkLoop_Coll(HSD_GObj* gobj);\n/* 1520D8 */ void ftMh_MS_351_801520D8(HSD_GObj* gobj);\n#define MELEE_FT_CHARA_FTMEWTWO_FORWARD_H\nstatic MotionFlags const ftMt_MF_Special =\n    Ft_MF_SkipModel | Ft_MF_SkipItemVis | Ft_MF_UnkUpdatePhys |\n    Ft_MF_FreezeState;\nstatic MotionFlags const ftMt_MF_SpecialHiStart =\n    ftMt_MF_Special | Ft_MF_KeepFastFall | Ft_MF_KeepGfx;\nstatic MotionFlags const ftMt_MF_SpecialNStart =\n    ftMt_MF_Special | Ft_MF_KeepFastFall | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftMt_MF_SpecialLw =\n    ftMt_MF_Special | Ft_MF_KeepColAnimHitStatus | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftMt_MF_SpecialAirHiStart =\n    ftMt_MF_SpecialHiStart | Ft_MF_SkipParasol;\nstatic MotionFlags const ftMt_MF_SpecialAirNStart =\n    ftMt_MF_SpecialNStart | Ft_MF_SkipParasol;\nstatic MotionFlags const ftMt_MF_SpecialAirLw =\n    ftMt_MF_SpecialLw | Ft_MF_SkipParasol;\nstatic MotionFlags const ftMt_MF_SpecialS =\n    ftMt_MF_Special | Ft_MF_KeepGfx | Ft_MF_SkipColAnim;\nstatic MotionFlags const ftMt_MF_SpecialAirS =\n    ftMt_MF_SpecialS | Ft_MF_SkipParasol;\nstatic MotionFlags const ftMt_MF_SpecialN =\n    ftMt_MF_SpecialNStart | Ft_MF_Unk19;\nstatic MotionFlags const ftMt_MF_SpecialAirN =\n    ftMt_MF_SpecialN | Ft_MF_SkipParasol;\ntypedef enum ftMewtwo_MotionState {\n    ftMt_MS_SpecialNStart = ftCo_MS_Count,\n    ftMt_MS_SpecialNLoop,\n    ftMt_MS_SpecialNLoopFull,\n    ftMt_MS_SpecialNCancel,\n    ftMt_MS_SpecialNEnd,\n    ftMt_MS_SpecialAirNStart,\n    ftMt_MS_SpecialAirNLoop,\n    ftMt_MS_SpecialAirNLoopFull,\n    ftMt_MS_SpecialAirNCancel,\n    ftMt_MS_SpecialAirNEnd,\n    ftMt_MS_SpecialS,\n    ftMt_MS_SpecialAirS,\n    ftMt_MS_SpecialHiStart,\n    ftMt_MS_SpecialHiLost,\n    ftMt_MS_SpecialHi,\n    ftMt_MS_SpecialAirHiStart,\n    ftMt_MS_SpecialAirHiLost,\n    ftMt_MS_SpecialAirHi,\n    ftMt_MS_SpecialLw,\n    ftMt_MS_SpecialAirLw,\n    ftMt_MS_Count,\n    ftMt_MS_SelfCount = ftMt_MS_Count - ftCo_MS_Count,\n} ftMewtwo_MotionState;\ntypedef enum ftMt_Submotion {\n    ftMt_SM_SpecialNStart = ftCo_SM_Count,\n    ftMt_SM_SpecialNLoop,\n    ftMt_SM_SpecialNLoopFull,\n    ftMt_SM_SpecialNCancel,\n    ftMt_SM_SpecialNEnd,\n    ftMt_SM_SpecialAirNStart,\n    ftMt_SM_SpecialAirNLoop,\n    ftMt_SM_SpecialAirNLoopFull,\n    ftMt_SM_SpecialAirNCancel,\n    ftMt_SM_SpecialAirNEnd,\n    ftMt_SM_SpecialS,\n    ftMt_SM_SpecialAirS,\n    ftMt_SM_SpecialHiStart,\n    ftMt_SM_SpecialHi,\n    ftMt_SM_SpecialHiLost,\n    ftMt_SM_SpecialAirHiStart,\n    ftMt_SM_SpecialAirHi,\n    ftMt_SM_SpecialLw,\n    ftMt_SM_SpecialAirLw,\n    ftMt_SM_Count,\n    ftMt_SM_SelfCount = ftMt_SM_Count - ftCo_SM_Count,\n} ftMt_Submotion;\n#define GALE01_144DFC\n/* 144DFC */ void ftMt_Init_OnDeath2(HSD_GObj* gobj);\n/* 144E48 */ void ftMt_Init_OnLoad(HSD_GObj* gobj);\n/* 144EE0 */ void ftMt_Init_OnItemPickup(HSD_GObj* gobj, bool flag);\n/* 144EE4 */ void ftMt_Init_OnDeath(HSD_GObj* gobj);\n/* 144F18 */ void ftMt_Init_OnTakeDamage(HSD_GObj* gobj);\n/* 144F4C */ void ftMt_Init_OnItemDrop(HSD_GObj* gobj, bool flag);\n/* 144F50 */ void ftMt_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 144F54 */ void ftMt_Init_OnItemVisible(HSD_GObj* gobj);\n/* 144F58 */ void ftMt_Init_UnkMotionStates4(HSD_GObj* gobj);\n/* 144FB4 */ void ftMt_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 145018 */ void ftMt_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 14505C */ void ftMt_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 3D0B00 */ extern MotionState ftMt_Init_MotionStateTable[ftMt_MS_SelfCount];\n/* 3D0D80 */ extern char ftMt_Init_DatFilename[];\n/* 3D0D8C */ extern char ftMt_Init_DataName[];\n/* 3D0EC4 */ extern char ftMt_Init_AnimDatFilename[];\n/* 3D0F4C */ extern Fighter_DemoStrings ftMt_Init_DemoMotionFilenames;\n/* 3D0F5C */ extern Fighter_CostumeStrings ftMt_Init_CostumeStrings[];\n/// @file\n/// Up Special - Teleport (SpecialHi/SpecialAirHi)\n#define GALE01_1450A0\n/* 1450A0 */ void ftMt_SpecialHi_CreateGFX(HSD_GObj* gobj);\n/* 1450D4 */ void ftMt_SpecialHi_SetStartGFX(HSD_GObj* gobj);\n/* 145164 */ void ftMt_SpecialHi_SetEndGFX(HSD_GObj* gobj);\n/* 1451DC */ void ftMt_SpecialHiStart_Enter(HSD_GObj* gobj);\n/* 145258 */ void ftMt_SpecialAirHiStart_Enter(HSD_GObj* gobj);\n/* 1452EC */ void ftMt_SpecialHiStart_Anim(HSD_GObj* gobj);\n/* 145328 */ void ftMt_SpecialAirHiStart_Anim(HSD_GObj* gobj);\n/* 145364 */ void ftMt_SpecialHiStart_IASA(HSD_GObj* gobj);\n/* 145368 */ void ftMt_SpecialAirHiStart_IASA(HSD_GObj* gobj);\n/* 14536C */ void ftMt_SpecialHiStart_Phys(HSD_GObj* gobj);\n/* 14538C */ void ftMt_SpecialAirHiStart_Phys(HSD_GObj* gobj);\n/* 1453D0 */ void ftMt_SpecialHiStart_Coll(HSD_GObj* gobj);\n/* 14540C */ void ftMt_SpecialAirHiStart_Coll(HSD_GObj* gobj);\n/* 14547C */ void ftMt_SpecialHiStart_GroundToAir(HSD_GObj* gobj);\n/* 1454E8 */ void ftMt_SpecialAirHiStart_AirToGround(HSD_GObj* gobj);\n/* 145554 */ void ftMt_SpecialHiLost_Anim(HSD_GObj* gobj);\n/* 145590 */ void ftMt_SpecialAirHiLost_Anim(HSD_GObj* gobj);\n/* 1455CC */ void ftMt_SpecialHiLost_IASA(HSD_GObj* gobj);\n/* 1455D0 */ void ftMt_SpecialAirHiLost_IASA(HSD_GObj* gobj);\n/* 1455D4 */ void ftMt_SpecialHiLost_Phys(HSD_GObj* gobj);\n/* 1455F4 */ void ftMt_SpecialAirHiLost_Phys(HSD_GObj* gobj);\n/* 1455F8 */ void ftMt_SpecialHiLost_Coll(HSD_GObj* gobj);\n/* 145698 */ void ftMt_SpecialAirHiLost_Coll(HSD_GObj* gobj);\n/* 1458A4 */ void ftMt_SpecialHi_GroundToAir(HSD_GObj* gobj);\n/* 145920 */ void ftMt_SpecialAirHi_AirToGround(HSD_GObj* gobj);\n/* 145990 */ void ftMt_SpecialHi_Enter(HSD_GObj* gobj);\n/* 145B94 */ void ftMt_SpecialAirHi_Enter(HSD_GObj* gobj);\n/* 145DB0 */ void ftMt_SpecialHi_Anim(HSD_GObj* gobj);\n/* 145DEC */ void ftMt_SpecialAirHi_Anim(HSD_GObj* gobj);\n/* 145E4C */ void ftMt_SpecialHi_IASA(HSD_GObj* gobj);\n/* 145E50 */ void ftMt_SpecialAirHi_IASA(HSD_GObj* gobj);\n/* 145E54 */ void ftMt_SpecialHi_Phys(HSD_GObj* gobj);\n/* 145E74 */ void ftMt_SpecialAirHi_Phys(HSD_GObj* gobj);\n/* 145EF0 */ void ftMt_SpecialHi_Coll(HSD_GObj* gobj);\n/* 145F2C */ void ftMt_SpecialAirHi_Coll(HSD_GObj* gobj);\n/* 145FB0 */ void ftMt_SpecialHiLost_GroundToAir(HSD_GObj* gobj);\n/* 146010 */ void ftMt_SpecialHiLost_Enter(HSD_GObj* gobj);\n/* 1460CC */ void ftMt_SpecialAirHiLost_Enter(HSD_GObj* gobj);\n/// @file\n/// Down Special - Disable (SpecialLw/SpecialAirLw)\n#define GALE01_146198\n/* 146198 */ void ftMt_SpecialLw_ClearDisableGObj(HSD_GObj* gobj);\n/* 1461A8 */ void ftMt_SpecialLw_RemoveDisable(HSD_GObj* gobj);\n/* 1461F0 */ void ftMt_SpecialLw_Enter(HSD_GObj* gobj);\n/* 146264 */ void ftMt_SpecialAirLw_Enter(HSD_GObj* gobj);\n/* 1462DC */ void ftMt_SpecialLw_Anim(HSD_GObj* gobj);\n/* 146338 */ void ftMt_SpecialAirLw_Anim(HSD_GObj* gobj);\n/* 146394 */ void ftMt_SpecialLw_IASA(HSD_GObj* gobj);\n/* 146398 */ void ftMt_SpecialAirLw_IASA(HSD_GObj* gobj);\n/* 14639C */ void ftMt_SpecialLw_Phys(HSD_GObj* gobj);\n/* 1463BC */ void ftMt_SpecialAirLw_Phys(HSD_GObj* gobj);\n/* 146410 */ void ftMt_SpecialLw_GroundToAir(HSD_GObj* gobj);\n/* 1464B0 */ void ftMt_SpecialAirLw_AirToGround(HSD_GObj* gobj);\n/* 146544 */ void ftMt_SpecialLw_Coll(HSD_GObj* gobj);\n/* 14656C */ void ftMt_SpecialAirLw_Coll(HSD_GObj* gobj);\n/* 146594 */ void ftMt_SpecialLw_CreateDisable(HSD_GObj* gobj);\n/// @file\n/// Neutral Special - Shadow Ball (SpecialN/SpecialAirN)\n#define MELEE_FT_CHARA_FTMEWTWO_FTMEWTWO_SPECIALN_H\ns32 ftMt_SpecialN_GetChargeLevel(HSD_GObj* gobj, s32* chargeLevel,\n                                 s32* chargeCycles);\n/* 146D24 */ bool ftMt_SpecialN_CheckShadowBallRemove(HSD_GObj* gobj);\n/* 146D74 */ bool ftMt_SpecialN_CheckShadowBallCancel(HSD_GObj* gobj);\n/* 146DC8 */ void ftMt_SpecialN_SetNULL(HSD_GObj* gobj);\n/* 146E30 */ void ftMt_SpecialN_OnTakeDamage(HSD_GObj* gobj);\n/* 146ED0 */ void ftMt_SpecialN_OnDeath(HSD_GObj* gobj);\n/* 146FA8 */ void ftMt_SpecialN_ReleaseShadowBall(HSD_GObj* gobj);\n/* 1471C8 */ void ftMt_SpecialN_PlayChargeSFX(HSD_GObj* gobj);\n/* 147320 */ void ftMt_SpecialN_Enter(HSD_GObj* gobj);\n/* 1473F4 */ void ftMt_SpecialAirN_Enter(HSD_GObj* gobj);\n/* 1474C0 */ void ftMt_SpecialNStart_Anim(HSD_GObj* gobj);\n/* 14764C */ void ftMt_SpecialNLoop_Anim(HSD_GObj* gobj);\n/* 147850 */ void ftMt_SpecialNLoopFull_Anim(HSD_GObj* gobj);\n/* 147880 */ void ftMt_SpecialNCancel_Anim(HSD_GObj* gobj);\n/* 147910 */ void ftMt_SpecialNEnd_Anim(HSD_GObj* gobj);\n/* 147954 */ void ftMt_SpecialAirNStart_Anim(HSD_GObj* gobj);\n/* 147AEC */ void ftMt_SpecialAirNLoop_Anim(HSD_GObj* gobj);\n/* 147CF0 */ void ftMt_SpecialAirNLoopFull_Anim(HSD_GObj* gobj);\n/* 147D20 */ void ftMt_SpecialAirNCancel_Anim(HSD_GObj* gobj);\n/* 147DB0 */ void ftMt_SpecialAirNEnd_Anim(HSD_GObj* gobj);\n/* 147E30 */ void ftMt_SpecialNStart_IASA(HSD_GObj* gobj);\n/* 147E34 */ void ftMt_SpecialNLoop_IASA(HSD_GObj* gobj);\n/* 14800C */ void ftMt_SpecialNLoopFull_IASA(HSD_GObj* gobj);\n/* 1481CC */ void ftMt_SpecialNCancel_IASA(HSD_GObj* gobj);\n/* 1481D0 */ void ftMt_SpecialNEnd_IASA(HSD_GObj* gobj);\n/* 1481D4 */ void ftMt_SpecialAirNStart_IASA(HSD_GObj* gobj);\n/* 1481D8 */ void ftMt_SpecialAirNLoop_IASA(HSD_GObj* gobj);\n/* 148354 */ void ftMt_SpecialAirNLoopFull_IASA(HSD_GObj* gobj);\n/* 1484B8 */ void ftMt_SpecialAirNCancel_IASA(HSD_GObj* gobj);\n/* 1484BC */ void ftMt_SpecialAirNEnd_IASA(HSD_GObj* gobj);\n/* 1484C0 */ void ftMt_SpecialNStart_Phys(HSD_GObj* gobj);\n/* 1484E0 */ void ftMt_SpecialNLoop_Phys(HSD_GObj* gobj);\n/* 148500 */ void ftMt_SpecialNLoopFull_Phys(HSD_GObj* gobj);\n/* 148520 */ void ftMt_SpecialNCancel_Phys(HSD_GObj* gobj);\n/* 148540 */ void ftMt_SpecialNEnd_Phys(HSD_GObj* gobj);\n/* 148560 */ void ftMt_SpecialAirNStart_Phys(HSD_GObj* gobj);\n/* 148580 */ void ftMt_SpecialAirNLoop_Phys(HSD_GObj* gobj);\n/* 1485A0 */ void ftMt_SpecialAirNLoopFull_Phys(HSD_GObj* gobj);\n/* 1485C0 */ void ftMt_SpecialAirNCancel_Phys(HSD_GObj* gobj);\n/* 1485E0 */ void ftMt_SpecialAirNEnd_Phys(HSD_GObj* gobj);\n/* 148600 */ void ftMt_SpecialNStart_Coll(HSD_GObj* gobj);\n/* 14868C */ void ftMt_SpecialNLoop_Coll(HSD_GObj* gobj);\n/* 148718 */ void ftMt_SpecialNLoopFull_Coll(HSD_GObj* gobj);\n/* 1487A4 */ void ftMt_SpecialNCancel_Coll(HSD_GObj* gobj);\n/* 148830 */ void ftMt_SpecialNEnd_Coll(HSD_GObj* gobj);\n/* 1488BC */ void ftMt_SpecialAirNStart_Coll(HSD_GObj* gobj);\n/* 148948 */ void ftMt_SpecialAirNLoop_Coll(HSD_GObj* gobj);\n/* 1489D4 */ void ftMt_SpecialAirNLoopFull_Coll(HSD_GObj* gobj);\n/* 148A60 */ void ftMt_SpecialAirNCancel_Coll(HSD_GObj* gobj);\n/* 148AEC */ void ftMt_SpecialAirNEnd_Coll(HSD_GObj* gobj);\n/* 148B78 */ void ftMt_SpecialN_Shoot(HSD_GObj* gobj);\n/// @file\n/// Side Special - Confusion (SpecialS/SpecialAirS)\n#define GALE01_1466C4\n/* 1466C4 */ void ftMt_SpecialS_Enter(HSD_GObj* gobj);\n/* 14677C */ void ftMt_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 146858 */ void ftMt_SpecialS_Anim(HSD_GObj* gobj);\n/* 1468EC */ void ftMt_SpecialAirS_Anim(HSD_GObj* gobj);\n/* 146980 */ void ftMt_SpecialS_IASA(HSD_GObj* gobj);\n/* 146984 */ void ftMt_SpecialAirS_IASA(HSD_GObj* gobj);\n/* 146988 */ void ftMt_SpecialS_Phys(HSD_GObj* gobj);\n/* 1469BC */ void ftMt_SpecialAirS_Phys(HSD_GObj* gobj);\n/* 1469F0 */ void ftMt_SpecialS_GroundToAir(HSD_GObj* gobj);\n/* 146AD4 */ void ftMt_SpecialAirS_AirToGround(HSD_GObj* gobj);\n/* 146BB8 */ void ftMt_SpecialS_Coll(HSD_GObj* gobj);\n/* 146BE0 */ void ftMt_SpecialAirS_Coll(HSD_GObj* gobj);\n/* 146C08 */ void ftMt_SpecialS_ReflectThink(HSD_GObj* gobj);\n/* 146CC8 */ void ftMt_SpecialS_OnReflect(HSD_GObj* gobj);\n#define GALE01_122EDC\n#define MELEE_FT_CHARA_FTPOPO_FORWARD_H\nstatic MotionFlags const ftPp_MF_Special =\n    Ft_MF_SkipModel | Ft_MF_SkipItemVis | Ft_MF_UnkUpdatePhys |\n    Ft_MF_FreezeState;\nstatic MotionFlags const ftPp_MF_SpecialLw =\n    ftPp_MF_Special | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftPp_MF_SpecialN =\n    ftPp_MF_Special | Ft_MF_KeepFastFall | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftPp_MF_SpecialS =\n    ftPp_MF_Special | Ft_MF_KeepGfx | Ft_MF_KeepSfx;\nstatic MotionFlags const ftPp_MF_SpecialHi =\n    ftPp_MF_SpecialS | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftPp_MF_MS_358 =\n    ftPp_MF_SpecialLw | Ft_MF_SkipParasol;\nstatic MotionFlags const ftPp_MF_SpecialAirN =\n    ftPp_MF_SpecialN | Ft_MF_SkipParasol;\nstatic MotionFlags const ftPp_MF_SpecialAirS =\n    ftPp_MF_SpecialS | Ft_MF_SkipParasol;\nstatic MotionFlags const ftPp_MF_SpecialAirHi =\n    ftPp_MF_SpecialHi | Ft_MF_SkipParasol;\ntypedef enum ftPopo_MotionState {\n    ftPp_MS_SpecialN = ftCo_MS_Count,\n    ftPp_MS_SpecialAirN,\n    ftPp_MS_SpecialS1,\n    ftPp_MS_SpecialS2,\n    ftPp_MS_SpecialAirS1,\n    ftPp_MS_SpecialAirS2,\n    ftPp_MS_SpecialHiStart_0,\n    ftPp_MS_SpecialHiThrow_0,\n    ftPp_MS_SpecialHiThrow2,\n    ftPp_MS_SpecialHiStart_1,\n    ftPp_MS_SpecialHiThrow_1,\n    ftPp_MS_SpecialAirHiStart_0,\n    ftPp_MS_SpecialAirHiThrow_0,\n    ftPp_MS_SpecialAirHiThrow2,\n    ftPp_MS_SpecialAirHiStart_1,\n    ftPp_MS_SpecialAirHiThrow_1,\n    ftPp_MS_SpecialLw,\n    ftPp_MS_SpecialAirLw,\n    ftPp_MS_SpecialS_0,\n    ftPp_MS_SpecialS_1,\n    ftPp_MS_SpecialHi_0,\n    ftPp_MS_SpecialHi_1,\n    ftPp_MS_SpecialHi_2,\n    ftPp_MS_SpecialHi_3,\n    ftPp_MS_SpecialHi_4,\n    ftPp_MS_SpecialHi_5,\n    ftPp_MS_Count,\n    ftPp_MS_SelfCount = ftPp_MS_Count - ftCo_MS_Count,\n} ftPopo_MotionState;\ntypedef enum ftPp_Submotion {\n    ftPp_SM_SpecialN = ftCo_SM_Count,\n    ftPp_SM_SpecialAirN,\n    ftPp_SM_SpecialS1,\n    ftPp_SM_SpecialS2,\n    ftPp_SM_SpecialAirS1,\n    ftPp_SM_SpecialAirS2,\n    ftPp_SM_SpecialHiStart_0,\n    ftPp_SM_SpecialHiThrow_0,\n    ftPp_SM_SpecialHiThrow2,\n    ftPp_SM_SpecialHiStart_1,\n    ftPp_SM_SpecialHiThrow_1,\n    ftPp_SM_SpecialAirHiStart_0,\n    ftPp_SM_SpecialAirHiThrow_0,\n    ftPp_SM_SpecialAirHiThrow2,\n    ftPp_SM_SpecialAirHiStart_1,\n    ftPp_SM_SpecialAirHiThrow_1,\n    ftPp_SM_SpecialLw,\n    ftPp_SM_SpecialAirLw,\n    ftPp_SM_SpecialS_0,\n    ftPp_SM_SpecialS_1,\n    ftPp_SM_SpecialHi_0,\n    ftPp_SM_SpecialHi_1,\n    ftPp_SM_SpecialHi_2,\n    ftPp_SM_SpecialHi_3,\n    ftPp_SM_SpecialHi_4,\n    ftPp_SM_SpecialHi_5,\n    ftPp_SM_Count,\n    ftPp_SM_SelfCount = ftPp_SM_Count - ftCo_SM_Count,\n} ftPp_Submotion;\n/* 122EDC */ void ftNn_Init_OnLoad(HSD_GObj* gobj);\n/* 122F28 */ void ftNn_Init_OnDeath(HSD_GObj* gobj);\n/* 122FAC */ void ftNn_Init_80122FAC(HSD_GObj* gobj);\n/* 122FCC */ void ftNn_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 123348 */ void ftPp_SpecialHi_0_Anim(HSD_GObj* gobj);\n/* 123384 */ void ftPp_SpecialHi_3_Anim(HSD_GObj* gobj);\n/* 123388 */ void ftPp_SpecialHi_0_IASA(HSD_GObj* gobj);\n/* 12338C */ void ftPp_SpecialHi_3_IASA(HSD_GObj* gobj);\n/* 123390 */ void ftPp_SpecialHi_0_Phys(HSD_GObj* gobj);\n/* 1233EC */ void ftPp_SpecialHi_3_Phys(HSD_GObj* gobj);\n/* 1233F0 */ void ftPp_SpecialHi_0_Coll(HSD_GObj* gobj);\n/* 1233F4 */ void ftPp_SpecialHi_3_Coll(HSD_GObj* gobj);\n/* 123448 */ void ftPp_SpecialHi_1_Anim(HSD_GObj* gobj);\n/* 123484 */ void ftPp_SpecialHi_4_Anim(HSD_GObj* gobj);\n/* 1234E4 */ void ftPp_SpecialHi_1_IASA(HSD_GObj* gobj);\n/* 1234E8 */ void ftPp_SpecialHi_4_IASA(HSD_GObj* gobj);\n/* 1234EC */ void ftPp_SpecialHi_1_Phys(HSD_GObj* gobj);\n/* 12350C */ void ftPp_SpecialHi_4_Phys(HSD_GObj* gobj);\n/* 1235BC */ void ftPp_SpecialHi_1_Coll(HSD_GObj* gobj);\n/* 1235F8 */ void ftPp_SpecialHi_4_Coll(HSD_GObj* gobj);\n/* 123CA4 */ void ftPp_SpecialS_0_Anim(HSD_GObj* gobj);\n/* 123D68 */ void ftPp_SpecialS_1_Anim(HSD_GObj* gobj);\n/* 123E58 */ void ftPp_SpecialS_0_IASA(HSD_GObj* gobj);\n/* 123E5C */ void ftPp_SpecialS_1_IASA(HSD_GObj* gobj);\n/* 123E60 */ void ftPp_SpecialS_0_Phys(HSD_GObj* gobj);\n/* 123EFC */ void ftPp_SpecialS_1_Phys(HSD_GObj* gobj);\n/* 123F98 */ void ftPp_SpecialS_0_Coll(HSD_GObj* gobj);\n/* 1241A0 */ void ftPp_SpecialS_1_Coll(HSD_GObj* gobj);\n/* 3CD838 */ extern MotionState ftNn_Init_MotionStateTable[ftPp_MS_SelfCount];\n/* 3CDB78 */ extern char ftNn_Init_DatFilename[];\n/* 3CDB84 */ extern char ftNn_Init_DataName[];\n/* 3CDCA0 */ extern char ftNn_Init_AnimDatFilename[];\n/* 3CDD1C */ extern Fighter_DemoStrings ftNn_Init_DemoMotionFilenames;\n/* 3CDD2C */ extern Fighter_CostumeStrings ftNn_Init_CostumeStrings[];\n#define MELEE_FT_CHARA_FTNESS_FORWARD_H\nstatic MotionFlags const ftNs_MF_Attack4 =\n    Ft_MF_SkipHit | Ft_MF_SkipRumble | Ft_MF_SkipItemVis | Ft_MF_FreezeState;\nstatic MotionFlags const ftNs_MF_AttackHi4 =\n    ftNs_MF_Attack4 | Ft_MF_KeepGfx;\nstatic MotionFlags const ftNs_MF_AttackLw4 =\n    ftNs_MF_AttackHi4 | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftNs_MF_AttackHi4Start =\n    ftNs_MF_AttackHi4 | Ft_MF_KeepSfx;\nstatic MotionFlags const ftNs_MF_AttackLw4Start =\n    ftNs_MF_AttackLw4 | Ft_MF_KeepSfx;\nstatic MotionFlags const ftNs_MF_AttackS4 =\n    ftNs_MF_Attack4 | Ft_MF_KeepFastFall | Ft_MF_KeepSfx | Ft_MF_SkipColAnim;\nstatic MotionFlags const ftNs_MF_Special =\n    Ft_MF_SkipModel | Ft_MF_SkipItemVis | Ft_MF_UnkUpdatePhys |\n    Ft_MF_FreezeState;\nstatic MotionFlags const ftNs_MF_SpecialLw =\n    ftNs_MF_Special | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftNs_MF_Special_SkipUpdateThrowException\n     = ftNs_MF_Special | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftNs_MF_SpecialN =\n    ftNs_MF_Special_SkipUpdateThrowException | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftNs_MF_SpecialS =\n    ftNs_MF_Special_SkipUpdateThrowException | Ft_MF_KeepGfx;\nstatic MotionFlags const ftNs_MF_SpecialHi =\n    ftNs_MF_SpecialN | Ft_MF_KeepGfx;\nstatic MotionFlags const ftNs_MF_SpecialAirLw =\n    ftNs_MF_SpecialLw | Ft_MF_SkipParasol;\nstatic MotionFlags const ftNs_MF_SpecialAirN =\n    ftNs_MF_SpecialN | Ft_MF_SkipParasol;\nstatic MotionFlags const ftNs_MF_SpecialAirS =\n    ftNs_MF_SpecialS | Ft_MF_SkipParasol;\nstatic MotionFlags const ftNs_MF_SpecialAirHi =\n    ftNs_MF_SpecialHi | Ft_MF_SkipParasol;\nstatic MotionFlags const ftNs_MF_SpecialLwLoop =\n    ftNs_MF_SpecialLw | Ft_MF_Unk19;\nstatic MotionFlags const ftNs_MF_SpecialAirLwLoop =\n    ftNs_MF_SpecialLwLoop | Ft_MF_SkipParasol;\ntypedef enum ftNess_MotionState {\n    ftNs_MS_AttackS4 = ftCo_MS_Count,\n    ftNs_MS_AttackHi4,\n    ftNs_MS_AttackHi4Charge,\n    ftNs_MS_AttackHi4Release,\n    ftNs_MS_AttackLw4,\n    ftNs_MS_AttackLw4Charge,\n    ftNs_MS_AttackLw4Release,\n    ftNs_MS_SpecialNStart,\n    ftNs_MS_SpecialNHold,\n    ftNs_MS_SpecialNRelease,\n    ftNs_MS_SpecialNEnd,\n    ftNs_MS_SpecialAirNStart,\n    ftNs_MS_SpecialAirNHold,\n    ftNs_MS_SpecialAirNRelease,\n    ftNs_MS_SpecialAirNEnd,\n    ftNs_MS_SpecialS,\n    ftNs_MS_SpecialAirS,\n    ftNs_MS_SpecialHiStart,\n    ftNs_MS_SpecialHiHold,\n    ftNs_MS_SpecialHiEnd,\n    ftNs_MS_SpecialHi,\n    ftNs_MS_SpecialAirHiStart,\n    ftNs_MS_SpecialAirHiHold,\n    ftNs_MS_SpecialAirHiEnd,\n    ftNs_MS_SpecialAirHi,\n    ftNs_MS_SpecialAirHiRebound,\n    ftNs_MS_SpecialLwStart,\n    ftNs_MS_SpecialLwHold,\n    ftNs_MS_SpecialLwHit,\n    ftNs_MS_SpecialLwEnd,\n    ftNs_MS_SpecialLwTurn,\n    ftNs_MS_SpecialAirLwStart,\n    ftNs_MS_SpecialAirLwHold,\n    ftNs_MS_SpecialAirLwHit,\n    ftNs_MS_SpecialAirLwEnd,\n    ftNs_MS_SpecialAirLwTurn,\n    ftNs_MS_Count,\n    ftNs_MS_SelfCount = ftNs_MS_Count - ftCo_MS_Count,\n} ftNess_MotionState;\ntypedef enum ftNs_Submotion {\n    ftNs_SM_AttackHi4Charge = ftCo_SM_Count,\n    ftNs_SM_AttackHi4Release,\n    ftNs_SM_AttackLw4Charge,\n    ftNs_SM_AttackLw4Release,\n    ftNs_SM_SpecialNStart,\n    ftNs_SM_SpecialNHold0,\n    ftNs_SM_SpecialNHold1,\n    ftNs_SM_SpecialNEnd,\n    ftNs_SM_SpecialAirNStart,\n    ftNs_SM_SpecialAirNHold0,\n    ftNs_SM_SpecialAirNHold1,\n    ftNs_SM_SpecialAirNEnd,\n    ftNs_SM_SpecialS,\n    ftNs_SM_SpecialAirS,\n    ftNs_SM_SpecialHiStart,\n    ftNs_SM_SpecialHiHold,\n    ftNs_SM_SpecialHiEnd,\n    ftNs_SM_SpecialHi,\n    ftNs_SM_SpecialAirHiStart,\n    ftNs_SM_SpecialAirHiHold,\n    ftNs_SM_SpecialAirHiEnd,\n    ftNs_SM_SpecialAirHi,\n    ftNs_SM_SpecialAirHiRebound,\n    ftNs_SM_SpecialLwStart,\n    ftNs_SM_SpecialLwHold,\n    ftNs_SM_SpecialLwHit,\n    ftNs_SM_SpecialLwEnd,\n    ftNs_SM_SpecialAirLwStart,\n    ftNs_SM_SpecialAirLwHold,\n    ftNs_SM_SpecialAirLwHit,\n    ftNs_SM_SpecialAirLwEnd,\n    ftNs_SM_Count,\n    ftNs_SM_SelfCount = ftNs_SM_Count - ftCo_SM_Count,\n} ftNs_Submotion;\n#define GALE01_114EB8\n/* 114EB8 */ void ftNs_AttackHi4_YoyoUpdateHitPos(HSD_GObj* gobj);\n/* 114F0C */ void ftNs_AttackHi4_YoyoCheckTimedRehit(HSD_GObj* gobj);\n/* 114FF8 */ s32 ftNs_AttackHi4_YoyoCheckEnvColl(HSD_GObj* gobj, Vec3* ECBUnk,\n                                                 Vec3* ECBUnk2, f32 float_unk);\n/* 115114 */ void ftNs_AttackHi4_YoyoSetUnkPos(HSD_GObj* gobj, Vec3* arg1);\n/* 1151EC */ void ftNs_AttackHi4_YoyoSetHitPos(HSD_GObj* gobj);\n/* 1152D0 */ void ftNs_AttackHi4_YoyoSetHitPosUnk(HSD_GObj* gobj, f32 arg8);\n/* 115404 */ bool ftNs_AttackHi4_YoyoCheckNoObstruct(HSD_GObj* gobj);\n/* 115534 */ void ftNs_AttackHi4_YoyoSetVarAll(HSD_GObj* gobj);\n/* 11556C */ void ftNs_AttackHi4_YoyoApplySmash(HSD_GObj* gobj);\n/* 115680 */ void ftNs_AttackHi4_YoyoSetChargeDamage(HSD_GObj* gobj);\n/* 115784 */ bool ftNs_AttackHi4_YoyoThink_IsRemove(HSD_GObj* gobj);\n/* 11599C */ void ftNs_AttackHi4_YoyoSetUnkRate(HSD_GObj* gobj);\n/* 115A08 */ void ftNs_AttackHi4_YoyoCreateItem(HSD_GObj* gobj);\n/* 115AC4 */ void ftNs_AttackHi4_YoyoItemSetFlag(HSD_GObj* gobj);\n/* 115AF8 */ void ftNs_AttackHi4_YoyoItemDespawn(HSD_GObj* gobj);\n/* 115B50 */ void ftNs_AttackHi4_YoyoItemSetUnk2(HSD_GObj* gobj);\n/* 115B80 */ void ftNs_AttackHi4_YoyoItemSetUnk(HSD_GObj* gobj);\n/* 115BB0 */ void ftNs_AttackHi4_Enter(HSD_GObj* gobj);\n/* 115C74 */ void ftNs_AttackHi4_YoyoStartTimedRehit(HSD_GObj* gobj);\n/* 115C9C */ void ftNs_AttackHi4_Anim(HSD_GObj* gobj);\n/* 115E74 */ void ftNs_AttackHi4_IASA(HSD_GObj* gobj);\n/* 115EB8 */ void ftNs_AttackHi4_Phys(HSD_GObj* gobj);\n/* 115F14 */ void ftNs_AttackHi4_Coll(HSD_GObj* gobj);\n/* 115F88 */ void ftNs_AttackHi4Charge_Anim(HSD_GObj* gobj);\n/* 1160B4 */ void ftNs_AttackHi4Charge_IASA(HSD_GObj* gobj);\n/* 1160E4 */ void ftNs_AttackHi4Charge_Phys(HSD_GObj* gobj);\n/* 116104 */ void ftNs_AttackHi4Charge_Coll(HSD_GObj* gobj);\n/* 116178 */ void ftNs_AttackHi4Charge_Enter(HSD_GObj* gobj);\n/* 11620C */ void ftNs_AttackHi4Release_Anim(HSD_GObj* gobj);\n/* 1162B0 */ void ftNs_AttackHi4Release_IASA(HSD_GObj* gobj);\n/* 1162E0 */ void ftNs_AttackHi4Release_Phys(HSD_GObj* gobj);\n/* 116420 */ void ftNs_AttackHi4Release_Coll(HSD_GObj* gobj);\n/* 116494 */ void ftNs_AttackHi4Release_Enter(HSD_GObj* gobj);\n/// @file\n/// Down Smash callbacks (AttackLw4)\n#define GALE01_11659C\n/* 11659C */ void ftNs_AttackLw4_Enter(HSD_GObj* gobj);\n/* 116638 */ void ftNs_AttackLw4_Anim(HSD_GObj* gobj);\n/* 1166D4 */ void ftNs_AttackLw4_IASA(HSD_GObj* gobj);\n/* 116718 */ void ftNs_AttackLw4_Phys(HSD_GObj* gobj);\n/* 11674C */ void ftNs_AttackLw4_Coll(HSD_GObj* gobj);\n/* 116798 */ void ftNs_AttackLw4Charge_Anim(HSD_GObj* gobj);\n/* 116828 */ void ftNs_AttackLw4Charge_IASA(HSD_GObj* gobj);\n/* 116858 */ void ftNs_AttackLw4Charge_Phys(HSD_GObj* gobj);\n/* 116878 */ void ftNs_AttackLw4Charge_Coll(HSD_GObj* gobj);\n/* 1168C4 */ void ftNs_AttackLw4Charge_Enter(HSD_GObj* gobj);\n/* 116958 */ void ftNs_AttackLw4Release_Anim(HSD_GObj* gobj);\n/* 1169BC */ void ftNs_AttackLw4Release_IASA(HSD_GObj* gobj);\n/* 1169EC */ void ftNs_AttackLw4Release_Phys(HSD_GObj* gobj);\n/* 116A9C */ void ftNs_AttackLw4Release_Coll(HSD_GObj* gobj);\n/* 116AE8 */ void ftNs_AttackLw4Release_Enter(HSD_GObj* gobj);\n/// @file\n/// Forward Smash (AttackS4)\n#define GALE01_114BF4\n/* 114BF4 */ void ftNs_AttackS4_OnReflect(HSD_GObj* gobj);\n/* 114C24 */ void ftNs_AttackS4_Enter(HSD_GObj* gobj);\n/* 114CC0 */ bool ftNs_AttackS4_CheckNessBatRemove(HSD_GObj* gobj);\n/* 114CF4 */ void ftNs_AttackS4_ItemNessBatRemove(HSD_GObj* gobj);\n/* 114D34 */ void ftNs_AttackS4_ItemNessBatSetNULL(HSD_GObj* gobj);\n/* 114D50 */ void ftNs_AttackS4_Anim(HSD_GObj* gobj);\n/* 114E04 */ void ftNs_AttackS4_IASA(HSD_GObj* gobj);\n/* 114E64 */ void ftNs_AttackS4_Phys(HSD_GObj* gobj);\n/* 114E98 */ void ftNs_AttackS4_Coll(HSD_GObj* gobj);\n#define GALE01_1147C0\n/* 1147C0 */ void ftNs_Init_OnDeath(HSD_GObj* gobj);\n/* 11480C */ void ftNs_Init_OnLoad(HSD_GObj* gobj);\n/* 1148F8 */ void ftNs_Init_OnDamage(HSD_GObj* gobj);\n/* 11493C */ void ftNs_Init_OnAbsorb(HSD_GObj* gobj);\n/* 11495C */ f32 ftNs_Init_GetAbsorbHeal(Fighter* fp);\n/* 114968 */ void ftNs_Init_OnItemPickup(HSD_GObj* gobj, bool catchItemFlag);\n/* 114A48 */ void ftNs_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 114A90 */ void ftNs_Init_OnItemVisible(HSD_GObj* gobj);\n/* 114AD8 */ void ftNs_Init_OnItemDrop(HSD_GObj* gobj, bool dropItemFlag);\n/* 114B2C */ void ftNs_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 114B6C */ void ftNs_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 114BB0 */ void ftNs_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 3CC650 */ extern MotionState ftNs_Init_MotionStateTable[ftNs_MS_SelfCount];\n/* 3CCAD0 */ extern char ftNs_Init_DatFilename[];\n/* 3CCADC */ extern char ftNs_Init_DataName[];\n/* 3CCBF8 */ extern char ftNs_Init_AnimDatFilename[];\n/* 3CCC74 */ extern Fighter_DemoStrings ftNs_Init_DemoMotionFilenames;\n/* 3CCC84 */ extern Fighter_CostumeStrings ftNs_Init_CostumeStrings[];\n/// @file\n/// PK Thunder callbacks (SpecialHi)\n#define GALE01_116D04\n/* 116D04 */ void ftNs_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 116DB0 */ void ftNs_SpecialAirS_Anim(HSD_GObj* gobj);\n/* 116E0C */ void ftNs_SpecialAirS_Phys(HSD_GObj* gobj);\n/* 116E68 */ void ftNs_SpecialAirS_Coll(HSD_GObj* gobj);\n/* 117034 */ void ftNs_SpecialAirNStart_Enter(HSD_GObj* gobj);\n/* 117378 */ void ftNs_SpecialAirNStart_Anim(HSD_GObj* gobj);\n/* 117458 */ void ftNs_SpecialAirNRelease_Anim(HSD_GObj* gobj);\n/* 11758C */ void ftNs_SpecialAirNEnd_Anim(HSD_GObj* gobj);\n/* 1176CC */ void ftNs_SpecialAirNStart_IASA(HSD_GObj* gobj);\n/* 1176D0 */ void ftNs_SpecialAirNRelease_IASA(HSD_GObj* gobj);\n/* 11774C */ void ftNs_SpecialAirNEnd_IASA(HSD_GObj* gobj);\n/* 1177C8 */ void ftNs_SpecialAirNStart_Phys(HSD_GObj* gobj);\n/* 117828 */ void ftNs_SpecialAirNRelease_Phys(HSD_GObj* gobj);\n/* 117888 */ void ftNs_SpecialAirNEnd_Phys(HSD_GObj* gobj);\n/* 117A2C */ void ftNs_SpecialAirNStart_Coll(HSD_GObj* gobj);\n/* 117A98 */ void ftNs_SpecialAirNRelease_Coll(HSD_GObj* gobj);\n/* 117B04 */ void ftNs_SpecialAirNEnd_Coll(HSD_GObj* gobj);\n/* 117B70 */ void ftNs_SpecialHiStopGFX(HSD_GObj* gobj);\n/* 117BBC */ bool\nftNs_SpecialHi_ItemPKThunder_CheckNessCollide(HSD_GObj* gobj);\n/* 117D9C */ bool ftNs_SpecialHi_CheckSpecialHiHold(HSD_GObj* gobj);\n/* 117DD4 */ void ftNs_SpecialHi_ItemPKThunderRemove(HSD_GObj* gobj);\n/* 117E60 */ void ftNs_SpecialHi_TakeDamage(HSD_GObj* gobj);\n/* 117F00 */ void ftNs_SpecialHi_ItemPKThunderCheckOwn(HSD_GObj* gobj,\n                                                       HSD_GObj* thunder_gobj);\n/* 118120 */ void ftNs_SpecialHiStart_Enter(HSD_GObj* gobj);\n/* 118250 */ void ftNs_SpecialAirHiStart_Enter(HSD_GObj* gobj);\n/* 118384 */ void ftNs_SpecialHi_Enter(HSD_GObj* gobj);\n/* 118570 */ void ftNs_SpecialAirHi_Enter(HSD_GObj* gobj);\n/* 1186B0 */ void ftNs_SpecialHiStart_Anim(HSD_GObj* gobj);\n/* 1187A4 */ void ftNs_SpecialHiHold_Anim(HSD_GObj* gobj);\n/* 118900 */ void ftNs_SpecialHiEnd_Anim(HSD_GObj* gobj);\n/* 11893C */ void ftNs_SpecialHi_Anim(HSD_GObj* gobj);\n/* 118A10 */ void ftNs_SpecialAirHiStart_Anim(HSD_GObj* gobj);\n/* 118B04 */ void ftNs_SpecialAirHiHold_Anim(HSD_GObj* gobj);\n/* 118D60 */ void ftNs_SpecialAirHiEnd_Anim(HSD_GObj* gobj);\n/* 118DF8 */ void ftNs_SpecialAirHi_Anim(HSD_GObj* gobj);\n/* 118EF0 */ void ftNs_SpecialAirHiRebound_Anim(HSD_GObj* gobj);\n/* 118F80 */ void ftNs_SpecialHiStart_IASA(HSD_GObj* gobj);\n/* 118F84 */ void ftNs_SpecialHiHold_IASA(HSD_GObj* gobj);\n/* 118F88 */ void ftNs_SpecialHiEnd_IASA(HSD_GObj* gobj);\n/* 118F8C */ void ftNs_SpecialHi_IASA(HSD_GObj* gobj);\n/* 118F90 */ void ftNs_SpecialAirHiStart_IASA(HSD_GObj* gobj);\n/* 118F94 */ void ftNs_SpecialAirHiHold_IASA(HSD_GObj* gobj);\n/* 118F98 */ void ftNs_SpecialAirHiEnd_IASA(HSD_GObj* gobj);\n/* 118F9C */ void ftNs_SpecialAirHi_IASA(HSD_GObj* gobj);\n/* 118FA0 */ void ftNs_SpecialAirHiRebound_IASA(HSD_GObj* gobj);\n/* 118FA4 */ void ftNs_SpecialHiStart_Phys(HSD_GObj* gobj);\n/* 118FDC */ void ftNs_SpecialHiHold_Phys(HSD_GObj* gobj);\n/* 118FFC */ void ftNs_SpecialHiEnd_Phys(HSD_GObj* gobj);\n/* 11901C */ void ftNs_SpecialHi_Phys(HSD_GObj* gobj);\n/* 119134 */ void ftNs_SpecialAirHiStart_Phys(HSD_GObj* gobj);\n/* 119194 */ void ftNs_SpecialAirHiHold_Phys(HSD_GObj* gobj);\n/* 1191F4 */ void ftNs_SpecialAirHiEnd_Phys(HSD_GObj* gobj);\n/* 119254 */ void ftNs_SpecialAirHi_Phys(HSD_GObj* gobj);\n/* 119410 */ void ftNs_SpecialAirHiRebound_Phys(HSD_GObj* gobj);\n/* 119460 */ void ftNs_SpecialHiStart_Coll(HSD_GObj* gobj);\n/* 1194CC */ void ftNs_SpecialHiHold_Coll(HSD_GObj* gobj);\n/* 119538 */ void ftNs_SpecialHiEnd_Coll(HSD_GObj* gobj);\n/* 1195A4 */ void ftNs_SpecialHi_Coll(HSD_GObj* gobj);\n/* 119798 */ void ftNs_SpecialAirHiStart_Coll(HSD_GObj* gobj);\n/* 119804 */ void ftNs_SpecialAirHiHold_Coll(HSD_GObj* gobj);\n/* 119870 */ void ftNs_SpecialAirHiEnd_Coll(HSD_GObj* gobj);\n/* 1198DC */ void ftNs_SpecialAirHi_Coll(HSD_GObj* gobj);\n/* 119D58 */ void ftNs_SpecialAirHiRebound_Coll(HSD_GObj* gobj);\n/// @file\n/// PSI Magnet callbacks (SpecialLw)\n#define GALE01_119E14\n/* 119E14 */ void ftNs_SpecialLwStart_Enter(HSD_GObj* gobj);\n/* 119E90 */ void ftNs_SpecialAirLwStart_Enter(HSD_GObj* gobj);\n/* 119F20 */ void ftNs_SpecialLwStart_Anim(HSD_GObj* gobj);\n/* 11A000 */ void ftNs_SpecialAirLwStart_Anim(HSD_GObj* gobj);\n/* 11A0E0 */ void ftNs_SpecialLwStart_IASA(HSD_GObj* gobj);\n/* 11A0E4 */ void ftNs_SpecialAirLwStart_IASA(HSD_GObj* gobj);\n/* 11A0E8 */ void ftNs_SpecialLwStart_Phys(HSD_GObj* gobj);\n/* 11A108 */ void ftNs_SpecialAirLwStart_Phys(HSD_GObj* gobj);\n/* 11A168 */ void ftNs_SpecialLwStart_Coll(HSD_GObj* gobj);\n/* 11A1A4 */ void ftNs_SpecialAirLwStart_Coll(HSD_GObj* gobj);\n/* 11A1E0 */ void ftNs_SpecialLwStart_GroundToAir(HSD_GObj* gobj);\n/* 11A240 */ void ftNs_SpecialAirLwStart_AirToGround(HSD_GObj* gobj);\n/* 11A2A8 */ void ftNs_SpecialLwHold_Anim(HSD_GObj* gobj);\n/* 11A370 */ void ftNs_SpecialAirLwHold_Anim(HSD_GObj* gobj);\n/* 11A438 */ void ftNs_SpecialLwHold_IASA(HSD_GObj* gobj);\n/* 11A43C */ void ftNs_SpecialAirLwHold_IASA(HSD_GObj* gobj);\n/* 11A440 */ void ftNs_SpecialLwHold_Phys(HSD_GObj* gobj);\n/* 11A474 */ void ftNs_SpecialAirLwHold_Phys(HSD_GObj* gobj);\n/* 11A4E8 */ void ftNs_SpecialLwHold_Coll(HSD_GObj* gobj);\n/* 11A524 */ void ftNs_SpecialAirLwHold_Coll(HSD_GObj* gobj);\n/* 11A560 */ void ftNs_SpecialLwHold_GroundToAir(HSD_GObj* gobj);\n/* 11A5D4 */ void ftNs_SpecialAirLwHold_AirToGround(HSD_GObj* gobj);\n/* 11A650 */ void ftNs_SpecialLwHold_Enter(HSD_GObj* gobj);\n/* 11A6A8 */ void ftNs_SpecialAirLwHold_Enter(HSD_GObj* gobj);\n/* 11A700 */ void ftNs_SpecialLwTurn_Anim(HSD_GObj* gobj);\n/* 11A810 */ void ftNs_SpecialAirLwTurn_Anim(HSD_GObj* gobj);\n/* 11A920 */ void ftNs_SpecialLwTurn_IASA(HSD_GObj* gobj);\n/* 11A924 */ void ftNs_SpecialAirLwTurn_IASA(HSD_GObj* gobj);\n/* 11A928 */ void ftNs_SpecialLwTurn_Phys(HSD_GObj* gobj);\n/* 11A95C */ void ftNs_SpecialAirLwTurn_Phys(HSD_GObj* gobj);\n/* 11A9D0 */ void ftNs_SpecialLwTurn_Coll(HSD_GObj* gobj);\n/* 11AA0C */ void ftNs_SpecialAirLwTurn_Coll(HSD_GObj* gobj);\n/* 11AA48 */ void ftNs_SpecialLwTurn_GroundToAir(HSD_GObj* gobj);\n/* 11AAA8 */ void ftNs_SpecialAirLwTurn_AirToGround(HSD_GObj* gobj);\n/* 11AB10 */ bool ftNs_SpecialLwHold_GroundOrAir(HSD_GObj* gobj);\n/* 11ABF8 */ void ftNs_SpecialLwHit_Anim(HSD_GObj* gobj);\n/* 11ADC8 */ void ftNs_SpecialAirLwHit_Anim(HSD_GObj* gobj);\n/* 11AEE0 */ void ftNs_SpecialLwHit_IASA(HSD_GObj* gobj);\n/* 11AEE4 */ void ftNs_SpecialAirLwHit_IASA(HSD_GObj* gobj);\n/* 11AEE8 */ void ftNs_SpecialLwHit_Phys(HSD_GObj* gobj);\n/* 11AF1C */ void ftNs_SpecialAirLwHit_Phys(HSD_GObj* gobj);\n/* 11AF90 */ void ftNs_SpecialLwHit_Coll(HSD_GObj* gobj);\n/* 11AFCC */ void ftNs_SpecialAirLwHit_Coll(HSD_GObj* gobj);\n/* 11B008 */ void ftNs_SpecialLwHit_GroundToAir(HSD_GObj* gobj);\n/* 11B07C */ void ftNs_SpecialAirLwHit_AirToGround(HSD_GObj* gobj);\n/* 11B0F8 */ void ftNs_AbsorbThink_DecideAction(HSD_GObj* gobj);\n/* 11B25C */ void ftNs_SpecialLwEnd_Anim(HSD_GObj* gobj);\n/* 11B2A0 */ void ftNs_SpecialAirLwEnd_Anim(HSD_GObj* gobj);\n/* 11B2E4 */ void ftNs_SpecialLwEnd_IASA(HSD_GObj* gobj);\n/* 11B2E8 */ void ftNs_SpecialAirLwEnd_IASA(HSD_GObj* gobj);\n/* 11B2EC */ void ftNs_SpecialLwEnd_Phys(HSD_GObj* gobj);\n/* 11B30C */ void ftNs_SpecialAirLwEnd_Phys(HSD_GObj* gobj);\n/* 11B36C */ void ftNs_SpecialLwEnd_Coll(HSD_GObj* gobj);\n/* 11B3A8 */ void ftNs_SpecialAirLwEnd_Coll(HSD_GObj* gobj);\n/* 11B3E4 */ void ftNs_SpecialLwEnd_GroundToAir(HSD_GObj* gobj);\n/* 11B444 */ void ftNs_SpecialAirLwEnd_AirToGround(HSD_GObj* gobj);\n/* 11B4AC */ void ftNs_SpecialLwEnd_Enter(HSD_GObj* gobj);\n/* 11B4E4 */ void ftNs_SpecialAirLwEnd_Enter(HSD_GObj* gobj);\n/// @file\n/// PK Flash callbacks (SpecialN)\n#define GALE01_116EBC\n/* 116EBC */ bool ftNs_SpecialN_CheckSpecialNHold(HSD_GObj* gobj);\n/* 116F00 */ void ftNs_SpecialN_SetNULL(HSD_GObj* gobj);\n/* 116F38 */ void ftNs_SpecialN_ItemPKFlushSetNULL(HSD_GObj* gobj);\n/* 116F94 */ void ftNs_SpecialNStart_Enter(HSD_GObj* gobj);\n/* 117034 */ void ftNs_SpecialAirNStart_Enter(HSD_GObj* gobj);\n/* 1170DC */ void ftNs_SpecialNStart_Anim(HSD_GObj* gobj);\n/* 1171BC */ void ftNs_SpecialNRelease_Anim(HSD_GObj* gobj);\n/* 1172F0 */ void ftNs_SpecialNEnd_Anim(HSD_GObj* gobj);\n/* 117378 */ void ftNs_SpecialAirNStart_Anim(HSD_GObj* gobj);\n/* 117458 */ void ftNs_SpecialAirNRelease_Anim(HSD_GObj* gobj);\n/* 11758C */ void ftNs_SpecialAirNEnd_Anim(HSD_GObj* gobj);\n/* 117648 */ void ftNs_SpecialNStart_IASA(HSD_GObj* gobj);\n/* 11764C */ void ftNs_SpecialNRelease_IASA(HSD_GObj* gobj);\n/* 1176C8 */ void ftNs_SpecialNEnd_IASA(HSD_GObj* gobj);\n/* 1176CC */ void ftNs_SpecialAirNStart_IASA(HSD_GObj* gobj);\n/* 1176D0 */ void ftNs_SpecialAirNRelease_IASA(HSD_GObj* gobj);\n/* 11774C */ void ftNs_SpecialAirNEnd_IASA(HSD_GObj* gobj);\n/* 117750 */ void ftNs_SpecialNStart_Phys(HSD_GObj* gobj);\n/* 117788 */ void ftNs_SpecialNRelease_Phys(HSD_GObj* gobj);\n/* 1177A8 */ void ftNs_SpecialNEnd_Phys(HSD_GObj* gobj);\n/* 1177C8 */ void ftNs_SpecialAirNStart_Phys(HSD_GObj* gobj);\n/* 117828 */ void ftNs_SpecialAirNRelease_Phys(HSD_GObj* gobj);\n/* 117888 */ void ftNs_SpecialAirNEnd_Phys(HSD_GObj* gobj);\n/* 1178E8 */ void ftNs_SpecialNStart_Coll(HSD_GObj* gobj);\n/* 117954 */ void ftNs_SpecialNRelease_Coll(HSD_GObj* gobj);\n/* 1179C0 */ void ftNs_SpecialNEnd_Coll(HSD_GObj* gobj);\n/* 117A2C */ void ftNs_SpecialAirNStart_Coll(HSD_GObj* gobj);\n/* 117A98 */ void ftNs_SpecialAirNRelease_Coll(HSD_GObj* gobj);\n/* 117B04 */ void ftNs_SpecialAirNEnd_Coll(HSD_GObj* gobj);\n/// @file\n/// PK Fire callbacks (SpecialS)\n#define GALE01_116B70\n/* 116B70 */ void ftNs_SpecialS_ItemPKFireSpawn(HSD_GObj* gobj);\n/* 116C94 */ void ftNs_SpecialS_Enter(HSD_GObj* gobj);\n/* 116D04 */ void ftNs_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 116D74 */ void ftNs_SpecialS_Anim(HSD_GObj* gobj);\n/* 116DB0 */ void ftNs_SpecialAirS_Anim(HSD_GObj* gobj);\n/* 116DEC */ void ftNs_SpecialS_Phys(HSD_GObj* gobj);\n/* 116E0C */ void ftNs_SpecialAirS_Phys(HSD_GObj* gobj);\n/* 116E2C */ void ftNs_SpecialS_Coll(HSD_GObj* gobj);\n/* 116E68 */ void ftNs_SpecialAirS_Coll(HSD_GObj* gobj);\n#define MELEE_FT_CHARA_FTPEACH_FORWARD_H\nstatic MotionFlags const ftPe_MF_Base =\n    Ft_MF_SkipItemVis | Ft_MF_FreezeState;\nstatic MotionFlags const ftPe_MF_FloatAttack =\n    ftPe_MF_Base | Ft_MF_SkipParasol;\nstatic MotionFlags const ftPe_MF_FloatAttackAirN =\n    ftPe_MF_FloatAttack | Ft_MF_KeepColAnimHitStatus | Ft_MF_SkipHit;\nstatic MotionFlags const ftPe_MF_Move_14 =\n    ftPe_MF_FloatAttackAirN | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftPe_MF_FloatAttackAirB =\n    ftPe_MF_FloatAttackAirN | Ft_MF_KeepGfx;\nstatic MotionFlags const ftPe_MF_FloatAttackAirHi =\n    ftPe_MF_FloatAttackAirN | Ft_MF_KeepFastFall | Ft_MF_KeepGfx;\nstatic MotionFlags const ftPe_MF_Move_17 =\n    ftPe_MF_FloatAttack | Ft_MF_SkipModel;\nstatic MotionFlags const ftPe_MF_AttackS4 =\n    ftPe_MF_Base | Ft_MF_KeepFastFall | Ft_MF_SkipHit | Ft_MF_KeepSfx |\n    Ft_MF_SkipRumble;\nstatic MotionFlags const ftPe_MF_Special =\n    ftPe_MF_Base | Ft_MF_SkipModel | Ft_MF_UnkUpdatePhys;\nstatic MotionFlags const ftPe_MF_SpecialN =\n    ftPe_MF_Special | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftPe_MF_SpecialHi =\n    ftPe_MF_SpecialN | Ft_MF_KeepGfx;\nstatic MotionFlags const ftPe_MF_SpecialLw =\n    ftPe_MF_Special | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftPe_MF_SpecialS =\n    ftPe_MF_Special | Ft_MF_KeepGfx | Ft_MF_KeepSfx;\nstatic MotionFlags const ftPe_MF_SpecialAirN =\n    ftPe_MF_SpecialN | Ft_MF_SkipParasol;\nstatic MotionFlags const ftPe_MF_SpecialAirHi =\n    ftPe_MF_SpecialHi | Ft_MF_SkipParasol;\nstatic MotionFlags const ftPe_MF_SpecialAirS =\n    ftPe_MF_SpecialS | Ft_MF_SkipParasol;\nstatic MotionFlags const ftPe_MF_ParasolOpen =\n    Ft_MF_SkipHit | Ft_MF_SkipModel | Ft_MF_Unk06 | Ft_MF_SkipItemVis |\n    Ft_MF_SkipModelPartVis;\nstatic MotionFlags const ftPe_MF_ParasolFallSpecial =\n    ftPe_MF_ParasolOpen | Ft_MF_Unk19;\ntypedef enum ftPeach_MotionState {\n    ftPe_MS_Float = ftCo_MS_Count,\n    ftPe_MS_FloatFallF,\n    ftPe_MS_FloatFallB,\n    ftPe_MS_FloatAttackAirN,\n    ftPe_MS_FloatAttackAirF,\n    ftPe_MS_FloatAttackAirB,\n    ftPe_MS_FloatAttackAirHi,\n    ftPe_MS_FloatAttackAirLw,\n    ftPe_MS_AttackS4Club,\n    ftPe_MS_AttackS4Pan,\n    ftPe_MS_AttackS4Racket,\n    ftPe_MS_SpecialLw,\n    ftPe_MS_SpecialAirLw,\n    ftPe_MS_SpecialSStart,\n    ftPe_MS_SpecialSEnd,\n    ftPe_MS_SpecialSJump,\n    ftPe_MS_SpecialAirSStart,\n    ftPe_MS_SpecialAirSEnd_0,\n    ftPe_MS_SpecialAirSEnd_1,\n    ftPe_MS_SpecialAirSJump,\n    ftPe_MS_SpecialHiStart,\n    ftPe_MS_SpecialHiEnd,\n    ftPe_MS_SpecialAirHiStart,\n    ftPe_MS_SpecialAirHiEnd,\n    ftPe_MS_SpecialN,\n    ftPe_MS_SpecialNHit,\n    ftPe_MS_SpecialAirN,\n    ftPe_MS_SpecialAirNHit,\n    ftPe_MS_ItemParasolOpen,\n    ftPe_MS_ItemParasolFall,\n    ftPe_MS_Count,\n    ftPe_MS_SelfCount = ftPe_MS_Count - ftCo_MS_Count,\n} ftPeach_MotionState;\ntypedef enum ftPe_Submotion {\n    ftPe_SM_Float = ftCo_SM_Count,\n    ftPe_SM_FloatFallF,\n    ftPe_SM_FloatFallB,\n    ftPe_SM_AttackS4_0,\n    ftPe_SM_AttackS4_1,\n    ftPe_SM_AttackS4_2,\n    ftPe_SM_SpecialLw,\n    ftPe_SM_SpecialSStart,\n    ftPe_SM_SpecialSEnd,\n    ftPe_SM_SpecialSJump,\n    ftPe_SM_SpecialAirSStart,\n    ftPe_SM_SpecialAirSEnd_0,\n    ftPe_SM_SpecialAirSEnd_1,\n    ftPe_SM_SpecialHiStart,\n    ftPe_SM_SpecialHiEnd,\n    ftPe_SM_SpecialAirHiStart,\n    ftPe_SM_SpecialAirHiEnd,\n    ftPe_SM_SpecialN,\n    ftPe_SM_SpecialNHit,\n    ftPe_SM_SpecialAirN,\n    ftPe_SM_SpecialAirNHit,\n    ftPe_SM_ItemParasolOpen,\n    ftPe_SM_ItemParasolFall,\n    ftPe_SM_Count,\n    ftPe_SM_SelfCount = ftPe_SM_Count - ftCo_SM_Count,\n} ftPe_Submotion;\n#define GALE01_11C1C0\n/* 11C1C0 */ void ftPe_AttackS4_Enter(HSD_GObj* gobj);\n/* 11C248 */ void ftPe_AttackS4_Anim(HSD_GObj* gobj);\n/* 11C284 */ void ftPe_AttackS4_IASA(HSD_GObj* gobj);\n/* 11C2B4 */ void ftPe_AttackS4_Phys(HSD_GObj* gobj);\n/* 11C2D4 */ void ftPe_AttackS4_Coll(HSD_GObj* gobj);\n#define GALE01_11BAD8\n#define GALE01_0877F8\nextern HSD_Joint* ft_8045A1E0[6];\nextern s32 ft_80459B88[FTKIND_MAX];\nextern char ftMr_Init_DatFilename[];\nextern char ftMr_Init_DataName[];\nextern Fighter_CostumeStrings ftMr_Init_CostumeStrings[];\nextern char ftMr_Init_AnimDatFilename[];\ns32 ft_800877F8(Fighter_GObj*, s32);\ns32 ft_80087818(Fighter_GObj*, s32);\ns32 ft_80087838(Fighter_GObj* gobj);\ns32 ft_80087858(Fighter_GObj* gobj);\ns32 ft_80087878(Fighter_GObj*, s32);\ns32 ft_800878BC(Fighter_GObj* gobj);\ns32 ft_80087900(Fighter_GObj* gobj);\ns32 ft_80087944(Fighter_GObj* gobj);\ns32 ft_80087988(Fighter_GObj* gobj);\ns32 ft_800879D8(Fighter_GObj* gobj);\ns32 ft_800879F8(Fighter_GObj* gobj);\ns32 ft_80087A18(Fighter_GObj* gobj);\nu8 ft_80087A80(Fighter_GObj* gobj);\nf32 ft_80087A8C(Fighter_GObj* gobj);\ns32 ft_80087A98(Fighter_GObj* gobj);\nu8 ft_80087AA4(Fighter_GObj* gobj);\nu8 ft_80087AB4(Fighter_GObj* gobj);\nvoid ft_80087AC0(Fighter_GObj*, s32);\ns32 ft_80087AEC(Fighter_GObj* gobj);\ns32 ft_80087B34(Fighter_GObj* gobj);\nvoid ft_80087BAC(Fighter_GObj*, s32);\nvoid ft_80087BC0(Fighter_GObj*, s8);\nvoid ft_80087BEC(Fighter_GObj*, u8);\ns32 ft_80087C1C(void);\ns32 ft_80087C58(Fighter_GObj* gobj);\nvoid ft_80087C64(Fighter_GObj*, s32);\ns32 ft_80087C70(Fighter*, s32);\ns32 ft_80087D0C(Fighter*, s32);\nvoid ft_8008805C(Fighter*, s32);\nvoid ft_80088080(Fighter*);\nvoid ft_800880AC(Fighter*);\nvoid ft_800880D8(Fighter*);\nvoid ft_80088110(Fighter*);\nvoid ft_80088148(Fighter*, enum_t, int, int);\nvoid ft_800881D8(Fighter*, u32, u32, u32);\nvoid ft_80088478(Fighter*, s32, s32, s32);\nvoid ft_80088510(Fighter*, s32, u8, u8);\nvoid ft_80088640(Fighter*, bool, bool, bool);\nvoid ft_80088770(Fighter*);\nvoid ft_800887CC(Fighter*);\nvoid ft_80088884(Fighter*);\nvoid ft_800888E0(Fighter*);\nvoid ft_80088A50(Fighter*);\nvoid ft_80088C5C(Fighter_GObj* gobj);\nvoid ft_800890BC(Fighter*);\nvoid ft_800890D0(Fighter*, u8);\nvoid ft_80089228(void);\nvoid ft_800892A0(Fighter_GObj* gobj);\nvoid ft_800892D4(Fighter*);\nvoid ft_800895E0(Fighter*, s32);\nvoid ft_80089824(Fighter_GObj* gobj);\nvoid ft_80089B08(Fighter_GObj* gobj);\nbool ft_8008A1FC(Fighter_GObj* gobj);\nvoid ft_8008A2BC(Fighter_GObj* gobj);\nvoid ft_8008A324(Fighter_GObj* gobj);\nunk_t mpColl_8004B4B0(void);\n/* 0889F4 */ void ft_800889F4(Fighter* fp, FtCollisionData*);\n/* 0886D8 */ void ftCo_800886D8(Fighter* fp, M2C_UNK, M2C_UNK, M2C_UNK);\n/* 08893C */ void ft_8008893C(Fighter* fp);\n/* 088828 */ void ft_80088828(Fighter* fp);\n/* 088328 */ void ft_80088328(Fighter* fp, int, int, int);\n/* 0885A8 */ void ft_800885A8(Fighter* fp, int, int, int);\n/* 08A1B8 */ void ft_8008A1B8(Fighter_GObj* gobj, int);\n/* 11BA20 */ bool ftPe_Float_CheckContinueInput(Fighter* fp);\n/* 11BA54 */ bool ftPe_8011BA54(HSD_GObj* gobj);\n/* 11BAD8 */ bool ftPe_8011BAD8(HSD_GObj* gobj);\n/* 11BB6C */ void ftPe_8011BB6C(HSD_GObj* gobj, bool arg1);\n/* 11BC38 */ void ftPe_Float_Anim(HSD_GObj* gobj);\n/* 11BC8C */ void ftPe_Float_IASA(HSD_GObj* gobj);\n/* 11BD18 */ void ftPe_Float_Phys(HSD_GObj* gobj);\n/* 11BD3C */ void ftPe_Float_Coll(HSD_GObj* gobj);\n#define GALE01_11BF88\n/* 11BE80 */ /* static */ bool ftPe_8011BE80(HSD_GObj* gobj);\n/* 11BF88 */ void ftPe_FloatAttackAir_Anim(HSD_GObj* gobj);\n/* 11C044 */ void ftPe_FloatAttackAir_IASA(HSD_GObj* gobj);\n/* 11C160 */ void ftPe_FloatAttackAir_Phys(HSD_GObj* gobj);\n/* 11C198 */ void ftPe_FloatAttackAir_Coll(HSD_GObj* gobj);\n#define GALE01_11BDF0\nvoid updateFloatDir(HSD_GObj* gobj);\n/* 11BDF0 */ void ftPe_FloatFall_Anim(HSD_GObj* gobj);\n/* 11BE2C */ void ftPe_FloatFall_IASA(HSD_GObj* gobj);\n/* 11BE30 */ void ftPe_FloatFall_Phys(HSD_GObj* gobj);\n/* 11BE50 */ void ftPe_FloatFall_Coll(HSD_GObj* gobj);\n#define GALE01_11B51C\n/* 11B51C */ void ftPe_Init_OnDeath(HSD_GObj* gobj);\n/* 11B628 */ void ftPe_Init_OnLoad(HSD_GObj* gobj);\n/* 11B704 */ void ftPe_Init_OnDeath2(HSD_GObj* gobj);\n/* 11B740 */ void ftPe_Init_OnItemPickup(HSD_GObj* gobj, bool flag);\n/* 11B820 */ void ftPe_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 11B868 */ void ftPe_Init_OnItemVisible(HSD_GObj* gobj);\n/* 11B8B0 */ void ftPe_Init_OnItemDrop(HSD_GObj* gobj, bool flag);\n/* 11B904 */ void ftPe_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 11B93C */ void ftPe_Init_8011B93C(HSD_GObj* gobj);\n/* 11B998 */ void ftPe_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 11B9DC */ void ftPe_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 3CCCB8 */ extern MotionState ftPe_Init_MotionStateTable[ftPe_MS_SelfCount];\n/* 3CD078 */ extern char ftPe_Init_DatFilename[];\n/* 3CD084 */ extern char ftPe_Init_DataName[];\n/* 3CD204 */ extern char ftPe_Init_AnimDatFilename[];\n/* 3CD280 */ extern Fighter_DemoStrings ftPe_Init_DemoMotionFilenames;\n/* 3CD290 */ extern Fighter_CostumeStrings ftPe_Init_CostumeStrings[];\n#define GALE01_11D72C\n/* 11D518 */ bool ftPe_8011D518(HSD_GObj* gobj);\n/* 11D598 */ void ftPe_8011D598(HSD_GObj* gobj);\n/* 11D680 */ bool ftPe_SpecialHi_NotActive(HSD_GObj* gobj);\n/* 11D72C */ void ftPe_SpecialHi_Enter(HSD_GObj* gobj);\n/* 11D7F0 */ void ftPe_SpecialAirHi_Enter(HSD_GObj* gobj);\n/* 11D8D0 */ void ftPe_SpecialHiStart_Anim(HSD_GObj* gobj);\n/* 11D980 */ void ftPe_SpecialAirHiStart_Anim(HSD_GObj* gobj);\n/* 11DA30 */ void ftPe_SpecialHiStart_IASA(HSD_GObj* gobj);\n/* 11DB78 */ void ftPe_SpecialAirHiStart_IASA(HSD_GObj* gobj);\n/* 11DCC0 */ void ftPe_SpecialHiStart_Phys(HSD_GObj* gobj);\n/* 11DCF8 */ void ftPe_SpecialAirHiStart_Phys(HSD_GObj* gobj);\n/* 11DDBC */ void ftPe_SpecialHiStart_Coll(HSD_GObj* gobj);\n/* 11DE2C */ void ftPe_SpecialAirHiStart_Coll(HSD_GObj* gobj);\n/* 11DE9C */ void ftPe_SpecialHiEnd_Anim(HSD_GObj* gobj);\n/* 11DEFC */ void ftPe_SpecialAirHiEnd_Anim(HSD_GObj* gobj);\n/* 11DF5C */ void ftPe_SpecialHiEnd_IASA(HSD_GObj* gobj);\n/* 11DF60 */ void ftPe_SpecialAirHiEnd_IASA(HSD_GObj* gobj);\n/* 11DF64 */ void ftPe_SpecialHiEnd_Phys(HSD_GObj* gobj);\n/* 11DFD0 */ void ftPe_SpecialAirHiEnd_Phys(HSD_GObj* gobj);\n/* 11E094 */ void ftPe_SpecialHiEnd_Coll(HSD_GObj* gobj);\n/* 11E104 */ void ftPe_SpecialAirHiEnd_Coll(HSD_GObj* gobj);\n#define GALE01_11D11C\n/* 11CF84 */ void ftPe_SpecialLw_UnsetVeg(HSD_GObj* gobj);\n/* 11CFA0 */ void ftPe_SpecialLw_8011CFA0(HSD_GObj* gobj);\n/* 11D11C */ void ftPe_SpecialLw_Enter(HSD_GObj* gobj);\n/* 11D1C4 */ void ftPe_SpecialAirLw_Enter(HSD_GObj* gobj);\n/* 11D2EC */ void ftPe_SpecialLw_Anim(HSD_GObj* gobj);\n/* 11D340 */ void ftPe_SpecialAirLw_Anim(HSD_GObj* gobj);\n/* 11D394 */ void ftPe_SpecialLw_Phys(HSD_GObj* gobj);\n/* 11D3B4 */ void ftPe_SpecialAirLw_Phys(HSD_GObj* gobj);\n/* 11D3D4 */ void ftPe_SpecialLw_Coll(HSD_GObj* gobj);\n/* 11D3FC */ void ftPe_SpecialAirLw_Coll(HSD_GObj* gobj);\n#define GALE01_11E3D0\n/* 11E2AC */ void ftPe_SpecialN_DoDeath2(HSD_GObj* gobj);\n/* 11E2E8 */ void ftPe_SpecialN_OnDeath2(HSD_GObj* gobj);\n/* 11E3A8 */ bool ftPe_SpecialN_IsActive(HSD_GObj* gobj);\n/* 11E3D0 */ void ftPe_SpecialN_Enter(HSD_GObj* gobj);\n/* 11E45C */ void ftPe_SpecialAirN_Enter(HSD_GObj* gobj);\n/* 11E4F8 */ void ftPe_SpecialN_Anim(HSD_GObj* gobj);\n/* 11E5B4 */ void ftPe_SpecialAirN_Anim(HSD_GObj* gobj);\n/* 11E670 */ void ftPe_SpecialN_IASA(HSD_GObj* gobj);\n/* 11E674 */ void ftPe_SpecialAirN_IASA(HSD_GObj* gobj);\n/* 11E678 */ void ftPe_SpecialN_Phys(HSD_GObj* gobj);\n/* 11E6AC */ void ftPe_SpecialAirN_Phys(HSD_GObj* gobj);\n/* 11E75C */ void ftPe_SpecialN_Coll(HSD_GObj* gobj);\n/* 11E798 */ void ftPe_SpecialAirN_Coll(HSD_GObj* gobj);\n/* 11E9A0 */ void ftPe_SpecialNHit_Anim(HSD_GObj* gobj);\n/* 11EA04 */ void ftPe_SpecialAirNHit_Anim(HSD_GObj* gobj);\n/* 11EA68 */ void ftPe_SpecialNHit_IASA(HSD_GObj* gobj);\n/* 11EA6C */ void ftPe_SpecialAirNHit_IASA(HSD_GObj* gobj);\n/* 11EA70 */ void ftPe_SpecialNHit_Phys(HSD_GObj* gobj);\n/* 11EA90 */ void ftPe_SpecialAirNHit_Phys(HSD_GObj* gobj);\n/* 11EAE0 */ void ftPe_SpecialNHit_Coll(HSD_GObj* gobj);\n/* 11EB1C */ void ftPe_SpecialAirNHit_Coll(HSD_GObj* gobj);\n#define GALE01_11C2F4\n/* 11C34C */ void ftPe_SpecialS_Enter(HSD_GObj* gobj);\n/* 11C3C4 */ void ftPe_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 11C4F0 */ void ftPe_SpecialSStart_Anim(HSD_GObj* gobj);\n/* 11C588 */ void ftPe_SpecialAirSStart_Anim(HSD_GObj* gobj);\n/* 11C5E8 */ void ftPe_SpecialSStart_IASA(HSD_GObj* gobj);\n/* 11C5EC */ void ftPe_SpecialAirSStart_IASA(HSD_GObj* gobj);\n/* 11C5F0 */ void ftPe_SpecialSStart_Phys(HSD_GObj* gobj);\n/* 11C644 */ void ftPe_SpecialAirSStart_Phys(HSD_GObj* gobj);\n/* 11C664 */ void ftPe_SpecialSStart_Coll(HSD_GObj* gobj);\n/* 11C6FC */ void ftPe_SpecialAirSStart_Coll(HSD_GObj* gobj);\n/* 11C878 */ void ftPe_SpecialAirSJump_Anim(HSD_GObj* gobj);\n/* 11C8C8 */ void ftPe_SpecialAirSJump_IASA(HSD_GObj* gobj);\n/* 11C8CC */ void ftPe_SpecialAirSJump_Phys(HSD_GObj* gobj);\n/* 11C93C */ void ftPe_SpecialAirSJump_Coll(HSD_GObj* gobj);\n/* 11CA84 */ void ftPe_SpecialSEnd_Anim(HSD_GObj* gobj);\n/* 11CAC0 */ void ftPe_SpecialAirSEnd_Anim(HSD_GObj* gobj);\n/* 11CAFC */ void ftPe_SpecialSEnd_IASA(HSD_GObj* gobj);\n/* 11CB00 */ void ftPe_SpecialAirSEnd_IASA(HSD_GObj* gobj);\n/* 11CB04 */ void ftPe_SpecialSEnd_Phys(HSD_GObj* gobj);\n/* 11CB24 */ void ftPe_SpecialAirSEnd_Phys(HSD_GObj* gobj);\n/* 11CB44 */ void ftPe_SpecialSEnd_Coll(HSD_GObj* gobj);\n/* 11CB80 */ void ftPe_SpecialAirSEnd_Coll(HSD_GObj* gobj);\n#define GALE01_149E34\n#define MELEE_FT_CHARA_FTPIKACHU_FORWARD_H\nstatic MotionFlags const ftPk_MF_Special =\n    Ft_MF_SkipModel | Ft_MF_SkipItemVis | Ft_MF_UnkUpdatePhys |\n    Ft_MF_FreezeState;\nstatic MotionFlags const ftPk_MF_SpecialLw =\n    ftPk_MF_Special | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftPk_MF_SpecialN =\n    ftPk_MF_Special | Ft_MF_KeepFastFall | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftPk_MF_SpecialHi =\n    ftPk_MF_Special | Ft_MF_KeepFastFall | Ft_MF_KeepGfx |\n    Ft_MF_SkipThrowException;\nstatic MotionFlags const ftPk_MF_SpecialS =\n    ftPk_MF_Special | Ft_MF_KeepGfx | Ft_MF_KeepSfx;\nstatic MotionFlags const ftPk_MF_SpecialAirLw =\n    ftPk_MF_SpecialLw | Ft_MF_SkipParasol;\nstatic MotionFlags const ftPk_MF_SpecialAirN =\n    ftPk_MF_SpecialN | Ft_MF_SkipParasol;\nstatic MotionFlags const ftPk_MF_SpecialAirHi =\n    ftPk_MF_SpecialHi | Ft_MF_SkipParasol;\nstatic MotionFlags const ftPk_MF_SpecialAirS =\n    ftPk_MF_SpecialS | Ft_MF_SkipParasol;\ntypedef enum ftPikachu_MotionState {\n    ftPk_MS_SpecialN = ftCo_MS_Count,\n    ftPk_MS_SpecialAirN,\n    ftPk_MS_SpecialSStart,\n    ftPk_MS_SpecialSHold,\n    ftPk_MS_SpecialS1,\n    ftPk_MS_SpecialSEnd,\n    ftPk_MS_SpecialS0,\n    ftPk_MS_SpecialAirSStart,\n    ftPk_MS_SpecialAirSHold,\n    ftPk_MS_SpecialAirS1,\n    ftPk_MS_SpecialAirSEnd,\n    ftPk_MS_SpecialAirS0,\n    ftPk_MS_SpecialHiStart0,\n    ftPk_MS_SpecialHiStart1,\n    ftPk_MS_SpecialHiEnd,\n    ftPk_MS_SpecialAirHiStart0,\n    ftPk_MS_SpecialAirHiStart1,\n    ftPk_MS_SpecialAirHiEnd,\n    ftPk_MS_SpecialLwStart,\n    ftPk_MS_SpecialLwLoop0,\n    ftPk_MS_SpecialLwLoop1,\n    ftPk_MS_SpecialLwEnd,\n    ftPk_MS_SpecialAirLwStart,\n    ftPk_MS_SpecialAirLwLoop0,\n    ftPk_MS_SpecialAirLwLoop1,\n    ftPk_MS_SpecialAirLwEnd,\n    ftPk_MS_Count,\n    ftPk_MS_SelfCount = ftPk_MS_Count - ftCo_MS_Count,\n} ftPikachu_MotionState;\ntypedef enum ftPk_Submotion {\n    ftPk_SM_SpecialN = ftCo_SM_Count,\n    ftPk_SM_SpecialAirN,\n    ftPk_SM_SpecialSStart,\n    ftPk_SM_SpecialSHold,\n    ftPk_SM_SpecialS0,\n    ftPk_SM_SpecialS1,\n    ftPk_SM_SpecialSEnd,\n    ftPk_SM_SpecialAirSStart,\n    ftPk_SM_SpecialAirSHold,\n    ftPk_SM_SpecialS,\n    ftPk_SM_SpecialAirSEnd,\n    ftPk_SM_SpecialHiStart0,\n    ftPk_SM_SpecialHiStart1,\n    ftPk_SM_SpecialHiEnd,\n    ftPk_SM_SpecialAirHiStart0,\n    ftPk_SM_SpecialAirHiStart1,\n    ftPk_SM_SpecialAirHiEnd,\n    ftPk_SM_SpecialLwStart,\n    ftPk_SM_SpecialLwLoop0,\n    ftPk_SM_SpecialLwLoop1,\n    ftPk_SM_SpecialLwEnd,\n    ftPk_SM_SpecialAirLwStart,\n    ftPk_SM_SpecialAirLwLoop0,\n    ftPk_SM_SpecialAirLwLoop1,\n    ftPk_SM_SpecialAirLwEnd,\n    ftPk_SM_Count,\n    ftPk_SM_SelfCount = ftPk_SM_Count - ftCo_SM_Count,\n} ftPk_Submotion;\n/* 149E34 */ void ftPc_Init_OnLoad(HSD_GObj* gobj);\n/* 149EAC */ void ftPc_Init_OnDeath(HSD_GObj* gobj);\n/* 149FE4 */ void ftPc_Init_OnItemPickup(HSD_GObj* gobj, bool);\n/* 14A0C4 */ void ftPc_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 14A10C */ void ftPc_Init_OnItemVisible(HSD_GObj* gobj);\n/* 14A154 */ void ftPc_Init_OnItemDrop(HSD_GObj* gobj, bool);\n/* 14A1A8 */ void ftPc_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 14A1C8 */ void ftPc_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 14A20C */ void ftPc_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 3D1EA8 */ extern MotionState ftPc_Init_MotionStateTable[ftPk_MS_SelfCount];\n/* 3D21E8 */ extern char ftPc_Init_DatFilename[];\n/* 3D21F4 */ extern char ftPc_Init_DataName[];\n/* 3D2328 */ extern char ftPc_Init_AnimDatFilename[];\n/* 3D23A4 */ extern Fighter_DemoStrings ftPc_Init_DemoMotionFilenames;\n/* 3D23B4 */ extern Fighter_CostumeStrings ftPc_Init_CostumeStrings[];\n#define MELEE_FT_CHARA_FTPICHU_TYPES_H\nstruct ftPichu_FighterVars {\n    char filler0[0x100];\n};\ntypedef struct _ftPichuAttributes {\n    /* 0x00 */ u32 x0_padding[(0x14 - 0x0) / 4];\n    /* 0x14 */ u32 x14;\n    /* 0x14 */ u32 x18;\n    /* 0x18 */ u32 x18_padding[(0xDC - 0x1C) / 4];\n    /* 0xDC */ u32 xDC;\n} ftPichuAttributes;\n#define GALE01_1243AC\n/* 1243AC */ void ftPk_Init_OnLoad(HSD_GObj* gobj);\n/* 1243E4 */ void ftPk_Init_OnLoadForPichu(Fighter* fp);\n/* 124474 */ void ftPk_Init_OnDeath(HSD_GObj* gobj);\n/* 1244B8 */ void ftPk_Init_OnItemPickup(HSD_GObj* gobj, bool arg1);\n/* 124598 */ void ftPk_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 1245E0 */ void ftPk_Init_OnItemVisible(HSD_GObj* gobj);\n/* 124628 */ void ftPk_Init_OnItemDrop(HSD_GObj* gobj, bool arg1);\n/* 12467C */ void ftPk_Init_UnkMotionStates1(HSD_GObj* gobj);\n/* 1246C0 */ void ftPk_Init_UnkMotionStates2(HSD_GObj* gobj);\n/* 124704 */ void ftPk_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 1247A8 */ void ftPk_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 1247EC */ void ftPk_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 3CDD78 */ extern MotionState ftPk_Init_MotionStateTable[ftPk_MS_SelfCount];\n/* 3CE0B8 */ extern char ftPk_Init_DatFilename[];\n/* 3CE0C4 */ extern char ftPk_Init_DataName[];\n/* 3CE204 */ extern char ftPk_Init_AnimDatFilename[];\n/* 3CE290 */ extern Fighter_DemoStrings ftPk_Init_DemoMotionFilenames;\n/* 3CE2A0 */ extern Fighter_CostumeStrings ftPk_Init_CostumeStrings[];\n#define GALE01_125D80\n/* 125D80 */ void ftPk_SpecialHi_UpdateVel(HSD_GObj* gobj);\n/* 125DE8 */ void ftPk_SpecialHi_Enter(HSD_GObj* gobj);\n/* 125E60 */ void ftPk_SpecialAirHi_Enter(HSD_GObj* gobj);\n/* 125ED8 */ void ftPk_SpecialHiStart0_Anim(HSD_GObj* gobj);\n/* 125F14 */ void ftPk_SpecialAirHiStart0_Anim(HSD_GObj* gobj);\n/* 125F50 */ void ftPk_SpecialHiStart0_IASA(HSD_GObj* gobj);\n/* 125F54 */ void ftPk_SpecialAirHiStart0_IASA(HSD_GObj* gobj);\n/* 125F58 */ void ftPk_SpecialHiStart0_Phys(HSD_GObj* gobj);\n/* 125F78 */ void ftPk_SpecialAirHiStart0_Phys(HSD_GObj* gobj);\n/* 125FD8 */ void ftPk_SpecialHiStart0_Coll(HSD_GObj* gobj);\n/* 126014 */ void ftPk_SpecialAirHiStart0_Coll(HSD_GObj* gobj);\n/* 126084 */ void ftPk_SpecialHi_ChangeMotion_Unk00(HSD_GObj* gobj);\n/* 1260E4 */ void ftPk_SpecialHi_ChangeMotion_Unk01(HSD_GObj* gobj);\n/* 126144 */ void ftPk_SpecialHiStart1_Anim(HSD_GObj* gobj);\n/* 1262B4 */ void ftPk_SpecialAir_Anim(HSD_GObj* gobj);\n/* 1262B4 */ void ftPk_SpecialAirHiStart1_Anim(HSD_GObj* gobj);\n/* 126424 */ void ftPk_SpecialHiStart1_IASA(HSD_GObj* gobj);\n/* 126428 */ void ftPk_SpecialAirHiStart1_IASA(HSD_GObj* gobj);\n/* 126428 */ void ftPk_SpecialAir_IASA(HSD_GObj* gobj);\n/* 12642C */ void ftPk_SpecialHi_8012642C(HSD_GObj* gobj);\n/* 1265D4 */ void ftPk_SpecialHiStart1_Phys(HSD_GObj* gobj);\n/* 1265F4 */ void ftPk_SpecialAirHiStart1_Phys(HSD_GObj* gobj);\n/* 1265F4 */ void ftPk_SpecialAir_Phys(HSD_GObj* gobj);\n/* 126614 */ void ftPk_SpecialHiStart1_Coll(HSD_GObj* gobj);\n/* 1267C8 */ void ftPk_SpecialAir_Coll(HSD_GObj* gobj);\n/* 1267C8 */ void ftPk_SpecialAirHiStart1_Coll(HSD_GObj* gobj);\n/* 126A2C */ void ftPk_SpecialHi_ChangeMotion_Unk02(HSD_GObj* gobj);\n/* 126AA4 */ void ftPk_SpecialHi_ChangeMotion_Unk03(HSD_GObj* gobj);\n/* 126C0C */ void ftPk_SpecialHi_80126C0C(HSD_GObj* gobj);\n/* 126E1C */ void ftPk_SpecialHi_80126E1C(HSD_GObj* gobj);\n/* 127064 */ bool ftPk_SpecialHi_80127064(HSD_GObj* gobj);\n/* 127198 */ void ftPk_SpecialHiEnd_Anim(HSD_GObj* gobj);\n/* 127228 */ void ftPk_SpecialAirEnd_Anim(HSD_GObj* gobj);\n/* 127228 */ void ftPk_SpecialAirHiEnd_Anim(HSD_GObj* gobj);\n/* 1272D8 */ void ftPk_SpecialHiEnd_IASA(HSD_GObj* gobj);\n/* 1272DC */ void ftPk_SpecialAirEnd_IASA(HSD_GObj* gobj);\n/* 1272DC */ void ftPk_SpecialAirHiEnd_IASA(HSD_GObj* gobj);\n/* 1272E0 */ void ftPk_SpecialHiEnd_Phys(HSD_GObj* gobj);\n/* 127310 */ void ftPk_SpecialAirEnd_Phys(HSD_GObj* gobj);\n/* 127310 */ void ftPk_SpecialAirHiEnd_Phys(HSD_GObj* gobj);\n/* 12738C */ void ftPk_SpecialHiEnd_Coll(HSD_GObj* gobj);\n/* 1273D4 */ void ftPk_SpecialAirEnd_Coll(HSD_GObj* gobj);\n/* 1273D4 */ void ftPk_SpecialAirHiEnd_Coll(HSD_GObj* gobj);\n/* 12744C */ void ftPk_SpecialHi_ChangeMotion_Unk04(HSD_GObj* gobj);\n/* 1274AC */ void ftPk_SpecialHi_MotionChangeUpdateVel_Unk0(HSD_GObj* gobj);\n/* 127534 */ void ftPk_SpecialHi_MotionChangeUpdateVel_Unk1(HSD_GObj* gobj);\n#define GALE01_1275CC\n/* 1275CC */ bool ftPk_SpecialLw_CheckProperty(HSD_GObj* gobj);\n/* 127608 */ void ftPk_SpecialLw_80127608(HSD_GObj* gobj);\n/* 12764C */ void ftPk_SpecialLw_SetState_Unk0(HSD_GObj* gobj);\n/* 12765C */ bool ftPk_SpecialLw_8012765C(HSD_GObj* gobj);\n/* 12779C */ void ftPk_SpecialLw_SetState_Unk1(HSD_GObj* gobj);\n/* 1277AC */ void ftPk_SpecialLw_SpawnEffect(HSD_GObj* gobj);\n/* 1278BC */ void ftPk_SpecialLw_Enter(HSD_GObj* gobj);\n/* 127924 */ void ftPk_SpecialAirLw_Enter(HSD_GObj* gobj);\n/* 12798C */ void ftPk_SpecialLw_ChangeMotion_Unk00(HSD_GObj* gobj);\n/* 1279EC */ void ftPk_SpecialLw_ChangeMotion_Unk01(HSD_GObj* gobj);\n/* 127A54 */ void ftPk_SpecialLw_ChangeMotion_Unk02(HSD_GObj* gobj);\n/* 127ACC */ void ftPk_SpecialLw_ChangeMotion_Unk03(HSD_GObj* gobj);\n/* 127B4C */ void ftPk_SpecialLw_ChangeMotion_Unk04(HSD_GObj* gobj);\n/* 127BAC */ void ftPk_SpecialLw_ChangeMotion_Unk05(HSD_GObj* gobj);\n/* 127C14 */ void ftPk_SpecialLw_ChangeMotion_Unk06(HSD_GObj* gobj);\n/* 127C74 */ void ftPk_SpecialLw_ChangeMotion_Unk07(HSD_GObj* gobj);\n/* 127CDC */ void ftPk_SpecialLwStart_Anim(HSD_GObj* gobj);\n/* 127D60 */ void ftPk_SpecialAirLwStart_Anim(HSD_GObj* gobj);\n/* 127DE4 */ void ftPk_SpecialLwLoop0_Anim(HSD_GObj* gobj);\n/* 127EC0 */ void ftPk_SpecialAirLwLoop0_Anim(HSD_GObj* gobj);\n/* 127FB0 */ void ftPk_SpecialLwLoop1_Anim(HSD_GObj* gobj);\n/* 128000 */ void ftPk_SpecialAirLwLoop1_Anim(HSD_GObj* gobj);\n/* 128050 */ void ftPk_SpecialLwEnd_Anim(HSD_GObj* gobj);\n/* 12808C */ void ftPk_SpecialAirLwEnd_Anim(HSD_GObj* gobj);\n/* 1280C8 */ void ftPk_SpecialLwStart_Phys(HSD_GObj* gobj);\n/* 1280E8 */ void ftPk_SpecialAirLwStart_Phys(HSD_GObj* gobj);\n/* 128108 */ void ftPk_SpecialLwLoop0_Phys(HSD_GObj* gobj);\n/* 128128 */ void ftPk_SpecialAirLwLoop0_Phys(HSD_GObj* gobj);\n/* 128148 */ void ftPk_SpecialLwLoop1_Phys(HSD_GObj* gobj);\n/* 128168 */ void ftPk_SpecialAirLwLoop1_Phys(HSD_GObj* gobj);\n/* 1281AC */ void ftPk_SpecialLwEnd_Phys(HSD_GObj* gobj);\n/* 1281CC */ void ftPk_SpecialAirLwEnd_Phys(HSD_GObj* gobj);\n/* 1281EC */ void ftPk_SpecialLwStart_Coll(HSD_GObj* gobj);\n/* 128214 */ void ftPk_SpecialAirLwStart_Coll(HSD_GObj* gobj);\n/* 12823C */ void ftPk_SpecialLwLoop0_Coll(HSD_GObj* gobj);\n/* 128264 */ void ftPk_SpecialAirLwLoop0_Coll(HSD_GObj* gobj);\n/* 12828C */ void ftPk_SpecialLwLoop1_Coll(HSD_GObj* gobj);\n/* 1282B4 */ void ftPk_SpecialAirLwLoop1_Coll(HSD_GObj* gobj);\n/* 1282DC */ void ftPk_SpecialLwEnd_Coll(HSD_GObj* gobj);\n/* 128304 */ void ftPk_SpecialAirLwEnd_Coll(HSD_GObj* gobj);\n#define GALE01_124830\n/* 124830 */ void ftPk_SpecialN_Enter(HSD_GObj* gobj);\n/* 12489C */ void ftPk_SpecialAirN_Enter(HSD_GObj* gobj);\n/* 124908 */ void ftPk_SpecialN_Anim(HSD_GObj* gobj);\n/* 124A20 */ void ftPk_SpecialAirN_Anim(HSD_GObj* gobj);\n/* 124B6C */ void ftPk_SpecialN_IASA(HSD_GObj* gobj);\n/* 124B70 */ void ftPk_SpecialAirN_IASA(HSD_GObj* gobj);\n/* 124B74 */ void ftPk_SpecialN_Phys(HSD_GObj* gobj);\n/* 124B94 */ void ftPk_SpecialAirN_Phys(HSD_GObj* gobj);\n/* 124BB4 */ void ftPk_SpecialN_Coll(HSD_GObj* gobj);\n/* 124C20 */ void ftPk_SpecialAirN_Coll(HSD_GObj* gobj);\n/* 124C90 */ void ftPk_SpecialN_SpawnEffect0(HSD_GObj* gobj);\n/* 124D2C */ void ftPk_SpecialN_SpawnEffect1(HSD_GObj* gobj);\n/* 124DC8 */ void ftPk_SpecialN_80124DC8(HSD_GObj* gobj);\n#define GALE01_124EAC\n/* 124EAC */ void ftPk_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 124FA0 */ void ftPk_SpecialAirSStart_Anim(HSD_GObj* gobj);\n/* 124FE0 */ void ftPk_SpecialAirSStart_IASA(HSD_GObj* gobj);\n/* 125024 */ void ftPk_SpecialAirSStart_Phys(HSD_GObj* gobj);\n/* 1250C0 */ void ftPk_SpecialAirSStart_Coll(HSD_GObj* gobj);\n/* 12525C */ void ftPk_SpecialAirSHold_Anim(HSD_GObj* gobj);\n/* 12532C */ void ftPk_SpecialAirSHold_IASA(HSD_GObj* gobj);\n/* 12537C */ void ftPk_SpecialAirSHold_Phys(HSD_GObj* gobj);\n/* 1253D8 */ void ftPk_SpecialAirSHold_Coll(HSD_GObj* gobj);\n/* 12561C */ void ftPk_SpecialAirS0_Anim(HSD_GObj* gobj);\n/* 1256B8 */ void ftPk_SpecialAirS0_IASA(HSD_GObj* gobj);\n/* 1256DC */ void ftPk_SpecialAirS0_Phys(HSD_GObj* gobj);\n/* 125738 */ void ftPk_SpecialAirS0_Coll(HSD_GObj* gobj);\n/* 125910 */ void ftPk_SpecialAirS1_Anim(HSD_GObj* gobj);\n/* 125950 */ void ftPk_SpecialAirS1_IASA(HSD_GObj* gobj);\n/* 125958 */ void ftPk_SpecialAirS1_Phys(HSD_GObj* gobj);\n/* 1259D8 */ void ftPk_SpecialAirS1_Coll(HSD_GObj* gobj);\n/* 125B70 */ void ftPk_SpecialAirSEnd_Anim(HSD_GObj* gobj);\n/* 125BB0 */ void ftPk_SpecialAirSEnd_IASA(HSD_GObj* gobj);\n/* 125BF4 */ void ftPk_SpecialAirSEnd_Phys(HSD_GObj* gobj);\n/* 125C80 */ void ftPk_SpecialAirSEnd_Coll(HSD_GObj* gobj);\n/* 124E38 */ void ftPk_SpecialS_Enter(HSD_GObj* gobj);\n/* 124F24 */ void ftPk_SpecialS_ZeroVelocity(HSD_GObj* gobj);\n/* 124F64 */ void ftPk_SpecialSStart_Anim(HSD_GObj* gobj);\n/* 124FDC */ void ftPk_SpecialSStart_IASA(HSD_GObj* gobj);\n/* 124FE4 */ void ftPk_SpecialSStart_Phys(HSD_GObj* gobj);\n/* 125084 */ void ftPk_SpecialSStart_Coll(HSD_GObj* gobj);\n/* 1250FC */ void ftPk_SpecialS_ChangeMotion_Unk00(HSD_GObj* gobj);\n/* 12515C */ void ftPk_SpecialS_ChangeMotion_Unk01(HSD_GObj* gobj);\n/* 1251BC */ void ftPk_SpecialSHold_Anim(HSD_GObj* gobj);\n/* 1252FC */ void ftPk_SpecialSHold_IASA(HSD_GObj* gobj);\n/* 12535C */ void ftPk_SpecialSHold_Phys(HSD_GObj* gobj);\n/* 12539C */ void ftPk_SpecialSHold_Coll(HSD_GObj* gobj);\n/* 125414 */ void ftPk_SpecialS_ChangeMotion_Unk02(HSD_GObj* gobj);\n/* 125474 */ void ftPk_SpecialS_ChangeMotion_Unk03(HSD_GObj* gobj);\n/* 1254D4 */ void ftPk_SpecialS_ChangeMotion_Unk04(HSD_GObj* gobj);\n/* 125528 */ void ftPk_SpecialS_ChangeMotion_Unk05(HSD_GObj* gobj);\n/* 12557C */ void ftPk_SpecialS0_Anim(HSD_GObj* gobj);\n/* 1256B4 */ void ftPk_SpecialS0_IASA(HSD_GObj* gobj);\n/* 1256BC */ void ftPk_SpecialS0_Phys(HSD_GObj* gobj);\n/* 1256FC */ void ftPk_SpecialS0_Coll(HSD_GObj* gobj);\n/* 125774 */ void ftPk_SpecialS_ChangeMotion_Unk06(HSD_GObj* gobj);\n/* 1257D4 */ void ftPk_SpecialS_ChangeMotion_Unk07(HSD_GObj* gobj);\n/* 125834 */ void ftPk_SpecialS_ChangeMotion_Unk08(HSD_GObj* gobj);\n/* 1258A0 */ void ftPk_SpecialS_ChangeMotion_Unk09(HSD_GObj* gobj);\n/* 12590C */ void ftPk_SpecialS1_Anim(HSD_GObj* gobj);\n/* 12594C */ void ftPk_SpecialS1_IASA(HSD_GObj* gobj);\n/* 125954 */ void ftPk_SpecialS1_Phys(HSD_GObj* gobj);\n/* 1259D4 */ void ftPk_SpecialS1_Coll(HSD_GObj* gobj);\n/* 125A54 */ void ftPk_SpecialS_ChangeMotion_Unk10(HSD_GObj* gobj);\n/* 125B34 */ void ftPk_SpecialSEnd_Anim(HSD_GObj* gobj);\n/* 125BAC */ void ftPk_SpecialSEnd_IASA(HSD_GObj* gobj);\n/* 125BB4 */ void ftPk_SpecialSEnd_Phys(HSD_GObj* gobj);\n/* 125C44 */ void ftPk_SpecialSEnd_Coll(HSD_GObj* gobj);\n/* 125CD0 */ void ftPk_SpecialS_ChangeMotion_Unk11(HSD_GObj* gobj);\n/* 125D28 */ void ftPk_SpecialS_ChangeMotion_Unk12(HSD_GObj* gobj);\n#define GALE01_1211B4\n/* 1211B4 */ void ftPp_SpecialHi_Enter(HSD_GObj* gobj);\n/* 12122C */ void ftPp_SpecialAirHi_Enter(HSD_GObj* gobj);\n/* 1212C4 */ void ftPp_SpecialHiStart_0_Anim(HSD_GObj* gobj);\n/* 1213CC */ void ftPp_SpecialAirHiStart_0_Anim(HSD_GObj* gobj);\n/* 1214D4 */ void ftPp_SpecialHiStart_0_IASA(HSD_GObj* gobj);\n/* 121558 */ void ftPp_SpecialAirHiStart_0_IASA(HSD_GObj* gobj);\n/* 1215DC */ void ftPp_SpecialHiStart_0_Phys(HSD_GObj* gobj);\n/* 121680 */ void ftPp_SpecialAirHiStart_0_Phys(HSD_GObj* gobj);\n/* 121740 */ void ftPp_SpecialHiStart_0_Coll(HSD_GObj* gobj);\n/* 12177C */ void ftPp_SpecialAirHiStart_0_Coll(HSD_GObj* gobj);\n/* 121944 */ void ftPp_SpecialHiThrow_0_Anim(HSD_GObj* gobj);\n/* 1219F4 */ void ftPp_SpecialAirHiThrow_0_Anim(HSD_GObj* gobj);\n/* 121AC8 */ void ftPp_SpecialHiThrow_0_IASA(HSD_GObj* gobj);\n/* 121ACC */ void ftPp_SpecialAirHiThrow_0_IASA(HSD_GObj* gobj);\n/* 121AD0 */ void ftPp_SpecialHiThrow_0_Phys(HSD_GObj* gobj);\n/* 121B74 */ void ftPp_SpecialAirHiThrow_0_Phys(HSD_GObj* gobj);\n/* 121C34 */ void ftPp_SpecialHiThrow_0_Coll(HSD_GObj* gobj);\n/* 121C70 */ void ftPp_SpecialAirHiThrow_0_Coll(HSD_GObj* gobj);\n/* 121E10 */ void ftPp_SpecialHiStart_1_Anim(HSD_GObj* gobj);\n/* 121E4C */ void ftPp_SpecialAirHiStart_1_Anim(HSD_GObj* gobj);\n/* 121EB0 */ void ftPp_SpecialHiStart_1_IASA(HSD_GObj* gobj);\n/* 121EB4 */ void ftPp_SpecialAirHiStart_1_IASA(HSD_GObj* gobj);\n/* 121EB8 */ void ftPp_SpecialHiStart_1_Phys(HSD_GObj* gobj);\n/* 121ED8 */ void ftPp_SpecialAirHiStart_1_Phys(HSD_GObj* gobj);\n/* 121F2C */ void ftPp_SpecialHiStart_1_Coll(HSD_GObj* gobj);\n/* 121F68 */ void ftPp_SpecialAirHiStart_1_Coll(HSD_GObj* gobj);\n/* 122110 */ void ftPp_SpecialHiThrow_1_Anim(HSD_GObj* gobj);\n/* 12214C */ void ftPp_SpecialAirHiThrow_1_Anim(HSD_GObj* gobj);\n/* 1221AC */ void ftPp_SpecialHiThrow_1_IASA(HSD_GObj* gobj);\n/* 1221B0 */ void ftPp_SpecialAirHiThrow_1_IASA(HSD_GObj* gobj);\n/* 1221B4 */ void ftPp_SpecialHiThrow_1_Phys(HSD_GObj* gobj);\n/* 1221D4 */ void ftPp_SpecialAirHiThrow_1_Phys(HSD_GObj* gobj);\n/* 122264 */ void ftPp_SpecialAirHiThrow_1_Coll(HSD_GObj* gobj);\n/* 1223B8 */ void ftPp_SpecialHiThrow2_Anim(HSD_GObj* gobj);\n/* 122410 */ void ftPp_SpecialAirHiThrow2_Anim(HSD_GObj* gobj);\n/* 12248C */ void ftPp_SpecialHiThrow2_IASA(HSD_GObj* gobj);\n/* 122490 */ void ftPp_SpecialAirHiThrow2_IASA(HSD_GObj* gobj);\n/* 122494 */ void ftPp_SpecialHiThrow2_Phys(HSD_GObj* gobj);\n/* 122538 */ void ftPp_SpecialAirHiThrow2_Phys(HSD_GObj* gobj);\n/* 122664 */ void ftPp_SpecialHiThrow2_Coll(HSD_GObj* gobj);\n/* 1226A0 */ void ftPp_SpecialAirHiThrow2_Coll(HSD_GObj* gobj);\n/* 122898 */ void ftPp_SpecialHi_80122898(HSD_GObj* gobj);\n/* 122904 */ void ftPp_SpecialLw_Enter(HSD_GObj* gobj);\n/* 122988 */ void ftPp_SpecialAirLw_Enter(HSD_GObj* gobj);\n/* 122A0C */ void ftPp_SpecialLw_Anim(HSD_GObj* gobj);\n/* 122A8C */ void ftPp_SpecialAirLw_Anim(HSD_GObj* gobj);\n/* 122B0C */ void ftPp_SpecialLw_IASA(HSD_GObj* gobj);\n/* 122B10 */ void ftPp_SpecialAirLw_IASA(HSD_GObj* gobj);\n/* 122B14 */ void ftPp_SpecialLw_Phys(HSD_GObj* gobj);\n/* 122B34 */ void ftPp_SpecialAirLw_Phys(HSD_GObj* gobj);\n/* 122C18 */ void ftPp_SpecialLw_Coll(HSD_GObj* gobj);\n/* 122D04 */ void ftPp_SpecialAirLw_Coll(HSD_GObj* gobj);\n#define GALE01_11ED38\n/* 11ED38 */ void ftPp_Init_OnItemPickup(HSD_GObj* gobj, bool flag);\n/* 11EE18 */ void ftPp_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 11EE60 */ void ftPp_Init_OnItemVisible(HSD_GObj* gobj);\n/* 11EEA8 */ void ftPp_Init_OnItemDrop(HSD_GObj* gobj, bool flag);\n/* 11EEFC */ void ftPp_Init_OnLoad(HSD_GObj* gobj);\n/* 11EF3C */ void ftPp_Init_OnLoadForNana(Fighter* fp);\n/* 11EFE8 */ void ftPp_Init_OnDeath(HSD_GObj* gobj);\n/* 11F060 */ void ftPp_Init_8011F060(HSD_GObj* gobj);\n/* 11F0A4 */ void ftPp_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 11F0E4 */ void ftPp_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 11F128 */ void ftPp_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 11F16C */ void ftPp_Init_8011F16C(HSD_GObj* gobj, uint arg1);\n/* 3CD2D0 */ extern MotionState ftPp_Init_MotionStateTable[ftPp_MS_SelfCount];\n/* 3CD610 */ extern char ftPp_Init_DatFilename[];\n/* 3CD61C */ extern char ftPp_Init_DataName[];\n/* 3CD738 */ extern char ftPp_Init_AnimDatFilename[];\n/* 3CD7B4 */ extern Fighter_DemoStrings ftPp_Init_DemoMotionFilenames;\n/* 3CD7C4 */ extern Fighter_CostumeStrings ftPp_Init_CostumeStrings[];\n#define _FTPP_SPECIALN_\n/* 11F1F8 */ void ftPp_SpecialN_Enter(HSD_GObj* gobj);\n/* 11F26C */ void ftPp_SpecialAirN_Enter(HSD_GObj* gobj);\n/* 11F318 */ void ftPp_SpecialN_Anim(HSD_GObj* gobj);\n/* 11F354 */ void ftPp_SpecialAirN_Anim(HSD_GObj* gobj);\n/* 11F390 */ void ftPp_SpecialN_IASA(HSD_GObj* gobj);\n/* 11F394 */ void ftPp_SpecialAirN_IASA(HSD_GObj* gobj);\n/* 11F398 */ void ftPp_SpecialN_Phys(HSD_GObj* gobj);\n/* 11F3B8 */ void ftPp_SpecialAirN_Phys(HSD_GObj* gobj);\n/* 11F3D8 */ void ftPp_SpecialN_Coll(HSD_GObj* gobj);\n/* 11F454 */ void ftPp_SpecialAirN_Coll(HSD_GObj* gobj);\n/* 11F500 */ void ftPp_SpecialN_8011F500(HSD_GObj* gobj);\n#define GALE01_11F99C\n/* 11F68C */ void ftPp_SpecialS_8011F68C(HSD_GObj* gobj);\n/* 11F6FC */ bool ftPp_SpecialS_8011F6FC(HSD_GObj* gobj);\n/* 11F720 */ void ftPp_SpecialS_8011F720(HSD_GObj* gobj);\n/* 11F964 */ bool ftPp_SpecialS_8011F964(HSD_GObj*);\n/* 11F99C */ void ftPp_SpecialS_Enter(HSD_GObj* gobj);\n/* 11FB08 */ void ftPp_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 11FC78 */ void ftPp_SpecialS1_Anim(HSD_GObj* gobj);\n/* 11FCD0 */ void ftPp_SpecialS2_Anim(HSD_GObj* gobj);\n/* 11FD9C */ void ftPp_SpecialAirS1_Anim(HSD_GObj* gobj);\n/* 11FE48 */ void ftPp_SpecialAirS2_Anim(HSD_GObj* gobj);\n/* 11FF40 */ void ftPp_SpecialS1_IASA(HSD_GObj* gobj);\n/* 11FF90 */ void ftPp_SpecialS2_IASA(HSD_GObj* gobj);\n/* 11FFE0 */ void ftPp_SpecialAirS1_IASA(HSD_GObj* gobj);\n/* 120030 */ void ftPp_SpecialAirS2_IASA(HSD_GObj* gobj);\n/* 120080 */ void ftPp_SpecialS1_Phys(HSD_GObj* gobj);\n/* 120230 */ void ftPp_SpecialS2_Phys(HSD_GObj* gobj);\n/* 1203E0 */ void ftPp_SpecialAirS1_Phys(HSD_GObj* gobj);\n/* 120520 */ void ftPp_SpecialAirS2_Phys(HSD_GObj* gobj);\n/* 120660 */ void ftPp_SpecialS1_Coll(HSD_GObj* gobj);\n/* 120854 */ void ftPp_SpecialS2_Coll(HSD_GObj* gobj);\n/* 120A48 */ void ftPp_SpecialAirS1_Coll(HSD_GObj* gobj);\n/* 120C58 */ void ftPp_SpecialAirS2_Coll(HSD_GObj* gobj);\n/* 121164 */ void ftPp_SpecialS_80121164(HSD_GObj* gobj);\n/* 1221AC */ void ftPp_SpecialHiThrow_1_IASA(HSD_GObj* gobj);\n/* 1221B4 */ void ftPp_SpecialHiThrow_1_Phys(HSD_GObj* gobj);\n/* 122228 */ void ftPp_SpecialHiThrow_1_Coll(HSD_GObj* gobj);\n#define MELEE_FT_CHARA_FTPURIN_FORWARD_H\nstatic MotionFlags const ftPr_MF_Special =\n    Ft_MF_SkipModel | Ft_MF_SkipItemVis | Ft_MF_UnkUpdatePhys |\n    Ft_MF_FreezeState;\nstatic MotionFlags const ftPr_MF_SpecialHi =\n    ftPr_MF_Special | Ft_MF_KeepFastFall | Ft_MF_KeepGfx;\nstatic MotionFlags const ftPr_MF_SpecialLw =\n    ftPr_MF_Special | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftPr_MF_SpecialN =\n    ftPr_MF_Special | Ft_MF_KeepFastFall | Ft_MF_KeepSfx;\nstatic MotionFlags const ftPr_MF_SpecialS =\n    ftPr_MF_Special | Ft_MF_KeepGfx | Ft_MF_KeepSfx;\nstatic MotionFlags const ftPr_MF_SpecialAirHi =\n    ftPr_MF_SpecialHi | Ft_MF_SkipParasol;\nstatic MotionFlags const ftPr_MF_SpecialAirLw =\n    ftPr_MF_SpecialLw | Ft_MF_SkipParasol;\nstatic MotionFlags const ftPr_MF_SpecialAirN =\n    ftPr_MF_SpecialN | Ft_MF_SkipParasol;\nstatic MotionFlags const ftPr_MF_SpecialAirS =\n    ftPr_MF_SpecialS | Ft_MF_SkipParasol;\nstatic MotionFlags const ftPr_MF_SpecialNCharged =\n    ftPr_MF_SpecialN | Ft_MF_Unk19;\nstatic MotionFlags const ftPr_SpecialAirNCharged =\n    ftPr_MF_SpecialNCharged | Ft_MF_SkipParasol;\ntypedef enum ftPurin_MotionState {\n    ftPr_MS_JumpAerialF1 = ftCo_MS_Count,\n    ftPr_MS_JumpAerialF2,\n    ftPr_MS_JumpAerialF3,\n    ftPr_MS_JumpAerialF4,\n    ftPr_MS_JumpAerialF5,\n    ftPr_MS_SpecialNStartR,\n    ftPr_MS_SpecialNStartL,\n    ftPr_MS_SpecialNLoop,\n    ftPr_MS_SpecialNFull,\n    ftPr_MS_SpecialNRelease,\n    ftPr_MS_SpecialNTurn,\n    ftPr_MS_SpecialNEndR,\n    ftPr_MS_SpecialNEndL,\n    ftPr_MS_SpecialAirNStartR,\n    ftPr_MS_SpecialAirNStartL,\n    ftPr_MS_SpecialAirNChargeLoop,\n    ftPr_MS_SpecialAirNChargeFull,\n    ftPr_MS_SpecialAirNChargeRelease,\n    ftPr_MS_SpecialAirNStartTurn,\n    ftPr_MS_SpecialAirNEndR,\n    ftPr_MS_SpecialAirNEndL,\n    ftPr_MS_SpecialNHit,\n    ftPr_MS_SpecialS,\n    ftPr_MS_SpecialAirS,\n    ftPr_MS_SpecialHiL,\n    ftPr_MS_SpecialAirHiL,\n    ftPr_MS_SpecialHiR,\n    ftPr_MS_SpecialAirHiR,\n    ftPr_MS_SpecialLwL,\n    ftPr_MS_SpecialAirLwL,\n    ftPr_MS_SpecialLwR,\n    ftPr_MS_SpecialAirLwR,\n    ftPr_MS_Count,\n    ftPr_MS_SelfCount = ftPr_MS_Count - ftCo_MS_Count,\n} ftPurin_MotionState;\ntypedef enum ftPr_Submotion {\n    ftPr_SM_JumpAerialF1 = ftCo_SM_Count,\n    ftPr_SM_JumpAerialF2,\n    ftPr_SM_JumpAerialF3,\n    ftPr_SM_JumpAerialF4,\n    ftPr_SM_JumpAerialF5,\n    ftPr_SM_SpecialNStartR,\n    ftPr_SM_SpecialNStartL,\n    ftPr_SM_SpecialNChargeLoop,\n    ftPr_SM_SpecialNChargeFull,\n    ftPr_SM_SpecialNChargeRelease,\n    ftPr_SM_SpecialNStartTurn,\n    ftPr_SM_SpecialNEndR,\n    ftPr_SM_SpecialNEndL,\n    ftPr_SM_SpecialAirNStartR,\n    ftPr_SM_SpecialAirNStartL,\n    ftPr_SM_SpecialAirNChargeLoop,\n    ftPr_SM_SpecialAirNChargeFull,\n    ftPr_SM_SpecialAirNChargeRelease,\n    ftPr_SM_SpecialAirNStartTurn,\n    ftPr_SM_SpecialAirNEndR,\n    ftPr_SM_SpecialAirNEndL,\n    ftPr_SM_SpecialNHit,\n    ftPr_SM_SpecialS,\n    ftPr_SM_SpecialAirS,\n    ftPr_SM_SpecialHiL,\n    ftPr_SM_SpecialAirHiL,\n    ftPr_SM_SpecialHiR,\n    ftPr_SM_SpecialAirHiR,\n    ftPr_SM_SpecialLwL,\n    ftPr_SM_SpecialAirLwL,\n    ftPr_SM_SpecialLwR,\n    ftPr_SM_SpecialAirLwR,\n    ftPr_SM_Count,\n    ftPr_SM_SelfCount = ftPr_SM_Count - ftCo_SM_Count,\n} ftPr_Submotion;\n#define GALE01_13C2F8\n/* 13C2F8 */ void ftPr_Init_8013C2F8(void);\n/* 13C318 */ void ftPr_Init_OnDeath(HSD_GObj* gobj);\n/* 13C340 */ void ftPr_Init_OnUserDataRemove(HSD_GObj* gobj);\n/* 13C360 */ void ftPr_Init_8013C360(HSD_GObj* gobj);\n/* 13C494 */ void ftPr_Init_8013C494(HSD_GObj* gobj);\n/* 13C4F0 */ void ftPr_Init_UnkMtxFunc0(HSD_GObj* gobj, int arg1, Mtx vmtx);\n/* 13C614 */ void ftPr_Init_UnkIntBoolFunc0(Fighter* fp, int arg1, bool arg2);\n/* 13C664 */ void* ftPr_Init_UnkMotionStates6(HSD_GObj* gobj);\n/* 13C67C */ void ftPr_Init_OnLoad(HSD_GObj* gobj);\n/* 13C6EC */ void ftPr_Init_OnItemPickup(HSD_GObj* gobj, bool flag);\n/* 13C798 */ void ftPr_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 13C7E8 */ void ftPr_Init_OnItemVisible(HSD_GObj* gobj);\n/* 13C838 */ void ftPr_Init_OnItemDrop(HSD_GObj* gobj, bool bool1);\n/* 13C88C */ void ftPr_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 13C8C4 */ void ftPr_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 13C908 */ void ftPr_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 13C94C */ void ftPr_Init_8013C94C(HSD_GObj* gobj);\n/* 13C9C8 */ void ftPr_SpecialHi_Enter(HSD_GObj* gobj);\n/* 13CA98 */ void ftPr_SpecialAirHi_Enter(HSD_GObj* gobj);\n/* 13CB68 */ void ftPr_SpecialHi_Anim(HSD_GObj* gobj);\n/* 13CBE4 */ void ftPr_SpecialAirHi_Anim(HSD_GObj* gobj);\n/* 13CC60 */ void ftPr_SpecialHi_IASA(HSD_GObj* gobj);\n/* 13CC64 */ void ftPr_SpecialAirHi_IASA(HSD_GObj* gobj);\n/* 13CC68 */ void ftPr_SpecialHi_Phys(HSD_GObj* gobj);\n/* 13CC88 */ void ftPr_SpecialAirHi_Phys(HSD_GObj* gobj);\n/* 13CCA8 */ void ftPr_SpecialHi_Coll(HSD_GObj* gobj);\n/* 13CCE4 */ void ftPr_SpecialAirHi_Coll(HSD_GObj* gobj);\n/* 13CD34 */ void ftPr_SpecialHi_8013CD34(HSD_GObj* gobj);\n/* 13CDD8 */ void ftPr_SpecialHi_8013CDD8(HSD_GObj* gobj);\n/* 13CE7C */ void ftPr_SpecialHi_8013CE7C(HSD_GObj* gobj);\n/* 13CE8C */ void ftPr_SpecialLw_Enter(HSD_GObj* gobj);\n/* 13CF2C */ void ftPr_SpecialAirLw_Enter(HSD_GObj* gobj);\n/* 13CFCC */ void ftPr_SpecialLw_Anim(HSD_GObj* gobj);\n/* 13D008 */ void ftPr_SpecialAirLw_Anim(HSD_GObj* gobj);\n/* 13D044 */ void ftPr_SpecialLw_IASA(HSD_GObj* gobj);\n/* 13D048 */ void ftPr_SpecialAirLw_IASA(HSD_GObj* gobj);\n/* 13D04C */ void ftPr_SpecialLw_Phys(HSD_GObj* gobj);\n/* 13D06C */ void ftPr_SpecialAirLw_Phys(HSD_GObj* gobj);\n/* 13D08C */ void ftPr_SpecialLw_Coll(HSD_GObj* gobj);\n/* 13D0C8 */ void ftPr_SpecialAirLw_Coll(HSD_GObj* gobj);\n/* 13D104 */ void ftPr_SpecialLw_8013D104(HSD_GObj* gobj);\n/* 13D19C */ void ftPr_SpecialLw_8013D19C(HSD_GObj* gobj);\n/* 13D234 */ void ftPr_SpecialS_Enter(HSD_GObj* gobj);\n/* 13D2A0 */ void ftPr_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 13D30C */ void ftPr_SpecialS_Anim(HSD_GObj* gobj);\n/* 13D348 */ void ftPr_SpecialAirS_Anim(HSD_GObj* gobj);\n/* 13D384 */ void ftPr_SpecialS_IASA(HSD_GObj* gobj);\n/* 13D388 */ void ftPr_SpecialAirS_IASA(HSD_GObj* gobj);\n/* 13D38C */ void ftPr_SpecialS_Phys(HSD_GObj* gobj);\n/* 13D3AC */ void ftPr_SpecialAirS_Phys(HSD_GObj* gobj);\n/* 13D518 */ void ftPr_SpecialS_Coll(HSD_GObj* gobj);\n/* 13D554 */ void ftPr_SpecialAirS_Coll(HSD_GObj* gobj);\n/* 13D590 */ void ftPr_SpecialS_8013D590(HSD_GObj* gobj);\n/* 13D5F0 */ void ftPr_SpecialS_8013D5F0(HSD_GObj* gobj);\n/* 13D658 */ void ftPr_SpecialS_8013D658(HSD_GObj* gobj);\n/* 13D764 */ void ftPr_SpecialS_8013D764(HSD_GObj* gobj);\n/* 13D8B0 */ void ftPr_SpecialS_8013D8B0(HSD_GObj* gobj);\n/* 13D8E4 */ void ftPr_SpecialS_8013D8E4(HSD_GObj* gobj);\n/* 13DA24 */ void ftPr_SpecialS_8013DA24(HSD_GObj* gobj, bool unk,\n                                         MotionFlags flags, f32 anim_start);\n/* 13DC64 */ void ftPr_SpecialS_8013DC64(HSD_GObj* gobj);\n/* 13DD54 */ void ftPr_SpecialS_8013DD54(HSD_GObj* gobj);\n/* 13DEA8 */ void ftPr_SpecialN_Enter(HSD_GObj* gobj);\n/* 13DF60 */ void ftPr_SpecialAirN_Enter(HSD_GObj* gobj);\n/* 13E014 */ void ftPr_SpecialNStart_Anim(HSD_GObj* gobj);\n/* 13E0F0 */ void ftPr_SpecialNLoop_Anim(HSD_GObj* gobj);\n/* 13E2A0 */ void ftPr_SpecialNFull_Anim(HSD_GObj* gobj);\n/* 13E410 */ void ftPr_SpecialNRelease_Anim(HSD_GObj* gobj);\n/* 13E7E0 */ void ftPr_SpecialNTurn_Anim(HSD_GObj* gobj);\n/* 13EAD8 */ void ftPr_SpecialNEnd_Anim(HSD_GObj* gobj);\n/* 13EDB0 */ void ftPr_SpecialAirNStart_Anim(HSD_GObj* gobj);\n/* 13EE84 */ void ftPr_SpecialAirNChargeLoop_Anim(HSD_GObj* gobj);\n/* 13F034 */ void ftPr_SpecialAirNChargeFull_Anim(HSD_GObj* gobj);\n/* 13F1A4 */ void ftPr_SpecialAirNChargeRelease_Anim(HSD_GObj* gobj);\n/* 13F708 */ void ftPr_SpecialAirNStartTurn_Anim(HSD_GObj* gobj);\n/* 13F9C0 */ void ftPr_SpecialAirNEnd_Anim(HSD_GObj* gobj);\n/* 13FCAC */ void ftPr_SpecialNHit_Anim(HSD_GObj* gobj);\n/* 13FF00 */ void ftPr_SpecialNStart_IASA(HSD_GObj* gobj);\n/* 13FF04 */ void ftPr_SpecialNLoop_IASA(HSD_GObj* gobj);\n/* 140064 */ void ftPr_SpecialNFull_IASA(HSD_GObj* gobj);\n/* 1401C4 */ void ftPr_SpecialNRelease_IASA(HSD_GObj* gobj);\n/* 140344 */ void ftPr_SpecialNTurn_IASA(HSD_GObj* gobj);\n/* 140348 */ void ftPr_SpecialNEnd_IASA(HSD_GObj* gobj);\n/* 14034C */ void ftPr_SpecialAirNStart_IASA(HSD_GObj* gobj);\n/* 140350 */ void ftPr_SpecialAirNChargeLoop_IASA(HSD_GObj* gobj);\n/* 1404B0 */ void ftPr_SpecialAirNChargeFull_IASA(HSD_GObj* gobj);\n/* 140610 */ void ftPr_SpecialAirNChargeRelease_IASA(HSD_GObj* gobj);\n/* 140614 */ void ftPr_SpecialAirNStartTurn_IASA(HSD_GObj* gobj);\n/* 140618 */ void ftPr_SpecialAirNEnd_IASA(HSD_GObj* gobj);\n/* 14061C */ void ftPr_SpecialNHit_IASA(HSD_GObj* gobj);\n/* 140620 */ void ftPr_SpecialNStart_Phys(HSD_GObj* gobj);\n/* 140650 */ void ftPr_SpecialNLoop_Phys(HSD_GObj* gobj);\n/* 140680 */ void ftPr_SpecialNFull_Phys(HSD_GObj* gobj);\n/* 1406B0 */ void ftPr_SpecialNRelease_Phys(HSD_GObj* gobj);\n/* 1408B8 */ void ftPr_SpecialNTurn_Phys(HSD_GObj* gobj);\n/* 140BAC */ void ftPr_SpecialNEnd_Phys(HSD_GObj* gobj);\n/* 140BE8 */ void ftPr_SpecialAirNStart_Phys(HSD_GObj* gobj);\n/* 140C18 */ void ftPr_SpecialAirNChargeLoop_Phys(HSD_GObj* gobj);\n/* 140C48 */ void ftPr_SpecialAirNChargeFull_Phys(HSD_GObj* gobj);\n/* 140C78 */ void ftPr_SpecialAirNChargeRelease_Phys(HSD_GObj* gobj);\n/* 140DF8 */ void ftPr_SpecialAirNStartTurn_Phys(HSD_GObj* gobj);\n/* 140F10 */ void ftPr_SpecialAirNEnd_Phys(HSD_GObj* gobj);\n/* 140F40 */ void ftPr_SpecialNHit_Phys(HSD_GObj* gobj);\n/* 140FA4 */ void ftPr_SpecialNStart_Coll(HSD_GObj* gobj);\n/* 141054 */ void ftPr_SpecialNLoop_Coll(HSD_GObj* gobj);\n/* 141154 */ void ftPr_SpecialNFull_Coll(HSD_GObj* gobj);\n/* 141254 */ void ftPr_SpecialNRelease_Coll(HSD_GObj* gobj);\n/* 1415F4 */ void ftPr_SpecialNTurn_Coll(HSD_GObj* gobj);\n/* 1416D0 */ void ftPr_SpecialNEnd_Coll(HSD_GObj* gobj);\n/* 141730 */ void ftPr_SpecialAirNStart_Coll(HSD_GObj* gobj);\n/* 1417E0 */ void ftPr_SpecialAirNChargeLoop_Coll(HSD_GObj* gobj);\n/* 1418E0 */ void ftPr_SpecialAirNChargeFull_Coll(HSD_GObj* gobj);\n/* 1419E0 */ void ftPr_SpecialAirNChargeRelease_Coll(HSD_GObj* gobj);\n/* 141FB8 */ void ftPr_SpecialAirNStartTurn_Coll(HSD_GObj* gobj);\n/* 142070 */ void ftPr_SpecialAirNEnd_Coll(HSD_GObj* gobj);\n/* 1420D0 */ void ftPr_SpecialNHit_Coll(HSD_GObj* gobj);\n/* 14222C */ void ftPr_SpecialN_8014222C(HSD_GObj* gobj);\n/* 3CFEF0 */ extern MotionState ftPr_Init_MotionStateTable[ftPr_MS_SelfCount];\n/* 3D02F0 */ extern char ftPr_Init_DatFilename[];\n/* 3D02FC */ extern char ftPr_Init_DataName[];\n/* 3D047C */ extern char ftPr_Init_AnimDatFilename[];\n/* 3D04F8 */ extern Fighter_DemoStrings ftPr_Init_DemoMotionFilenames;\n/* 3D0508 */ extern Fighter_CostumeStrings ftPr_Init_CostumeStrings[];\n#define MELEE_FT_CHARA_FTSAMUS_FORWARD_H\nstatic MotionFlags const ftSs_MF_Special =\n    Ft_MF_SkipModel | Ft_MF_SkipItemVis | Ft_MF_UnkUpdatePhys |\n    Ft_MF_FreezeState;\nstatic MotionFlags const ftSs_MF_SpecialN =\n    ftSs_MF_Special | Ft_MF_KeepFastFall | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftSs_MF_SpecialS =\n    ftSs_MF_Special | Ft_MF_KeepGfx | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftSs_MF_SpecialLw =\n    ftSs_MF_Special | Ft_MF_KeepColAnimHitStatus | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftSs_MF_SpecialHi =\n    ftSs_MF_Special | Ft_MF_KeepFastFall | Ft_MF_KeepGfx | Ft_MF_KeepSfx;\nstatic MotionFlags const ftSs_MF_SpecialAirN =\n    ftSs_MF_SpecialN | Ft_MF_SkipParasol;\nstatic MotionFlags const ftSs_MF_SpecialAirS =\n    ftSs_MF_SpecialS | Ft_MF_SkipParasol;\nstatic MotionFlags const ftSs_MF_SpecialAirLw =\n    ftSs_MF_SpecialLw | Ft_MF_SkipParasol;\nstatic MotionFlags const ftSs_MF_SpecialAirHi =\n    ftSs_MF_SpecialHi | Ft_MF_SkipParasol;\nstatic MotionFlags const ftSs_MF_SpecialSSmash =\n    ftSs_MF_SpecialS | Ft_MF_SkipRumble;\nstatic MotionFlags const ftSs_MF_SpecialAirSSmash =\n    ftSs_MF_SpecialSSmash | Ft_MF_SkipParasol;\nstatic MotionFlags const ftSs_MF_ZairCatch =\n    Ft_MF_SkipModelPartVis | Ft_MF_SkipMetalB;\ntypedef enum ftSamus_MotionState {\n    ftSs_MS_SpecialLw = ftCo_MS_Count,\n    ftSs_MS_SpecialAirLw,\n    ftSs_MS_SpecialNStart,\n    ftSs_MS_SpecialNHold,\n    ftSs_MS_SpecialNCancel,\n    ftSs_MS_SpecialN,\n    ftSs_MS_SpecialAirNStart,\n    ftSs_MS_SpecialAirN,\n    ftSs_MS_SpecialS,\n    ftSs_MS_SpecialSSmash,\n    ftSs_MS_SpecialAirS,\n    ftSs_MS_SpecialAirSSmash,\n    ftSs_MS_SpecialHi,\n    ftSs_MS_SpecialAirHi,\n    ftSs_MS_SpecialLwBomb,\n    ftSs_MS_SpecialAirLwBomb,\n    ftSs_MS_AirCatch,\n    ftSs_MS_AirCatchHit,\n    ftSs_MS_Count,\n    ftSs_MS_SelfCount = ftSs_MS_Count - ftCo_MS_Count,\n} ftSamus_MotionState;\ntypedef enum ftSs_Submotion {\n    ftSs_SM_SpecialLw = ftCo_SM_Count,\n    ftSs_SM_SpecialAirLw,\n    ftSs_SM_SpecialNStart,\n    ftSs_SM_SpecialNHold,\n    ftSs_SM_SpecialNCancel,\n    ftSs_SM_SpecialN,\n    ftSs_SM_SpecialAirNStart,\n    ftSs_SM_SpecialAirN,\n    ftSs_SM_SpecialS,\n    ftSs_SM_SpecialSSmash,\n    ftSs_SM_SpecialAirS,\n    ftSs_SM_SpecialAirSSmash,\n    ftSs_SM_SpecialHi,\n    ftSs_SM_SpecialAirHi,\n    ftSs_SM_SpecialLwBomb,\n    ftSs_SM_SpecialAirLwBomb,\n    ftSs_SM_AirCatch,\n    ftSs_SM_AirCatchHit,\n    ftSs_SM_Count,\n    ftSs_SM_SelfCount = ftSs_SM_Count - ftCo_SM_Count,\n} ftSs_Submotion;\n#define GALE01_12832C\n/* 12832C */ void ftSs_Init_OnDeath(HSD_GObj* gobj);\n/* 12837C */ void ftSs_Init_OnLoad(HSD_GObj* gobj);\n/* 128428 */ void ftSs_Init_80128428(HSD_GObj* gobj);\n/* 128464 */ void ftSs_Init_OnItemPickup(HSD_GObj* gobj, bool flag);\n/* 128544 */ void ftSs_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 12858C */ void ftSs_Init_OnItemVisible(HSD_GObj* gobj);\n/* 1285D4 */ void ftSs_Init_OnItemDrop(HSD_GObj* gobj, bool bool1);\n/* 128628 */ void ftSs_Init_UnkMotionStates4(HSD_GObj* gobj);\n/* 128684 */ void ftSs_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 128770 */ void ftSs_Init_80128770(HSD_AObj* gobj, f32 rate);\n/* 1287C4 */ void ftSs_Init_CreateThrowGrappleBeam(HSD_GObj* gobj,\n                                                   s32 motion_state,\n                                                   f32 anim_speed);\n/* 128944 */ void ftSs_Init_80128944(HSD_GObj* gobj, f32 farg1, f32 farg2);\n/* 128A1C */ bool ftSs_Init_80128A1C(HSD_GObj* gobj, unk_t arg1, f32 farg1);\n/* 128AC8 */ f32 ftSs_Init_80128AC8(HSD_GObj* gobj, f32 farg1, f32 farg2);\n/* 128B1C */ void ftSs_Init_80128B1C(HSD_GObj* gobj, f32, f32, f32);\n/* 3CE2D0 */ extern MotionState ftSs_Init_MotionStateTable[ftSs_MS_SelfCount];\n/* 3CE510 */ extern char ftSs_Init_DatFilename[];\n/* 3CE51C */ extern char ftSs_Init_DataName[];\n/* 3CE5EC */ extern char ftSs_Init_AnimDatFilename[];\n/* 3CE668 */ extern Fighter_DemoStrings ftSs_Init_DemoMotionFilenames;\n/* 3CE678 */ extern Fighter_CostumeStrings ftSs_Init_CostumeStrings[];\n#define GALE01_12A674\n/* 12A674 */ void ftSs_SpecialHi_Enter(HSD_GObj* gobj);\n/* 12A738 */ void ftSs_SpecialAirHi_Enter(HSD_GObj* gobj);\n/* 12A81C */ void ftSs_SpecialHi_Anim(HSD_GObj* gobj);\n/* 12A8C4 */ void ftSs_SpecialAirHi_Anim(HSD_GObj* gobj);\n/* 12A96C */ void ftSs_SpecialHi_IASA(HSD_GObj* gobj);\n/* 12AA3C */ void ftSs_SpecialAirHi_IASA(HSD_GObj* gobj);\n/* 12AB0C */ void ftSs_SpecialHi_Phys(HSD_GObj* gobj);\n/* 12ABB4 */ void ftSs_SpecialAirHi_Phys(HSD_GObj* gobj);\n/* 12AC00 */ void ftSs_SpecialHi_Coll(HSD_GObj* gobj);\n/* 12ACF8 */ void ftSs_SpecialAirHi_Coll(HSD_GObj* gobj);\n#define GALE01_128944\n/* 128C04 */ void ftSs_SpecialLw_Anim(HSD_GObj* gobj);\n/* 128CA0 */ void ftSs_SpecialAirLw_Anim(HSD_GObj* gobj);\n/* 128D3C */ void ftSs_SpecialLw_IASA(HSD_GObj* gobj);\n/* 128E68 */ void ftSs_SpecialAirLw_IASA(HSD_GObj* gobj);\n/* 128E88 */ void ftSs_SpecialLw_Phys(HSD_GObj* gobj);\n/* 128EF8 */ void ftSs_SpecialAirLw_Phys(HSD_GObj* gobj);\n/* 128F60 */ void ftSs_SpecialLw_Coll(HSD_GObj* gobj);\n/* 128FD4 */ void ftSs_SpecialAirLw_Coll(HSD_GObj* gobj);\n/* 129048 */ void ftSs_SpecialLw_80129048(HSD_GObj* gobj);\n/* 1290A4 */ void ftSs_SpecialLw_801290A4(HSD_GObj* gobj);\n/* 129100 */ int ftSs_SpecialLw_80129100(HSD_GObj* gobj, s32* arg1, s32* arg2);\n/* 129158 */ s32 ftSs_SpecialLw_80129158(HSD_GObj* gobj);\n/* 1291A8 */ s32 ftSs_SpecialN_801291A8(HSD_GObj* gobj);\n#define GALE01_11444C\n/* 12ADF0 */ void ftSs_SpecialLw_8012ADF0(HSD_GObj* gobj);\n/* 12AEBC */ void ftSs_SpecialLw_8012AEBC(HSD_GObj* gobj);\n/* 12AF38 */ void ftSs_SpecialLw_8012AF38(HSD_GObj* gobj);\n/* 12AF5C */ void ftSs_SpecialLw_Enter(HSD_GObj* gobj);\n/* 12B09C */ void ftSs_SpecialAirLw_Enter(HSD_GObj* gobj);\n/* 12B150 */ void ftSs_SpecialLwBomb_Anim(HSD_GObj* gobj);\n/* 12B264 */ void ftSs_SpecialAirLwBomb_Anim(HSD_GObj* gobj);\n/* 12B358 */ void ftSs_SpecialLwBomb_IASA(HSD_GObj* gobj);\n/* 12B3A4 */ void ftSs_SpecialAirLwBomb_IASA(HSD_GObj* gobj);\n/* 12B3A8 */ void ftSs_SpecialLwBomb_Phys(HSD_GObj* gobj);\n/* 12B41C */ void ftSs_SpecialAirLwBomb_Phys(HSD_GObj* gobj);\n/* 12B488 */ void ftSs_SpecialLwBomb_Coll(HSD_GObj* gobj);\n/* 12B4FC */ void ftSs_SpecialAirLwBomb_Coll(HSD_GObj* gobj);\n/* 12B570 */ void ftSs_SpecialLw_8012B570(HSD_GObj* gobj);\n/* 12B5F0 */ void ftSs_SpecialLw_8012B5F0(HSD_GObj* gobj);\n/* 12B668 */ void ftSs_SpecialLw_8012B668(HSD_GObj* gobj);\n#define GALE01_1122D8\n/* 1291F0 */ void ftSs_SpecialN_801291F0(HSD_GObj* gobj);\n/* 129258 */ void ftSs_SpecialN_80129258(HSD_GObj* gobj);\n/* 12954C */ void ftSs_SpecialN_Enter(HSD_GObj* gobj);\n/* 1295F0 */ void ftSs_SpecialAirN_Enter(HSD_GObj* gobj);\n/* 129684 */ void ftSs_SpecialNStart_Anim(HSD_GObj* gobj);\n/* 129774 */ void ftSs_SpecialNHold_Anim(HSD_GObj* gobj);\n/* 129940 */ void ftSs_SpecialNCancel_Anim(HSD_GObj* gobj);\n/* 1299D0 */ void ftSs_SpecialN_Anim(HSD_GObj* gobj);\n/* 129A14 */ void ftSs_SpecialAirNStart_Anim(HSD_GObj* gobj);\n/* 129A98 */ void ftSs_SpecialAirN_Anim(HSD_GObj* gobj);\n/* 129B18 */ void ftSs_SpecialNStart_IASA(HSD_GObj* gobj);\n/* 129B1C */ void ftSs_SpecialNHold_IASA(HSD_GObj* gobj);\n/* 129C78 */ void ftSs_SpecialNCancel_IASA(HSD_GObj* gobj);\n/* 129C7C */ void ftSs_SpecialN_IASA(HSD_GObj* gobj);\n/* 129C80 */ void ftSs_SpecialAirNStart_IASA(HSD_GObj* gobj);\n/* 129C84 */ void ftSs_SpecialAirN_IASA(HSD_GObj* gobj);\n/* 129C88 */ void ftSs_SpecialNStart_Phys(HSD_GObj* gobj);\n/* 129CA8 */ void ftSs_SpecialNHold_Phys(HSD_GObj* gobj);\n/* 129CC8 */ void ftSs_SpecialNCancel_Phys(HSD_GObj* gobj);\n/* 129CE8 */ void ftSs_SpecialN_Phys(HSD_GObj* gobj);\n/* 129D08 */ void ftSs_SpecialAirNStart_Phys(HSD_GObj* gobj);\n/* 129D28 */ void ftSs_SpecialAirN_Phys(HSD_GObj* gobj);\n/* 129D48 */ void ftSs_SpecialNStart_Coll(HSD_GObj* gobj);\n/* 129DC8 */ void ftSs_SpecialNHold_Coll(HSD_GObj* gobj);\n/* 129E68 */ void ftSs_SpecialNCancel_Coll(HSD_GObj* gobj);\n/* 129EE8 */ void ftSs_SpecialN_Coll(HSD_GObj* gobj);\n/* 129F68 */ void ftSs_SpecialAirNStart_Coll(HSD_GObj* gobj);\n/* 129FE8 */ void ftSs_SpecialAirN_Coll(HSD_GObj* gobj);\n/* 12A068 */ s32 ftSs_SpecialS_8012A068(HSD_GObj* gobj);\n/* 12A074 */ void ftSs_SpecialS_8012A074(HSD_GObj* gobj);\n#define GALE01_110490\n/* 110490 */ void ftSk_SpecialS_80110490(Fighter* fp);\n/* 110610 */ void ftSk_SpecialS_80110610(HSD_GObj* gobj, s32 arg1, f32 arg8);\n/* 110788 */ void ftSk_SpecialS_80110788(HSD_GObj* gobj);\n/* 11097C */ void ftSk_SpecialS_8011097C(HSD_GObj* gobj);\n/* 110A80 */ void ftSk_SpecialS_ZeroHitboxPositions(HSD_GObj* gobj);\n/* 110AEC */ void ftSk_SpecialS_80110AEC(HSD_GObj* gobj);\n/* 110BCC */ void ftSk_SpecialS_80110BCC(HSD_GObj* gobj);\n/* 110E4C */ void ftSk_SpecialS_80110E4C(HSD_GObj* gobj);\n/* 110E88 */ void ftSk_SpecialS_CheckAndDestroyChain(HSD_GObj* gobj);\n/* 110EE8 */ void ftSk_SpecialS_80110EE8(HSD_GObj* gobj);\n/* 110F18 */ void ftSk_SpecialS_ChainSomething(HSD_GObj* gobj);\n/* 110F58 */ f32 ftSk_SpecialS_80110F58(HSD_GObj* gobj);\n/* 110F64 */ f32 ftSk_SpecialS_80110F64(HSD_GObj* gobj);\n/* 110F70 */ void ftSk_SpecialS_80110F70(HSD_GObj* gobj);\n/* 111038 */ void ftSk_SpecialS_Enter(HSD_GObj* gobj);\n/* 1110E8 */ bool ftSk_SpecialS_CheckInitChain(HSD_GObj* gobj);\n/* 1112CC */ void ftSk_SpecialSStart_Anim(HSD_GObj* gobj);\n/* 111344 */ void ftSk_SpecialSStart_IASA(HSD_GObj* gobj);\n/* 11134C */ void ftSk_SpecialSStart_Phys(HSD_GObj* gobj);\n/* 1113C8 */ void ftSk_SpecialSStart_Coll(HSD_GObj* gobj);\n/* 111440 */ void ftSk_SpecialS_80111440(HSD_GObj* gobj);\n/* 1114E4 */ void ftSk_SpecialS_801114E4(HSD_GObj* gobj);\n/* 111588 */ void ftSk_SpecialS_Anim(HSD_GObj* gobj);\n/* 111708 */ void ftSk_SpecialS_IASA(HSD_GObj* gobj);\n/* 111778 */ void ftSk_SpecialS_Phys(HSD_GObj* gobj);\n/* 1117B8 */ void ftSk_SpecialS_Coll(HSD_GObj* gobj);\n/* 111830 */ void ftSk_SpecialS_80111830(HSD_GObj* gobj);\n/* 111988 */ void ftSk_SpecialS_80111988(HSD_GObj* gobj);\n/* 111A48 */ void ftSk_SpecialSEnd_Anim(HSD_GObj* gobj);\n/* 111BF0 */ void ftSk_SpecialSEnd_IASA(HSD_GObj* gobj);\n/* 111BF8 */ void ftSk_SpecialSEnd_Phys(HSD_GObj* gobj);\n/* 111C38 */ void ftSk_SpecialSEnd_Coll(HSD_GObj* gobj);\n/* 111CB0 */ void ftSk_SpecialS_80111CB0(HSD_GObj* gobj);\n/* 111D54 */ void ftSk_SpecialS_80111D54(HSD_GObj* gobj);\n/* 111DF8 */ void ftSk_SpecialS_80111DF8(HSD_GObj* gobj);\n/* 111EB4 */ void ftSk_SpecialS_80111EB4(HSD_GObj* gobj);\n/* 111F70 */ bool ftSk_SpecialS_80111F70(HSD_GObj* gobj);\n/* 111FA0 */ int ftSk_SpecialS_80111FA0(HSD_GObj* gobj);\n/* 12A1D8 */ void ftSs_SpecialS_Enter(HSD_GObj* gobj);\n/* 12A2AC */ void ftSs_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 12A380 */ void ftSs_SpecialS_Anim(HSD_GObj* gobj);\n/* 12A3BC */ void ftSs_SpecialAirS_Anim(HSD_GObj* gobj);\n/* 12A3F8 */ void ftSs_SpecialS_IASA(HSD_GObj* gobj);\n/* 12A3FC */ void ftSs_SpecialAirS_IASA(HSD_GObj* gobj);\n/* 12A400 */ void ftSs_SpecialS_Phys(HSD_GObj* gobj);\n/* 12A420 */ void ftSs_SpecialAirS_Phys(HSD_GObj* gobj);\n/* 12A468 */ void ftSs_SpecialS_Coll(HSD_GObj* gobj);\n/* 12A4A4 */ void ftSs_SpecialAirS_Coll(HSD_GObj* gobj);\n/* 12A4E0 */ void ftSs_SpecialSSmash_Anim(HSD_GObj* gobj);\n/* 12A51C */ void ftSs_SpecialAirSSmash_Anim(HSD_GObj* gobj);\n/* 12A558 */ void ftSs_SpecialSSmash_IASA(HSD_GObj* gobj);\n/* 12A55C */ void ftSs_SpecialAirSSmash_IASA(HSD_GObj* gobj);\n/* 12A560 */ void ftSs_SpecialSSmash_Phys(HSD_GObj* gobj);\n/* 12A580 */ void ftSs_SpecialAirSSmash_Phys(HSD_GObj* gobj);\n/* 12A5C8 */ void ftSs_SpecialSSmash_Coll(HSD_GObj* gobj);\n/* 12A604 */ void ftSs_SpecialAirSSmash_Coll(HSD_GObj* gobj);\n/* 12A640 */ void ftSs_SpecialS_8012A640(HSD_GObj* gobj);\n#define MELEE_FT_CHARA_FTSAMUS_INLINES_H\nstatic inline void ftSamus_updateDamageDeathCBs(HSD_GObj* gobj)\n{\n    Fighter* fp = ((Fighter*) HSD_GObjGetUserData((HSD_GObj*) gobj));\n    fp->take_dmg_cb = ftSs_Init_80128428;\n    fp->death2_cb = ftSs_Init_80128428;\n}\n//// only used in ftsamus3 so far (maybe move to there)\nstatic inline void ftSamus_SetAttrx2334(HSD_GObj* gobj)\n{\n    Fighter* fp = gobj->user_data;\n    fp->fv.ss.x2234 = 0;\n}\nstatic inline void ftSamus_destroyAllEF(HSD_GObj* gobj)\n{\n    if (gobj) {\n        Fighter* fp = ((Fighter*) HSD_GObjGetUserData((HSD_GObj*) gobj));\n        if (fp->fv.ss.x2234) {\n            efLib_DestroyAll(gobj);\n            fp->fv.ss.x2234 = 0;\n        }\n    }\n}\nstatic inline void ftSamus_UnkAndDestroyAllEF(HSD_GObj* gobj)\n{\n    if (gobj != ((any_t) 0)) {\n        Fighter* fp = gobj->user_data;\n        Item_GObj* x222C = fp->fv.ss.x222C;\n        if (x222C != ((any_t) 0)) {\n            it_802B5974(x222C);\n            fp->fv.ss.x222C = ((any_t) 0);\n        }\n        ftSamus_destroyAllEF(gobj);\n    }\n}\n#define MELEE_FT_CHARA_FTSANDBAG_FORWARD_H\ntypedef enum ftSb_MotionState {\n    ftSb_MS_WaitReverse = ftCo_MS_Count,\n    ftSb_MS_Count,\n    ftSb_MS_SelfCount = ftSb_MS_Count - ftCo_MS_Count,\n} ftSb_MotionState;\ntypedef enum ftSb_Submotion {\n    ftSb_SM_WaitReverse = ftCo_SM_Count,\n    ftSb_SM_Count,\n    ftSb_SM_SelfCount = ftSb_SM_Count - ftCo_SM_Count,\n} ftSb_Submotion;\n#define GALE01_14F9CC\n/* 14F9CC */ void ftSb_Init_OnDeath(HSD_GObj* gobj);\n/* 14F9D0 */ void ftSb_Init_OnLoad(HSD_GObj* gobj);\n/* 14FA30 */ void ftSb_Init_8014FA30(Fighter* fp);\n/* 14FB78 */ void ftSb_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 14FB9C */ void ftSb_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 14FBA0 */ void ftSb_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 14FBA4 */ void ftSb_Init_8014FBA4(HSD_GObj* gobj);\n/* 14FC20 */ void ftSb_WaitReverse_Anim(HSD_GObj* gobj);\n/* 14FC24 */ void ftSb_WaitReverse_IASA(HSD_GObj* gobj);\n/* 14FC28 */ void ftSb_WaitReverse_Phys(HSD_GObj* gobj);\n/* 14FC48 */ void ftSb_WaitReverse_Coll(HSD_GObj* gobj);\n/* 3D3998 */ extern MotionState ftSb_Init_MotionStateTable[ftSb_MS_SelfCount];\n/* 3D39B8 */ extern char ftSb_Init_DatFilename[];\n/* 3D39C4 */ extern char ftSb_Init_DataName[];\n/* 3D3A18 */ extern char ftSb_Init_AnimDatFilename[];\n/* 3D3A24 */ extern Fighter_CostumeStrings ftSb_Init_CostumeStrings[];\n#define MELEE_FT_CHARA_FTSEAK_FORWARD_H\nstatic MotionFlags const ftSk_MF_Special =\n    Ft_MF_SkipModel | Ft_MF_SkipItemVis | Ft_MF_UnkUpdatePhys |\n    Ft_MF_FreezeState;\nstatic MotionFlags const ftSk_MF_SpecialS =\n    ftSk_MF_Special | Ft_MF_KeepGfx;\nstatic MotionFlags const ftSk_MF_SpecialLw =\n    ftSk_MF_Special | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftSk_MF_SpecialN =\n    ftSk_MF_Special | Ft_MF_KeepFastFall | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftSk_MF_SpecialHi =\n    ftSk_MF_SpecialS | Ft_MF_KeepFastFall | Ft_MF_KeepSfx;\nstatic MotionFlags const ftSk_MF_SpecialAirS =\n    ftSk_MF_SpecialS | Ft_MF_SkipParasol;\nstatic MotionFlags const ftSk_MF_SpecialAirLw =\n    ftSk_MF_SpecialLw | Ft_MF_SkipParasol;\nstatic MotionFlags const ftSk_MF_SpecialAirN =\n    ftSk_MF_SpecialN | Ft_MF_SkipParasol;\nstatic MotionFlags const ftSk_MF_SpecialAirHi =\n    ftSk_MF_SpecialHi | Ft_MF_SkipParasol;\nstatic MotionFlags const ftSk_MF_SpecialSLoop =\n    ftSk_MF_SpecialS | Ft_MF_Unk19;\nstatic MotionFlags const ftSk_MF_SpecialNLoop =\n    ftSk_MF_SpecialN | Ft_MF_Unk19;\nstatic MotionFlags const ftSk_MF_SpecialAirSLoop =\n    ftSk_MF_SpecialSLoop | Ft_MF_SkipParasol;\nstatic MotionFlags const ftSk_MF_SpecialAirNLoop =\n    ftSk_MF_SpecialNLoop | Ft_MF_SkipParasol;\ntypedef enum ftSeak_MotionState {\n    ftSk_MS_SpecialNStart = ftCo_MS_Count,\n    ftSk_MS_SpecialNLoop,\n    ftSk_MS_SpecialNCancel,\n    ftSk_MS_SpecialNEnd,\n    ftSk_MS_SpecialAirNStart,\n    ftSk_MS_SpecialAirNLoop,\n    ftSk_MS_SpecialAirNCancel,\n    ftSk_MS_SpecialAirNEnd,\n    ftSk_MS_SpecialSStart,\n    ftSk_MS_SpecialS,\n    ftSk_MS_SpecialSEnd,\n    ftSk_MS_SpecialAirSStart,\n    ftSk_MS_SpecialAirS,\n    ftSk_MS_SpecialAirSEnd,\n    ftSk_MS_SpecialHiStart_0,\n    ftSk_MS_SpecialHiStart_1,\n    ftSk_MS_SpecialHi,\n    ftSk_MS_SpecialAirHiStart_0,\n    ftSk_MS_SpecialAirHiStart_1,\n    ftSk_MS_SpecialAirHi,\n    ftSk_MS_SpecialLw,\n    ftSk_MS_SpecialLw2,\n    ftSk_MS_SpecialAirLw,\n    ftSk_MS_SpecialAirLw2,\n    ftSk_MS_Count,\n    ftSk_MS_SelfCount = ftSk_MS_Count - ftCo_MS_Count,\n} ftSeak_MotionState;\ntypedef enum ftSk_Submotion {\n    ftSk_SM_SpecialNStart = ftCo_SM_Count,\n    ftSk_SM_SpecialNLoop,\n    ftSk_SM_SpecialNCancel,\n    ftSk_SM_SpecialNEnd,\n    ftSk_SM_SpecialAirNStart,\n    ftSk_SM_SpecialAirNLoop,\n    ftSk_SM_SpecialAirNCancel,\n    ftSk_SM_SpecialAirNEnd,\n    ftSk_SM_SpecialSStart,\n    ftSk_SM_SpecialSEnd,\n    ftSk_SM_SpecialS,\n    ftSk_SM_SpecialAirSStart,\n    ftSk_SM_SpecialAirSEnd,\n    ftSk_SM_SpecialAirS,\n    ftSk_SM_SpecialHiStart,\n    ftSk_SM_SpecialHi,\n    ftSk_SM_SpecialAirHiStart,\n    ftSk_SM_SpecialAirHi,\n    ftSk_SM_SpecialLw,\n    ftSk_SM_SpecialLw2,\n    ftSk_SM_SpecialAirLw,\n    ftSk_SM_SpecialAirLw2,\n    ftSk_SM_Count,\n    ftSk_SM_SelfCount = ftSk_SM_Count - ftCo_SM_Count,\n} ftSk_Submotion;\n#define GALE01_110094\n/* 110094 */ void ftSk_Init_OnDeath(HSD_GObj* gobj);\n/* 1100EC */ void ftSk_Init_OnLoad(HSD_GObj* gobj);\n/* 110198 */ void ftSk_Init_80110198(HSD_GObj* gobj);\n/* 1101CC */ void ftSk_Init_UnkMotionStates4(HSD_GObj* gobj);\n/* 110204 */ void ftSk_Init_OnItemPickup(HSD_GObj* gobj, bool flag);\n/* 1102E4 */ void ftSk_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 11032C */ void ftSk_Init_OnItemVisible(HSD_GObj* gobj);\n/* 110374 */ void ftSk_Init_OnItemDrop(HSD_GObj* gobj, bool flag);\n/* 1103C8 */ void ftSk_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 110408 */ void ftSk_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 11044C */ void ftSk_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 3CC060 */ extern MotionState ftSk_Init_MotionStateTable[ftSk_MS_SelfCount];\n/* 3CC360 */ extern char ftSk_Init_DatFilename[];\n/* 3CC36C */ extern char ftSk_Init_DataName[];\n/* 3CC4CC */ extern char ftSk_Init_AnimDatFilename[];\n/* 3CC548 */ extern Fighter_DemoStrings ftSk_Init_DemoMotionFilenames;\n/* 3CC558 */ extern Fighter_CostumeStrings ftSk_Init_CostumeStrings[];\n#define GALE01_1130D0\n/* 1130D0 */ void ftSk_SpecialHi_Enter(HSD_GObj* gobj);\n/* 11312C */ void ftSk_SpecialAirHi_Enter(HSD_GObj* gobj);\n/* 113194 */ void ftSk_SpecialHiStart_0_Anim(HSD_GObj* gobj);\n/* 1131D0 */ void ftSk_SpecialAirHiStart_0_Anim(HSD_GObj* gobj);\n/* 11320C */ void ftSk_SpecialHiStart_0_IASA(HSD_GObj* gobj);\n/* 113210 */ void ftSk_SpecialAirHiStart_0_IASA(HSD_GObj* gobj);\n/* 113214 */ void ftSk_SpecialHiStart_0_Phys(HSD_GObj* gobj);\n/* 113234 */ void ftSk_SpecialAirHiStart_0_Phys(HSD_GObj* gobj);\n/* 113278 */ void ftSk_SpecialHiStart_0_Coll(HSD_GObj* gobj);\n/* 1132B4 */ void ftSk_SpecialAirHiStart_0_Coll(HSD_GObj* gobj);\n/* 1133FC */ void ftSk_SpecialHiStart_1_Anim(HSD_GObj* gobj);\n/* 113438 */ void ftSk_SpecialAirHiStart_1_Anim(HSD_GObj* gobj);\n/* 113474 */ void ftSk_SpecialHiStart_1_IASA(HSD_GObj* gobj);\n/* 113478 */ void ftSk_SpecialAirHiStart_1_IASA(HSD_GObj* gobj);\n/* 11347C */ void ftSk_SpecialHiStart_1_Phys(HSD_GObj* gobj);\n/* 11349C */ void ftSk_SpecialAirHiStart_1_Phys(HSD_GObj* gobj);\n/* 1134A0 */ void ftSk_SpecialHiStart_1_Coll(HSD_GObj* gobj);\n/* 113540 */ void ftSk_SpecialAirHiStart_1_Coll(HSD_GObj* gobj);\n/* 113C40 */ void ftSk_SpecialHi_Anim(HSD_GObj* gobj);\n/* 113C7C */ void ftSk_SpecialAirHi_Anim(HSD_GObj* gobj);\n/* 113CDC */ void ftSk_SpecialHi_IASA(HSD_GObj* gobj);\n/* 113CE0 */ void ftSk_SpecialAirHi_IASA(HSD_GObj* gobj);\n/* 113CE4 */ void ftSk_SpecialHi_Phys(HSD_GObj* gobj);\n/* 113D04 */ void ftSk_SpecialAirHi_Phys(HSD_GObj* gobj);\n/* 113D80 */ void ftSk_SpecialHi_Coll(HSD_GObj* gobj);\n/* 113DBC */ void ftSk_SpecialAirHi_Coll(HSD_GObj* gobj);\n#define GALE01_11108C\n/* 1142E8 */ void ftSk_SpecialLw_Anim(HSD_GObj* gobj);\n/* 1143D4 */ void ftSk_SpecialLw_Coll(HSD_GObj* gobj);\n/* 114524 */ void ftSk_SpecialLw2_Anim(HSD_GObj* gobj);\n/* 114608 */ void ftSk_SpecialLw2_Coll(HSD_GObj* gobj);\n/* 11459C */ void ftSk_SpecialLw2_IASA(HSD_GObj* gobj);\n/* 1145A4 */ void ftSk_SpecialLw2_Phys(HSD_GObj* gobj);\n/* 114368 */ void ftSk_SpecialLw_IASA(HSD_GObj* gobj);\n/* 114370 */ void ftSk_SpecialLw_Phys(HSD_GObj* gobj);\n/* 11108C */ void ftSk_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 111308 */ void ftSk_SpecialAirSStart_Anim(HSD_GObj* gobj);\n/* 111348 */ void ftSk_SpecialAirSStart_IASA(HSD_GObj* gobj);\n/* 11136C */ void ftSk_SpecialAirSStart_Phys(HSD_GObj* gobj);\n/* 111404 */ void ftSk_SpecialAirSStart_Coll(HSD_GObj* gobj);\n/* 111648 */ void ftSk_SpecialAirS_Anim(HSD_GObj* gobj);\n/* 111740 */ void ftSk_SpecialAirS_IASA(HSD_GObj* gobj);\n/* 111798 */ void ftSk_SpecialAirS_Phys(HSD_GObj* gobj);\n/* 1117F4 */ void ftSk_SpecialAirS_Coll(HSD_GObj* gobj);\n/* 111B1C */ void ftSk_SpecialAirSEnd_Anim(HSD_GObj* gobj);\n/* 111BF4 */ void ftSk_SpecialAirSEnd_IASA(HSD_GObj* gobj);\n/* 111C18 */ void ftSk_SpecialAirSEnd_Phys(HSD_GObj* gobj);\n/* 111C74 */ void ftSk_SpecialAirSEnd_Coll(HSD_GObj* gobj);\n/* 114160 */ void ftSk_SpecialLw_Enter(HSD_GObj* gobj);\n/* 114224 */ void ftSk_SpecialAirLw_Enter(HSD_GObj* gobj);\n/* 114328 */ void ftSk_SpecialAirLw_Anim(HSD_GObj* gobj);\n/* 11436C */ void ftSk_SpecialAirLw_IASA(HSD_GObj* gobj);\n/* 114390 */ void ftSk_SpecialAirLw_Phys(HSD_GObj* gobj);\n/* 114410 */ void ftSk_SpecialAirLw_Coll(HSD_GObj* gobj);\n/* 11444C */ void ftSk_SpecialLw_80114758(HSD_GObj* gobj);\n/* 114560 */ void ftSk_SpecialAirLw2_Anim(HSD_GObj* gobj);\n/* 1145A0 */ void ftSk_SpecialAirLw2_IASA(HSD_GObj* gobj);\n/* 1145C4 */ void ftSk_SpecialAirLw2_Phys(HSD_GObj* gobj);\n/* 114644 */ void ftSk_SpecialAirLw2_Coll(HSD_GObj* gobj);\n#define GALE01_1120E8\n/* 1120E8 */ void ftSk_SpecialN_Enter(HSD_GObj* gobj);\n/* 112198 */ void ftSk_SpecialAirN_Enter(HSD_GObj* gobj);\n/* 112248 */ void ftSk_SpecialNStart_Anim(HSD_GObj* gobj);\n/* 1122D8 */ void ftSk_SpecialNLoop_Anim(HSD_GObj* gobj);\n/* 112384 */ void ftSk_SpecialNCancel_Anim(HSD_GObj* gobj);\n/* 1123CC */ void ftSk_SpecialNEnd_Anim(HSD_GObj* gobj);\n/* 112450 */ void ftSk_SpecialAirNStart_Anim(HSD_GObj* gobj);\n/* 1124E0 */ void ftSk_SpecialAirNLoop_Anim(HSD_GObj* gobj);\n/* 11258C */ void ftSk_SpecialAirNCancel_Anim(HSD_GObj* gobj);\n/* 11260C */ void ftSk_SpecialAirNEnd_Anim(HSD_GObj* gobj);\n/* 1126C8 */ void ftSk_SpecialNStart_IASA(HSD_GObj* gobj);\n/* 1126CC */ void ftSk_SpecialNLoop_IASA(HSD_GObj* gobj);\n/* 112798 */ void ftSk_SpecialNCancel_IASA(HSD_GObj* gobj);\n/* 11279C */ void ftSk_SpecialNEnd_IASA(HSD_GObj* gobj);\n/* 1127A0 */ void ftSk_SpecialAirNStart_IASA(HSD_GObj* gobj);\n/* 1127A4 */ void ftSk_SpecialAirNLoop_IASA(HSD_GObj* gobj);\n/* 112870 */ void ftSk_SpecialAirNCancel_IASA(HSD_GObj* gobj);\n/* 112874 */ void ftSk_SpecialAirNEnd_IASA(HSD_GObj* gobj);\n/* 112878 */ void ftSk_SpecialNStart_Phys(HSD_GObj* gobj);\n/* 112898 */ void ftSk_SpecialNLoop_Phys(HSD_GObj* gobj);\n/* 1128B8 */ void ftSk_SpecialNCancel_Phys(HSD_GObj* gobj);\n/* 1128D8 */ void ftSk_SpecialNEnd_Phys(HSD_GObj* gobj);\n/* 1128F8 */ void ftSk_SpecialAirNStart_Phys(HSD_GObj* gobj);\n/* 112918 */ void ftSk_SpecialAirNLoop_Phys(HSD_GObj* gobj);\n/* 112938 */ void ftSk_SpecialAirNCancel_Phys(HSD_GObj* gobj);\n/* 112958 */ void ftSk_SpecialAirNEnd_Phys(HSD_GObj* gobj);\n/* 112978 */ void ftSk_SpecialNStart_Coll(HSD_GObj* gobj);\n/* 1129F8 */ void ftSk_SpecialNLoop_Coll(HSD_GObj* gobj);\n/* 112A78 */ void ftSk_SpecialNCancel_Coll(HSD_GObj* gobj);\n/* 112B00 */ void ftSk_SpecialNEnd_Coll(HSD_GObj* gobj);\n/* 112B98 */ void ftSk_SpecialAirNStart_Coll(HSD_GObj* gobj);\n/* 112C18 */ void ftSk_SpecialAirNLoop_Coll(HSD_GObj* gobj);\n/* 112C98 */ void ftSk_SpecialAirNCancel_Coll(HSD_GObj* gobj);\n/* 112CE4 */ void ftSk_SpecialAirNEnd_Coll(HSD_GObj* gobj);\n#define MELEE_FT_CHARA_FTSEAK_FTSEAK_SPECIALS_H\nvoid ftSk_SpecialS_80110490(Fighter* fp);\nvoid ftSk_SpecialS_80110610(HSD_GObj* gobj, s32 arg1, f32 arg8);\nvoid ftSk_SpecialS_80110788(HSD_GObj* gobj);\nvoid ftSk_SpecialS_8011097C(HSD_GObj* gobj);\nvoid ftSk_SpecialS_UpdateHitboxes(HSD_GObj* gobj, Vec3* new_position,\n                                  s32 hitbox_id);\nvoid ftSk_SpecialS_ZeroHitboxPositions(HSD_GObj* gobj);\nvoid ftSk_SpecialS_80110AEC(HSD_GObj* gobj);\nvoid ftSk_SpecialS_80110BCC(HSD_GObj* gobj);\nvoid ftSk_SpecialS_80110E4C(HSD_GObj* gobj);\nvoid ftSk_SpecialS_CheckAndDestroyChain(HSD_GObj* gobj);\nvoid ftSk_SpecialS_80110EE8(HSD_GObj* gobj);\nvoid ftSk_SpecialS_ChainSomething(HSD_GObj* gobj);\nf32 ftSk_SpecialS_80110F58(HSD_GObj* gobj);\nf32 ftSk_SpecialS_80110F64(HSD_GObj* gobj);\nvoid ftSk_SpecialS_80110F70(HSD_GObj* gobj);\nvoid ftSk_SpecialS_Enter(HSD_GObj* gobj);\nvoid ftSk_SpecialAirS_Enter(HSD_GObj* gobj);\nbool ftSk_SpecialS_CheckInitChain(HSD_GObj* gobj);\nvoid ftSk_SpecialSStart_Anim(HSD_GObj* gobj);\nvoid ftSk_SpecialAirSStart_Anim(HSD_GObj* gobj);\nvoid ftSk_SpecialSStart_IASA(HSD_GObj* gobj);\nvoid ftSk_SpecialAirSStart_IASA(HSD_GObj* gobj);\nvoid ftSk_SpecialSStart_Phys(HSD_GObj* gobj);\nvoid ftSk_SpecialAirSStart_Phys(HSD_GObj* gobj);\nvoid ftSk_SpecialSStart_Coll(HSD_GObj* gobj);\nvoid ftSk_SpecialAirSStart_Coll(HSD_GObj* gobj);\nvoid ftSk_SpecialS_80111440(HSD_GObj* gobj);\nvoid ftSk_SpecialS_801114E4(HSD_GObj* gobj);\nvoid ftSk_SpecialS_Anim(HSD_GObj* gobj);\nvoid ftSk_SpecialAirS_Anim(HSD_GObj* gobj);\nvoid ftSk_SpecialS_IASA(HSD_GObj* gobj);\nvoid ftSk_SpecialAirS_IASA(HSD_GObj* gobj);\nvoid ftSk_SpecialS_Phys(HSD_GObj* gobj);\nvoid ftSk_SpecialAirS_Phys(HSD_GObj* gobj);\nvoid ftSk_SpecialS_Coll(HSD_GObj* gobj);\nvoid ftSk_SpecialAirS_Coll(HSD_GObj* gobj);\nvoid ftSk_SpecialS_80111830(HSD_GObj* gobj);\nvoid ftSk_SpecialS_80111988(HSD_GObj* gobj);\nvoid ftSk_SpecialSEnd_Anim(HSD_GObj* gobj);\nvoid ftSk_SpecialAirSEnd_Anim(HSD_GObj* gobj);\nvoid ftSk_SpecialSEnd_IASA(HSD_GObj* gobj);\nvoid ftSk_SpecialAirSEnd_IASA(HSD_GObj* gobj);\nvoid ftSk_SpecialSEnd_Phys(HSD_GObj* gobj);\nvoid ftSk_SpecialAirSEnd_Phys(HSD_GObj* gobj);\nvoid ftSk_SpecialSEnd_Coll(HSD_GObj* gobj);\nvoid ftSk_SpecialAirSEnd_Coll(HSD_GObj* gobj);\nvoid ftSk_SpecialS_80111CB0(HSD_GObj* gobj);\nvoid ftSk_SpecialS_80111D54(HSD_GObj* gobj);\nvoid ftSk_SpecialS_80111DF8(HSD_GObj* gobj);\nvoid ftSk_SpecialS_80111EB4(HSD_GObj* gobj);\nbool ftSk_SpecialS_80111F70(HSD_GObj* gobj);\nint ftSk_SpecialS_80111FA0(HSD_GObj* gobj);\n#define MELEE_FT_CHARA_FTYOSHI_FORWARD_H\nstruct S_UNK_YOSHI1;\ntypedef struct HSD_GObj ftYs_GObj;\n/// @todo Fix names\nstatic MotionFlags const ftYs_MF_Special =\n    Ft_MF_SkipModel | Ft_MF_SkipItemVis | Ft_MF_UnkUpdatePhys |\n    Ft_MF_FreezeState;\nstatic MotionFlags const ftYs_MF_MS_341 = Ft_MF_UnkUpdatePhys;\nstatic MotionFlags const ftYs_MF_ShieldStart =\n    Ft_MF_KeepFastFall | Ft_MF_KeepGfx | Ft_MF_SkipModel | Ft_MF_SkipAnimVel |\n    Ft_MF_Unk06 | Ft_MF_SkipColAnim | Ft_MF_UnkUpdatePhys;\nstatic MotionFlags const ftYs_MF_ShieldHold =\n    Ft_MF_Unk19 | Ft_MF_UnkUpdatePhys;\nstatic MotionFlags const ftYs_MF_SpecialN =\n    ftYs_MF_Special | Ft_MF_KeepFastFall;\nstatic MotionFlags const ftYs_MF_SpecialAirHi =\n    ftYs_MF_SpecialN | Ft_MF_KeepGfx | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftYs_MF_UnkBase =\n    ftYs_MF_Special | Ft_MF_KeepSfx;\nstatic MotionFlags const ftYs_MF_SpecialAirS =\n    ftYs_MF_UnkBase | Ft_MF_KeepGfx;\nstatic MotionFlags const ftYs_MF_MS_366 =\n    ftYs_MF_UnkBase | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftYs_MF_SpecialS =\n    ftYs_MF_SpecialN | Ft_MF_SkipParasol;\nstatic MotionFlags const ftYs_MF_MS_365 =\n    ftYs_MF_SpecialAirHi | Ft_MF_SkipParasol;\nstatic MotionFlags const ftYs_MF_SpecialHi =\n    ftYs_MF_SpecialAirS | Ft_MF_SkipParasol;\nstatic MotionFlags const ftYs_MF_MS_368 =\n    ftYs_MF_MS_366 | Ft_MF_SkipParasol;\ntypedef enum ftYoshi_MotionState {\n    ftYs_MS_GuardOn_0 = ftCo_MS_Count,\n    ftYs_MS_GuardHold,\n    ftYs_MS_GuardOff,\n    ftYs_MS_GuardDamage,\n    ftYs_MS_GuardOn_1,\n    ftYs_MS_SpecialN1,\n    ftYs_MS_SpecialN1_0,\n    ftYs_MS_SpecialN1_1,\n    ftYs_MS_SpecialN2_0,\n    ftYs_MS_SpecialN2_1,\n    ftYs_MS_SpecialAirN1_0,\n    ftYs_MS_SpecialAirN1_1,\n    ftYs_MS_SpecialAirN1_2,\n    ftYs_MS_SpecialAirN2_0,\n    ftYs_MS_SpecialAirN2_1,\n    ftYs_MS_SpecialAirSStart_0,\n    ftYs_MS_SpecialAirSLoop_0,\n    ftYs_MS_SpecialAirSLoop_1,\n    ftYs_MS_SpecialAirSEnd,\n    ftYs_MS_SpecialAirSStart_1,\n    ftYs_MS_SpecialAirSLoop_2,\n    ftYs_MS_SpecialAirSLoop_3,\n    ftYs_MS_SpecialAirSLanding,\n    ftYs_MS_SpecialHi,\n    ftYs_MS_SpecialAirHi,\n    ftYs_MS_SpecialLw,\n    ftYs_MS_SpecialLwLanding,\n    ftYs_MS_SpecialAirLw,\n    ftYs_MS_Count,\n    ftYs_MS_SelfCount = ftYs_MS_Count - ftCo_MS_Count,\n} ftYoshi_MotionState;\ntypedef enum ftYs_Submotion {\n    ftYs_SM_SpecialN1 = ftCo_SM_Count,\n    ftYs_SM_SpecialN1_0,\n    ftYs_SM_SpecialN2_1,\n    ftYs_SM_SpecialAirN1_0,\n    ftYs_SM_SpecialAirN1_1,\n    ftYs_SM_SpecialAirN2,\n    ftYs_SM_SpecialSStart,\n    ftYs_SM_SpecialSLoop_0,\n    ftYs_SM_SpecialSLoop_1,\n    ftYs_SM_SpecialSEnd,\n    ftYs_SM_SpecialAirSStart,\n    ftYs_SM_SpecialAirSLoop_0,\n    ftYs_SM_SpecialAirSLoop_1,\n    ftYs_SM_SpecialAirSEnd,\n    ftYs_SM_SpecialHi,\n    ftYs_SM_SpecialAirHi,\n    ftYs_SM_SpecialLw,\n    ftYs_SM_SpecialLwLanding,\n    ftYs_SM_SpecialAirLw,\n    ftYs_SM_Count,\n    ftYs_SM_SelfCount = ftYs_SM_Count - ftCo_SM_Count,\n} ftYs_Submotion;\n#define MELEE_FT_CHARA_FTYOSHI_FTYS_SPECIALLW_H\n/* 12E6F8 */ void ftYs_SpecialLw_Enter(HSD_GObj* gobj);\n/* 12E78C */ void ftYs_SpecialAirLw_Enter(HSD_GObj* gobj);\n#define GALE01_12C030\n/* 12C030 */ void ftYs_GuardOn_0_Anim(ftYs_GObj* gobj);\n/* 12C114 */ void ftYs_GuardOn_0_IASA(ftYs_GObj* gobj);\n/* 12C194 */ void ftYs_GuardOn_0_Phys(ftYs_GObj* gobj);\n/* 12C1B4 */ void ftYs_GuardOn_0_Coll(ftYs_GObj* gobj);\n/* 12C1D4 */ void ftYs_Shield_8012C1D4(ftYs_GObj* gobj);\n/* 12C2F4 */ void ftYs_GuardHold_Anim(ftYs_GObj* gobj);\n/* 12C3EC */ void ftYs_GuardHold_IASA(ftYs_GObj* gobj);\n/* 12C45C */ void ftYs_GuardHold_Phys(ftYs_GObj* gobj);\n/* 12C47C */ void ftYs_GuardHold_Coll(ftYs_GObj* gobj);\n/* 12C49C */ void ftYs_Shield_8012C49C(ftYs_GObj* gobj);\n/* 12C54C */ void ftYs_GuardOff_Anim(ftYs_GObj* gobj);\n/* 12C59C */ void ftYs_GuardOff_IASA(ftYs_GObj* gobj);\n/* 12C5C0 */ void ftYs_GuardOff_Phys(ftYs_GObj* gobj);\n/* 12C5E0 */ void ftYs_GuardOff_Coll(ftYs_GObj* gobj);\n/* 12C600 */ void ftYs_Shield_8012C600(ftYs_GObj* gobj, bool);\n/* 12C7A4 */ void ftYs_GuardDamage_Anim(ftYs_GObj* gobj);\n/* 12C80C */ void ftYs_GuardDamage_IASA(ftYs_GObj* gobj);\n/* 12C810 */ void ftYs_GuardDamage_Phys(ftYs_GObj* gobj);\n/* 12C830 */ void ftYs_GuardDamage_Coll(ftYs_GObj* gobj);\n/* 12C850 */ void ftYs_Shield_8012C850(ftYs_GObj* gobj);\n/* 12C914 */ void ftYs_Shield_8012C914(ftYs_GObj* gobj);\n/* 12CACC */ void ftYs_Shield_8012CACC(ftYs_GObj* gobj);\n/* 12CAD0 */ void ftYs_GuardOn_1_Anim(ftYs_GObj* gobj);\n/* 12CBBC */ void ftYs_GuardOn_1_IASA(ftYs_GObj* gobj);\n/* 12CBDC */ void ftYs_GuardOn_1_Phys(ftYs_GObj* gobj);\n/* 12CBFC */ void ftYs_GuardOn_1_Coll(ftYs_GObj* gobj);\n/* 12CC1C */ bool ftYs_Shield_8012CC1C(ftYs_GObj* gobj);\n/* 12CC6C */ void ftYs_Shield_8012CC6C(ftYs_GObj* gobj);\n/* 12CC94 */ void ftYs_Shield_8012CC94(ftYs_GObj* gobj, Vec3* out);\n/// @returns #Fighter::facing_dir\n/* 12CCC4 */ float ftYs_Shield_8012CCC4(ftYs_GObj* gobj);\n/// @returns #Fighter::dmg.x182c_behavior\n/* 12CCD0 */ f32 ftYs_Shield_8012CCD0(ftYs_GObj* gobj);\n/* 12CCE0 */ f32 ftYs_Shield_8012CCE0(ftYs_GObj* gobj);\n/* 12CCF0 */ f32 ftYs_Shield_8012CCF0(ftYs_GObj* gobj);\n/* 12CD00 */ f32 ftYs_Shield_8012CD00(ftYs_GObj* gobj);\n/* 3CEA98 */ extern char ftYs_Init_DatFilename[];\n/* 3CEAA4 */ extern char ftYs_Init_DataName[];\n/* 3CEC70 */ extern char ftYs_Init_AnimDatFilename[];\n/* 3CECEC */ extern Fighter_DemoStrings ftYs_Init_DemoMotionFilenames;\n/* 3CECFC */ extern Fighter_CostumeStrings ftYs_Init_CostumeStrings[];\n#define MELEE_FT_CHARA_FTYOSHI_FTYOSHI1_H\n/* 12B6E8 */ void ftYs_Init_8012B6E8(Fighter* fp,\n                                     struct S_UNK_YOSHI1* unk_struct_arg);\n/* 12B804 */ void ftYs_Init_8012B804(Fighter* fp,\n                                     struct S_UNK_YOSHI1* unk_struct_arg,\n                                     f32 start_frame);\n/* 12B8A4 */ void ftYs_Init_8012B8A4(HSD_GObj* gobj);\n/* 12B918 */ void ftYs_Init_8012B918(HSD_GObj* gobj);\n/* 12B960 */ void ftYs_Init_OnDeath(HSD_GObj* gobj);\n/* 12B99C */ void ftYs_Init_OnLoad(HSD_GObj* gobj);\n/* 12BA8C */ void ftYs_Init_8012BA8C(HSD_GObj* gobj);\n/* 12BAC0 */ f32 ftYs_Init_8012BAC0(Fighter* fp);\n/* 12BACC */ void ftYs_Init_OnItemPickup(HSD_GObj* gobj, bool flag);\n/* 12BBAC */ void ftYs_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 12BBF4 */ void ftYs_Init_OnItemVisible(HSD_GObj* gobj);\n/* 12BC3C */ void ftYs_Init_OnItemDrop(HSD_GObj* gobj, bool bool1);\n/* 12BC90 */ void ftYs_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 12BCC8 */ void ftYs_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 12BD34 */ void ftYs_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 12BDA0 */ void ftYs_Init_8012BDA0(ftCo_GObj* gobj);\n/* 12BE3C */ void ftYs_Init_8012BE3C(HSD_GObj* gobj);\n/* 12BECC */ void ftYs_Init_8012BECC(ftCo_GObj* gobj);\n/* 3CE6D0 */ extern MotionState ftYs_Init_MotionStateTable[ftYs_MS_SelfCount];\n#define GALE01_12CDE8\n/* 12CD10 */ float ftYs_SpecialN_8012CD10(ftYs_GObj* gobj);\n/* 12CD28 */ float ftYs_SpecialN_8012CD28(void);\n/* 12CD40 */ float ftYs_SpecialN_8012CD40(void);\n/* 12CD58 */ float ftYs_SpecialN_8012CD58(void);\n/* 12CD70 */ bool ftYs_SpecialN_8012CD70(void);\n/* 12CD88 */ void ftYs_SpecialN_8012CD88(Vec3*);\n/* 12CDB4 */ float ftYs_SpecialN_8012CDB4(ftYs_GObj* gobj);\n/* 12CDD4 */ HSD_Joint* ftYs_SpecialN_8012CDD4(ftYs_GObj* gobj);\n/* 12CDE8 */ void ftYs_SpecialN_Enter(ftYs_GObj* gobj);\n/* 12CE64 */ void ftYs_SpecialAirN_Enter(ftYs_GObj* gobj);\n/* 12D550 */ void ftYs_SpecialN1_Anim(ftYs_GObj* gobj);\n/* 12D58C */ void ftYs_SpecialAirN1_0_Anim(ftYs_GObj* gobj);\n/* 12D5C8 */ void ftYs_SpecialN1_1_Anim(ftYs_GObj* gobj);\n/* 12D658 */ void ftYs_SpecialN1_0_Anim(ftYs_GObj* gobj);\n/* 12D6D0 */ void ftYs_SpecialAirN1_2_Anim(ftYs_GObj* gobj);\n/* 12D760 */ void ftYs_SpecialAirN1_1_Anim(ftYs_GObj* gobj);\n/* 12D7D8 */ void ftYs_SpecialN2_1_Anim(ftYs_GObj* gobj);\n/* 12D948 */ void ftYs_SpecialN2_0_Anim(ftYs_GObj* gobj);\n/* 12DA04 */ void ftYs_SpecialAirN2_1_Anim(ftYs_GObj* gobj);\n/* 12DB74 */ void ftYs_SpecialAirN2_0_Anim(ftYs_GObj* gobj);\n/* 12DC30 */ void ftYs_SpecialN1_Phys(ftYs_GObj* gobj);\n/* 12DC50 */ void ftYs_SpecialAirN1_0_Phys(ftYs_GObj* gobj);\n/* 12DC70 */ void ftYs_SpecialN1_1_Phys(ftYs_GObj* gobj);\n/* 12DC90 */ void ftYs_SpecialN1_0_Phys(ftYs_GObj* gobj);\n/* 12DCB0 */ void ftYs_SpecialAirN1_2_Phys(ftYs_GObj* gobj);\n/* 12DCD0 */ void ftYs_SpecialAirN1_1_Phys(ftYs_GObj* gobj);\n/* 12DCF0 */ void ftYs_SpecialN2_1_Phys(ftYs_GObj* gobj);\n/* 12DD10 */ void ftYs_SpecialN2_0_Phys(ftYs_GObj* gobj);\n/* 12DD30 */ void ftYs_SpecialAirN2_1_Phys(ftYs_GObj* gobj);\n/* 12DD50 */ void ftYs_SpecialAirN2_0_Phys(ftYs_GObj* gobj);\n/* 12DD70 */ void ftYs_SpecialN1_Coll(ftYs_GObj* gobj);\n/* 12DD98 */ void ftYs_SpecialAirN1_0_Coll(ftYs_GObj* gobj);\n/* 12DDC0 */ void ftYs_SpecialN1_1_Coll(ftYs_GObj* gobj);\n/* 12DDE8 */ void ftYs_SpecialN1_0_Coll(ftYs_GObj* gobj);\n/* 12DE10 */ void ftYs_SpecialAirN1_2_Coll(ftYs_GObj* gobj);\n/* 12DE38 */ void ftYs_SpecialAirN1_1_Coll(ftYs_GObj* gobj);\n/* 12DE60 */ void ftYs_SpecialN2_1_Coll(ftYs_GObj* gobj);\n/* 12DE88 */ void ftYs_SpecialN2_0_Coll(ftYs_GObj* gobj);\n/* 12DEB0 */ void ftYs_SpecialAirN2_1_Coll(ftYs_GObj* gobj);\n/* 12DED8 */ void ftYs_SpecialAirN2_0_Coll(ftYs_GObj* gobj);\n/* 12E2C4 */ void ftYs_SpecialHi_Enter(ftYs_GObj* gobj);\n/* 12E33C */ void ftYs_SpecialAirHi_Enter(ftYs_GObj* gobj);\n/* 12E4DC */ void ftYs_SpecialHi_Anim(ftYs_GObj* gobj);\n/* 12E538 */ void ftYs_SpecialAirHi_Anim(ftYs_GObj* gobj);\n/* 12E594 */ void ftYs_SpecialHi_Phys(ftYs_GObj* gobj);\n/* 12E5B4 */ void ftYs_SpecialAirHi_Phys(ftYs_GObj* gobj);\n/* 12E5D4 */ void ftYs_SpecialHi_Coll(ftYs_GObj* gobj);\n/* 12E5FC */ void ftYs_SpecialAirHi_Coll(ftYs_GObj* gobj);\n/* 12E6F8 */ void ftYs_SpecialLw_Enter(ftYs_GObj* gobj);\n/* 12E78C */ void ftYs_SpecialAirLw_Enter(ftYs_GObj* gobj);\n/* 12E814 */ void ftYs_SpecialLw_Anim(ftYs_GObj* gobj);\n/* 12E850 */ void ftYs_SpecialAirLw_Anim(ftYs_GObj* gobj);\n/* 12E88C */ void ftYs_SpecialLw_Phys(ftYs_GObj* gobj);\n/* 12E8CC */ void ftYs_SpecialAirLw_Phys(ftYs_GObj* gobj);\n/* 12E924 */ void ftYs_SpecialLw_Coll(ftYs_GObj* gobj);\n/* 12E944 */ void ftYs_SpecialAirLw_Coll(ftYs_GObj* gobj);\n/* 12EA40 */ void ftYs_SpecialLwLanding_Anim(ftYs_GObj* gobj);\n/* 12EA7C */ void ftYs_SpecialLwLanding_Phys(ftYs_GObj* gobj);\n/* 12EA9C */ void ftYs_SpecialLwLanding_Coll(ftYs_GObj* gobj);\n/* 12F4B4 */ void ftYs_SpecialS_Enter(ftYs_GObj* gobj);\n/* 12F588 */ void ftYs_SpecialAirS_Enter(ftYs_GObj* gobj);\n/* 12F654 */ void ftYs_SpecialAirSStart_0_Anim(ftYs_GObj* gobj);\n/* 12F750 */ void ftYs_SpecialAirSLoop_0_Anim(ftYs_GObj* gobj);\n/* 12FAC4 */ void ftYs_SpecialAirSLoop_1_Anim(ftYs_GObj* gobj);\n/* 12FFF4 */ void ftYs_SpecialAirSEnd_Anim(ftYs_GObj* gobj);\n/* 130368 */ void ftYs_SpecialAirSStart_1_Anim(ftYs_GObj* gobj);\n/* 130428 */ void ftYs_SpecialAirSLoop_2_Anim(ftYs_GObj* gobj);\n/* 1306A8 */ void ftYs_SpecialAirSLoop_3_Anim(ftYs_GObj* gobj);\n/* 130A24 */ void ftYs_SpecialAirSLanding_Anim(ftYs_GObj* gobj);\n/* 130DB8 */ void ftYs_SpecialAirSStart_0_IASA(ftYs_GObj* gobj);\n/* 130DBC */ void ftYs_SpecialAirSLoop_0_IASA(ftYs_GObj* gobj);\n/* 130F7C */ void ftYs_SpecialAirSLoop_1_IASA(ftYs_GObj* gobj);\n/* 130FD8 */ void ftYs_SpecialAirSEnd_IASA(ftYs_GObj* gobj);\n/* 130FDC */ void ftYs_SpecialAirSStart_1_IASA(ftYs_GObj* gobj);\n/* 130FEC */ void ftYs_SpecialAirSLoop_2_IASA(ftYs_GObj* gobj);\n/* 131050 */ void ftYs_SpecialAirSLoop_3_IASA(ftYs_GObj* gobj);\n/* 1310B4 */ void ftYs_SpecialAirSLanding_IASA(ftYs_GObj* gobj);\n/* 1310C4 */ void ftYs_SpecialAirSStart_0_Phys(ftYs_GObj* gobj);\n/* 1310E8 */ void ftYs_SpecialAirSLoop_0_Phys(ftYs_GObj* gobj);\n/* 1312EC */ void ftYs_SpecialAirSLoop_1_Phys(ftYs_GObj* gobj);\n/* 131618 */ void ftYs_SpecialAirSEnd_Phys(ftYs_GObj* gobj);\n/* 131654 */ void ftYs_SpecialAirSStart_1_Phys(ftYs_GObj* gobj);\n/* 13168C */ void ftYs_SpecialAirSLoop_2_Phys(ftYs_GObj* gobj);\n/* 131718 */ void ftYs_SpecialAirSLoop_3_Phys(ftYs_GObj* gobj);\n/* 1317A4 */ void ftYs_SpecialAirSLanding_Phys(ftYs_GObj* gobj);\n/* 1317DC */ void ftYs_SpecialAirSStart_0_Coll(ftYs_GObj* gobj);\n/* 13187C */ void ftYs_SpecialAirSLoop_0_Coll(ftYs_GObj* gobj);\n/* 131B60 */ void ftYs_SpecialAirSLoop_1_Coll(ftYs_GObj* gobj);\n/* 131E74 */ void ftYs_SpecialAirSEnd_Coll(ftYs_GObj* gobj);\n/* 131ED4 */ void ftYs_SpecialAirSStart_1_Coll(ftYs_GObj* gobj);\n/* 131F80 */ void ftYs_SpecialAirSLoop_2_Coll(ftYs_GObj* gobj);\n/* 13245C */ void ftYs_SpecialAirSLoop_3_Coll(ftYs_GObj* gobj);\n/* 1328F0 */ void ftYs_SpecialAirSLanding_Coll(ftYs_GObj* gobj);\n#define GALE01_14F1F0\n/* 14F1F0 */ void ftBo_Init_OnDeath(HSD_GObj* gobj);\n/* 14F218 */ void ftBo_Init_OnItemPickup(HSD_GObj* gobj, bool flag);\n/* 14F2F8 */ void ftBo_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 14F340 */ void ftBo_Init_OnItemVisible(HSD_GObj* gobj);\n/* 14F388 */ void ftBo_Init_OnItemDrop(HSD_GObj* gobj, bool flag);\n/* 14F3DC */ void ftBo_Init_OnLoad(HSD_GObj* gobj);\n/* 14F3FC */ void ftBo_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 3D34E8 */ extern char ftBo_Init_DatFilename[];\n/* 3D34F4 */ extern char ftBo_Init_DataName[];\n/* 3D3520 */ extern char ftBo_Init_AnimDatFilename[];\n/* 3D3558 */ extern Fighter_CostumeStrings ftBo_Init_CostumeStrings[];\n#define GALE01_14F418\n/* 14F418 */ void ftGl_Init_OnDeath(HSD_GObj* gobj);\n/* 14F440 */ void ftGl_Init_OnLoad(HSD_GObj* gobj);\n/* 14F460 */ void ftGl_Init_OnItemPickup(HSD_GObj* gobj, bool flag);\n/* 14F540 */ void ftGl_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 14F588 */ void ftGl_Init_OnItemVisible(HSD_GObj* gobj);\n/* 14F5D0 */ void ftGl_Init_OnItemDrop(HSD_GObj* gobj, bool flag);\n/* 14F624 */ void ftGl_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 3D3568 */ extern char ftGl_Init_DatFilename[];\n/* 3D3574 */ extern char ftGl_Init_DataName[];\n/* 3D35A0 */ extern char ftGl_Init_AnimDatFilename[];\n/* 3D35D8 */ extern Fighter_CostumeStrings ftGl_Init_CostumeStrings[];\n#define MELEE_FT_CHARA_FTZELDA_FORWARD_H\nstatic MotionFlags const ftZd_MF_Special =\n    Ft_MF_SkipModel | Ft_MF_SkipItemVis | Ft_MF_UnkUpdatePhys |\n    Ft_MF_FreezeState;\nstatic MotionFlags const ftZd_MF_SpecialN =\n    ftZd_MF_Special | Ft_MF_KeepFastFall | Ft_MF_SkipColAnim;\nstatic MotionFlags const ftZd_MF_SpecialHi =\n    ftZd_MF_Special | Ft_MF_KeepFastFall | Ft_MF_KeepGfx;\nstatic MotionFlags const ftZd_MF_SpecialLw =\n    ftZd_MF_Special | Ft_MF_KeepColAnimHitStatus;\nstatic MotionFlags const ftZd_MF_SpecialS =\n    ftZd_MF_Special | Ft_MF_KeepGfx | Ft_MF_SkipThrowException;\nstatic MotionFlags const ftZd_MF_SpecialAirN =\n    ftZd_MF_SpecialN | Ft_MF_SkipParasol;\nstatic MotionFlags const ftZd_MF_SpecialAirHi =\n    ftZd_MF_SpecialHi | Ft_MF_SkipParasol;\nstatic MotionFlags const ftZd_MF_SpecialAirLw =\n    ftZd_MF_SpecialLw | Ft_MF_SkipParasol;\nstatic MotionFlags const ftZd_MF_SpecialAirS =\n    ftZd_MF_SpecialS | Ft_MF_SkipParasol;\ntypedef enum ftZd_MotionState {\n    ftZd_MS_SpecialN = ftCo_MS_Count,\n    ftZd_MS_SpecialAirN,\n    ftZd_MS_SpecialSStart,\n    ftZd_MS_SpecialSLoop,\n    ftZd_MS_SpecialSEnd,\n    ftZd_MS_SpecialAirSStart,\n    ftZd_MS_SpecialAirSLoop,\n    ftZd_MS_SpecialAirSEnd,\n    ftZd_MS_SpecialHiStart_0,\n    ftZd_MS_SpecialHiStart_1,\n    ftZd_MS_SpecialHi,\n    ftZd_MS_SpecialAirHiStart_0,\n    ftZd_MS_SpecialAirHiStart_1,\n    ftZd_MS_SpecialAirHi,\n    ftZd_MS_SpecialLw,\n    ftZd_MS_SpecialLw2,\n    ftZd_MS_SpecialAirLw,\n    ftZd_MS_SpecialAirLw2,\n    ftZd_MS_Count,\n    ftZd_MS_SelfCount = ftZd_MS_Count - ftCo_MS_Count,\n} ftZd_MotionState;\ntypedef enum ftZd_Submotion {\n    ftZd_SM_SpecialN = ftCo_SM_Count,\n    ftZd_SM_SpecialAirN,\n    ftZd_SM_SpecialSStart,\n    ftZd_SM_SpecialSLoop,\n    ftZd_SM_SpecialSEnd,\n    ftZd_SM_SpecialAirSStart,\n    ftZd_SM_SpecialAirSLoop,\n    ftZd_SM_SpecialAirSEnd,\n    ftZd_SM_SpecialHiStart,\n    ftZd_SM_SpecialHi,\n    ftZd_SM_SpecialAirHiStart,\n    ftZd_SM_SpecialAirHi,\n    ftZd_SM_SpecialLw,\n    ftZd_SM_SpecialLw2,\n    ftZd_SM_SpecialAirLw,\n    ftZd_SM_SpecialAirLw2,\n    ftZd_SM_Count,\n    ftZd_SM_SelfCount = ftZd_SM_Count - ftCo_SM_Count,\n} ftZd_Submotion;\n#define GALE01_1393AC\n/* 1392DC */ void ftZd_Init_OnDeath(HSD_GObj* gobj);\n/* 139334 */ void ftZd_Init_OnLoad(HSD_GObj* gobj);\n/* 1393AC */ void ftZd_Init_801393AC(HSD_GObj* gobj);\n/* 1393CC */ void ftZd_Init_OnItemPickup(HSD_GObj* gobj, bool flag);\n/* 1394AC */ void ftZd_Init_OnItemInvisible(HSD_GObj* gobj);\n/* 1394F4 */ void ftZd_Init_OnItemVisible(HSD_GObj* gobj);\n/* 13953C */ void ftZd_Init_OnItemDrop(HSD_GObj* gobj, bool flag);\n/* 139590 */ void ftZd_Init_LoadSpecialAttrs(HSD_GObj* gobj);\n/* 1395C8 */ void ftZd_Init_801395C8(HSD_GObj* gobj);\n/* 139624 */ void ftZd_Init_OnKnockbackEnter(HSD_GObj* gobj);\n/* 139668 */ void ftZd_Init_OnKnockbackExit(HSD_GObj* gobj);\n/* 3CFA58 */ extern MotionState ftZd_Init_MotionStateTable[ftZd_MS_SelfCount];\n/* 3CFC98 */ extern char ftZd_Init_DatFilename[];\n/* 3CFCA4 */ extern char ftZd_Init_DataName[];\n/* 3CFE24 */ extern char ftZd_Init_AnimDatFilename[];\n/* 3CFEA0 */ extern Fighter_DemoStrings ftZd_Init_DemoMotionFilenames;\n/* 3CFEB0 */ extern Fighter_CostumeStrings ftZd_Init_CostumeStrings[];\n#define GALE01_1396AC\n/* 1396AC */ void ftZd_SpecialHi_801396AC(HSD_GObj* gobj);\n/* 1396E0 */ void ftZd_SpecialHi_801396E0(HSD_GObj* gobj);\n/* 13979C */ void ftZd_SpecialHi_8013979C(HSD_GObj* gobj);\n/* 139834 */ void ftZd_SpecialHi_Enter(HSD_GObj* gobj);\n/* 1398E8 */ void ftZd_SpecialAirHi_Enter(HSD_GObj* gobj);\n/* 1399B4 */ void ftZd_SpecialHiStart_0_Anim(HSD_GObj* gobj);\n/* 1399F0 */ void ftZd_SpecialAirHiStart_0_Anim(HSD_GObj* gobj);\n/* 139A2C */ void ftZd_SpecialHiStart_0_IASA(HSD_GObj* gobj);\n/* 139A30 */ void ftZd_SpecialAirHiStart_0_IASA(HSD_GObj* gobj);\n/* 139A34 */ void ftZd_SpecialHiStart_0_Phys(HSD_GObj* gobj);\n/* 139A54 */ void ftZd_SpecialAirHiStart_0_Phys(HSD_GObj* gobj);\n/* 139A98 */ void ftZd_SpecialHiStart_0_Coll(HSD_GObj* gobj);\n/* 139AD4 */ void ftZd_SpecialAirHiStart_0_Coll(HSD_GObj* gobj);\n/* 139B44 */ void ftZd_SpecialHi_80139B44(HSD_GObj* gobj);\n/* 139BB0 */ void ftZd_SpecialHi_80139BB0(HSD_GObj* gobj);\n/* 139C1C */ void ftZd_SpecialHiStart_1_Anim(HSD_GObj* gobj);\n/* 139C58 */ void ftZd_SpecialAirHiStart_1_Anim(HSD_GObj* gobj);\n/* 139C94 */ void ftZd_SpecialHiStart_1_IASA(HSD_GObj* gobj);\n/* 139C98 */ void ftZd_SpecialAirHiStart_1_IASA(HSD_GObj* gobj);\n/* 139C9C */ void ftZd_SpecialHiStart_1_Phys(HSD_GObj* gobj);\n/* 139CBC */ void ftZd_SpecialAirHiStart_1_Phys(HSD_GObj* gobj);\n/* 139CC0 */ void ftZd_SpecialHiStart_1_Coll(HSD_GObj* gobj);\n/* 139D60 */ void ftZd_SpecialAirHiStart_1_Coll(HSD_GObj* gobj);\n/* 139F6C */ void ftZd_SpecialHi_80139F6C(HSD_GObj* gobj);\n/* 139FE8 */ void ftZd_SpecialHi_80139FE8(HSD_GObj* gobj);\n/* 13A058 */ void ftZd_SpecialHi_8013A058(HSD_GObj* gobj);\n/* 13A244 */ void ftZd_SpecialHi_8013A244(HSD_GObj* gobj);\n/* 13A448 */ void ftZd_SpecialHi_Anim(HSD_GObj* gobj);\n/* 13A484 */ void ftZd_SpecialAirHi_Anim(HSD_GObj* gobj);\n/* 13A4E4 */ void ftZd_SpecialHi_IASA(HSD_GObj* gobj);\n/* 13A4E8 */ void ftZd_SpecialAirHi_IASA(HSD_GObj* gobj);\n/* 13A4EC */ void ftZd_SpecialHi_Phys(HSD_GObj* gobj);\n/* 13A50C */ void ftZd_SpecialAirHi_Phys(HSD_GObj* gobj);\n/* 13A588 */ void ftZd_SpecialHi_Coll(HSD_GObj* gobj);\n/* 13A5C4 */ void ftZd_SpecialAirHi_Coll(HSD_GObj* gobj);\n/* 13A648 */ void ftZd_SpecialHi_8013A648(HSD_GObj* gobj);\n/* 13A6A8 */ void ftZd_SpecialHi_8013A6A8(HSD_GObj* gobj);\n/* 13A764 */ void ftZd_SpecialHi_8013A764(HSD_GObj* gobj);\n#define GALE01_13ADB4\n/* 13ADB4 */ void ftZd_SpecialLw_8013ADB4(HSD_GObj* gobj);\n/* 13AE30 */ void ftZd_SpecialLw_8013AE30(HSD_GObj* gobj);\n/* 13AEAC */ void ftZd_SpecialLw_8013AEAC(HSD_GObj* gobj);\n/* 13AEE0 */ void ftZd_SpecialLw_Enter(HSD_GObj* gobj);\n/* 13AFA4 */ void ftZd_SpecialAirLw_Enter(HSD_GObj* gobj);\n/* 13B068 */ void ftZd_SpecialLw_Anim(HSD_GObj* gobj);\n/* 13B0A8 */ void ftZd_SpecialAirLw_Anim(HSD_GObj* gobj);\n/* 13B0E8 */ void ftZd_SpecialLw_IASA(HSD_GObj* gobj);\n/* 13B0EC */ void ftZd_SpecialAirLw_IASA(HSD_GObj* gobj);\n/* 13B0F0 */ void ftZd_SpecialLw_Phys(HSD_GObj* gobj);\n/* 13B110 */ void ftZd_SpecialAirLw_Phys(HSD_GObj* gobj);\n/* 13B154 */ void ftZd_SpecialLw_Coll(HSD_GObj* gobj);\n/* 13B190 */ void ftZd_SpecialAirLw_Coll(HSD_GObj* gobj);\n/* 13B1CC */ void ftZd_SpecialLw_8013B1CC(HSD_GObj* gobj);\n/* 13B238 */ void ftZd_SpecialLw_8013B238(HSD_GObj* gobj);\n/* 13B2A4 */ void ftZd_SpecialLw2_Anim(HSD_GObj* gobj);\n/* 13B2E0 */ void ftZd_SpecialAirLw2_Anim(HSD_GObj* gobj);\n/* 13B31C */ void ftZd_SpecialLw2_IASA(HSD_GObj* gobj);\n/* 13B320 */ void ftZd_SpecialAirLw2_IASA(HSD_GObj* gobj);\n/* 13B324 */ void ftZd_SpecialLw2_Phys(HSD_GObj* gobj);\n/* 13B344 */ void ftZd_SpecialAirLw2_Phys(HSD_GObj* gobj);\n/* 13B388 */ void ftZd_SpecialLw2_Coll(HSD_GObj* gobj);\n/* 13B3C4 */ void ftZd_SpecialAirLw2_Coll(HSD_GObj* gobj);\n/* 13B400 */ void ftZd_SpecialLw_8013B400(HSD_GObj* gobj);\n/* 13B46C */ void ftZd_SpecialLw_8013B46C(HSD_GObj* gobj);\n/* 13B4D8 */ void ftZd_SpecialLw_8013B4D8(HSD_GObj* gobj);\n/* 13B540 */ s32 ftZd_SpecialLw_8013B540(HSD_GObj* gobj);\n/* 13B574 */ bool ftZd_SpecialLw_8013B574(HSD_GObj* gobj);\n/* 13B5C4 */ void ftZd_SpecialLw_8013B5C4(HSD_GObj* gobj);\n/* 13B5EC */ void ftZd_SpecialLw_8013B5EC(HSD_GObj* gobj);\n#define GALE01_13A830\n/* 13A830 */ void ftZd_SpecialN_8013A830(HSD_GObj* gobj);\n/* 13A8AC */ void ftZd_SpecialN_8013A8AC(HSD_GObj* gobj);\n/* 13A928 */ void ftZd_SpecialN_Enter(HSD_GObj* gobj);\n/* 13A9A4 */ void ftZd_SpecialAirN_Enter(HSD_GObj* gobj);\n/* 13AA38 */ void ftZd_SpecialN_Anim(HSD_GObj* gobj);\n/* 13AACC */ void ftZd_SpecialAirN_Anim(HSD_GObj* gobj);\n/* 13AB60 */ void ftZd_SpecialN_IASA(HSD_GObj* gobj);\n/* 13AB64 */ void ftZd_SpecialAirN_IASA(HSD_GObj* gobj);\n/* 13AB68 */ void ftZd_SpecialN_Phys(HSD_GObj* gobj);\n/* 13AB9C */ void ftZd_SpecialAirN_Phys(HSD_GObj* gobj);\n/* 13AC10 */ void ftZd_SpecialN_Coll(HSD_GObj* gobj);\n/* 13AC4C */ void ftZd_SpecialAirN_Coll(HSD_GObj* gobj);\n/* 13AC88 */ void ftZd_SpecialN_8013AC88(HSD_GObj* gobj);\n/* 13AD1C */ void ftZd_SpecialN_8013AD1C(HSD_GObj* gobj);\n/* 13ADB0 */ void ftZd_SpecialN_8013ADB0(HSD_GObj* gobj);\n#define GALE01_13B638\n/* 13B638 */ void ftZd_SpecialS_Enter(HSD_GObj* gobj);\n/* 13B6D8 */ void ftZd_SpecialAirS_Enter(HSD_GObj* gobj);\n/* 13B780 */ void ftZd_SpecialSStart_Anim(HSD_GObj* gobj);\n/* 13B89C */ void ftZd_SpecialSLoop_Anim(HSD_GObj* gobj);\n/* 13BA04 */ void ftZd_SpecialSEnd_Anim(HSD_GObj* gobj);\n/* 13BA8C */ void ftZd_SpecialAirSStart_Anim(HSD_GObj* gobj);\n/* 13BBA8 */ void ftZd_SpecialAirSLoop_Anim(HSD_GObj* gobj);\n/* 13BD10 */ void ftZd_SpecialAirSEnd_Anim(HSD_GObj* gobj);\n/* 13BDD0 */ void ftZd_SpecialSStart_IASA(HSD_GObj* gobj);\n/* 13BDD4 */ void ftZd_SpecialSLoop_IASA(HSD_GObj* gobj);\n/* 13BE50 */ void ftZd_SpecialSEnd_IASA(HSD_GObj* gobj);\n/* 13BE54 */ void ftZd_SpecialAirSStart_IASA(HSD_GObj* gobj);\n/* 13BE58 */ void ftZd_SpecialAirSLoop_IASA(HSD_GObj* gobj);\n/* 13BED4 */ void ftZd_SpecialAirSEnd_IASA(HSD_GObj* gobj);\n/* 13BED8 */ void ftZd_SpecialSStart_Phys(HSD_GObj* gobj);\n/* 13BF10 */ void ftZd_SpecialSLoop_Phys(HSD_GObj* gobj);\n/* 13BF30 */ void ftZd_SpecialSEnd_Phys(HSD_GObj* gobj);\n/* 13BF50 */ void ftZd_SpecialAirSStart_Phys(HSD_GObj* gobj);\n/* 13BFB0 */ void ftZd_SpecialAirSLoop_Phys(HSD_GObj* gobj);\n/* 13C010 */ void ftZd_SpecialAirSEnd_Phys(HSD_GObj* gobj);\n/* 13C070 */ void ftZd_SpecialSStart_Coll(HSD_GObj* gobj);\n/* 13C0DC */ void ftZd_SpecialSLoop_Coll(HSD_GObj* gobj);\n/* 13C148 */ void ftZd_SpecialSEnd_Coll(HSD_GObj* gobj);\n/* 13C1B4 */ void ftZd_SpecialAirSStart_Coll(HSD_GObj* gobj);\n/* 13C220 */ void ftZd_SpecialAirSLoop_Coll(HSD_GObj* gobj);\n/* 13C28C */ void ftZd_SpecialAirSEnd_Coll(HSD_GObj* gobj);\n#define MELEE_FT_CODE_8007C114_H\nvoid ft_8007C17C(HSD_GObj* gobj);\nvoid ft_8007C114(HSD_GObj* gobj);\nvoid ft_8007C224(HSD_GObj* gobj);\nvoid ft_8007C4BC(HSD_GObj* gobj);\nvoid ft_8007C2E0(void);\n#define MELEE_FT_CODE_8007C630_H\nvoid ft_8007C630(HSD_GObj* gobj);\nvoid ft_8007C6DC(HSD_GObj* gobj);\nvoid ft_8007C77C(HSD_GObj* gobj);\n/** @file\n * @todo Rename to @c ftUnk2.h\n */\n#define MELEE_FT_CODE_80081938_H\nvoid ft_80081938(HSD_GObj* gobj);\nvoid ft_800819A8(HSD_GObj* gobj);\nvoid ft_80081A00(void);\n/** @file\n * @todo Rename to @c ftUnk3.h\n */\n#define MELEE_FT_CODE_80081B38_H\nFighter_GObj* ft_80082E3C(Fighter_GObj* gobj);\nfloat ft_GetGroundFrictionMultiplier(Fighter* fp);\nbool ft_8008239C(Fighter_GObj* gobj, s32 facing_direction,\n                 float* height_attributes);\nvoid ft_80084FA8(Fighter_GObj* gobj);\nvoid ft_80084EEC(Fighter_GObj* gobj);\nbool ft_800827A0(Fighter_GObj* gobj);\nGroundOrAir ft_80081D0C(Fighter_GObj* gobj);\nvoid ft_80085134(Fighter_GObj* gobj);\n/// CollisionCheck_StopLedge\nvoid ft_80084104(Fighter_GObj* gobj);\nGroundOrAir ft_80082708(Fighter_GObj* gobj);\nvoid ft_80084F3C(Fighter_GObj* gobj);\nvoid ft_80084280(Fighter_GObj*);\nvoid ft_8008403C(Fighter_GObj*, HSD_GObjEvent);\nvoid ft_80084DB0(Fighter_GObj*);\nvoid ft_80082C74(Fighter_GObj*, HSD_GObjEvent);\n/// @todo Name does not follow our conventions.\nbool ft_CheckGroundAndLedge(Fighter_GObj* gobj, s32 direction);\nvoid ft_80083F88(Fighter_GObj* gobj);\nvoid ft_80085154(Fighter_GObj* gobj);\nvoid ft_80083B68(Fighter_GObj* gobj);\nbool ft_800824A0(Fighter_GObj*, ftCollisionBox*);\nbool ft_80082888(Fighter_GObj*, ftCollisionBox*);\nvoid ft_80085204(Fighter_GObj* gobj);\nvoid ft_80082B1C(Fighter_GObj* gobj);\nvoid ft_80081B38(Fighter_GObj* gobj);\nbool ft_80082A68(Fighter_GObj* gobj);\nvoid ft_800851C0(Fighter_GObj*);\nvoid ftCo_AirCatchHit_Coll(Fighter_GObj*);\nvoid ft_80085088(Fighter_GObj*);\nbool ft_800821DC(Fighter_GObj* gobj);\nbool ft_80084A18(Fighter_GObj*);\nvoid ft_800849EC(Fighter*, Fighter*);\nvoid ft_80081C88(Fighter_GObj* dst_gobj, float scl_y);\nvoid ft_80082838(void);\nvoid ft_800831CC(Fighter_GObj*, bool (*)(Fighter_GObj*, enum_t),\n                 HSD_GObjEvent);\nM2C_UNK ft_80082978();\nvoid ft_80082D40(Fighter_GObj* gobj, float, float);\nvoid ft_80082F28(Fighter_GObj* gobj);\nvoid ft_80083090(Fighter_GObj* gobj, bool (*)(Fighter_GObj*, enum_t),\n                 HSD_GObjEvent);\nM2C_UNK ft_80083318();\nvoid ft_80083464(Fighter_GObj* gobj, bool (*)(Fighter_GObj* gobj, enum_t),\n                 HSD_GObjEvent);\nvoid ft_800835B0(Fighter_GObj* gobj, bool (*)(Fighter_GObj* gobj, enum_t),\n                 HSD_GObjEvent);\nvoid ft_8008370C(Fighter_GObj* gobj, HSD_GObjEvent cb);\nbool ft_80081DD4(Fighter_GObj* gobj);\nM2C_UNK ft_80083844();\nM2C_UNK ft_80083910();\nM2C_UNK ft_80083A48();\nM2C_UNK ft_80083C00();\nM2C_UNK ft_80083CE4();\nM2C_UNK ft_80083DCC();\nM2C_UNK ft_80083E64();\nvoid ft_800841B8(Fighter_GObj* gobj, HSD_GObjEvent cb);\nvoid ft_800843FC(Fighter_GObj* gobj);\nM2C_UNK ft_80081F2C();\nM2C_UNK ft_800844EC();\nvoid ft_800845B4(Fighter_GObj* gobj);\nM2C_UNK ft_800846B0();\nvoid ft_800847D0(Fighter_GObj* gobj, ftCollisionBox*);\nvoid ft_800848DC(Fighter_GObj* gobj, HSD_GObjEvent cb);\nM2C_UNK ft_80084A80();\nbool ft_80084BFC(Fighter_GObj* gobj, int*, int*);\nbool ft_80084C38(Fighter_GObj*, int*, int*, int*, char*);\nbool ft_80084C74(Fighter_GObj*, int*, int*, int*);\nM2C_UNK ft_80084CB0();\nbool ft_80084CE4(Fighter* attacker, Fighter* victim);\nM2C_UNK ft_80084E1C();\nM2C_UNK ft_80082084();\nvoid ft_80085004(Fighter_GObj* gobj);\nM2C_UNK ft_800850B4();\nM2C_UNK ft_800851D0();\nM2C_UNK ft_80082578();\nvoid ft_80082638(Fighter_GObj* gobj, ftCollisionBox*);\nvoid ft_80085030(Fighter_GObj*, float gr_friction, float facing_dir);\n/** @file\n * @todo Rename to @c ftUnk5.h\n */\n#define MELEE_FT_FT_UNKNOWN_005_H\nextern struct UnkCostumeList CostumeListsForeachCharacter[FTKIND_MAX];\nvoid ft_800852B0(void);\nvoid ft_8008549C(void);\n#define GALE01_0BECB0\n/* 0BECB0 */ void ftCo_800BECB0(Fighter_GObj* gobj);\n/* 0BED84 */ void ftCo_800BED84(Fighter_GObj* gobj);\n/* 0BED88 */ void ftCo_800BED88(Fighter_GObj* gobj);\n/* 0BEF00 */ void ftCo_800BEF00(Fighter_GObj* gobj);\n/* 0BEF04 */ void ftCo_800BEF04(Fighter_GObj* gobj);\n/* 0BEFD0 */ void ftCo_800BEFD0(Fighter_GObj* gobj);\n#define GALE01_0BEFD4\n/* 0BEFD4 */ void ftCo_800BEFD4(Fighter_GObj* gobj);\n#define GALE01_0BF034\n/* 0BF034 */ void ftCo_800BF034(Fighter_GObj* gobj);\n/* 0BF108 */ void ftCo_800BF108(Fighter_GObj* gobj);\n/* 0BF228 */ bool ftCo_800BF228(Fighter_GObj* gobj);\n#define GALE01_0C0874\n/* 0C0874 */ M2C_UNK ftCo_800C0874();\n/* 0C08A0 */ M2C_UNK ftCo_800C08A0();\n/* 0C09B4 */ void ftCo_800C09B4(ftCo_GObj* gobj);\n/* 0C0A28 */ M2C_UNK ftCo_800C0A28();\n/* 0C0A98 */ void ftCo_800C0A98(ftCo_GObj* gobj);\n/* 0C0B20 */ M2C_UNK ftCo_800C0B20();\n/* 0C0C88 */ bool ftCo_800C0C88(int);\n/* 0C0CB8 */ bool ftCo_800C0CB8(ftCo_GObj* gobj);\n/* 0C0D0C */ M2C_UNK ftCo_800C0D0C();\n/* 0C0F34 */ void ftCo_Bury_Anim(ftCo_GObj* gobj);\n/* 0C0FC8 */ void ftCo_Bury_IASA(ftCo_GObj* gobj);\n/* 0C0FCC */ M2C_UNK ftCo_800C0FCC();\n/* 0C1194 */ void ftCo_Bury_Phys(ftCo_GObj* gobj);\n/* 0C11E4 */ void ftCo_Bury_Coll(ftCo_GObj* gobj);\n/* 0C124C */ M2C_UNK ftCo_800C124C();\n/* 0C12D8 */ void ftCo_BuryWait_Anim(ftCo_GObj* gobj);\n/* 0C134C */ void ftCo_BuryWait_IASA(ftCo_GObj* gobj);\n/* 0C1350 */ void ftCo_BuryWait_Phys(ftCo_GObj* gobj);\n/* 0C1354 */ void ftCo_BuryWait_Coll(ftCo_GObj* gobj);\n/* 0C13BC */ M2C_UNK ftCo_800C13BC();\n/* 0C1460 */ void ftCo_BuryJump_Anim(ftCo_GObj* gobj);\n/* 0C14B0 */ void ftCo_BuryJump_IASA(ftCo_GObj* gobj);\n/* 0C1574 */ void ftCo_BuryJump_Phys(ftCo_GObj* gobj);\n/* 0C15B4 */ void ftCo_BuryJump_Coll(ftCo_GObj* gobj);\n/* 0C15F4 */ M2C_UNK ftCo_800C15F4();\n/* 0C1718 */ M2C_UNK ftCo_800C1718();\n/* 0C17CC */ bool ftCo_800C17CC(ftCo_GObj* gobj);\n/* 0C18A8 */ M2C_UNK ftCo_800C18A8();\n/* 0C1B2C */ void ftCo_FlyReflect_Anim(ftCo_GObj* gobj);\n/* 0C1B64 */ void ftCo_FlyReflect_IASA(ftCo_GObj* gobj);\n/* 0C1B84 */ void ftCo_FlyReflect_Phys(ftCo_GObj* gobj);\n/* 0C1BA4 */ void ftCo_FlyReflect_Coll(ftCo_GObj* gobj);\n/* 0C1D38 */ bool ftCo_800C1D38(ftCo_GObj* gobj);\n/* 0C1E0C */ M2C_UNK ftCo_800C1E0C();\n/* 0C1E64 */ void ftCo_800C1E64(ftCo_GObj* pPlayerEntityStruct, s32, s32, u8,\n                                float);\n/* 0C2028 */ void ftCo_PassiveWall_Anim(ftCo_GObj* gobj);\n/* 0C2180 */ void ftCo_PassiveWall_IASA(ftCo_GObj* gobj);\n/* 0C22C0 */ void ftCo_PassiveWall_Phys(ftCo_GObj* gobj);\n/* 0C2348 */ void ftCo_PassiveWall_Coll(ftCo_GObj* gobj);\n/* 0C23A0 */ bool ftCo_800C23A0(ftCo_GObj* gobj);\n/* 0C23FC */ M2C_UNK ftCo_800C23FC();\n/* 0C252C */ void ftCo_PassiveCeil_Anim(ftCo_GObj* gobj);\n/* 0C25AC */ void ftCo_PassiveCeil_IASA(ftCo_GObj* gobj);\n/* 0C25B0 */ void ftCo_PassiveCeil_Phys(ftCo_GObj* gobj);\n/* 0C25D0 */ void ftCo_PassiveCeil_Coll(ftCo_GObj* gobj);\n/* 4D6580 */ extern M2C_UNK ft_804D6580;\n/* 4D6588 */ extern M2C_UNK ft_804D6588;\n#define GALE01_0C318C\n/* 0C318C */ void ftCo_800C318C(ftCo_GObj* gobj, bool);\n/* 0C32AC */ void ftCo_DamageSong_Anim(ftCo_GObj* gobj);\n/* 0C334C */ void ftCo_DamageSong_IASA(ftCo_GObj* gobj);\n/* 0C3350 */ void ftCo_DamageSong_Phys(ftCo_GObj* gobj);\n/* 0C3370 */ void ftCo_DamageSong_Coll(ftCo_GObj* gobj);\n/* 0C3390 */ M2C_UNK ftCo_800C3390();\n/* 0C33C8 */ void ftCo_DamageSongWait_Anim(ftCo_GObj* gobj);\n/* 0C343C */ void ftCo_DamageSongWait_IASA(ftCo_GObj* gobj);\n/* 0C3440 */ void ftCo_DamageSongWait_Phys(ftCo_GObj* gobj);\n/* 0C3460 */ void ftCo_DamageSongWait_Coll(ftCo_GObj* gobj);\n/* 0C3480 */ M2C_UNK ftCo_800C3480();\n/* 0C34B8 */ void ftCo_DamageSongRv_Anim(ftCo_GObj* gobj);\n/* 0C34F4 */ void ftCo_DamageSongRv_IASA(ftCo_GObj* gobj);\n/* 0C34F8 */ void ftCo_DamageSongRv_Phys(ftCo_GObj* gobj);\n/* 0C3518 */ void ftCo_DamageSongRv_Coll(ftCo_GObj* gobj);\n/* 0C3538 */ bool ftCo_800C3538(ftCo_GObj* gobj);\n/* 0C3598 */ void ftCo_800C3598(ftCo_GObj* gobj);\n/* 0C36DC */ void ftCo_800C36DC(ftCo_GObj* gobj);\n/* 0C37A0 */ void ftCo_800C37A0(ftCo_GObj* gobj);\n/* 0C3A14 */ M2C_UNK ftCo_800C3A14();\n/* 0C3B10 */ bool ftCo_800C3B10(ftCo_GObj* gobj);\n/* 0C3BE8 */ M2C_UNK ftCo_800C3BE8();\n/* 0C3CC0 */ M2C_UNK ftCo_800C3CC0();\n/* 0C3D6C */ void ftCo_AirCatch_Anim(ftCo_GObj* gobj);\n/* 0C4380 */ void ftCo_AirCatchHit_Anim(ftCo_GObj* gobj);\n/* 0C4384 */ void ftCo_AirCatch_IASA(ftCo_GObj* gobj);\n/* 0C4388 */ void ftCo_AirCatchHit_IASA(ftCo_GObj* gobj);\n/* 0C438C */ void ftCo_AirCatch_Phys(ftCo_GObj* gobj);\n/* 0C4438 */ void ftCo_AirCatchHit_Phys(ftCo_GObj* gobj);\n/* 0C447C */ void ftCo_AirCatch_Coll(ftCo_GObj* gobj);\n/* 0C44CC */ bool ftCo_800C44CC(ftCo_GObj* gobj);\n/* 0C4550 */ M2C_UNK ftCo_800C4550();\n/* 0C466C */ void ftCo_DamageBind_Anim(ftCo_GObj* gobj);\n/* 0C46E0 */ void ftCo_DamageBind_IASA(ftCo_GObj* gobj);\n/* 0C46E4 */ void ftCo_DamageBind_Phys(ftCo_GObj* gobj);\n/* 0C4704 */ void ftCo_DamageBind_Coll(ftCo_GObj* gobj);\n/* 0C4724 */ void ftCo_800C4724(ftCo_GObj* gobj);\n/* 0C4900 */ void ftCo_WarpStarJump_Anim(ftCo_GObj* gobj);\n/* 0C4964 */ void ftCo_WarpStarJump_IASA(ftCo_GObj* gobj);\n/* 0C4968 */ void ftCo_WarpStarJump_Phys(ftCo_GObj* gobj);\n/* 0C4A14 */ void ftCo_WarpStarJump_Coll(ftCo_GObj* gobj);\n/* 0C4A18 */ void ftCo_WarpStarJump_Cam(ftCo_GObj* gobj);\n/* 0C4A38 */ M2C_UNK ftCo_800C4A38();\n/* 0C4BA4 */ void ftCo_WarpStarFall_Anim(ftCo_GObj* gobj);\n/* 0C4BA8 */ void ftCo_WarpStarFall_IASA(ftCo_GObj* gobj);\n/* 0C4BAC */ void ftCo_WarpStarFall_Phys(ftCo_GObj* gobj);\n/* 0C4C30 */ void ftCo_WarpStarFall_Coll(ftCo_GObj* gobj);\n/* 0C4E2C */ void ftCo_WarpStarFall_Cam(ftCo_GObj* gobj);\n/* 0C4E4C */ M2C_UNK ftCo_800C4E4C();\n/* 0C4E94 */ M2C_UNK ftCo_800C4E94();\n/* 0C4ED8 */ M2C_UNK ftCo_800C4ED8();\n/* 0C4F64 */ M2C_UNK ftCo_800C4F64();\n/* 0C4FEC */ void ftCo_HammerWait_Anim(ftCo_GObj* gobj);\n/* 0C5074 */ void ftCo_HammerWait_IASA(ftCo_GObj* gobj);\n/* 0C50D4 */ void ftCo_HammerWait_Phys(ftCo_GObj* gobj);\n/* 0C50F4 */ void ftCo_HammerWait_Coll(ftCo_GObj* gobj);\n/* 0C511C */ void ftCo_800C511C(ftCo_GObj* gobj);\n/* 0C5240 */ bool ftCo_800C5240(ftCo_GObj* gobj);\n/* 0C5284 */ void ftCo_800C5284(ftCo_GObj* gobj);\n/* 0C52F4 */ void ftCo_800C52F4(ftCo_GObj* gobj);\n/* 0C53E4 */ M2C_UNK ftCo_800C53E4();\n/* 0C5408 */ M2C_UNK ftCo_800C5408();\n/* 0C544C */ M2C_UNK ftCo_800C544C();\n/* 0C548C */ M2C_UNK ftCo_800C548C();\n/* 0C54C4 */ M2C_UNK ftCo_800C54C4();\n/* 0C5500 */ void ftCo_800C5500(ftCo_GObj* gobj);\n/* 0C554C */ void ftCo_800C554C(ftCo_Fighter* fp);\n/* 0C555C */ void ftCo_800C555C(ftCo_GObj* gobj);\n/* 0C5588 */ M2C_UNK ftCo_800C5588();\n/* 0C55CC */ M2C_UNK ftCo_800C55CC();\n/* 0C5614 */ M2C_UNK ftCo_800C5614();\n/* 0C56BC */ void ftCo_HammerWalk_Anim(ftCo_GObj* gobj);\n/* 0C56DC */ void ftCo_HammerWalk_IASA(ftCo_GObj* gobj);\n/* 0C572C */ void ftCo_HammerWalk_Phys(ftCo_GObj* gobj);\n/* 0C574C */ void ftCo_HammerWalk_Coll(ftCo_GObj* gobj);\n/* 0C576C */ M2C_UNK ftCo_800C576C();\n/* 0C57B4 */ M2C_UNK ftCo_800C57B4();\n/* 0C5848 */ void ftCo_HammerTurn_Anim(ftCo_GObj* gobj);\n/* 0C59EC */ void ftCo_HammerTurn_IASA(ftCo_GObj* gobj);\n/* 0C5A10 */ void ftCo_HammerTurn_Phys(ftCo_GObj* gobj);\n/* 0C5A30 */ void ftCo_HammerTurn_Coll(ftCo_GObj* gobj);\n/* 0C5A50 */ M2C_UNK ftCo_800C5A50();\n/* 0C5A98 */ void ftCo_800C5A98(ftCo_GObj* gobj);\n/* 0C5B24 */ void ftCo_HammerJump_Anim(ftCo_GObj* gobj);\n/* 0C5B44 */ void ftCo_HammerJump_IASA(ftCo_GObj* gobj);\n/* 0C5B48 */ void ftCo_HammerJump_Phys(ftCo_GObj* gobj);\n/* 0C5B68 */ void ftCo_HammerJump_Coll(ftCo_GObj* gobj);\n/* 0C5B88 */ M2C_UNK ftCo_800C5B88();\n/* 0C5C10 */ void ftCo_HammerKneeBend_Anim(ftCo_GObj* gobj);\n/* 0C5C74 */ void ftCo_HammerKneeBend_IASA(ftCo_GObj* gobj);\n/* 0C5C94 */ void ftCo_HammerKneeBend_Phys(ftCo_GObj* gobj);\n/* 0C5CB4 */ void ftCo_HammerKneeBend_Coll(ftCo_GObj* gobj);\n/* 0C5CD4 */ bool ftCo_800C5CD4(ftCo_GObj* gobj);\n/* 0C5D34 */ M2C_UNK ftCo_800C5D34();\n/* 0C5DBC */ void ftCo_HammerFall_Anim(ftCo_GObj* gobj);\n/* 0C5DDC */ bool ftCo_800C5DDC(ftCo_GObj* gobj);\n/* 0C5E94 */ void ftCo_HammerFall_IASA(ftCo_GObj* gobj);\n/* 0C5F40 */ void ftCo_HammerFall_Phys(ftCo_GObj* gobj);\n/* 0C5F60 */ void ftCo_HammerFall_Coll(ftCo_GObj* gobj);\n/* 0C5F88 */ M2C_UNK ftCo_800C5F88();\n/* 0C6020 */ void ftCo_HammerLanding_Anim(ftCo_GObj* gobj);\n/* 0C6084 */ void ftCo_HammerLanding_IASA(ftCo_GObj* gobj);\n/* 0C6088 */ void ftCo_HammerLanding_Phys(ftCo_GObj* gobj);\n/* 0C60A8 */ void ftCo_HammerLanding_Coll(ftCo_GObj* gobj);\n/* 0C60C8 */ bool ftCo_800C60C8(ftCo_GObj* gobj);\n/* 0C6110 */ M2C_UNK ftCo_800C6110();\n/* 0C6150 */ void ftCo_800C6150(Fighter_GObj* gobj);\n/* 0C61B0 */ void ftCo_800C61B0(ftCo_GObj* gobj);\n/* 0C6370 */ void ftCo_Entry_Anim(ftCo_GObj* gobj);\n/* 0C63B4 */ void ftCo_Entry_IASA(ftCo_GObj* gobj);\n/* 0C63B8 */ void ftCo_Entry_Phys(ftCo_GObj* gobj);\n/* 0C6404 */ void ftCo_Entry_Coll(ftCo_GObj* gobj);\n/* 0C6408 */ M2C_UNK ftCo_800C6408();\n/* 0C6700 */ void ftCo_EntryStart_Anim(ftCo_GObj* gobj);\n/* 0C673C */ void ftCo_EntryStart_IASA(ftCo_GObj* gobj);\n/* 0C6740 */ void ftCo_EntryStart_Phys(ftCo_GObj* gobj);\n/* 0C6950 */ void ftCo_EntryStart_Coll(ftCo_GObj* gobj);\n/* 0C6AFC */ M2C_UNK ftCo_800C6AFC();\n/* 0C6B6C */ M2C_UNK ftCo_800C6B6C();\n/* 0C6CC8 */ void ftCo_EntryEnd_Anim(ftCo_GObj* gobj);\n/* 0C6D34 */ void ftCo_EntryEnd_IASA(ftCo_GObj* gobj);\n/* 0C6D38 */ void ftCo_EntryEnd_Phys(ftCo_GObj* gobj);\n/* 0C6E90 */ void ftCo_EntryEnd_Coll(ftCo_GObj* gobj);\n/* 0C703C */ M2C_UNK ftCo_800C703C(void);\n/* 0C7070 */ void ftCo_800C7070(ftCo_GObj* gobj);\n/* 0C70D0 */ void ftCo_800C70D0(ftCo_GObj* gobj);\n/* 0C7158 */ void ftCo_800C7158(ftCo_GObj* gobj);\n/* 0C7178 */ void ftCo_800C7178(ftCo_GObj* gobj);\n/* 0C7200 */ void ftCo_800C7200(ftCo_GObj* gobj);\n/* 0C7220 */ void ftCo_800C7220(ftCo_GObj* gobj);\n/* 0C7294 */ void ftCo_800C7294(ftCo_GObj* gobj);\n/* 0C7308 */ void ftCo_800C7308(ftCo_GObj* gobj);\n/* 0C737C */ void ftCo_800C737C(ftCo_GObj* gobj);\n/* 0C739C */ void ftCo_800C739C(ftCo_GObj* gobj);\n/* 0C7414 */ void ftCo_800C7414(ftCo_GObj* gobj);\n/* 0C7434 */ void ftCo_800C7434(ftCo_GObj* gobj);\n/* 0C74AC */ void ftCo_800C74AC(ftCo_GObj* gobj);\n/* 0C74F4 */ bool ftCo_800C74F4(ftCo_GObj* gobj);\n/* 0C7590 */ M2C_UNK ftCo_800C7590();\n/* 0C7734 */ void ftCo_CaptureLeadead_Anim(ftCo_GObj* gobj);\n/* 0C77B0 */ void ftCo_CaptureLeadead_IASA(ftCo_GObj* gobj);\n/* 0C77B4 */ void ftCo_CaptureLeadead_Phys(ftCo_GObj* gobj);\n/* 0C77B8 */ void ftCo_CaptureLeadead_Coll(ftCo_GObj* gobj);\n/* 0C7800 */ M2C_UNK ftCo_800C7800();\n/* 0C78B0 */ M2C_UNK ftCo_800C78B0();\n/* 0C7A30 */ M2C_UNK ftCo_800C7A30();\n/* 0C7A58 */ void ftCo_CaptureLikelike_Anim(ftCo_GObj* gobj);\n/* 0C7AD4 */ void ftCo_CaptureLikelike_IASA(ftCo_GObj* gobj);\n/* 0C7AD8 */ void ftCo_CaptureLikelike_Phys(ftCo_GObj* gobj);\n/* 0C7ADC */ void ftCo_CaptureLikelike_Coll(ftCo_GObj* gobj);\n/* 0C7B0C */ M2C_UNK ftCo_800C7B0C();\n/* 0C7C60 */ M2C_UNK ftCo_800C7C60();\n/* 0C7CA0 */ bool ftCo_800C7CA0(ftCo_GObj* gobj);\n/* 0C7FC8 */ void ftCo_DownReflect_Anim(ftCo_GObj* gobj);\n/* 0C8004 */ void ftCo_DownReflect_IASA(ftCo_GObj* gobj);\n/* 0C8008 */ void ftCo_DownReflect_Phys(ftCo_GObj* gobj);\n/* 0C8028 */ void ftCo_DownReflect_Coll(ftCo_GObj* gobj);\n/* 0C8064 */ void ftCo_800C8064(void);\n/* 0C80A4 */ M2C_UNK ft_800C80A4();\n#define GALE01_0928CC\n/* 0C884C */ void ftCo_800C884C(ftCo_GObj* gobj);\n/* 0C88A0 */ void ftCo_800C88A0(Fighter*);\n/* 0C88D4 */ void ftCo_800C88D4(ftCo_GObj* gobj, int, bool);\n/* 0C89A0 */ void ftCo_800C89A0(ftCo_GObj* gobj);\n/* 0C8A64 */ void ftCo_800C8A64(ftCo_GObj* gobj);\n/* 0C8AF0 */ M2C_UNK ftCo_800C8AF0();\n/* 0C8B2C */ bool ftCo_800C8B2C(Fighter*, bool, bool);\n/* 0C8B60 */ void ftCo_800C8B60(ftCo_Fighter* fp, int, s8);\n/* 0C8B74 */ void ftCo_800C8B74(ftCo_GObj* gobj);\n/* 0C8C04 */ void ftCo_DownSpot_Anim(ftCo_GObj* gobj);\n/* 0C8C40 */ void ftCo_DownSpot_IASA(ftCo_GObj* gobj);\n/* 0C8C44 */ void ftCo_DownSpot_Phys(ftCo_GObj* gobj);\n/* 0C8C64 */ void ftCo_DownSpot_Coll(ftCo_GObj* gobj);\n/* 0C8C84 */ void ftCo_800C8C84(ftCo_GObj* gobj);\n/* 0C8D00 */ M2C_UNK ftCo_800C8D00(ftCo_GObj* gobj);\n/* 0C8F6C */ void ftCo_800C8F6C(void);\n/* 0C8FC4 */ void ftCo_800C8FC4(ftCo_GObj* gobj);\n/* 0C9034 */ void ftCo_800C9034(ftCo_GObj* gobj);\n/* 0C9078 */ M2C_UNK ftCo_800C9078();\n/* 0C91C0 */ void ftCo_Barrel_Anim(ftCo_GObj* gobj);\n/* 0C9208 */ void ftCo_Barrel_IASA(ftCo_GObj* gobj);\n/* 0C925C */ void ftCo_Barrel_Phys(ftCo_GObj* gobj);\n/* 0C9260 */ void ftCo_Barrel_Coll(ftCo_GObj* gobj);\n/* 0C92E4 */ M2C_UNK ftCo_800C92E4();\n/* 0C9468 */ bool ftCo_Walk_CheckInput(ftCo_GObj* gobj);\n/* 0C94B4 */ bool ftCo_800C94B4(ftCo_GObj* gobj);\n/* 0C95F4 */ void ftCo_Walk_Anim(ftCo_GObj* gobj);\n/* 0C9614 */ void ftCo_Walk_IASA(ftCo_GObj* gobj);\n/* 0C9768 */ void ftCo_Walk_Phys(ftCo_GObj* gobj);\n/* 0C9788 */ void ftCo_Walk_Coll(ftCo_GObj* gobj);\n/* 0C97A8 */ bool ftCo_800C97A8(ftCo_GObj* gobj);\n/* 0C97DC */ bool ftCo_Turn_CheckInput(ftCo_GObj* gobj);\n/* 0C9840 */ void ftCo_800C9840(ftCo_GObj*, s32, s32, f32, f32, f32);\n/* 0C9924 */ void ftCo_800C9924(ftCo_GObj* gobj);\n/* 0C9970 */ void ftCo_Turn_Anim(ftCo_GObj* gobj);\n/* 0C99F8 */ void ftCo_Turn_IASA(ftCo_GObj* gobj);\n/* 0C9BEC */ void ftCo_Turn_Phys(ftCo_GObj* gobj);\n/* 0C9C0C */ void ftCo_Turn_Coll(ftCo_GObj* gobj);\n/* 0C9E10 */ void ftCo_TurnRun_Anim(ftCo_GObj* gobj);\n/* 0C9ED8 */ void ftCo_TurnRun_IASA(ftCo_GObj* gobj);\n/* 0C9EFC */ void ftCo_TurnRun_Phys(ftCo_GObj* gobj);\n/* 0CA024 */ void ftCo_TurnRun_Coll(ftCo_GObj* gobj);\n/* 0CA094 */ bool ftCo_Dash_CheckInput(ftCo_GObj* gobj);\n/* 0CA1F4 */ void ftCo_Dash_Anim(ftCo_GObj* gobj);\n/* 0CA230 */ void ftCo_Dash_IASA(ftCo_GObj* gobj);\n/* 0CA53C */ void ftCo_Dash_Phys(ftCo_GObj* gobj);\n/* 0CA5D0 */ void ftCo_Dash_Coll(ftCo_GObj* gobj);\n/* 0CA77C */ void ftCo_Run_Anim(ftCo_GObj* gobj);\n/* 0CA830 */ void ftCo_Run_IASA(ftCo_GObj* gobj);\n/* 0CA95C */ void ftCo_Run_Phys(ftCo_GObj* gobj);\n/* 0CAA2C */ void ftCo_Run_Coll(ftCo_GObj* gobj);\n/* 0CAA4C */ void ftCo_RunDirect_Anim(ftCo_GObj* gobj);\n/* 0CAA6C */ void ftCo_RunDirect_IASA(ftCo_GObj* gobj);\n/* 0CAB84 */ void ftCo_RunDirect_Phys(ftCo_GObj* gobj);\n/* 0CABA4 */ void ftCo_RunDirect_Coll(ftCo_GObj* gobj);\n/* 0CAC9C */ void ftCo_RunBrake_Anim(ftCo_GObj* gobj);\n/* 0CADB0 */ void ftCo_RunBrake_IASA(ftCo_GObj* gobj);\n/* 0CAE18 */ void ftCo_RunBrake_Phys(ftCo_GObj* gobj);\n/* 0CAE60 */ void ftCo_RunBrake_Coll(ftCo_GObj* gobj);\n/* 0CAE80 */ bool ftCo_800CAE80(ftCo_GObj* gobj);\n/* 0CAED0 */ bool ftCo_Jump_CheckInput(ftCo_GObj* gobj);\n/* 0CB024 */ bool ftCo_800CB024(ftCo_GObj* gobj);\n/* 0CB110 */ void ftCo_800CB110(ftCo_GObj*, s32, f32);\n/* 0CB2F8 */ void ftCo_Jump_Anim(ftCo_GObj* gobj);\n/* 0CB334 */ void ftCo_Jump_IASA(ftCo_GObj* gobj);\n/* 0CB438 */ void ftCo_800CB438(ftCo_GObj* gobj);\n/* 0CB474 */ void ftCo_Jump_Phys(ftCo_GObj* gobj);\n/* 0CB4B0 */ void ftCo_Jump_Coll(ftCo_GObj* gobj);\n/* 0CB528 */ void ftCo_KneeBend_Anim(ftCo_GObj* gobj);\n/* 0CB59C */ void ftCo_800CB59C(ftCo_GObj* gobj);\n/* 0CB5FC */ void ftCo_KneeBend_IASA(ftCo_GObj* gobj);\n/* 0CB6AC */ void ftCo_KneeBend_Phys(ftCo_GObj* gobj);\n/* 0CB6CC */ void ftCo_KneeBend_Coll(ftCo_GObj* gobj);\n/* 0CB6EC */ M2C_UNK ft_800CB6EC();\n/* 0CB804 */ M2C_UNK ft_800CB804();\n/* 0CB870 */ bool ftCo_800CB870(ftCo_GObj* gobj);\n/* 0CB8E0 */ bool ftCo_800CB8E0(ftCo_GObj* gobj);\n/* 0CB950 */ M2C_UNK ftCo_800CB950();\n/* 0CBAC4 */ M2C_UNK ftCo_800CBAC4();\n/* 0CBBC0 */ M2C_UNK ftCo_800CBBC0();\n/* 0CBD18 */ M2C_UNK ftCo_800CBD18();\n/* 0CBE98 */ M2C_UNK ftCo_800CBE98();\n/* 0CC0E8 */ M2C_UNK ftCo_800CC0E8();\n/* 0CC238 */ M2C_UNK ftCo_800CC238();\n/* 0CC388 */ void ftCo_JumpAerial_Anim(ftCo_GObj* gobj);\n/* 0CC4F8 */ void ftCo_JumpAerial_IASA(ftCo_GObj* gobj);\n/* 0CC634 */ void ftCo_JumpAerial_Phys(ftCo_GObj* gobj);\n/* 0CC6C8 */ void ftCo_800CC6C8(ftCo_GObj* gobj);\n/* 0CC700 */ void ftCo_JumpAerial_Coll(ftCo_GObj* gobj);\n/* 0CC730 */ void ftCo_800CC730(ftCo_GObj* gobj);\n/* 0CC830 */ void ftCo_800CC830(ftCo_GObj* gobj);\n/* 0CC8DC */ M2C_UNK ftCo_800CC8DC();\n/* 0CC988 */ void ftCo_800CC988(ftCo_GObj* gobj, float);\n/* 0CCA00 */ void ftCo_Fall_Anim(ftCo_GObj* gobj);\n/* 0CCAAC */ void ftCo_800CCAAC(ftCo_GObj* gobj);\n/* 0CCBE0 */ void ftCo_800CCBE0(ftCo_GObj* gobj, float*, FtMotionId,\n                                FtMotionId, FtMotionId);\n/* 0CCD34 */ void ftCo_Fall_IASA(ftCo_GObj* gobj);\n/* 0CCD58 */ void ftCo_Fall_Phys(ftCo_GObj* gobj);\n/* 0CCD78 */ void ftCo_Fall_Coll(ftCo_GObj* gobj);\n/* 0CCDA8 */ void ftCo_800CCDA8(ftCo_GObj* gobj);\n/* 0CCDFC */ void ftCo_FallAerial_Anim(ftCo_GObj* gobj);\n/* 0CCE50 */ void ftCo_FallAerial_IASA(ftCo_GObj* gobj);\n/* 0CCE74 */ void ftCo_FallAerial_Phys(ftCo_GObj* gobj);\n#define GALE01_0CD140\n/* 0CD140 */ M2C_UNK ftCo_800CD140();\n/* 0CD1BC */ M2C_UNK ftCo_800CD1BC();\n/* 0CD204 */ M2C_UNK ftCo_800CD204();\n/* 0CD278 */ M2C_UNK ftCo_800CD278();\n/* 0CD2C4 */ M2C_UNK ftCo_800CD2C4();\n/* 0CD31C */ M2C_UNK ft_800CD31C();\n/* 0CD350 */ M2C_UNK ftCo_800CD350();\n/* 0CD390 */ void ftCo_SwordSwing_Anim(ftCo_GObj* gobj);\n/* 0CD3B0 */ void ftCo_SwordSwing_IASA(ftCo_GObj* gobj);\n/* 0CD3D0 */ void ftCo_SwordSwing_Phys(ftCo_GObj* gobj);\n/* 0CD3F0 */ void ftCo_SwordSwing_Coll(ftCo_GObj* gobj);\n/* 0CD418 */ M2C_UNK ftCo_800CD418();\n/* 0CD458 */ void ftCo_BatSwing_Anim(ftCo_GObj* gobj);\n/* 0CD478 */ void ftCo_BatSwing_IASA(ftCo_GObj* gobj);\n/* 0CD498 */ void ftCo_BatSwing_Phys(ftCo_GObj* gobj);\n/* 0CD4B8 */ void ftCo_BatSwing_Coll(ftCo_GObj* gobj);\n/* 0CD4E0 */ M2C_UNK ftCo_800CD4E0();\n/* 0CD520 */ void ftCo_ParasolSwing_Anim(ftCo_GObj* gobj);\n/* 0CD540 */ void ftCo_ParasolSwing_IASA(ftCo_GObj* gobj);\n/* 0CD560 */ void ftCo_ParasolSwing_Phys(ftCo_GObj* gobj);\n/* 0CD580 */ void ftCo_ParasolSwing_Coll(ftCo_GObj* gobj);\n/* 0CD5A8 */ M2C_UNK ftCo_800CD5A8();\n/* 0CD604 */ M2C_UNK ft_800CD604();\n/* 0CD65C */ M2C_UNK ft_800CD65C();\n/* 0CD6A0 */ void ftCo_HarisenSwing_Anim(ftCo_GObj* gobj);\n/* 0CD7C4 */ void ftCo_HarisenSwing_IASA(ftCo_GObj* gobj);\n/* 0CD7E4 */ void ftCo_HarisenSwing_Phys(ftCo_GObj* gobj);\n/* 0CD804 */ void ftCo_HarisenSwing_Coll(ftCo_GObj* gobj);\n#define GALE01_0CDD14\n/* 0CDD14 */ void ftCo_Attack_800CDD14(ftCo_GObj* gobj);\n/* 0CDDA0 */ void ftCo_800CDDA0(ftCo_GObj* gobj);\n/* 0CDE18 */ M2C_UNK ftCo_800CDE18();\n/* 0CDE54 */ M2C_UNK ftCo_800CDE54();\n/* 0CDE74 */ M2C_UNK ftCo_800CDE74();\n/* 0CDE94 */ M2C_UNK ftCo_800CDE94();\n/* 0CDF5C */ M2C_UNK ftCo_800CDF5C();\n/* 0CE010 */ M2C_UNK ftCo_800CE010();\n/* 0CE308 */ void ftCo_LGunShoot_Anim(ftCo_GObj* gobj);\n/* 0CE328 */ void ftCo_LGunShootAir_Anim(ftCo_GObj* gobj);\n/* 0CE348 */ void ftCo_LGunShoot_IASA(ftCo_GObj* gobj);\n/* 0CE34C */ void ftCo_LGunShootAir_IASA(ftCo_GObj* gobj);\n/* 0CE350 */ void ftCo_LGunShoot_Phys(ftCo_GObj* gobj);\n/* 0CE370 */ void ftCo_LGunShootAir_Phys(ftCo_GObj* gobj);\n/* 0CE390 */ void ftCo_LGunShoot_Coll(ftCo_GObj* gobj);\n/* 0CE3B8 */ void ftCo_LGunShootAir_Coll(ftCo_GObj* gobj);\n/* 0CE3E0 */ M2C_UNK ftCo_800CE3E0();\n/* 0CE480 */ M2C_UNK ftCo_800CE480();\n/* 0CE528 */ M2C_UNK ft_800CE528();\n/* 0CE5A0 */ M2C_UNK ft_800CE5A0();\n/* 0CEAF0 */ void ftCo_FireFlowerShoot_Anim(ftCo_GObj* gobj);\n/* 0CEBA0 */ void ftCo_FireFlowerShootAir_Anim(ftCo_GObj* gobj);\n/* 0CEC50 */ void ftCo_FireFlowerShoot_IASA(ftCo_GObj* gobj);\n/* 0CEC54 */ void ftCo_FireFlowerShootAir_IASA(ftCo_GObj* gobj);\n/* 0CEC58 */ void ftCo_FireFlowerShoot_Phys(ftCo_GObj* gobj);\n/* 0CEC78 */ void ftCo_FireFlowerShootAir_Phys(ftCo_GObj* gobj);\n/* 0CEC98 */ void ftCo_FireFlowerShoot_Coll(ftCo_GObj* gobj);\n/* 0CECC0 */ void ftCo_FireFlowerShootAir_Coll(ftCo_GObj* gobj);\n#define GALE01_0CEE70\n/* 0CEE70 */ bool ftCo_800CEE70(ftCo_GObj* gobj);\n/* 0CEF08 */ M2C_UNK ft_800CEF08();\n/* 0CEFE0 */ void ftCo_800CEFE0(ftCo_GObj* gobj, int);\n/* 0CF0B8 */ void ftCo_ItemParasolOpen_Anim(ftCo_GObj* gobj);\n/* 0CF118 */ void ftCo_ItemParasolOpen_IASA(ftCo_GObj* gobj);\n/* 0CF1A0 */ void ftCo_ItemParasolOpen_Phys(ftCo_GObj* gobj);\n/* 0CF258 */ void ftCo_ItemParasolOpen_Coll(ftCo_GObj* gobj);\n/* 0CF280 */ M2C_UNK ftCo_800CF280();\n/* 0CF2B8 */ void ftCo_ItemParasolFall_Anim(ftCo_GObj* gobj);\n/* 0CF2BC */ void ftCo_ItemParasolFall_IASA(ftCo_GObj* gobj);\n/* 0CF380 */ void ftCo_ItemParasolFall_Phys(ftCo_GObj* gobj);\n/* 0CF3A0 */ void ftCo_ItemParasolFall_Coll(ftCo_GObj* gobj);\n/* 0CF3C8 */ M2C_UNK ftCo_800CF3C8();\n/* 0CF424 */ void ftCo_ItemParasolFallSpecial_Anim(ftCo_GObj* gobj);\n/* 0CF428 */ void ftCo_ItemParasolFallSpecial_IASA(ftCo_GObj* gobj);\n/* 0CF494 */ void ftCo_ItemParasolFallSpecial_Phys(ftCo_GObj* gobj);\n/* 0CF4B4 */ void ftCo_ItemParasolFallSpecial_Coll(ftCo_GObj* gobj);\n/* 0CF4DC */ void ftCo_800CF4DC(ftCo_GObj* gobj);\n/* 0CF528 */ void ftCo_ItemParasolDamageFall_Anim(ftCo_GObj* gobj);\n/* 0CF52C */ void ftCo_ItemParasolDamageFall_IASA(ftCo_GObj* gobj);\n/* 0CF54C */ void ftCo_ItemParasolDamageFall_Phys(ftCo_GObj* gobj);\n/* 0CF56C */ void ftCo_ItemParasolDamageFall_Coll(ftCo_GObj* gobj);\n#define GALE01_071028\nstruct FtCmdState {\n    float x0; // timer\n    float x4; // frame\n    char* x8; // script\n    int xC; // stack_depth\n    void*(x10[5]); // stack\n};\nextern u8 ftAction_803C0870[];\nstruct _m2c_stack_ftAction_80072CD8 {\n    /* 0x00 */ char pad_0[0x14];\n    /* 0x14 */ Vec3 vec0;\n    /* 0x20 */ Vec3 vec1;\n    /* 0x2C */ IntVec3 ivec0;\n    /* 0x38 */ M2C_UNK sp38; /* inferred */\n    /* 0x3C */ M2C_UNK sp3C; /* inferred */\n    /* 0x40 */ int* sp40; /* inferred */\n    /* 0x44 */ char pad_44[0x18]; /* maybe part of sp40[7]? */\n    /* 0x5C */ IntVec3 ivec1; /* inferred */\n    /* 0x68 */ char pad_68[0x10];\n}; /* size = 0x78 */\nstruct _m2c_stack_ftAction_80072E4C {\n    /* 0x00 */ char pad_0[0x14];\n    /* 0x14 */ Vec3 vec0;\n    /* 0x20 */ Vec3 vec1;\n    /* 0x2C */ IntVec3 ivec0;\n    /* 0x38 */ M2C_UNK sp38; /* inferred */\n    /* 0x3C */ M2C_UNK sp3C; /* inferred */\n    /* 0x40 */ int* sp40; /* inferred */\n    /* 0x44 */ char pad_44[0x18]; /* maybe part of sp40[7]? */\n    /* 0x5C */ IntVec3 ivec1;\n    /* 0x68 */ char pad_68[0x10];\n}; /* size = 0x78 */\nstruct _m2c_stack_ftAction_80072320 {\n    /* 0x00 */ char pad_0[8];\n    /* 0x08 */ int sp8; /* inferred */\n    /* 0x0C */ int spC; /* inferred */\n    /* 0x10 */ char pad_10[0x30];\n}; /* size = 0x40 */\n/* 071028 */ void ftAction_80071028(Fighter_GObj* gobj, FtCmdState* cmd);\n/* 0711DC */ void ftAction_800711DC(Fighter_GObj* gobj, FtCmdState* cmd);\n/* 07121C */ /* static */ void ftAction_8007121C(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 0715EC */ /* static */ void ftAction_800715EC(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 07162C */ /* static */ void ftAction_8007162C(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 07168C */ /* static */ void ftAction_8007168C(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 07169C */ /* static */ void ftAction_8007169C(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 0716F8 */ /* static */ void ftAction_800716F8(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071708 */ /* static */ void ftAction_80071708(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071774 */ /* static */ void ftAction_80071774(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071784 */ /* static */ void ftAction_80071784(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 0717C8 */ /* static */ void ftAction_800717C8(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 0717D8 */ /* static */ void ftAction_800717D8(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071810 */ /* static */ void ftAction_80071810(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071820 */ /* static */ void ftAction_80071820(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 0718A4 */ /* static */ void ftAction_800718A4(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071908 */ /* static */ void ftAction_80071908(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 07192C */ /* static */ void ftAction_8007192C(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071950 */ /* static */ void ftAction_80071950(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071974 */ /* static */ void ftAction_80071974(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071998 */ /* static */ void ftAction_80071998(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071A14 */ /* static */ void ftAction_80071A14(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071A58 */ /* static */ void ftAction_80071A58(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071A9C */ /* static */ void ftAction_80071A9C(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071AE8 */ /* static */ void ftAction_80071AE8(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071B28 */ /* static */ void ftAction_80071B28(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071B50 */ /* static */ void ftAction_80071B50(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071BE0 */ /* static */ M2C_UNK lbl_80071BE0();\n/* 071BE8 */ /* static */ M2C_UNK lbl_80071BE8();\n/* 071BF0 */ /* static */ M2C_UNK lbl_80071BF0();\n/* 071BF8 */ /* static */ M2C_UNK lbl_80071BF8();\n/* 071C00 */ /* static */ M2C_UNK lbl_80071C00();\n/* 071C08 */ /* static */ M2C_UNK lbl_80071C08();\n/* 071C10 */ /* static */ M2C_UNK lbl_80071C10();\n/* 071CA4 */ /* static */ void ftAction_80071CA4(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071CCC */ /* static */ void ftAction_80071CCC(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071D30 */ /* static */ void ftAction_80071D30(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071D40 */ /* static */ void ftAction_80071D40(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071D94 */ /* static */ void ftAction_80071D94(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071DCC */ /* static */ void ftAction_80071DCC(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071E04 */ /* static */ void ftAction_80071E04(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071F0C */ /* static */ void ftAction_80071F0C(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071F34 */ /* static */ void ftAction_80071F34(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071F78 */ /* static */ void ftAction_80071F78(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071FA0 */ /* static */ void ftAction_80071FA0(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 071FC8 */ /* static */ void ftAction_80071FC8(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072210 */ /* static */ M2C_UNK lbl_80072210();\n/* 072228 */ /* static */ M2C_UNK lbl_80072228();\n/* 072240 */ /* static */ M2C_UNK lbl_80072240();\n/* 072258 */ /* static */ M2C_UNK lbl_80072258();\n/* 072270 */ /* static */ M2C_UNK lbl_80072270();\n/* 072288 */ /* static */ M2C_UNK lbl_80072288();\n/* 0722A0 */ /* static */ M2C_UNK lbl_800722A0();\n/* 0722C8 */ /* static */ void ftAction_800722C8(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072320 */ /* static */ void ftAction_80072320(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072408 */ /* static */ M2C_UNK lbl_80072408();\n/* 07243C */ /* static */ M2C_UNK lbl_8007243C();\n/* 072480 */ /* static */ M2C_UNK lbl_80072480();\n/* 072530 */ /* static */ M2C_UNK lbl_80072530();\n/* 072574 */ /* static */ M2C_UNK lbl_80072574();\n/* 0725B8 */ /* static */ M2C_UNK lbl_800725B8();\n/* 0725FC */ /* static */ M2C_UNK lbl_800725FC();\n/* 0726C0 */ /* static */ void ftAction_800726C0(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 0726F4 */ /* static */ void ftAction_800726F4(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 0727C8 */ /* static */ void ftAction_800727C8(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 07283C */ /* static */ void ftAction_8007283C(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072894 */ /* static */ void ftAction_80072894(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 0728F8 */ /* static */ void ftAction_800728F8(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 07296C */ /* static */ void ftAction_8007296C(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 07297C */ /* static */ void ftAction_8007297C(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 0729C4 */ /* static */ void ftAction_800729C4(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 0729D4 */ /* static */ void ftAction_800729D4(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072A4C */ /* static */ void ftAction_80072A4C(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072A5C */ /* static */ void ftAction_80072A5C(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072AAC */ /* static */ void ftAction_80072AAC(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072ABC */ /* static */ void ftAction_80072ABC(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072B04 */ /* static */ void ftAction_80072B04(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072B14 */ /* static */ void ftAction_80072B14(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072B3C */ /* static */ void ftAction_80072B3C(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072B84 */ /* static */ void ftAction_80072B84(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072B94 */ /* static */ void ftAction_80072B94(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072BE4 */ /* static */ void ftAction_80072BE4(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072BF4 */ /* static */ void ftAction_80072BF4(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072C5C */ /* static */ void ftAction_80072C5C(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072C6C */ /* static */ void ftAction_80072C6C(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072CB0 */ /* static */ void ftAction_80072CB0(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072CD8 */ /* static */ void ftAction_80072CD8(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072E24 */ /* static */ void ftAction_80072E24(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072E4C */ /* static */ void ftAction_80072E4C(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 072FE0 */ /* static */ void ftAction_80072FE0(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 073008 */ /* static */ void ftAction_80073008(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 07309C */ /* static */ void ftAction_8007309C(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 0730B8 */ /* static */ void ftAction_800730B8(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 073108 */ /* static */ void ftAction_80073108(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 073118 */ /* static */ void ftAction_80073118(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 07320C */ /* static */ void ftAction_8007320C(Fighter_GObj* gobj,\n                                                 FtCmdState* cmd);\n/* 073240 */ /* static */ void ftAction_80073240(Fighter_GObj* gobj);\n/* 073354 */ /* static */ void ftAction_80073354(Fighter_GObj* gobj);\n/* 07349C */ /* static */ void ftAction_8007349C(Fighter_GObj* gobj);\n#define GALE01_0C2600\n/* 0C2600 */ M2C_UNK ftCo_800C2600();\n/* 0C2FD8 */ void ftCo_800C2FD8(ftCo_GObj* gobj);\n#define GALE01_0CECE8\n/* 0CECE8 */ bool ftCo_800CECE8(ftCo_GObj* gobj);\n/* 0CED30 */ M2C_UNK ftCo_800CED30();\n/* 0CEDE0 */ void ftCo_AttackS42_Anim(ftCo_GObj* gobj);\n/* 0CEE00 */ void ftCo_AttackS42_IASA(ftCo_GObj* gobj);\n/* 0CEE30 */ void ftCo_AttackS42_Phys(ftCo_GObj* gobj);\n/* 0CEE50 */ void ftCo_AttackS42_Coll(ftCo_GObj* gobj);\n#define MELEE_FT_FTBOSSLIB_H\nHSD_GObj* ftBossLib_8015C3E8(FighterKind arg0);\n/// Fighter_GetState(FighterKind)\n/// @returns A fighter action state ID.\nenum_t ftBossLib_8015C44C(FighterKind kind);\nvoid ftBossLib_8015BD20(HSD_GObj*);\nvoid ftBossLib_8015BD24(s32, f32*, f32, s32, s32, s32);\nvoid ftBossLib_8015BDB4(HSD_GObj*);\nvoid ftBossLib_8015BE40(HSD_GObj* gobj, Vec3*, f32*, f32, f32);\nvoid ftBossLib_8015BF74(HSD_GObj* gobj, f32 x_diff_max);\nvoid ftBossLib_8015C010(HSD_GObj*, f32);\nvoid ftBossLib_8015C09C(HSD_GObj* gobj, f32 facing_dir);\nvoid ftBossLib_8015C190(HSD_GObj*);\nvoid ftBossLib_8015C208(HSD_GObj*, Vec3*);\nHSD_GObj* ftBossLib_8015C244(HSD_GObj*, Vec3*);\nbool ftBossLib_8015C31C(void);\nbool ftBossLib_8015C3A0(void);\nenum_t ftBossLib_8015C4C4(void);\nvoid ftBossLib_8015C5F8(HSD_GObj*);\nbool ftBossLib_8015C270(void);\nbool ftBossLib_8015C2A8(void);\nbool ftBossLib_8015C2E0(void);\nbool ftBossLib_8015C358(void);\ns32 ftBossLib_8015C530(enum_t arg0);\nftMasterHand_SpecialAttrs* ftBossLib_8015C6BC(void);\ns32 ftBossLib_8015C74C(void);\ns32 ftBossLib_8015C7EC(void);\ns32 ftBossLib_8015C88C(void);\ns32 ftBossLib_8015C92C(void);\ns32 ftBossLib_8015C9CC(void);\nvoid func_8015CA6C_inline(s32 arg0);\nvoid ftBossLib_8015CA6C(s32 arg0);\nvoid ftBossLib_8015CB7C(void);\nvoid func_8015CB9C_inline(Vec3 spC);\nvoid ftBossLib_8015CB9C(s32 arg0);\nvoid ftBossLib_8015CC14(void);\n#define MELEE_FT_FTCAMERA_H\nvoid ftCamera_UpdateCameraBox(HSD_GObj* gobj);\nvoid ftCamera_80076018(UnkFloat6_Camera* in, UnkFloat6_Camera* out, f32 mul);\nvoid ftCamera_80076064(Fighter*);\nvoid ftCamera_800762F4(HSD_GObj* gobj);\nvoid ftCamera_80076320(HSD_GObj* gobj);\n#define GALE01_0CF138\n/* 0CF138 */ float ftCo_CalcYScaledKnockback(float*, float, float, float);\n/* 0CF6E8 */ M2C_UNK ftCo_800CF6E8();\n/* 0D0CBC */ M2C_UNK ftCo_800D0CBC();\n/* 0D0EC8 */ float ftCo_800D0EC8(Fighter* fp);\n/* 0D0FA0 */ void ftCo_800D0FA0(Fighter_GObj* gobj);\n/* 0D105C */ void ftCo_800D105C(Fighter_GObj* gobj);\n#define GALE01_081298\n/* 081298 */ bool ftCliffCommon_80081298(ftCo_GObj* gobj);\n/* 081370 */ void ftCliffCommon_80081370(ftCo_GObj* gobj);\n/* 081504 */ void ftCo_CliffCatch_Anim(ftCo_GObj* gobj);\n/* 081540 */ void ftCo_CliffCatch_IASA(ftCo_GObj* gobj);\n/* 081544 */ void ftCo_CliffCatch_Phys(ftCo_GObj* gobj);\n/* 0815E4 */ void ftCo_CliffCatch_Coll(ftCo_GObj* gobj);\n/* 081644 */ void ftCo_Cliff_Cam(ftCo_GObj* gobj);\n#define GALE01_0BFE6C\n/* 0BFE6C */ void ftCo_Sleep_Anim(ftCo_GObj* gobj);\n/* 0BFE70 */ void ftCo_Sleep_IASA(ftCo_GObj* gobj);\n/* 0BFF34 */ M2C_UNK ft_800BFF34();\n/* 0BFF70 */ M2C_UNK ft_800BFF70();\n/* 0BFFAC */ void ftCo_800BFFAC(Fighter*);\n/* 0BFFD0 */ bool ftCo_800BFFD0(Fighter*, int, int);\n/* 0C0074 */ void ftCo_800C0074(Fighter*);\n/* 0C0098 */ M2C_UNK ft_800C0098();\n/* 0C0134 */ void ftCo_800C0134(Fighter*);\n/* 0C0200 */ void ftCo_800C0200(Fighter*, int);\n/* 0C0358 */ void ftCo_800C0358(Fighter*, Fighter*, s32);\n/* 0C0408 */ void ftCo_800C0408(ftCo_GObj* gobj);\n#define _ftcoll_h_\n/// Combo Count Logic\nvoid ftColl_800763C0(Fighter_GObj* attacker, Fighter_GObj* victim,\n                     enum_t attackID);\nvoid ftColl_80076444(\n    Fighter_GObj* attacker,\n    Fighter_GObj* victim); // Combo Count Logic + Get Attack ID\nvoid ftColl_8007646C(Fighter_GObj* attackItem,\n                     Fighter_GObj* victim); // Combo Count Logic w/ Item Owner\nvoid ftColl_800764DC(Fighter_GObj* gobj); // Check to end combo for victim\nvoid ftColl_80076528(\n    Fighter_GObj* gobj); // Combo count something + adjust FtPart_TopN\nvoid ftColl_800765AC(Fighter_GObj* victim); // Clear victim pointer from\n                                            // attacker upon freeing memory?\nvoid ftColl_800765E0(void); // Reset hitbox and phantom collision count?\nf32 ftColl_800765F0(Fighter* fp, Fighter_GObj* victim,\n                    f32 unk_floatvar); // Unk knockback related ?\nbool ftColl_8007B868(Fighter_GObj* gobj);\nvoid ftColl_80078754(Fighter_GObj*, Fighter_GObj*, bool);\nvoid ftColl_80078A2C(Fighter_GObj*);\nvoid ftColl_80078C70(Fighter_GObj*);\nvoid ftColl_8007925C(Fighter_GObj*);\nvoid ftColl_8007AB48(Fighter_GObj*);\nvoid ftColl_8007AB80(Fighter_GObj*);\nvoid ftColl_8007ABD0(HitCapsule*, u32 damageAmount, Fighter_GObj*);\nvoid ftColl_8007AE80(Fighter_GObj*);\nvoid ftColl_8007AEE0(Fighter_GObj*);\nvoid ftColl_8007AF28(Fighter_GObj* gobj);\nvoid ftColl_8007AFF8(Fighter_GObj*);\nvoid ftColl_8007B0C0(Fighter_GObj*, Tangibility);\nvoid ftColl_8007B1B8(Fighter_GObj* gobj, ShieldDesc* shield, HSD_GObjEvent cb);\nvoid ftColl_8007B320(Fighter_GObj*);\nvoid ftColl_8007B4E0(Fighter_GObj*);\nvoid ftColl_8007B62C(Fighter_GObj*, bool);\nvoid ftColl_8007B6EC(Fighter_GObj*);\nvoid ftColl_8007B760(Fighter_GObj*, int);\nvoid ftColl_8007B8CC(Fighter*, Fighter_GObj*);\nvoid ftColl_8007B8E8(Fighter_GObj*);\nvoid ftColl_GetWindOffsetVec(Fighter_GObj*, Vec3* out_wind);\nvoid ftColl_8007BA0C(Fighter_GObj*);\nvoid ftColl_8007BAC0(Fighter_GObj*);\nf32 ftColl_8007BBCC(Fighter_GObj*);\nvoid ftColl_8007BC90(Fighter_GObj*);\nvoid ftColl_8007BE3C(Fighter_GObj*);\n///  Update hitbox positions\nvoid ftColl_8007B8A8(HitCapsule*, Vec3*);\n/// Enable Reflect Bubble Update\nvoid ftColl_8007AEF8(Fighter_GObj*);\nvoid ftColl_CreateReflectHit(Fighter_GObj*, ReflectDesc*,\n                             HSD_GObjEvent on_reflect);\nvoid ftColl_CreateAbsorbHit(Fighter_GObj*, AbsorbDesc*);\nvoid ftColl_8007AF10(Fighter_GObj*);\nvoid ftColl_8007B5AC(ftCo_Fighter* fp, HurtCapsule* arg1,\n                     struct UNK_SAMUS_S2* arg2);\nvoid ftColl_8007B7FC(Fighter*, int);\nvoid ftColl_80076640(void);\nvoid ftColl_80076764(int arg0, int arg1, int arg2, M2C_UNK arg3,\n                     ftCo_Fighter* arg4, int arg5);\nvoid ftColl_80076808(Fighter* attacker, HitCapsule*, int, Fighter* victim,\n                     int);\nvoid ftColl_800768A0(void);\nbool ftColl_8007699C(Fighter*, HitCapsule*, Fighter*, HitCapsule*);\nvoid ftColl_800784B4(void);\nbool ftColl_80076CBC(Fighter*, HitCapsule*, Fighter*);\nbool ftColl_80076ED8(Fighter*, HitCapsule*, Fighter*, HurtCapsule*);\nM2C_UNK ftColl_8007891C();\nM2C_UNK ftColl_80078488();\nM2C_UNK ftColl_80077970();\nM2C_UNK ftColl_80077C60();\nM2C_UNK ftColl_80078998();\nM2C_UNK ftColl_80078384();\nM2C_UNK ftColl_80078538();\nM2C_UNK ftColl_8007861C();\nM2C_UNK ftColl_800787B4();\nvoid ftColl_800788D4(Fighter_GObj* gobj);\nM2C_UNK ftColl_80079AB0();\nfloat ftColl_80079C70(Fighter*, Fighter*, void*, int);\nfloat ftColl_80079EA8(Fighter*, HitCapsule*, int);\nM2C_UNK ftColl_8007A06C();\nbool ftColl_8007AC68(int kb_angle);\nvoid ftColl_8007AC9C(HitCapsule*, int, Fighter_GObj*);\nvoid ftColl_8007AD18(ftCo_Fighter* fp, HitCapsule*);\nM2C_UNK ftColl_8007AF60();\nvoid ftColl_8007AFC8(Fighter_GObj* gobj, int);\nvoid ftColl_8007B064(Fighter_GObj* gobj, enum_t arg1);\nvoid ftColl_8007B128(s8, int);\nM2C_UNK ftColl_80077464();\n/* 07B6A0 */ void ftColl_8007B6A0(Fighter_GObj* gobj);\n/* 07B7A4 */ void ftColl_8007B7A4(Fighter_GObj* gobj, int);\nvoid ftColl_80078710(Fighter_GObj* gobj);\n#define MELEE_FT_FTDATA_H\ntypedef struct ftData_UnkModelStruct {\n    Fighter_ModelEvent model_events[FTKIND_MAX];\n    unk_t (*getter[FTKIND_MAX])(HSD_GObj*);\n} ftData_UnkModelStruct;\nextern Fighter_UnkMtxEvent ftData_UnkMtxFunc0[FTKIND_MAX];\nextern ftData_UnkModelStruct ftData_UnkIntBoolFunc0;\nextern Fighter_UnkPtrEvent ftData_UnkDemoCallbacks0[FTKIND_MAX];\n/* 0855C8 */ void ftData_800855C8(enum_t id, int slot);\n/* 08572C */ void ftData_8008572C(s32);\n/* 08578C */ void ftData_8008578C(enum_t id, int slot);\n/* 0857E0 */ void ftData_800857E0(bool);\n/* 085820 */ void ftData_80085820(FighterKind, int costume_id);\n/* 0858E4 */ void ftData_800858E4(FighterKind, int costume_id);\n/* 0859A8 */ void ftData_800859A8(Fighter*);\n/* 085A14 */ void ftData_80085A14(bool);\n/* 085B10 */ void ftData_80085B10(Fighter*);\n/* 085B98 */ void ftData_80085B98(Fighter*, int, int);\n/* 085CD8 */ void ftData_80085CD8(Fighter*, Fighter*, enum_t msid);\n/* 085E50 */ u32 ftData_80085E50(Fighter*, u32);\n/* 085FD4 */ struct {\n    /* +0 */ M2C_UNK x0;\n    /* +4 */ M2C_UNK x4;\n    /* +8 */ M2C_UNK x8;\n}* ftData_80085FD4(Fighter* fp, FtMotionId msid);\n/* 086060 */ M2C_UNK ftData_80086060();\nvoid ftData_80085560(s32, bool);\n/// One load  callback for every character.\nextern HSD_GObjEvent ftData_OnLoad[FTKIND_MAX];\n/// One death callback for every character.-\nextern HSD_GObjEvent ftData_OnDeath[FTKIND_MAX];\nextern HSD_GObjEvent ftData_OnAbsorb[FTKIND_MAX];\n/// probably ft_OnSomething\nextern HSD_GObjEvent ftData_UnkMotionStates3[FTKIND_MAX];\nextern HSD_GObjEvent ftData_OnUserDataRemove[FTKIND_MAX];\nextern Event ftData_Table_Unk1[FTKIND_MAX];\nextern Fighter_ItemEvent ftData_OnItemPickupExt[FTKIND_MAX];\nextern HSD_GObjEvent ftData_SpecialS[FTKIND_MAX];\nextern HSD_GObjEvent ftData_SpecialAirHi[FTKIND_MAX];\nextern HSD_GObjEvent ftData_SpecialAirLw[FTKIND_MAX];\nextern HSD_GObjEvent ftData_SpecialAirS[FTKIND_MAX];\nextern HSD_GObjEvent ftData_SpecialAirN[FTKIND_MAX];\nextern ftData_UnkCountStruct ftData_UnkIntPairs[FTKIND_MAX];\nextern Fighter_DemoStrings* ftData_803C2468[FTKIND_MAX];\nextern Fighter_MotionFileStringGetter ftData_803C24EC[FTKIND_MAX];\n#define GALE01_0BE7E0\n#define MELEE_PL_FORWARD_H\n#define PL_SLOT_MAX 6\ntypedef struct plAllocInfo2 plAllocInfo2;\n/* 0BE7E0 */ Fighter_GObj* ftDemo_CreateFighter(plAllocInfo2* alloc_info);\n/* 0BEB28 */ void ftDemo_ObjAllocInit(void);\n/* 0BEB60 */ void ftDemo_SetArchiveData(int pairs_idx, HSD_Archive* arg1,\n                                        int arr_idx);\n/* 0BEC08 */ char* ftDemo_GetMotionFileString(int arg0, int arg1);\n/* 0BEC74 */ void ftDemo_SetFacingDirection(Fighter_GObj* gobj,\n                                            float facing_dir);\n#define GALE01_0C0658\n/* 0C0658 */ M2C_UNK ftCo_800C0658(M2C_UNK arg0);\n/* 0C0674 */ M2C_UNK ftCo_800C0674();\n/* 0C0694 */ enum_t ftCo_800C0694(Fighter* fp);\n/* 0C06B4 */ M2C_UNK ftCo_800C06B4();\n/* 0C06C0 */ void ftCo_800C06C0(void);\n/* 0C06E8 */ M2C_UNK ftCo_800C06E8();\n/* 0C0764 */ M2C_UNK ftCo_800C0764();\n/* 0C07F8 */ M2C_UNK ftCo_800C07F8();\n/* 459A68 */ extern M2C_UNK ft_80459A68;\n/* 459A74 */ extern M2C_UNK ft_80459A74;\n/* 459A8C */ extern M2C_UNK ft_80459A8C;\n/* 4D6570 */ extern M2C_UNK ft_804D6570;\n/* 4D6574 */ extern M2C_UNK ft_804D6574;\n/* 4D6578 */ extern M2C_UNK ft_804D6578;\n#define MELEE_FT_FTDRAWCOMMON_H\nvoid ftDrawCommon_80080E18(HSD_GObj*, int);\nMtxPtr ftDrawCommon_8008051C(HSD_GObj*, MtxPtr);\nvoid ftDrawCommon_800805C8(HSD_GObj* gobj, s32 arg1, s32 arg2);\nvoid ftDrawCommon_80081118(void);\nvoid ftDrawCommon_80081140(void);\nvoid ftDrawCommon_80081168(void);\nvoid ftDrawCommon_80081200(void);\nvoid ftDrawCommon_80080C28(HSD_GObj* gobj, s32 arg1);\n#define _ftlib_h_\ns32 ftLib_800860C4(void);\nbool ftLib_800860E8(void);\nbool ftLib_80086140(void);\nHSD_GObj* ftLib_80086198(HSD_GObj*);\nHSD_GObj* ftLib_8008627C(Vec3* pos, HSD_GObj*);\nHSD_GObj* ftLib_80086368(Vec3*, HSD_GObj*, f32);\nf32 ftLib_800864A8(Vec3*, HSD_GObj*);\nf32 ftLib_800865C0(HSD_GObj*);\ns32 ftLib_800865CC(HSD_GObj*);\nvoid ftLib_800865D8(HSD_GObj*, f32*, f32*);\nvoid* ftLib_800865F0(HSD_GObj*);\nvoid* ftLib_80086630(HSD_GObj*, s32);\nvoid ftLib_80086644(HSD_GObj*, Vec3*);\nvoid ftLib_80086664(HSD_GObj*, Vec3*);\nvoid ftLib_80086684(HSD_GObj*, Vec3*);\nvoid ftLib_SetScale(HSD_GObj*, f32);\nvoid ftLib_800866DC(HSD_GObj*, Vec3*);\nvoid ftLib_80086724(HSD_GObj*, HSD_GObj*);\nvoid ftLib_80086764(HSD_GObj*);\nHSD_GObj* ftLib_80086794(HSD_GObj*);\nbool ftLib_800867A0(HSD_GObj*, HSD_GObj*);\nHSD_GObj* ftLib_800867CC(HSD_GObj*);\nbool ftLib_800867D8(HSD_GObj*);\nvoid ftLib_800867E8(HSD_GObj*);\nvoid ftLib_80086824(void);\nvoid ftLib_8008688C(HSD_GObj*);\nvoid ftLib_800868A4(void);\nbool ftLib_800868D4(HSD_GObj*, HSD_GObj*);\n/// @returns @c true if @p gobj is a #Fighter, otherwise @c false.\nbool ftLib_80086960(HSD_GObj* gobj);\nCollData* ftLib_80086984(HSD_GObj*);\nvoid ftLib_80086990(HSD_GObj*, Vec3*);\nf32 ftLib_800869D4(HSD_GObj*);\nf32 ftLib_800869F8(HSD_GObj*);\nf32 ftLib_80086A0C(HSD_GObj*);\nbool ftLib_80086A18(HSD_GObj*);\nvoid ftLib_80086A4C(HSD_GObj*, f32);\nbool ftLib_80086A58(HSD_GObj*, S32Vec2*);\nbool ftLib_80086A8C(HSD_GObj*);\nbool ftLib_80086B64(HSD_GObj*);\nCameraBox* ftLib_80086B74(HSD_GObj*);\nf32 ftLib_80086B80(HSD_GObj*);\nvoid ftLib_80086B90(HSD_GObj*, Vec3* v);\nvoid ftLib_80086BB4(HSD_GObj*);\nu8 ftLib_80086BE0(HSD_GObj*);\nvoid ftLib_80086BEC(HSD_GObj*, Vec3*);\n/// @returns A fighter action state ID.\nenum_t ftLib_80086C0C(HSD_GObj*);\nvoid ftLib_80086C18(HSD_GObj*, s32, s32);\nvoid ftLib_80086C9C(s32, s32);\nvoid ftLib_80086D40(HSD_GObj*, s32, s32);\nvoid ftLib_80086DC4(s32, s32);\nvoid ftLib_80086E68(HSD_GObj*);\ns32 ftLib_80086EB4(HSD_GObj*);\nbool ftLib_80086EC0(HSD_GObj*);\nbool ftLib_80086ED0(HSD_GObj*);\nbool ftLib_80086F4C(HSD_GObj*);\nf32 ftLib_80086F80(HSD_GObj*);\nbool ftLib_80086FA8(HSD_GObj*);\nbool ftLib_80086FD4(HSD_GObj*, HSD_GObj*);\nbool ftLib_8008701C(HSD_GObj*);\nvoid ftLib_8008702C(s32);\nvoid ftLib_80087050(s32);\nbool ftLib_80087074(HSD_GObj*, Vec3*);\nbool ftLib_800870BC(HSD_GObj*, void**);\nvoid ftLib_800870F0(HSD_GObj*, s32);\ns32 ftLib_80087120(HSD_GObj*);\nvoid ftLib_80087140(HSD_GObj*);\nvoid ftLib_800871A8(HSD_GObj*, HSD_GObj*);\nbool ftLib_80087284(HSD_GObj*);\nFighterKind ftLib_800872A4(HSD_GObj*);\nvoid* ftLib_800872B0(HSD_GObj*);\nbool ftLib_800872BC(HSD_GObj*);\ns32 ftLib_80087300(HSD_GObj*);\ns32 ftLib_8008730C(HSD_GObj*);\ns32 ftLib_8008731C(HSD_GObj*);\nbool ftLib_8008732C(HSD_GObj*);\nbool ftLib_80087354(HSD_GObj*);\nbool ftLib_8008737C(HSD_GObj*);\nbool ftLib_800873A4(HSD_GObj*);\nbool ftLib_800873CC(HSD_GObj*);\nbool ftLib_800873F4(HSD_GObj*);\nHSD_GObj* ftLib_8008741C(u32);\nf32 ftLib_80087454(HSD_GObj*);\nu32 ftLib_80087460(HSD_GObj*);\ns32 ftLib_8008746C(HSD_GObj*);\ns32 ftLib_800874BC(HSD_GObj*);\nvoid ftLib_800874CC(HSD_GObj*, s32, s32);\nvoid ftLib_80087508(s8, u8);\nvoid ftLib_80087574(s8);\nvoid ftLib_80087610(u8);\nvoid ftLib_800876B4(HSD_GObj*);\nbool ftLib_800876D4(HSD_GObj*);\ns32 ftLib_800876F4(HSD_GObj*);\ns32 ftLib_80087700(HSD_GObj*);\nvoid ftLib_8008770C(HSD_GObj*, void* dst);\nvoid ftLib_80087744(HSD_GObj*, void* dst);\nvoid ftLib_8008777C(HSD_GObj*);\nbool ftLib_800877D4(HSD_GObj*);\n#define GALE01_0CDAB4\n/* 0CDAB4 */ M2C_UNK ftCo_800CDAB4();\n/* 0CDB14 */ void ftCo_LipstickSwing_Anim(ftCo_GObj* gobj);\n/* 0CDB34 */ void ftCo_LipstickSwing_IASA(ftCo_GObj* gobj);\n/* 0CDB54 */ void ftCo_LipstickSwing_Phys(ftCo_GObj* gobj);\n/* 0CDB74 */ void ftCo_LipstickSwing_Coll(ftCo_GObj* gobj);\n/* 0CDB9C */ M2C_UNK ft_800CDB9C();\n#define GALE01_0BF260\nstruct _m2c_stack_ftMaterial_800BF534 {\n    /* 0x00 */ char pad_0[0x10];\n    /* 0x10 */ M2C_UNK sp10; /* inferred */\n    /* 0x10 */ char pad_10[8];\n    /* 0x18 */ M2C_UNK sp18; /* inferred */\n    /* 0x18 */ char pad_18[8];\n    /* 0x20 */ int sp20; /* inferred */\n    /* 0x24 */ char pad_24[8]; /* maybe part of sp20[3]? */\n    /* 0x2C */ u32 sp2C; /* inferred */\n    /* 0x30 */ char pad_30[4];\n    /* 0x34 */ u32 sp34; /* inferred */\n    /* 0x38 */ int sp38; /* inferred */\n    /* 0x3C */ u32 sp3C; /* inferred */\n    /* 0x40 */ int sp40; /* inferred */\n    /* 0x44 */ char pad_44[0x40]; /* maybe part of sp40[0x11]? */\n    /* 0x84 */ int sp84; /* inferred */\n    /* 0x88 */ char pad_88[0x20];\n}; /* size = 0xA8 */\n/* 0BF260 */ void ftMaterial_800BF260(void);\n/* 0BF2B8 */ void ftMaterial_800BF2B8(HSD_MObj* mobj, u32 rendermode);\n/* 0BF534 */ HSD_TExp* ftMaterial_800BF534(HSD_MObj* mobj, HSD_TObj* tobj_top,\n                                           HSD_TExp** list);\n/* 0BF6BC */ M2C_UNK ftMaterial_800BF6BC();\n/* 0BFB4C */ void ftMaterial_800BFB4C(ftCo_GObj* gobj, GXColor* diffuse);\n/* 0BFD04 */ void ftMaterial_800BFD04(ftCo_GObj* gobj);\n/* 0BFD9C */ void ftMaterial_800BFD9C(ftCo_GObj* gobj);\n/* 3C6980 */ extern HSD_MObjInfo ftMObj;\n#define GALE01_0C8170\n/* 0C8170 */ M2C_UNK ft_800C8170();\n/* 0C8348 */ void ftCo_800C8348(ftCo_GObj*, s32, s32);\n/* 0C8438 */ void ftCo_800C8438(ftCo_GObj* gobj);\n/* 0C8540 */ void ftCo_800C8540(ftCo_GObj* gobj);\n/* 0C85B8 */ M2C_UNK ft_800C85B8();\n#define MELEE_FT_FTPARTS_H\n#define _hsd_perf_h_\ntypedef struct _HSD_PerfStat {\n    f32 cpu_time;\n    f32 draw_time;\n    f32 total_time;\n    u32 nb_mtx_load;\n    u32 env_blend[32];\n} HSD_PerfStat;\nextern HSD_PerfStat HSD_PerfCurrentStat;\nvoid HSD_PerfInitStat(void);\nvoid HSD_PerfSetStartTime(void);\nvoid HSD_PerfSetCPUTime(void);\nvoid HSD_PerfSetDrawTime(void);\nvoid HSD_PerfSetTotalTime(void);\nvoid HSD_PerfCountEnvelopeBlending(s32 n);\nstatic inline void HSD_PerfCountMtxLoad(void)\n{\n    HSD_PerfCurrentStat.nb_mtx_load += 1;\n}\nextern HSD_PerfStat HSD_PerfCurrentStat;\nvoid ftParts_80074ACC(ftCo_GObj* gobj);\nu32 ftParts_8007506C(s32 ftkind, u32 part);\nvoid ftParts_JObjInfoInit(void);\nvoid ftParts_IntpJObjInfoInit(void);\nvoid ftParts_PObjInfoInit(void);\nvoid ftParts_80074B0C(HSD_GObj*, int, int);\nvoid ftParts_80073758(HSD_JObj*);\nvoid ftParts_80074148(void);\nvoid ftParts_80074170(void);\nvoid func_800743E0(void);\nvoid ftParts_800749CC(HSD_GObj*);\nvoid ftParts_80074A4C(HSD_GObj*, enum_t, enum_t);\nvoid ftParts_80074A8C(HSD_GObj*);\nvoid ftParts_80074E58(Fighter*);\nFighter_Part ftParts_8007500C(Fighter*, Fighter_Part);\nvoid ftParts_JObjSetRotation(HSD_JObj*, Quaternion*);\nvoid ftParts_8007592C(Fighter*, s32, f32);\nvoid ftParts_80075AF0(Fighter*, s32, f32);\nvoid ftParts_80075CB4(Fighter*, s32, f32);\nvoid ftParts_800753D4(Fighter*, s32, unk_t);\nf32 ftParts_80075F48(Fighter*, s32);\ns32 ftParts_80074A74(HSD_GObj*, s32);\nvoid ftParts_80075650(HSD_GObj* gobj, HSD_JObj*, u32*);\nvoid ftParts_8007487C(unk_t item, u32*, u8 costume_id, u32*, u32*);\nvoid ftParts_80074CA0(u32*, s32, u32*);\nvoid ftParts_80074D7C(u32*, s32, u32*);\nvoid ftParts_SetupParts(HSD_GObj* fighter_obj);\n/// @returns Blend frames.\nf32 ftParts_80075E78(Fighter*, bool);\nvoid ftParts_JObjMakePositionMtx(HSD_JObj* jobj, Mtx mtx, Mtx rmtx);\nvoid ftParts_8007462C(void);\nvoid ftParts_8007482C(void);\ns32 ftParts_IntpJObjLoad(HSD_JObj* jobj, HSD_Joint* joint, HSD_JObj* parent);\nvoid ftParts_80074B6C(void);\nvoid ftParts_80073830(void);\nvoid ftParts_80075028(void);\nvoid ftParts_800750C8(void);\nvoid ftParts_80075240(void);\nvoid ftParts_80075304(void);\nvoid ftParts_800755E8(void);\nvoid ftParts_800739B8(void);\nvoid ftParts_80073CA8(void);\nvoid ftParts_PObjSetupMtx(HSD_PObj* pobj, Mtx vmtx, Mtx pmtx, u32 rendermode);\nvoid ftParts_80074194(Fighter* fighter, FighterBone* bone, HSD_JObj* jobj,\n                      u32* dobj_index, u32 tree_depth);\n#define GALE01_0CD82C\n/* 0CD82C */ M2C_UNK ftCo_800CD82C();\n/* 0CD88C */ void ftCo_StarRodSwing_Anim(ftCo_GObj* gobj);\n/* 0CD8AC */ void ftCo_StarRodSwing_IASA(ftCo_GObj* gobj);\n/* 0CD8CC */ void ftCo_StarRodSwing_Phys(ftCo_GObj* gobj);\n/* 0CD8EC */ void ftCo_StarRodSwing_Coll(ftCo_GObj* gobj);\n/* 0CD914 */ M2C_UNK ft_800CD914();\n#define GALE01_0CCE94\n/* 0CCE94 */ void ftCo_FallAerial_Coll(ftCo_GObj* gobj);\n/* 0CCF58 */ void ftCo_Attack_800CCF58(ftCo_GObj* gobj, enum_t);\n#define GALE01_3C54A8\n/* 3C54A8 */ extern char ftWaitAnim_803C54A8[];\n/* 3C54C4 */ extern char ftWaitAnim_803C54C4[];\n#define MELEE_FT_FTWALKCOMMON_H\nvoid ftWalkCommon_800DFCA4(ftCo_GObj* gobj, FtMotionId msid,\n                           MotionFlags ms_flags, float anim_start,\n                           float slow_anim_frame, float middle_anim_frame,\n                           float fast_anim_frame, float slow_anim_rate,\n                           float middle_anim_rate, float fast_anim_rate,\n                           float accel_mul);\nvoid ftWalkCommon_800DFDDC(ftCo_GObj* gobj);\nvoid ftWalkCommon_800DFEC8(ftCo_GObj* gobj, void (*arg_cb)(ftCo_GObj*, f32));\nvoid ftWalkCommon_800E0060(ftCo_GObj* gobj);\nbool ftWalkCommon_800DFC70(ftCo_GObj* gobj);\nFtWalkType ftWalkCommon_GetWalkType(ftCo_GObj* gobj);\n#define MELEE_FT_FTWALLJUMP_H\nbool ftWallJump_8008169C(HSD_GObj* gobj);\n#define GALE01_1601C4\nstruct datetime {\n    u16 year;\n    u8 month, day, hour, minute, second;\n};\n/* 160854 */ void gm_80160854(void);\n/* 160968 */ bool gm_80160968(void);\n/* 164600 */ bool gm_80164600(void);\n/* 164840 */ bool gm_80164840(u8);\n/* 164ABC */ bool gm_80164ABC(void);\n/* 167320 */ void gm_80167320(int slot, bool);\n/* 168B34 */ void gm_80168B34(void);\n/* 1692E8 */ void gm_801692E8(int, struct datetime* datetime);\n/* 16AE44 */ bool gm_8016AE44(void);\n/* 16AE80 */ bool gm_8016AE80(void);\n/* 16AEDC */ bool gm_8016AEDC(void);\n/* 16B014 */ bool gm_8016B014(void);\n/* 16B0B4 */ bool gm_8016B0B4(void);\n/* 16B0D4 */ bool gm_8016B0D4(void);\n/* 16B0FC */ bool gm_8016B0FC(void);\n/* 16B14C */ /* static */ M2C_UNK gm_8016B14C();\n/* 16B168 */ bool gm_8016B168(void);\n/* 16B1C4 */ bool gm_8016B1C4(void);\n/* 16B1D8 */ bool gm_8016B1D8(void);\n/* 16B238 */ bool gm_8016B238(void);\n/* 16B248 */ void gm_8016B248(void);\n/* 16B3A0 */ bool gm_8016B3A0(void);\n/* 16B3D8 */ bool gm_8016B3D8(void);\n/* 16B41C */ bool gm_8016B41C(void);\n/* 16B498 */ void gm_8016B498(void);\n/* 16C5C0 */ bool gm_8016C5C0(int pl_slot);\n/* 16C6C0 */ /* static */ M2C_UNK gm_8016C6C0();\n/* 16C75C */ /* static */ M2C_UNK gm_8016C75C();\n/* 17E068 */ bool gm_8017E068(void);\n/* 18841C */ bool gm_8018841C(void);\n#define GALE01_1A3680\nunk_t gm_801A4BB8(void);\nbool gm_801A45E8(s32);\nvoid gm_801A4510(void);\n/* 1A4310 */ /* static */ M2C_UNK gm_801A4310();\n#define _gmmain_lib_h_\nstruct gmm_x1CB0 {\n    u8 padding_x0[0x16 - 0x0];\n    /* 0x1CC6 0x16 */ u8 saved_language;\n    u8 padding_x16[0x20 - 0x16 - 1];\n};\ntypedef union _UnkFlagStruct2 {\n    struct {\n        u16 b0 : 1;\n        u16 b1 : 1;\n        u16 b2 : 1;\n        u16 b3 : 1;\n        u16 b4 : 1;\n        u16 b5 : 1;\n        u16 b6 : 1;\n        u16 b789 : 3;\n        u16 b10_to_12 : 3;\n        u16 b13_to_15 : 3;\n    } bits;\n    u16 flags;\n} UnkFlagStruct2;\nstruct gmm_x1F2C {\n    u8 padding_x0[0x78];\n    s8 x78;\n    s8 x79;\n    UnkFlagStruct x7A;\n    s8 x7B;\n    UnkFlagStruct2 x7C;\n    s16 x7E;\n    s8 x80;\n    s8 x81;\n    s8 x82;\n    s8 x83;\n    s32 x84;\n    s32 x88;\n    s32 x8C;\n    s32 x90;\n    s32 x94;\n    s32 x98;\n    s32 x9C;\n    s16 xA0;\n    s16 xA2;\n    s32 xA4;\n    s32 xA8;\n};\nstruct gmm_x2FF8_inner {\n    u8 padding[0x1A2];\n    s8 x1A2;\n    u8 padding_x1A2;\n};\nstruct gmm_x2FF8 {\n    struct gmm_x2FF8_inner inner[19];\n};\ntypedef struct _GameRules {\n    /*0x00*/ u8 unk_x0;\n    /*0x01*/ u8 unk_x1;\n    /*0x02*/ u8 mode;\n    /*0x03*/ u8 time_limit;\n    /*0x04*/ u8 stock_count;\n    /*0x05*/ u8 handicap;\n    /*0x06*/ u8 damage_ratio;\n    /*0x07*/ u8 unk_x7;\n    /*0x08*/ u8 stock_time_limit;\n    /*0x09*/ u8 friendly_fire;\n    /*0x0A*/ u8 pause;\n    /*0x0B*/ u8 score_display;\n    /*0x0C*/ u8 unk_xc;\n    /*0x0D*/ u8 unk_xd[3];\n    /*0x10*/ u8 unk_x10;\n    /*0x11*/ u8 unk_x11[7];\n} GameRules;\nstruct gmm_x1868 {\n    /* 0x1868 */ s32 x1868;\n    u8 padding_x1868[0x1A18 - 0x1868 - 4];\n    /* 0x1A18 */ s32 x1A18;\n    /* 0x1A1C */ s32 x1A1C;\n    /* 0x1A20 */ s32 x1A20;\n    /* 0x1A24 */ s32 x1A24;\n    /* 0x1A28 */ s32 x1A28;\n    /* 0x1A2C */ s32 x1A2C;\n    /* 0x1A30 */ s32 x1A30;\n    /* 0x1A34 */ s32 x1A34;\n    /* 0x1A38 */ s32 x1A38;\n    /* 0x1A3C */ s32 x1A3C;\n    /* 0x1A40 */ s32 x1A40;\n    /* 0x1A44 */ s32 x1A44;\n    /* 0x1A48 */ s32 x1A48;\n    /* 0x1A4C */ s32 x1A4C;\n    /* 0x1A50 */ s32 x1A50;\n    /* 0x1A54 */ s32 x1A54;\n    /* 0x1A58 */ s32 x1A58;\n    /* 0x1A5C */ s32 x1A5C;\n    /* 0x1A60 */ s32 x1A60;\n    /* 0x1A64 */ s32 x1A64;\n    /* 0x1A68 */ s64 x1A68;\n    /* 0x1A70 */ s32 x1A70[4];\n    u8 padding_x1A70[0x1B3C - 0x1A70 - 16];\n    /* 0x1B3C */ u8 x1B3C;\n    /* 0x1B40 */ u32 x1B40[3];\n    /* 0x1B4C */ u32 x1B4C[3];\n    /* 0x1B58 */ u32 x1B58[3];\n    u8 padding_x1B58[0x1B80 - 0x1B58 - 3 * 4];\n    /* 0x1B80 */ u32 x1B80[4];\n    u8 padding_x1B80[0x1C88 - 0x1B80 - 4 * 4];\n    /* 0x1C88 */ u32 x1C88[3];\n    u8 padding_x1C88[0x1CB0 - 0x1C88 - 3 * 4];\n    /* 0x1CB0 */ struct gmm_x1CB0 x1CB0;\n    /* 0x1CD0 */ s16 x1CD0;\n    /* 0x1CD2 */ s16 x1CD2;\n    /* 0x1CD4 */ s32 x1CD4;\n    u8 padding_x1CD4[0x1F2C - 0x1CD4 - 4];\n    /* 0x1F2C */ struct gmm_x1F2C x1F2C[25];\n    /* 0x2FF8 */ struct gmm_x2FF8 x2FF8[2];\n    //  u8 padding_x2FF8[0x7000 - 0x2FF8 - 0x1A4*19*2];\n};\nextern struct gmm_x0 {\n    /* 0x0000 */ u8 language;\n    /* 0x0001 */ u8 x1;\n    u8 padding_x1[0x39 - 0x1 - 1];\n    /* 0x0039 */ u8 x39[11];\n    /* 0x0044 */ s32 x44;\n    u8 padding_x44[0x6C - 0x44 - 4];\n    /* 0x006C */ u32 x6C[4];\n    u8 padding_x6C[0x51C - 0x6C - 4 * 4];\n    /* 0x051C */ s32 x51C;\n    /* 0x0520 */ s16 x520;\n    /* 0x0522 */ s16 x522;\n    /* 0x0524 */ s16 x524;\n    /* 0x0526 */ s16 x526;\n    /* 0x0528 */ s32 x528;\n    /* 0x052C */ s32 x52C;\n    u8 padding_x52C[0x57C - 0x52C - 4];\n    /* 0x057C */ s32 x57C;\n    u8 padding_x57C[0x586 - 0x57C - 4];\n    /* 0x0586 */ s16 x586;\n    /* 0x0588 */ s8 x588[4];\n    u8 padding_x588[0x1850 - 0x588 - 4];\n    /* 0x1850 */ GameRules x1850;\n    struct gmm_x1868 thing;\n}* gmMainLib_804D3EE0;\nstruct gmm_retval_ED98 {\n    u8 padding[0xC];\n    s32 xC;\n    s32 x10;\n    s32 x14;\n    s32 x18;\n    s32 x1C;\n};\nstruct gmm_retval_EDBC {\n    s32 x0;\n    s32 x4;\n    s32 x8;\n    u8 padding[0x4C - 0x8 - 4];\n    s32 x4C[4];\n    u8 padding_x4C[0xB0 - 0x4C - 4 * 4];\n    s32 xB0[4];\n};\nstruct gmm_retval_EDB0 {\n    s32 x0;\n    s32 x4;\n};\nstruct gmm_retval_EDBC* gmMainLib_8015EDBC(void);\nstruct gmm_x1CB0* gmMainLib_8015CC58(void);\nstruct gmm_retval_ED98* gmMainLib_8015ED98(void);\nstruct gmm_retval_EDB0* gmMainLib_8015EDB0(void);\ns8* gmMainLib_8015CE44(s32, s32);\n/// @todo static\nvoid gmMainLib_8015D888(u32);\nvoid gmMainLib_8015D8FC(u32);\nu32 gmMainLib_8015D94C(u32);\nu32 gmMainLib_8015DA90(u32 arg0);\nvoid gmMainLib_8015FCC0(void);\nvoid gmMainLib_8015FBA4(void);\nGameRules* gmMainLib_8015CC34(void);\nvoid* gmMainLib_8015CD5C(void);\nvoid* gmMainLib_8015CD68(void);\nvoid* gmMainLib_8015CC40(void);\nvoid* gmMainLib_8015CD74(void);\nvoid* gmMainLib_8015CD80(void);\nvoid* gmMainLib_8015CD8C(void);\nvoid* gmMainLib_8015CD98(void);\nvoid* gmMainLib_8015CDA4(void);\nvoid* gmMainLib_8015CDB0(void);\nvoid* gmMainLib_8015CDBC(void);\nvoid* gmMainLib_8015CDC8(void);\nvoid* gmMainLib_8015CDD4(void);\nvoid* gmMainLib_8015CDE0(void);\nvoid* gmMainLib_8015CC4C(void);\nvoid gmMainLib_8015CDEC(void);\nvoid gmMainLib_8015CEB4(s32 arg0);\ns32 gmMainLib_8015CEFC(s32 arg0);\ns32 gmMainLib_8015CF5C(s32 arg0);\nvoid gmMainLib_8015CF70(s32 arg0, s32 arg1);\nvoid gmMainLib_8015CF84(void);\ns32 gmMainLib_8015CF94(void);\ns32 func_8015CFAC(void);\ns8* gmMainLib_8015CFB4(u8 arg0);\ns32 gmMainLib_8015CFCC(u8 arg0);\nvoid gmMainLib_8015D00C(u8 arg0);\ns32* gmMainLib_8015D06C(u8 arg0);\ns32* gmMainLib_8015D084(s32 arg0);\nvoid* gmMainLib_8015CC64(s32 arg0);\ns32* gmMainLib_8015D0C0(u8 arg0);\ns32 gmMainLib_8015D0D8(u8 arg0);\ns32 gmMainLib_8015D0F4(u8 arg0);\nvoid gmMainLib_8015D134(u8 arg0);\ns8* gmMainLib_8015D194(u8 arg0);\nvoid* gmMainLib_8015CC78(void);\ns32 gmMainLib_8015D1AC(u8 arg0);\nvoid gmMainLib_8015D1C8(u8 arg0, s32 arg1);\ns32* gmMainLib_8015D1E8(u8 arg0);\ns32 gmMainLib_8015D200(u8 arg0);\ns32 gmMainLib_8015D21C(u8 arg0);\nvoid gmMainLib_8015D25C(u8 arg0);\ns8* gmMainLib_8015D2BC(u8 arg0);\ns32 gmMainLib_8015D2D4(u8 arg0);\nvoid* gmMainLib_8015CC84(void);\nvoid gmMainLib_8015D2F0(u8 arg0, s32 arg1);\ns32* gmMainLib_8015D310(u8 arg0);\ns32 gmMainLib_8015D328(u8 arg0);\ns32 gmMainLib_8015D344(u8 arg0);\nvoid gmMainLib_8015D384(u8 arg0);\ns8* gmMainLib_8015D3E4(u8 arg0);\ns32 gmMainLib_8015D3FC(u8 arg0);\nvoid gmMainLib_8015D418(u8 arg0, s32 arg1);\nvoid* gmMainLib_8015CC90(void);\ns32* gmMainLib_8015D438(u8 arg0);\ns32* gmMainLib_8015D450(s32 arg0);\ns32 gmMainLib_8015D48C(u8 arg0);\ns32 gmMainLib_8015D4A8(u8 arg0);\nvoid* gmMainLib_8015CC9C(s32 arg0);\nvoid gmMainLib_8015D4E8(u8 arg0, s32 arg1);\ns32 gmMainLib_8015D508(void);\ns32 gmMainLib_8015D5DC(void);\ns32 gmMainLib_8015D640(void);\ns32* gmMainLib_8015D6A4(u8 arg0);\ns32 gmMainLib_8015D6BC(u8 arg0);\nvoid gmMainLib_8015D6D8(u8 arg0, s32 arg1);\ns32* gmMainLib_8015D6F8(u8 arg0);\nvoid* gmMainLib_8015CCE4(void);\ns32 gmMainLib_8015D710(u8 arg0);\nvoid gmMainLib_8015D72C(u8 arg0, s32 arg1);\ns16* gmMainLib_8015D74C(u8 arg0);\ns32 gmMainLib_8015D764(u8 arg0);\nvoid gmMainLib_8015D780(u8 arg0);\ns16* gmMainLib_8015D7A4(u8 arg0);\ns32* gmMainLib_8015D7BC(u8 arg0);\ns32* gmMainLib_8015D7D4(u8 arg0);\nvoid* gmMainLib_8015CCF0(void);\ns16* gmMainLib_8015D7EC(u8 arg0);\nvoid* gmMainLib_8015D804(s32 arg0);\ns32 gmMainLib_8015D818(u32 arg0);\nvoid gmMainLib_8015D8B0(u32 arg0);\ns32 gmMainLib_8015D8D8(u32 arg0);\nvoid* gmMainLib_8015CCFC(void);\nvoid gmMainLib_8015D924(u32 arg0);\nu32* gmMainLib_8015D970(ssize_t idx);\nbool gmMainLib_8015D984(u32 arg0);\nvoid* gmMainLib_8015CD08(void);\ns32 gmMainLib_8015DA1C(u32 arg0);\nvoid* gmMainLib_8015CD14(void);\nvoid gmMainLib_8015DA68(u32 arg0);\nvoid gmMainLib_8015DAB4(u32 arg0);\ns32 gmMainLib_8015DADC(u32 arg0);\nu8 gmMainLib_8015DB00(void);\nvoid gmMainLib_8015DB0C(u8 arg0);\nvoid gmMainLib_8015DB18(void);\nvoid gmMainLib_8015DB2C(u8 arg0, s32 arg2);\nvoid* gmMainLib_8015CD20(void);\nu8 gmMainLib_8015DB6C(u8 arg0);\nvoid gmMainLib_8015DB80(void);\nvoid* gmMainLib_8015CD2C(void);\nvoid* gmMainLib_8015CD38(void);\nvoid* gmMainLib_8015CD44(void);\nvoid* gmMainLib_8015CD50(void);\n#define MELEE_GR_FORWARD_H\ntypedef struct grDynamicAttr_UnkStruct grDynamicAttr_UnkStruct;\n#define MELEE_GR_GRANIME_H\nvoid grAnime_801C7FF8(HSD_GObj*, s32, s32, s32, f32, f32);\nvoid grAnime_801C8138(HSD_GObj*, enum_t, bool);\nbool grAnime_801C83D0(HSD_GObj*, bool, enum_t);\nvoid grAnime_801C8780(HSD_GObj*, u32, u32, f32, f32);\n#define _grtbattle_h_\nstatic void grBattle_80219C98(int);\nstatic void grBattle_80219CA4(void);\nstatic void grBattle_80219D54(void);\nstatic void grBattle_80219D58(void);\nstatic bool grBattle_80219D7C(void);\nstatic HSD_GObj* grBattle_80219D84(int gobj_id);\nstatic void grBattle_80219E6C(HSD_GObj*);\nstatic void grBattle_8021A114(HSD_GObj*);\nstatic void grBattle_8021A118(HSD_GObj*);\nstatic void grBattle_8021A11C(HSD_GObj*);\nstatic bool grBattle_8021A16C(HSD_GObj*);\nstatic void grBattle_8021A174(HSD_GObj*);\nstatic void grBattle_8021A198(HSD_GObj*);\nstatic void grBattle_8021A19C(HSD_GObj*);\nstatic bool grBattle_8021A1FC(HSD_GObj*);\nstatic void grBattle_8021A204(HSD_GObj*);\nstatic void grBattle_8021A208(HSD_GObj*);\nstatic void grBattle_8021A20C(HSD_GObj*);\nstatic bool grBattle_8021A264(HSD_GObj*);\nstatic void grBattle_8021A26C(HSD_GObj*);\nstatic void grBattle_8021A270(HSD_GObj*);\nstatic void grBattle_8021A274(HSD_GObj*);\nstatic bool grBattle_8021A2CC(HSD_GObj*);\nstatic void grBattle_8021A2D4(HSD_GObj*);\nstatic void grBattle_8021A2D8(HSD_GObj*);\nstatic void grBattle_8021A2DC(HSD_GObj*);\nstatic bool grBattle_8021A334(HSD_GObj*);\nstatic void grBattle_8021A33C(HSD_GObj*);\nstatic void grBattle_8021A340(HSD_GObj*);\nstatic void grBattle_8021A344(HSD_GObj*);\nstatic bool grBattle_8021A3B4(HSD_GObj*);\nstatic void grBattle_8021A3BC(HSD_GObj*);\nstatic void grBattle_8021A60C(HSD_GObj*);\nstatic bool grBattle_8021A610(int);\nstatic bool grBattle_8021A618(Vec3*, int, HSD_JObj*);\nbool grBattle_8021A10C(HSD_GObj*);\n#define GALE01_1E57BC\nvoid grBigBlue_801EF7D8(Vec3*);\n/* 1EF844 */ /* static */ M2C_UNK grBigBlue_801EF844();\n#define GALE01_1CD338\n/* 1CDF54 */ /* static */ M2C_UNK grCastle_801CDF54();\n#define GALE01_1DCCFC\nbool grCorneria_801E2D14(void);\nbool grCorneria_801E2CE8(void);\ns32 grCorneria_801E2B80(void);\nbool grCorneria_801E2C34(void);\nvoid grCorneria_801E2AF4(void);\nvoid grCorneria_801E2A6C(void);\n/* 1E2D90 */ bool grCorneria_801E2D90(enum_t);\n/* 1E2E50 */ /* static */ M2C_UNK grCorneria_801E2E50();\n#define _grdatfiles_h_\n// Appears to be related to stage audio\ntypedef struct _UnkBgmStruct {\n    s32 x0;\n    s32 x4;\n    s32 x8;\n    u32 xC;\n    u32 x10;\n    s16 x14;\n    s16 x16;\n    s16 x18;\n    u8 pad[0x64 - 0x1A];\n} UnkBgmStruct;\n// TODO: what is this struct?\ntypedef struct _UnkStage6B0 {\n    f32 x0;\n    s16 x4;\n    u8 x6_pad[2];\n    s16 x8;\n    s16 xA;\n    s32 xC;\n    s32 x10;\n    s32 x14;\n    f32 x18;\n    f32 x1C, x20, x24, x28;\n    u8 x2C_pad[0x2E - 0x2C];\n    s16 x2E;\n    s32 x30;\n    s32 x34;\n    s32 x38;\n    f32 x3C, x40, x44, x48;\n    bool x4C_fixed_cam;\n    f32 x50, x54, x58, x5C, x60, x64;\n    s16 x68;\n    u8 x6C_pad[0xB0 - 0x6A];\n    struct _UnkBgmStruct* xB0;\n    s32 xB4; // number of entries in xB0\n    s32 xB8;\n    s32 xBC;\n    s32 xC0;\n    s32 xC4;\n    s32 xC8;\n    s32 xCC;\n    s32 xD0;\n    s32 xD4;\n    s32 xD8;\n} UnkStage6B0;\ntypedef struct _UnkStageDat {\n    void* unk0;\n    s32 unk4;\n    struct {\n        struct HSD_Joint* unk0;\n        u8 x4_fill[0x20 - 0x4];\n        S16Vec3* unk20;\n        s32 unk24; // size of unk20 array\n        u8 x28_fill[0x34 - 0x28];\n    }* unk8;\n    s32 unkC;\n    s32* unk10;\n    s32 unk14;\n    u8 x18_fill[0x20 - 0x18];\n    void* unk20;\n    s32 unk24;\n    struct _UnkStageDatInternal** unk28;\n    s32 unk2C; // size\n} UnkStageDat;\ntypedef struct _UnkArchiveStruct {\n    HSD_Archive* unk0;\n    struct _UnkStageDat* unk4;\n    s32 unk8;\n} UnkArchiveStruct;\nvoid grDatFiles_801C5FC0(HSD_Archive*, void* data, u32 length);\nvoid grDatFiles_801C6038(void*, s32, s32);\nstatic void grDatFiles_801C6228(struct _UnkStageDat*);\nvoid grDatFiles_801C6288(void);\nstatic struct _UnkArchiveStruct* grDatFiles_801C62B4(void);\nstruct _UnkArchiveStruct* grDatFiles_801C6324(void);\nstruct _UnkArchiveStruct* grDatFiles_801C6330(s32);\nstruct _UnkArchiveStruct* grDatFiles_801C6478(void* data, s32 length);\n#define MELEE_GR_GRDISPLAY_H\nvoid grDisplay_801C5DB0(HSD_GObj*, int);\nvoid grDisplay_801C5F60(void);\n#define MELEE_GR_GRDYNAMICATTR_H\nstruct grDynamicAttr_UnkStruct {\n    grDynamicAttr_UnkStruct* next;\n    s32 unk4;\n    Vec3 unk8;\n    s32 unk14;\n    f32 unk18;\n    s32 unk1C;\n    u8 x0_fill[0x24 - 0x20];\n};\nint grDynamicAttr_801CA284(Vec3* v, int arg1);\nvoid grDynamicAttr_801CA0B4(void);\ngrDynamicAttr_UnkStruct*\ngrDynamicAttr_801CA0F8(s32 arg0, Vec3* v, enum_t floor_id, f32 f, s32 arg3);\nvoid grDynamicAttr_801CA1C0(grDynamicAttr_UnkStruct* arg);\nvoid grDynamicAttr_801CA224(void);\n#define _grfigure1_h_\nstatic void grFigure1_8020DFDC(int);\nstatic void grFigure1_8020DFE0(void);\nstatic void grFigure1_8020E050(void);\nstatic void grFigure1_8020E054(void);\nstatic bool grFigure1_8020E078(void);\nstatic HSD_GObj* grFigure1_8020E080(int);\nstatic void grFigure1_8020E168(HSD_GObj*);\nstatic bool grFigure1_8020E194(HSD_GObj*);\nstatic void grFigure1_8020E19C(HSD_GObj*);\nstatic void grFigure1_8020E1A0(HSD_GObj*);\nstatic void grFigure1_8020E1A4(HSD_GObj*);\nstatic bool grFigure1_8020E1D0(HSD_GObj*);\nstatic void grFigure1_8020E1D8(HSD_GObj*);\nstatic void grFigure1_8020E1FC(HSD_GObj*);\nstatic void grFigure1_8020E200(HSD_GObj*);\nstatic bool grFigure1_8020E250(HSD_GObj*);\nstatic void grFigure1_8020E258(HSD_GObj*);\nstatic void grFigure1_8020E25C(HSD_GObj*);\nstatic bool grFigure1_8020E260(int);\nstatic bool grFigure1_8020E268(Vec3*, int, HSD_JObj*);\nvoid grFigure1_8020E270(int);\n#define _grfigure2_h_\nstatic void grFigure2_8020E274(void);\nstatic void grFigure2_8020E2E4(void);\nstatic void grFigure2_8020E2E8(void);\nstatic bool grFigure2_8020E30C(void);\nstatic HSD_GObj* grFigure2_8020E314(int gobj_id);\nstatic void grFigure2_8020E3FC(HSD_GObj* gobj);\nstatic bool grFigure2_8020E428(HSD_GObj*);\nstatic void grFigure2_8020E430(HSD_GObj* gobj);\nstatic void grFigure2_8020E434(HSD_GObj*);\nstatic void grFigure2_8020E438(HSD_GObj* gobj);\nstatic bool grFigure2_8020E464(HSD_GObj*);\nstatic void grFigure2_8020E46C(HSD_GObj* gobj);\nstatic void grFigure2_8020E490(HSD_GObj*);\nstatic void grFigure2_8020E494(HSD_GObj* gobj);\nstatic bool grFigure2_8020E4E4(HSD_GObj*);\nstatic void grFigure2_8020E4EC(HSD_GObj* gobj);\nstatic void grFigure2_8020E4F0(HSD_GObj*);\nstatic bool grFigure2_8020E4F4(int number);\nstatic bool grFigure2_8020E4FC(Vec3* vector, int number, HSD_JObj* jobj);\n#define _grfigure3_h_\nstatic void grFigure3_8020E504(int number);\nstatic void grFigure3_8020E508(void);\nstatic void grFigure3_8020E578(void);\nstatic void grFigure3_8020E57C(void);\nstatic bool grFigure3_8020E5A0(void);\nstatic HSD_GObj* grFigure3_8020E5A8(int gobj_id);\nstatic void grFigure3_8020E690(HSD_GObj* gobj);\nstatic bool grFigure3_8020E6BC(HSD_GObj*);\nstatic void grFigure3_8020E6C4(HSD_GObj* gobj);\nstatic void grFigure3_8020E6C8(HSD_GObj*);\nstatic void grFigure3_8020E6CC(HSD_GObj* gobj);\nstatic bool grFigure3_8020E6F8(HSD_GObj*);\nstatic void grFigure3_8020E700(HSD_GObj* gobj);\nstatic void grFigure3_8020E724(HSD_GObj*);\nstatic void grFigure3_8020E728(HSD_GObj* gobj);\nstatic bool grFigure3_8020E778(HSD_GObj*);\nstatic void grFigure3_8020E780(HSD_GObj* gobj);\nstatic void grFigure3_8020E784(HSD_GObj*);\nstatic bool grFigure3_8020E788(int number);\nstatic int grFigure3_8020E790(Vec3* vector, int number, HSD_JObj* jobj);\n#define _grfigureget_h_\nstatic void grFigureGet_80219530(int);\nstatic void grFigureGet_80219534(void);\nstatic void grFigureGet_8021959C(void);\nstatic void grFigureGet_802195A0(void);\nstatic bool grFigureGet_802195C4(void);\nstatic HSD_GObj* grFigureGet_802195CC(int);\nstatic void grFigureGet_802196B4(HSD_GObj*);\nstatic bool grFigureGet_802196E0(HSD_GObj*);\nstatic void grFigureGet_802196E8(HSD_GObj*);\nstatic void grFigureGet_802196EC(HSD_GObj*);\n#define GALE01_1F423C\n/* 1F66A4 */ /* static */ M2C_UNK grGreatBay_801F66A4();\n#define MELEE_GR_GRICEMT_H\nvoid grIceMt_801FA728(Vec3*);\n#define GALE01_1FA908\n/* 1FCAAC */ bool grInishie1_801FCAAC(enum_t);\n#define MELEE_GR_GRIZUMI_H\nvoid grIzumi_801CBB84(int);\nvoid grIzumi_801CBB88(void);\nvoid grIzumi_801CBC0C(void);\nvoid grIzumi_801CBCBC(void);\nbool grIzumi_801CBCE0(void);\nHSD_GObj* grIzumi_801CBCE8(int gobj_id);\nvoid grIzumi_801CBDD4(HSD_GObj* gobj);\nbool grIzumi_801CBE00(HSD_GObj* gobj);\nvoid grIzumi_801CBE08(HSD_GObj* gobj);\nvoid grIzumi_801CBE0C(HSD_GObj* gobj);\nvoid grIzumi_801CBE10(HSD_GObj* gobj);\nbool grIzumi_801CBE54(HSD_GObj* gobj);\nvoid grIzumi_801CBE5C(HSD_GObj* gobj);\nvoid grIzumi_801CBE60(HSD_GObj* gobj);\nvoid grIzumi_801CBE64(HSD_GObj* gobj);\nbool grIzumi_801CC0CC(HSD_GObj* gobj);\nvoid grIzumi_801CC0D4(HSD_GObj* gobj);\nvoid grIzumi_801CC338(HSD_GObj* gobj);\nvoid grIzumi_801CC33C(HSD_GObj* gobj);\nbool grIzumi_801CC350(HSD_GObj* gobj);\nvoid grIzumi_801CC358(HSD_GObj* gobj);\nvoid grIzumi_801CCA10(HSD_GObj* gobj);\nvoid grIzumi_801CCA14(HSD_GObj* gobj);\nbool grIzumi_801CCA54(HSD_GObj* gobj);\nvoid grIzumi_801CCA5C(HSD_GObj* gobj);\nvoid grIzumi_801CCA60(HSD_GObj* gobj);\nvoid grIzumi_801CCA64(HSD_GObj* gobj);\nbool grIzumi_801CCB08(HSD_GObj* gobj);\nvoid grIzumi_801CCB10(HSD_GObj* gobj);\nvoid grIzumi_801CCB14(HSD_GObj* gobj);\nvoid grIzumi_801CCB18(HSD_GObj* gobj);\nvoid grIzumi_801CCB90(HSD_GObj* gobj, int renderpass);\nHSD_GObj* grIzumi_801CCBDC(float height, Vec3* a, int b, HSD_JObj* jobj);\nHSD_GObj* grIzumi_801CCD98(void);\nvoid grIzumi_801CCEA0(HSD_GObj* gobj, int renderpass);\nHSD_TObj* grIzumi_801CD090(HSD_GObj* gobj, HSD_ImageDesc* image);\nvoid grIzumi_801CD220(HSD_GObj* gobj, int);\nbool grIzumi_801CD278(enum_t);\nbool grIzumi_801CD280(Vec3*, int, HSD_JObj*);\nvoid grIzumi_801CD2D4(void);\n#define MELEE_GR_GRKONGO_H\nvoid grKongo_801D8270(s32);\nvoid grKongo_801D828C(s32);\n#define _grtlib_h_\n#define MELEE_LB_TYPES_H\ntypedef struct _UnkAnimStruct {\n    unk_t x0_data;\n    size_t x4_size;\n} UnkAnimStruct;\nstruct UnkGeneratorStruct* grLib_801C96F8(s32, s8, S32Vec3*);\nvoid grLib_801C97DC(s32, s32, HSD_JObj*);\nvoid grLib_801C9808(s32, s32, HSD_JObj*);\nvoid grLib_801C9834(struct UnkGeneratorStruct* arg0);\nvoid grLib_801C9854(s32);\nvoid grLib_801C9874(struct UnkGeneratorStruct*);\nvoid grLib_801C98A0(HSD_JObj*);\nvoid grLib_801C9908(HSD_JObj*);\nvoid grLib_801C99C0(s32, s32, HSD_JObj*, s32);\nVec3* grLib_801C9A10(void);\nvoid grLib_801C9A70(enum_t, Vec3*);\nvoid grLib_801C9B20(void* arg1, UnkAnimStruct* arg2, void* arg3);\nvoid grLib_801C9B6C(void*);\nvoid grLib_801C9B8C(void*);\nstatic void grLib_801C9BC8(HSD_GObj*);\nstatic void grLib_801C9C40(HSD_GObj*);\nHSD_GObj* grLib_801C9CEC(s32);\ns16 grLib_801C9E40(void);\nvoid grLib_801C9E50(s16);\nbool grLib_801C9E60(Vec3*);\n/// @remarks Only called from yorster and inishie1\nbool grLib_801C9EE8(void);\nbool grLib_801C96E8(HSD_GObj* arg0);\n#define MELEE_GR_GRMATERIAL_H\n#define _ground_h_\nextern StageInfo stage_info;\nstatic void Ground_801BFFA8(void);\nstatic void Ground_801BFFAC(bool);\nstatic void Ground_801C1E94(void);\nvoid Ground_801C3880(f32);\nvoid Ground_801C3890(f32);\nvoid Ground_801C38A0(f32);\nvoid Ground_801C38AC(f32);\nvoid Ground_801C38BC(f32 x, f32 y);\nvoid Ground_801C38D0(f32 tilt, f32 pan, f32, f32);\nvoid Ground_801C38EC(f32 depth, f32 zoom);\nvoid Ground_801C3900(f32, f32, f32, f32, f32 up, f32 down, f32 left,\n                     f32 right);\nvoid Ground_801C392C(f32 x, f32 y, f32 z, f32 fov, f32 vert, f32 horz);\nvoid Ground_801C3950(f32 zoom);\nvoid Ground_801C3960(f32 ratio);\nvoid Ground_801C3970(f32 smooth);\nvoid Ground_801C3980(f32 top);\nvoid Ground_801C3990(f32 bottom);\nvoid Ground_801C39A0(f32 left);\nvoid Ground_801C39B0(f32 right);\nstatic void Ground_801C1E2C(HSD_GObj*);\nstatic bool Ground_801C0A70(Vec3* pos);\nstatic void Ground_801C0C2C(HSD_GObj*);\nstatic bool Ground_801C24F8(s32, u32, s32*);\nvoid Ground_801C5544(Ground*, s32);\nstatic void Ground_801C55AC(Ground*);\nHSD_GObj* Ground_801C57A4(void);\nstatic void Ground_801C5878(void);\nstatic void Ground_801C466C(void);\nstatic void Ground_801C1CD0(HSD_GObj*);\nstatic void Ground_801C1D38(HSD_GObj*);\nstatic void Ground_801C2BBC(HSD_GObj*, s32);\nstatic void Ground_801C2BD4(void* arg0);\nHSD_GObj* Ground_801C14D0(int);\nstatic void Ground_801C34AC(s32, HSD_JObj*, struct HSD_Joint*);\nstatic void Ground_801C28CC(void*, s32);\nf32 Ground_801C0498(void);\nbool Ground_801C28AC(s32, u32, s32*);\nHSD_GObj* Ground_801C2BA4(s32);\nHSD_JObj* Ground_801C2CF4(s32);\nbool Ground_801C2D24(enum_t, Vec3*);\nbool Ground_801C2ED0(HSD_JObj*, s32);\nvoid Ground_801C39C0(void);\nvoid Ground_801C3BB4(void);\nHSD_JObj* Ground_801C3FA4(HSD_GObj*, s32);\ns32 Ground_801C4210(void);\nvoid Ground_801C42AC(void);\n/// Get stage's \"yakumono\" (\"about\"?) param\nvoid* Ground_801C49F8(void);\nvoid Ground_801C5A84(s32 arg0);\nvoid Ground_801C5AA4(bool arg0);\nbool Ground_801C3214(int arg0);\n/// @param[in] arg0\n/// @param[in] arg1\n/// @param[out] result\n/// @param[in] arg3\nvoid Ground_801C4B50(s32 arg0, s32 arg1, Vec3* result, f32 arg3);\nvoid Ground_801C0754(StructPairWithStageID* pair);\nvoid Ground_801C0800(StructPairWithStageID* pair);\nvoid Ground_801C0F78(StructPairWithStageID* pair);\nvoid Ground_801C0FB8(StructPairWithStageID* pair);\nvoid Ground_801C1074(StructPairWithStageID* pair, s32 arg1);\nvoid Ground_801C06B8(InternalStageId arg0);\nvoid Ground_801C2FE0(HSD_GObj* arg0);\nvoid Ground_801C4A08(HSD_GObj* gobj);\nvoid Ground_801C10B8(HSD_GObj* arg0, HSD_GObjEvent arg1);\nHSD_GObj* Ground_801C1A20(HSD_Joint* arg0, s32 arg1);\nvoid Ground_801BFFB0(void);\nvoid Ground_801C1D6C(u32 arg0);\nu32 Ground_801C1D84(void);\nu32 Ground_801C1D98(void);\nu32 Ground_801C1DAC(void);\nu32 Ground_801C1DC0(void);\ns16 Ground_801C1DD4(void);\nvoid Ground_801C1DE4(s32* arg0, s32* arg1);\nvoid Ground_801C1E00(s32 arg0);\ns32 Ground_801C1E18(void);\nvoid* Ground_801C1E84(void);\nvoid Ground_801C1FFC(void);\nvoid Ground_801C205C(GXColor* color);\nbool Ground_801C2090(GXColor* color);\nf32 Ground_801C20D0(void);\nvoid Ground_801C2374(HSD_LObj* lobj);\ns32 Ground_801C247C(s32 arg0, s32 arg1);\nvoid Ground_801C0378(void);\nu8* Ground_801C2AD8(void);\nf32 Ground_801C2AE8(s32 arg0);\nvoid Ground_801C0478(void* ptr);\nbool Ground_801C2C8C(void* arg0);\nvoid Ground_801C2D0C(s32 i, HSD_JObj* jobj);\nvoid Ground_801C04BC(f32 arg8);\nbool Ground_801C3128(s32 arg0, void (*arg1)(s16));\ns32 Ground_801C0508(void);\nbool Ground_801C3260(s32 arg0);\nvoid Ground_801C32AC(s32 arg0);\nvoid Ground_801C052C(s32* arg0);\ns32 Ground_801C32D4(s32 arg0, s32 arg1);\ns32 Ground_801C33C0(s32 arg0, s32 arg1);\nvoid Ground_801C0544(s32* arg0);\nvoid Ground_801C055C(s32* arg0);\nvoid Ground_801C0574(s32* arg0);\nvoid Ground_801C058C(s32* arg0);\nvoid Ground_801C05A4(s32* arg0);\nvoid Ground_801C36F4(s32 map_id, HSD_JObj* jobj, void* unk);\nvoid Ground_801C05BC(s32* arg0);\nvoid Ground_801C05D4(s32* arg0);\nvoid Ground_801C05EC(s32* arg0);\ns32* Ground_801C0604(void);\ns32* Ground_801C0618(void);\ns32* Ground_801C062C(void);\ns32* Ground_801C0640(void);\ns32 Ground_801C3D44(s32 arg0, f32 arg8, f32 arg9);\ns32 Ground_801C3DB4(s32 arg0, f32 arg8, f32 arg9);\ns32* Ground_801C0654(void);\nf32 Ground_801C3F20(HSD_JObj* arg0);\ns32* Ground_801C0668(void);\ns32* Ground_801C067C(void);\ns32* Ground_801C0690(void);\nHSD_JObj* Ground_801C4100(HSD_JObj* jobj);\ns32* Ground_801C06A4(void);\nvoid Ground_801C4338(void);\nvoid Ground_801C4368(f32* arg0, f32* arg1);\nvoid Ground_801C438C(f32 val);\nvoid Ground_801C43A4(unk_t arg0);\nbool Ground_801C43C4(void* arg0);\nvoid Ground_801C445C(HSD_LObj* lobj);\nHSD_GObj* Ground_801C498C(void);\nunk_t Ground_801C49B4(void);\nbool Ground_801C4D70(s32 arg0, Vec3* arg1, f32 arg8);\nbool Ground_801C4DA0(Vec3* arg0, f32* arg1);\nbool Ground_801C4DD0(void);\nbool Ground_801C4E20(void);\nvoid Ground_801C4FAC(void);\nvoid Ground_801C53EC(u32 arg0);\nvoid Ground_801C5414(unk_t arg0, s32 arg1);\nvoid Ground_801C5440(Ground* gp, s32 i, u32 arg2);\nbool Ground_801C54DC(Ground* gp, s32 i);\nvoid Ground_801C5630(Ground* gp, s32 i, f32 val);\nvoid Ground_801C5694(Ground* gp, s32 i, f32 val);\nbool Ground_801C5700(int i);\nvoid Ground_801C5740(s32 arg0);\nvoid Ground_801C5750(void);\ns32 Ground_801C5764(void);\ns16 Ground_801C5774(void);\nvoid Ground_801C5784(s32 arg0);\ns32 Ground_801C5794(void);\nHSD_GObj* Ground_801C57C8(void);\nf32 Ground_801C57F0(void);\nvoid Ground_801C5800(void);\ns32 Ground_801C5840(void);\ns32 Ground_801C58E0(s32 arg0, s32 arg1);\nint Ground_801C5940(void);\nvoid Ground_801C5A28(void);\nvoid Ground_801C5A60(void);\ns32 Ground_801C5A94(void);\nbool Ground_801C5ABC(void);\nu32 Ground_801C5AD0(s32 i);\nvoid Ground_801C5AEC(Vec3* v, Vec3* arg1, Vec3* arg2, Vec3* arg3);\nvoid Ground_801C1154(void);\nvoid Ground_801C1158(void);\nvoid Ground_801C11AC(HSD_GObj* gobj);\nHSD_JObj* Ground_801C13D0(s32 arg0, s32 depth);\nvoid Ground_801C4E70(HSD_JObj* arg0, HSD_JObj* arg1, HSD_JObj* arg2,\n                     HSD_JObj* arg3, HSD_JObj* arg4, HSD_JObj* arg5);\n#define GET_GROUND(gobj) ((Ground*) HSD_GObjGetUserData(gobj))\nstatic inline void Ground_JObjInline1(HSD_GObj* gobj)\n{\n    Ground* gp = ((Ground*) HSD_GObjGetUserData(gobj));\n    HSD_JObj* jobj = ((HSD_JObj*) HSD_GObjGetHSDObj(gobj));\n    Ground_801C2ED0(jobj, gp->map_id);\n    grAnime_801C8138(gobj, gp->map_id, 0);\n}\nvoid grMaterial_801C95C4(HSD_GObj*);\nvoid grMaterial_801C9698(HSD_GObj*);\nvoid grMaterial_801C94D8(unk_t hsd_obj);\nvoid grMaterial_801C9604(HSD_GObj* bg, int, bool);\nvoid grMaterial_801C8858(HSD_JObj*, u32 flags);\nM2C_UNK grMaterial_801C8CDC();\nvoid grMaterial_801C8E08(int);\nint grMaterial_801C8CFC(int, int, Ground*, HSD_JObj*, int, Event, int);\n#define MELEE_GR_GROLDKONGO_H\nvoid grOldKongo_802105AC(s32);\nvoid grOldKongo_802105C8(s32);\n#define GALE01_1FF164\nvoid grRCruise_80201918(Vec3*);\n/* 201988 */ /* static */ M2C_UNK grRCruise_80201988();\n#define _grshrine_h_\nstatic void grShrine_80201C60(int);\nstatic void grShrine_80201C64(void);\nstatic void grShrine_80201CF0(void);\nstatic void grShrine_80201CF4(void);\nstatic bool grShrine_80201D18(void);\nstatic HSD_GObj* grShrine_80201D20(s32);\nstatic void grShrine_80201E08(HSD_GObj*);\nstatic bool grShrine_80201E34(HSD_GObj*);\nstatic void grShrine_80201E3C(HSD_GObj*);\nstatic void grShrine_80201E40(HSD_GObj*);\nstatic void grShrine_80201E44(HSD_GObj*);\nstatic bool grShrine_80201E88(HSD_GObj*);\nstatic void grShrine_80201E90(HSD_GObj*);\nstatic void grShrine_80201E94(HSD_GObj*);\nstatic void grShrine_80201E98(HSD_GObj*);\nstatic void grShrine_80201E9C(HSD_GObj*);\nstatic bool grShrine_80201F14(HSD_GObj*);\nstatic void grShrine_80201F1C(HSD_GObj*);\nstatic void grShrine_80201F40(HSD_GObj*);\nstatic bool grShrine_80201F44(bool);\nstatic bool grShrine_80201F4C(Vec3*, int, HSD_JObj*);\n#define MELEE_GR_GRSTADIUM_H\nvoid grStadium_801D511C(void);\nvoid grStadium_801D39A0(HSD_GObj*);\nbool grStadium_801D4FF8(int pl_slot);\n#define _grtstory_h_\nstatic void grStory_801E302C(bool);\nvoid grStory_801E3030(void);\nvoid grStory_801E30A8(void);\nvoid grStory_801E30AC(void);\nbool grStory_801E30D0(void);\nHSD_GObj* grStory_801E30D8(int);\nvoid grStory_801E31C0(HSD_GObj*);\nbool grStory_801E3224(HSD_GObj*);\nvoid grStory_801E322C(HSD_GObj*);\nvoid grStory_801E3230(HSD_GObj*);\nvoid grStory_801E3234(HSD_GObj*);\nbool grStory_801E332C(HSD_GObj*);\nvoid grStory_801E3334(HSD_GObj*);\nvoid grStory_801E336C(HSD_GObj*);\nvoid grStory_801E3370(HSD_GObj*);\nbool grStory_801E33D8(HSD_GObj*);\nvoid grStory_801E33E0(HSD_GObj*);\nvoid grStory_801E3414(HSD_GObj*);\nvoid grStory_801E3418(HSD_GObj*);\nvoid grStory_801E366C(HSD_GObj*);\nstatic bool grStory_801E36D0(bool);\nbool grStory_801E36D8(Vec3*, int, HSD_JObj*);\n#define MELEE_GR_GRTCAPTAIN_H\nstatic void grTCaptain_8021FC60(int);\nstatic void grTCaptain_8021FC64(void);\nstatic void grTCaptain_8021FCD4(void);\nstatic void grTCaptain_8021FCD8(void);\nstatic bool grTCaptain_8021FCFC(void);\nstatic HSD_GObj* grTCaptain_8021FD04(int gobj_id);\nstatic void grTCaptain_8021FDEC(HSD_GObj* gobj);\nstatic bool grTCaptain_8021FE18(HSD_GObj*);\nstatic void grTCaptain_8021FE20(HSD_GObj*);\nstatic void grTCaptain_8021FE24(HSD_GObj*);\nstatic void grTCaptain_8021FE28(HSD_GObj* gobj);\nstatic bool grTCaptain_8021FE78(HSD_GObj*);\nstatic void grTCaptain_8021FE80(HSD_GObj* gobj);\nstatic void grTCaptain_8021FEB4(HSD_GObj*);\nstatic void grTCaptain_8021FEB8(HSD_GObj* gobj);\nstatic bool grTCaptain_8021FF08(HSD_GObj*);\nstatic void grTCaptain_8021FF10(HSD_GObj*);\nstatic void grTCaptain_8021FF30(HSD_GObj*);\nstatic bool grTCaptain_8021FF34(int);\nstatic bool grTCaptain_8021FF3C(Vec3*, int, HSD_JObj*);\n#define _grtdonkey_h_\nstatic void grTDonkey_80220228(int);\nstatic void grTDonkey_8022022C(void);\nstatic void grTDonkey_8022029C(void);\nstatic void grTDonkey_802202A0(void);\nstatic bool grTDonkey_802202C4(void);\nstatic HSD_GObj* grTDonkey_802202CC(int gobj_id);\nstatic void grTDonkey_802203B4(HSD_GObj* gobj);\nstatic bool grTDonkey_802203E0(HSD_GObj*);\nstatic void grTDonkey_802203E8(HSD_GObj*);\nstatic void grTDonkey_802203EC(HSD_GObj*);\nstatic void grTDonkey_802203F0(HSD_GObj* gobj);\nstatic bool grTDonkey_80220440(HSD_GObj*);\nstatic void grTDonkey_80220448(HSD_GObj* gobj);\nstatic void grTDonkey_8022047C(HSD_GObj*);\nstatic void grTDonkey_80220480(HSD_GObj* gobj);\nstatic bool grTDonkey_802204D0(HSD_GObj*);\nstatic void grTDonkey_802204D8(HSD_GObj*);\nstatic void grTDonkey_802204F8(HSD_GObj*);\nstatic bool grTDonkey_802204FC(int);\nstatic bool grTDonkey_80220504(Vec3*, int, HSD_JObj*);\n#define _grtemblem_h_\nstatic void grTRoy_802243F4(int);\nstatic void grTRoy_802243F8(void);\nstatic void grTRoy_80224468(void);\nstatic void grTRoy_8022446C(void);\nstatic bool grTRoy_80224490(void);\nstatic HSD_GObj* grTRoy_80224498(s32 gobj_id);\nstatic void grTRoy_80224580(HSD_GObj* gobj);\nstatic bool grTRoy_802245AC(HSD_GObj*);\nstatic void grTRoy_802245B4(HSD_GObj*);\nstatic void grTRoy_802245B8(HSD_GObj*);\nstatic void grTRoy_802245BC(HSD_GObj* gobj);\nstatic bool grTRoy_8022460C(HSD_GObj*);\nstatic void grTRoy_80224614(HSD_GObj* gobj);\nstatic void grTRoy_80224648(HSD_GObj*);\nstatic void grTRoy_8022464C(HSD_GObj* gobj);\nstatic bool grTRoy_8022469C(HSD_GObj*);\nstatic void grTRoy_802246A4(HSD_GObj*);\nstatic void grTRoy_802246C4(HSD_GObj*);\nstatic bool grTRoy_802246C8(int);\nstatic bool grTRoy_802246D0(Vec3*, int, HSD_JObj*);\n#define MELEE_GR_GRTFALCO_H\nvoid grTFalco_80220984(HSD_GObj*);\nbool grTFalco_802209B0(HSD_GObj*);\nvoid grTFalco_802209B8(HSD_GObj*);\nvoid grTFalco_802209BC(HSD_GObj*);\nvoid grTFalco_80220A50(HSD_GObj*);\nbool grTFalco_80220AA0(HSD_GObj*);\nvoid grTFalco_80220AA8(HSD_GObj*);\nvoid grTFalco_80220AC8(HSD_GObj*);\nvoid grTFalco_802209C0(HSD_GObj*);\nbool grTFalco_80220A10(HSD_GObj*);\nvoid grTFalco_80220A18(HSD_GObj*);\nvoid grTFalco_80220A4C(HSD_GObj*);\nvoid grTFalco_802207F4(void);\nvoid grTFalco_802207F0(int);\nvoid grTFalco_8022086C(void);\nvoid grTFalco_80220870(void);\nbool grTFalco_80220894(void);\nbool grTFalco_80220ACC(enum_t);\nbool grTFalco_80220B78(Vec3*, int, HSD_JObj*);\nHSD_GObj* grTFalco_8022089C(int);\n#define MELEE_GR_GRTICECLIMBER_H\nextern s16 grTIc_803E8B5C[];\nvoid grTIceClimber_8022109C(HSD_GObj*);\nbool grTIceClimber_802210C8(HSD_GObj*);\nvoid grTIceClimber_802210D0(HSD_GObj*);\nvoid grTIceClimber_802210D4(HSD_GObj*);\nvoid grTIceClimber_8022118C(HSD_GObj*);\nbool grTIceClimber_802211DC(HSD_GObj*);\nvoid grTIceClimber_802211E4(HSD_GObj*);\nvoid grTIceClimber_80221204(HSD_GObj*);\nvoid grTIceClimber_802210D8(HSD_GObj*);\nbool grTIceClimber_8022114C(HSD_GObj*);\nvoid grTIceClimber_80221154(HSD_GObj*);\nvoid grTIceClimber_80221188(HSD_GObj*);\nvoid grTIceClimber_80220F14(void);\nvoid grTIceClimber_80220F10(int);\nvoid grTIceClimber_80220F84(void);\nvoid grTIceClimber_80220F88(void);\nbool grTIceClimber_80220FAC(void);\nbool grTIceClimber_80221354(int);\nbool grTIceClimber_8022135C(Vec3*, int, HSD_JObj*);\nHSD_GObj* grTIceClimber_80220FB4(int);\nvoid grTIceClimber_80221288(HSD_GObj*);\nvoid grTIceClimber_80221208(void);\nvoid grMaterial_801C8DE0(s32, f32, f32, f32, f32, f32, f32, f32);\n#define _grtkoopa_h_\nstatic void grTKoopa_80221648(int);\nstatic void grTKoopa_8022164C(void);\nstatic void grTKoopa_802216BC(void);\nstatic void grTKoopa_802216C0(void);\nstatic bool grTKoopa_802216E4(void);\nstatic HSD_GObj* grTKoopa_802216EC(int gobj_id);\nstatic void grTKoopa_802217D4(HSD_GObj* gobj);\nstatic bool grTKoopa_80221800(HSD_GObj*);\nstatic void grTKoopa_80221808(HSD_GObj*);\nstatic void grTKoopa_8022180C(HSD_GObj*);\nstatic void grTKoopa_80221810(HSD_GObj* gobj);\nstatic bool grTKoopa_80221860(HSD_GObj*);\nstatic void grTKoopa_80221868(HSD_GObj* gobj);\nstatic void grTKoopa_8022189C(HSD_GObj*);\nstatic void grTKoopa_802218A0(HSD_GObj* gobj);\nstatic bool grTKoopa_802218F0(HSD_GObj*);\nstatic void grTKoopa_802218F8(HSD_GObj*);\nstatic void grTKoopa_80221918(HSD_GObj*);\nstatic bool grTKoopa_8022191C(int);\nstatic bool grTKoopa_80221924(Vec3*, int, HSD_JObj*);\n#define MELEE_GR_GRTLUIGI_H\nvoid grTLuigi_80221D9C(HSD_GObj*);\nbool grTLuigi_80221DC8(HSD_GObj*);\nvoid grTLuigi_80221DD0(HSD_GObj*);\nvoid grTLuigi_80221DD4(HSD_GObj*);\nvoid grTLuigi_80221E68(HSD_GObj*);\nbool grTLuigi_80221EB8(HSD_GObj*);\nvoid grTLuigi_80221EC0(HSD_GObj*);\nvoid grTLuigi_80221EE0(HSD_GObj*);\nvoid grTLuigi_80221DD8(HSD_GObj*);\nbool grTLuigi_80221E28(HSD_GObj*);\nvoid grTLuigi_80221E30(HSD_GObj*);\nvoid grTLuigi_80221E64(HSD_GObj*);\nvoid grTLuigi_80221C14(void);\nvoid grTLuigi_80221C10(int);\nvoid grTLuigi_80221C84(void);\nvoid grTLuigi_80221C88(void);\nbool grTLuigi_80221CAC(void);\nbool grTLuigi_80221EE4(int);\nbool grTLuigi_80221EEC(Vec3*, int, HSD_JObj*);\nHSD_GObj* grTLuigi_80221CB4(int);\n#define _grtmars_h_\nstatic void grTMars_80221EF4(int);\nstatic void grTMars_80221EF8(void);\nstatic void grTMars_80221F68(void);\nstatic void grTMars_80221F6C(void);\nstatic bool grTMars_80221F90(void);\nstatic HSD_GObj* grTMars_80221F98(int);\nstatic void grTMars_80222080(HSD_GObj*);\nstatic bool grTMars_802220AC(HSD_GObj*);\nstatic void grTMars_802220B4(HSD_GObj*);\nstatic void grTMars_802220B8(HSD_GObj*);\nstatic void grTMars_802220BC(HSD_GObj*);\nstatic bool grTMars_8022210C(HSD_GObj*);\nstatic void grTMars_80222114(HSD_GObj*);\nstatic void grTMars_80222148(HSD_GObj*);\nstatic void grTMars_8022214C(HSD_GObj*);\nstatic bool grTMars_8022219C(HSD_GObj*);\nstatic void grTMars_802221A4(HSD_GObj*);\nstatic void grTMars_802221C4(HSD_GObj*);\nstatic bool grTMars_802221C8(int);\nstatic bool grTMars_802221D0(Vec3*, int, HSD_JObj*);\n#define _grtness_h_\nstatic void grTNess_802225D0(int);\nstatic void grTNess_802225D4(void);\nstatic void grTNess_80222644(void);\nstatic void grTNess_80222648(void);\nstatic bool grTNess_8022266C(void);\nstatic HSD_GObj* grTNess_80222674(int param_1);\nstatic void grTNess_8022275C(HSD_GObj* gobj);\nstatic bool grTNess_80222788(HSD_GObj*);\nstatic void grTNess_80222790(HSD_GObj*);\nstatic void grTNess_80222794(HSD_GObj*);\nstatic void grTNess_80222798(HSD_GObj* gobj);\nstatic bool grTNess_802227E8(HSD_GObj*);\nstatic void grTNess_802227F0(HSD_GObj* gobj);\nstatic void grTNess_80222824(HSD_GObj*);\nstatic void grTNess_80222828(HSD_GObj* gobj);\nstatic bool grTNess_80222878(HSD_GObj*);\nstatic void grTNess_80222880(HSD_GObj* gobj);\nstatic void grTNess_802228A0(HSD_GObj*);\nstatic bool grTNess_802228A4(int);\nstatic bool grTNess_802228AC(Vec3*, int, HSD_JObj*);\n#define _grtpichu_h_\nstatic void grTPichu_80222B98(int);\nstatic void grTPichu_80222B9C(void);\nstatic void grTPichu_80222C0C(void);\nstatic void grTPichu_80222C10(void);\nstatic bool grTPichu_80222C34(void);\nstatic HSD_GObj* grTPichu_80222C3C(int gobj_id);\nstatic void grTPichu_80222D24(HSD_GObj* gobj);\nstatic bool grTPichu_80222D50(HSD_GObj*);\nstatic void grTPichu_80222D58(HSD_GObj*);\nstatic void grTPichu_80222D5C(HSD_GObj*);\nstatic void grTPichu_80222D60(HSD_GObj* gobj);\nstatic bool grTPichu_80222DB0(HSD_GObj*);\nstatic void grTPichu_80222DB8(HSD_GObj* gobj);\nstatic void grTPichu_80222DEC(HSD_GObj*);\nstatic void grTPichu_80222DF0(HSD_GObj* gobj);\nstatic bool grTPichu_80222E40(HSD_GObj*);\nstatic void grTPichu_80222E48(HSD_GObj*);\nstatic void grTPichu_80222E68(HSD_GObj*);\nstatic bool grTPichu_80222E6C(int);\nstatic bool grTPichu_80222E74(Vec3*, int, HSD_JObj*);\n#define _grtyoshi_h_\nstatic void grTYoshi_80223B48(int);\nstatic void grTYoshi_80223B4C(void);\nstatic void grTYoshi_80223BBC(void);\nstatic void grTYoshi_80223BC0(void);\nstatic bool grTYoshi_80223BE4(void);\nstatic HSD_GObj* grTYoshi_80223BEC(int gobj_id);\nstatic void grTYoshi_80223CD4(HSD_GObj* gobj);\nstatic bool grTYoshi_80223D00(HSD_GObj*);\nstatic void grTYoshi_80223D08(HSD_GObj*);\nstatic void grTYoshi_80223D0C(HSD_GObj*);\nstatic void grTYoshi_80223D10(HSD_GObj* gobj);\nstatic bool grTYoshi_80223D60(HSD_GObj*);\nstatic void grTYoshi_80223D68(HSD_GObj* gobj);\nstatic void grTYoshi_80223D9C(HSD_GObj*);\nstatic void grTYoshi_80223DA0(HSD_GObj* gobj);\nstatic bool grTYoshi_80223DF0(HSD_GObj*);\nstatic void grTYoshi_80223DF8(HSD_GObj*);\nstatic void grTYoshi_80223E18(HSD_GObj*);\nstatic bool grTYoshi_80223E1C(int);\nstatic bool grTYoshi_80223E24(Vec3*, int, HSD_JObj*);\n#define GALE01_20362C\n/* 206D10 */ /* static */ M2C_UNK grVenom_80206D10();\n#define MELEE_GR_GRZAKOGENERATOR_H\nvoid grZakoGenerator_801CAE04(bool);\n#define MELEE_GR_GRZEBES_H\nvoid grZebes_801DA3F4(unk_t);\n#define MELEE_IF_IFALL_H\nvoid ifAll_802F3424(void);\nvoid ifAll_802F3690(void);\nvoid ifAll_802F343C(void);\n#define MELEE_IF_IFMAGNIFY_H\ns32 ifMagnify_802FB6E8(u8);\nbool ifMagnify_802FC998(u8 ply_slot);\n#define MELEE_IF_IFSTATUS_H\ntypedef struct _HudFlags {\n    u8 explode_animation : 1;\n    u8 unk40 : 1;\n    u8 force_digit_shake : 1;\n    u8 unk10 : 1;\n    u8 hide_all_digits : 1;\n    u8 animation_status_id : 2;\n    u8 unk1 : 1;\n} HudFlags;\ntypedef struct _UnknownClassTypeE {\n    s32 padding[0x24];\n    HSD_JObj* unk28;\n} UnknownClassTypeE;\ntypedef struct _HudValue {\n    // pointer to \"unknown class type E\"\n    // 0x00\n    HSD_GObj* HUD_parent_entity;\n    // probably a pointer to \"unknown class type E\"\n    // 0x04\n    HSD_GObj* next;\n    // represents players 1-6\n    // TODO: list if this 0 indexed, or what\n    // 0x08\n    u8 player_slot;\n    // 0x09\n    u8 unk9;\n    // damage as int\n    // 0x0A\n    u16 damage_percent;\n    // 0x0C\n    u16 old_damage;\n    // 0x0E\n    u8 damage_from_last_attack;\n    // 0x0F\n    u8 frames_of_shake_remaining;\n    // 0x10\n    HudFlags flags;\n    // 0x14\n    f32 hundreds_digit_x_translation;\n    // 0x18\n    f32 tens_digit_x_translation;\n    // 0x1C\n    f32 ones_digit_x_translation;\n    // 0x20\n    f32 percent_sign_x_translation;\n    // 0x24\n    f32 hundreds_digit_y_translation;\n    // 0x28\n    f32 tens_digit_y_translation;\n    f32 ones_digit_y_translation;\n    f32 percent_sign_y_translation;\n    f32 hundreds_x_velocity;\n    f32 hundreds_y_velocity;\n    f32 tens_x_velocity;\n    f32 tens_y_velocity;\n    f32 ones_x_velocity;\n    f32 ones_y_velocity;\n    f32 percent_sign_x_velocity;\n    f32 percent_sign_y_velocity;\n    HSD_JObj* hundreds_jobj;\n    HSD_JObj* tens_jobj;\n    HSD_JObj* ones_jobj;\n    HSD_JObj* percent_sign_jobj;\n} HudValue;\ntypedef struct _HudIndex {\n    HudValue players[6];\n    // 258 unk\n    HSD_Joint* unk258;\n    // 0x25c\n    void* jobj_desc_parent;\n    // 0x260\n    HSD_AnimJoint* janim_selection_joints;\n    // 0x264\n    void* janim_selection_textures;\n    // 0x268 null?\n    void* unk268;\n    void* unk26C;\n    void* unk270;\n    void* unk274;\n    // 8 elements of size 0x28, what is this?\n} HudIndex;\ntypedef struct _Element_803F9628_Obj_14 {\n    s32 padding[6];\n    s32 unk1C;\n} Element_803F9628_Obj_14;\ntypedef struct _Element_803F9628 {\n    // 0x00\n    // maybe?\n    HSD_GObj* unk0;\n    // 0x04\n    u32 unk4;\n    // 0x08\n    void* unk8;\n    // 0x0C\n    // flags?\n    u32 unkC;\n    // 0x10\n    // flags?\n    u32 unk10;\n    // 0x14\n    s32 unk14;\n    // 0x18\n    u32 unk18;\n    // 0x1C\n    u32 unk1C;\n    // 0x20\n    u32 unk20;\n    // 0x24\n    u32 unk24;\n    // 0x28\n    // u32 unk40;\n} Element_803F9628;\ntypedef struct _Thing_803F9628 {\n    Element_803F9628 things[8];\n    u32 extra[6];\n} Thing_803F9628;\ntypedef struct _Coordinate3D {\n    f32 x;\n    f32 y;\n    f32 z;\n} Coordinate3D;\ntypedef struct _Placeholder_8016AE38_flags {\n    u8 unk80 : 1;\n    u8 unk40 : 1;\n    u8 unk20 : 1;\n    u8 unk10 : 1;\n    u8 unk8 : 1;\n    u8 unk4 : 1;\n    u8 unk2 : 1;\n    u8 unk1 : 1;\n} Placeholder_8016AE38_flags;\ntypedef struct _Placeholder_8016AE38_flags_2 {\n    u8 top3 : 3;\n    u8 bot5 : 5;\n} Placeholder_8016AE38_flags_2;\n// When we figure out what that function is, replace this type with an actual\n// type\ntypedef struct _Placeholder_8016AE38_ret_val {\n    u32 unk0;\n    u32 unk4;\n    u32 unk8;\n    u8 unkC;\n    u8 unkD;\n    u8 unkE;\n    u8 unkF;\n    u32 padding[0x931 - 3];\n    Placeholder_8016AE38_flags_2 unk24C8;\n    u8 unk24C9;\n    Placeholder_8016AE38_flags unk24CA;\n} Placeholder_8016AE38_ret_val;\ntypedef struct _Placeholder_8016AE50_flags {\n    u8 unk80 : 1;\n    u8 unk40 : 1;\n    u8 unk20 : 1;\n    u8 unk10 : 1;\n    u8 unk8 : 1;\n    u8 unk4 : 1;\n    u8 unk2 : 1;\n    u8 unk1 : 1;\n} Placeholder_8016AE50_flags;\n// When we figure out what that function is, replace this type with an actual\n// type\ntypedef struct _Placeholder_8016AE50_ret_val {\n    u8 unk0;\n    u8 unk1;\n    Placeholder_8016AE50_flags flags;\n} Placeholder_8016AE50_ret_val;\n// external functions we need\n// takes HSD obj* ?\n// extern void func_80391CAC(void*);\nextern void ifStock_802FB6AC(s32);\nextern Placeholder_8016AE38_ret_val* gm_8016AE38(void);\nextern Placeholder_8016AE50_ret_val* gm_8016AE50(void);\nextern void gm_8016B8D4(s32, s32);\nextern void if_802F7C30(s32);\nextern void if_802F7AF8(s32);\nextern void if_802F7D08(s32);\nextern void if_802F7BB4(s32);\nextern void ifStock_802FB650(s32);\n// functions defined in this file\nHudIndex* ifStatus_802F4910(void);\nHSD_GObj* ifStatus_802F6194(HSD_GObj*, s32);\nvoid ifStatus_802F6508(s32);\nvoid ifStatus_802F665C(s8);\nvoid ifStatus_802F6788(s32);\nvoid ifStatus_802F6804(void);\nvoid ifStatus_802F6898(void);\nvoid ifStatus_802F68F0(void);\nvoid ifStatus_802F6948(s32);\nvoid ifStatus_802F69C0(s32, s32);\nvoid ifStatus_802F6AF8(s32);\nvoid ifStatus_802F6C04(s32);\nvoid ifStatus_802F6D10(s32);\nvoid ifStatus_802F6E1C(int slot);\nvoid ifStatus_802F6E3C(s32);\nvoid ifStatus_802F7220(void);\nextern HudIndex ifStatus_804A10C8; // global array of HUD info\nvoid ifStatus_802F5B48(void);\nvoid ifStatus_802F5DE0(HSD_GObj* player, s32 arg1);\nvoid ifStatus_802F5E50(void);\nvoid ifStatus_802F5EC0(void);\nvoid ifStatus_802F61FC(void);\nvoid ifStatus_802F66A4(void);\nvoid ifStatus_802F4B84(void);\nvoid ifStatus_802F6EA4(void);\nvoid ifStatus_802F7034(void);\nvoid ifStatus_802F7134(void);\nvoid ifStatus_802F4EDC(void);\nvoid ifStatus_802F491C(void);\n#define MELEE_IF_IFSTOCK_H\nvoid ifStock_802F98E8(void);\n/// @file\n/// @attention Symbols in this file are placed correctly.\n#define GALE01_26C47C\nextern HSD_ObjAllocUnk4 it_804A0E30;\nextern HSD_ObjAllocUnk5 it_804A0E50;\nextern HSD_ObjAllocUnk6 it_804A0E60;\nextern ItemCommonData* it_804D6D28;\nextern s8 it_804D6D00;\nextern s32 it_804D6D08;\nextern s32 it_804D6D0C;\nextern u32 it_804D6D10;\n/// @todo Probably #size_t but that needs to be changed to\n///       <tt>unsigned int</tt> first.\nextern uint it_804D6D14;\n/// Pointer to array of Article*\nextern Article** it_804D6D24; // common items\nextern Article** it_804D6D30; // pokemon items\nextern Article** it_804D6D38; // character items\nextern Article* it_804A0F60[]; // stage items\nvoid it_8027B4A4(HSD_GObj*, u32);\nvoid* it_8027B5B0(s32, s32, HSD_JObj*, s32, s32);\nvoid it_80274EE8(u32);\n/// Load ItCo.dat/usd\nvoid it_8027870C(s32);\nbool it_8026D324(bool);\ns32 it_8026D604(HSD_GObj* gobj);\nvoid it_8026D62C(Item_GObj*, HSD_GObjEvent);\nvoid it_8026E15C(Item_GObj*, HSD_GObjEvent);\nvoid it_8026E414(Item_GObj*, HSD_GObjEvent);\nvoid it_8026F3D4(Item_GObj*, int, bool, int);\nvoid it_8026E8C4(Item_GObj*, HSD_GObjEvent, HSD_GObjEvent);\ns32 it_8026DF34(void);\nbool it_8026F8B4(Item_GObj*, Vec3*, Vec3*, int);\nvoid it_8026F9A0(void);\nvoid it_802701BC(HSD_GObj* gobj);\nvoid it_802703E8(HSD_GObj* gobj);\nvoid it_802706D0(HSD_GObj* gobj);\nvoid it_80270E30(HSD_GObj* gobj);\nvoid it_8027137C(HSD_GObj* gobj);\nvoid it_8027146C(HSD_GObj* gobj);\nvoid it_802714C0(HSD_GObj* gobj);\nvoid it_80271508(HSD_GObj* gobj, s32 arg1);\nvoid it_8027163C(HSD_GObj* gobj);\nvoid it_80271A58(HSD_GObj* gobj);\nvoid it_802721B8(HSD_GObj* gobj);\nvoid it_80272280(HSD_GObj* gobj);\nvoid it_80272298(HSD_GObj* gobj);\nvoid it_802722B0(HSD_GObj* gobj);\nvoid it_80272304(HSD_GObj* gobj);\nvoid it_80272460(HitCapsule* hitbox, s32 damage, HSD_GObj* gobj);\nvoid it_802725D4(HSD_GObj*);\nvoid it_80272784(HSD_GObj* gobj);\nvoid it_80272A18(HSD_JObj* item_jobj);\nvoid it_80272A3C(HSD_JObj* item_jobj);\nvoid it_80272C08(Item_GObj*);\nvoid it_80273454(Item_GObj*);\nvoid it_80275444(Item_GObj*);\n/// Check if GObj is Item class\nbool it_80272D1C(HSD_GObj* gobj);\n/// Check GObj entity class\ns32 it_80272D40(HSD_GObj* gobj);\nvoid it_802728C8(HSD_GObj* gobj);\nvoid it_80272F7C(HSD_JObj*, f32);\nvoid it_80273168(HSD_GObj* gobj);\nvoid it_802731A4(HSD_GObj*);\nvoid it_802731E0(HSD_GObj*);\nvoid it_8027327C(HSD_GObj* gobj, s32 ID1, s32 ID2);\nvoid it_8027346C(HSD_GObj* gobj);\nvoid it_80273484(HSD_GObj* gobj);\nvoid it_80273500(HSD_GObj*, Vec3*);\nvoid it_80273748(HSD_GObj*, Vec3*, Vec3*);\nvoid it_80273B50(HSD_GObj*, Vec3*);\nvoid it_80274198(HSD_GObj*, s32);\nvoid it_802741F4(HSD_GObj*, s32);\nvoid it_8027429C(HSD_GObj*, Vec3*);\nvoid it_802742F4(HSD_GObj*, HSD_GObj*, u8);\nvoid it_80274658(HSD_GObj*, f32);\nvoid it_80274740(HSD_GObj* gobj);\nvoid it_80274A64(HSD_GObj* gobj);\nbool it_80274C78(HSD_GObj* gobj);\nvoid it_80274DAC(HSD_GObj*);\nvoid it_8027737C(HSD_GObj* gobj, Vec3* pos);\n/// Toggle flag in 0xDC8 off\nvoid it_80274EF8(HSD_GObj* gobj);\nvoid it_80274F10(HSD_GObj* gobj);\n/// Set item lifetime\nvoid it_80275158(HSD_GObj* gobj, f32 lifetime);\nvoid it_80275390(HSD_GObj*);\nvoid it_802753BC(HSD_GObj*, s16);\nvoid it_802753DC(HSD_GObj*);\n/// Toggle several flags in 0xDCD off\nvoid it_80275474(HSD_GObj* gobj);\nvoid it_802754D4(HSD_GObj*);\n/// Toggle several flags in 0xDCE off\nvoid it_80275504(HSD_GObj* gobj);\nvoid it_802756D0(HSD_GObj* gobj);\nvoid it_802756E0(HSD_GObj* gobj);\nvoid it_8027574C(HSD_GObj* gobj);\nvoid it_80275870(HSD_GObj* gobj);\nvoid it_80275E98(HSD_GObj*, SpawnItem*);\nvoid it_802762B0(Item*);\nvoid it_802762BC(Item*);\n/// Advance Item Script\nvoid it_802799E4(HSD_GObj* gobj);\nvoid it_80279B64(Item*);\nvoid it_80279B88(Item* item_data, s32 arg1, s32 arg2);\nvoid it_80279BBC(Item* item_data);\nvoid it_80279BE0(HSD_GObj* gobj);\nvoid it_8027B0C4(HSD_GObj*, SpawnItem*);\nM2C_UNK it_8026FAC4();\nM2C_UNK ftColl_80077688();\nM2C_UNK it_8026FC00();\nM2C_UNK it_80272818();\nHSD_JObj* it_80272C90(Item_GObj* gobj);\nbool it_8026E9A4(Item_GObj*, Vec3*, Vec3*, int);\nvoid it_8026EECC(HSD_GObj*, int);\nbool it_80273130(Item_GObj*);\nvoid it_802750F8(Item_GObj*);\nvoid it_80274594(Item_GObj*);\nbool it_8026DA08(Item_GObj*);\nbool it_80276308(Item_GObj*);\nbool it_802763E0(Item_GObj*);\nvoid it_80272860(Item_GObj*, f32, f32);\nvoid it_8027518C(Item_GObj*);\nbool it_802751D8(Item_GObj*);\nbool it_80272C6C(HSD_GObj*);\nvoid it_80279CDC(HSD_GObj*, f32);\nvoid it_8027A344(Item_GObj*);\nvoid it_8027A160(HSD_JObj* bone, Item*);\nbool itColl_BounceOffShield(Item_GObj*);\nbool itColl_BounceOffVictim(Item_GObj*);\nvoid it_8026E0F4(Item_GObj*);\nvoid it_80272BA4(Item_GObj*);\nbool it_80273030(Item_GObj*);\n#define GALE01_272560\nHSD_JObj* it_80272CC0(Item_GObj*, int);\nvoid it_8027C8B0(Item_GObj*);\n#define _itemdata_h_\n#define GALE01_2F2F34\nbool it_802F3330(Item_GObj*);\nvoid it_802F3374(Item_GObj*, Item_GObj*);\n#define GALE01_2ADA1C\nvoid it_802ADBE4(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6C88[];\n#define GALE01_2E5AC4\nbool it_802E6A40(Item_GObj*);\nvoid it_802E6ACC(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F8BD8[];\n#define GALE01_2E6AEC\nbool it_802E6F7C(Item_GObj*);\nbool it_802E6FC0(Item_GObj*);\nvoid it_802E709C(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F8C8C[];\n#define GALE01_2F28C8\nvoid it_802F2BDC(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F9470[];\n#define GALE01_284854\nvoid it_80284910(Item_GObj*);\nvoid it_80284AAC(Item_GObj*);\nvoid it_80284B30(Item_GObj*);\nvoid it_80284BA0(Item_GObj*);\nvoid it_80284C10(Item_GObj*);\nbool it_80284C78(Item_GObj*);\nbool it_80284CAC(Item_GObj*);\nbool it_80284CCC(Item_GObj*);\nbool it_80284CF0(Item_GObj*);\nbool it_80284D14(Item_GObj*);\nvoid it_80284D34(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F57B0[];\n#define GALE01_27D670\nvoid it_8027D76C(Item_GObj*);\nvoid it_8027E0B4(Item_GObj*);\nvoid it_8027E648(Item_GObj*);\nvoid it_80280380(Item_GObj*);\nint it_80280DF0(Item_GObj*);\nint it_80280E30(Item_GObj*);\nvoid it_80280E9C(Item_GObj*);\nint it_80281070(Item_GObj*);\nint it_802810A4(Item_GObj*);\nint it_802810C4(Item_GObj*);\nint it_80281104(Item_GObj*);\nvoid it_80281144(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F54D8[];\n#define GALE01_286088\nvoid it_802861CC(Item_GObj*);\nvoid it_80286208(Item_GObj*);\nvoid it_80286780(Item_GObj*);\nvoid it_802867B4(Item_GObj*);\nvoid it_80286964(Item_GObj*);\nint it_80286CB4(Item_GObj*);\nint it_80286D48(Item_GObj*);\nint it_80286DDC(Item_GObj*);\nint it_80286E70(Item_GObj*);\nint it_80286F04(Item_GObj*);\nvoid it_80286FC8(Item_GObj*);\nvoid it_80287084(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F5850[];\n#define GALE01_27CF00\nvoid it_8027CF00(Item_GObj*);\nvoid it_8027CF30(Item_GObj*);\nvoid it_8027CFE8(Item_GObj*);\nvoid it_8027D0B8(Item_GObj*);\nbool it_8027D110(Item_GObj*);\nvoid it_8027D118(Item_GObj*);\nbool it_8027D11C(Item_GObj*);\nvoid it_8027D148(Item_GObj*);\nbool it_8027D170(Item_GObj*);\nvoid it_8027D178(Item_GObj*);\nbool it_8027D1A8(Item_GObj*);\nvoid it_8027D1D4(Item_GObj*);\nbool it_8027D1FC(Item_GObj*);\nvoid it_8027D204(Item_GObj*);\nvoid it_8027D208(Item_GObj*);\nvoid it_8027D230(Item_GObj*);\nvoid it_8027D258(Item_GObj*);\nbool it_8027D2A4(Item_GObj*);\nvoid it_8027D2DC(Item_GObj*);\nbool it_8027D30C(Item_GObj*);\nvoid it_8027D32C(Item_GObj*);\nbool it_8027D330(Item_GObj*);\nbool it_8027D338(Item_GObj*);\nbool it_8027D414(Item_GObj*);\nvoid it_8027D450(Item_GObj*);\nbool it_8027D478(Item_GObj*);\nvoid it_8027D480(Item_GObj*);\nbool it_8027D484(Item_GObj*);\nbool it_8027D4B8(Item_GObj*);\nbool it_8027D4F4(Item_GObj*);\nbool it_8027D530(Item_GObj*);\nbool it_8027D614(Item_GObj*);\nvoid it_8027D650(Item_GObj* item_gobj, HSD_GObj* ref);\nextern ItemStateTable it_803F5468[];\n#define GALE01_2D3EF8\nvoid it_802D3EF8(Item_GObj*);\nvoid it_802D3F4C(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F80F8[];\n#define GALE01_2C9588\nvoid it_802C9588(Item_GObj*);\nvoid it_802C961C(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7A98[];\n#define GALE01_2C9B20\nvoid it_802C9C20(Item_GObj*);\nbool it_802C9C78(Item_GObj*);\nvoid it_802C9C80(Item_GObj*, Item_GObj*);\nbool it_802C9CA0(Item_GObj*);\nextern ItemStateTable it_803F7AC8[];\n#define GALE01_2C2144\nbool it_802C2424(Item_GObj*);\nbool it_802C242C(Item_GObj*);\nbool it_802C244C(Item_GObj*);\nbool it_802C2454(Item_GObj*);\nbool it_802C245C(Item_GObj*);\nbool it_802C2464(Item_GObj*);\nvoid it_802C246C(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F76A8[];\n#define GALE01_2C1590\nvoid it_802C17FC(Item_GObj*);\nbool it_802C1FC8(Item_GObj*);\nbool it_802C1FD0(Item_GObj*);\nbool it_802C1FF0(Item_GObj*);\nbool it_802C1FF8(Item_GObj*);\nbool it_802C20E4(Item_GObj*);\nbool it_802C20EC(Item_GObj*);\nvoid it_802C210C(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7668[];\n#define GALE01_2C248C\nvoid it_802C37BC(Item_GObj*);\nvoid it_802C3AA4(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F76B8[];\n#define GALE01_2C8B28\nvoid it_802C8C74(Item_GObj*);\nvoid it_802C8F2C(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7A28[];\n#define GALE01_2F13B4\nvoid it_802F14E4(Item_GObj*);\nvoid it_802F1518(Item_GObj*);\nvoid it_802F1888(Item_GObj*);\nvoid it_802F18F0(Item_GObj*, Item_GObj*);\nbool it_802F1910(Item_GObj*);\nvoid it_802F1CE0(Item_GObj*);\nvoid it_802F1F48(Item_GObj*);\nextern ItemStateTable it_803F93C8[];\n#define GALE01_2F0F6C\nvoid it_802F1094(Item_GObj*, Item_GObj*);\nbool it_802F10B4(Item_GObj*);\nbool it_802F10D8(Item_GObj*);\nextern ItemStateTable it_803F93A8[];\n#define GALE01_293A08\nvoid it_80293A08(Item_GObj*);\nbool it_80293D6C(Item_GObj*);\nvoid it_80293D74(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6130[];\n#define GALE01_281164\nvoid it_80281164(Item_GObj*);\nvoid it_8028218C(Item_GObj*);\nvoid it_802826F8(Item_GObj*);\nvoid it_802829FC(Item_GObj*);\nvoid it_80282B14(Item_GObj*);\nint it_80283588(Item_GObj*);\nint it_802839BC(Item_GObj*);\nint it_80283A3C(Item_GObj*);\nint it_80283A5C(Item_GObj*);\nint it_80283A80(Item_GObj*);\nint it_80283AA4(Item_GObj*);\nvoid it_80283AC4(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F55D0[];\n#define GALE01_2C0510\n/* 2C09C4 */ Item_GObj* it_802C09C4(Fighter_GObj* owner, Vec3* pos, int,\n                                    enum_t, bool, bool, float facing_dir);\n/* 2C11E0 */ void it_802C11E0(Item_GObj*);\n/* 2C1384 */ bool it_802C1384(Item_GObj*);\n/* 2C13CC */ bool it_802C13CC(Item_GObj*);\n/* 2C1400 */ bool it_802C1400(Item_GObj*);\n/* 2C145C */ bool it_802C145C(Item_GObj*);\n/* 2C14B8 */ bool it_802C14B8(Item_GObj*);\n/* 2C1514 */ bool it_802C1514(Item_GObj*);\n/* 2C1570 */ void it_802C1570(Item_GObj*, Item_GObj*);\n/* 3F75D0 */ extern ItemStateTable it_803F75D0[];\n#define GALE01_288C88\nvoid it_80288D98(Item_GObj*);\nvoid it_80288F88(Item_GObj*);\nvoid it_80288FBC(Item_GObj*);\nvoid it_80288FDC(Item_GObj*);\nint it_80289218(Item_GObj*);\nint it_802893D4(Item_GObj*);\nint it_80289470(Item_GObj*);\nint it_8028950C(Item_GObj*);\nint it_802895A8(Item_GObj*);\nvoid it_80289644(Item_GObj*);\nvoid it_802896AC(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F5988[];\n#define GALE01_2CF3E0\nvoid it_802CF3E0(Item_GObj*);\nvoid it_802CF450(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7DC8[];\n#define GALE01_29B0C8\nvoid it_8029B188(Item_GObj*);\nvoid it_8029B1AC(Item_GObj*);\nvoid it_8029B2F4(Item_GObj*);\nvoid it_8029B328(Item_GObj*);\nvoid it_8029B348(Item_GObj*);\nbool it_8029B46C(Item_GObj*);\nbool it_8029B4AC(Item_GObj*);\nbool it_8029B4EC(Item_GObj*);\nbool it_8029B52C(Item_GObj*);\nbool it_8029B56C(Item_GObj*);\nvoid it_8029B670(Item_GObj*);\nvoid it_8029B6D8(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6728[];\n#define GALE01_292D48\nvoid it_80292E04(Item_GObj*);\nvoid it_80293284(Item_GObj*);\nvoid it_802933C4(Item_GObj*);\nvoid it_802933EC(Item_GObj*);\nbool it_80293488(Item_GObj*);\nbool it_802934AC(Item_GObj*);\nbool it_802934D0(Item_GObj*);\nbool it_802934F4(Item_GObj*);\nbool it_80293514(Item_GObj*);\nvoid it_80293534(Item_GObj*);\nvoid it_80293640(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6090[];\n#define GALE01_29A748\nvoid it_8029A9FC(Item_GObj*);\nvoid it_8029AD1C(Item_GObj*);\nvoid it_8029AD94(Item_GObj*);\nvoid it_8029AF34(Item_GObj*);\nvoid it_8029B0A8(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F66C8[];\n#define GALE01_2CC6E4\nvoid it_802CC6E4(Item_GObj*);\nvoid it_802CC744(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7C10[];\n#define GALE01_290938\nvoid it_80290A20(Item_GObj*);\nvoid it_80290F8C(Item_GObj*);\nvoid it_80290FC0(Item_GObj*);\nvoid it_80290FE0(Item_GObj*);\nbool it_802915E8(Item_GObj*);\nbool it_802917C8(Item_GObj*);\nbool it_802918A0(Item_GObj*);\nbool it_80291978(Item_GObj*);\nbool it_80291998(Item_GObj*);\nbool it_802919B8(Item_GObj*);\nvoid it_80291B58(Item_GObj*);\nvoid it_80291BC0(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F5EA8[];\n#define GALE01_28F9D8\nvoid it_8028FBE4(Item_GObj*);\nvoid it_8028FD7C(Item_GObj*);\nvoid it_8028FDE4(Item_GObj*);\nvoid it_8028FE70(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F5DB0[];\n#define GALE01_2ADDD0\n/* 2AE994 */ Item_GObj* it_802AE994(Fighter_GObj*, Fighter_Part, int);\n/* 2AEB00 */ void it_802AEB00(Item_GObj*);\n/* 2AF184 */ void it_802AF184(Item_GObj*, Item_GObj*);\n/* 3F6CA8 */ extern ItemStateTable it_803F6CA8[];\n#define GALE01_29CD18\nextern ItemStateTable it_803F6818[];\nvoid it_8029CD18(Item_GObj*, int arg1);\nHSD_JObj* it_8029CD78(Item_GObj*);\nItem_GObj* it_8029CEB4(HSD_GObj* parent, Vec3* pos, ItemKind kind, f32 dir);\nbool it_8029CF8C(Item_GObj*);\nvoid it_8029CFA0(Item_GObj*);\nvoid it_8029CFF0(Item_GObj*);\nbool it_8029D094(Item_GObj*);\nvoid it_8029D24C(Item_GObj*);\nbool it_8029D488(Item_GObj*);\nbool it_8029D490(Item_GObj*);\nvoid it_8029D554(Item_GObj*);\nbool it_8029D790(Item_GObj*);\nvoid it_8029D798(Item_GObj*);\nbool it_8029D7EC(Item_GObj*);\nvoid it_8029D870(Item_GObj*);\nbool it_8029D940(Item_GObj*);\nvoid it_8029D948(Item_GObj*, HSD_GObj* ref);\n#define GALE01_29C4D4\nextern ItemStateTable it_803F67D0[];\nbool it_8029C4D4(Item_GObj*);\nvoid it_8029C504(HSD_GObj* parent, Vec3* pos, enum_t msid, int kind, f32 angle,\n                 f32 arg9);\nvoid it_8029C6A4(f32 angle, f32 vel, HSD_GObj* parent, Vec3* vec, int kind);\nvoid it_8029C6CC(f32 angle, f32 vel, HSD_GObj* parent, Vec3* vec, int kind);\nbool it_8029C6F4(Item_GObj*);\nvoid it_8029C9CC(Item_GObj*);\nbool it_8029C9EC(Item_GObj*);\nbool it_8029CA78(Item_GObj*);\nbool it_8029CA80(Item_GObj*);\nbool it_8029CC4C(Item_GObj*);\nbool it_8029CC54(Item_GObj*);\nbool it_8029CCF0(Item_GObj*);\nvoid it_8029CCF8(Item_GObj*, HSD_GObj* ref);\n#define GALE01_28EB88\nvoid it_8028ED10(Item_GObj*);\nvoid it_8028ED50(Item_GObj*);\nvoid it_8028F2B4(Item_GObj*);\nvoid it_8028F318(Item_GObj*);\nvoid it_8028F340(Item_GObj*);\nbool it_8028F3CC(Item_GObj*);\nbool it_8028F3D4(Item_GObj*);\nbool it_8028F3DC(Item_GObj*);\nbool it_8028F3E4(Item_GObj*);\nbool it_8028F3EC(Item_GObj*);\nbool it_8028F40C(Item_GObj*);\nbool it_8028F42C(Item_GObj*);\nvoid it_8028F8C4(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F5D28[];\n#define GALE01_2CCF9C\nvoid it_802CCF9C(Item_GObj*);\nvoid it_802CD000(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7C70[];\n#define GALE01_2D6FD0\nvoid it_802D6FD0(Item_GObj*);\nextern ItemStateTable it_803F82F0[];\n#define GALE01_2C720C\nvoid it_802C7310(Item_GObj*);\nvoid it_802C73CC(Item_GObj*);\nvoid it_802C74B8(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7938[];\n#define GALE01_2C837C\nbool it_802C847C(Item_GObj*);\nbool it_802C88E4(Item_GObj*);\nbool it_802C8940(Item_GObj*);\nbool it_802C899C(Item_GObj*);\nbool it_802C8A08(Item_GObj*);\nbool it_802C8A28(Item_GObj*);\nvoid it_802C8B08(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F79E0[];\n#define GALE01_2C68F8\nvoid it_802C69FC(Item_GObj*);\nvoid it_802C6AB8(Item_GObj*);\nvoid it_802C6C18(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F78E8[];\n#define GALE01_2C61F4\nvoid it_802C62F8(Item_GObj*);\nvoid it_802C63B4(Item_GObj*);\nvoid it_802C65C4(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7898[];\n#define GALE01_2C7774\nvoid it_802C7A54(Item_GObj*);\nvoid it_802C7B10(Item_GObj*);\nvoid it_802C7D40(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7968[];\n#define GALE01_2C65E4\nvoid it_802C66E8(Item_GObj*);\nvoid it_802C67A4(Item_GObj*);\nvoid it_802C68D8(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F78D8[];\n#define GALE01_2C7D60\nvoid it_802C7E64(Item_GObj*);\nvoid it_802C7F20(Item_GObj*);\nvoid it_802C8018(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F79A0[];\n#define GALE01_2C6C38\nvoid it_802C6D3C(Item_GObj*);\nvoid it_802C6DF8(Item_GObj*);\nvoid it_802C6F20(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F78F8[];\n#define GALE01_2C8038\nvoid it_802C835C(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F79C0[];\n#define GALE01_2C6F40\nvoid it_802C7044(Item_GObj*);\nvoid it_802C7100(Item_GObj*);\nvoid it_802C71EC(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7918[];\n#define GALE01_28B8D8\nvoid it_8028BDAC(Item_GObj*);\nvoid it_8028C148(Item_GObj*);\nvoid it_8028C1AC(Item_GObj*);\nvoid it_8028C300(Item_GObj*);\nvoid it_8028CB24(Item_GObj*);\nbool it_8028CCA8(Item_GObj*);\nbool it_8028CCCC(Item_GObj*);\nbool it_8028CD04(Item_GObj*);\nbool it_8028CD3C(Item_GObj*);\nbool it_8028CE1C(Item_GObj*);\nbool it_8028CF2C(Item_GObj*);\nvoid it_8028CFC0(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F5BA8[];\n#define GALE01_293D94\ntypedef struct itHammerData {\n    u32 x0;\n    u32 x4;\n    f32 x8;\n} itHammerData;\nvoid it_80293D94(Item_GObj* gobj);\nint it_80293DCC(Item_GObj* gobj);\nvoid it_80293E34(Item_GObj* gobj);\nvoid it_80293F58(HSD_GObj* gobj);\nvoid it_80293F84(Item_GObj* gobj);\nstatic bool it_80293FF4(HSD_GObj* gobj);\nstatic void it_80293FFC(HSD_GObj* gobj);\nstatic bool it_80294000(HSD_GObj* gobj);\nstatic void it_8029402C(HSD_GObj* gobj);\nstatic int it_80294080(HSD_GObj* gobj);\nstatic void it_80294088(HSD_GObj* gobj);\nstatic int it_802940B8(HSD_GObj* gobj);\nvoid it_802940FC(HSD_GObj* gobj);\nstatic int it_80294170(HSD_GObj* gobj);\nvoid it_802941F8(HSD_GObj* gobj);\nstatic void it_802941A4(HSD_GObj* gobj);\nstatic void it_8029424C(HSD_GObj* gobj);\nstatic bool it_8029427C(HSD_GObj* gobj);\nvoid it_802942B0(HSD_GObj* gobj);\nstatic int it_80294304(HSD_GObj* gobj);\nstatic void it_8029430C(HSD_GObj* gobj);\nstatic int it_80294310(HSD_GObj* gobj);\nvoid it_80294344(Item_GObj* gobj, HSD_GObj* gobj2);\nextern ItemStateTable it_803F6150[];\n#define GALE01_299C48\nvoid it_80299C48(HSD_GObj*, Vec3*, Vec3*, f32);\nvoid it_80299D4C(Item_GObj*);\nvoid it_80299DD0(Item_GObj*);\nvoid it_80299E28(Item_GObj*);\nvoid it_80299E48(Item_GObj*);\nbool it_8029A0B0(Item_GObj*);\nbool it_8029A0B8(Item_GObj*);\nbool it_8029A0C0(Item_GObj*);\nbool it_8029A0C8(Item_GObj*);\nbool it_8029A0EC(Item_GObj*);\nvoid it_8029A0F4(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6640[];\n#define GALE01_2927E8\nvoid it_8029285C(Item_GObj*);\nvoid it_80292A5C(Item_GObj*);\nvoid it_80292A90(Item_GObj*);\nvoid it_80292B2C(Item_GObj*);\nbool it_80292BCC(Item_GObj*);\nvoid it_80292C08(Item_GObj*);\nbool it_80292C70(Item_GObj*);\nbool it_80292CAC(Item_GObj*);\nbool it_80292CCC(Item_GObj*);\nbool it_80292D08(Item_GObj*);\nvoid it_80292D28(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F5FF0[];\n#define GALE01_2CDBE0\nvoid it_802CDBE0(Item_GObj*);\nvoid it_802CDC60(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7CF8[];\n#define GALE01_283AE4\nvoid it_80283BEC(Item_GObj*);\nvoid it_80283C48(Item_GObj*);\nvoid it_80283F28(Item_GObj*);\nvoid it_8028402C(Item_GObj*);\nvoid it_8028412C(Item_GObj*);\nvoid it_80284194(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F56C8[];\n#define GALE01_2D5CF8\nvoid it_802D5CF8(Item_GObj*);\nbool it_802D6100(Item_GObj*);\nvoid it_802D61A8(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F8270[];\nextern ItemStateTable it_803F82A0[];\n#define GALE01_2D42C4\nvoid it_802D42C4(Item_GObj*);\nvoid it_802D43B0(Item_GObj*, Item_GObj*);\nvoid it_802D4DE0(Item_GObj*);\nbool it_802D4EF4(Item_GObj*);\nbool it_802D4F08(Item_GObj*);\nbool it_802D4F28(Item_GObj*);\nbool it_802D4F48(Item_GObj*);\nbool it_802D4F50(Item_GObj*);\nvoid it_802D4F58(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F8128[];\nextern ItemStateTable it_803F8180[];\n#define MELEE_IT_ITEMS_ITHOUOU_H\nvoid it_802D251C(Item_GObj*);\nvoid it_802D25BC(Item_GObj*, Item_GObj*);\nvoid it_802D2E80(Item_GObj*);\nvoid it_802D2ED0(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7F58[];\nextern ItemStateTable it_803F7FB8[];\n#define GALE01_2C9D40\nvoid it_802C9D40(Item_GObj*);\nvoid it_802C9E00(Item_GObj*);\nvoid it_802C9E24(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7AD8[];\n#define GALE01_2CA49C\nvoid it_802CA49C(Item_GObj*);\nvoid it_802CA538(Item_GObj*, Item_GObj*);\nvoid it_802CACD0(Item_GObj*);\nbool it_802CADC0(Item_GObj*);\nbool it_802CADC8(Item_GObj*);\nvoid it_802CADD0(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7B08[];\nextern ItemStateTable it_803F7B48[];\n#define GALE01_293660\nvoid it_8029367C(Item_GObj*);\nbool it_802939E0(Item_GObj*);\nvoid it_802939E8(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6110[];\n#define GALE01_29BAB8\nbool it_8029BFB4(Item_GObj*);\nbool it_8029BFBC(Item_GObj*);\nbool it_8029BFC4(Item_GObj*);\nbool it_8029BFCC(Item_GObj*);\nbool it_8029C208(Item_GObj*);\nbool it_8029C4AC(Item_GObj*);\nvoid it_8029C4B4(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6798[];\n#define GALE01_2C74D8\nvoid it_802C75DC(Item_GObj*);\nvoid it_802C7698(Item_GObj*);\nvoid it_802C7754(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7958[];\n#define GALE01_2ADC04\nvoid it_802ADC04(Item_GObj*);\nvoid it_802ADD88(Item_GObj*);\nvoid it_802ADDB0(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6C98[];\n#define GALE01_2D007C\nvoid it_802D007C(Item_GObj*);\nvoid it_802D0118(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7E28[];\n#define GALE01_2AC8A8\nbool it_802AD2E8(Item_GObj*);\nbool it_802AD2F0(Item_GObj*);\nbool it_802AD384(Item_GObj*);\nbool it_802AD38C(Item_GObj*);\nbool it_802AD3B0(Item_GObj*);\nbool it_802AD450(Item_GObj*);\nvoid it_802AD458(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6C58[];\n#define GALE01_2896CC\nvoid it_80289784(Item_GObj*);\nvoid it_8028A93C(Item_GObj*);\nvoid it_8028A970(Item_GObj*);\nvoid it_8028AB28(Item_GObj*);\nint it_8028AEA4(Item_GObj*);\nint it_8028AF1C(Item_GObj*);\nint it_8028AF54(Item_GObj*);\nint it_8028AF8C(Item_GObj*);\nint it_8028AFC4(Item_GObj*);\nvoid it_8028B06C(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F59F8[];\n#define GALE01_2E8BCC\nvoid it_802E8BCC(Item_GObj*);\nbool it_802E8CD8(Item_GObj*);\nvoid it_802EA0E0(Item_GObj*);\nvoid it_802EA154(Item_GObj*);\nvoid it_802EA1B4(Item_GObj*);\nvoid it_802EA41C(Item_GObj*);\nvoid it_802F044C(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F8EB0[];\n#define GALE01_28E738\nvoid it_8028E738(Item_GObj*);\nvoid it_8028E904(Item_GObj*);\nvoid it_8028E9B8(Item_GObj*);\nvoid it_8028E9E0(Item_GObj*);\nbool it_8028EA54(Item_GObj*);\nbool it_8028EA78(Item_GObj*);\nbool it_8028EA9C(Item_GObj*);\nbool it_8028EAC0(Item_GObj*);\nbool it_8028EAE0(Item_GObj*);\nvoid it_8028EB00(Item_GObj*);\nvoid it_8028EB68(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F5CC8[];\n#define GALE01_2993E0\nbool it_80299B6C(Item_GObj*);\nbool it_80299B74(Item_GObj*);\nbool it_80299C08(Item_GObj*);\nbool it_80299C10(Item_GObj*);\nbool it_80299C18(Item_GObj*);\nbool it_80299C20(Item_GObj*);\nvoid it_80299C28(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6630[];\n#define GALE01_298168\nbool it_80298634(Item_GObj*);\nbool it_8029863C(Item_GObj*);\nbool it_80298644(Item_GObj*);\nbool it_8029864C(Item_GObj*);\nbool it_80298654(Item_GObj*);\nbool it_80298828(Item_GObj*);\nvoid it_802988C4(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F64F8[];\n#define GALE01_2A7D8C\nvoid it_802A8984(Item_GObj*);\nvoid it_802A8AF8(Item_GObj*);\nbool it_802A9A80(Item_GObj*);\nbool it_802A9B08(Item_GObj*);\nbool it_802A9CE0(Item_GObj*);\nbool it_802A9D4C(Item_GObj*);\nvoid it_802AA034(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6A28[];\n#define GALE01_29D968\nvoid it_8029DEB0(Item_GObj*);\nvoid it_8029E5D0(Item_GObj*);\nvoid it_8029EC34(Item_GObj*);\nbool it_8029F960(Item_GObj*);\nbool it_8029FA30(Item_GObj*);\nvoid it_8029FB24(Item_GObj*);\nbool it_8029FD20(Item_GObj*);\nbool it_8029FD40(Item_GObj*);\nbool it_8029FD64(Item_GObj*);\nvoid it_8029FD84(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6888[];\n#define GALE01_29FDBC\nvoid it_802A087C(Item_GObj*);\nvoid it_802A0E70(Item_GObj*);\nvoid it_802A0F84(Item_GObj*);\nvoid it_802A0F88(Item_GObj*);\nbool it_802A1F08(Item_GObj*);\nbool it_802A1FA8(Item_GObj*);\nbool it_802A2048(Item_GObj*);\nbool it_802A20E8(Item_GObj*);\nbool it_802A2288(Item_GObj*);\nbool it_802A2320(Item_GObj*);\nvoid it_802A23CC(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6920[];\n#define GALE01_2AF1A4\nvoid it_802AF298(Item_GObj*);\nvoid it_802AF434(Item_GObj*);\nvoid it_802AF920(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6E98[];\n#define GALE01_2A2418\nvoid it_802A2418(Item_GObj*);\nvoid it_802A7688(Item_GObj*);\nvoid it_802A7D40(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6998[];\n#define GALE01_29570C\nvoid it_8029570C(Item_GObj*);\nvoid it_802958C8(Item_GObj*);\nvoid it_80295908(Item_GObj*);\nvoid it_80295974(Item_GObj*);\nbool it_80295ACC(Item_GObj*);\nvoid it_80295B08(Item_GObj*);\nbool it_80295B70(Item_GObj*);\nbool it_80295BAC(Item_GObj*);\nbool it_80295BCC(Item_GObj*);\nbool it_80295C08(Item_GObj*);\nvoid it_80295C28(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6310[];\n#define GALE01_29A114\nbool it_8029A600(Item_GObj*);\nbool it_8029A608(Item_GObj*);\nbool it_8029A610(Item_GObj*);\nbool it_8029A618(Item_GObj*);\nbool it_8029A620(Item_GObj*);\nbool it_8029A704(Item_GObj*);\nvoid it_8029A728(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6680[];\n#define GALE01_2CB8AC\nvoid it_802CB8AC(Item_GObj*);\nvoid it_802CB940(Item_GObj*, Item_GObj*);\nvoid it_802CC3D4(Item_GObj*);\nvoid it_802CC440(Item_GObj*);\nvoid it_802CC4AC(Item_GObj*);\nvoid it_802CC518(Item_GObj*);\nvoid it_802CC584(Item_GObj*, Item_GObj*);\nbool it_802CC5A4(Item_GObj*);\nbool it_802CC5C4(Item_GObj*);\nbool it_802CC5CC(Item_GObj*);\nextern ItemStateTable it_803F7BC0[];\nextern ItemStateTable it_803F7C00[];\n#define GALE01_2D5050\nvoid it_802D5050(Item_GObj*);\nbool it_802D5648(Item_GObj*);\nvoid it_802D56F0(Item_GObj*, Item_GObj*);\nvoid it_802D57D0(Item_GObj*);\nvoid it_802D59A8(Item_GObj*);\nvoid it_802D59DC(Item_GObj*);\nvoid it_802D5A04(Item_GObj*);\nvoid it_802D5A9C(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F8190[];\nextern ItemStateTable it_803F8200[];\n#define GALE01_2D1438\nvoid it_802D1438(Item_GObj*);\nvoid it_802D14D4(Item_GObj*, Item_GObj*);\nvoid it_802D2308(Item_GObj*);\nvoid it_802D234C(Item_GObj*);\nvoid it_802D2390(Item_GObj*);\nvoid it_802D23D4(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7EE8[];\nextern ItemStateTable it_803F7F48[];\n#define GALE01_2C01AC\nbool it_802C0490(Item_GObj*);\nbool it_802C0498(Item_GObj*);\nbool it_802C04B8(Item_GObj*);\nbool it_802C04C0(Item_GObj*);\nbool it_802C04C8(Item_GObj*);\nbool it_802C04D0(Item_GObj*);\nvoid it_802C04F0(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F75C0[];\n#define GALE01_2D66F8\nbool it_802D6808(Item_GObj*);\nbool it_802D6810(Item_GObj*);\nbool it_802D6830(Item_GObj*);\nbool it_802D6838(Item_GObj*);\nbool it_802D6840(Item_GObj*);\nbool it_802D6848(Item_GObj*);\nvoid it_802D6850(Item_GObj*, Item_GObj*);\nvoid it_802D6870(Item_GObj*);\nbool it_802D6F00(Item_GObj*);\nvoid it_802D6FB0(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F82B0[];\n#define GALE01_2B2560\nvoid it_802B2644(Item_GObj*);\nvoid it_802B2700(Item_GObj*);\nvoid it_802B2870(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F70F8[];\n#define GALE01_29B6F8\nbool it_8029BA38(Item_GObj*);\nbool it_8029BA40(Item_GObj*);\nbool it_8029BA60(Item_GObj*);\nbool it_8029BA68(Item_GObj*);\nbool it_8029BA70(Item_GObj*);\nbool it_8029BA78(Item_GObj*);\nvoid it_8029BA98(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6788[];\n#define GALE01_2D09D0\nvoid it_802D0A0C(Item_GObj*);\nvoid it_802D0AB0(Item_GObj*, Item_GObj*);\nbool it_802D0AD0(Item_GObj*);\nvoid it_802D0D18(Item_GObj*);\nvoid it_802D0E30(Item_GObj*);\nvoid it_802D0E90(Item_GObj*);\nextern ItemStateTable it_803F7E78[];\n#define GALE01_2F0AE0\nvoid it_802F0BC8(Item_GObj*, Item_GObj*);\nbool it_802F0F0C(Item_GObj*);\nbool it_802F0F14(Item_GObj*);\nbool it_802F0F34(Item_GObj*);\nbool it_802F0F3C(Item_GObj*);\nbool it_802F0F44(Item_GObj*);\nbool it_802F0F64(Item_GObj*);\nextern ItemStateTable it_803F9388[];\n#define GALE01_2F0340\nextern ItemStateTable it_803F9378[];\n#define GALE01_2CAFD4\nvoid it_802CAFD4(Item_GObj*);\nvoid it_802CB0F8(Item_GObj*, Item_GObj*);\nvoid it_802CB690(Item_GObj*);\nvoid it_802CB704(Item_GObj*);\nvoid it_802CB778(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7B58[];\nextern ItemStateTable it_803F7BB0[];\n#define GALE01_2978DC\nvoid it_802978DC(Item_GObj*);\nvoid it_80297904(Item_GObj*);\nvoid it_80297ABC(Item_GObj*);\nvoid it_80297AF0(Item_GObj*);\nvoid it_80297B18(Item_GObj*);\nbool it_80297BB8(Item_GObj*);\nvoid it_80297BF8(Item_GObj*);\nbool it_80298060(Item_GObj*);\nbool it_802980A0(Item_GObj*);\nbool it_802980D4(Item_GObj*);\nbool it_80298114(Item_GObj*);\nvoid it_80298148(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6488[];\n#define GALE01_2953C8\nvoid it_802953C8(Item_GObj*);\nvoid it_80295524(Item_GObj*);\nvoid it_80295554(Item_GObj*);\nbool it_802955E0(Item_GObj*);\nvoid it_80295684(Item_GObj*);\nvoid it_802956EC(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F62C0[];\n#define GALE01_2D3008\nvoid it_802D3008(Item_GObj*);\nvoid it_802D3070(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7FC8[];\n#define GALE01_2D3B18\nvoid it_802D3B18(Item_GObj*);\nvoid it_802D3B6C(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F80C8[];\n#define GALE01_2C49E0\nvoid it_802C4A00(Item_GObj*);\nbool it_802C4C90(Item_GObj*);\nbool it_802C4C98(Item_GObj*);\nbool it_802C4CB8(Item_GObj*);\nbool it_802C4CC0(Item_GObj*);\nbool it_802C4CC8(Item_GObj*);\nbool it_802C4CD0(Item_GObj*);\nvoid it_802C4CD8(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7750[];\n#define GALE01_2C4D10\nvoid it_802C56A0(Item_GObj*);\nvoid it_802C578C(Item_GObj*);\nbool it_802C60B4(Item_GObj*);\nbool it_802C60BC(Item_GObj*);\nbool it_802C60C4(Item_GObj*);\nbool it_802C60CC(Item_GObj*);\nbool it_802C6138(Item_GObj*);\nbool it_802C6140(Item_GObj*);\nvoid it_802C61D4(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7760[];\n#define GALE01_28FE90\nvoid it_8028FED4(Item_GObj*);\nvoid it_802900CC(Item_GObj*);\nvoid it_802900F4(Item_GObj*);\nvoid it_80290114(Item_GObj*);\nbool it_802906E4(Item_GObj*);\nbool it_80290738(Item_GObj*);\nvoid it_80290794(Item_GObj*);\nbool it_802907F0(Item_GObj*);\nbool it_80290830(Item_GObj*);\nbool it_80290850(Item_GObj*);\nbool it_802908A4(Item_GObj*);\nvoid it_80290918(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F5E00[];\n#define GALE01_2AD478\n/* 2AD590 */ Item_GObj* it_802AD590(Fighter_GObj*, Fighter_Part);\n/* 2AD6F0 */ void it_802AD6F0(Item_GObj*);\n/* 2AD9FC */ void it_802AD9FC(Item_GObj*, Item_GObj*);\n/* 3F6C68 */ extern ItemStateTable it_803F6C68[];\n#define GALE01_2AA494\nbool it_802AA75C(Item_GObj*);\nvoid it_802AA7C4(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6B60[];\n#define GALE01_2AA054\nbool it_802AA284(Item_GObj*);\nbool it_802AA2E8(Item_GObj*);\nbool it_802AA34C(Item_GObj*);\nbool it_802AA354(Item_GObj*);\nbool it_802AA35C(Item_GObj*);\nbool it_802AA37C(Item_GObj*);\nvoid it_802AA474(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6B28[];\n#define GALE01_2AA7E4\nvoid it_802AA9CC(Item_GObj*);\nbool it_802AB2AC(Item_GObj*);\nbool it_802AB3C0(Item_GObj*);\nbool it_802AB3C8(Item_GObj*);\nvoid it_802AB3D0(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6B70[];\n#define GALE01_2AF940\nvoid it_802AFA2C(Item_GObj*);\nbool it_802AFD4C(Item_GObj*);\nbool it_802AFD54(Item_GObj*);\nbool it_802AFD5C(Item_GObj*);\nbool it_802AFD64(Item_GObj*);\nvoid it_802AFD6C(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6F40[];\n#define GALE01_2AB3F0\nvoid it_802AB90C(Item_GObj*);\nbool it_802AC050(Item_GObj*);\nbool it_802AC074(Item_GObj*);\nbool it_802AC098(Item_GObj*);\nbool it_802AC338(Item_GObj*);\nbool it_802AC35C(Item_GObj*);\nbool it_802AC3F8(Item_GObj*);\nvoid it_802AC41C(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6BC8[];\n#define GALE01_2AC43C\nextern ItemStateTable it_803F6C08[];\n#define GALE01_2BE598\nvoid it_802BFE34(Item_GObj*);\nvoid it_802C016C(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7558[];\n#define GALE01_2E4A44\nvoid it_802E4A44(Item_GObj*);\nbool it_802E4B00(Item_GObj*);\nvoid it_802E561C(Item_GObj*);\nvoid it_802E5690(Item_GObj*);\nvoid it_802E56E8(Item_GObj*);\nvoid it_802E5AA4(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F8B48[];\n#define GALE01_2E878C\nvoid it_802E878C(Item_GObj*);\nbool it_802E87D8(Item_GObj*);\nbool it_802E87E0(Item_GObj*);\nbool it_802E87E8(Item_GObj*);\nbool it_802E87F0(Item_GObj*);\nbool it_802E87F8(Item_GObj*);\nbool it_802E881C(Item_GObj*);\nvoid it_802E89B0(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F8E90[];\n#define GALE01_2D73D0\nvoid it_802D73D0(Item_GObj*, Item_GObj*);\nvoid it_802D73F0(Item_GObj*);\nvoid it_802D7C14(Item_GObj*);\nvoid it_802D7CB4(Item_GObj*);\nvoid it_802D7D18(Item_GObj*);\nbool it_802D7F38(Item_GObj*);\nvoid it_802E2470(Item_GObj*);\nbool it_802E257C(Item_GObj*);\nvoid it_802E31F8(Item_GObj*);\nvoid it_802E32B4(Item_GObj*);\nvoid it_802E3314(Item_GObj*);\nvoid it_802E34DC(Item_GObj*);\nvoid it_802E3784(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F8320[];\n#define GALE01_2E2470\nextern ItemStateTable it_803F89C8[];\n#define GALE01_28B08C\nint it_8028B08C(Item_GObj* item_gobj, int statenum);\nvoid it_8028B0B8(Item_GObj* item_gobj);\nvoid it_8028B0EC(Item_GObj* item_gobj);\nbool it_8028B144(Item_GObj* item_gobj);\nvoid it_8028B14C(Item_GObj* item_gobj);\nbool it_8028B150(Item_GObj* item_gobj);\nvoid it_8028B17C(Item_GObj* item_gobj);\nbool it_8028B1A4(Item_GObj* item_gobj);\nvoid it_8028B2EC(Item_GObj* item_gobj);\nbool it_8028B394(Item_GObj* item_gobj);\nvoid it_8028B3C0(Item_GObj* item_gobj);\nvoid it_8028B3E0(Item_GObj* item_gobj);\nvoid it_8028B42C(Item_GObj* item_gobj);\nbool it_8028B4D4(Item_GObj* item_gobj);\nbool it_8028B4F8(Item_GObj* item_gobj);\nbool it_8028B51C(Item_GObj* item_gobj);\nbool it_8028B540(Item_GObj* item_gobj);\nbool it_8028B560(Item_GObj* item_gobj);\nvoid it_8028B580(Item_GObj* item_gobj);\nbool it_8028B5A8(Item_GObj* item_gobj);\nvoid it_8028B5B0(Item_GObj* item_gobj);\nbool it_8028B5B4(Item_GObj* item_gobj);\nvoid it_8028B5E8(Item_GObj* item_gobj);\nbool it_8028B60C(Item_GObj* item_gobj);\nvoid it_8028B614(Item_GObj* item_gobj);\nvoid it_8028B618(Item_GObj* item_gobj, f32 speed);\nvoid it_8028B648(Item_GObj* item_gobj, f32 speed);\nvoid it_8028B6B0(Item_GObj* item_gobj, f32 speed);\nvoid it_8028B718(Item_GObj* item_gobj, f32 speed);\nvoid it_8028B780(Item_GObj* item_gobj, f32 speed);\nvoid it_8028B7E8(Item_GObj* item_gobj, f32 speed);\nvoid it_8028B850(Item_GObj* item_gobj, f32 speed);\nvoid it_8028B8B8(Item_GObj* item_gobj, HSD_GObj*);\nextern ItemStateTable it_803F5AB0[];\nextern ItemStateTable it_803F70B8[];\n#define GALE01_2BD158\nbool it_802BD240(Item_GObj*);\nvoid it_802BD30C(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7488[];\n#define GALE01_2BDA40\nint it_802BDA40(Item_GObj*, int);\nItem_GObj* it_802BDA64(HSD_GObj* parent, Vec3* pos, u8 arg2, f32 dir);\nvoid it_802BDB4C(Item_GObj*);\nvoid it_802BDB94(Item_GObj*);\nvoid it_802BDBF8(Item_GObj*);\nvoid it_802BDC18(Item_GObj*);\nbool it_802BDC38(Item_GObj*);\nvoid it_802BDC74(Item_GObj*);\nbool it_802BDCC0(Item_GObj*);\nvoid it_802BDD3C(Item_GObj*);\nvoid it_802BDD40(Item_GObj*, f32 arg1);\nvoid it_802BDDB4(Item_GObj*, f32 arg1);\nvoid it_802BDDF8(Item_GObj*, HSD_GObj*);\nextern ItemStateTable it_803F74F8[];\n#define GALE01_2BDE18\nvoid it_802BDEFC(Item_GObj*);\nvoid it_802BDFE0(Item_GObj*);\nvoid it_802BE1F4(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7528[];\n#define GALE01_2BE214\nbool it_802BE488(Item_GObj*);\nbool it_802BE4AC(Item_GObj*);\nbool it_802BE4D0(Item_GObj*);\nbool it_802BE4F4(Item_GObj*);\nbool it_802BE518(Item_GObj*);\nbool it_802BE538(Item_GObj*);\nvoid it_802BE578(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7548[];\n#define MELEE_IT_ITEMS_ITPEACHTURNIP_H\nvoid it_802BD47C(Item_GObj*);\nvoid it_802BD628(Item_GObj*);\nvoid it_802BD748(Item_GObj*);\nvoid it_802BD8CC(Item_GObj*);\nbool it_802BD938(Item_GObj*);\nbool it_802BD978(Item_GObj*);\nbool it_802BD99C(Item_GObj*);\nbool it_802BD9C0(Item_GObj*);\nbool it_802BD9E4(Item_GObj*);\nvoid it_802BDA08(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F74A8[];\n#define GALE01_2B1DEC\nvoid it_802B202C(Item_GObj*);\nbool it_802B2508(Item_GObj*);\nbool it_802B2510(Item_GObj*);\nbool it_802B2518(Item_GObj*);\nbool it_802B2520(Item_GObj*);\nvoid it_802B2528(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F70C8[];\n#define GALE01_2B3EFC\nbool it_802B45F0(Item_GObj*);\nbool it_802B4638(Item_GObj*);\nbool it_802B4680(Item_GObj*);\nbool it_802B46C8(Item_GObj*);\nbool it_802B4A18(Item_GObj*);\nbool it_802B4A60(Item_GObj*);\nvoid it_802B4AA8(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F71D8[];\n#define GALE01_2B3368\nvoid it_802B34E4(Item_GObj*);\nbool it_802B3A94(Item_GObj*);\nbool it_802B3AF8(Item_GObj*);\nbool it_802B3C44(Item_GObj*);\nbool it_802B3CA8(Item_GObj*);\nbool it_802B3D0C(Item_GObj*);\nbool it_802B3D70(Item_GObj*);\nvoid it_802B3EDC(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7190[];\n#define GALE01_2D3260\nvoid it_802D3260(Item_GObj*);\nvoid it_802D32DC(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7FF8[];\n#define GALE01_2D5ABC\nvoid it_802D5ABC(Item_GObj*);\nvoid it_802D5B14(Item_GObj*);\nbool it_802D5B60(Item_GObj*);\nvoid it_802D5BBC(Item_GObj*);\nbool it_802D5BDC(Item_GObj*);\nvoid it_802D5C00(Item_GObj*);\nbool it_802D5C60(Item_GObj*);\nvoid it_802D5CB0(Item_GObj*);\nbool it_802D5CD0(Item_GObj*);\nvoid it_802D5CD8(Item_GObj*, HSD_GObj*);\nextern ItemStateTable it_803F8250[];\n#define GALE01_294DA0\nbool it_80294DA0(Item_GObj*);\nvoid it_80295118(Item_GObj*);\nvoid it_8029524C(Item_GObj*);\nvoid it_80295298(Item_GObj*);\nvoid it_80295340(Item_GObj*);\nvoid it_802953A8(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6270[];\n#define GALE01_2CF814\nvoid it_802CF814(Item_GObj*);\nvoid it_802CF884(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7DE8[];\n#define GALE01_28CFE0\nvoid it_8028D59C(Item_GObj*);\nvoid it_8028D898(Item_GObj*);\nvoid it_8028D8E0(Item_GObj*);\nvoid it_8028D9F4(Item_GObj*);\nvoid it_8028E3CC(Item_GObj*);\nbool it_8028E540(Item_GObj*);\nbool it_8028E584(Item_GObj*);\nbool it_8028E5C8(Item_GObj*);\nbool it_8028E600(Item_GObj*);\nbool it_8028E624(Item_GObj*);\nbool it_8028E684(Item_GObj*);\nvoid it_8028E718(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F5C48[];\n#define GALE01_2B4AC8\nvoid it_802B4F78(Item_GObj*);\nbool it_802B52B8(Item_GObj*);\nbool it_802B52EC(Item_GObj*);\nbool it_802B5320(Item_GObj*);\nbool it_802B5354(Item_GObj*);\nbool it_802B5374(Item_GObj*);\nvoid it_802B54E4(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7220[];\n#define GALE01_2B5518\nvoid it_802B58D8(Item_GObj*);\nvoid it_802B59C4(Item_GObj*);\nbool it_802B5FD8(Item_GObj*);\nbool it_802B5FE0(Item_GObj*);\nbool it_802B5FE8(Item_GObj*);\nbool it_802B5FF0(Item_GObj*);\nbool it_802B613C(Item_GObj*);\nbool it_802B6144(Item_GObj*);\nvoid it_802B62B0(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7288[];\n#define GALE01_2B7150\nvoid it_802B7150(Item_GObj*);\nvoid it_802BA97C(Item_GObj*);\nvoid it_802BAEA0(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F73A8[];\n#define GALE01_2B62D0\nbool it_802B6C28(Item_GObj*);\nbool it_802B6C7C(Item_GObj*);\nbool it_802B6CD0(Item_GObj*);\nbool it_802B6D24(Item_GObj*);\nbool it_802B6E4C(Item_GObj*);\nvoid it_802B7104(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7340[];\n#define GALE01_294AB0\nvoid it_80294AB0(Item_GObj*);\nvoid it_80294BE4(Item_GObj*);\nvoid it_80294C14(Item_GObj*);\nvoid it_80294C3C(Item_GObj*);\nvoid it_80294CE4(Item_GObj*);\nbool it_80294D4C(Item_GObj*);\nbool it_80294D54(Item_GObj*);\nbool it_80294D5C(Item_GObj*);\nbool it_80294D7C(Item_GObj*);\nextern ItemStateTable it_803F6220[];\n#define GALE01_2BAEEC\nvoid it_802BCE94(Item_GObj*);\nvoid it_802BD10C(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7438[];\n#define GALE01_2B18B0\nvoid it_802B1AAC(Item_GObj*);\nvoid it_802B1C40(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F70A8[];\n#define GALE01_2AFD8C\nvoid it_802AFEF8(Item_GObj*);\nbool it_802B0D84(Item_GObj*);\nbool it_802B0F34(Item_GObj*);\nbool it_802B10E4(Item_GObj*);\nbool it_802B1294(Item_GObj*);\nbool it_802B14DC(Item_GObj*);\nbool it_802B16E4(Item_GObj*);\nvoid it_802B1890(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6F50[];\n#define GALE01_2B1C60\nItem_GObj* it_802B1C60(HSD_GObj* parent, Vec3* pos, f32 dir);\nbool it_802B1D38(Item_GObj*);\nvoid it_802B1D40(Item_GObj*, HSD_GObj*);\nbool it_802B1DAC(Item_GObj*);\nvoid it_802B1DCC(Item_GObj*, HSD_GObj*);\nextern ItemStateTable it_803F70B8[];\n#define GALE01_2CD44C\nvoid it_802CD44C(Item_GObj*);\nvoid it_802CD4DC(Item_GObj*, Item_GObj*);\nbool it_802CD7B8(Item_GObj*);\nbool it_802CD7D4(Item_GObj*);\nextern ItemStateTable it_803F7CA0[];\n#define GALE01_295C48\nvoid it_80295C48(Item_GObj*);\nvoid it_80295D90(Item_GObj*);\nvoid it_80295DC0(Item_GObj*);\nvoid it_80295E4C(Item_GObj*);\nvoid it_80295EB4(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6370[];\n#define GALE01_291BE0\nvoid it_80291C98(Item_GObj*);\nvoid it_8029215C(Item_GObj*);\nvoid it_80292190(Item_GObj*);\nvoid it_802921B8(Item_GObj*);\nbool it_8029222C(Item_GObj*);\nbool it_80292250(Item_GObj*);\nbool it_80292274(Item_GObj*);\nbool it_80292298(Item_GObj*);\nbool it_802922B8(Item_GObj*);\nvoid it_802922D8(Item_GObj*);\nvoid it_80292340(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F5F40[];\n#define GALE01_298DEC\nbool it_80299360(Item_GObj*);\nbool it_80299368(Item_GObj*);\nbool it_80299370(Item_GObj*);\nbool it_80299378(Item_GObj*);\nbool it_80299380(Item_GObj*);\nbool it_802993A0(Item_GObj*);\nvoid it_802993C0(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6568[];\n#define GALE01_284644\nvoid it_80284644(Item_GObj*);\nvoid it_802846D4(Item_GObj*);\nbool it_802846FC(Item_GObj*);\nvoid it_80284704(Item_GObj*);\nbool it_80284734(Item_GObj*);\nbool it_8028482C(Item_GObj*);\nvoid it_80284834(Item_GObj*, HSD_GObj* ref);\nextern ItemStateTable it_803F57A0[];\n#define GALE01_292360\nvoid it_80292360(Item_GObj*);\nvoid it_80292514(Item_GObj*);\nvoid it_80292548(Item_GObj*);\nvoid it_802925B4(Item_GObj*);\nbool it_8029266C(Item_GObj*);\nvoid it_802926A8(Item_GObj*);\nbool it_80292710(Item_GObj*);\nbool it_8029274C(Item_GObj*);\nbool it_8029276C(Item_GObj*);\nbool it_802927A8(Item_GObj*);\nvoid it_802927C8(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F5F90[];\n#define GALE01_2988E4\nbool it_80298BE4(Item_GObj*);\nbool it_80298BEC(Item_GObj*);\nbool it_80298BF4(Item_GObj*);\nbool it_80298BFC(Item_GObj*);\nbool it_80298C04(Item_GObj*);\nbool it_80298CE8(Item_GObj*);\nvoid it_80298DCC(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F6530[];\n#define GALE01_2CFC48\nvoid it_802CFC48(Item_GObj*);\nvoid it_802CFCB8(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7E08[];\n#define GALE01_284D54\nvoid it_80284E10(HSD_GObj*, int);\nvoid it_80285338(Item_GObj*);\nvoid it_80285804(Item_GObj*);\nvoid it_80285B00(Item_GObj*);\nvoid it_80285C78(Item_GObj*);\nvoid it_80285DF0(Item_GObj*);\nbool it_80285FAC(Item_GObj*);\nbool it_80285FE0(Item_GObj*);\nbool it_80286000(Item_GObj*);\nbool it_80286024(Item_GObj*);\nbool it_80286048(Item_GObj*);\nvoid it_80286068(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F5800[];\n#define GALE01_287458\nvoid it_80287458(Item_GObj*);\nvoid it_80287E68(Item_GObj*);\nvoid it_80287EA8(Item_GObj*);\nvoid it_80287EC8(Item_GObj*);\nint it_80288818(Item_GObj*);\nint it_802888B8(Item_GObj*);\nint it_80288958(Item_GObj*);\nint it_802889F8(Item_GObj*);\nint it_80288A98(Item_GObj*);\nvoid it_80288C68(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F58E0[];\n#define GALE01_295ED4\nvoid it_802960E0(Item_GObj*);\nvoid it_80296120(Item_GObj*);\nvoid it_8029683C(Item_GObj*);\nvoid it_802968D8(Item_GObj*);\nvoid it_80296930(Item_GObj*);\nint it_8029789C(Item_GObj*);\nint it_802978A4(Item_GObj*);\nint it_802978AC(Item_GObj*);\nint it_802978B4(Item_GObj*);\nvoid it_802978BC(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F63C0[];\n#define GALE01_2CCAB4\nvoid it_802CCAB4(Item_GObj*);\nvoid it_802CCB14(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7C40[];\n#define GALE01_2D36B0\nvoid it_802D36B0(Item_GObj*);\nvoid it_802D372C(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F8058[];\n#define GALE01_2841B4\nvoid it_802842A4(Item_GObj*);\nvoid it_80284324(Item_GObj*);\nvoid it_802844E4(Item_GObj*);\nvoid it_8028454C(Item_GObj*);\nvoid it_802845BC(Item_GObj*);\nvoid it_80284624(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F5740[];\n#define GALE01_2C8F4C\nvoid it_802C8F4C(Item_GObj*);\nvoid it_802C8FC4(Item_GObj*, Item_GObj*);\nvoid it_802C9504(Item_GObj*);\nextern ItemStateTable it_803F7A48[];\n/// @file\n/// Unown, the Pok\u00e9mon.\n#define GALE01_2CE710\nvoid it_802CE710(Item_GObj*);\nvoid it_802CE7D0(Item_GObj*, Item_GObj*);\nvoid it_802CEEC8(Item_GObj*);\nvoid it_802CF0B4(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7D60[];\nextern ItemStateTable it_803F7D90[];\n#define GALE01_294364\nvoid it_8029451C(Item_GObj*);\nvoid it_80294728(Item_GObj*);\nvoid it_80294790(Item_GObj*);\nvoid it_80294A28(Item_GObj*);\nvoid it_80294A90(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F61B0[];\n#define GALE01_2B2890\nvoid it_802B2AE0(Item_GObj*);\nbool it_802B2C04(Item_GObj*);\nbool it_802B2D50(Item_GObj*);\nbool it_802B2E5C(Item_GObj*);\nbool it_802B2E7C(Item_GObj*);\nbool it_802B2F88(Item_GObj*);\nvoid it_802B2FA8(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7118[];\n#define GALE01_2B2FC8\nItem_GObj* it_802B2FC8(HSD_GObj* parent, Vec3* pos, f32 dir);\nbool it_802B309C(Item_GObj*);\nbool it_802B30C0(Item_GObj*);\nbool it_802B30E4(Item_GObj*);\nbool it_802B3108(Item_GObj*);\nbool it_802B312C(Item_GObj*);\nbool it_802B314C(Item_GObj*);\nvoid it_802B322C(Item_GObj*, HSD_GObj*);\nbool it_802B3294(Item_GObj*);\nvoid it_802B32C8(Item_GObj*);\nbool it_802B3324(Item_GObj*);\nvoid it_802B3348(Item_GObj*, HSD_GObj*);\nextern ItemStateTable it_803F7158[];\n#define GALE01_2C3AF0\nvoid it_802C3CBC(Item_GObj*);\nbool it_802C443C(Item_GObj*);\nbool it_802C4550(Item_GObj*);\nbool it_802C4558(Item_GObj*);\nvoid it_802C4560(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F76F8[];\n#define GALE01_2C4580\nvoid it_802C4670(Item_GObj*);\nbool it_802C49A0(Item_GObj*);\nbool it_802C49A8(Item_GObj*);\nbool it_802C49B0(Item_GObj*);\nbool it_802C49B8(Item_GObj*);\nvoid it_802C49C0(Item_GObj*, Item_GObj*);\nextern ItemStateTable it_803F7740[];\n#define _code_8000B074_h_\nbool lb_8000B074(HSD_JObj*);\nbool lb_8000B09C(HSD_JObj*);\nbool lb_8000B134(HSD_JObj*);\nvoid lb_8000B1CC(HSD_JObj*, Vec3*, Vec3*);\nvoid lb_8000B4FC(HSD_JObj*, HSD_Joint*);\nvoid lb_8000B5DC(HSD_JObj*, HSD_Joint*);\nvoid lb_8000B6A4(HSD_JObj*, HSD_Joint*);\nvoid lb_8000B760(HSD_JObj*, HSD_Joint*);\nvoid lb_8000B804(HSD_JObj*, HSD_Joint*);\nstatic void lb_8000B9D8(HSD_JObj*, f32**, s32);\nvoid lb_8000BA0C(HSD_JObj*, f32);\nvoid lb_8000BA44(HSD_DObj*, f32);\nvoid lb_8000BB24(HSD_DObj*, f32);\nstatic HSD_JObj* lbFindJObjWithAObj(HSD_JObj*);\nf32 lb_8000BD28(HSD_JObj*);\nf32 lb_8000BDB4(HSD_JObj*);\nf32 lb_8000BE40(HSD_JObj*);\nstatic HSD_AnimJoint* lb_8000BECC(HSD_AnimJoint* animjoint);\nf32 lb_8000BFF0(HSD_AnimJoint* animjoint);\nvoid lb_8000C07C(HSD_JObj*, s32 i, HSD_AnimJoint**, HSD_MatAnimJoint**,\n                 HSD_ShapeAnimJoint**);\nvoid lb_8000C0E8(HSD_JObj* jobj, s32 i, DynamicModelDesc* arg2);\nvoid lb_8000C160(void* mem, int size);\nvoid lb_8000C1C0(HSD_JObj*, HSD_JObj* constraint);\nvoid lb_8000C228(HSD_JObj*, HSD_JObj* constraint);\nvoid lb_8000C290(HSD_JObj*, HSD_JObj* constraint);\nvoid lb_8000C2F8(HSD_JObj*, HSD_JObj* constraint);\nvoid lb_8000C390(HSD_JObj*);\nvoid lb_8000C420(HSD_JObj*, u32 flags, f32 limit);\nvoid lb_8000C490(HSD_JObj*, HSD_JObj*, HSD_JObj*, f32, f32);\nvoid lb_8000C7BC(HSD_JObj* src, HSD_JObj* dst);\nvoid lb_8000C868(HSD_Joint*, HSD_JObj*, HSD_JObj*, f32, f32);\nstatic s32 lbGetFreeColorRegImpl(s32 i0, HSD_TevDesc*, HSD_TExp*, HSD_TExp*);\ns32 lb_8000CC5C(s32 i0, HSD_MObj*, HSD_TExp*);\ns32 lb_8000CC8C(s32 i);\ns32 lb_8000CCA4(s32 i);\nstatic s32 lbGetFreeAlphaRegImpl(s32 i0, HSD_TevDesc* cur, HSD_TExp*,\n                                 HSD_TExp*);\ns32 lb_8000CD60(s32 i0, HSD_MObj*, HSD_TExp*);\ns32 lb_8000CD90(s32 i);\ns32 lb_8000CDA8(s32 i);\nHSD_LObj* lb_8000CDC0(HSD_LObj*);\nvoid lb_8000CE30(HSD_DObj*, HSD_DObj*);\nvoid lb_8000CE40(HSD_JObj*, HSD_DObj*);\n#define GALE01_00CE50\n/* 00D148 */ int lb_8000D148(float, float, float, float, float, float, float);\n/* 00D008 */ float lb_8000D008(float, float);\n#define GALE01_00F9F8\nunk_t lb_80014638(void);\nvoid lb_8001044C(void*, void*, s32, f32, s32, s32, s32, s32);\nvoid lb_800119DC(Vec3*, s32, f32, f32, f32);\nvoid lb_80011A50(Vec3*, s32, f32, f32, f32, f32, f32, f32, f32);\nvoid lb_80014574(u8, s32, s32, s32);\nvoid lb_800145C0(u8);\nvoid lb_800122C8(HSD_ImageDesc*, int, int, int);\nvoid lb_80011C18(void);\nvoid lb_8000F9F8(void);\nHSD_CObj* lb_80013B14(HSD_CObjDesc*);\nvoid lb_80011AC4(void);\nvoid lb_8000FD48(HSD_JObj*, unk_t, size_t);\nvoid lb_80011710(unk_t, unk_t);\nvoid lb_8000FD18(unk_t);\nvoid lb_800115F4(void);\nvoid lb_800121FC(HSD_ImageDesc*, int, int, int, int);\n/* 011ABC */ /* static */ M2C_UNK lb_80011ABC();\n#define MELEE_LB_LBUNKNOWN_004_H\nvoid lb_800195D0(void);\n#define MELEE_LB_LBUNKNOWN_005_H\nvoid lb_80019AAC(Event);\nvoid lb_8001C5BC(void);\nvoid lb_8001D21C(void);\n#define melee_lb_lbanim_h\n#define _lbarchive_h_\nvoid lbArchive_InitializeDAT(HSD_Archive* archive, u8* data, u32 length);\nvoid lbArchive_80016EFC(void);\nvoid lbArchive_80016BE0(void);\nvoid lbArchive_80016C64(char*, void*, char*, int, ...);\nvoid* lbArchive_80016DBC(void*, ...);\ns32 lbArchive_800171CC(void*, ...);\nvoid lbArchive_80016AF0(void);\n#define MELEE_LB_LBARQ_H\nvoid lbArq_80014D2C(void);\n#define MELEE_LB_LBAUDIO_AX_H\n/// @todo Create an @c enum for SFX IDs.\n#define SFX_NONE -1\nvoid lbAudioAx_800236B8(s32);\nu32 lbAudioAx_800237A8(enum_t sfx_id, u8 sfx_vol, u8 sfx_pan);\nvoid lbAudioAx_80023F28(s32);\nvoid lbAudioAx_8002438C(s32);\nvoid lbAudioAx_80024B1C(s32, s32);\nvoid lbAudioAx_80024B58(s32, s32);\ns32 lbAudioAx_80023220(s32);\ns32 lbAudioAx_800230C8(s32, int*, int*);\ns32 lbAudioAx_80023130(void);\ns32 lbAudioAx_800233EC(s32);\nvoid lbAudioAx_80024DC4(void);\nvoid lbAudioAx_80024FDC(void);\nvoid lbAudioAx_80024FF4(void);\nvoid lbAudioAx_8002500C(s32);\nvoid lbAudioAx_80025038(s32);\nvoid lbAudioAx_8002838C(void);\nbool lbAudioAx_80023710(s32);\nvoid lbAudioAx_80023870(unk_t, s32, s32, s32);\ns32 lbAudioAx_8002305C(s32, s32);\nvoid lbAudioAx_80026510(HSD_GObj*);\nenum_t lbAudioAx_800265C4(HSD_GObj*, enum_t sfx);\nint lbAudioAx_80024184(int, int, int, int);\nvoid lbAudioAx_80024B94(int, int);\n/* 0264E4 */ bool lbAudioAx_800264E4(void);\n/* 0263E8 */ void lbAudioAx_800263E8(HSD_GObj*, int, int, int, float);\n#define MELEE_LB_LBBGFLASH_H\nvoid lbBgFlash_80021C48(u32, u32);\n#define _lbcommands_h_\ntypedef struct _Command_04_Struct {\n    u32* ptr[1];\n} Command_04_Struct;\ntypedef struct _Command_09_Struct {\n    u32 id : 6;\n    u32 param_1 : 8;\n    u32 param_2 : 18;\n} Command_09_Struct;\n/// @todo Unify with #ftCmdScript\ntypedef struct _CommandInfo {\n    f32 timer; // 0x00\n    f32 frame_count; // 0x04\n    union {\n        u32* data_position; // 0x08\n        struct _Command_04_Struct Command_04;\n        struct _Command_09_Struct* Command_09;\n    } u;\n    u32 loop_count; // 0x0C\n    u32* event_return[4]; // 0x10 - Array Size is purely made-up for now\n    u32 loop_count_dup; // 0x14\n    u32 unk_x18; // 0x18\n} CommandInfo;\nvoid Command_00(CommandInfo* info);\nvoid Command_01(CommandInfo* info);\nvoid Command_02(CommandInfo* info);\nvoid Command_03(CommandInfo* info);\nvoid Command_04(CommandInfo* info);\nvoid Command_05(CommandInfo* info);\nvoid Command_14(CommandInfo* info);\nvoid Command_06(CommandInfo* info);\nvoid Command_07(CommandInfo* info);\nvoid Command_08(CommandInfo* info);\nvoid Command_09(CommandInfo* info);\nbool Command_Execute(CommandInfo* info, u32 command);\n#define MELEE_LB_LBDVD_H\nvoid lbDvd_80018F68(void);\nvoid lbDvd_800178E8(s32, char*, s32, s32, s32, s32, s32, s32, s32);\nHSD_Archive* lbDvd_8001819C(const char*);\nvoid lbDvd_80017740(int, int, int, int, u32, char, short, char, int);\n#define _lbfile_h_\nvoid lbFile_8001615C(int, int, int, bool cancelflag);\nbool lbFile_800161A0(void);\nsize_t lbFile_8001634C(s32 fileno);\ns32 lbFile_800163D8(const char* basename);\nvoid lbFile_8001668C(const char* arg0, HSD_Archive* arg1, s32* arg2);\nvoid lbFile_80016760(const char* arg0, HSD_Archive** arg1, s32* arg2);\nbool lbFile_800168A0(s32 arg0, const char* arg1, HSD_Archive** arg2,\n                     s32* arg3);\nchar* lbFile_80016204(const char* basename);\nvoid lbFile_800164A4(s32 arg0, HSD_Archive* arg1, s32* arg2, s32 arg3,\n                     HSD_DevComCallback arg4, s32 arg5);\nvoid lbFile_80016580(const char* basename, HSD_Archive* arg1, s32* arg2,\n                     HSD_DevComCallback arg3, s32 arg4);\nvoid lbFile_800161C4(int arg0, int arg1, HSD_Archive* arg2, int arg3, int arg4,\n                     int arg5);\n#define MELEE_LB_LBHEAP_H\nHSD_Archive* lbHeap_80015BD0(s32, s32);\nvoid lbHeap_80015F3C(void);\n#define _lblanguage_h_\nenum_t lbLang_GetLanguageSetting(void);\nenum_t lbLang_SetLanguageSetting(enum_t language);\nenum_t lbLang_IsSettingJP(void);\nenum_t lbLang_IsSettingUS(void);\nenum_t lbLang_GetSavedLanguage(void);\nvoid lbLang_SetSavedLanguage(enum_t language);\nenum_t lbLang_IsSavedLanguageJP(void);\nenum_t lbLang_IsSavedLanguageUS(void);\n#define MELEE_LB_LBMEMORY_H\nvoid lbMemory_8001564C(void);\nvoid lbMemory_800154BC(void*, void*);\n#define MELEE_LB_LBMTHP_H\nf32 lbMthp_8001E8F8(u32);\nvoid lbMthp_8001F87C(void);\n#define MELEE_LB_LBSHADOW_H\nvoid lbShadow_8000E9F0(Vec3*, s32, f32);\nvoid lbShadow_8000ED54(s32*, HSD_JObj*);\nvoid lbShadow_8000EE8C(s32*);\n#define MELEE_LB_LBSNAP_H\nvoid lbSnap_8001E290(void);\n#define MELEE_LB_LBTIME_H\nextern s64 __div2i(s64, s64);\nu32 lbTime_8000AEC8(u32 a, u32 b);\nu32 lbTime_8000AEE4(u32 a, int b);\nu32 lbTime_8000AF24(u32 a, int b, int c);\nu32 lbTime_8000AF74(u32 a, int b);\nu32 lbTime_8000AFBC(void);\nvoid lbTime_8000B028(OSCalendarTime* td, unsigned int ticks);\n#define MELEE_TEXT_3_H\nvoid mn_8022F3D8(void);\n#define _mncharsel_h_\ntypedef enum _Mode {\n    Mode_Time,\n    Mode_Stock,\n    Mode_Coin,\n    Mode_Bonus\n} Mode;\ntypedef enum _StageSelectMode {\n    StageSelectMode_On,\n    StageSelectMode_Random,\n    StageSelectMode_Ordered,\n    StageSelectMode_Turns,\n    StageSelectMode_Loser\n} StageSelectMode;\ntypedef struct _PlayerInitData {\n    /*0x00*/ u8 character_kind;\n    /*0x01*/ u8 slot_type;\n    /*0x02*/ u8 stocks;\n    /*0x03*/ u8 color;\n    /*0x04*/ u8 port;\n    /*0x05*/ s8 spawnpos32;\n    /*0x06*/ u8 spawn_direction;\n    /*0x07*/ u8 subcolor;\n    /*0x08*/ u8 handicap;\n    /*0x09*/ u8 team;\n    /*0x0A*/ u8 nametag;\n    /*0x0B*/ u8 unk_0xb;\n    /*0x0C*/ u8 unk_0xc;\n    /*0x0D*/ u8 unk_0xd;\n    /*0x0E*/ u8 unk_0xe;\n    /*0x0F*/ u8 cpu_level;\n    /*0x10*/ u8 unk_0x10;\n    /*0x11*/ u8 unk_0x11;\n    /*0x12*/ u16 unk_0x12;\n    /*0x14*/ u8 unk_0x14;\n    /*0x15*/ u8 unk_0x15;\n    /*0x16*/ u8 unk_0x16;\n    /*0x17*/ u8 unk_0x17;\n    /*0x18*/ f32 offense_ratio;\n    /*0x1C*/ f32 defense_ratio;\n    /*0x20*/ u8 unk_0x20;\n    /*0x21*/ u8 unk_0x21;\n    /*0x22*/ u8 unk_0x22;\n    /*0x23*/ u8 unk_0x23;\n} PlayerInitData;\ntypedef struct _StartMeleeRules {\n    u8 flags1;\n    u8 flags2;\n    u8 flags3;\n    u8 flags4;\n    u8 flags5;\n    u8 flags6;\n    u8 unk_0x6;\n    u8 unk_0x7;\n    u8 is_teams;\n    u8 unk_0x9;\n    u8 unk_0xa;\n    s8 item_frequency;\n    s8 sd_penalty;\n    u8 unk_0xd;\n    u32 stage_id;\n    s32 time_limit;\n    u8 unk_0x14;\n    u8 unk_0x15;\n    u8 unk_0x16;\n    u8 unk_0x17;\n    u8 unk_0x18;\n    u8 unk_0x19;\n    u8 unk_0x1a;\n    u8 unk_0x1b;\n    u8 unk_0x1c;\n    u8 unk_0x1d;\n    u8 unk_0x1e;\n    u8 unk_0x1f;\n    u64 item_mask;\n    u8 unk_0x28;\n    u8 unk_0x29;\n    u8 unk_0x2a;\n    u8 unk_0x2b;\n    u8 unk_0x2c;\n    u8 unk_0x2d;\n    u8 unk_0x2e;\n    u8 unk_0x2f;\n    f32 damage_ratio;\n    f32 game_speed;\n    u8 unk_0x38;\n    u8 unk_0x39;\n    u8 unk_0x3a;\n    u8 unk_0x3b;\n    u8 unk_0x3c;\n    u8 unk_0x3d;\n    u8 unk_0x3e;\n    u8 unk_0x3f;\n    void* pause_check_callback;\n    u8 unk_0x44;\n    u8 unk_0x45;\n    u8 unk_0x46;\n    u8 unk_0x47;\n    u8 unk_0x48;\n    u8 unk_0x49;\n    u8 unk_0x4a;\n    u8 unk_0x4b;\n    u8 unk_0x4c;\n    u8 unk_0x4d;\n    u8 unk_0x4e;\n    u8 unk_0x4f;\n    void* match_end_callback;\n    s32 unk_0x54;\n    u8 unk_0x58;\n    u8 unk_0x59;\n    u8 unk_0x5a;\n    u8 unk_0x5b;\n    u8 unk_0x5c;\n    u8 unk_0x5d;\n    u8 unk_0x5e;\n    u8 unk_0x5f;\n} StartMeleeRules;\ntypedef struct _StartMeleeData {\n    StartMeleeRules rules;\n    PlayerInitData players[6];\n} StartMeleeData;\ntypedef struct _VsModeData {\n    s8 loser;\n    u32 ordered_stage_index;\n    s8 winner;\n    u8 unk_0x3;\n    u8 unk_0x4;\n    u8 unk_0x5;\n    u8 unk_0x6;\n    u8 unk_0x7;\n    StartMeleeData data;\n} VsModeData;\ntypedef struct _CSSData {\n    u8 unk_0x0;\n    u8 unk_0x1;\n    u8 match_type;\n    u8 pending_scene_change;\n    u8* ko_star_counts;\n    VsModeData data;\n} CSSData;\nTextKerning* mnCharSel_8025BC20(TextKerning* arg0, u32 arg1);\nvoid mnCharSel_8025BD30(void);\n#define _mntext_h_\n#define MELEE_MP_MPCOLL_H\nvoid mpColl_80042374(CollData*, f32, f32, f32);\nvoid mpColl_80042078(CollData* cd, HSD_GObj* gobj, HSD_JObj*, HSD_JObj*,\n                     HSD_JObj*, HSD_JObj*, HSD_JObj*, HSD_JObj*, HSD_JObj*,\n                     f32);\n/// \"Coll_InitECB\"\nvoid mpColl_80041EE4(CollData*);\nvoid mpColl_800471F8(CollData*);\nvoid mpColl_800473CC(CollData*);\nvoid mpColl_800477E0(CollData*);\nvoid mpColl_80048464(CollData*);\nvoid mpColl_80048160(CollData*);\nvoid mpColl_80048274(CollData*);\nvoid mpColl_80048578(CollData*);\nvoid mpColl_80048768(CollData*);\nvoid mpColl_80048388(CollData*);\nvoid mpColl_800436D8(CollData*, int facing_dir);\nvoid mpColl_800475F4(CollData*);\nvoid mpColl_8004730C(CollData*, f32 (*x)[6]);\nvoid mpColl_80047A08(CollData*);\nvoid mpColl_8004B108(CollData*);\nvoid mpColl_8004B21C(CollData*);\nvoid mpColl_8004B2DC(CollData*);\nvoid mpColl_8004B3F0(CollData*);\nvoid mpColl_80047E14(CollData*);\nvoid mpColl_80047AC8(CollData*);\nvoid mpColl_80047F40(CollData*);\nvoid mpColl_80047BF4(CollData*);\nvoid mpColl_8004806C(CollData*);\nvoid mpColl_80047D20(CollData*);\nvoid mpColl_80048654(CollData*);\nvoid mpColl_800474E0(CollData*);\nvoid mpColl_800476B4(CollData*);\nvoid mpColl_800478F4(CollData*);\nvoid mpColl_8004B5C4(CollData*);\nvoid mpColl_8004CC00(CollData*);\nvoid mpColl_8004CA6C(CollData*);\nvoid mpColl_8004CBF4(struct _CollData*);\nvoid mpColl_80041C78(void);\nvoid mpColl_80042384(CollData* cd);\nvoid mpColl_800424DC(CollData* cd, u32 flags);\nvoid mpColl_80041C8C(CollData* cd);\nvoid mpColl_8004293C(CollData* cd);\nvoid mpColl_80042C58(CollData* arg0, ftECB* arg1);\nvoid mpColl_80042D24(CollData* cd);\nvoid mpColl_80042DB0(CollData* ecb, f32 time);\nvoid mpColl_80043268(CollData* arg0, s32 arg1, s32 arg2, f32 arg8);\nvoid func_80043324_inline2(CollData* arg0, s32 arg1, s32 arg2, f32 arg8);\nvoid func_80043324_inline(CollData* arg0, s32 arg1, s32 arg2, f32 arg8);\nvoid mpColl_80043324(CollData* arg0, s32 arg1, s32 arg2);\nvoid mpColl_80043558(CollData* arg0, s32 arg1);\nvoid mpColl_80043670(CollData* arg0);\nvoid mpColl_80041DD0(CollData* cd, u32 flags);\nvoid mpColl_80043680(CollData* arg0, Vec3* arg1);\nvoid mpColl_800436E4(CollData* arg0, f32 arg1);\ns32 mpColl_80043754(s32 (*arg0)(void*, u32), CollData* arg1, u32 arg2);\nvoid mpColl_800439FC(CollData* arg0);\nvoid mpColl_80043ADC(CollData* arg0);\nbool mpColl_80043BBC(CollData* arg0, s32* arg1);\nvoid mpColl_80043C6C(CollData* arg0, s32 arg1, s32 arg2);\nvoid mpColl_8004220C(CollData* cd, HSD_GObj* gobj, f32 arg1, f32 arg2,\n                     f32 arg3, f32 arg4);\n/* 04CBC0 */ bool mpColl_8004CBC0(CollData*);\n/* 04CBE8 */ void mpColl_8004CBE8(CollData*);\n#define GALE01_05A6F8\n/* 05AC14 */ /* static */ M2C_UNK mpIsland_8005AC14();\n/* 05AB54 */ /* static */ M2C_UNK mpIsland_8005AB54();\n/* 05AC8C */ /* static */ M2C_UNK mpIsland_8005AC8C();\n/* 05ACE8 */ /* static */ M2C_UNK mpIsland_8005ACE8();\nextern M2C_UNK mpIsland_80458E88;\n#define GALE01_04D164\ntypedef void (*mpLib_Callback)(s32, s32, CollData*, s32, s32, f32);\nbool mpLib_80054ED8(s32);\nunk_t mpLib_80056B34(void);\nunk_t mpLib_80056AC4(void);\nunk_t mpLib_80056A54(void);\nunk_t mpLib_80056AFC(void);\nbool mpLib_800501CC(f32 surface_normal_y, f32 surface_normal_x, f32 right_x,\n                    f32 right_y, Vec3* coll_vec, unk_t, unk_t, unk_t, u32,\n                    u32);\nunk_t mpLib_80056A8C(void);\nunk_t mpLib_80056A1C(void);\nbool mpLib_800509B8(f32 surface_normal_y, f32 surface_normal_x, f32 left_x,\n                    f32 left_y, Vec3* coll_vec, unk_t, unk_t, unk_t, u32, u32);\nu32 mpLib_80054CEC(enum_t);\ns32 mpLib_80051EC8(Vec3*, s32, s32, s32, s32, s32, s32, f32, f32, f32, f32);\nvoid mpLib_80053DA4(int ledge_id, Vec3*);\nvoid mpLib_80053ECC(int ledge_id, Vec3*);\nvoid mpLib_80053FF4(s32, Vec3*);\nvoid mpLib_80054158(s32, Vec3*);\n/// @todo Params not confirmed.\nbool mpLib_800567C0(s32 wall_id, Vec3* ecb_side_vtx, Vec3* result);\nbool mpLib_80056C54(s32 idx, Vec3* pos, bool, Vec3*, bool, bool, f32, f32, f32,\n                    f32);\nvoid mpLib_8005811C(CollData*, s32 ledge_id);\n/// @returns A ground index.\ns32 mpLib_8004DB78(s32 gr_idx);\n/// @returns A ground index.\ns32 mpLib_8004DC04(s32 gr_idx);\nvoid mpLib_8004D288(unk_t);\nvoid mpLib_80058820(void);\nvoid mpLib_800552B0(s16 x, HSD_JObj*, s16 z);\nvoid mpLib_80055E9C(s16 x);\nvoid mpLib_8004D17C(void);\nvoid mpLib_80057424(s16);\nvoid mpLib_80057638(s16);\nvoid mpLib_80057BC0(s16);\nbool mpLib_80054F68(s32, s32);\ns32 mpLib_80052700(int idx);\ns32 mpLib_8004F008(void);\ns32 mpLib_80054584(void);\ns32 mpLib_8004DD90(void);\ns32 mpLib_8004E398(void);\nvoid mpLib_800588D0(f32 left, f32 bottom, f32 right, f32 top);\nenum_t mpLib_80056B6C(enum_t);\nvoid mpLib_800580FC(int, mpLib_Callback*, unk_t);\nvoid mpLib_800581BC(int, mpLib_Callback*, unk_t);\nenum_t mpLib_80054C6C(int);\nvoid mpLib_80058AA0(void);\nenum_t mpLib_8004E090(int idx, Vec3*, f32*, u32*, Vec3* normal);\nvoid mpLib_800569EC(void);\n/* 04F8A4 */ M2C_UNK mpLib_8004F8A4();\n/* 052508 */ M2C_UNK mpLib_80052508();\n#define GALE01_03715C\nvoid pl_80037C60(HSD_GObj*, s32);\nvoid pl_8003E058(s32, s32, s32, s32);\nvoid pl_8003EC9C(s32, s32, f32, f32);\nvoid pl_8003FAA8(s32 slot, s32 index, Vec3* pos, Vec3* prevPos);\nvoid pl_8003FE1C(u8 slot, bool);\nvoid pl_8003FFDC(u8, s32, u8, s32, s32);\nvoid pl_80040048(u8, s32);\nvoid pl_80040330(u8 slot, bool, f32);\nvoid pl_80040B8C(u8 slot, bool, s32);\nvoid pl_800411C4(u8 slot, bool);\nvoid pl_80041280(u8 slot, bool);\nu32 pl_800386D8(void*, s32);\nvoid pl_80040120(u8, s32);\nvoid pl_8003FC44(u8 slot, bool);\nvoid pl_800402D0(u8 slot, bool, s32);\nvoid pl_8003EA08(u8 slot, bool);\nvoid pl_80040460(u8 slot, bool);\nvoid pl_8003E4A4(u8 slot, bool, s32, s32);\nvoid pl_8003891C(int slot);\nvoid pl_80038F10(int slot);\nvoid pl_8003715C(void);\nvoid pl_80037590(void);\nvoid pl_8003E150(void);\n/* 03E17C */ void pl_8003E17C(u8, int, HSD_GObj*);\n/* 03E854 */ void pl_8003E854(u8, int, HSD_GObj*);\nvoid pl_80038144(void);\nvoid pl_8003D60C(void);\nvoid pl_80041B08(void);\nvoid pl_8003EB30(void);\nvoid pl_8003722C(void);\nvoid pl_800373CC(void);\nvoid pl_80037ECC(void);\n/* 040270 */ void pl_80040270(u8, u8, float);\nvoid pl_800401F0(u8, int, float, float);\n/* 03E0E8 */ void pl_8003E0E8(u8, int);\n/* 03E114 */ void pl_8003E114(u8, int, float);\n/* 03E978 */ void pl_8003E978(u8 slot, bool fp_x221F_b4, Item_GObj* item_gobj,\n                              float y0, float, float, float, float x1,\n                              float y1, float frame_spd_mul);\n#define MELEE_TEXT_4_H\nbool un_80322258(f32 x);\nbool un_803224DC(s32 spawn_id, f32 pos_x, f32 kb_mag);\nvoid un_80322314(void);\nvoid un_802FF364(void);\nvoid un_8031C454(void);\nvoid un_8031C2CC(void);\nvoid un_8031C2EC(void);\nvoid un_803124BC(void);\nvoid un_8031234C(s32);\nvoid un_80305918(s32, s32, s32);\nvoid un_80304A58(s32);\nbool un_803048C0(s32);\n/* 32233C */ void un_8032233C(int, int);\n/* 3222EC */ float un_803222EC(float mag, float angle);\n/* 322598 */ void un_80322598(int, float);\n#define __MEM_FUNCS_H__\nvoid __copy_longs_aligned(void* dst, const void* src, size_t len);\nvoid __copy_longs_rev_aligned(void* dst, const void* src, size_t len);\nvoid __copy_longs_unaligned(void* dst, const void* src, size_t len);\nvoid __copy_longs_rev_unaligned(void* dst, const void* src, size_t len);\n#define SYSDOLPHIN_BASELIB___BASELIB_H\ntypedef struct {\n    u8 x0[0x828];\n} __baselib_UnkType001;\ntypedef struct {\n    u8 x0[0x80 * 0x24];\n} __baselib_UnkType002;\ntypedef struct {\n    u8 x0[0x300];\n} __baselib_UnkType003;\n#pragma region baselib_shared_data_001\n/* 004CDD18 */ extern u8 hsd_804D1138[0x10];\n/* 004CDD28 */ extern u32 hsd_804D1148[0x80][0x9];\n/* 004CEF28 */ extern __baselib_UnkType003 hsd_804D2348;\n/* 004CF228 */ extern __baselib_UnkType001 hsd_804D2648;\n/* 004CFA50 */ extern u8 hsd_804D2E70[2084];\n#pragma endregion\n#pragma region baselib_shared_data_002\n/* 004D4588 */ extern unk_t hsd_804D79A8;\n/* 004D4584 */ extern unk_t hsd_804D79A4;\n/* 004D4580 */ extern unk_t hsd_804D79A0;\n#pragma endregion\n#pragma region baselib_unknown_002\nextern u8 hsd_804D0B50[0x104];\nextern u8 hsd_804D0C54[0x104];\n#pragma endregion\n#pragma region psdisptev\nvoid psSetupTevCommon(void);\nvoid psSetupTevInvalidState(void);\nvoid psSetupTev(unk_t);\n#pragma endregion\n#define _AXDRIVER_H_\n#define SMSTATE_MASK 0xC0000000\n#define SMSTATE_ACTIVE 0x40000000\n#define SMSTATE_SLEEP 0x80000000\nstruct HSD_SM {\n    HSD_SM* prev;\n    HSD_SM* next;\n    u32 flags;\n    int vid;\n    int pid;\n    int fid;\n    u8 track;\n    u8 pri;\n    u8 pri0[2];\n    u8 volumeType[2];\n    s16 volume[2];\n    u16 fadetime;\n    u8 pan[2];\n    s16 round;\n    u8 dp12flag;\n    u8 itdflag;\n    u8 span[2];\n    u8 maxfid;\n    s16 pitch[2];\n    u8 mix[2];\n    u8 mixscale[2];\n    u8 filter;\n    u8 group;\n    u16 loopcount;\n    u32* curScore;\n    long clock;\n};\nu8* AXDriverAlloc(s32 size);\nvoid AXDriverFree(void* ptr);\nvoid AXDriverUnlink(HSD_SM* v, HSD_SM** head);\nvoid AXDriverKeyOff(HSD_SM* v);\nvoid HSD_AudioSFXKeyOffAll(void);\nvoid HSD_AudioSFXKeyOffTrack(int track);\n#define SYSDOLPHIN_BASELIB_BASELIB_SHARED_DATA_003_H\nextern u32 hsd_804D78D0;\nextern u32 hsd_804D78D4;\nextern u16 hsd_804D78D8;\nextern u16 hsd_804D78DE;\nextern u16 hsd_804D78E0;\nextern u32 hsd_804D78E8;\nextern u32 hsd_804D78F0;\n#define SYSDOLPHIN_BASELIB_BASELIB_UNKNOWN_002_H\nbool hsd_803931A4(s32);\nvoid hsd_80393A54(bool);\n/// Checks whether USB server is set up.\nbool hsd_80393A04(void);\nvoid hsd_80392E80(void);\nvoid hsd_8039D4DC(UnkGeneratorStruct*);\nvoid hsd_8039EFAC(s32, s32, s32, HSD_JObj*);\nvoid hsd_8039F6CC(s32, s32, s32, HSD_JObj*);\nvoid hsd_8039D5DC(s32);\n#define SYSDOLPHIN_BASELIB_DEVCOM_H\ns32 HSD_DevComIsBusy(s32 idx);\nvoid HSD_DevComRequest(int, int, HSD_Archive*, int, int, int,\n                       HSD_DevComCallback, int);\n#define INCLUDE_SYSDOLPHIN_BASELIB_DISPLAYFUNC_H\nvoid _HSD_DispForgetMemory(any_t low, any_t high);\nvoid HSD_ZListInitAllocData(void);\nvoid HSD_EraseRect(f32 top_res, f32 bottom_res, f32 left_res, f32 right_res,\n                   f32 neg_z_val, bool enable_color, bool enable_alpha,\n                   bool enable_depth);\nMtxPtr _HSD_mkEnvelopeModelNodeMtx(HSD_JObj* m, MtxPtr mtx);\nvoid HSD_JObjDisp(HSD_JObj* jobj, MtxPtr, u32 flags, u32 rendermode);\nvoid HSD_StateInitDirect(int vtxfmt, u32 param_2);\nvoid _HSD_ZListSort(void);\nvoid _HSD_ZListDisp(void);\nvoid _HSD_ZListClear(void);\nvoid HSD_SetEraseColor(int, int, int, int);\n#define SYSDOLPHIN_BASELIB_FOG_H\nstruct HSD_FogAdj {\n    /* 0x00 */ HSD_Obj parent;\n    /* 0x08 */ s16 center;\n    /* 0x0A */ u16 width;\n    /* 0x0C */ Mtx44 mtx;\n    /* 0x3C */ HSD_AObj* aobj;\n};\nstruct HSD_Fog {\n    /* 0x00 */ HSD_Obj parent;\n    /* 0x08 */ u32 type;\n    /* 0x0C */ HSD_FogAdj* fog_adj;\n    /* 0x10 */ f32 start;\n    /* 0x14 */ f32 end;\n    /* 0x18 */ GXColor color;\n    /* 0x1C */ HSD_AObj* aobj;\n};\nstruct HSD_FogAdjDesc {\n    /* 0x00 */ u16 center;\n    /* 0x02 */ u16 width;\n    /* 0x04 */ Mtx44 mtx;\n};\nstruct HSD_FogInfo {\n    HSD_ObjInfo parent;\n};\nstruct HSD_FogAdjInfo {\n    HSD_ObjInfo parent;\n};\nstruct HSD_FogDesc {\n    /* 0x00 */ u32 type;\n    /* 0x04 */ HSD_FogAdjDesc* fogadjdesc;\n    /* 0x08 */ f32 start;\n    /* 0x0C */ f32 end;\n    /* 0x10 */ GXColor color;\n};\nvoid HSD_FogSet(HSD_Fog*);\nHSD_FogAdj* HSD_FogAdjLoadDesc(HSD_FogAdjDesc*);\nvoid HSD_FogInit(HSD_Fog*, HSD_FogDesc*);\nvoid HSD_FogAdjInit(HSD_FogAdj*, HSD_FogAdjDesc*);\nvoid HSD_FogReqAnimByFlags(HSD_Fog*, u32 flags, f32 frame);\nvoid FogUpdateFunc(void* obj, enum_t type, HSD_ObjData* fval);\nHSD_Fog* HSD_FogLoadDesc(HSD_FogDesc* desc);\nHSD_Fog* HSD_FogAlloc(void);\nHSD_FogAdj* HSD_FogAdjAlloc(void);\nvoid HSD_Fog_8037DE7C(HSD_Fog* fog, HSD_AObjDesc* desc);\nvoid HSD_FogReqAnim(HSD_Fog* fog, f32 frame);\nvoid HSD_FogInterpretAnim(HSD_Fog* fog);\n#define SYSDOLPHIN_BASELIB_GOBJOBJECT_H\nunk_t HSD_GObjObjet_80390ADC(HSD_GObj* gobj);\nvoid HSD_GObjObjet_80390A70(HSD_GObj* gobj, u8 kind, any_t obj);\nvoid HSD_GObjObjet_80390B0C(HSD_GObj* gobj);\nHSD_GObj* HSD_GObjObjet_80390A3C(u16 id, u8 arg1);\n#define SYSDOLPHIN_BASELIB_GOBJPLINK_H\nvoid HSD_GObjPLink_80390228(HSD_GObj*);\nvoid HSD_GObjPLink_8039032C(u32 arg0, HSD_GObj* gobj, u8 p_link, u8 priority,\n                            HSD_GObj* position);\nvoid GObj_PReorder(HSD_GObj* gobj, HSD_GObj* hiprio_gobj);\nHSD_GObj* CreateGObj(s32 where, u16 classifier, u8 p_link, u8 priority,\n                     HSD_GObj* position);\n#define _hash_h_\n#define hash(s) (s % 0x65)\nHSD_ClassInfo* HSD_HashSearch(u32, const char* class_name, int);\n#define SYSDOLPHIN_BASELIB_BASELIB_UNKNOWN_008_H\nvoid hsd_803B3344(u8 byte);\nvoid hsd_803B3398(void* src, size_t size);\n#define SYSDOLPHIN_BASELIB_BASELIB_UNKNOWN_001_H\n#define _initialize_h_\n#define _video_h_\n#define HSD_VI_XFB_MAX 3\n#define VI_DISPLAY_PIX_SZ 2\ntypedef enum _HSD_RenderPass {\n    HSD_RP_SCREEN,\n    HSD_RP_TOPHALF,\n    HSD_RP_BOTTOMHALF,\n    HSD_RP_OFFSCREEN,\n    HSD_RP_NUM\n} HSD_RenderPass;\ntypedef struct _HSD_VIStatus {\n    GXRenderModeObj rmode;\n    u32 black;\n    u8 vf;\n    u32 gamma;\n    GXColor clear_clr;\n    u32 clear_z;\n    u8 update_clr;\n    u8 update_alpha;\n    u8 update_z;\n} HSD_VIStatus;\nvoid HSD_VIInit(struct _HSD_VIStatus* vi_status, void* xfb0, void* xfb1,\n                void* xfb2);\nvoid HSD_Video_803762C4(void);\nvoid HSD_VISetUserPostRetraceCallback(Event);\nvoid HSD_VISetUserGXDrawDoneCallback(Event);\nvoid HSD_VISetBlack(s32);\n#define HSD_DEFAULT_FIFO_SIZE (256 * 1024)\n#define HSD_DEFAULT_XFB_MAX_NUM 2\n#define HSD_DEFAULT_AUDIO_SIZE (512 * 1024)\ntypedef struct _HSD_MemReport {\n    u32 total;\n    u32 system;\n    u32 xfb;\n    u32 gxfifo;\n    u32 heap;\n    u8 x14_pad[0x2C - 0x14];\n} HSD_MemReport;\ntypedef enum _HSD_InitParam {\n    HSD_INIT_FIFO_SIZE,\n    HSD_INIT_XFB_MAX_NUM,\n    HSD_INIT_HEAP_MAX_NUM,\n    HSD_INIT_AUDIO_HEAP_SIZE,\n    HSD_INIT_RENDER_MODE_OBJ\n} HSD_InitParam;\nvoid HSD_InitComponent(void);\nvoid HSD_GXSetFifoObj(GXFifoObj* fifo);\nstatic void HSD_DVDInit(void);\nvoid** HSD_AllocateXFB(s32 nbuffer, GXRenderModeObj* rm);\nGXFifoObj* HSD_AllocateFifo(u32 size);\nstatic void HSD_GXInit(void);\nstatic void HSD_OSInit(void);\nOSHeapHandle HSD_GetHeap(void);\nvoid HSD_SetHeap(OSHeapHandle handle);\nvoid HSD_GetNextArena(void** lo, void** hi);\nOSHeapHandle HSD_CreateMainHeap(void* lo, void* hi);\nHSD_RenderPass HSD_GetCurrentRenderPass(void);\nvoid HSD_StartRender(HSD_RenderPass pass);\nvoid HSD_Init_803755A8(void);\nstatic void HSD_ObjInit(void);\nvoid HSD_ObjDumpStat(void);\nbool HSD_SetInitParameter(HSD_InitParam param, ...);\n#define _leak_h_\n#define _mtx_h_\nvoid HSD_MtxInverse(Mtx src, Mtx dest);\nvoid HSD_MtxInverseConcat(Mtx inv, Mtx src, Mtx dest);\nvoid HSD_MtxInverseTranspose(Mtx src, Mtx dest);\nvoid HSD_MtxGetRotation(Mtx m, Vec3* vec);\nvoid HSD_MtxGetTranslate(Mtx mat, Vec3* vec);\nvoid HSD_MtxGetScale(Mtx arg0, Vec3* arg1);\nvoid HSD_MkRotationMtx(Mtx arg0, Vec3* arg1);\nvoid HSD_Mtx_8037A230(Mtx arg0, Quaternion* arg1);\nvoid HSD_MtxSRT(Mtx m, Vec3* vec1, Vec3* vec2, Vec3* vec3, Vec3* vec4);\nvoid HSD_MtxSRTQuat(Mtx arg0, Vec3* arg1, Quaternion* arg2, Vec3* arg3,\n                    Vec3* arg4);\nvoid HSD_MtxScaledAdd(Mtx arg0, Mtx arg1, Mtx arg2, f32 arg3);\nvoid* HSD_VecAlloc(void);\nvoid HSD_VecFree(void* arg0);\nvoid* HSD_MtxAlloc(void);\nvoid HSD_MtxFree(void* arg0);\nHSD_ObjAllocData* HSD_VecGetAllocData(void);\nvoid HSD_VecInitAllocData(void);\nHSD_ObjAllocData* HSD_MtxGetAllocData(void);\nvoid HSD_MtxInitAllocData(void);\nstatic inline f32 fabsf_bitwise(f32 v)\n{\n    *(u32*) &v &= ~0x80000000;\n    return v;\n}\n#define SYSDOLPHIN_BASELIB_PSAPPSRT_H\ntypedef struct _UnkGeneratorMember { // MexTK: GeneratorAppSRT\n    u32 x0_fill[2];\n    S32Vec3 x8;\n    u8 x14_fill[0x10];\n    f32 x24;\n    f32 x28;\n    f32 x2C;\n    u8 x30_fill[0x72];\n    s8 xA2;\n} UnkGeneratorMember;\n/// @remarks MexTK: Particle\nstruct UnkGeneratorStruct {\n    struct UnkGeneratorStruct* next;\n    u8 x4_fill[0xC];\n    HSD_JObj* x10_jobj;\n    u16 x14_fill;\n    u16 x16_flags;\n    u8 x18_fill[0x24 - 0x18];\n    f32 x24, x28, x2C;\n    u8 x30_fill[0x54 - 0x30];\n    UnkGeneratorMember* x54;\n};\n/* 003A0D18 */ bool psInitAppSRT(int, int);\n/* 003A0D58 */ s32 psAddGeneratorAppSRT(s32, u16);\n/* 003A0E3C */ void HSD_PSAppSrt_803A425C(unk_t, s32);\nu16 psRemoveGeneratorSRT(unk_t);\nu16 psRemoveParticleAppSRT(unk_t);\nUnkGeneratorMember* psAddGeneratorAppSRT_begin(UnkGeneratorStruct*, s32);\nu16 psAttachParticleAppSRT(unk_t, unk_t);\n#define SYSDOLPHIN_BASELIB_PSDISP_H\n#define SYSDOLPHIN_BASELIB_PSDISPTEV_H\n#define SYSDOLPHIN_BASELIB_PSSTRUCTS_H\nstruct _psAppSRT;\ntypedef struct _psAppSRT HSD_psAppSRT;\nstruct _particle;\ntypedef struct _particle HSD_Particle;\nstruct _generator;\ntypedef struct _generator HSD_Generator;\nenum HSD_ParticleKind {\n    Tornado = 1 << 2,\n    TexEdge = 1 << 3,\n    ComTLUT = 1 << 4,\n    MirrorS = 1 << 5,\n    MirrorT = 1 << 6,\n    PrimEnv = 1 << 7,\n    TexInterpNear = 1 << 9,\n    DispTexture = 1 << 10,\n    TexFlipS = 1 << 18,\n    TexFlipT = 1 << 19,\n    Trail = 1 << 20,\n    DirVec = 1 << 21,\n    DispFog = 1 << 24,\n    NoZComp = 1 << 28,\n    DispPoint = 1 << 30,\n    DispLighting = 1 << 31\n};\n/* size: 0x1C */\ntypedef struct _HSD_PSTexGroup {\n    u32 num; /* 0x0 */\n    u32 fmt; /* 0x4 */\n    u32 tlutfmt; /* 0x8 */\n    u32 width; /* 0xC */\n    u32 height; /* 0x10 */\n    u16 palnum; /* 0x14 */\n    u16 palflag; /* 0x16 */\n    u8* texTable[1]; /* 0x18 */\n} HSD_PSTexGroup;\n/* size: 0x8 */\ntypedef struct _HSD_PSFormGroup {\n    u32 num; /* 0x0 */\n    u8* formTable[1]; /* 0x4 */\n} HSD_PSFormGroup;\n/* size: 0x40 */\ntypedef struct _HSD_PSCmdList {\n    u16 type; /* 0x0 */\n    u16 texGroup; /* 0x2 */\n    u16 genLife; /* 0x4 */\n    u16 life; /* 0x6 */\n    u32 kind; /* 0x8 */\n    float grav; /* 0xC */\n    float fric; /* 0x10 */\n    float vx; /* 0x14 */\n    float vy; /* 0x18 */\n    float vz; /* 0x1C */\n    float radius; /* 0x20 */\n    float angle; /* 0x24 */\n    float random; /* 0x28 */\n    float size; /* 0x2C */\n    float param1; /* 0x30 */\n    float param2; /* 0x34 */\n    float param3; /* 0x38 */\n    u8 cmdList[1]; /* 0x3C */\n} HSD_PSCmdList;\nstruct _particle;\nstruct _psAppSRT {\n    struct _psAppSRT* next; /* 0x0 */\n    struct _generator* gp; /* 0x4 */\n    Vec3 tra; /* 0x8 */\n    Quaternion rot; /* 0x14 */\n    Vec3 sca; /* 0x24 */\n    u8 status; /* 0x30 */\n    u8 frameNum; /* 0x31 */\n    u16 usedCount; /* 0x32 */\n    Mtx mmtx; /* 0x34 */\n    float ssx; /* 0x64 */\n    float ssy; /* 0x68 */\n    void (*freefunc)(struct _psAppSRT* appSrt); /* 0x6C */\n    u16 idnum; /* 0x70 */\n    u8 billboard; /* 0x72 */\n    u8 dummy; /* 0x73 */\n};\n/* size: 0x9C */\nstruct _particle {\n    HSD_Particle* next; /* 0x0 */\n    u32 kind; /* 0x4 */\n    u8 bank; /* 0x8 */\n    u8 texGroup; /* 0x9 */\n    u8 poseNum; /* 0xA */\n    u8 palNum; /* 0xB */\n    u16 sizeCount; /* 0xC */\n    u16 primColCount; /* 0xE */\n    u16 envColCount; /* 0x10 */\n    GXColor primCol; /* 0x12 */\n    GXColor envCol; /* 0x16 */\n    u16 cmdWait; /* 0x1A */\n    u8 loopCount; /* 0x1C */\n    u8 linkNo; /* 0x1D */\n    u16 idnum; /* 0x1E */\n    u8* cmdList; /* 0x20 */\n    u16 cmdPtr; /* 0x24 */\n    u16 cmdMarkPtr; /* 0x26 */\n    u16 cmdLoopPtr; /* 0x28 */\n    u16 life; /* 0x2A */\n    float vx; /* 0x2C */\n    float vy; /* 0x30 */\n    float vz; /* 0x34 */\n    float grav; /* 0x38 */\n    float fric; /* 0x3C */\n    float x; /* 0x40 */\n    float y; /* 0x44 */\n    float z; /* 0x48 */\n    float size; /* 0x4C */\n    float rotate; /* 0x50 */\n    u16 aCmpCount; /* 0x54 */\n    u8 aCmpMode; /* 0x56 */\n    u8 aCmpParam1; /* 0x57 */\n    u8 aCmpParam2; /* 0x58 */\n    u8 pJObjOfs; /* 0x59 */\n    u16 matColCount; /* 0x5A */\n    u16 ambColCount; /* 0x5C */\n    u16 rotateCount; /* 0x5E */\n    float sizeTarget; /* 0x60 */\n    float rotateTarget; /* 0x64 */\n    float rotateAcc; /* 0x68 */\n    u16 primColRemain; /* 0x6C */\n    u16 envColRemain; /* 0x6E */\n    GXColor primColTarget; /* 0x70 */\n    GXColor envColTarget; /* 0x74 */\n    u16 matColRemain; /* 0x78 */\n    u16 ambColRemain; /* 0x7A */\n    u16 aCmpRemain; /* 0x7C */\n    u8 aCmpParam1Target; /* 0x7E */\n    u8 aCmpParam2Target; /* 0x7F */\n    u8 matRGB; /* 0x80 */\n    u8 matA; /* 0x81 */\n    u8 ambRGB; /* 0x82 */\n    u8 ambA; /* 0x83 */\n    u8 matRGBTarget; /* 0x84 */\n    u8 matATarget; /* 0x85 */\n    u8 ambRGBTarget; /* 0x86 */\n    u8 ambATarget; /* 0x87 */\n    float trail; /* 0x88 */\n    struct _generator* gen; /* 0x8C */\n    struct _psAppSRT* appsrt; /* 0x90 */\n    float* userdata; /* 0x94 */\n    int (*callback)(HSD_Particle* part); /* 0x98 */\n};\n/* size: 0xC */\ntypedef struct _PSUserFunc {\n    int (*hookCreate)(HSD_Particle* part); /* 0x0 */\n    int (*hookDelete)(HSD_Particle* part); /* 0x4 */\n    int (*setUserData)(HSD_Particle* part, u8 unknown1,\n                       float unknown2); /* 0x8 */\n} HSD_PSUserFunc;\ntypedef struct _auxDisc {\n    f32 minAngle;\n    f32 maxAngle;\n} auxDisc;\ntypedef struct _auxLine {\n    f32 x2;\n    f32 y2;\n    f32 z2;\n} auxLine;\ntypedef struct _auxTornado {\n    f32 vel;\n} auxTornado;\ntypedef struct _auxRect {\n    f32 x;\n    f32 y;\n    f32 z;\n    f32 xx;\n    f32 xy;\n    f32 xz;\n    f32 yx;\n    f32 yy;\n    f32 yz;\n    f32 zx;\n    f32 zy;\n    f32 zz;\n    u16 flag;\n} auxRect;\ntypedef struct _auxCone {\n    f32 minAngle;\n    f32 maxAngle;\n    f32 height;\n} auxCone;\ntypedef struct _auxSphere {\n    f32 speed;\n    f32 latMid;\n    f32 latRange;\n    f32 lonMid;\n    f32 lonRange;\n} auxSphere;\ntypedef struct _generator {\n    HSD_Generator* next;\n    u32 kind;\n    f32 random;\n    f32 count;\n    HSD_JObj* jobj;\n    u16 genLife;\n    u16 type;\n    u8 bank;\n    u8 linkNo;\n    u8 texGroup;\n    u8 dummy;\n    u16 idnum;\n    u16 life;\n    u8* cmdList;\n    f32 x;\n    f32 y;\n    f32 z;\n    f32 vx;\n    f32 vy;\n    f32 vz;\n    f32 grav;\n    f32 fric;\n    f32 size;\n    f32 radius;\n    f32 angle;\n    u32 numChild;\n    HSD_psAppSRT* appsrt;\n    HSD_PSUserFunc userfunc;\n    int (*callback)(HSD_Generator* part);\n    union {\n        auxDisc disc;\n        auxLine line;\n        auxTornado tornado;\n        auxRect rect;\n        auxCone cone;\n        auxSphere sphere;\n    } aux;\n} _generator;\nextern u32* ptclref[64];\nextern int psNumTexGroup[64];\nextern HSD_PSTexGroup** psTexGroupArray[64];\nextern HSD_PSFormGroup** psFormGroupArray[64];\nextern int psNumCmdList[64];\nextern HSD_PSCmdList** psCmdListArray[64];\nextern u16 numActiveParticles;\nextern u16 numPeakParticles;\nextern int (**psCallback)(HSD_Particle* part);\n#define PS_TEXDIRECTION\nextern int texc[4][4];\nextern int td;\nvoid psSetFog(struct HSD_Fog* fog);\nvoid psRemoveFog(void);\nstatic inline void setBlendMode(int blendmode);\nstatic inline void setupChanCtrl(struct _particle* pp);\nstatic inline void setupChanReg(struct _particle* pp);\nstatic inline void getClrTrail(struct _particle* pp, GXColor* col);\nstatic inline void setupTevReg(struct _particle* pp);\nstatic inline void psSetCurrentMtx(GXPosNrmMtx idx);\nstatic inline struct _particle* psDispSubPoint(struct _particle* pp);\nstatic inline struct _particle* psDispSubPointTrail(struct _particle* pp);\nstatic inline void psDispSubMakePolygon(struct _particle* pp, u8* texform,\n                                        float x, float y, float z, float ppvx,\n                                        float ppvy, float ppvz, float x0,\n                                        float y0, float z0, float x1, float y1,\n                                        float z1);\nstatic inline void psDispSub(struct _particle* pp, u8* texform);\n#define PS_APPSRT\nstatic inline void psDispSubAppSRT(struct _particle* pp, u8* texform);\nstatic inline void psDispSubAPPSRTPoint(struct _particle* pp);\nvoid psDispParticles(u32 target_link, u32 sw);\nvoid psInitDataBankLoad(int bank, int* cmdBank, int* texBank, u32* ref,\n                        int* formBank);\nvoid psInitDataBankLocate(HSD_Archive* cmdBank, HSD_Archive* texBank,\n                          int* formBank);\nvoid psInitDataBankRelocate(int* cmdBank, int* texBank, int* formBank,\n                            int* newCmdBank, int* newTexBank,\n                            int* newFormBank);\nvoid psInitDataBank(int bank, int* cmdBank, int* texBank, u32* ref,\n                    int* formBank);\nvoid psInitParticle(int num);\nvoid psRemoveParticle(void);\nHSD_Particle* psGenerateParticle0(HSD_Particle* p, int linkNo, int bank,\n                                  u32 kind, u16 texGroup, u8* list, int life,\n                                  float x, float y, float z, float vx,\n                                  float vy, float vz, float size, float grav,\n                                  float fric, int palflag,\n                                  struct _generator* gp, int flgInterpret);\nHSD_Particle* psGenerateParticleID0(HSD_Particle* p, int linkNo, int bank,\n                                    int id, int flgInterpret);\nHSD_Particle* psGenerateParticle(int linkNo, int bank, u32 kind, u16 texGroup,\n                                 u8* list, int life, float x, float y, float z,\n                                 float vx, float vy, float vz, float size,\n                                 float grav, float fric, int palflag,\n                                 struct _generator* gp);\nHSD_Particle* psGenerateParticleIDPV(int linkNo, int bank, int id, float px,\n                                     float py, float pz, float vx, float vy,\n                                     float vz);\nHSD_Particle* psGenerateParticleID(int linkNo, int bank, int id);\nHSD_Particle* psGenerateParticleIDN(int linkNo, int bank, int id);\nvoid psKillParticle(HSD_Particle* pp);\nvoid psKillAllParticle(void);\nvoid psSetPointJObj(int no, HSD_JObj* jobj);\nvoid psSetPointJObjNodup(HSD_JObj* jobj, int no);\nvoid psClearPointJObj(void);\nvoid psDeletePntJObjwithParticle(HSD_Particle* pp);\nvoid psKillFamily(u16 idnum, int linkNo);\nvoid psKillGeneratorChild(struct _generator* gp);\nvoid psAddOffsetAll(float xofs, float yofs, float zofs);\nvoid psPauseFamily(u16 idnum, int linkNo);\nvoid psRestartFamily(u16 idnum, int linkNo);\nvoid psSetCallback(int (**callback)(HSD_Particle* part));\nvoid psSetUserFunc(struct _generator* gp, HSD_PSUserFunc* userfunc);\nstatic inline void psRemoveBillboardCamera(void);\n#define INCLUDE_SYSDOLPHIN_BASELIB_QUATLIB_H\nvoid HSD_QuatLib_8037EE0C(Vec3*, Quaternion*);\nvoid HSD_QuatLib_8037EF28(Quaternion*, Quaternion*, Quaternion*, f32);\n#define _robj_h_\n#define TYPE_MASK 0x70000000\n#define REFTYPE_JOBJ 0x10000000\n#define REFTYPE_IKHINT 0x40000000\nstruct HSD_Rvalue {\n    struct _HSD_Rvalue* next;\n    u32 flags;\n    HSD_JObj* jobj;\n};\nstruct HSD_RvalueList {\n    u32 flags;\n    struct HSD_Joint* joint;\n    struct _HSD_RvalueList* next;\n};\nstruct HSD_IKHint {\n    f32 bone_length;\n    f32 rotate_x;\n};\nstruct HSD_IKHintDesc {\n    f32 bone_length;\n    f32 rotate_x;\n};\nstruct HSD_Exp {\n    union {\n        f32 (*func)(void);\n        u8* bytecode;\n    } expr;\n    struct _HSD_Rvalue* rvalue;\n    u32 nb_args;\n    u8 is_bytecode;\n};\nstruct HSD_ExpDesc {\n    f32 (*func)(void);\n    struct _HSD_RvalueList* rvalue;\n};\nstruct HSD_ByteCodeExpDesc {\n    u8* bytecode;\n    struct _HSD_RvalueList* rvalue;\n};\nstruct HSD_RObj {\n    HSD_RObj* next;\n    u32 flags;\n    union {\n        HSD_JObj* jobj;\n        HSD_Exp exp;\n        f32 limit;\n        HSD_IKHint ik_hint;\n    } u;\n    HSD_AObj* aobj;\n};\nstruct HSD_RObjDesc {\n    struct _HSD_RObjDesc* next;\n    u32 flags; // 0x04\n    union {\n        u32 i;\n        struct _HSD_ExpDesc* exp;\n        struct _HSD_ByteCodeExpDesc* bcexp;\n        struct _HSD_IKHintDesc* ik_hint;\n        struct HSD_Joint* joint;\n        f32 limit;\n    } u;\n};\nstruct HSD_RObjAnimJoint {\n    HSD_RObjAnimJoint* next;\n    HSD_AObjDesc* aobjdesc;\n};\nvoid _HSD_RObjForgetMemory(any_t low, any_t high);\nvoid HSD_RObjInitAllocData(void);\nHSD_ObjAllocData* HSD_RObjGetAllocData(void);\nHSD_ObjAllocData* HSD_RvalueObjGetAllocData(void);\nHSD_RObj* HSD_RObjAlloc(void);\nvoid HSD_RObjSetFlags(HSD_RObj* robj, u32 flags);\nHSD_RObj* HSD_RObjGetByType(HSD_RObj* robj, u32 type, u32 subtype);\nvoid HSD_RObjAnimAll(HSD_RObj* robj);\nvoid HSD_RObjRemoveAnimAllByFlags(HSD_RObj* robj, u32 flags);\nvoid HSD_RObjRemoveAnimAll(HSD_RObj* robj);\nvoid HSD_RObjReqAnimAllByFlags(HSD_RObj* robj, f32 startframe, u32 flags);\nvoid HSD_RObjReqAnimAll(HSD_RObj* robj, f32 startframe);\nvoid HSD_RObjAddAnimAll(HSD_RObj* robj, HSD_RObjAnimJoint* anim);\nvoid HSD_RObjRemoveAll(HSD_RObj*);\nvoid HSD_RObjResolveRefsAll(HSD_RObj*, HSD_RObjDesc*);\nHSD_RObj* HSD_RObjLoadDesc(HSD_RObjDesc*);\nvoid HSD_RObjSetConstraintObj(HSD_RObj* robj, HSD_JObj* constraint);\nvoid HSD_RObjRemove(HSD_RObj*);\nvoid HSD_RObjUpdateAll(HSD_RObj* robj, HSD_JObj* jobj, HSD_ObjUpdateFunc);\nbool HSD_RObjGetGlobalPosition(HSD_RObj* robj, bool, Vec3* translate);\nvoid HSD_RObjRemoveAnimByFlags(HSD_RObj* robj, u32 flags);\nvoid HSD_RObjReqAnimByFlags(HSD_RObj* robj, f32 startframe, u32 flags);\nvoid HSD_RObjAddAnim(HSD_RObj* robj, HSD_RObjAnimJoint* anim);\nvoid HSD_RObjAnim(HSD_RObj* robj);\n#define _shadow_h_\nstruct HSD_Shadow {\n    HSD_SList* objects; // 0x0\n    HSD_CObj* camera; // 0x4\n    HSD_TObj* texture; // 0x8\n    f32 scaleS; // 0xC\n    f32 scaleT; // 0x10\n    f32 transS; // 0x14\n    f32 transT; // 0x18\n    bool active; // 0x1C\n    u8 intensity; // 0x20\n    void* user_data; // 0x24\n};\nstruct HSD_ViewingRect {\n    Vec3 origin;\n    Vec3 up_v;\n    Vec3 right_v;\n    Vec3 eye_v;\n    Vec3 eye_vn;\n    f32 distance;\n    f32 top;\n    f32 bottom;\n    f32 left;\n    f32 right;\n    f32 perspective;\n};\nHSD_ObjAllocData* HSD_ShadowGetAllocData(void);\nvoid HSD_ShadowInitAllocData(void);\nHSD_Shadow* HSD_ShadowAlloc(void);\nvoid HSD_ShadowDeleteObject(HSD_Shadow*, bool);\nHSD_TObj* makeShadowTObj(void);\nvoid HSD_ShadowRemove(HSD_Shadow* shadow);\nvoid HSD_ShadowInit(HSD_Shadow* shadow);\n#define SYSDOLPHIN_BASELIB_SISLIB_H\ntypedef struct {\n    unk_t x0;\n    unk_t x4;\n    unk_t x8;\n    f32 xC;\n    unk_t x10;\n} sislib_UnknownType001;\ntypedef struct _TextGlyphTexture {\n    /*0x00*/ u8 data[512];\n} TextGlyphTexture;\nstruct TextKerning {\n    /*0x00*/ u8 left;\n    /*0x01*/ u8 right;\n};\ntypedef struct _SIS {\n    /*0x00*/ TextKerning* kerning;\n    /*0x04*/ TextGlyphTexture* textures;\n} SIS;\nextern s8 HSD_SisLib_804D6390[4];\nextern SIS* HSD_SisLib_804D1124[5];\nextern HSD_Archive* HSD_SisLib_804D1110[5];\nextern u32 lbl_8040C8C0[144];\nextern u32 HSD_SisLib_8040C680[144];\nextern unk_t HSD_SisLib_8040C4B8;\nextern sislib_UnknownType001 HSD_SisLib_8040C4A4;\nextern sislib_UnknownType001 HSD_SisLib_8040C490;\nvoid HSD_SisLib_803A6048(size_t);\nunk_t func_804A70A0(unk_t, s32, u32, s32, s32, s32, s32, s32, f64, f64, f64,\n                    f64, f64, f64, f64, f64);\nvoid HSD_SisLib_803A947C(void);\nvoid HSD_SisLib_803A945C(void);\nvoid HSD_SisLib_803A84BC(void);\nvoid HSD_SisLib_803A8134(void);\ns32 HSD_SisLib_803A7F0C(unk_t, s32);\nvoid HSD_SisLib_803A7684(unk_t, u8, u8);\nvoid HSD_SisLib_803A7664(unk_t);\nvoid HSD_SisLib_803A75E0(unk_t, s32);\nvoid HSD_SisLib_803A7548(unk_t, f32, f32);\nvoid HSD_SisLib_803A74F0(unk_t, unk_t);\nvoid HSD_SisLib_803A746C(unk_t, s32, f32, f32);\ns32 HSD_SisLib_803A70A0(s32, unk_t, unk_t);\nu32 lbl_803A6FEC(s32, s32, bool);\nvoid HSD_SisLib_803A6B98(unk_t, u32, s32, s32, s32, s32, s32, s32, f64, f64,\n                         f64, f64, f64, f64, f64, f64);\ns32 HSD_SisLib_803A67EC(unk_t, unk_t);\nunk_t HSD_SisLib_803A6754(void);\nvoid HSD_SisLib_803A660C(s32, s32, s32);\nvoid HSD_SisLib_803A6530(s32, s32, s32);\nvoid HSD_SisLib_803A6478(u8*, u8*);\nvoid HSD_SisLib_803A6368(unk_t, unk_t, u8*);\nvoid HSD_SisLib_803A62A0(s32, s32, s8*);\ns32 HSD_SisLib_803A611C(s16, u32, s16, s8, s8, s8, s8, u32);\nvoid lbl_803A60EC(void);\nunk_t HSD_SisLib_803A5ACC(f32, f32, f32, f32, f32);\nvoid HSD_SisLib_803A594C(u8*);\n#define SYSDOLPHIN_BASELIB_SOBJLIB_H\n#define SYSDOLPHIN_BASELIB_SPLINE_H\nf32 splGetHelmite(f32, f32, f32, f32, f32, f32);\nvoid splArcLengthPoint(Vec3*, HSD_Spline*, f32);\nvoid splGetSplinePoint(s32, s32);\n#define SYSDOLPHIN_BASELIB_S\n#define HSD_STATE_ALL -1\n#define HSD_STATE_NONE 0\n#define HSD_STATE_PRIMITIVE 0x1\n#define HSD_STATE_VTX_ATTR 0x2\n#define HSD_STATE_COLOR_CHANNEL 0x4\n#define HSD_STATE_TEV_STAGE 0x8\n#define HSD_STATE_TEV_REGISTER 0x10\n#define HSD_STATE_TEX_COORD_GEN 0x20\n#define HSD_STATE_RENDER_MODE 0x40\ntypedef struct HSD_Chan {\n    struct HSD_Chan* next;\n    u32 chan;\n    u32 flags;\n    GXColor amb_color;\n    GXColor mat_color;\n    u8 enable;\n    u32 amb_src;\n    u32 mat_src;\n    s32 light_mask;\n    u32 diff_fn;\n    u32 attn_fn;\n    HSD_AObj* aobj;\n} HSD_Chan;\nvoid HSD_SetupChannelMode(u32 arg0);\nvoid HSD_SetupPEMode(u32 flags, HSD_PEDesc* pe);\nvoid HSD_SetupRenderModeWithCustomPE(u32 rendermode, HSD_PEDesc* pe);\nvoid HSD_SetupRenderMode(u32);\nvoid HSD_SetMaterialColor(GXColor ambient, GXColor diffuse, GXColor specular,\n                          f32 alpha);\nvoid HSD_SetMaterialShininess(f32 shininess);\nvoid HSD_StateSetLineWidth(u8 width, int tex_offsets);\nvoid HSD_StateSetCullMode(int mode);\nvoid HSD_StateSetBlendMode(int type, int src_factor, int dst_factor, int op);\nvoid HSD_StateSetZMode(int, int, int);\nvoid HSD_StateSetPointSize(u8, int);\nvoid HSD_StateSetAlphaCompare(int, u8, int, int, u8);\nvoid HSD_StateSetColorUpdate(int);\nvoid HSD_StateSetAlphaUpdate(int);\nvoid HSD_StateSetDstAlpha(int, u8);\nvoid HSD_StateSetZCompLoc(int);\nvoid HSD_StateSetDither(int);\nvoid _HSD_StateInvalidatePrimitive(void);\nvoid _HSD_StateInvalidateVtxAttr(void);\nvoid _HSD_StateInvalidateRenderMode(void);\nvoid HSD_StateInvalidate(int mask);\n#define SYSDOLPHIN_BASELIB_SYNTH_H\n#define _tev_h_\nvoid HSD_RenderInitAllocData(void);\nHSD_ObjAllocData* HSD_RenderGetAllocData(void);\nHSD_ObjAllocData* HSD_TevRegGetAllocData(void);\nHSD_ObjAllocData* HSD_ChanGetAllocData(void);\nvoid HSD_SetupChannel(HSD_Chan*);\nvoid HSD_StateSetNumChans(int num);\nvoid HSD_SetupChannelAll(HSD_Chan*);\nvoid HSD_StateRegisterTexGen(int);\nvoid HSD_StateSetNumTexGens(void);\nvoid HSD_StateInitTev(void);\nint HSD_StateGetNumTevStages(void);\nint HSD_StateAssignTev(void);\nvoid HSD_StateSetNumTevStages(void);\nvoid HSD_SetupTevStage(HSD_TevDesc*);\nvoid HSD_SetupTevStageAll(HSD_TevDesc*);\nint HSD_Channel2Num(int chan);\nint HSD_Index2TevStage(int idx);\nint HSD_TevStage2Index(int stage);\nint HSD_TevStage2Num(int stage);\nvoid HSD_SetTevRegAll(void);\nvoid ChanUpdateFunc(HSD_Chan*, int, f32*);\nvoid _HSD_StateInvalidateColorChannel(void);\nvoid _HSD_StateInvalidateTevStage(void);\nvoid _HSD_StateInvalidateTevRegister(void);\nvoid _HSD_StateInvalidateTexCoordGen(void);\n#define _UTIL_H_\n// functions\nvoid HSD_MulColor(GXColor* arg0, GXColor* arg1, GXColor* dest);\nu32 HSD_GetNbBits(u32 arg0);\ns32 HSD_Index2PosNrmMtx(u32 arg0);\n// variables\nextern float HSD_identityMtx[];", "diff_flags": [], "diff_label": "ftMaterial_800BFB4C", "libraries": []}