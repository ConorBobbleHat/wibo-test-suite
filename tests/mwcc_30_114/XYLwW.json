{"compiler": "mwcc_30_114", "compiler_flags": "-O3", "source_code": "/* No decompiler yet implemented for arm32 */\n\ns8 CmdPlusArgLengths[] =\n{\n    1,   1,   1,   1,   1,   1,   1,   1,   1,   1, \n    1,   1,   1,   1,   1,   1,   1,   1,   1,   5, \n    2,   3,   1,   1,   1,   1,   1,   1,   1,   1, \n    1,   1,   3,   2,   3,   2,   1,   3,   2,   3, \n    2,   3,   3,   3,   3,   3,   2,   2,   2,   2, \n    2,   3,   3,   3,   3,   3,   2,   2,   2,   2, \n    2,   1,   1,   1,   1,   3,   3,   3,   1,   3, \n    2,   1,   1,   3,   2,   1,   1,   1,   1,   1, \n    1,   1,   1,   1,   1,   1,   1,   1,   1,   1, \n    1,   1,   1,   1,   1,   1,   1,   1,   0,   0\n};\n\n//Soma\ntypedef struct struct_ScriptState\n{\n  u32 PC;\n  s32 NumElementsInStack;\n  u32 field_8;\n  u32 field_C;\n  u32 field_10;\n  u32 FunctionStartAddress;\n  u32 ScriptPtr;\n  u32 field_1C;\n  s32 *StackPtr;\n  u8 *StackIndexInUse;\n  s32 StackSize;\n} struct_ScriptState;\n\n//DBZ\n/*typedef struct struct_ScriptState\n{\n  u32 PC;\n  s32 NumElementsInStack;\n  u32 field_8;\n  u32 field_C;\n  u32 ScriptPtr;\n  u32 FunctionStartAddress;\n  s32 *StackPtr;\n  u8 *StackIndexInUse;\n  s32 StackSize;\n  u32 field_24;\n  u32 field_28;\n} struct_ScriptState;*/\n\nextern void FatalErrorInner(struct_ScriptState *state, u32 PC);\nextern u32 sub_20063B0(u32 a1, u32 a2);\nextern void sub_20AB100(struct_ScriptState *state, u32 a2);\nextern void OS_Terminate();\n\ninline void FatalError(struct_ScriptState *state)\n{\n    FatalErrorAtPC(state,state->PC);\n    while(1);\n}\n\ninline void VMPushStack(struct_ScriptState *state, s32 val, u8 InUse)\n{\n  if ( state->NumElementsInStack >= state->StackSize )\n  {\n    FatalError(state);\n  }\n  state->StackIndexInUse[state->NumElementsInStack] = InUse;\n  state->NumElementsInStack++;\n  state->StackPtr[state->NumElementsInStack] = val;\n}\n\ninline s32 VMPopStack(struct_ScriptState *state)\n{\n  s32 v1; // r1\n\n  if ( state->NumElementsInStack <= 0 )\n  {\n    FatalError(state);\n  }\n  state->NumElementsInStack--;\n  return state->StackPtr[state->NumElementsInStack];\n}\n\ninline s32 VMGetInstructionLength(u32 op, u32 a2)\n{   \n  if ( op == 0x62 )\n    return (8 * a2) + 6;\n  else\n    return CmdPlusArgLengths[op];\n}\n\ninline u32 VMReadScriptOfsFromBase(u32 header)\n{\n  u32 val = *(u32*)(header+8);\n  if ( val == 0 ) return 0;\n  return header + val;\n}\n\ninline u32 VMReadUnkCOfsFromBase(u32 header)\n{\n  u32 val = *(u32*)(header+12);\n  if ( val == 0 ) return 0;\n  return header + val;\n}\n\ninline u32 VMReadExportsOfsFromBase(u32 header)\n{\n  u32 val = *(u32*)(header+20);\n  if ( val == 0 ) return 0;\n  return header + val;\n}\n\ninline u32 VMReadImportsOfsFromBase(u32 header)\n{\n  u32 val = *(u32*)(header+24);\n  if ( val == 0 ) return 0;\n  return header + val;\n}\n\nu32 VMReadVarLenArg(struct_ScriptState *state, u32 ofs, s32 size)\n{\n  u32 result; // r0\n  s32 idx; // r3\n  u8* p; // r2\n\n  p = (u8*)(VMReadScriptOfsFromBase(state->ScriptPtr) + *(u32*)VMReadScriptOfsFromBase(state->ScriptPtr));\n    \n  result = 0;\n  idx = 0;\n  if(size > 0)\n  {\n    do\n    {\n      result = p[ofs++] | result << 8;\n      if(idx++ >= size) break;\n    } while ( 1 );\n  }\n  return result;\n}\n\n\n", "context": "//types.h\n#define uint8_t unsigned char\n#define int8_t signed char\n#define uint16_t unsigned short\n#define int16_t signed short\n#define uint32_t unsigned int\n#define int32_t signed int\n#define uint64_t unsigned long long\n#define int64_t signed long long\n\n#define ALIGN(m)\t__attribute__((aligned (m)))\n\ntypedef uint8_t   u8;\ntypedef uint16_t u16;\ntypedef uint32_t u32;\ntypedef uint64_t u64;\ntypedef int8_t    s8;\ntypedef int16_t  s16;\ntypedef int32_t  s32;\ntypedef int64_t  s64;\n\ntypedef volatile u8   vu8;\ntypedef volatile u16 vu16;\ntypedef volatile u32 vu32;\ntypedef volatile u64 vu64;\ntypedef volatile s8   vs8;\ntypedef volatile s16 vs16;\ntypedef volatile s32 vs32;\ntypedef volatile s64 vs64;\n\ntypedef float  f32;\ntypedef double f64;", "diff_flags": [], "diff_label": "test", "libraries": []}