{"compiler": "psyq4.3", "compiler_flags": "-O2 -G65536", "source_code": "extern void G2EmulationSwitchAnimationCharacter(struct __CharacterState *In, int NewAnim, int NewFrame, int Frames, int Mode); // 0x80071E7C\nextern uintptr_t SetControlInitIdleData(int mode, long frame, long frames); // 0x800713C8\nextern void StateSwitchStateData(struct __CharacterState *In, int CurrentSection, void (*NewProcess)(struct __CharacterState* In, int CurrentSection, int Data), int Data); // 0x80072590\nextern void EnMessageQueueData(struct __MessageQueue *In, int ID, int Data); // 0x800707C4\nextern void InitAlgorithmicWings(struct _Instance *instance); // 0x800A1C24\nextern void StateSwitchStateCharacterDataDefault(struct __CharacterState *In, void(*NewProcess)(struct __CharacterState* In, int CurrentSection, int Data), int Data); // 0x80072518\nextern void StateHandlerFall(struct __CharacterState *In, int CurrentSection, int Data); // 0x800ABF84\nextern void StateHandlerIdle(struct __CharacterState *In, int CurrentSection, int Data); // 0x800A8668\nextern void StateSwitchStateDataDefault(struct __CharacterState *In, int CurrentSection, void (*NewProcess)(struct __CharacterState* In, int CurrentSection, int Data), int Data); // 0x800724B0\nextern void StateHandlerAttack2(struct __CharacterState *In, int CurrentSection, int Data); // 0x8009BE68\nextern int StateHandlerDecodeHold(int *Message, int *Data); // 0x8009BB00\nextern uintptr_t SetControlInitHangData(struct _Instance *instance, long frame, long frames); // 0x8007137C\nextern void StateHandlerHang(struct __CharacterState *In, int CurrentSection, int Data); // 0x800AD520\nextern void StateHandlerSoulSuck(struct __CharacterState *In, int CurrentSection, int Data); // 0x800A9C68\nextern void StateHandlerLookAround(struct __CharacterState *In, int CurrentSection, int Data); // 0x800A8F28\nextern void StateHandlerStumble(struct __CharacterState *In, int CurrentSection, int Data); // 0x8009D1C8\nextern void G2EmulationSwitchAnimation(struct __CharacterState *In, int CurrentSection, int NewAnim, int NewFrame, int Frames, int Mode); // 0x80071B0C\nextern void G2EmulationSwitchAnimationSync(struct __CharacterState *In, int SlaveSectionID, int MasterSectionID, int Frames); // 0x80071BC4\nextern int razSideMoveSpiderCheck(struct _Instance *instance, int x); // 0x800A7CAC\nextern void StateHandlerWallGrab(struct __CharacterState *In, int CurrentSection, int Data); // 0x800A0E58\nextern void *memset(void *dst, int c, size_t len);\nextern void FX_Blood2(struct _SVector *location, struct _SVector *input_vel, struct _SVector *accel, int amount, long color, long dummyCrapShouldRemove); // 0x800486F4\nextern void StateHandlerBlock(struct __CharacterState *In, int CurrentSection, int Data); // 0x800AC5D8\nextern short MATH3D_AngleFromPosToPos(_Position *from, _Position *to); // 0x80039C3C\nextern enum _G2Bool_Enum G2Anim_IsControllerActive(struct _G2Anim_Type *anim, int segNumber, int type); // 0x80090654\nextern void G2Anim_DisableController(struct _G2Anim_Type *anim, int segNumber, int type); // 0x800904F4\nextern void StateHandlerHitReaction(struct __CharacterState *In, int CurrentSection, int Data); // 0x8009D5EC\nextern void CAMERA_ForceEndLookaroundMode(struct Camera *camera); // 0x8001B8E4\nextern void StateHandlerAutoFace(struct __CharacterState *In, int CurrentSection, int Data); // 0x800AF148\nextern void razEnterWater(struct __CharacterState *In, int CurrentSection, struct evPhysicsSwimData *SwimData); // 0x800A6E4C\nextern void StateHandlerCrouch(struct __CharacterState *In, int CurrentSection, int Data); // 0x800A9270\nextern void StateHandlerThrow2(struct __CharacterState *In, int CurrentSection, int Data); // 0x8009D868\nextern void StateHandlerGrab(struct __CharacterState *In, int CurrentSection, int Data); // 0x8009E764\nextern void razSetPlayerEventHistory(unsigned long event); // 0x800A7C94\nextern void razLaunchForce(struct _Instance *instance); // 0x800A5D50\nextern void StateHandlerGlyphs(struct __CharacterState *In, int CurrentSection, int Data); // 0x800AF888\nextern void StateHandlerSlide(struct __CharacterState *In, int CurrentSection, int Data); // 0x800AC3F8\nextern int razSwitchVAnimCharacterGroup(struct _Instance *instance, int animGroup, int *frame, int *frames); // 0x800A7230\nextern void SetPhysics(struct _Instance *instance, short gravity, long x, long y, long z); // 0x8009A1B0\nextern void SetDropPhysics(struct _Instance *instance, struct __Player *player); // 0x8009A4B8\n\n// Not 100% matching but equivalent, case 0x4010200 gets commented out in code because StateHandlerSlide glitches\n\nvoid DefaultStateHandler(struct __CharacterState* In, int CurrentSection, int Data)\n{\n    // rearranged vars declaration order to produce better matching results\n\tstruct __Event *Ptr; \n\tint message; \n\tint messageData; \n\tint i; \n\tstruct evPhysicsGravityData *ptr; \n\tshort zRot; \n    struct _SVector Accel; \n\tstruct _Position pos1;\n\tstruct _Position pos2; \n    short diff;  // changed SYMDUMP type (int to short)\n\tstruct evFXHitData *BloodData; \n\tstruct evPhysicsEdgeData *data; \n    typedef void NewProcess(struct __CharacterState* In, int CurrentSection, int Data);  // not from SYMDUMP\n\t\n\tif((Ptr = PeekMessageQueue(&In->SectionList[CurrentSection].Event)) != NULL)\n\t{\n\t\tswitch(Ptr->ID)\n\t\t{\n        case 0x8000000:\n        StateSwitchStateData(In, CurrentSection, &StateHandlerIdle, SetControlInitIdleData(0, 0, 3));\n        break;\n        case 0x80000000:\n        if(((Raziel.Mode & 0x40000) == 0) && ((Raziel.Senses.Flags & 128) == 0)) \n        {\n            StateSwitchStateDataDefault(In, CurrentSection, &StateHandlerAttack2, 0);\n        }\n        break;\n        case 0x80000020:\n        if(((((CurrentSection == 0) && (Raziel.Senses.Flags & 128) == 0)) && (PadData[1] & RazielCommands[0]) == 0) \n        && (StateHandlerDecodeHold(&message, &messageData) != 0)) \n        {\n            if(message == 0x800010) \n            {\n                StateSwitchStateCharacterDataDefault(In, &StateHandlerThrow2, 0);\n            }\n            else if(message == 0x1000002) \n            {\n                StateSwitchStateCharacterDataDefault(In, &StateHandlerGrab, messageData);\n            }\n            else if(message == 0x80000) \n            {\n                Raziel.playerEvent |= 0x400;\n                razSetPlayerEventHistory(0x400);\n                razLaunchForce(In->CharacterInstance);\n                StateSwitchStateCharacterDataDefault(In, &StateHandlerThrow2, 0);\n            }\n            else \n            {\n                StateSwitchStateCharacterDataDefault(In, &StateHandlerAttack2, 0);\n                for(i = 0; i < 3; i++) \n                {\n                    EnMessageQueueData((struct __MessageQueue*)&In->SectionList[i].Event.Queue[16].ID, 0x80000020, 0);\n                }\n            }\n        }\n        break;\n        case 0x80000004:\n        Raziel.Mode |= 2;\n        break;\n        case 0x20000004:\n        Raziel.Mode = (Raziel.Mode | 1) & -3;\n        break;\n        case 0x80000008:\n        if(CurrentSection == 0) \n        {\n            StateSwitchStateCharacterDataDefault(In, &StateHandlerCrouch, 1);\n        }\n        break;\n\t\tcase 0x4000001:\n        PhysicsMode = 0;\n        SetDropPhysics(In->CharacterInstance, &Raziel);\n        if((In->CharacterInstance->zVel < Raziel.fallZVelocity) && (CurrentSection == 0))\n        {\n            if(razSwitchVAnimCharacterGroup(In->CharacterInstance, 24, NULL, NULL) != 0)\n            {\n                G2EmulationSwitchAnimationCharacter(In, 36, 0, 4, 1);\n            }\n            StateSwitchStateCharacterDataDefault(In, &StateHandlerFall, 0);\n        }\n        break;\n\t\tcase 0x4010008:\n        if(PhysicsMode != 3)\n        {\n            PhysicsMode = 3;\n            SetPhysics(In->CharacterInstance, -16, 0, 0, 0);\n        }\n        break;\n        case 0x4020000:\n        razEnterWater(In, CurrentSection, (struct evPhysicsSwimData*)Ptr->Data);\n        break;\n        case 0x1000001:\n        StateSwitchStateDataDefault(In, CurrentSection, &StateHandlerAutoFace, 0);\n        break;\n        case 0x1000000:\n        if(((CurrentSection == 0) && (ControlFlag & 0x4000) == 0) && (Raziel.invincibleTimer == 0)) \n        {\n            StateSwitchStateCharacterDataDefault(In, &StateHandlerHitReaction, Ptr->Data);\n            CAMERA_ForceEndLookaroundMode(&theCamera);\n        }\n        break; \n        case 0x4010200:\n        ptr = (struct evPhysicsGravityData*)Ptr->Data;\n        if(CurrentSection == 0) \n        {\n            pos1.x = 0;\n            pos1.y = 0;\n            pos2.z = 0;\n            pos2.x = ptr->x;\n            pos2.y = ptr->y;\n            pos2.z = ptr->z;\n            diff = MATH3D_AngleFromPosToPos(&pos1, &pos2);\n            if(G2Anim_IsControllerActive(&In->CharacterInstance->anim, 1, 14) != G2FALSE) \n            {\n                G2Anim_DisableController(&In->CharacterInstance->anim, 1, 14);\n                if(ExtraRot) \n                {\n                    In->CharacterInstance->rotation.z += ExtraRot->z;\n                }\n                ExtraRot = 0;\n            }\n            zRot = In->CharacterInstance->rotation.z;\n            if(((zRot - diff)) + (unsigned int)1023 < 2047) \n            {\n                In->CharacterInstance->rotation.z = diff;\n                G2EmulationSwitchAnimationCharacter(&Raziel.State, 73, 0, 6, 2);\n                StateSwitchStateCharacterDataDefault(&Raziel.State, &StateHandlerSlide, 0);\n            }\n            else \n            {\n                In->CharacterInstance->rotation.z = diff + 2048;\n                G2EmulationSwitchAnimationCharacter(&Raziel.State, 77, 0, 6, 2);\n                StateSwitchStateCharacterDataDefault(&Raziel.State, &StateHandlerSlide, 0); \n            }\n        }\n        break;\n        case 0x4010400:\n        if(CurrentSection == 0) \n        {\n            if((LastBlock + 2) < LoopCounter) \n            {\n                BlockCount = 0;\n            }\n            LastBlock = LoopCounter;\n            BlockCount++;\n        }\n        if((BlockCount >= 16)) \n        {\n            StateSwitchStateDataDefault(In, CurrentSection, &StateHandlerBlock, 0); \n        }\n        break;\n        case 0x400000:\n        if(CurrentSection == 0) \n        {\n            memset(&Accel, 0, 8); \n            BloodData = (struct evFXHitData*)Ptr->Data;\n            FX_Blood2(&BloodData->location, &BloodData->velocity, &Accel, 64, 0xFF8010, 0xFF8010);\n        }\n        break;\n        case 0x4000011:\n        if(((Raziel.Abilities & 2) != 0) && (Raziel.Senses.heldClass != 3) && (Raziel.CurrentPlane == 1) && (CurrentSection == 0)) \n        {\n            if((razSideMoveSpiderCheck(In->CharacterInstance, -128) == 0) && (razSideMoveSpiderCheck(In->CharacterInstance, 128)) == 0) \n            {\n                StateSwitchStateCharacterDataDefault(In, &StateHandlerWallGrab, 0);\n            }\n        }\n        break;\n        case 0x40000:\n        if(CurrentSection == 2) \n        {\n            G2EmulationSwitchAnimation(In, 2, 0, 0, 3, CurrentSection);\n        }\n        else \n        {\n            G2EmulationSwitchAnimation(In, CurrentSection, 23, 0, 3, 1);\n        }\n        break;\n        case 0x100005:\n        if(Ptr->Data == 1) \n        {\n            if(In->CharacterInstance->LinkChild != NULL) \n            {\n                G2EmulationSwitchAnimation(In, Ptr->Data, 50, 0, 3, 2);\n                StateSwitchStateDataDefault(In, Ptr->Data, In->SectionList[CurrentSection].Process, 0);\n                break;\n            }\n        }\n        G2EmulationSwitchAnimationSync(In, 1, 0, 3); \n        break;\n        case 0x100000:\n        if(Ptr->Data != 0) \n        {\n            StateSwitchStateDataDefault(In, CurrentSection, (NewProcess*)Ptr->Data, 0);\n        }\n        break;\n        case 0x100006:\n        InitAlgorithmicWings(In->CharacterInstance);\n        break;\n        case 0x4010010:\n        data = (struct evPhysicsEdgeData*)Ptr->Data;\n        StateSwitchStateDataDefault(In, CurrentSection, &StateHandlerHang, SetControlInitHangData(data->instance, 0, 3)); \n        In->CharacterInstance->rotation.z = data->zRot;\n        break;\n        case 0x100009:\n        if(Ptr->Data != 0) \n        {\n            if(CurrentSection == 0) \n            {\n                Raziel.returnState = In->SectionList[0].Process; \n                if(Raziel.returnState == &StateHandlerSoulSuck) \n                {\n                    Raziel.returnState = &StateHandlerIdle; \n                }\n                In->SectionList[0].Data1 = Raziel.Mode;\n                Raziel.Mode = 0x80000;\n            }\n            StateSwitchStateDataDefault(In, CurrentSection, &StateHandlerLookAround, 0);\n            break;\n        }\n        if(Raziel.returnState == NULL) \n        {\n            Raziel.returnState = &StateHandlerIdle;\n        }\n        StateSwitchStateDataDefault(In, CurrentSection, Raziel.returnState, 0);\n        break;\n        case 0x40005:\n        case 0x40025:\n        StateSwitchStateDataDefault(In, CurrentSection, &StateHandlerStumble, Ptr->Data);\n        In->SectionList[CurrentSection].Data1 = Ptr->Data * 30;\n        break;\n        case 0x10002001:\n        case 0x10002002:\n        StateSwitchStateDataDefault(In, CurrentSection, &StateHandlerGlyphs, 1);\n        break;\n        case 0x4000004:\n        break;\n\t\t}\n\t}\n}\n", "context": "typedef unsigned int    size_t;\ntypedef unsigned int uintptr_t;\n\ntypedef enum _G2Bool_Enum // Hashcode: 0xFDD7E4E7 (dec: -36182809)\n{\n\tG2FALSE = 0,\n} _G2Bool_Enum;\n\ntypedef struct {\t\t/* long word type 3D vector */\n\tlong\tvx, vy;\n\tlong\tvz, pad;\n} VECTOR;\n\ntypedef struct {\t\t/* short word type 3D vector */\n\tshort\tvx, vy;\n\tshort\tvz, pad;\n} SVECTOR;\n\ntypedef struct _SVector // hashcode: 0x73B07C09 (dec: 1940945929)\n{\n\tshort x; // size=0, offset=0\n\tshort y; // size=0, offset=2\n\tshort z; // size=0, offset=4\n\tshort pad; // size=0, offset=6\n} _SVector;\n\ntypedef struct MATRIX {\n  short m[3][3]; // size=18, offset=0\n  long t[3]; // size=12, offset=20\n} MATRIX;\n\ntypedef struct _Position // hashcode: 0x2523C22F (dec: 623100463)\n{\n\tshort x; // size=0, offset=0\n\tshort y; // size=0, offset=2\n\tshort z; // size=0, offset=4\n} _Position;\n\ntypedef struct _Rotation // hashcode: 0x5A40CBB0 (dec: 1514195888)\n{\n\tshort x; // size=0, offset=0\n\tshort y; // size=0, offset=2\n\tshort z; // size=0, offset=4\n\tshort pad; // size=0, offset=6\n} _Rotation;\n\nstruct evPhysicsGravityData // hashcode: 0xD13BDF0D (dec: -784605427)\n{\n\tshort UpperOffset; // size=0, offset=0\n\tshort LowerOffset; // size=0, offset=2\n\tshort x; // size=0, offset=4\n\tshort y; // size=0, offset=6\n\tshort z; // size=0, offset=8\n\tshort slipSlope; // size=0, offset=10\n};\n\nstruct evFXHitData \n{\n  _SVector location; // size=8, offset=0\n  _SVector velocity; // size=8, offset=8\n  short amount; // size=0, offset=16\n  short type; // size=0, offset=18\n};\n\nstruct evPhysicsSwimData // hashcode: 0x947F2BE5 (dec: -1803605019)\n{\n\tshort CheckDepth; // size=0, offset=0\n\tshort SwimDepth; // size=0, offset=2\n\tshort WadeDepth; // size=0, offset=4\n\tshort TreadDepth; // size=0, offset=6\n\tstruct _SVector* iVelocity; // size=8, offset=8\n\tshort Depth; // size=0, offset=12\n\tshort WaterDepth; // size=0, offset=14\n\tshort rc; // size=0, offset=16\n\tshort pad; // size=0, offset=18\n\tint WaterLevel; // size=0, offset=20\n};\n\nstruct evPhysicsEdgeData // hashcode: 0x9E9E1CB3 (dec: -1633805133)\n{\n\tshort UpperOffset; // size=0, offset=0\n\tshort ForwardOffset; // size=0, offset=2\n\tshort AboveOffset; // size=0, offset=4\n\tshort XDistance; // size=0, offset=6\n\tshort YDistance; // size=0, offset=8\n\tshort ZDistance; // size=0, offset=10\n\tstruct _SVector* Normal1; // size=8, offset=12\n\tstruct _SVector* Normal2; // size=8, offset=16\n\tstruct _SVector* Delta; // size=8, offset=20\n\tstruct _Instance* instance; // size=616, offset=24\n\tint zRot; // size=0, offset=28\n\tint rc; // size=0, offset=32\n};\n\nstruct _StreamUnit // hashcode: 0xAC366E40 (dec: -1405718976)\n{\n\tlong StreamUnitID; // size=0, offset=0\n\tshort used; // size=0, offset=4\n\tshort flags; // size=0, offset=6\n\tstruct Level* level; // size=392, offset=8\n\tchar baseAreaName[16]; // size=16, offset=12\n\tshort toSignal; // size=0, offset=28\n\tshort fromSignal; // size=0, offset=30\n\tlong FrameCount; // size=0, offset=32\n\tshort eventVariables[6]; // size=12, offset=36\n\tlong FogColor; // size=0, offset=48\n\tshort UnitFogFar; // size=0, offset=52\n\tshort UnitFogNear; // size=0, offset=54\n\tshort TargetFogFar; // size=0, offset=56\n\tshort TargetFogNear; // size=0, offset=58\n\tshort sfxFileHandle; // size=0, offset=60\n\tshort pad; // size=0, offset=62\n};\n\nstruct STracker // hashcode: 0xAED5E069 (dec: -1361715095)\n{\n\tstruct _StreamUnit StreamList[16]; // size=1024, offset=0\n};\n\nstruct _PlaneConstants {\n  short a; // size=0, offset=0\n  short b; // size=0, offset=2\n  short c; // size=0, offset=4\n  short flags; // size=0, offset=6\n  long d; // size=0, offset=8\n};\n\nstruct gSoundData {\n  unsigned long gMasterVol; // size=0, offset=0\n  unsigned long gMusicVol; // size=0, offset=4\n  unsigned long gSfxVol; // size=0, offset=8\n  unsigned long gVoiceVol; // size=0, offset=12\n  char gSfxOn; // size=0, offset=16\n  char gMusicOn; // size=0, offset=17\n  char gVoiceOn; // size=0, offset=18\n  char soundsLoaded; // size=0, offset=19\n};\n\nstruct _ColorType {\n  unsigned char r; // size=0, offset=0\n  unsigned char g; // size=0, offset=1\n  unsigned char b; // size=0, offset=2\n  unsigned char code; // size=0, offset=3\n};\n\nstruct CVECTOR {\n  unsigned char r; // size=0, offset=0\n  unsigned char g; // size=0, offset=1\n  unsigned char b; // size=0, offset=2\n  unsigned char cd; // size=0, offset=3\n};\nstruct DVECTOR {\n  short vx; // size=0, offset=0\n  short vy; // size=0, offset=2\n};\n\nstruct __Event {\n  int ID; // size=0, offset=0\n  int Data; // size=0, offset=4\n};\nstruct __MessageQueue {\n  int Head; // size=0, offset=0\n  int Tail; // size=0, offset=4\n  struct __Event Queue[16]; // size=128, offset=8\n};\nstruct _G2SVector3_Type {\n  short x; // size=0, offset=0\n  short y; // size=0, offset=2\n  short z; // size=0, offset=4\n};\nstruct _Normal {\n  short x; // size=0, offset=0\n  short y; // size=0, offset=2\n  short z; // size=0, offset=4\n  short pad; // size=0, offset=6\n};\nstruct _Vector {\n  long x; // size=0, offset=0\n  long y; // size=0, offset=4\n  long z; // size=0, offset=8\n};\nstruct _SVectorNoPad {\n  short x; // size=0, offset=0\n  short y; // size=0, offset=2\n  short z; // size=0, offset=4\n};\n\nstruct _G2AnimChanStatus_Type {\n  short keyData; // size=0, offset=0\n  short index; // size=0, offset=2\n};\n\nstruct _G2AnimChanStatusBlock_Type {\n  struct _G2AnimChanStatusBlock_Type *next; // size=36, offset=0\n  struct _G2AnimChanStatus_Type chunks[8]; // size=32, offset=4\n};\n\nstruct _G2AnimSection_Type {\n  unsigned char flags; // size=0, offset=0\n  unsigned char sectionID; // size=0, offset=1\n  unsigned char firstSeg; // size=0, offset=2\n  unsigned char segCount; // size=0, offset=3\n  short elapsedTime; // size=0, offset=4\n  short storedTime; // size=0, offset=6\n  short loopStartTime; // size=0, offset=8\n  short loopEndTime; // size=0, offset=10\n  short *swAlarmTable; // size=0, offset=12\n  long speedAdjustment; // size=0, offset=16\n  unsigned short keylistID; // size=0, offset=20\n  unsigned long alarmFlags; // size=0, offset=24\n  long *callback; // size=0, offset=28\n  void *callbackData; // size=0, offset=32\n  struct _G2AnimKeylist_Type *keylist; // size=20, offset=36\n  struct _G2AnimChanStatusBlock_Type *chanStatusBlockList; // size=36, offset=40\n  struct _G2AnimInterpInfo_Type *interpInfo; // size=12, offset=44\n};\n\nstruct _Model {\n  long numVertices; // size=0, offset=0\n  struct _MVertex *vertexList; // size=8, offset=4\n  long numNormals; // size=0, offset=8\n  struct _SVectorNoPad *normalList; // size=6, offset=12\n  long numFaces; // size=0, offset=16\n  struct _MFace *faceList; // size=12, offset=20\n  long numSegments; // size=0, offset=24\n  struct _Segment *segmentList; // size=24, offset=28\n  struct AniTex *aniTextures; // size=16, offset=32\n  short maxRad; // size=0, offset=36\n  short pad; // size=0, offset=38\n  long maxRadSq; // size=0, offset=40\n  struct MultiSpline *multiSpline; // size=0, offset=44\n  struct TextureMT3 *startTextures; // size=16, offset=48\n  struct TextureMT3 *endTextures; // size=16, offset=52\n};\nstruct LightInstance {\n  struct _Instance *lightInstance; // size=0, offset=0\n  long r; // size=0, offset=4\n  long g; // size=0, offset=8\n  long b; // size=0, offset=12\n  short radius; // size=0, offset=16\n  unsigned char segment; // size=0, offset=18\n  unsigned char flags; // size=0, offset=19\n};\n\nstruct _G2Anim_Type {\n  unsigned char sectionCount; // size=0, offset=0\n  unsigned char masterSection; // size=0, offset=1\n  unsigned short controllerList; // size=0, offset=2\n  unsigned short disabledControllerList; // size=0, offset=4\n  unsigned short pad; // size=0, offset=6\n  struct _G2SVector3_Type rootTrans; // size=6, offset=8\n  unsigned short flags; // size=0, offset=14\n  struct _Model *modelData; // size=0, offset=16\n  struct _G2Matrix_Type *segMatrices; // size=32, offset=20\n  unsigned long disabledBits[3]; // size=12, offset=24\n  struct _G2AnimSection_Type section[3]; // size=144, offset=36\n};\n\nstruct _Sphere {\n  struct _Position position; // size=6, offset=0\n  unsigned short radius; // size=0, offset=6\n  unsigned long radiusSquared; // size=0, offset=8\n};\n\nstruct SoundInstance {\n  unsigned char channel; // size=0, offset=0\n  unsigned char state; // size=0, offset=1\n  unsigned char delay; // size=0, offset=2\n};\n\nstruct NodeType {\n  struct NodeType *prev; // size=8, offset=0\n  struct NodeType *next; // size=8, offset=4\n};\n\nstruct _G2AnimKeylist_Type {\n  unsigned char sectionCount; // size=0, offset=0\n  unsigned char s0TailTime; // size=0, offset=1\n  unsigned char s1TailTime; // size=0, offset=2\n  unsigned char s2TailTime; // size=0, offset=3\n  unsigned short keyCount; // size=0, offset=4\n  short timePerKey; // size=0, offset=6\n  unsigned short pad00; // size=0, offset=8\n  short pad01; // size=0, offset=10\n  unsigned short pad10; // size=0, offset=12\n  short pad11; // size=0, offset=14\n  struct _G2AnimFxHeader_Type *fxList; // size=4, offset=16\n  unsigned short *sectionData[0]; // size=0, offset=20\n};\n\nstruct EventAliasCommandStruct {\n  struct _Instance *hostInstance; // size=0, offset=0\n  short newanim; // size=0, offset=4\n  short newframe; // size=0, offset=6\n  short interpframes; // size=0, offset=8\n  short speed; // size=0, offset=10\n};\n\nstruct _Instance {\n  struct NodeType node; // size=8, offset=0\n  struct _Instance *next; // size=668, offset=8\n  struct _Instance *prev; // size=668, offset=12\n  long instanceID; // size=0, offset=16\n  long flags; // size=0, offset=20\n  long flags2; // size=0, offset=24\n  struct Object *object; // size=76, offset=28\n  struct Intro *intro; // size=0, offset=32\n  void *data; // size=0, offset=36\n  void *introData; // size=0, offset=40\n  struct _Instance *parent; // size=668, offset=44\n  long introNum; // size=0, offset=48\n  long birthStreamUnitID; // size=0, offset=52\n  long currentStreamUnitID; // size=0, offset=56\n  long introUniqueID; // size=0, offset=60\n  struct MATRIX *matrix; // size=32, offset=64\n  struct MATRIX *oldMatrix; // size=32, offset=68\n  struct SoundInstance soundInstanceTbl[4]; // size=12, offset=72\n  unsigned long maxCheckDistance; // size=0, offset=84\n  unsigned long checkMask; // size=0, offset=88\n  struct _Position position; // size=6, offset=92\n  unsigned char lightGroup; // size=0, offset=98\n  struct _Position oldPos; // size=6, offset=100\n  unsigned char spectralLightGroup; // size=0, offset=106\n  short currentTextureAnimFrame; // size=0, offset=108\n  struct _Position initialPos; // size=6, offset=110\n  struct _Rotation rotation; // size=8, offset=116\n  struct _Rotation oldRotation; // size=8, offset=124\n  struct _SVector scale; // size=8, offset=132\n  long attachedID; // size=0, offset=140\n  long attachedSegment; // size=0, offset=144\n  struct MATRIX relativeMatrix; // size=32, offset=148\n  struct _TFace *tface; // size=12, offset=180\n  struct _TFace *oldTFace; // size=12, offset=184\n  void *tfaceLevel; // size=0, offset=188\n  void *collideInfo; // size=0, offset=192\n  long bspTree; // size=0, offset=196\n  short cachedTFace; // size=0, offset=200\n  short cachedBSPTree; // size=0, offset=202\n  void *cachedTFaceLevel; // size=0, offset=204\n  struct _Normal oldWNormal; // size=8, offset=208\n  struct _Normal wNormal; // size=8, offset=216\n  struct _SVector offset; // size=8, offset=224\n  void *dsignal; // size=0, offset=232\n  void *shadow0; // size=0, offset=236\n  void *shadow1; // size=0, offset=240\n  void *extraLight; // size=0, offset=244\n  struct _Position extraLightDir; // size=6, offset=248\n  short extraLightScale; // size=0, offset=254\n  struct _HModel *hModelList; // size=8, offset=256\n  short fadeValue; // size=0, offset=260\n  short lightMatrix; // size=0, offset=262\n  void *processFunc; // size=0, offset=264\n  void *collideFunc; // size=0, offset=268\n  void *additionalCollideFunc; // size=0, offset=272\n  void *additionalDrawFunc; // size=0, offset=276\n  unsigned long *queryFunc; // size=0, offset=280\n  void *messageFunc; // size=0, offset=284\n  struct _Position shadowPosition; // size=6, offset=288\n  short currentModel; // size=0, offset=294\n  struct _TFace *waterFace; // size=12, offset=296\n  struct _TFace *oldWaterFace; // size=12, offset=300\n  struct _Terrain *waterFaceTerrain; // size=0, offset=304\n  struct _PlaneConstants halvePlane; // size=12, offset=308\n  struct _SVector splitPoint; // size=8, offset=320\n  struct _Instance *LinkParent; // size=668, offset=328\n  struct _Instance *LinkChild; // size=668, offset=332\n  struct _Instance *LinkSibling; // size=668, offset=336\n  long ParentLinkNode; // size=0, offset=340\n  void *InstanceState; // size=0, offset=344\n  char introName[16]; // size=16, offset=348\n  void *extraData; // size=0, offset=364\n  short constrictAngle; // size=0, offset=368\n  short petrifyValue; // size=0, offset=370\n  long xVel; // size=0, offset=372\n  long yVel; // size=0, offset=376\n  long zVel; // size=0, offset=380\n  long xAccl; // size=0, offset=384\n  long yAccl; // size=0, offset=388\n  long zAccl; // size=0, offset=392\n  long maxXVel; // size=0, offset=396\n  long maxYVel; // size=0, offset=400\n  long maxZVel; // size=0, offset=404\n  long currentMainState; // size=0, offset=408\n  long currentSubState; // size=0, offset=412\n  long work0; // size=0, offset=416\n  long work1; // size=0, offset=420\n  long work2; // size=0, offset=424\n  long work3; // size=0, offset=428\n  long work4; // size=0, offset=432\n  long work5; // size=0, offset=436\n  long work6; // size=0, offset=440\n  long work7; // size=0, offset=444\n  long work8; // size=0, offset=448\n  long work9; // size=0, offset=452\n  struct _G2Anim_Type anim; // size=180, offset=456\n  enum _G2Bool_Enum *rebuildCallback; // size=4, offset=636\n  short splineFlags; // size=0, offset=640\n  short targetFrame; // size=0, offset=642\n  short clipBeg; // size=0, offset=644\n  short clipEnd; // size=0, offset=646\n  struct EventAliasCommandStruct aliasCommand; // size=12, offset=648\n  long light_color; // size=0, offset=660\n  struct CVECTOR *perVertexColor; // size=4, offset=664\n};\n\nstruct _CameraCore_Type {\n  struct _Position position; // size=6, offset=0\n  short pad1; // size=0, offset=6\n  struct MATRIX vvNormalWorVecMat[2]; // size=64, offset=8\n  long vvPlaneConsts[6]; // size=24, offset=72\n  struct MATRIX *wcTransform; // size=32, offset=96\n  long farPlane; // size=0, offset=100\n  long projDistance; // size=0, offset=104\n  long nearPlane; // size=0, offset=108\n  struct MATRIX *wcTransform2; // size=32, offset=112\n  struct MATRIX *cwTransform2; // size=32, offset=116\n  struct _Normal viewVolumeNormal[5]; // size=40, offset=120\n  int leftX; // size=0, offset=160\n  int rightX; // size=0, offset=164\n  int topY; // size=0, offset=168\n  int bottomY; // size=0, offset=172\n  struct _Rotation rotation; // size=8, offset=176\n  short pad2; // size=0, offset=184\n  struct _SVector screenScale; // size=8, offset=186\n  short pad3; // size=0, offset=194\n  struct _Position debugPos; // size=6, offset=196\n  short pad4; // size=0, offset=202\n  struct _Rotation debugRot; // size=8, offset=204\n  short pad5; // size=0, offset=212\n  struct _Position nondebugPos; // size=6, offset=214\n  short pad6; // size=0, offset=220\n};\n\nstruct _SavedCinematic {\n  struct _Position position; // size=6, offset=0\n  struct _Position focusPoint; // size=6, offset=6\n  struct _Position base; // size=6, offset=12\n  struct _Position targetPos; // size=6, offset=18\n  struct _Position targetFocusPoint; // size=6, offset=24\n  struct _Position targetBase; // size=6, offset=30\n  struct _Rotation baseRot; // size=8, offset=36\n  struct _Rotation focusRotation; // size=8, offset=44\n  struct _Rotation targetFocusRotation; // size=8, offset=52\n  short focusDistance; // size=0, offset=60\n  short targetFocusDistance; // size=0, offset=62\n  struct _SVector focusPointVel; // size=8, offset=64\n  struct _SVector focusPointAccl; // size=8, offset=72\n  struct _SVector baseVel; // size=8, offset=80\n  struct _SVector baseAccl; // size=8, offset=88\n  long maxVel; // size=0, offset=96\n  struct MultiSpline *posSpline; // size=0, offset=100\n  struct MultiSpline *targetSpline; // size=0, offset=104\n  struct Level *level; // size=0, offset=108\n};\n\nstruct Camera {\n  struct _CameraCore_Type core; // size=224, offset=0\n  long shake; // size=0, offset=224\n  short shakeFrame; // size=0, offset=228\n  short shakeScale; // size=0, offset=230\n  long flags; // size=0, offset=232\n  long lock; // size=0, offset=236\n  short mode; // size=0, offset=240\n  short state; // size=0, offset=242\n  short posState; // size=0, offset=244\n  short rotState; // size=0, offset=246\n  short tiltState; // size=0, offset=248\n  short distanceState; // size=0, offset=250\n  short lagZ; // size=0, offset=252\n  short tilt; // size=0, offset=254\n  struct _Position focusPoint; // size=6, offset=256\n  short focusDistance; // size=0, offset=262\n  struct _Instance *focusInstance; // size=668, offset=264\n  struct _Position oldFocusInstancePos; // size=6, offset=268\n  struct _Position newFocusInstancePos; // size=6, offset=274\n  struct _Rotation oldFocusInstanceRot; // size=8, offset=280\n  struct _Rotation newFocusInstanceRot; // size=8, offset=288\n  struct _SVector focusInstanceVelVec; // size=8, offset=296\n  struct _Position focusLeadPivot; // size=6, offset=304\n  struct _Position focusOffset; // size=6, offset=310\n  struct _Rotation focusRotation; // size=8, offset=316\n  short tiltVel; // size=0, offset=324\n  short tiltAccl; // size=0, offset=326\n  struct _SVector positionVel; // size=8, offset=328\n  struct _SVector positionAccl; // size=8, offset=336\n  struct _SVector focusPointVel; // size=8, offset=344\n  struct _SVector focusPointAccl; // size=8, offset=352\n  short focusDistanceVel; // size=0, offset=360\n  short focusDistanceAccl; // size=0, offset=362\n  struct _SVector focusRotVel; // size=8, offset=364\n  struct _SVector focusRotAccl; // size=8, offset=372\n  struct _SVector maxFocusVel; // size=8, offset=380\n  struct _SVector rotationVel; // size=8, offset=388\n  struct _SVector rotationAccl; // size=8, offset=396\n  short maxVel; // size=0, offset=404\n  short maxRot; // size=0, offset=406\n  struct _Position targetPos; // size=6, offset=408\n  short targetTilt; // size=0, offset=414\n  struct _Rotation targetRotation; // size=8, offset=416\n  short targetFocusDistance; // size=0, offset=424\n  struct _Position targetFocusPoint; // size=6, offset=426\n  short collisionTargetFocusDistance; // size=0, offset=432\n  struct _Rotation targetFocusRotation; // size=8, offset=434\n  short tfaceTilt; // size=0, offset=442\n  struct _Rotation collisionTargetFocusRotation; // size=8, offset=444\n  short smooth; // size=0, offset=452\n  struct _CameraKey *cameraKey; // size=24, offset=456\n  struct _Sphere focusSphere; // size=12, offset=460\n  struct _Sphere smallBaseSphere; // size=12, offset=472\n  struct _Sphere posSphere; // size=12, offset=484\n  short lookTimer; // size=0, offset=496\n  short lookSavedMode; // size=0, offset=498\n  short presetIndex; // size=0, offset=500\n  short presetFocusDistance[3]; // size=6, offset=502\n  long minFocusDistance; // size=0, offset=508\n  long maxFocusDistance; // size=0, offset=512\n  long minTilt; // size=0, offset=516\n  long maxTilt; // size=0, offset=520\n  long pad[3]; // size=12, offset=524\n  long minXYDist; // size=0, offset=536\n  long maxXYDist; // size=0, offset=540\n  long oppositeError; // size=0, offset=544\n  long tempsplinePointAhead; // size=0, offset=548\n  long noTeleport; // size=0, offset=552\n  long focusDistanceList[3][3]; // size=36, offset=556\n  long tiltList[3][3]; // size=36, offset=592\n  long cineControl; // size=0, offset=628\n  short stack; // size=0, offset=632\n  short targetStack; // size=0, offset=634\n  long savedMode[3]; // size=12, offset=636\n  long savedTargetFocusDistance[3]; // size=12, offset=648\n  struct _Rotation savedFocusRotation; // size=8, offset=660\n  short savedFocusDistance; // size=0, offset=668\n  short signalFocusDistance; // size=0, offset=670\n  struct _SavedCinematic savedCinematic[3]; // size=336, offset=672\n  struct _Rotation savedfocusRotation; // size=8, offset=1008\n  struct _Position signalPos; // size=6, offset=1016\n  short pad11; // size=0, offset=1022\n  struct _Rotation signalRot; // size=8, offset=1024\n  short forced_movement; // size=0, offset=1032\n  short last_forced_movement; // size=0, offset=1034\n  short rotDirection; // size=0, offset=1036\n  unsigned long lastModTime; // size=0, offset=1040\n  struct _Rotation lookRot; // size=8, offset=1044\n  struct MultiSpline *Spline00; // size=0, offset=1052\n  struct MultiSpline *Spline01; // size=0, offset=1056\n  struct {\n    struct {\n      struct MultiSpline *posSpline; // size=0, offset=0\n      struct MultiSpline *targetSpline; // size=0, offset=4\n      struct _SVector lastSplinePos; // size=8, offset=8\n      short splinePointAhead; // size=0, offset=16\n      short cinema_done; // size=0, offset=18\n      int splinecam_currkey; // size=0, offset=20\n      int splinecam_helpkey; // size=0, offset=24\n    } Cinematic; // size=28, offset=0\n    struct {\n      struct _Position offset; // size=6, offset=0\n      struct _Rotation rotation; // size=8, offset=6\n      long focusDistance; // size=0, offset=16\n    } Idle; // size=20, offset=28\n    struct {\n      struct _TFace *tface; // size=12, offset=0\n      struct _TFace *oldTFace; // size=12, offset=4\n      struct _SVector oldTargetRot; // size=8, offset=8\n      long timer; // size=0, offset=16\n      struct _SVector oldFocusInstancePos; // size=8, offset=20\n    } Behind; // size=28, offset=48\n    struct {\n      long stopTimer; // size=0, offset=0\n      long stopHit; // size=0, offset=4\n      struct _TFace *tface; // size=12, offset=8\n      struct _TFace *oldTFace; // size=12, offset=12\n      long hit; // size=0, offset=16\n    } Follow; // size=20, offset=76\n  } data; // size=96, offset=1060\n  long cuckooTimer; // size=0, offset=1156\n  short teleportZRot; // size=0, offset=1160\n  short extraZRot; // size=0, offset=1162\n  short extraXRot; // size=0, offset=1164\n  short leftTimer; // size=0, offset=1166\n  short rightTimer; // size=0, offset=1168\n  short collideRotControl; // size=0, offset=1170\n  short collision_lastPush; // size=0, offset=1172\n  short collision_timer; // size=0, offset=1174\n  unsigned long prev_instance_mode; // size=0, offset=1176\n  unsigned long instance_mode; // size=0, offset=1180\n  long instance_xyvel; // size=0, offset=1184\n  long instance_prev_xyvel; // size=0, offset=1188\n  struct _Position real_focuspoint; // size=6, offset=1192\n  short always_rotate_flag; // size=0, offset=1198\n  short follow_flag; // size=0, offset=1200\n  short actual_x_rot; // size=0, offset=1202\n  short actual_vel_x; // size=0, offset=1204\n  short actual_acc_x; // size=0, offset=1206\n  short x_rot_change; // size=0, offset=1208\n  short focuspoint_fallz; // size=0, offset=1210\n  short lead_angle; // size=0, offset=1212\n  short lead_vel; // size=0, offset=1214\n  short lead_accl; // size=0, offset=1216\n  short lead_timer; // size=0, offset=1218\n};\n\nstruct __AttackItem {\n  unsigned char anim; // size=0, offset=0\n  unsigned char framesIn; // size=0, offset=1\n  unsigned char alphaIn; // size=0, offset=2\n  unsigned char framesOut; // size=0, offset=3\n  unsigned char switchDelay; // size=0, offset=4\n  unsigned char ignoreDelay; // size=0, offset=5\n  unsigned char segmentToGlow; // size=0, offset=6\n  unsigned char startCollisionFrame; // size=0, offset=7\n  unsigned char handsToCollide; // size=0, offset=8\n  unsigned char endCollisionFrame; // size=0, offset=9\n  unsigned char ribbonStartFrame; // size=0, offset=10\n  unsigned char ribbonStartSegment; // size=0, offset=11\n  unsigned char ribbonEndSegment; // size=0, offset=12\n  unsigned char ribbonLifeTime; // size=0, offset=13\n  unsigned char ribbonFaceLifeTime; // size=0, offset=14\n  unsigned char knockBackFrames; // size=0, offset=15\n  unsigned char glowFadeInFrames; // size=0, offset=16\n  unsigned char glowFadeOutFrames; // size=0, offset=17\n  unsigned short ribbonStartOpacity; // size=0, offset=18\n  unsigned long ribbonStartColor; // size=0, offset=20\n  unsigned long ribbonEndColor; // size=0, offset=24\n  unsigned long glowColor; // size=0, offset=28\n  unsigned short knockBackDistance; // size=0, offset=32\n  unsigned short hitPowerScale; // size=0, offset=34\n};\n\nstruct __EngagedInstance {\n  struct _Instance *instance; // size=668, offset=0\n  unsigned long distance; // size=0, offset=4\n};\n\nstruct __SensoryData {\n  int Flags; // size=0, offset=0\n  struct _SVector ForwardNormal; // size=8, offset=4\n  struct _SVector AboveNormal; // size=8, offset=12\n  struct _SVector BelowNormal; // size=8, offset=20\n  struct _SVector BelowPoint; // size=8, offset=28\n  struct _SVector Delta; // size=8, offset=36\n  struct _Instance *HitMonster; // size=668, offset=44\n  struct _Instance *CurrentAutoFace; // size=668, offset=48\n  struct _Instance *LastAutoFace; // size=668, offset=52\n  struct _Instance *Portal; // size=668, offset=56\n  struct __EngagedInstance *EngagedList; // size=8, offset=60\n  unsigned long EngagedMask; // size=0, offset=64\n  struct _Vector lookAtPoint; // size=12, offset=68\n  unsigned long heldClass; // size=0, offset=80\n};\n\nstruct __State {\n  void *Process; // size=0, offset=0\n  struct __MessageQueue Event; // size=136, offset=4\n  struct __MessageQueue Defer; // size=136, offset=140\n  int Data1; // size=0, offset=276\n  int Data2; // size=0, offset=280\n};\n\nstruct __CharacterState {\n  struct _Instance *CharacterInstance; // size=668, offset=0\n  int TotalSections; // size=0, offset=4\n  struct __State SectionList[3]; // size=852, offset=8\n};\n\nstruct __Player {\n  int footPrint; // size=0, offset=0\n  struct __CharacterState State; // size=860, offset=4\n  int Mode; // size=0, offset=864\n  int Anim; // size=0, offset=868\n  int RotationSegment; // size=0, offset=872\n  struct _SVector iVelocity; // size=8, offset=876\n  int Magnitude; // size=0, offset=884\n  int input; // size=0, offset=888\n  int lastInput; // size=0, offset=892\n  int ZDirection; // size=0, offset=896\n  short Bearing; // size=0, offset=900\n  short LastBearing; // size=0, offset=902\n  int steeringMode; // size=0, offset=904\n  short steeringVelocity; // size=0, offset=908\n  short steeringAcceleration; // size=0, offset=910\n  int steeringLockRotation; // size=0, offset=912\n  short movementMinRate; // size=0, offset=916\n  short movementMaxRate; // size=0, offset=918\n  short movementMinAnalog; // size=0, offset=920\n  short movementMaxAnalog; // size=0, offset=922\n  struct __SensoryData Senses; // size=84, offset=924\n  struct _Instance *attachedPlatform; // size=668, offset=1008\n  short dropOffHeight; // size=0, offset=1012\n  short fallZVelocity; // size=0, offset=1014\n  short HealthScale; // size=0, offset=1016\n  short HealthBalls; // size=0, offset=1018\n  int HitPoints; // size=0, offset=1020\n  int DamageFrequency; // size=0, offset=1024\n  int invincibleTimer; // size=0, offset=1028\n  int Abilities; // size=0, offset=1032\n  struct _Instance *GlyphSystem; // size=668, offset=1036\n  unsigned short GlyphManaBalls; // size=0, offset=1040\n  unsigned short GlyphManaMax; // size=0, offset=1042\n  struct __FitPoint *constrictData; // size=4, offset=1044\n  short constrictIndex; // size=0, offset=1048\n  short constrictWaitIndex; // size=0, offset=1050\n  struct _SVector constrictCenter; // size=8, offset=1052\n  short constrictFlag; // size=0, offset=1060\n  short constrictGoodCircle; // size=0, offset=1062\n  unsigned long constrictXTotal; // size=0, offset=1064\n  unsigned long constrictYTotal; // size=0, offset=1068\n  struct _Instance *soulReaver; // size=668, offset=1072\n  unsigned long currentSoulReaver; // size=0, offset=1076\n  int CurrentPlane; // size=0, offset=1080\n  int slipSlope; // size=0, offset=1084\n  unsigned long idleCount; // size=0, offset=1088\n  struct _Instance *idleInstance; // size=668, offset=1092\n  struct __AttackItem *attack; // size=36, offset=1096\n  int attackFlags; // size=0, offset=1100\n  int currentAttack; // size=0, offset=1104\n  struct _Instance *attackCurrentHit; // size=668, offset=1108\n  struct _Instance *attackLastHit; // size=668, offset=1112\n  struct _FXGlowEffect *glowEffect; // size=44, offset=1116\n  struct _Instance *attackedBy; // size=668, offset=1120\n  struct __ThrowItem *throwData; // size=32, offset=1124\n  int throwMode; // size=0, offset=1128\n  struct _Position throwTarget; // size=6, offset=1132\n  struct _Instance *throwInstance; // size=668, offset=1140\n  short throwXRot; // size=0, offset=1144\n  short throwZRot; // size=0, offset=1146\n  int throwReturnRot; // size=0, offset=1148\n  struct __MessageQueue padCommands; // size=136, offset=1152\n  void *returnState; // size=0, offset=1288\n  unsigned long passedMask; // size=0, offset=1292\n  struct _G2SVector3_Type extraRot; // size=6, offset=1296\n  long blankPad; // size=0, offset=1304\n  int effectsFlags; // size=0, offset=1308\n  short effectsFadeSource; // size=0, offset=1312\n  short effectsFadeDest; // size=0, offset=1314\n  int effectsFadeStep; // size=0, offset=1316\n  int effectsFadeSteps; // size=0, offset=1320\n  short autoFaceZone; // size=0, offset=1324\n  short autoFaceAngle; // size=0, offset=1326\n  int autoFaceLastRootAngle; // size=0, offset=1328\n  int autoFaceRootAngle; // size=0, offset=1332\n  int autoFaceTrueAngle; // size=0, offset=1336\n  int autoFaceAnim; // size=0, offset=1340\n  int autoFaceLastAnim; // size=0, offset=1344\n  int nothingCounter; // size=0, offset=1348\n  int timeAccumulator; // size=0, offset=1352\n  struct _Position puppetMoveToPoint; // size=6, offset=1356\n  struct _Position puppetRotToPoint; // size=6, offset=1362\n  int soundModifier; // size=0, offset=1368\n  short alarmTable; // size=0, offset=1372\n  short terminator; // size=0, offset=1374\n  short swimSpeedAdjustment; // size=0, offset=1376\n  short swimTargetSpeed; // size=0, offset=1378\n  unsigned long soundHandle; // size=0, offset=1380\n  long soundTimer; // size=0, offset=1384\n  long soundTotalTime; // size=0, offset=1388\n  unsigned long soundDistance; // size=0, offset=1392\n  short soundStartPitch; // size=0, offset=1396\n  short soundEndPitch; // size=0, offset=1398\n  short soundStartVolume; // size=0, offset=1400\n  short soundEndVolume; // size=0, offset=1402\n  unsigned long soundHandle2; // size=0, offset=1404\n  long soundTimer2; // size=0, offset=1408\n  long soundTotalTime2; // size=0, offset=1412\n  unsigned long soundDistance2; // size=0, offset=1416\n  short soundStartPitch2; // size=0, offset=1420\n  short soundEndPitch2; // size=0, offset=1422\n  short soundStartVolume2; // size=0, offset=1424\n  short soundEndVolume2; // size=0, offset=1426\n  long soundTimerNext; // size=0, offset=1428\n  unsigned long soundTimerData; // size=0, offset=1432\n  unsigned long forcedGlideSpeed; // size=0, offset=1436\n  struct _SVector collisionEdgeOffset; // size=8, offset=1440\n  struct __SAnim *currentSAnim; // size=16, offset=1448\n  unsigned long playerEvent; // size=0, offset=1452\n  unsigned long playerEventHistory; // size=0, offset=1456\n  int currentHint; // size=0, offset=1460\n};\n\nstruct _GameTrackerASMData_Type {\n  long drawBackFaces; // size=0, offset=0\n  long dispPage; // size=0, offset=4\n  short MorphTime; // size=0, offset=8\n  short MorphType; // size=0, offset=10\n  struct LightInstance* lightInstances; // size=20, offset=12\n};\nstruct _GameData_Type {\n  struct _GameTrackerASMData_Type asmData; // size=32, offset=0\n};\n\nstruct GameTracker {\n  struct _GameData_Type gameData; // size=32, offset=0\n  struct menu_t *menu; // size=0, offset=32\n  struct memcard_t *memcard; // size=0, offset=36\n  struct Level *level; // size=392, offset=40\n  struct _Instance *playerInstance; // size=668, offset=44\n  long drawPage; // size=0, offset=48\n  struct _InstanceList *instanceList; // size=268, offset=52\n  struct _InstancePool *instancePool; // size=40092, offset=56\n  struct _VertexPool *vertexPool; // size=6336, offset=60\n  struct _PrimPool *primPool; // size=96012, offset=64\n  struct _ObjectTracker *GlobalObjects; // size=36, offset=68\n  long controlCommand[2][5]; // size=40, offset=72\n  long controlData[2][5]; // size=40, offset=112\n  long overrideData[2][5]; // size=40, offset=152\n  long debugFlags; // size=0, offset=192\n  long debugFlags2; // size=0, offset=196\n  struct CVECTOR wipeColor; // size=4, offset=200\n  short wipeTime; // size=0, offset=204\n  short maxWipeTime; // size=0, offset=206\n  short wipeType; // size=0, offset=208\n  short numGSignals; // size=0, offset=210\n  void *gSignal[16]; // size=64, offset=212\n  struct LightInfo *lightInfo; // size=1148, offset=276\n  void *reqDisp; // size=0, offset=280\n  long *drawTimerReturn; // size=0, offset=284\n  long usecsStartDraw; // size=0, offset=288\n  void *disp; // size=0, offset=292\n  unsigned long displayFrameCount; // size=0, offset=296\n  unsigned long frameCount; // size=0, offset=300\n  unsigned long fps30Count; // size=0, offset=304\n  unsigned long vblFrames; // size=0, offset=308\n  unsigned long vblCount; // size=0, offset=312\n  long numMatrices; // size=0, offset=316\n  long gameFlags; // size=0, offset=320\n  long streamFlags; // size=0, offset=324\n  void *drawNonAnimatedSegmentFunc; // size=0, offset=328\n  void *drawAnimatedModelFunc; // size=0, offset=332\n  void *drawDisplayPolytopeListFunc; // size=0, offset=336\n  void *drawBgFunc; // size=0, offset=340\n  struct Level *mainDrawUnit; // size=392, offset=344\n  char baseAreaName[16]; // size=16, offset=348\n  short levelDone; // size=0, offset=364\n  short levelChange; // size=0, offset=366\n  short hideBG; // size=0, offset=368\n  short gameMode; // size=0, offset=370\n  long currentHotSpot; // size=0, offset=372\n  long StreamUnitID; // size=0, offset=376\n  short SwitchToNewStreamUnit; // size=0, offset=380\n  short SwitchToNewWarpIndex; // size=0, offset=382\n  char S_baseAreaName[16]; // size=16, offset=384\n  short toSignal; // size=0, offset=400\n  short fromSignal; // size=0, offset=402\n  char LastSignal; // size=0, offset=404\n  short StreamNormalA; // size=0, offset=406\n  short StreamNormalB; // size=0, offset=408\n  short StreamNormalC; // size=0, offset=410\n  long StreamNormalD; // size=0, offset=412\n  long moveRazielToStreamID; // size=0, offset=416\n  struct _ColorType animObjLine; // size=4, offset=420\n  struct _ColorType animObjShade; // size=4, offset=424\n  long maxIntroFXTime; // size=0, offset=428\n  struct gSoundData sound; // size=20, offset=432\n  short controllerMode; // size=0, offset=452\n  unsigned char plan_collide_override; // size=0, offset=454\n  unsigned char cheatMode; // size=0, offset=455\n  char currentLvl; // size=0, offset=456\n  char lastLvl; // size=0, offset=457\n  struct Object *introFX; // size=76, offset=460\n  struct Intro *introFXIntro; // size=76, offset=464\n  unsigned long **drawOT; // size=0, offset=468\n  unsigned long **dispOT; // size=0, offset=472\n  struct P_TAG *savedOTStart; // size=8, offset=476\n  struct P_TAG *savedOTEnd; // size=8, offset=480\n  long introWaitTime; // size=0, offset=484\n  long mirrorZPush; // size=0, offset=488\n  long defVVRemoveDist; // size=0, offset=492\n  long defRemoveDist; // size=0, offset=496\n  struct _Position forcedStartPosition; // size=6, offset=500\n  short hudCollDisplay; // size=0, offset=506\n  long primMemUsed; // size=0, offset=508\n  long cheatTimerCount; // size=0, offset=512\n  long playerCheatFlags; // size=0, offset=516\n  long savedPlayerCameraMode; // size=0, offset=520\n  long debugDrawFlags; // size=0, offset=524\n  void *planningPool; // size=0, offset=528\n  void *enemyPlanPool; // size=0, offset=532\n  unsigned char block_collide_override; // size=0, offset=536\n  unsigned char raziel_collide_override; // size=0, offset=537\n  short timeOfDay; // size=0, offset=538\n  long decoupleGame; // size=0, offset=540\n  long multGameTime; // size=0, offset=544\n  short spectral_fadeValue; // size=0, offset=548\n  short material_fadeValue; // size=0, offset=550\n  unsigned long drawTime; // size=0, offset=552\n  unsigned long currentTime; // size=0, offset=556\n  unsigned long currentMaterialTime; // size=0, offset=560\n  unsigned long currentSpectralTime; // size=0, offset=564\n  unsigned long currentTimeOfDayTime; // size=0, offset=568\n  unsigned long lastLoopTime; // size=0, offset=572\n  unsigned long timeMult; // size=0, offset=576\n  unsigned long globalTimeMult; // size=0, offset=580\n  unsigned long spectralTimeMult; // size=0, offset=584\n  unsigned long materialTimeMult; // size=0, offset=588\n  unsigned long currentTicks; // size=0, offset=592\n  unsigned long totalTime; // size=0, offset=596\n  unsigned long idleTime; // size=0, offset=600\n  long visibleInstances; // size=0, offset=604\n  int gameFramePassed; // size=0, offset=608\n  unsigned long timeSinceLastGameFrame; // size=0, offset=612\n  long frameRateLock; // size=0, offset=616\n  short frameRate24fps; // size=0, offset=620\n  char monster_collide_override; // size=0, offset=622\n  char pad; // size=0, offset=623\n};\n\nstruct _G2Quat_Type {\n  short x; // size=0, offset=0\n  short y; // size=0, offset=2\n  short z; // size=0, offset=4\n  short w; // size=0, offset=6\n};\n\nstruct _G2AnimSegValue_Type {\n  union {\n    struct _G2SVector3_Type rot; // size=6, offset=0\n    struct _G2Quat_Type quat; // size=8, offset=0\n  } rotQuat; // size=8, offset=0\n  struct _G2SVector3_Type scale; // size=6, offset=8\n  unsigned short pad; // size=0, offset=14\n  struct _G2SVector3_Type trans; // size=6, offset=16\n  unsigned short bIsQuat; // size=0, offset=22\n};\n\nstruct _G2AnimAlphaTable_Type {\n  unsigned short size; // size=0, offset=0\n  long data[0]; // size=0, offset=4\n};\n\nstruct _G2AnimQuatInfo_Type {\n  struct _G2Quat_Type srcQuat; // size=8, offset=0\n  struct _G2Quat_Type destQuat; // size=8, offset=8\n  struct _G2SVector3_Type srcScale; // size=6, offset=16\n  struct _G2SVector3_Type destScale; // size=6, offset=22\n  struct _G2SVector3_Type srcTrans; // size=6, offset=28\n  struct _G2SVector3_Type destTrans; // size=6, offset=34\n};\n\nstruct _G2AnimInterpStateBlock_Type {\n  struct _G2AnimInterpStateBlock_Type *next; // size=164, offset=0\n  struct _G2AnimQuatInfo_Type quatInfo[4]; // size=160, offset=4\n};\n\n\nstruct _G2EulerAngles_Type {\n  short x; // size=0, offset=0\n  short y; // size=0, offset=2\n  short z; // size=0, offset=4\n  short order; // size=0, offset=6\n};\n\nstruct _G2AnimInterpStateBlockPool_Type {\n  unsigned short blockSize; // size=0, offset=0\n  unsigned short stackTop; // size=0, offset=2\n  unsigned short stackSize; // size=0, offset=4\n  unsigned short *stack; // size=0, offset=8\n  struct _G2AnimInterpStateBlock_Type *blockPool; // size=164, offset=12\n};\n\nstruct _G2PoolMemPool_Type {\n  unsigned short blockSize; // size=0, offset=0\n  unsigned short stackTop; // size=0, offset=2\n  unsigned short stackSize; // size=0, offset=4\n  unsigned short *stack; // size=0, offset=8\n  struct _G2PoolMem_Type *blockPool; // size=0, offset=12\n};\n\nstruct _G2AnimDecompressChannelInfo_Type {\n  struct _G2AnimKeylist_Type *keylist; // size=20, offset=0\n  unsigned short *chanData; // size=0, offset=4\n  int storedKey; // size=0, offset=8\n  int targetKey; // size=0, offset=12\n};\n\nstruct _G2AnimSegKeyflagInfo_Type {\n  unsigned long *stream; // size=0, offset=0\n  unsigned long flags; // size=0, offset=4\n  int bitCount; // size=0, offset=8\n};\n\nstruct _G2AnimChanStatusBlockPool_Type {\n  unsigned short blockSize; // size=0, offset=0\n  unsigned short stackTop; // size=0, offset=2\n  unsigned short stackSize; // size=0, offset=4\n  unsigned short *stack; // size=0, offset=8\n  struct _G2AnimChanStatusBlock_Type *blockPool; // size=36, offset=12\n};\n\nstruct _G2AnimInterpInfo_Type {\n  short duration; // size=0, offset=0\n  short targetTime; // size=0, offset=2\n  struct _G2AnimAlphaTable_Type *alphaTable; // size=4, offset=4\n  struct _G2AnimInterpStateBlock_Type *stateBlockList; // size=164, offset=8\n};\n\nstruct __Player Raziel __attribute__((section(\".sbss\")));\nint LoopCounter __attribute__((section(\".sbss\"))); \nlong* PadData __attribute__((section(\".sbss\")));\nstruct GameTracker* gameTracker __attribute__((section(\".sbss\")));\nstruct GameTracker gameTrackerX __attribute__((section(\".sbss\")));\nlong ControlFlag __attribute__((section(\".sbss\")));\nint PhysicsMode __attribute__((section(\".sbss\")));\nint AutoFaceAngle __attribute__((section(\".sbss\")));\nlong RazielCommands[10] __attribute__((section(\".sbss\")));\nstruct STracker StreamTracker __attribute__((section(\".sbss\")));\nstatic int LastBlock __attribute__((section(\".sbss\"))); // offset 0x800D1DB4\nint LoopCounter __attribute__((section(\".sbss\"))); // offset 0x800D1C30\nstatic int BlockCount __attribute__((section(\".sbss\"))); // offset 0x800D1DB0\nstruct _G2SVector3_Type* ExtraRot __attribute__((section(\".sbss\"))); \nstruct Camera theCamera __attribute__((section(\".sbss\")));\nstruct _G2AnimSegValue_Type _segValues[80];\n\n#define NULL 0\nlong gameTimer;", "diff_flags": [], "diff_label": "DefaultStateHandler", "libraries": []}