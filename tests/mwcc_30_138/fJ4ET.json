{"compiler": "mwcc_30_138", "compiler_flags": "-DSDK_ARM7 -DSDK_TWL -DSDK_THREAD_INFINITY -DSDK_TWLLTD -O4,s -enum int -lang c99 -Cpp_exceptions off -gccext,on -proc arm7tdmi -msgstyle gcc -gccinc -i ./include -i ./include/library -I./lib/TwlSDK/include -Cpp_exceptions off -interworking -enum int -inline deferred -char signed -g -ipa off", "source_code": "/* No decompiler yet implemented for arm32 */\nvoid    OS_FPrintf(int console, const char *fmt, ...);\ntypedef unsigned int u32;\n#define NULL (0)\n//--------------------------------------------------------------------------------\n//---- Exception Handler\ntypedef void (*OSExceptionHandler) (u32, void *);\n#define OS_PRINT_OUTPUT_ERROR 0xfd\n#define OSi_ExPrintf( ... )    OS_FPrintf(OS_PRINT_OUTPUT_ERROR, __VA_ARGS__)\n\n//---- Context for exception display\ntypedef struct OSContext\n{\n    u32 cpsr; /* 0x0 */\n    u32 r[13]; /* 0x4 */\n    u32 sp; /* 0x38 */\n    u32 lr; /* 0x3c */\n    u32 pc_plus4; /* 0x40 */\n    u32 sp_svc; /* 0x44 */\n} OSContext;\ntypedef struct\n{\n    OSContext   context;\n    u32         cp15;\n    u32         spsr;\n    u32         exinfo;\n#ifdef OSiDEBUG\n    u32         debug[4];\n#endif\n} OSiExContext;\n\n//---- context for exception display\ntypedef struct\n{\n    OSContext   context;\n    u32         cp15;\n    u32         spsr;\n    u32         exinfo;\n} OSExcpContext;\n\nstatic OSiExContext OSi_ExContext;\n\n//---- User's exception handler\nstatic OSExceptionHandler OSi_UserExceptionHandler;\nstatic void *OSi_UserExceptionHandlerArg;\n\n//---- Debugger's exception handler\nstatic void *OSi_DebuggerHandler = NULL;\n\n#undef SDK_FINALROM\n#undef SDK_ARM9\n\nvoid OSi_DisplayExContext(void) {\n    #ifndef SDK_FINALROM\n    int     i;\n\n    OSi_ExPrintf(\"**** Exception Occurred ****\\n\");\n\n    //---------------- Displaying registers\n    //---- For R0-15 Registers\n    for (i = 0; i < 13; i++)\n    {\n        OSi_ExPrintf(\"R%02d=%08X  %c\", i, OSi_ExContext.context.r[i], ((i & 3) == 3) ? '\\n' : ' ');\n    }\n    OSi_ExPrintf(\"SP =%08X   \", OSi_ExContext.context.sp);\n    OSi_ExPrintf(\"LR =%08X   \", OSi_ExContext.context.lr);\n    OSi_ExPrintf(\"PC =%08X\\n\", OSi_ExContext.context.pc_plus4);\n\n    //---- For status Registers\n#ifdef SDK_ARM9\n    OSi_ExPrintf(\"  CPSR=%08X  SPSR=%08X  CP15=%08X\\n\",\n                 OSi_ExContext.context.cpsr, OSi_ExContext.spsr, OSi_ExContext.cp15);\n#else\n    OSi_ExPrintf(\"  CPSR=%08X  SPSR=%08X\\n\", OSi_ExContext.context.cpsr, OSi_ExContext.spsr);\n#endif\n\n#ifdef OSiDEBUG\n    //---- (For debug)\n    for (i = 0; i < 4; i++)\n    {\n        OSi_ExPrintf(\"DEBUG%02d=%08X  \", i, OSi_ExContext.debug[i]);\n    }\n#endif\n    OSi_ExPrintf(\"\\n\\n\");\n#endif\n\n    //---------------- User's callback\n    if (OSi_UserExceptionHandler)\n    {\n        //---- Force to become SYS mode,\n        //     but use current stack not SYS mode stack\n        asm\n        {\n          /* *INDENT-OFF* */\n\n          //---- Save cpsr and sp\n          mrs      r2, CPSR\n          mov      r0, sp\n          ldr      r1, =0x9f\n          msr      CPSR_cxsf, r1\n          mov      r1, sp\n          mov      sp, r0\n          stmfd    sp!, {r1,r2}\n#ifdef SDK_ARM9\n          bl       OS_EnableProtectionUnit\n#endif\n          //---- Context\n          ldr      r0, =OSi_ExContext\n\n          //---- Arg\n          ldr      r1, =OSi_UserExceptionHandlerArg\n          ldr      r1, [r1]\n\n          //---- User handler\n          ldr      r12, =OSi_UserExceptionHandler\n          ldr      r12, [r12]\n          ldr      lr, =@1\n          bx       r12\n@1:\n#ifdef SDK_ARM9\n          bl       OS_DisableProtectionUnit\n#endif\n\n          //---- Restore cpsr and sp\n          ldmfd    sp!, {r1,r2}\n          mov      sp, r1\n          msr      CPSR_cxsf, r2\n          /* *INDENT-ON* */\n        }\n    }\n\n}\n", "context": "", "diff_flags": [], "diff_label": "OSi_DisplayExContext", "libraries": []}