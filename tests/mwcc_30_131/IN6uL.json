{"compiler": "mwcc_30_131", "compiler_flags": "-lang=c++ -g -O3,p -ipa file -interworking -enum int -char signed", "source_code": "/* No decompiler yet implemented for arm32 */\n#pragma thumb on\nvoid Inventory::Load(const SaveInventory *save) {\n    this->mItemFlags = save->itemFlags;\n    this->mNumRupees = save->numRupees;\n    this->mHourglassSandFrames = save->hourglassSeconds <= MAX_HOURGLASS_SECONDS\n        ? save->hourglassSeconds * 60\n        : MAX_HOURGLASS_SECONDS * 60;\n    for (s32 i = ItemFlag_EQUIP_START; i < ItemFlag_EQUIP_END; ++i) {\n        if (GET_FLAG(this->mItemFlags.flags, (u32) i)) {\n            (*this->mAmmo)[i] = 1;\n        }\n    }\n    (*this->mAmmo)[ItemFlag_BombBag] = save->numBombs;\n    (*this->mAmmo)[ItemFlag_BombchuBag] = save->numBombchus;\n    (*this->mAmmo)[ItemFlag_Bow] = save->numArrows;\n    for (s32 i = 0; i < NUM_POTIONS; ++i) {\n        this->mPotions[i] = save->potions[i];\n    }\n    ItemFlag equippedItem = save->equippedItem;\n    this->mEquippedItem = equippedItem;\n    this->mSalvagedTreasureFlags = save->salvagedTreasureFlags;\n    for (s32 i = 0; i < Gem_COUNT; ++i) {\n        this->mNumGems[i] = save->numGems[i];\n    }\n    for (s32 i = 0; i < ShipPart_COUNT; ++i) {\n        this->mEquippedShipParts[i] = save->equippedShipParts[i];\n        for (s32 j = 0; j < ShipType_COUNT; ++j) {\n            this->mShipParts[i].parts[j] = save->shipParts[i].parts[j];\n        }\n    }\n    this->mShipPartPricesShown = save->shipPartPricesShown;\n    for (s32 i = 0; i < Treasure_COUNT; ++i) {\n        this->mTreasure[i] = save->treasure[i];\n    }\n    this->mTreasurePriceShownFlags[0] = save->treasurePriceShownFlags[0];\n    for (s32 i = 0; i < 6; ++i) {\n        this->mUnk_098[i] = save->unk_9f[i];\n        this->mUnk_09e[i] = save->unk_82[i];\n    }\n    this->mQuiverSize = save->quiverSize;\n    this->mBombBagSize = save->bombBagSize;\n    this->mBombchuBagSize = save->bombchuBagSize;\n    this->mEquippedFairy = save->equippedFairy;\n    if (this->mEquippedFairy >= FairyId_COUNT) {\n        this->mEquippedFairy = FairyId_None;\n    }\n    if (this->mEquippedItem - 9 <= 1) {\n        if (this->HasItem(ItemFlag_Boomerang)) {\n            this->mEquippedItem = ItemFlag_Boomerang;\n        } else {\n            this->mEquippedItem = ItemFlag_None;\n        }\n    } else if (this->mEquippedItem == ItemFlag_None) {\n        if (this->HasItem(ItemFlag_Boomerang)) {\n            this->mEquippedItem = ItemFlag_Boomerang;\n        }\n    }\n}\n", "context": "typedef unsigned int u32;\ntypedef unsigned short u16;\ntypedef unsigned char u8;\ntypedef int s32;\ntypedef short s16;\ntypedef char s8;\ntypedef u8 unk8;\ntypedef u16 unk16;\ntypedef u32 unk32;\n\n#define MAX_HOURGLASS_SECONDS 1500\n\n#define GET_FLAG(arr, pos) (((1 << ((pos) & 0x1f)) & (arr)[pos >> 5]) != 0)\n\n#define NUM_POTIONS 2\n\nclass SysObject {\npublic:\n    static void* operator new(unsigned long length, u32 *id, u32 idLength);\n    static void operator delete(void *ptr);\n};\n       \nclass EquipItem {\nprivate:\n            u16 mUnk_00;\n            u16 mUnk_04;\n            bool mInUse;\npublic:\n    EquipItem();\n             virtual void vfunc_00(u32 param1, u32 param2, u32 param3);\n             virtual EquipItem* vfunc_04();\n             virtual ~EquipItem();\n             virtual u32 GetId() const = 0;\n             virtual void vfunc_10();\n    u16 GetAmmo();\n             virtual bool IsUsable(u32 param1, u32 param2) const;\n             virtual void vfunc_18() = 0;\n             virtual void vfunc_1c();\n             virtual void GiveAmmo(u32 amount);\n             virtual bool IsInUse() const;\n             virtual bool UpdateInUse(u32 param1);\n             virtual u32 vfunc_2c();\n             virtual void vfunc_30() = 0;\n             virtual void vfunc_34(u16 *param1);\n             virtual void vfunc_38(u32 param1, u32 param2, u32 param3) = 0;\n             virtual void vfunc_3c(void *param1) const;\n             virtual u32 vfunc_40() const;\n             virtual u32 vfunc_44(u32 param1) const;\n             virtual u32 vfunc_48(u32 param1) const;\n             virtual u32 vfunc_4c() const;\n};\n       \nclass Navi;\ntypedef s32 FairyId;\nenum FairyId_ {\n    FairyId_None = -1,\n    FairyId_Courage = 0,\n    FairyId_Power = 1,\n    FairyId_Wisdom = 2,\n    FairyId_COUNT,\n};\nenum Gem {\n    Gem_Courage,\n    Gem_Power,\n    Gem_Wisdom,\n    Gem_COUNT,\n};\ntypedef u32 ShipPart;\nenum ShipPart_ {\n    ShipPart_Anchor,\n    ShipPart_Prow,\n    ShipPart_Hull,\n    ShipPart_Cannon,\n    ShipPart_Handrail,\n    ShipPart_Wheel,\n    ShipPart_Chimney,\n    ShipPart_Bridge,\n    ShipPart_COUNT,\n};\ntypedef u32 ShipType;\nenum ShipType_ {\n    ShipType_Linebeck,\n    ShipType_Bright,\n    ShipType_Iron,\n    ShipType_Stone,\n    ShipType_Vintage,\n    ShipType_Demon,\n    ShipType_Tropical,\n    ShipType_Dignified,\n    ShipType_Golden,\n    ShipType_COUNT,\n};\ntypedef u32 ShipItem;\ntypedef u32 Treasure;\nenum Treasure_ {\n    Treasure_PinkCoral,\n    Treasure_WhitePearlLoop,\n    Treasure_DarkPearlLoop,\n    Treasure_ZoraScale,\n    Treasure_GoronAmber,\n    Treasure_RutoCrown,\n    Treasure_HelmarocPlume,\n    Treasure_RegalRing,\n    Treasure_COUNT,\n};\ntypedef u8 Potion;\nenum Potion_ {\n    Potion_None,\n    Potion_Red,\n    Potion_Blue,\n    Potion_Yellow,\n    Potion_COUNT,\n};\ntypedef u32 ItemFlag;\nenum ItemFlag_ {\n    ItemFlag_None = -1,\n    ItemFlag_OshusSword = 0,\n    ItemFlag_WoodenShield = 1,\n    ItemFlag_Boomerang = 2,\n    ItemFlag_Shovel = 3,\n    ItemFlag_BombBag = 4,\n    ItemFlag_Bow = 5,\n    ItemFlag_GrapplingHook = 6,\n    ItemFlag_BombchuBag = 7,\n    ItemFlag_Hammer = 8,\n    ItemFlag_PotionA = 9,\n    ItemFlag_PotionB = 10,\n    ItemFlag_EQUIP_START = ItemFlag_OshusSword,\n    ItemFlag_EQUIP_END = ItemFlag_PotionB + 1,\n    ItemFlag_EQUIP_COUNT = ItemFlag_EQUIP_END - ItemFlag_EQUIP_START,\n    ItemFlag_SpiritOfCourage = 20,\n    ItemFlag_SpiritOfPower = 21,\n    ItemFlag_SpiritOfWisdom = 22,\n    ItemFlag_CourageLv1 = 23,\n    ItemFlag_PowerLv1 = 24,\n    ItemFlag_WisdomLv1 = 25,\n    ItemFlag_CourageLv2 = 26,\n    ItemFlag_PowerLv2 = 27,\n    ItemFlag_WisdomLv2 = 28,\n    ItemFlag_Hourglass = 32,\n    ItemFlag_SeaChartSW = 33,\n    ItemFlag_SeaChartNW = 34,\n    ItemFlag_SeaChartSE = 35,\n    ItemFlag_SeaChartNE = 36,\n    ItemFlag_PhantomSword = 37,\n    ItemFlag_SunKey = 38,\n    ItemFlag_KingsKey = 42,\n    ItemFlag_GhostKey = 43,\n    ItemFlag_SwordsmansScroll = 45,\n    ItemFlag_COUNT = 128,\n};\nstruct ItemFlags {\n             u32 flags[(((ItemFlag_COUNT) + (32) - 1) / (32))];\n};\nstruct ShipPartPricesShown {\n            u32 flags[((((ShipPart_COUNT * ShipType_COUNT)) + (32) - 1) / (32))];\n};\nstruct ShipParts {\n            u8 parts[ShipType_COUNT];\n};\nstruct SaveInventory {\n             ItemFlags itemFlags;\n             u32 salvagedTreasureFlags;\n             ShipPartPricesShown shipPartPricesShown;\n             u32 treasurePriceShownFlags[(((Treasure_COUNT) + (32) - 1) / (32))];\n             u8 equippedShipParts[ShipPart_COUNT];\n             ShipParts shipParts[ShipPart_COUNT];\n             s8 treasure[Treasure_COUNT];\n             unk8 unk_7c[4];\n             u16 hourglassSeconds;\n             unk16 unk_82[6];\n             u16 numRupees;\n             unk8 unk_90;\n             unk8 unk_91;\n             unk8 unk_92;\n             u8 numBombs;\n             u8 numBombchus;\n             u8 numArrows;\n             u8 equippedItem;\n             Potion potions[2];\n             u8 numGems[Gem_COUNT];\n             u8 quiverSize;\n             u8 bombBagSize;\n             u8 bombchuBagSize;\n             unk8 unk_9f[6];\n             u8 equippedFairy;\n};\nclass Inventory : public SysObject {\nprivate:\n              ItemFlag mEquippedItem;\n              ItemFlag mPrevEquippedItem;\n              ItemFlag mForcedItem;\n              u32 mHourglassSandFrames;\n              FairyId mEquippedFairy;\n              Navi *mNaviCourage;\n              Navi *mNaviPower;\n              Navi *mNaviWisdom;\n              u16 mEquipLoadTimer;\n              u16 mNumRupees;\n              u8 mNumGems[Gem_COUNT];\n              unk8 mUnk_027;\n              ShipType mEquippedShipParts[ShipPart_COUNT];\n              ShipParts mShipParts[ShipPart_COUNT];\n              s8 mTreasure[Treasure_COUNT];\n              u8 mUnk_098[6];\n              u16 mUnk_09e[6];\n              unk16 mUnk_0a6;\n              EquipItem *(*mEquipItems)[ItemFlag_EQUIP_COUNT];\n              u16 (*mAmmo)[ItemFlag_EQUIP_COUNT];\n              u16 mQuiverSize;\n              u16 mBombBagSize;\n              u16 mBombchuBagSize;\n              unk16 mUnk_0ba;\n              Potion mPotions[2];\n              unk8 mUnk_0be[2];\n              void *mIslandData[16];\n              void *mDungeonData[5];\n              void *mUnk_114;\n              unk32 mUnk_118;\n              unk32 mUnk_11c;\n              void *mUnk_120;\n              void *mUnk_124;\n              ItemFlags mItemFlags;\n              u32 mSalvagedTreasureFlags;\n              ShipPartPricesShown mShipPartPricesShown;\n              u32 mTreasurePriceShownFlags[(((Treasure_COUNT) + (32) - 1) / (32))];\n              unk8 mUnk_14c[0x4];\npublic:\n    static Inventory* Create();\n    static void Destroy();\n    Inventory();\n    ~Inventory();\n    void ClearPrevEquippedItem();\n    void Save(SaveInventory *save);\n    void Load(const SaveInventory *save);\n\n    bool HasItem(ItemFlag item);\n};\nextern Inventory *gInventory;", "diff_flags": [], "diff_label": "func_ov00_020ad244", "libraries": []}