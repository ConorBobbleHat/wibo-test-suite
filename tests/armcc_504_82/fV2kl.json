{"compiler": "armcc_504_82", "compiler_flags": "--arm --split_sections --debug --no_debug_macros --cpp --exceptions  --debug_info=line_inlining_extensions -O0 -Otime --data_reorder --signed_chars --dollar --multibyte_chars --remove_unneeded_entities --no_rtti --no_rtti_data --fpmode=fast", "source_code": "static bool g_RuntimeInitialized = false;\n\nnamespace Thread {\n    extern int mainThreadId;\n    int GetCurrentThreadID();\n}\n\nstruct RegisterRuntimeInitializeAndCleanup {\n    static void ExecuteInitializations();\n};\n\nstruct MemoryManager {\n    static void StaticInitialize();\n};\n\nstruct FileSystem {\n    void Start();\n};\n\nFileSystem& GetFileSystem();\nvoid ThreadAndSerializationSafeCheckInitFromMainThread();\n\nvoid RuntimeInitialize()\n{\n\n  if (g_RuntimeInitialized )\n  {\n      return;\n  }\n    \n    Thread::mainThreadId = Thread::GetCurrentThreadID();\n    ThreadAndSerializationSafeCheckInitFromMainThread();\n    g_RuntimeInitialized = true;\n    MemoryManager::StaticInitialize();\n    GetFileSystem().Start();\n    RegisterRuntimeInitializeAndCleanup::ExecuteInitializations();\n}", "context": "/*\n   This file has been generated by IDA.\n   It contains local type definitions from\n   the type library 'N3DSPlayer_debug.axf'\n*/\n\n#define __int8 char\n#define __int16 short\n#define __int32 int\n#define __int64 long long\n#include <stdint.h>\n#include <stddef.h>\ntypedef uint32_t u32;\ntypedef uint64_t u64;\ntypedef int64_t s64;\ntypedef int32_t s32;\n\nstruct CacheReaderBase;\nstruct ResourceImage;\n\n/* 3461 */\ntypedef unsigned __int8 UInt8;\n\n/* 3498 */\ntypedef int SInt32;\n\n\n/* 5703 */\nstruct ResourceImageGroup\n{\n  ResourceImage *resourceImages[3];\n};\n\n/* 5702 */\nstruct CacheReaderBase\n{\n\n};\n\n\n/* 3477 */\ntypedef unsigned int UInt32;\n\n/* 5704 */\nstruct ResourceImage\n{\n  UInt8 *m_Data;\n  UInt32 m_Size;\n};\n\ninline u64 nnmathMultiplyRate(u64 x, u64 rate) // why\n{\n    const u32 r_hi = (u32)(rate >> 32);\n    const u32 r_lo = (u32)(rate >>  0);\n    const s32 x_hi = (u32)(x    >> 32);\n    const u32 x_lo = (u32)(x    >>  0);\n\n    return (((u64)(x_hi) * r_hi) << 32)\n         + ( (u64)(x_hi) * r_lo\n           + (u64)(r_hi) * x_lo )\n         + (((u64)(x_lo) * r_lo) >> 32);\n}\nstatic const u32 ticksPerSecond = 67027964 * 4;\nstatic const u64 nanosecondsPerTick = (u64((1000 * 1000 * 1000)) << 32) / ticksPerSecond ;\nnamespace nn {\n    namespace os {\n        struct Tick {\n            s64 m_Tick;\n            static Tick GetSystemCurrent();\n            explicit Tick(s64 tick = 0) : m_Tick(tick) {}\n            inline s64 ToNanoSeconds() {\n                return nnmathMultiplyRate(\n                            m_Tick,\n                            nanosecondsPerTick);\n            }\n            Tick operator-(Tick rhs) const;\n            Tick& operator-=(Tick rhs);\n        };\n        inline Tick& Tick::operator-=(Tick rhs)               { this->m_Tick -= rhs.m_Tick; return *this; }\n        inline Tick  Tick::operator-(Tick rhs)          const { Tick ret(*this); return ret -= rhs; }\n    }\n}\n\nnamespace nn { namespace fnd {\ntemplate <typename T>\nstruct ExpHeapTemplate {\n    size_t GetTotalFreeSize();\n};\n}}\n\nnamespace nn { namespace os {\n    struct LockPolicy {\n        template <typename T>\n        struct Object {\n    \n        };\n    };\n    struct CriticalSection {\n\n    };\n}}\n\nlong long NanosecondsSinceInit();", "diff_flags": [], "diff_label": "_Z17RuntimeInitializev", "libraries": []}