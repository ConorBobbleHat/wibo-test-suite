{"compiler": "mwcc_41_60831", "compiler_flags": "-lang=c -ipa file -enum int -inline auto -Cpp_exceptions off -RTTI off -fp hard -O4,p -nodefaults", "source_code": "#define GX_GET_REG(reg, st, end)      GX_BITGET((reg), (st), ((end) - (st) + 1))\n\n#define SCISSOR_X1 (GX_GET_REG(gxdt->scissorX1Y1, 9, 19))\n#define SCISSOR_Y1 (GX_GET_REG(gxdt->scissorX1Y1, GX_BP_SCISSORTL_TOP_ST, GX_BP_SCISSORTL_TOP_END))\n#define SCISSOR_X2 (GX_GET_REG(gxdt->scissorX2Y2, GX_BP_SCISSORBR_RIGHT_ST, GX_BP_SCISSORBR_RIGHT_END))\n#define SCISSOR_Y2 (GX_GET_REG(gxdt->scissorX2Y2, GX_BP_SCISSORBR_BOT_ST, GX_BP_SCISSORBR_BOT_END))\n\nvoid GXGetScissor(u32* x, u32* y, u32* w, u32* h) {\n\tu32 myLeft, myTop, myWidth, myRight;\n\t\n\tmyLeft \t= SCISSOR_X1 - 342;\n\tmyTop \t= SCISSOR_Y1 - 342;\n\tmyWidth = SCISSOR_X2 - SCISSOR_X1 + 1;\n\tmyRight = SCISSOR_Y2 - SCISSOR_Y1 + 1;\n\n\t*left   \t= myLeft;\n\t*top    \t= myTop;\n\t*width  \t= myWidth;\n\t*height \t= myRight;\n}", "context": "#define NULL 0\ntypedef enum _va_arg_type {\narg_ARGPOINTER,\narg_WORD,\narg_DOUBLEWORD,\narg_ARGREAL\n} _va_arg_type;\ntypedef struct __va_list_struct {\nchar gpr;\nchar fpr;\nchar* input_arg_area;\nchar* reg_save_area;\n} va_list[1];\nvoid* __va_arg(va_list, int);\ntypedef signed long intptr_t;\ntypedef unsigned long uintptr_t;\ntypedef intptr_t ptrdiff_t;\ntypedef unsigned long size_t;\ntypedef unsigned short wchar_t;\ntypedef void (*funcptr_t)(void);\ntypedef unsigned long long u64;\ntypedef signed long long s64;\ntypedef unsigned long u32;\ntypedef signed long s32;\ntypedef unsigned short u16;\ntypedef signed short s16;\ntypedef unsigned char u8;\ntypedef signed char s8;\ntypedef float f32;\ntypedef double f64;\ntypedef int UNKWORD;\ntypedef void UNKTYPE;\nenum { FALSE, TRUE };\ntypedef int BOOL;\ntypedef unsigned char GXBool8;\ntypedef struct _GXColor {\nu8 r, g, b, a;\n} GXColor;\ntypedef struct _GXColorS10 {\ns16 r, g, b, a;\n} GXColorS10;\ntypedef enum _GXAlphaOp {\nGX_AOP_AND,\nGX_AOP_OR,\nGX_AOP_XOR,\nGX_AOP_XNOR,\nGX_MAX_ALPHAOP\n} GXAlphaOp;\ntypedef enum _GXAnisotropy {\nGX_ANISO_1,\nGX_ANISO_2,\nGX_ANISO_4,\nGX_MAX_ANISOTROPY\n} GXAnisotropy;\ntypedef enum _GXAttnFn {\nGX_AF_SPEC,\nGX_AF_SPOT,\nGX_AF_NONE,\n} GXAttnFn;\ntypedef enum _GXAttr {\nGX_VA_PNMTXIDX,\nGX_VA_TEX0MTXIDX,\nGX_VA_TEX1MTXIDX,\nGX_VA_TEX2MTXIDX,\nGX_VA_TEX3MTXIDX,\nGX_VA_TEX4MTXIDX,\nGX_VA_TEX5MTXIDX,\nGX_VA_TEX6MTXIDX,\nGX_VA_TEX7MTXIDX,\nGX_VA_POS,\nGX_VA_NRM,\nGX_VA_CLR0,\nGX_VA_CLR1,\nGX_VA_TEX0,\nGX_VA_TEX1,\nGX_VA_TEX2,\nGX_VA_TEX3,\nGX_VA_TEX4,\nGX_VA_TEX5,\nGX_VA_TEX6,\nGX_VA_TEX7,\nGX_POS_MTX_ARRAY,\nGX_NRM_MTX_ARRAY,\nGX_TEX_MTX_ARRAY,\nGX_LIGHT_ARRAY,\nGX_VA_NBT,\nGX_VA_MAX_ATTR,\nGX_VA_NULL = 255\n} GXAttr;\ntypedef enum _GXBlendFactor {\nGX_BL_ZERO,\nGX_BL_ONE,\nGX_BL_SRCCLR,\nGX_BL_INVSRCCLR,\nGX_BL_SRCALPHA,\nGX_BL_INVSRCALPHA,\nGX_BL_DSTALPHA,\nGX_BL_INVDSTALPHA,\nGX_BL_DSTCLR = GX_BL_SRCCLR,\nGX_BL_INVDSTCLR = GX_BL_INVSRCCLR\n} GXBlendFactor;\ntypedef enum _GXBlendMode {\nGX_BM_NONE,\nGX_BM_BLEND,\nGX_BM_LOGIC,\nGX_BM_SUBTRACT,\nGX_MAX_BLENDMODE\n} GXBlendMode;\ntypedef enum _GXChannelID {\nGX_COLOR0,\nGX_COLOR1,\nGX_ALPHA0,\nGX_ALPHA1,\nGX_COLOR0A0,\nGX_COLOR1A1,\nGX_COLOR_ZERO,\nGX_ALPHA_BUMP,\nGX_ALPHA_BUMPN,\nGX_COLOR_NULL = 255\n} GXChannelID;\ntypedef enum _GXClipMode {\nGX_CLIP_ENABLE,\nGX_CLIP_DISABLE,\n} GXClipMode;\ntypedef enum _GXColorSrc { GX_SRC_REG, GX_SRC_VTX } GXColorSrc;\ntypedef enum _GXCompare {\nGX_NEVER,\nGX_LESS,\nGX_EQUAL,\nGX_LEQUAL,\nGX_GREATER,\nGX_NEQUAL,\nGX_GEQUAL,\nGX_ALWAYS\n} GXCompare;\ntypedef enum _GXCullMode {\nGX_CULL_NONE,\nGX_CULL_FRONT,\nGX_CULL_BACK,\nGX_CULL_ALL\n} GXCullMode;\ntypedef enum _GXDiffuseFn { GX_DF_NONE, GX_DF_SIGN, GX_DF_CLAMP } GXDiffuseFn;\ntypedef enum _GXDirtyFlag {\nGX_DIRTY_SU_TEX = (1 << 0),\nGX_DIRTY_BP_MASK = (1 << 1),\nGX_DIRTY_GEN_MODE = (1 << 2),\nGX_DIRTY_VCD = (1 << 3),\nGX_DIRTY_VAT = (1 << 4),\nGX_DIRTY_AMB_COLOR0 = (1 << 8),\nGX_DIRTY_AMB_COLOR1 = (1 << 9),\nGX_DIRTY_MAT_COLOR0 = (1 << 10),\nGX_DIRTY_MAT_COLOR1 = (1 << 11),\nGX_DIRTY_MTX_IDX = (1 << 26),\nGX_DIRTY_PROJECTION = (1 << 27),\nGX_DIRTY_VIEWPORT = (1 << 28),\nGX_DIRTY_VLIM = GX_DIRTY_VCD | GX_DIRTY_VAT,\nGX_AMB_MAT_MASK = GX_DIRTY_AMB_COLOR0 | GX_DIRTY_AMB_COLOR1 |\nGX_DIRTY_MAT_COLOR0 | GX_DIRTY_MAT_COLOR1,\nGX_LIGHT_CHAN_MASK = 0x100F000,\nGX_TEX_GEN_MASK = 0x2FF0000,\n} GXDirtyFlag;\ntypedef enum _GXDistAttnFn {\nGX_DA_OFF,\nGX_DA_GENTLE,\nGX_DA_MEDIUM,\nGX_DA_STEEP\n} GXDistAttnFn;\ntypedef enum _GXFogType {\nGX_FOG_NONE,\nGX_FOG_PERSP_LIN = 2,\nGX_FOG_PERSP_EXP = 4,\nGX_FOG_PERSP_EXP2 = 5,\nGX_FOG_PERSP_REVEXP = 6,\nGX_FOG_PERSP_REVEXP2 = 7,\nGX_FOG_ORTHO_LIN = 10,\nGX_FOG_ORTHO_EXP = 12,\nGX_FOG_ORTHO_EXP2 = 13,\nGX_FOG_ORTHO_REVEXP = 14,\nGX_FOG_ORTHO_REVEXP2 = 15,\n} GXFogType;\ntypedef enum _GXIndTexAlphaSel {\nGX_ITBA_OFF,\nGX_ITBA_S,\nGX_ITBA_T,\nGX_ITBA_U,\nGX_MAX_ITBALPHA\n} GXIndTexAlphaSel;\ntypedef enum _GXIndTexBiasSel {\nGX_ITB_NONE,\nGX_ITB_S,\nGX_ITB_T,\nGX_ITB_ST,\nGX_ITB_U,\nGX_ITB_SU,\nGX_ITB_TU,\nGX_ITB_STU,\nGX_MAX_ITBIAS\n} GXIndTexBiasSel;\ntypedef enum _GXIndTexFormat {\nGX_ITF_8,\nGX_ITF_5,\nGX_ITF_4,\nGX_ITF_3,\nGX_MAX_ITFORMAT\n} GXIndTexFormat;\ntypedef enum _GXIndTexMtxID {\nGX_ITM_OFF,\nGX_ITM_0,\nGX_ITM_1,\nGX_ITM_2,\nGX_ITM_S0 = 5,\nGX_ITM_S1,\nGX_ITM_S2,\nGX_ITM_T0 = 9,\nGX_ITM_T1,\nGX_ITM_T2,\n} GXIndTexMtxID;\ntypedef enum _GXIndTexScale {\nGX_ITS_1,\nGX_ITS_2,\nGX_ITS_4,\nGX_ITS_8,\nGX_ITS_16,\nGX_ITS_32,\nGX_ITS_64,\nGX_ITS_128,\nGX_ITS_256,\nGX_MAX_ITSCALE\n} GXIndTexScale;\ntypedef enum _GXIndTexStageID {\nGX_INDTEXSTAGE0,\nGX_INDTEXSTAGE1,\nGX_INDTEXSTAGE2,\nGX_INDTEXSTAGE3,\nGX_MAX_INDTEXSTAGE\n} GXIndTexStageID;\ntypedef enum _GXIndTexWrap {\nGX_ITW_OFF,\nGX_ITW_256,\nGX_ITW_128,\nGX_ITW_64,\nGX_ITW_32,\nGX_ITW_16,\nGX_ITW_0,\nGX_MAX_ITWRAP,\n} GXIndTexWrap;\ntypedef enum _GXLightID {\nGX_LIGHT0 = 1,\nGX_LIGHT1 = 2,\nGX_LIGHT2 = 4,\nGX_LIGHT3 = 8,\nGX_LIGHT4 = 16,\nGX_LIGHT5 = 32,\nGX_LIGHT6 = 64,\nGX_LIGHT7 = 128,\nGX_MAX_LIGHT = 256,\nGX_LIGHT_NULL = 0\n} GXLightID;\ntypedef enum _GXLogicOp {\nGX_LO_CLEAR,\nGX_LO_AND,\nGX_LO_REVAND,\nGX_LO_COPY,\nGX_LO_INVAND,\nGX_LO_NOOP,\nGX_LO_XOR,\nGX_LO_OR,\nGX_LO_NOR,\nGX_LO_EQUIV,\nGX_LO_INV,\nGX_LO_REVOR,\nGX_LO_INVCOPY,\nGX_LO_INVOR,\nGX_LO_NAND,\nGX_LO_SET\n} GXLogicOp;\ntypedef enum _GXMtxType {\nGX_MTX_3x4,\nGX_MTX_2x4,\n} GXMtxType;\ntypedef enum _GXPosNrmMtx {\nGX_PNMTX0 = 0,\nGX_PNMTX1 = 3,\nGX_PNMTX2 = 6,\nGX_PNMTX3 = 9,\nGX_PNMTX4 = 12,\nGX_PNMTX5 = 15,\nGX_PNMTX6 = 18,\nGX_PNMTX7 = 21,\nGX_PNMTX8 = 24,\nGX_PNMTX9 = 27\n} GXPosNrmMtx;\ntypedef enum _GXPrimitive {\nGX_POINTS = 0xB8,\nGX_LINES = 0xA8,\nGX_LINESTRIP = 0xB0,\nGX_TRIANGLES = 0x90,\nGX_TRIANGLESTRIP = 0x98,\nGX_TRIANGLEFAN = 0xA0,\nGX_QUADS = 0x80,\n} GXPrimitive;\ntypedef enum _GXProjectionType {\nGX_PERSPECTIVE,\nGX_ORTHOGRAPHIC\n} GXProjectionType;\ntypedef enum _GXSpotFn {\nGX_SP_OFF,\nGX_SP_FLAT,\nGX_SP_COS,\nGX_SP_COS2,\nGX_SP_SHARP,\nGX_SP_RING1,\nGX_SP_RING2\n} GXSpotFn;\ntypedef enum _GXTevAlphaArg {\nGX_CA_APREV,\nGX_CA_A0,\nGX_CA_A1,\nGX_CA_A2,\nGX_CA_TEXA,\nGX_CA_RASA,\nGX_CA_KONST,\nGX_CA_ZERO,\nGX_CA_ONE\n} GXTevAlphaArg;\ntypedef enum _GXTevBias {\nGX_TB_ZERO,\nGX_TB_ADDHALF,\nGX_TB_SUBHALF,\nGX_MAX_TEVBIAS\n} GXTevBias;\ntypedef enum _GXTevColorArg {\nGX_CC_CPREV,\nGX_CC_APREV,\nGX_CC_C0,\nGX_CC_A0,\nGX_CC_C1,\nGX_CC_A1,\nGX_CC_C2,\nGX_CC_A2,\nGX_CC_TEXC,\nGX_CC_TEXA,\nGX_CC_RASC,\nGX_CC_RASA,\nGX_CC_ONE,\nGX_CC_HALF,\nGX_CC_KONST,\nGX_CC_ZERO,\nGX_CC_TEXRRR,\nGX_CC_TEXGGG,\nGX_CC_TEXBBB,\nGX_CC_QUARTER = GX_CC_KONST\n} GXTevColorArg;\ntypedef enum _GXTevColorChan {\nGX_CH_RED,\nGX_CH_GREEN,\nGX_CH_BLUE,\nGX_CH_ALPHA\n} GXTevColorChan;\ntypedef enum _GXTevOp {\nGX_TEV_ADD,\nGX_TEV_SUB,\nGX_TEV_COMP_R8_GT = 8,\nGX_TEV_COMP_R8_EQ,\nGX_TEV_COMP_GR16_GT,\nGX_TEV_COMP_GR16_EQ,\nGX_TEV_COMP_BGR24_GT,\nGX_TEV_COMP_BGR24_EQ,\nGX_TEV_COMP_RGB8_GT,\nGX_TEV_COMP_RGB8_EQ,\nGX_TEV_COMP_A8_GT = GX_TEV_COMP_RGB8_GT,\nGX_TEV_COMP_A8_EQ = GX_TEV_COMP_RGB8_EQ\n} GXTevOp;\ntypedef enum _GXTevRegID {\nGX_TEVPREV,\nGX_TEVREG0,\nGX_TEVREG1,\nGX_TEVREG2,\nGX_MAX_TEVREG\n} GXTevRegID;\ntypedef enum _GXTevScale {\nGX_TEV_SCALE_0,\nGX_TEV_SCALE_1,\nGX_TEV_SCALE_2,\nGX_TEV_SCALE_3,\n} GXTevScale;\ntypedef enum _GXTevStageID {\nGX_TEVSTAGE0,\nGX_TEVSTAGE1,\nGX_TEVSTAGE2,\nGX_TEVSTAGE3,\nGX_TEVSTAGE4,\nGX_TEVSTAGE5,\nGX_TEVSTAGE6,\nGX_TEVSTAGE7,\nGX_TEVSTAGE8,\nGX_TEVSTAGE9,\nGX_TEVSTAGE10,\nGX_TEVSTAGE11,\nGX_TEVSTAGE12,\nGX_TEVSTAGE13,\nGX_TEVSTAGE14,\nGX_TEVSTAGE15,\nGX_MAX_TEVSTAGE\n} GXTevStageID;\ntypedef enum _GXTevSwapSel {\nGX_TEV_SWAP0,\nGX_TEV_SWAP1,\nGX_TEV_SWAP2,\nGX_TEV_SWAP3,\nGX_MAX_TEVSWAP\n} GXTevSwapSel;\ntypedef enum _GXTevKAlphaSel {\nGX_TEV_KASEL_8_8,\nGX_TEV_KASEL_7_8,\nGX_TEV_KASEL_6_8,\nGX_TEV_KASEL_5_8,\nGX_TEV_KASEL_4_8,\nGX_TEV_KASEL_3_8,\nGX_TEV_KASEL_2_8,\nGX_TEV_KASEL_1_8,\nGX_TEV_KASEL_1 = 0,\nGX_TEV_KASEL_3_4 = 2,\nGX_TEV_KASEL_1_2 = 4,\nGX_TEV_KASEL_1_4 = 6,\nGX_TEV_KASEL_K0_R = 16,\nGX_TEV_KASEL_K1_R,\nGX_TEV_KASEL_K2_R,\nGX_TEV_KASEL_K3_R,\nGX_TEV_KASEL_K0_G,\nGX_TEV_KASEL_K1_G,\nGX_TEV_KASEL_K2_G,\nGX_TEV_KASEL_K3_G,\nGX_TEV_KASEL_K0_B,\nGX_TEV_KASEL_K1_B,\nGX_TEV_KASEL_K2_B,\nGX_TEV_KASEL_K3_B,\nGX_TEV_KASEL_K0_A,\nGX_TEV_KASEL_K1_A,\nGX_TEV_KASEL_K2_A,\nGX_TEV_KASEL_K3_A\n} GXTevKAlphaSel;\ntypedef enum _GXTevKColorID {\nGX_KCOLOR0,\nGX_KCOLOR1,\nGX_KCOLOR2,\nGX_KCOLOR3,\nGX_MAX_KCOLOR\n} GXTevKColorID;\ntypedef enum _GXTevKColorSel {\nGX_TEV_KCSEL_8_8,\nGX_TEV_KCSEL_7_8,\nGX_TEV_KCSEL_6_8,\nGX_TEV_KCSEL_5_8,\nGX_TEV_KCSEL_4_8,\nGX_TEV_KCSEL_3_8,\nGX_TEV_KCSEL_2_8,\nGX_TEV_KCSEL_1_8,\nGX_TEV_KCSEL_1 = 0,\nGX_TEV_KCSEL_3_4 = 2,\nGX_TEV_KCSEL_1_2 = 4,\nGX_TEV_KCSEL_1_4 = 6,\nGX_TEV_KCSEL_K0 = 12,\nGX_TEV_KCSEL_K1,\nGX_TEV_KCSEL_K2,\nGX_TEV_KCSEL_K3,\nGX_TEV_KCSEL_K0_R,\nGX_TEV_KCSEL_K1_R,\nGX_TEV_KCSEL_K2_R,\nGX_TEV_KCSEL_K3_R,\nGX_TEV_KCSEL_K0_G,\nGX_TEV_KCSEL_K1_G,\nGX_TEV_KCSEL_K2_G,\nGX_TEV_KCSEL_K3_G,\nGX_TEV_KCSEL_K0_B,\nGX_TEV_KCSEL_K1_B,\nGX_TEV_KCSEL_K2_B,\nGX_TEV_KCSEL_K3_B,\nGX_TEV_KCSEL_K0_A,\nGX_TEV_KCSEL_K1_A,\nGX_TEV_KCSEL_K2_A,\nGX_TEV_KCSEL_K3_A\n} GXTevKColorSel;\ntypedef enum _GXTexCoordID {\nGX_TEXCOORD0,\nGX_TEXCOORD1,\nGX_TEXCOORD2,\nGX_TEXCOORD3,\nGX_TEXCOORD4,\nGX_TEXCOORD5,\nGX_TEXCOORD6,\nGX_TEXCOORD7,\nGX_MAX_TEXCOORD,\nGX_TEXCOORD_NULL = 255\n} GXTexCoordID;\ntypedef enum _GXTexFilter {\nGX_NEAR,\nGX_LINEAR,\nGX_NEAR_MIP_NEAR,\nGX_LIN_MIP_NEAR,\nGX_NEAR_MIP_LIN,\nGX_LIN_MIP_LIN,\n} GXTexFilter;\ntypedef enum _GXTexFmt {\nGX_TF_I4,\nGX_TF_I8,\nGX_TF_IA4,\nGX_TF_IA8,\nGX_TF_RGB565,\nGX_TF_RGB5A3,\nGX_TF_RGBA8,\nGX_TF_CMPR = 14,\nGX_CTF_R4 = 32,\nGX_CTF_RA4 = 34,\nGX_CTF_RA8 = 35,\nGX_CTF_YUVA8 = 38,\nGX_CTF_A8 = 39,\nGX_CTF_R8 = 40,\nGX_CTF_G8 = 41,\nGX_CTF_B8 = 42,\nGX_CTF_RG8 = 43,\nGX_CTF_GB8 = 44,\nGX_TF_Z8 = 17,\nGX_TF_Z16 = 19,\nGX_TF_Z24X8 = 22,\nGX_CTF_Z4 = 48,\nGX_CTF_Z8M = 57,\nGX_CTF_Z8L = 58,\nGX_CTF_Z16L = 60,\nGX_TF_A8 = GX_CTF_YUVA8\n} GXTexFmt;\ntypedef enum _GXTexGenSrc {\nGX_TG_POS,\nGX_TG_NRM,\nGX_TG_BINRM,\nGX_TG_TANGENT,\nGX_TG_TEX0,\nGX_TG_TEX1,\nGX_TG_TEX2,\nGX_TG_TEX3,\nGX_TG_TEX4,\nGX_TG_TEX5,\nGX_TG_TEX6,\nGX_TG_TEX7,\nGX_TG_TEXCOORD0,\nGX_TG_TEXCOORD1,\nGX_TG_TEXCOORD2,\nGX_TG_TEXCOORD3,\nGX_TG_TEXCOORD4,\nGX_TG_TEXCOORD5,\nGX_TG_TEXCOORD6,\nGX_TG_COLOR0,\nGX_TG_COLOR1,\n} GXTexGenSrc;\ntypedef enum _GXTexGenType {\nGX_TG_MTX3x4,\nGX_TG_MTX2x4,\nGX_TG_BUMP0,\nGX_TG_BUMP1,\nGX_TG_BUMP2,\nGX_TG_BUMP3,\nGX_TG_BUMP4,\nGX_TG_BUMP5,\nGX_TG_BUMP6,\nGX_TG_BUMP7,\nGX_TG_SRTG\n} GXTexGenType;\ntypedef enum _GXTexMapID {\nGX_TEXMAP0,\nGX_TEXMAP1,\nGX_TEXMAP2,\nGX_TEXMAP3,\nGX_TEXMAP4,\nGX_TEXMAP5,\nGX_TEXMAP6,\nGX_TEXMAP7,\nGX_MAX_TEXMAP,\nGX_TEXMAP_NULL = 255,\nGX_TEX_DISABLE\n} GXTexMapID;\ntypedef enum _GXTexMtx {\nGX_TEXMTX0 = 30,\nGX_TEXMTX1 = 33,\nGX_TEXMTX2 = 36,\nGX_TEXMTX3 = 39,\nGX_TEXMTX4 = 42,\nGX_TEXMTX5 = 45,\nGX_TEXMTX6 = 48,\nGX_TEXMTX7 = 51,\nGX_TEXMTX8 = 54,\nGX_TEXMTX9 = 57,\nGX_DTEXMTX0 = 64,\nGX_DTEXMTX1 = 67,\nGX_DTEXMTX2 = 70,\nGX_DTEXMTX3 = 73,\nGX_DTEXMTX4 = 76,\nGX_DTEXMTX5 = 79,\nGX_DTEXMTX6 = 82,\nGX_DTEXMTX7 = 85,\nGX_DTEXMTX8 = 88,\nGX_DTEXMTX9 = 91,\n} GXTexMtx;\ntypedef enum _GXTexWrapMode {\nGX_CLAMP,\nGX_REPEAT,\nGX_MIRROR,\nGX_MAX_TEXWRAPMODE\n} GXTexWrapMode;\ntypedef enum _GXTlutFmt {\nGX_TL_IA8,\nGX_TL_RGB565,\nGX_TL_RGB5A3,\nGX_MAX_TLUTFMT\n} GXTlutFmt;\ntypedef enum _GXVtxFmtIdx {\nGX_VTXFMT0,\n} GXVtxFmtIdx;\nvoid GXSetVtxDesc(GXAttr, GXAttr);\nvoid __GXSetVCD(void);\nvoid __GXCalculateVLim(void);\nvoid GXClearVtxDesc(void);\nvoid GXSetVtxAttrFmt(UNKWORD formatIndex, GXAttr, UNKWORD, UNKWORD, u8 frac);\nvoid __GXSetVAT(void);\nvoid GXSetArray(GXAttr, const void*, u8);\nvoid GXSetTexCoordGen2(GXTexCoordID, GXTexGenType, GXTexGenSrc, UNKWORD, u8,\nUNKWORD);\nvoid GXSetNumTexGens(u8);\nstatic inline void GXSetTexCoordGen(GXTexCoordID coord, GXTexGenType type,\nGXTexGenSrc src, UNKWORD r6) {\nGXSetTexCoordGen2(coord, type, src, r6, 0, 0x7D);\n}\nvoid GXSetTevIndirect(GXTevStageID tevStage, GXIndTexStageID texStage,\nGXIndTexFormat texFmt, GXIndTexBiasSel biasSel,\nGXIndTexMtxID mtxId, GXIndTexWrap wrapS,\nGXIndTexWrap wrapT, GXBool8 addPrev, GXBool8 utcLod,\nGXIndTexAlphaSel alphaSel);\nvoid GXSetIndTexMtx(GXIndTexMtxID id, const f32 offset[2][3], s8 scaleExp);\nvoid GXSetIndTexCoordScale(GXIndTexStageID stage, GXIndTexScale scaleS,\nGXIndTexScale scaleT);\nvoid GXSetIndTexOrder(GXIndTexStageID stage, GXTexCoordID coord,\nGXTexMapID map);\nvoid GXSetNumIndStages(u8 num);\nvoid GXSetTevDirect(GXTevStageID stage);\nvoid __GXUpdateBPMask(void);\nvoid __GXSetIndirectMask(u32 mask);\nvoid __GXFlushTextureState(void);\nextern volatile union {\nchar c;\nunsigned char uc;\nshort s;\nunsigned short us;\nint i;\nunsigned int ui;\nvoid* p;\nfloat f;\n} WGPIPE : 0xcc008000;\ntypedef enum {\nGX_FIFO_NO_OP = 0x00,\nGX_FIFO_LOAD_BP_REG = 0x61,\nGX_FIFO_LOAD_CP_REG = 0x08,\nGX_FIFO_LOAD_XF_REG = 0x10,\nGX_FIFO_LOAD_INDX_A = 0x20,\nGX_FIFO_LOAD_INDX_B = 0x28,\nGX_FIFO_LOAD_INDX_C = 0x30,\nGX_FIFO_LOAD_INDX_D = 0x38,\nGX_FIFO_CALL_DL = 0x40,\nGX_FIFO_INVAL_VTX = 0x48,\n} GXFifoCmd;\ntypedef enum {\nGX_BP_REG_GENMODE = 0x00,\nGX_BP_REG_DISPLAYCOPYFILTER = 0x01,\nGX_BP_REG_IND_MTXA = 0x06,\nGX_BP_REG_IND_MTXB = 0x07,\nGX_BP_REG_IND_MTXC = 0x08,\nGX_BP_REG_IND_IMASK = 0x0F,\nGX_BP_REG_IND_CMD = 0x10,\nGX_BP_REG_SCISSORTL = 0x20,\nGX_BP_REG_SCISSORBR = 0x21,\nGX_BP_REG_LINEPTWIDTH = 0x22,\nGX_BP_REG_PERF0_TRI = 0x23,\nGX_BP_REG_PERF0_QUAD = 0x24,\nGX_BP_REG_RAS1_SS0 = 0x25,\nGX_BP_REG_RAS1_SS1 = 0x26,\nGX_BP_REG_IREF = 0x27,\nGX_BP_REG_TREF = 0x28,\nGX_BP_REG_SU_SSIZE = 0x30,\nGX_BP_REG_SU_TSIZE = 0x31,\nGX_BP_REG_ZMODE = 0x40,\nGX_BP_REG_BLENDMODE = 0x41,\nGX_BP_REG_CONSTANTALPHA = 0x42,\nGX_BP_REG_ZCOMPARE = 0x43,\nGX_BP_REG_FIELDMASK = 0x44,\nGX_BP_REG_SETDRAWDONE = 0x45,\nGX_BP_REG_BUSCLOCK0 = 0x46,\nGX_BP_REG_PE_TOKEN_ID = 0x47,\nGX_BP_REG_PE_TOKEN_INT_ID = 0x48,\nGX_BP_REG_EFB_TL = 0x49,\nGX_BP_REG_EFB_WH = 0x4A,\nGX_BP_REG_EFB_ADDR = 0x4B,\nGX_BP_REG_MIPMAP_STRIDE = 0x4D,\nGX_BP_REG_COPYYSCALE = 0x4E,\nGX_BP_REG_CLEAR_AR = 0x4F,\nGX_BP_REG_CLEAR_GB = 0x50,\nGX_BP_REG_CLEAR_Z = 0x51,\nGX_BP_REG_TRIGGER_EFB_COPY = 0x52,\nGX_BP_REG_COPYFILTER0 = 0x53,\nGX_BP_REG_COPYFILTER1 = 0x54,\nGX_BP_REG_CLEARBBOX1 = 0x55,\nGX_BP_REG_CLEARBBOX2 = 0x56,\nGX_BP_REG_CLEAR_PIXEL_PERF = 0x57,\nGX_BP_REG_REVBITS = 0x58,\nGX_BP_REG_SCISSOROFFSET = 0x59,\nGX_BP_REG_PRELOAD_ADDR = 0x60,\nGX_BP_REG_PRELOAD_TMEMEVEN = 0x61,\nGX_BP_REG_PRELOAD_TMEMODD = 0x62,\nGX_BP_REG_PRELOAD_MODE = 0x63,\nGX_BP_REG_LOADTLUT0 = 0x64,\nGX_BP_REG_LOADTLUT1 = 0x65,\nGX_BP_REG_TEXINVALIDATE = 0x66,\nGX_BP_REG_PERF1 = 0x67,\nGX_BP_REG_FIELDMODE = 0x68,\nGX_BP_REG_BUSCLOCK1 = 0x69,\nGX_BP_REG_TX_SETMODE0 = 0x80,\nGX_BP_REG_TX_SETMODE1 = 0x84,\nGX_BP_REG_TX_SETIMAGE0 = 0x88,\nGX_BP_REG_TX_SETIMAGE1 = 0x8C,\nGX_BP_REG_TX_SETIMAGE2 = 0x90,\nGX_BP_REG_TX_SETIMAGE3 = 0x94,\nGX_BP_REG_TX_SETTLUT = 0x98,\nGX_BP_REG_TX_SETMODE0_4 = 0xA0,\nGX_BP_REG_TX_SETMODE1_4 = 0xA4,\nGX_BP_REG_TX_SETIMAGE0_4 = 0xA8,\nGX_BP_REG_TX_SETIMAGE1_4 = 0xAC,\nGX_BP_REG_TX_SETIMAGE2_4 = 0xB0,\nGX_BP_REG_TX_SETIMAGE3_4 = 0xB4,\nGX_BP_REG_TX_SETTLUT_4 = 0xB8,\nGX_BP_REG_TEV_COLOR_ENV = 0xC0,\nGX_BP_REG_TEV_ALPHA_ENV = 0xC1,\nGX_BP_REG_TEV_COLOR_RA = 0xE0,\nGX_BP_REG_TEV_COLOR_BG = 0xE1,\nGX_BP_REG_FOGRANGE = 0xE8,\nGX_BP_REG_FOGPARAM0 = 0xEE,\nGX_BP_REG_FOGBMAGNITUDE = 0xEF,\nGX_BP_REG_FOGBEXPONENT = 0xF0,\nGX_BP_REG_FOGPARAM3 = 0xF1,\nGX_BP_REG_FOGCOLOR = 0xF2,\nGX_BP_REG_ALPHACOMPARE = 0xF3,\nGX_BP_REG_BIAS = 0xF4,\nGX_BP_REG_ZTEX2 = 0xF5,\nGX_BP_REG_TEV_KSEL = 0xF6,\nGX_BP_REG_BP_MASK = 0xFE,\n} GXBpCmd;\ntypedef enum {\nGX_XF_MEM_POSMATRICES = 0x0000,\nGX_XF_MEM_NORMALMATRICES = 0x0400,\nGX_XF_MEM_DUALTEXMATRICES = 0x0500,\nGX_XF_MEM_LIGHTS = 0x0600,\n} GXXfMem;\ntypedef enum {\nGX_XF_REG_ERROR = 0x1000,\nGX_XF_REG_DIAG = 0x1001,\nGX_XF_REG_STATE0 = 0x1002,\nGX_XF_REG_STATE1 = 0x1003,\nGX_XF_REG_CLOCK = 0x1004,\nGX_XF_REG_CLIPDISABLE = 0x1005,\nGX_XF_REG_PERF0 = 0x1006,\nGX_XF_REG_PERF1 = 0x1007,\nGX_XF_REG_VTXSPECS = 0x1008,\nGX_XF_REG_SETNUMCHAN = 0x1009,\nGX_XF_REG_SETCHAN0_AMBCOLOR = 0x100A,\nGX_XF_REG_SETCHAN1_AMBCOLOR = 0x100B,\nGX_XF_REG_SETCHAN0_MATCOLOR = 0x100C,\nGX_XF_REG_SETCHAN1_MATCOLOR = 0x100D,\nGX_XF_REG_SETCHAN0_COLOR = 0x100E,\nGX_XF_REG_SETCHAN1_COLOR = 0x100F,\nGX_XF_REG_SETCHAN0_ALPHA = 0x1010,\nGX_XF_REG_SETCHAN1_ALPHA = 0x1011,\nGX_XF_REG_DUALTEX = 0x1012,\nGX_XF_REG_SETMATRIXINDA = 0x1018,\nGX_XF_REG_SETMATRIXINDB = 0x1019,\nGX_XF_REG_SETVIEWPORT = 0x101A,\nGX_XF_REG_SETZSCALE = 0x101C,\nGX_XF_REG_SETZOFFSET = 0x101F,\nGX_XF_REG_SETPROJECTION = 0x1020,\nGX_XF_REG_SETNUMTEXGENS = 0x103F,\nGX_XF_REG_SETTEXMTXINFO = 0x1040,\nGX_XF_REG_SETPOSTMTXINFO = 0x1050,\nGX_XF_REG_REGISTERS_END = 0x1058,\n} GXXfCmd;\nvoid GXBeginDisplayList(void* list, u32 size);\nu32 GXEndDisplayList(void);\nvoid GXCallDisplayList(void* list, u32 size);\nstatic inline void GXFastCallDisplayList(void* list, u32 size) {\nWGPIPE.c = GX_FIFO_CALL_DL;\nWGPIPE.p = list;\nWGPIPE.i = size;\n}\ntypedef struct _GXFifoObjImpl {\nvoid* base;\nvoid* end;\nu32 size;\nvoid* hiWatermark;\nvoid* loWatermark;\nvoid* readPtr;\nvoid* writePtr;\nu32 count;\nu8 wrap;\n} GXFifoObjImpl;\ntypedef struct _GXLightObjImpl {\nchar UNK_0x0[0xC];\nGXColor color;\nf32 aa;\nf32 ab;\nf32 ac;\nf32 ka;\nf32 kb;\nf32 kc;\nf32 posX;\nf32 posY;\nf32 posZ;\nf32 dirX;\nf32 dirY;\nf32 dirZ;\n} GXLightObjImpl;\ntypedef struct _GXTexObjImpl {\nu8 todo;\n} GXTexObjImpl;\ntypedef struct _GXFifoObj { u8 dummy[( 128) - sizeof(GXFifoObjImpl) + sizeof(GXFifoObjImpl)]; } GXFifoObj; ;\nvoid GXSetCPUFifo(GXFifoObj*);\nBOOL GXGetCPUFifo(GXFifoObj*);\nu32 GXGetFifoCount(GXFifoObj*);\nu8 GXGetFifoWrap(GXFifoObj*);\ntypedef struct _GXRenderModeObj {\nu32 tvInfo;\nu16 fbWidth;\nu16 efbHeight;\nu16 xfbHeight;\nu16 viXOrigin;\nu16 viYOrigin;\nu16 viWidth;\nu16 viHeight;\nu32 xfbMode;\nu8 field_rendering;\nu8 aa;\nu8 sample_pattern[12][2];\nu8 vfilter[7];\n} GXRenderModeObj;\nstatic void GXEnd(void) {}\nvoid __GXSetDirtyState(void);\nvoid GXBegin(GXPrimitive prim, GXVtxFmtIdx fmt, u16 verts);\nvoid __GXSendFlushPrim(void);\nvoid GXSetLineWidth(u8 width, UNKWORD arg1);\nvoid GXSetPointSize(u8 width, UNKWORD arg1);\nvoid GXEnableTexOffsets(UNKWORD coordId, GXBool8 arg1, GXBool8 arg2);\nvoid GXSetCullMode(GXCullMode mode);\nvoid GXGetCullMode(GXCullMode* out);\nvoid GXSetCoPlanar(GXBool8 enable);\nvoid __GXSetGenMode(void);\ntypedef struct _GXData {\n    union {\n        UNKWORD WORD_0x0;\n        struct {\n            u16 SHORT_0x0; // at 0x0\n            u16 xfWritten; // at 0x2\n        };\n    }; // at 0x0\n    u16 SHORT_0x4;\n    u16 SHORT_0x6;\n    UNKWORD WORD_0x8;\n    char UNK_0xC[0x7C - 0xC];\n    u32 WORD_0x7C;\n    u32 matrixIndex0; // at 0x80\n    u32 matrixIndex1; // at 0x84\n    char UNK_0x88[0xA8 - 0x88];\n    GXColor ambColors[2]; // at 0xA8\n    GXColor matColors[2]; // at 0xB0\n    u32 WORDS_0xB8[2];\n    u32 WORD_0xC0;\n    u32 WORD_0xC4;\n    u32 WORDS_0xC8[2];\n    char UNK_0xD0[0xE8 - 0xD0];\n    u32 WORDS_0xE8[2];\n    char UNK_0xF0[0x108 - 0xF0];\n    u32 WORDS_0x108[2];\n    char UNK_0x110[0x148 - 0x110];\n    u32 scissorX1Y1; // at 0x148\n    u32 scissorX2Y2; // at 0x14C\n    char UNK_0x150[0x170 - 0x150];\n    u32 WORD_0x170;\n    u32 WORD_0x174;\n    u32 WORD_0x178;\n    u32 WORD_0x17C;\n    char UNK_0x180[0x254 - 0x180];\n    u32 WORD_0x254;\n    char UNK_0x258[0x528 - 0x258];\n    GXProjectionType projType; // at 0x528\n    f32 proj[6];               // at 0x52C\n    union {\n        struct {\n            f32 vpOx;   // at 0x544\n            f32 vpOy;   // at 0x548\n            f32 vpSx;   // at 0x54C\n            f32 vpSy;   // at 0x550\n            f32 vpNear; // at 0x554\n            f32 vpFar;  // at 0x558\n        };\n        f32 view[6];\n    }; // at 0x544\n    f32 FLOAT_0x55C;\n    f32 FLOAT_0x560;\n    char UNK_0x564[0x5F8 - 0x564];\n    u8 dlistBegan; // at 0x5F8\n    u8 BYTE_0x5F9;\n    u32 dirtyFlags; // at 0x5FC\n} GXData;\nextern GXData* const __GXData;\ntypedef struct _GXLightObj { u8 dummy[( 64) - sizeof(GXLightObjImpl) + sizeof(GXLightObjImpl)]; } GXLightObj; ;\nvoid GXInitLightAttn(GXLightObj* light, f32 aa, f32 ab, f32 ac, f32 ka, f32 kb,\nf32 kc);\nvoid GXInitLightAttnA(GXLightObj* light, f32 a, f32 b, f32 c);\nvoid GXInitLightAttnK(GXLightObj* light, f32 a, f32 b, f32 c);\nvoid GXInitLightSpot(GXLightObj* light, f32 angle, GXSpotFn fn);\nvoid GXInitLightDistAttn(GXLightObj* light, f32 distance, f32 brightness,\nGXDistAttnFn fn);\nvoid GXInitLightPos(GXLightObj* light, f32 x, f32 y, f32 z);\nvoid GXGetLightPos(const GXLightObj* light, f32* x, f32* y, f32* z);\nvoid GXInitLightDir(GXLightObj* light, f32 x, f32 y, f32 z);\nvoid GXGetLightDir(const GXLightObj* light, f32* x, f32* y, f32* z);\nvoid GXInitSpecularDir(GXLightObj* light, f32 x, f32 y, f32 z);\nvoid GXInitLightColor(GXLightObj* light, GXColor color);\nvoid GXLoadLightObjImm(const GXLightObj* light, GXLightID id);\nvoid GXLoadLightObjIndx(u16 index, GXLightID id);\nvoid GXSetChanAmbColor(GXChannelID chan, GXColor color);\nvoid GXSetChanMatColor(GXChannelID chan, GXColor color);\nvoid GXSetNumChans(u8 num);\nvoid GXSetChanCtrl(GXChannelID chan, GXBool8 enable, GXColorSrc ambSrc,\nGXColorSrc matSrc, GXLightID lightMask, GXDiffuseFn diffFn,\nGXAttnFn attnFn);\nvoid GXSetMisc(UNKWORD token, UNKWORD val);\nvoid GXFlush(void);\nvoid GXResetWriteGatherPipe(void);\nvoid GXAbortFrame(void);\nvoid GXSetFog(GXFogType, GXColor, f32, f32, f32, f32);\nvoid GXSetBlendMode(GXBlendMode, GXBlendFactor, GXBlendFactor, GXLogicOp);\nvoid GXSetColorUpdate(u8);\nvoid GXSetAlphaUpdate(u8);\nvoid GXSetZMode(u8, GXCompare, u8);\nvoid GXSetZCompLoc(u8);\nvoid GXSetDither(u8);\nvoid GXSetDstAlpha(u8, u8);\nvoid GXSetTevOp(GXTevStageID, UNKWORD);\nvoid GXSetTevColorIn(GXTevStageID, GXTevColorArg, GXTevColorArg, GXTevColorArg,\nGXTevColorArg);\nvoid GXSetTevAlphaIn(GXTevStageID, GXTevAlphaArg, GXTevAlphaArg, GXTevAlphaArg,\nGXTevAlphaArg);\nvoid GXSetTevColorOp(GXTevStageID, GXTevOp, GXTevBias, GXTevScale, u8,\nGXTevRegID);\nvoid GXSetTevAlphaOp(GXTevStageID, GXTevOp, GXTevBias, GXTevScale, u8,\nGXTevRegID);\nvoid GXSetTevColor(GXTevRegID, GXColor);\nvoid GXSetTevKColor(GXTevKColorID, GXColor);\nvoid GXSetTevKColorSel(GXTevStageID, GXTevKColorSel);\nvoid GXSetTevKAlphaSel(GXTevStageID, GXTevKAlphaSel);\nvoid GXSetTevSwapMode(GXTevStageID, GXTevSwapSel, GXTevSwapSel);\nvoid GXSetTevSwapModeTable(GXTevSwapSel, GXTevColorChan, GXTevColorChan,\nGXTevColorChan, GXTevColorChan);\nvoid GXSetAlphaCompare(GXCompare, u8, GXAlphaOp, GXCompare, u8);\nvoid GXSetZTexture(UNKWORD, UNKWORD, UNKWORD);\nvoid GXSetTevOrder(GXTevStageID, GXTexCoordID, GXTexMapID, GXChannelID);\nvoid GXSetNumTevStages(u8);\ntypedef struct _GXTexObj { u8 dummy[( 32) - sizeof(GXTexObjImpl) + sizeof(GXTexObjImpl)]; } GXTexObj; ;\nvoid __GXSetSUTexRegs(void);\nvoid GXInitTexObj(GXTexObj*, void*, u16, u16, GXTexFmt, GXTexWrapMode,\nGXTexWrapMode, u8);\nvoid GXInitTexObjLOD(GXTexObj*, GXTexFilter, GXTexFilter, f32, f32, f32, u8, u8,\nGXAnisotropy);\nvoid GXLoadTexObj(GXTexObj*, GXTexMapID);\ntypedef f32 Mtx[3][4];\ntypedef f32 Mtx44[4][4];\ntypedef struct Vec {\nf32 x, y, z;\n} Vec;\ntypedef struct Quaternion {\nf32 x, y, z, w;\n} Quaternion;\nvoid PSMTXIdentity(Mtx);\nvoid PSMTXCopy(const Mtx, Mtx);\nvoid PSMTXConcat(const Mtx, const Mtx, Mtx);\nvoid PSMTXConcatArray(const Mtx, const Mtx, Mtx, u32);\nvoid PSMTXTranspose(const Mtx, Mtx);\nvoid PSMTXInverse(const Mtx, Mtx);\nvoid PSMTXInvXpose(const Mtx, Mtx);\nvoid PSMTXRotRad(Mtx, f32, char);\nvoid PSMTXRotTrig(Mtx, f32, f32, char);\nvoid PSMTXRotAxisRad(Mtx, const Vec*, f32);\nvoid PSMTXTrans(Mtx, f32, f32, f32);\nvoid PSMTXTransApply(const Mtx, Mtx, f32, f32, f32);\nvoid PSMTXScale(Mtx, f32, f32, f32);\nvoid PSMTXScaleApply(const Mtx, Mtx, f32, f32, f32);\nvoid PSMTXQuat(Mtx, const Quaternion*);\nvoid C_MTXLookAt(Mtx, const Vec*, const Vec*, const Vec*);\nvoid C_MTXLightFrustum(Mtx, f32, f32, f32, f32, f32, f32, f32, f32, f32);\nvoid C_MTXLightPerspective(Mtx, f32, f32, f32, f32, f32, f32);\nvoid C_MTXLightOrtho(Mtx, f32, f32, f32, f32, f32, f32, f32, f32);\nvoid C_MTXFrustum(Mtx44, f32, f32, f32, f32, f32, f32);\nvoid C_MTXPerspective(Mtx44, f32, f32, f32, f32);\nvoid C_MTXOrtho(Mtx44, f32, f32, f32, f32, f32, f32);\nvoid PSMTXMultVec(const Mtx, const Vec*, Vec*);\nvoid PSQUATMultiply(const Quaternion*, const Quaternion*, Quaternion*);\nvoid PSQUATNormalize(const Quaternion*, Quaternion*);\nvoid C_QUATMtx(Quaternion*, const Mtx);\nvoid C_QUATSlerp(const Quaternion*, const Quaternion*, Quaternion*, f32);\nvoid PSVECAdd(const Vec*, const Vec*, Vec*);\nvoid PSVECScale(const Vec*, Vec*, f32);\nvoid PSVECNormalize(const Vec*, Vec*);\nf32 PSVECMag(const Vec*);\nf32 PSVECDotProduct(const Vec*, const Vec*);\nvoid PSVECCrossProduct(const Vec*, const Vec*, Vec*);\nf32 PSVECSquareDistance(const Vec*, const Vec*);\nvoid C_VECHalfAngle(const Vec*, const Vec*, Vec*);\nvoid __GXSetProjection(void);\nvoid GXSetProjection(const Mtx44 proj, GXProjectionType type);\nvoid GXSetProjectionv(const f32 proj[7]);\nvoid GXGetProjectionv(f32 proj[7]);\nvoid GXLoadPosMtxImm(const Mtx mtx, u32 id);\nvoid GXLoadPosMtxIndx(u16 index, u32 id);\nvoid GXLoadNrmMtxImm(const Mtx mtx, u32 id);\nvoid GXLoadNrmMtxIndx3x3(u16 index, u32 id);\nvoid GXSetCurrentMtx(u32 id);\nvoid GXLoadTexMtxImm(const Mtx mtx, u32 id, GXMtxType type);\nvoid __GXSetViewport(void);\nvoid GXSetViewportJitter(f32 ox, f32 oy, f32 sx, f32 sy, f32 near, f32 far,\nGXBool8 jitter);\nvoid GXSetViewport(f32 ox, f32 oy, f32 sx, f32 sy, f32 near, f32 far);\nvoid GXGetViewportv(f32 view[6]);\nvoid GXSetZScaleOffset(f32 scale, f32 offset);\nvoid GXSetScissor(u32 x, u32 y, u32 w, u32 h);\nvoid GXGetScissor(u32* x, u32* y, u32* w, u32* h);\nvoid GXSetScissorBoxOffset(u32 ox, u32 oy);\nvoid GXSetClipMode(GXClipMode mode);\nvoid __GXSetMatrixIndex(GXAttr index);\nstatic inline void GXCmd1u8(u8 uc) { WGPIPE.c = uc; }\nstatic inline void GXCmd1u16(u16 us) { WGPIPE.us = us; }\nstatic inline void GXCmd1u32(u32 ul) { WGPIPE.i = ul; }\nstatic inline void GXPosition3f32(f32 x, f32 y, f32 z) {\nWGPIPE.f = x;\nWGPIPE.f = y;\nWGPIPE.f = z;\n}\nstatic inline void GXPosition3u8(u8 x, u8 y, u8 z) {\nWGPIPE.c = x;\nWGPIPE.c = y;\nWGPIPE.c = z;\n}\nstatic inline void GXPosition3s8(s8 x, s8 y, s8 z) {\nWGPIPE.c = x;\nWGPIPE.c = y;\nWGPIPE.c = z;\n}\nstatic inline void GXPosition3u16(u16 x, u16 y, u16 z) {\nWGPIPE.us = x;\nWGPIPE.us = y;\nWGPIPE.us = z;\n}\nstatic inline void GXPosition3s16(s16 x, s16 y, s16 z) {\nWGPIPE.s = x;\nWGPIPE.s = y;\nWGPIPE.s = z;\n}\nstatic inline void GXPosition2f32(f32 x, f32 y) {\nWGPIPE.f = x;\nWGPIPE.f = y;\n}\nstatic inline void GXPosition2u8(u8 x, u8 y) {\nWGPIPE.c = x;\nWGPIPE.c = y;\n}\nstatic inline void GXPosition2s8(s8 x, s8 y) {\nWGPIPE.c = x;\nWGPIPE.c = y;\n}\nstatic inline void GXPosition2u16(u16 x, u16 y) {\nWGPIPE.us = x;\nWGPIPE.us = y;\n}\nstatic inline void GXPosition2s16(s16 x, s16 y) {\nWGPIPE.s = x;\nWGPIPE.s = y;\n}\nstatic inline void GXPosition1x16(u16 us) { WGPIPE.us = us; }\nstatic inline void GXPosition1x8(u8 uc) { WGPIPE.c = uc; }\nstatic inline void GXNormal3f32(f32 x, f32 y, f32 z) {\nWGPIPE.f = x;\nWGPIPE.f = y;\nWGPIPE.f = z;\n}\nstatic inline void GXNormal3s16(s16 x, s16 y, s16 z) {\nWGPIPE.s = x;\nWGPIPE.s = y;\nWGPIPE.s = z;\n}\nstatic inline void GXNormal3s8(s8 x, s8 y, s8 z) {\nWGPIPE.c = x;\nWGPIPE.c = y;\nWGPIPE.c = z;\n}\nstatic inline void GXNormal1x16(u16 us) { WGPIPE.us = us; }\nstatic inline void GXNormal1x8(u8 uc) { WGPIPE.c = uc; }\nstatic inline void GXColor4u8(u8 r, u8 g, u8 b, u8 a) {\nWGPIPE.c = r;\nWGPIPE.c = g;\nWGPIPE.c = b;\nWGPIPE.c = a;\n}\nstatic inline void GXColor1u32(u32 color) { WGPIPE.i = color; }\nstatic inline void GXColor3u8(u8 r, u8 g, u8 b) {\nWGPIPE.c = r;\nWGPIPE.c = g;\nWGPIPE.c = b;\n}\nstatic inline void GXColor1u16(u16 us) { WGPIPE.us = us; }\nstatic inline void GXColor1x16(u16 us) { WGPIPE.us = us; }\nstatic inline void GXColor1x8(u8 uc) { WGPIPE.c = uc; }\nstatic inline void GXTexCoord2f32(f32 x, f32 y) {\nWGPIPE.f = x;\nWGPIPE.f = y;\n}\nstatic inline void GXTexCoord2s16(s16 x, s16 y) {\nWGPIPE.s = x;\nWGPIPE.s = y;\n}\nstatic inline void GXTexCoord2u16(u16 x, u16 y) {\nWGPIPE.us = x;\nWGPIPE.us = y;\n}\nstatic inline void GXTexCoord2s8(s8 x, s8 y) {\nWGPIPE.c = x;\nWGPIPE.c = y;\n}\nstatic inline void GXTexCoord2u8(u8 x, u8 y) {\nWGPIPE.c = x;\nWGPIPE.c = y;\n}\nstatic inline void GXTexCoord1f32(f32 f) { WGPIPE.f = f; }\nstatic inline void GXTexCoord1s16(s16 s) { WGPIPE.s = s; }\nstatic inline void GXTexCoord1u16(u16 us) { WGPIPE.us = us; }\nstatic inline void GXTexCoord1s8(s8 c) { WGPIPE.c = c; }\nstatic inline void GXTexCoord1u8(u8 uc) { WGPIPE.c = uc; }\nstatic inline void GXTexCoord1x16(u16 us) { WGPIPE.us = us; }\nstatic inline void GXTexCoord1x8(u8 uc) { WGPIPE.c = uc; }\n\n#define gxdt __GXData\n\n/**\n * Pack value into bitfield.\n * Value is shifted to the specified bit position.\n */\n#define GX_BITSET(field, pos, size, value)                                     \\\n    __rlwimi((field), (value), 31 - (pos) - (size) + 1, (pos), (pos) + (size)-1)\n\n/**\n * Pack value into bitfield.\n * Value is not shifted, only masked.\n */\n#define GX_BITSET_TRUNC(field, mb, size, value)                                \\\n    __rlwimi((field), (value), 0, (mb), (mb) + (size)-1)\n\n/**\n * Write BP command to GX FIFO\n */\n#define GX_WRITE_BP_CMD(data)                                                  \\\n    WGPIPE.c = GX_FIFO_LOAD_BP_REG;                                            \\\n    WGPIPE.i = (data);\n\n/**\n * Write CP command to GX FIFO\n */\n#define GX_WRITE_CP_CMD(addr, data)                                            \\\n    WGPIPE.c = GX_FIFO_LOAD_CP_REG;                                            \\\n    WGPIPE.c = (addr);                                                         \\\n    WGPIPE.i = (data);\n\n/**\n * Write XF command to GX FIFO\n */\n#define GX_WRITE_XF_CMD(addr, data)                                            \\\n    WGPIPE.c = GX_FIFO_LOAD_XF_REG;                                            \\\n    WGPIPE.i = (addr);                                                         \\\n    WGPIPE.i = (data);\n\n/**\n * GX FIFO CP registers\n */\ntypedef enum {\n    GX_CP_REG_MATINDEX_A = 0x30,\n    GX_CP_REG_MATINDEX_B = 0x40,\n    GX_CP_REG_VCD_LO = 0x50,      // 0x50 - 0x57\n    GX_CP_REG_VCD_HI = 0x60,      // 0x60 - 0x67\n    GX_CP_REG_VAT_A = 0x70,       // 0x70 - 0x77\n    GX_CP_REG_VAT_B = 0x80,       // 0x80 - 0x87\n    GX_CP_REG_VAT_C = 0x90,       // 0x90 - 0x97\n    GX_CP_REG_ARRAY_BASE = 0xA0,  // 0xA0 - 0xAF\n    GX_CP_REG_ARRAY_STRIDE = 0xA0 // 0xB0 - 0xBF\n} GXCpReg;\n\n/**\n * Access value in bitfield.\n * Value is shifted to the specified bit position.\n */\n#define GX_BITGET(field, pos, size)                                     \\\n    __rlwinm((field), 31 - (pos) - (size) + 1, (pos), (pos) + (size)-1)\n", "diff_flags": [], "diff_label": "GXGetScissor", "libraries": []}