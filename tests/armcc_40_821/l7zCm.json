{"compiler": "armcc_40_821", "compiler_flags": "--cpp --arm --split_sections --debug --no_debug_macros --gnu --debug_info=line_inlining_extensions --data_reorder --signed_chars --multibyte_chars --remove_unneeded_entities --force_new_nothrow --remarks --no_rtti -O3", "source_code": "/* No decompiler yet implemented for arm32 */\n// void _ZN2nn3err3CTR13ThrowFatalErrENS_6ResultE(void) {\n//     // ...\n// }\n\nnamespace nn {\nnamespace err {\nnamespace CTR {\n    \nnamespace {\n\nFatalErrInfo sFatalErrorInfo;\n\n}\n\n// inline u32 getLR() {\n//     return __return_address();\n// }\n\ninline void setLR(FatalErrInfo& e) {\n    e.linkRegister = __return_address();\n}\n\ninline FatalErrInfo& getFatalErrInfo() {\n    return sFatalErrorInfo;\n}\n\ninline void setResult(FatalErrInfo& f, Result r) {\n    f.fatalResult = r;\n}\n    \nvoid ThrowFatalErr(Result result) {\n    FatalErrInfo& cpy = getFatalErrInfo();\n    \n    cpy.revisionHigh = 0;\n    cpy.revisionLow = 0x8436;\n    cpy.errorType = GENERIC;\n    // cpy.fatalResult = result;\n    // cpy.setResult(result);\n    setResult(cpy, result);\n    cpy.linkRegister = __return_address();\n    Throw(cpy);\n}\n\n} //nn::err::CTR\n}\n}\n", "context": "#pragma once\n\n#define UNK_RETURN int\n#define UNK_TYPE int\n#define NULL 0\n\ntypedef signed char s8;\ntypedef unsigned char u8;\ntypedef signed short s16;\ntypedef unsigned short u16;\ntypedef signed int s32;\ntypedef unsigned int u32;\ntypedef signed long long s64;\ntypedef unsigned long long u64;\n\ntypedef float f32;\ntypedef double f64;\n\n#ifdef __cplusplus\n\n#define nullptr NULL\n\ntypedef u32 uintptr_t;\ntypedef s32 intptr_t;\n\n#endif\n\nnamespace nn {\n\nclass Handle {\npublic:\n    u32 m_handle;\n    Handle();\n};\n\n} // nn\n\nnamespace nn {\n\nclass Result {\npublic:\n    u32 m_result;\n    // Result();\n\n    bool IsFailure() const {\n        return m_result & 0x80000000;\n    }\n};\n\n} // nn\n\n\nnamespace nn {\n\nnamespace err {\n\nnamespace CTR {\n\nenum FatalErrorType {\n    GENERIC,\n    CORRUPTED,\n    CARD_REMOVED,\n    EXCEPTION,\n    RESULT_FAILURE,\n    LOGGED\n};\n\nenum ExceptionType {\n    PREFETCH_ABORT,\n    DATA_ABORT,\n    UNDEFINED_EXCEPTION,\n    VFP_EXCEPTION\n};\n\nstruct ExceptionInfo {\n    ExceptionType exceptionType;\n    u32 statusRegister;\n    u32 abortRegister;\n    u32 fpexc;\n    u32 fpinst;\n    u32 fpinst2;\n};\n\nstruct CPURegisters {\n    u32 r[13];\n    u32 sp;\n    u32 lr;\n    u32 pc;\n    u32 cpsr;\n};\n\nstruct Exception {\n    ExceptionInfo exceptionInfo;\n    CPURegisters cpuRegisters;\n};\n\nstruct Failure {\n    char message[0x60];\n};\n\nunion ExceptionData {\n    Exception exception;\n    Failure failure;\n};\n\nstruct FatalErrInfo {\n    FatalErrorType errorType;\n    u8 revisionHigh;\n    u16 revisionLow;\n    Result fatalResult;\n    u32 linkRegister;\n    u32 processID;\n    u64 titleID;\n    u64 appletTitleID;\n    ExceptionData data;\n};\n\nclass FatalErr {\npublic:\n    Result Throw(const FatalErrInfo& fatalErrorInfo);\nprivate:\n    Handle handle;\n};\n\nnamespace {\n\nvoid Throw(nn::err::CTR::FatalErrInfo&);\n\n} // (anonymous namespace)\n\nvoid ThrowFatalErr(nn::Result);\n\n} // CTR\n\n} // err\n\n} // nn", "diff_flags": [], "diff_label": "_ZN2nn3err3CTR13ThrowFatalErrENS_6ResultE", "libraries": []}