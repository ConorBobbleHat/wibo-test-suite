{"compiler": "mwcc_30_123", "compiler_flags": "-O4,p -enum int -proc arm946e -gccext,on -fp soft -lang c99 -inline on,noauto -Cpp_exceptions off -gccinc -interworking -gccdep -MD -g", "source_code": "void Blackout_PrintMessage(BlackoutScreenEnvironment *environment, s32 msgNo, u8 x, u8 y) {\n    String *tmpStr = String_New(1024, HEAP_ID_FIELD);\n    String *finStr = String_New(1024, HEAP_ID_FIELD);\n\n    FillWindowPixelBuffer(&environment->window, 0);\n    ReadMsgDataIntoString(environment->msgData, msgNo, tmpStr);\n    StringExpandPlaceholders(environment->msgFmt, finStr, tmpStr);\n        \n    u32 width = FontID_String_GetWidthMultiline(0, finStr, 0);\n    x = (environment->window.width * 8 - width);\n    x /= 2;\n    x -= 4;\n\n    AddTextPrinterParameterized2(&environment->window, 0, finStr, x, y, TEXT_SPEED_NOTRANSFER, MAKE_TEXT_COLOR(15, 2, 0), NULL);\n\n    String_Delete(tmpStr);\n    String_Delete(finStr);\n}\n", "context": "#define __STDC_UTF_16__ 1\n#define __STDC_UTF_32__ 1\n#define DIAMOND 1\n#define _STDC_PREDEF_H 1\n#define __STDC_IEC_559__ 1\n#define __STDC_IEC_60559_BFP__ 201404L\n#define __STDC_IEC_559_COMPLEX__ 1\n#define __STDC_IEC_60559_COMPLEX__ 201404L\n#define __STDC_ISO_10646__ 201706L\n#define GUARD_GLOBAL_H \n#define POKEDIAMOND_CONFIG_H \n#define VERSION_SAPPHIRE 1\n#define VERSION_RUBY 2\n#define VERSION_EMERALD 3\n#define VERSION_FIRE_RED 4\n#define VERSION_LEAF_GREEN 5\n#define VERSION_DIAMOND 10\n#define VERSION_PEARL 11\n#define LANGUAGE_JAPANESE 1\n#define LANGUAGE_ENGLISH 2\n#define LANGUAGE_FRENCH 3\n#define LANGUAGE_ITALIAN 4\n#define LANGUAGE_GERMAN 5\n#define LANGUAGE_SPANISH 7\n#define LANGUAGE_KOREAN 8\n#define LANGUAGE_COUNT LANGUAGE_KOREAN\n#define GAME_VERSION VERSION_DIAMOND\n#define GAME_LANGUAGE LANGUAGE_ENGLISH\n#define POKEDIAMOND_NNS_G3D_RES_STRUCT_H \n#define POKEDIAMOND_TYPES_H \ntypedef unsigned char u8;\ntypedef unsigned short int u16;\ntypedef unsigned long u32;\ntypedef signed char s8;\ntypedef signed short int s16;\ntypedef signed long s32;\ntypedef unsigned long long int u64;\ntypedef signed long long int s64;\ntypedef volatile u8 vu8;\ntypedef volatile u16 vu16;\ntypedef volatile u32 vu32;\ntypedef volatile u64 vu64;\ntypedef volatile s8 vs8;\ntypedef volatile s16 vs16;\ntypedef volatile s32 vs32;\ntypedef volatile s64 vs64;\ntypedef float f32;\ntypedef volatile f32 vf32;\ntypedef u8 REGType8;\ntypedef u16 REGType16;\ntypedef u32 REGType32;\ntypedef u64 REGType64;\ntypedef vu8 REGType8v;\ntypedef vu16 REGType16v;\ntypedef vu32 REGType32v;\ntypedef vu64 REGType64v;\ntypedef int BOOL;\n#define TRUE 1\n#define FALSE 0\n#define NULL ((void *)0)\n#define SDK_FORCE_EXPORT __declspec(force_export)\n#define NNS_G3D_RESNAME_SIZE (16)\n#define NNS_G3D_RESNAME_VALSIZE (NNS_G3D_RESNAME_SIZE / sizeof(u32))\ntypedef union NNSG3dResName {\n    char name[(16)];\n    u32 val[((16) / sizeof(u32))];\n} NNSG3dResName;\n#define POKEDIAMOND_MSL_C_STRING_H \n#define POKEDIAMOND_MSL_C_ANSI_PARAMS_H \n#define _MSL_BEGIN_NAMESPACE_STD \n#define _MSL_BEGIN_EXTERN_C \n#define _MSL_END_EXTERN_C \n#define _MSL_END_NAMESPACE_STD \n#define POKEDIAMOND_MSL_C_SIZE_T_H \n\n\ntypedef __typeof__(sizeof(0)) size_t;\n\n\n\n\nvoid * memset(void *data, int value, size_t size);\nvoid *memmove(void *dest, const void *src, size_t size);\nvoid *memcpy(void *dest, const void *src, size_t size);\nvoid *memchr(const void *arr, int value, size_t size);\nint memcmp(const void *a, const void *b, size_t size);\nchar *strcpy(char *dest, const char *src);\nunsigned strlen(const char *str);\nchar *strncpy(char *dest, const char *src, size_t n);\nint strcmp(const char *a, const char *b);\nchar *strcat(char *dest, const char *src);\nchar *strncat(char *dest, const char *src, size_t n);\nunsigned strspn(const char *a, const char *b);\nchar *strtok(char *str, const char *sep);\nchar *strstr(const char *haystack, const char *needle);\n\n\n#define GUARD_FUNCTION_TARGET_H \n#define ENUMS_ALWAYS_INT_ON _Pragma(\"enumsalwaysint on\")\n#define ENUMS_ALWAYS_INT_OFF _Pragma(\"enumsalwaysint off\")\n#define ENUMS_ALWAYS_INT_RESET _Pragma(\"enumsalwaysint reset\")\n#define ALIGN(num) __attribute__ ((aligned(num)))\n#define POKEDIAMOND_CONSTANTS_GLOBAL_H \n#define POKEDIAMOND_CONSTANTS_CHARCODE_H \n#define CHAR_NUL 0\n#define CHAR_JP_SPACE 1\n#define CHAR_JP_HIRA_A_SMALL 2\n#define CHAR_JP_HIRA_A 3\n#define CHAR_JP_HIRA_I_SMALL 4\n#define CHAR_JP_HIRA_I 5\n#define CHAR_JP_HIRA_U_SMALL 6\n#define CHAR_JP_HIRA_U 7\n#define CHAR_JP_HIRA_E_SMALL 8\n#define CHAR_JP_HIRA_E 9\n#define CHAR_JP_HIRA_O_SMALL 10\n#define CHAR_JP_HIRA_O 11\n#define CHAR_JP_HIRA_KA 12\n#define CHAR_JP_HIRA_GA 13\n#define CHAR_JP_HIRA_KI 14\n#define CHAR_JP_HIRA_GI 15\n#define CHAR_JP_HIRA_KU 16\n#define CHAR_JP_HIRA_GU 17\n#define CHAR_JP_HIRA_KE 18\n#define CHAR_JP_HIRA_GE 19\n#define CHAR_JP_HIRA_KO 20\n#define CHAR_JP_HIRA_GO 21\n#define CHAR_JP_HIRA_SA 22\n#define CHAR_JP_HIRA_ZA 23\n#define CHAR_JP_HIRA_SI 24\n#define CHAR_JP_HIRA_ZI 25\n#define CHAR_JP_HIRA_SU 26\n#define CHAR_JP_HIRA_ZU 27\n#define CHAR_JP_HIRA_SE 28\n#define CHAR_JP_HIRA_ZE 29\n#define CHAR_JP_HIRA_SO 30\n#define CHAR_JP_HIRA_ZO 31\n#define CHAR_JP_HIRA_TA 32\n#define CHAR_JP_HIRA_DA 33\n#define CHAR_JP_HIRA_TI 34\n#define CHAR_JP_HIRA_DI 35\n#define CHAR_JP_HIRA_TU_SMALL 36\n#define CHAR_JP_HIRA_TU 37\n#define CHAR_JP_HIRA_DU 38\n#define CHAR_JP_HIRA_TE 39\n#define CHAR_JP_HIRA_DE 40\n#define CHAR_JP_HIRA_TO 41\n#define CHAR_JP_HIRA_DO 42\n#define CHAR_JP_HIRA_NA 43\n#define CHAR_JP_HIRA_NI 44\n#define CHAR_JP_HIRA_NU 45\n#define CHAR_JP_HIRA_NE 46\n#define CHAR_JP_HIRA_NO 47\n#define CHAR_JP_HIRA_HA 48\n#define CHAR_JP_HIRA_BA 49\n#define CHAR_JP_HIRA_PA 50\n#define CHAR_JP_HIRA_HI 51\n#define CHAR_JP_HIRA_BI 52\n#define CHAR_JP_HIRA_PI 53\n#define CHAR_JP_HIRA_HU 54\n#define CHAR_JP_HIRA_BU 55\n#define CHAR_JP_HIRA_PU 56\n#define CHAR_JP_HIRA_HE 57\n#define CHAR_JP_HIRA_BE 58\n#define CHAR_JP_HIRA_PE 59\n#define CHAR_JP_HIRA_HO 60\n#define CHAR_JP_HIRA_BO 61\n#define CHAR_JP_HIRA_PO 62\n#define CHAR_JP_HIRA_MA 63\n#define CHAR_JP_HIRA_MI 64\n#define CHAR_JP_HIRA_MU 65\n#define CHAR_JP_HIRA_ME 66\n#define CHAR_JP_HIRA_MO 67\n#define CHAR_JP_HIRA_YA_SMALL 68\n#define CHAR_JP_HIRA_YA 69\n#define CHAR_JP_HIRA_YU_SMALL 70\n#define CHAR_JP_HIRA_YU 71\n#define CHAR_JP_HIRA_YO_SMALL 72\n#define CHAR_JP_HIRA_YO 73\n#define CHAR_JP_HIRA_RA 74\n#define CHAR_JP_HIRA_RI 75\n#define CHAR_JP_HIRA_RU 76\n#define CHAR_JP_HIRA_RE 77\n#define CHAR_JP_HIRA_RO 78\n#define CHAR_JP_HIRA_WA 79\n#define CHAR_JP_HIRA_WO 80\n#define CHAR_JP_HIRA_N_ 81\n#define CHAR_JP_KATA_A_SMALL 82\n#define CHAR_JP_KATA_A 83\n#define CHAR_JP_KATA_I_SMALL 84\n#define CHAR_JP_KATA_I 85\n#define CHAR_JP_KATA_U_SMALL 86\n#define CHAR_JP_KATA_U 87\n#define CHAR_JP_KATA_E_SMALL 88\n#define CHAR_JP_KATA_E 89\n#define CHAR_JP_KATA_O_SMALL 90\n#define CHAR_JP_KATA_O 91\n#define CHAR_JP_KATA_KA 92\n#define CHAR_JP_KATA_GA 93\n#define CHAR_JP_KATA_KI 94\n#define CHAR_JP_KATA_GI 95\n#define CHAR_JP_KATA_KU 96\n#define CHAR_JP_KATA_GU 97\n#define CHAR_JP_KATA_KE 98\n#define CHAR_JP_KATA_GE 99\n#define CHAR_JP_KATA_KO 100\n#define CHAR_JP_KATA_GO 101\n#define CHAR_JP_KATA_SA 102\n#define CHAR_JP_KATA_ZA 103\n#define CHAR_JP_KATA_SI 104\n#define CHAR_JP_KATA_ZI 105\n#define CHAR_JP_KATA_SU 106\n#define CHAR_JP_KATA_ZU 107\n#define CHAR_JP_KATA_SE 108\n#define CHAR_JP_KATA_ZE 109\n#define CHAR_JP_KATA_SO 110\n#define CHAR_JP_KATA_ZO 111\n#define CHAR_JP_KATA_TA 112\n#define CHAR_JP_KATA_DA 113\n#define CHAR_JP_KATA_TI 114\n#define CHAR_JP_KATA_DI 115\n#define CHAR_JP_KATA_TU_SMALL 116\n#define CHAR_JP_KATA_TU 117\n#define CHAR_JP_KATA_DU 118\n#define CHAR_JP_KATA_TE 119\n#define CHAR_JP_KATA_DE 120\n#define CHAR_JP_KATA_TO 121\n#define CHAR_JP_KATA_DO 122\n#define CHAR_JP_KATA_NA 123\n#define CHAR_JP_KATA_NI 124\n#define CHAR_JP_KATA_NU 125\n#define CHAR_JP_KATA_NE 126\n#define CHAR_JP_KATA_NO 127\n#define CHAR_JP_KATA_HA 128\n#define CHAR_JP_KATA_BA 129\n#define CHAR_JP_KATA_PA 130\n#define CHAR_JP_KATA_HI 131\n#define CHAR_JP_KATA_BI 132\n#define CHAR_JP_KATA_PI 133\n#define CHAR_JP_KATA_HU 134\n#define CHAR_JP_KATA_BU 135\n#define CHAR_JP_KATA_PU 136\n#define CHAR_JP_KATA_HE 137\n#define CHAR_JP_KATA_BE 138\n#define CHAR_JP_KATA_PE 139\n#define CHAR_JP_KATA_HO 140\n#define CHAR_JP_KATA_BO 141\n#define CHAR_JP_KATA_PO 142\n#define CHAR_JP_KATA_MA 143\n#define CHAR_JP_KATA_MI 144\n#define CHAR_JP_KATA_MU 145\n#define CHAR_JP_KATA_ME 146\n#define CHAR_JP_KATA_MO 147\n#define CHAR_JP_KATA_YA_SMALL 148\n#define CHAR_JP_KATA_YA 149\n#define CHAR_JP_KATA_YU_SMALL 150\n#define CHAR_JP_KATA_YU 151\n#define CHAR_JP_KATA_YO_SMALL 152\n#define CHAR_JP_KATA_YO 153\n#define CHAR_JP_KATA_RA 154\n#define CHAR_JP_KATA_RI 155\n#define CHAR_JP_KATA_RU 156\n#define CHAR_JP_KATA_RE 157\n#define CHAR_JP_KATA_RO 158\n#define CHAR_JP_KATA_WA 159\n#define CHAR_JP_KATA_WO 160\n#define CHAR_JP_KATA_N_ 161\n#define CHAR_JP_0 162\n#define CHAR_JP_1 163\n#define CHAR_JP_2 164\n#define CHAR_JP_3 165\n#define CHAR_JP_4 166\n#define CHAR_JP_5 167\n#define CHAR_JP_6 168\n#define CHAR_JP_7 169\n#define CHAR_JP_8 170\n#define CHAR_JP_9 171\n#define CHAR_JP_A 172\n#define CHAR_JP_B 173\n#define CHAR_JP_C 174\n#define CHAR_JP_D 175\n#define CHAR_JP_E 176\n#define CHAR_JP_F 177\n#define CHAR_JP_QUESTION_MARK 226\n#define CHAR_JP_HYPHEN 241\n#define CHAR_0 289\n#define CHAR_1 290\n#define CHAR_2 291\n#define CHAR_3 292\n#define CHAR_4 293\n#define CHAR_5 294\n#define CHAR_6 295\n#define CHAR_7 296\n#define CHAR_8 297\n#define CHAR_9 298\n#define CHAR_A 299\n#define CHAR_B 300\n#define CHAR_C 301\n#define CHAR_D 302\n#define CHAR_E 303\n#define CHAR_F 304\n#define CHAR_G 305\n#define CHAR_H 306\n#define CHAR_I 307\n#define CHAR_J 308\n#define CHAR_K 309\n#define CHAR_L 310\n#define CHAR_M 311\n#define CHAR_N 312\n#define CHAR_O 313\n#define CHAR_P 314\n#define CHAR_Q 315\n#define CHAR_R 316\n#define CHAR_S 317\n#define CHAR_T 318\n#define CHAR_U 319\n#define CHAR_V 320\n#define CHAR_W 321\n#define CHAR_X 322\n#define CHAR_Y 323\n#define CHAR_Z 324\n#define CHAR_a 325\n#define CHAR_b 326\n#define CHAR_c 327\n#define CHAR_d 328\n#define CHAR_e 329\n#define CHAR_f 330\n#define CHAR_g 331\n#define CHAR_h 332\n#define CHAR_i 333\n#define CHAR_j 334\n#define CHAR_k 335\n#define CHAR_l 336\n#define CHAR_m 337\n#define CHAR_n 338\n#define CHAR_o 339\n#define CHAR_p 340\n#define CHAR_q 341\n#define CHAR_r 342\n#define CHAR_s 343\n#define CHAR_t 344\n#define CHAR_u 345\n#define CHAR_v 346\n#define CHAR_w 347\n#define CHAR_x 348\n#define CHAR_y 349\n#define CHAR_z 350\n#define CHAR_ELLIPSIS 431\n#define CHAR_HYPHEN 446\n#define CHAR_SPACE 478\n#define CHAR_NARROW_SPACE 482\n#define CHAR_ONE_DOT 491\n#define CHAR_TWO_DOTS 492\n#define CHAR_LF 0xE000\n#define TRNAMECODE 0xF100\n#define EXT_CTRL_CODE_BEGIN 0xFFFE\n#define EOS 0xFFFF\n#define TRNAME_MASK 0x1FF\n#define EOS_TRNAME 0x1FF\n#define POKEMON_NAME_LENGTH 10\n#define PLAYER_NAME_LENGTH 7\n#define POKEDIAMOND_ERROR_HANDLING_H \nvoid GF_AssertFail(void);\n#define NELEMS(a) (sizeof(a) / sizeof(*(a)))\n#define GF_ASSERT(expr) do {if (!(expr)) GF_AssertFail();} while (0)\nextern const u8 gGameLanguage;\nextern const u8 gGameVersion;\n#pragma thumb on\n#define POKEDIAMOND_BLACKOUT_H \n#define POKEDIAMOND_FIELD_SYSTEM_H \n#define POKEDIAMOND_BG_WINDOW_H \n#define NNSYS_NNS_G2D_H \n#define GUARD_GX_H \n#define GUARD_FX_H \n#define GUARD_FX_TYPES_H \ntypedef s16 fx16;\ntypedef s32 fx32;\ntypedef s64 fx64;\ntypedef s64 fx64c;\n#define FX16_INT_MASK 0xF000\n#define FX16_INT_ABS_MASK 0x7000\n#define FX16_FRAC_MASK 0x0FFF\n#define FX16_INT_SHIFT 0xC\n#define FX32_INT_MASK 0xFFFFF000\n#define FX32_INT_ABS_MASK 0x7FFFF000\n#define FX32_FRAC_MASK 0x00000FFF\n#define FX32_INT_SHIFT 0xC\n#define FX64_INT_MASK 0xFFFFFFFFFFFFF000\n#define FX64_INT_ABS_MASK 0x7FFFFFFFFFFFF000\n#define FX64_FRAC_MASK 0x0000000000000FFF\n#define FX64_INT_SHIFT 0xC\n#define FX64C_INT_MASK 0xFFFFFFFF00000000\n#define FX64C_INT_ABS_MASK 0x7FFFFFFF00000000\n#define FX64C_FRAC_MASK 0x00000000FFFFFFFF\n#define FX64C_INT_SHIFT 0x20\n#define FX_INT(TYPE,x) (((x) & TYPE ## _INT_MASK) >> TYPE ## _INT_SHIFT)\n#define FX_INT_ABS(TYPE,x) (((x) & TYPE ## _INT_ABS_MASK) >> TYPE ## _INT_SHIFT)\n#define FX_FRAC(TYPE,x) ((x) & TYPE ## _FRAC_MASK)\n#define FX16_INT(x) FX_INT(FX16, x)\n#define FX16_INT_ABS(x) FX_INT_ABS(FX16, x)\n#define FX16_FRAC(x) FX_FRAC(FX16, x)\n#define FX32_INT(x) FX_INT(FX32, x)\n#define FX32_INT_ABS(x) FX_INT_ABS(FX32, x)\n#define FX32_FRAC(x) FX_FRAC(FX32, x)\n#define FX64_INT(x) FX_INT(FX64, x)\n#define FX64_INT_ABS(x) FX_INT_ABS(FX64, x)\n#define FX64_FRAC(x) FX_FRAC(FX64, x)\n#define FX64C_INT(x) FX_INT(FX64C, x)\n#define FX64C_INT_ABS(x) FX_INT_ABS(FX64C, x)\n#define FX64C_FRAC(x) FX_FRAC(FX64C, x)\n#define FX32_MUL_NO_ROUND(a,b) ((fx32)(((fx64)(a) * (b)) >> FX32_INT_SHIFT))\n#define FX32_MUL(a,b) ((fx32)((((fx64)(a) * (b) + (1 << (FX32_INT_SHIFT - 1))) >> FX32_INT_SHIFT)))\n#define FX32_MUL_ADD_MUL(a,b,c,d) ((fx32)(((fx64)(a) * (b) + (fx64)c * d) >> FX32_INT_SHIFT))\n#define FX32_MUL_SUB_MUL(a,b,c,d) ((fx32)(((fx64)(a) * (b) - (fx64)c * d + (1 << (FX32_INT_SHIFT - 1))) >> FX32_INT_SHIFT))\n#define FX_MUL_FX32_FX64C(a,b) ((fx32)((((a) * (b) + ((fx64)1 << (FX64C_INT_SHIFT - 1))) >> FX64C_INT_SHIFT)))\n#define FX_FX16_TO_F32(x) ((f32)((x) / (f32)(1 << FX16_SHIFT)))\n#define FX_F32_TO_FX16(x) ((fx16)(((x) > 0) ? ((x) * (1 << FX16_INT_SHIFT) + 0.5f ) : ((x) * (1 << FX16_INT_SHIFT) - 0.5f )))\n#define FX_F32_TO_FX32(x) ((fx32)(((x) > 0) ? ((x) * (1 << FX32_INT_SHIFT) + 0.5f ) : ((x) * (1 << FX32_INT_SHIFT) - 0.5f )))\n#define FX16_CONST(x) FX_F32_TO_FX16(x)\n#define FX32_CONST(x) FX_F32_TO_FX32(x)\n#define FX16_ONE ((fx16)0x1000)\n#define FX32_ONE ((fx32)0x00001000L)\ntypedef struct Vecx32\n{\n    fx32 x;\n    fx32 y;\n    fx32 z;\n} VecFx32;\ntypedef struct Vecx16\n{\n    fx16 x;\n    fx16 y;\n    fx16 z;\n} VecFx16;\ntypedef struct Mtx44\n{\n    fx32 _[16];\n} MtxFx44;\ntypedef struct Mtx43\n{\n    fx32 _[12];\n} MtxFx43;\ntypedef struct Mtx33\n{\n    fx32 _[9];\n} MtxFx33;\ntypedef struct Mtx22\n{\n    fx32 _[4];\n} MtxFx22;\n#define GUARD_GX_G3_UTIL_H \nvoid G3i_PerspectiveW_(fx32 fovsin, fx32 fovcos, fx32 ratio, fx32 near, fx32 far, fx32 scale, u32 load, struct Mtx44 *mtx);\nvoid G3i_OrthoW_(fx32 top, fx32 bottom, fx32 left, fx32 right, fx32 near, fx32 far, fx32 scale, u32 load, struct Mtx44 *mtx);\nvoid G3i_LookAt_(const struct Vecx32 *a, const struct Vecx32 *b, const struct Vecx32 *c, BOOL load, struct Mtx43 *mtx);\nvoid G3_RotX(fx32 sinphi, fx32 cosphi);\nvoid G3_RotY(fx32 sinphi, fx32 cosphi);\nvoid G3_RotZ(fx32 sinphi, fx32 cosphi);\nvoid FX_Init();\nfx32 FX_Modf(fx32 x, fx32 *iptr);\nu16 FX_Atan(fx32 x);\nu16 FX_Atan2(fx32 x, fx32 y);\nvoid VEC_Add(const struct Vecx32 *a, const struct Vecx32 *b, struct Vecx32 *dst);\nvoid VEC_Subtract(const struct Vecx32 *a, const struct Vecx32 *b, struct Vecx32 *dst);\nvoid VEC_Fx16Add(struct Vecx16 *x, struct Vecx16 *y, struct Vecx16 *dst);\nfx32 VEC_DotProduct(const struct Vecx32 *a, const struct Vecx32 *b);\nfx32 VEC_Fx16DotProduct(struct Vecx16 *a, struct Vecx16 *b);\nvoid VEC_CrossProduct(const struct Vecx32 *a, const struct Vecx32 *b, struct Vecx32 *dst);\nvoid VEC_Fx16CrossProduct(struct Vecx16 *a, struct Vecx16 *b, struct Vecx16 *dst);\nfx32 VEC_Mag(struct Vecx32 *a);\nvoid VEC_Normalize(const struct Vecx32 *a, struct Vecx32 *dst);\nvoid VEC_Fx16Normalize(struct Vecx16 *a, struct Vecx16 *dst);\nvoid VEC_MultAdd(fx32 factor, struct Vecx32 *a, struct Vecx32 *b, struct Vecx32 *dst);\nfx32 FX_Div(fx32 numerator, fx32 denominator);\nfx32 FX_Inv(fx32 x);\nfx32 FX_Sqrt(fx32 x);\nfx64 FX_GetDivResultFx64c();\nfx32 FX_GetDivResult();\nvoid FX_InvAsync(fx32 x);\nfx32 FX_GetSqrtResult();\nvoid FX_DivAsync(fx32 numerator, fx32 denominator);\nfx32 FX_DivS32(fx32 numerator, fx32 denominator);\nfx32 FX_ModS32(fx32 num, fx32 mod);\nvoid MTX_TransApply44(struct Mtx44 *mtx, struct Mtx44 *dst, fx32 x, fx32 y, fx32 z);\nvoid MTX_Concat44(struct Mtx44 *a, struct Mtx44 *b, struct Mtx44 *c);\nvoid MTX_Identity44_(struct Mtx44 *dst);\nvoid MTX_Copy44To43_(struct Mtx44 *src, struct Mtx43 *dst);\nvoid MTX_RotX44_(struct Mtx44 *mtx, fx32 sinphi, fx32 cosphi);\nvoid MTX_RotY44_(struct Mtx44 *mtx, fx32 sinphi, fx32 cosphi);\nvoid MTX_RotZ44_(struct Mtx44 *mtx, fx32 sinphi, fx32 cosphi);\nvoid MTX_ScaleApply43(struct Mtx43 *mtx, struct Mtx43 *dst, fx32 x, fx32 y, fx32 z);\nfx32 MTX_Inverse43(struct Mtx43 *mtx, struct Mtx43 *inv);\nvoid MTX_Concat43(struct Mtx43 *a, struct Mtx43 *b, struct Mtx43 *c);\nvoid MTX_MultVec43(struct Vecx32 *vec, struct Mtx43 *mtx, struct Vecx32 *dst);\nvoid MTX_Identity43_(struct Mtx43 *mtx);\nvoid MTX_Copy43To44_(struct Mtx43 *src, struct Mtx44 *dst);\nvoid MTX_Scale43_(struct Mtx43 *dst, fx32 x, fx32 y, fx32 z);\nvoid MTX_RotX43_(struct Mtx43 *mtx, fx32 sinphi, fx32 cosphi);\nvoid MTX_RotY43_(struct Mtx43 *mtx, fx32 sinphi, fx32 cosphi);\nvoid MTX_ScaleApply33(struct Mtx33 *mtx, struct Mtx33 *dst, fx32 x, fx32 y, fx32 z);\nvoid MTX_Concat33(struct Mtx33 *a, struct Mtx33 *b, struct Mtx33 *c);\nvoid MTX_MultVec33(struct Vecx32 *vec, struct Mtx33 *mtx, struct Vecx32 *dst);\nvoid MTX_Identity33_(struct Mtx33 *mtx);\nvoid MTX_RotX33_(struct Mtx33 *mtx, fx32 sinphi, fx32 cosphi);\nvoid MTX_RotY33_(struct Mtx33 *mtx, fx32 sinphi, fx32 cosphi);\nvoid MTX_RotZ33_(struct Mtx33 *mtx, fx32 sinphi, fx32 cosphi);\nvoid MTX_ScaleApply22(struct Mtx22 *mtx, struct Mtx22 *dst, fx32 x, fx32 y);\nvoid MTX_Identity22_(struct Mtx22 *mtx);\nvoid MTX_Rot22_(struct Mtx22 *mtx, fx32 sinphi, fx32 cosphi);\nextern const fx16 FX_SinCosTable_[];\nstatic inline fx16 FX_SinIdx(int idx)\n{\n    return FX_SinCosTable_[((idx >> 4) << 1)];\n}\nstatic inline fx16 FX_CosIdx(int idx)\n{\n    return FX_SinCosTable_[((idx >> 4) << 1) + 1];\n}\nstatic inline fx32 FX32_CAST(s64 res)\n{\n    return (fx32)res;\n}\nstatic inline fx32 FX_MulInline(fx32 v1, fx32 v2)\n{\n    return FX32_CAST(((s64)v1 * v2 + 0x800LL) >> 0xC);\n}\n#define FX_Mul(v1,v2) FX_MulInline(v1, v2)\nstatic inline void VEC_Set(struct Vecx32 * vec, fx32 x, fx32 y, fx32 z)\n{\n    vec->x = x;\n    vec->y = y;\n    vec->z = z;\n}\nstatic inline void MTX_LookAt(const VecFx32 * camPos, const VecFx32 * camUp, const VecFx32 * target, MtxFx43 * mtx)\n{\n    G3i_LookAt_(camPos, camUp, target, 0, mtx);\n}\nstatic inline void MTX_Perspective(fx32 fovySin, fx32 fovyCos, fx32 aspect, fx32 n, fx32 f, MtxFx44 * mtx)\n{\n    G3i_PerspectiveW_(fovySin, fovyCos, aspect, n, f, ((fx32)0x00001000L), 0, mtx);\n}\nstatic inline void MTX_Ortho(fx32 t, fx32 b, fx32 l, fx32 r, fx32 n, fx32 f, MtxFx44 * mtx)\n{\n    G3i_OrthoW_(t, b, l, r, n, f, ((fx32)0x00001000L), 0, mtx);\n}\n#define POKEDIAMOND_ARM9_MI_MEMORY_H \nvoid MIi_CpuClear16(register u16 data, register void *destp, register u32 size);\nvoid MIi_CpuCopy16(register const void *srcp, register void *destp, register u32 size);\nvoid MIi_CpuClear32(register u32 data, register void *destp, register u32 size);\nvoid MIi_CpuCopy32(register const void *srcp, register void *destp, register u32 size);\nvoid MIi_CpuSend32(register const void *srcp, volatile void *destp, u32 size);\nvoid MIi_CpuClearFast(register u32 data, register void *destp, register u32 size);\nvoid MIi_CpuCopyFast(register const void *srcp, register void *destp, register u32 size);\nvoid MI_Copy32B(register const void *pSrc, register void *pDest);\nvoid MI_Copy36B(register const void *pSrc, register void *pDest);\nvoid MI_Copy48B(register const void *pSrc, register void *pDest);\nvoid MI_Copy64B(register const void *pSrc, register void *pDest);\nvoid MI_CpuFill8(register void *dstp, register u8 data, register u32 size);\nvoid MI_CpuCopy8(register const void *srcp, register void *dstp, register u32 size);\nvoid MI_Zero36B(register void *pDest);\nstatic inline void MI_CpuClearFast(void *destp, u32 size) {\n    MIi_CpuClearFast(0, destp, size);\n}\nstatic inline void MI_CpuClear8(void *dest, u32 size) {\n    MI_CpuFill8(dest, 0, size);\n}\nstatic inline void MI_CpuFill16(void *dest, u16 data, u32 size)\n{\n    MIi_CpuClear16(data, dest, size);\n}\nstatic inline void MI_CpuClear16(void * destp, u32 size)\n{\n    MIi_CpuClear16(0, destp, size);\n}\nstatic inline void MI_CpuFill32(void *dest, u32 data, u32 size)\n{\n    MIi_CpuClear32(data, dest, size);\n}\nstatic inline void MI_CpuClear32(void *dest, u32 size)\n{\n    MI_CpuFill32(dest, 0, size);\n}\nstatic inline void MI_CpuCopy16(const void *src, void *dest, u32 size)\n{\n    MIi_CpuCopy16(src, dest, size);\n}\nstatic inline void MI_CpuCopy32(const void *src, void *dest, u32 size)\n{\n    MIi_CpuCopy32(src, dest, size);\n}\nstatic inline void MI_CpuFillFast(void *dest, u32 data, u32 size)\n{\n    MIi_CpuClearFast(data, dest, size);\n}\nstatic inline void MI_CpuCopyFast(const void *src, void *dest, u32 size)\n{\n    MIi_CpuCopyFast(src, dest, size);\n}\n#define POKEDIAMOND_ARM9_MI_DMA_H \n#define GUARD_DMA_SHARED_H \n#define REG_ADDR_DMA0SAD 0x040000b0\n#define DMA_DEST_INC 0x0000\n#define DMA_DEST_DEC 0x0020\n#define DMA_DEST_FIXED 0x0040\n#define DMA_DEST_RELOAD 0x0060\n#define DMA_SRC_INC 0x0000\n#define DMA_SRC_DEC 0x0080\n#define DMA_SRC_FIXED 0x0100\n#define DMA_REPEAT 0x0200\n#define DMA_16BIT 0x0000\n#define DMA_32BIT 0x0400\n#define DMA_DREQ_ON 0x0800\n#define DMA_START_NOW 0x0000\n#define DMA_START_VBLANK 0x1000\n#define DMA_START_HBLANK 0x2000\n#define DMA_START_SPECIAL 0x3000\n#define DMA_START_MASK 0x3000\n#define DMA_INTR_ENABLE 0x4000\n#define DMA_ENABLE 0x8000\n#define POKEDIAMOND_ARM9_CONSTS_H \n#define POKEDIAMOND_CONSTS_SHARED_H \n#define POKEDIAMOND_MMAP_SHARED_H \n#define HW_MAIN_MEM 0x02000000\n#define HW_MAIN_MEM_SIZE 0x00400000\n#define HW_MAIN_MEM_MAIN_SIZE 0x003E0000\n#define HW_MAIN_MEM_SHARED_SIZE 0x00001000\n#define HW_WRAM 0x037F8000\n#define HW_MAIN_MEM_SYSTEM (HW_MAIN_MEM + 0x007ffc00)\n#define HW_WM_BOOT_BUF (HW_MAIN_MEM + 0x007ffc40)\n#define HW_ARENA_INFO_BUF (HW_MAIN_MEM + 0x007ffda0)\n#define HW_CTRDG_LOCK_BUF (HW_MAIN_MEM + 0x007fffe8)\n#define HW_INIT_LOCK_BUF (HW_MAIN_MEM + 0x007ffff0)\n#define HW_MAIN_MEM_MAIN_END (HW_MAIN_MEM + HW_MAIN_MEM_MAIN_SIZE)\n#define HW_SVC_STACK_SIZE 0x00000040\n#define HW_BUTTON_XY_BUF (HW_MAIN_MEM + 0x007FFFA8)\n#define POKEDIAMOND_REGISTERS_SHARED_H \n#define reg_OS_TM0CNT_L (*(REGType16v *)0x4000100)\n#define reg_OS_TM0CNT_H (*(REGType16v *)0x4000102)\n#define reg_OS_TM1CNT_L (*(REGType16v *)0x4000104)\n#define reg_OS_TM1CNT_H (*(REGType16v *)0x4000106)\n#define reg_OS_TM2CNT_L (*(REGType16v *)0x4000108)\n#define reg_OS_TM2CNT_H (*(REGType16v *)0x400010a)\n#define reg_OS_TM3CNT_L (*(REGType16v *)0x400010c)\n#define reg_OS_TM3CNT_H (*(REGType16v *)0x400010e)\n#define reg_OS_IME (*(REGType16v *)0x4000208)\n#define reg_OS_IE (*(REGType32v *)0x4000210)\n#define reg_OS_IF (*(REGType32v *)0x4000214)\n#define REG_OS_TM0CNT_H_PS_SHIFT 0\n#define HW_PSR_CPU_MODE_MASK 0x1f\n#define HW_PSR_DISABLE_FIQ 0x40\n#define HW_PSR_DISABLE_IRQ 0x80\n#define HW_PSR_DISABLE_IRQ_FIQ 0xc0\n#define OSi_ROUND(n,a) (((u32) (n) + (a) - 1) & ~((a) - 1))\n#define OSi_TRUNC(n,a) (((u32) (n)) & ~((a) - 1))\n#define OSi_InRange(targ,a,b) ((u32)(a) <= (u32)(targ) && (u32)(targ) < (u32)(b))\n#define OSi_OFFSET(n,a) (((u32) (n)) & ((a) - 1))\n#define OS_THREAD_SPECIFIC_MAX 0x03\n#define OS_THREAD_LAUNCHER_PRIORITY 0x10\n#define OS_THREAD_PRIORITY_MIN 0x00\n#define OS_THREAD_PRIORITY_MAX 0x1F\n#define HW_SYSTEM_CLOCK 33514000\n#define OSi_GetArenaInfo() (*(OSArenaInfo*)HW_ARENA_INFO_BUF)\n#define HW_C5_PERMIT_MASK 0xf\n#define HW_C5_PERMIT_RO 5\n#define HW_C5_PERMIT_RW 1\n#define HW_C5_PR3_SFT 12\n#define HW_C6_PR_4KB 0x16\n#define HW_C6_PR_8KB 0x18\n#define HW_C6_PR_16KB 0x1a\n#define HW_C6_PR_32KB 0x1c\n#define HW_C6_PR_64KB 0x1e\n#define HW_C6_PR_128KB 0x20\n#define HW_C6_PR_256KB 0x22\n#define HW_C6_PR_512KB 0x24\n#define HW_C6_PR_1MB 0x26\n#define HW_C6_PR_2MB 0x28\n#define HW_C6_PR_4MB 0x2a\n#define HW_C6_PR_8MB 0x2c\n#define HW_C6_PR_16MB 0x2e\n#define HW_C6_PR_32MB 0x30\n#define HW_C6_PR_64MB 0x32\n#define HW_C6_PR_128MB 0x34\n#define HW_C6_PR_256MB 0x36\n#define HW_C6_PR_512MB 0x38\n#define HW_C6_PR_1GB 0x3a\n#define HW_C6_PR_2GB 0x3c\n#define HW_C6_PR_4GB 0x3e\n#define HW_C6_PR_ENABLE 1\n#define HW_C9_TCMR_16KB 0x0a\n#define HW_C9_TCMR_32MB 0x20\n#define HW_CACHE_LINE_SIZE 32\n#define OSi_CONSOLE_NOT_DETECT 0xffffffff\n#define OS_CONSOLE_NITRO 0x80000000\n#define OS_CONSOLE_DEV_CARD 0x02000000\n#define OS_CONSOLE_SIZE_MASK 0x00000003\n#define OS_CONSOLE_SIZE_4MB 0x00000001\n#define OSi_TCM_REGION_BASE_MASK 0xfffff000\n#define OS_IE_VBLANK (1UL << 0)\n#define OS_IE_HBLANK (1UL << 1)\n#define HW_CPU_CLOCK_ARM9 67027964\n#define REG_PXI_SUBP_FIFO_CNT_E_MASK 0x8000\n#define REG_PXI_SUBP_FIFO_CNT_ERR_MASK 0x4000\n#define REG_PXI_SUBP_FIFO_CNT_RECV_RI_MASK 0x0400\n#define REG_PXI_SUBP_FIFO_CNT_RECV_EMP_MASK 0x0100\n#define REG_PXI_SUBP_FIFO_CNT_SEND_CL_MASK 0x0008\n#define REG_PXI_SUBP_FIFO_CNT_SEND_FULL_MASK 0x0002\n#define POKEDIAMOND_ARM9_OS_SYSTEM_H \n#define POKEDIAMOND_OS_SYSTEM_SHARED_H \ntypedef enum {\n    OS_PROCMODE_USER=16,\n    OS_PROCMODE_FIQ=17,\n    OS_PROCMODE_IRQ=18,\n    OS_PROCMODE_SVC=19,\n    OS_PROCMODE_ABORT=23,\n    OS_PROCMODE_UNDEF=27,\n    OS_PROCMODE_SYS=31\n} OSProcMode;\ntypedef enum {\n    OS_INTRMODE_DISABLE_IRQ = 0x80,\n    OS_INTRMODE_DISABLE_FIQ = 0x40,\n    OS_INTRMODE_ENABLE = 0\n} OSIntrMode;\nOSIntrMode OS_EnableInterrupts(void);\nOSIntrMode OS_DisableInterrupts(void);\nOSIntrMode OS_RestoreInterrupts(OSIntrMode state);\nOSIntrMode OS_DisableInterrupts_IrqAndFiq(void);\nOSIntrMode OS_RestoreInterrupts_IrqAndFiq(OSIntrMode state);\nOSIntrMode OS_GetCpsrIrq(void);\nOSProcMode OS_GetProcMode(void);\nvoid OS_SpinWait(u32 cycles);\nvoid OS_WaitVBlankIntr(void);\ntypedef void (*MIDmaCallback)(void *);\n#define MI_DMA_MAX_NUM 3\n#define REG_ADDR_DMA0CNT 0x40000b8\n#define REG_ADDR_DMA0_CLR_DATA 0x40000e0\n#define MI_CNT_CLEAR32(size) (0x85000000 | ((size)/4))\n#define MI_CNT_CLEAR32_IF(size) (0xc5000000 | ((size)/4))\n#define MI_CNT_COPY32(size) (0x84000000 | ((size)/4))\n#define MI_CNT_COPY32_IF(size) (0xc4000000 | ((size)/4))\n#define MI_CNT_COPY16(size) (0x80000000 | ((size)/2))\n#define MI_DMA_SRC_FIX (2UL << 23)\n#define MI_DMA_SRC_INC (0UL << 23)\n#define MI_DMA_16BIT_BUS (0UL << 26)\n#define MI_DMA_32BIT_BUS (1UL << 26)\n#define MIi_DMA_TIMING_ANY (u32)(~0)\n#define MI_DMA_TIMING_H_BLANK (2UL << 27)\ntypedef union\n{\n    u32 b32;\n    u16 b16;\n} MIiDmaClearSrc;\nvoid MI_DmaFill32(u32 dmaNo, void *dest, u32 data, u32 size);\nvoid MI_DmaCopy32(u32 dmaNo, const void *src, void *dest, u32 size);\nvoid MI_DmaCopy16(u32 dmaNo, const void *src, void *dest, u32 size);\nvoid MI_DmaFill32Async(u32 dmaNo, void *dest, u32 data, u32 size, MIDmaCallback callback, void *arg);\nvoid MI_DmaCopy32Async(u32 dmaNo, const void *src, void *dest, u32 size, MIDmaCallback callback, void *arg);\nvoid MI_WaitDma(u32 dmaNo);\nvoid MI_StopDma(u32 dmaNo);\nvoid MIi_CheckAnotherAutoDMA(u32 dmaNo, u32 dmaType);\nvoid MIi_CheckDma0SourceAddress(u32 dmaNo, u32 src, u32 size, u32 dir);\nvoid MIi_DmaSetParams(u32 dmaNo, u32 src, u32 dest, u32 ctrl);\nvoid MIi_DmaSetParams_wait(u32 dmaNo, u32 src, u32 dest, u32 ctrl);\nvoid MIi_DmaSetParams_noInt(u32 dmaNo, u32 src, u32 dest, u32 ctrl);\nvoid MIi_DmaSetParams_wait_noInt(u32 dmaNo, u32 src, u32 dest, u32 ctrl);\nstatic inline void MIi_DmaSetParams_wait_src32(u32 dmaNo, u32 data, u32 dest, u32 ctrl)\n{\n    OSIntrMode lastIntrMode = OS_DisableInterrupts();\n    MIiDmaClearSrc *scrp = (MIiDmaClearSrc *) ((u32)0x40000e0 + dmaNo * 4);\n    scrp->b32 = data;\n    MIi_DmaSetParams_wait_noInt(dmaNo, (u32)scrp, dest, ctrl);\n    (void)OS_RestoreInterrupts(lastIntrMode);\n}\nstatic inline void MIi_DmaSetParams_src32(u32 dmaNo, u32 data, u32 dest, u32 ctrl)\n{\n    OSIntrMode lastIntrMode = OS_DisableInterrupts();\n    MIiDmaClearSrc *srcp = (MIiDmaClearSrc *) ((u32)0x40000e0 + dmaNo * 4);\n    srcp->b32 = data;\n    MIi_DmaSetParams_noInt(dmaNo, (u32)srcp, dest, ctrl);\n    (void)OS_RestoreInterrupts(lastIntrMode);\n}\nstatic inline void MIi_CallCallback(MIDmaCallback callback, void *arg)\n{\n    if (callback)\n    {\n        (callback) (arg);\n    }\n}\n#define POKEDIAMOND_OS_VRAMEXCLUSIVE_H \nvoid OSi_InitVramExclusive(void);\nBOOL OSi_TryLockVram(u16 bank, u16 lockId);\nvoid OSi_UnlockVram(u16 bank, u16 lockId);\n#define POKEDIAMOND_ARM9_REGISTERS_H \n#define reg_GX_DISPCNT (*(REGType32v *)0x4000000)\n#define reg_GX_DISPSTAT (*(REGType16v *)0x4000004)\n#define reg_GX_VCOUNT (*(REGType16v *)0x4000006)\n#define reg_G2_BG0CNT (*(REGType16v *)0x4000008)\n#define reg_G2_BG1CNT (*(REGType16v *)0x400000a)\n#define reg_G2_BG2CNT (*(REGType16v *)0x400000c)\n#define reg_G2_BG3CNT (*(REGType16v *)0x400000e)\n#define reg_G2_BG0OFS (*(REGType32v *)0x4000010)\n#define reg_G2_BG0HOFS (*(REGType16v *)0x4000010)\n#define reg_G2_BG0VOFS (*(REGType16v *)0x4000012)\n#define reg_G2_BG1OFS (*(REGType32v *)0x4000014)\n#define reg_G2_BG1HOFS (*(REGType16v *)0x4000014)\n#define reg_G2_BG1VOFS (*(REGType16v *)0x4000016)\n#define reg_G2_BG2OFS (*(REGType32v *)0x4000018)\n#define reg_G2_BG2HOFS (*(REGType16v *)0x4000018)\n#define reg_G2_BG2VOFS (*(REGType16v *)0x400001a)\n#define reg_G2_BG3OFS (*(REGType32v *)0x400001c)\n#define reg_G2_BG3HOFS (*(REGType16v *)0x400001c)\n#define reg_G2_BG3VOFS (*(REGType16v *)0x400001e)\n#define reg_G2_BG2PA (*(REGType16v *)0x4000020)\n#define reg_G2_BG2PB (*(REGType16v *)0x4000022)\n#define reg_G2_BG2PC (*(REGType16v *)0x4000024)\n#define reg_G2_BG2PD (*(REGType16v *)0x4000026)\n#define reg_G2_BG2X (*(REGType32v *)0x4000028)\n#define reg_G2_BG2Y (*(REGType32v *)0x400002c)\n#define reg_G2_BG3PA (*(REGType16v *)0x4000030)\n#define reg_G2_BG3PB (*(REGType16v *)0x4000032)\n#define reg_G2_BG3PC (*(REGType16v *)0x4000034)\n#define reg_G2_BG3PD (*(REGType16v *)0x4000036)\n#define reg_G2_BG3X (*(REGType32v *)0x4000038)\n#define reg_G2_BG3Y (*(REGType32v *)0x400003c)\n#define reg_G2_WIN0H (*(REGType16v *)0x4000040)\n#define reg_G2_WIN1H (*(REGType16v *)0x4000042)\n#define reg_G2_WIN0V (*(REGType16v *)0x4000044)\n#define reg_G2_WIN1V (*(REGType16v *)0x4000046)\n#define reg_G2_WININ (*(REGType16v *)0x4000048)\n#define reg_G2_WINOUT (*(REGType16v *)0x400004a)\n#define reg_G2_MOSAIC (*(REGType16v *)0x400004c)\n#define reg_G2_BLEND (*(REGType32v *)0x4000050)\n#define reg_G2_BLDCNT (*(REGType16v *)0x4000050)\n#define reg_G2_BLDALPHA (*(REGType16v *)0x4000052)\n#define reg_G2_BLDY (*(REGType16v *)0x4000054)\n#define reg_G3X_DISP3DCNT (*(REGType16v *)0x4000060)\n#define reg_GX_DISPCAPCNT (*(REGType32v *)0x4000064)\n#define reg_GX_DISP_MMEM_FIFO (*(REGType32v *)0x4000068)\n#define reg_GX_DISP_MMEM_FIFO_L (*(REGType16v *)0x4000068)\n#define reg_GX_DISP_MMEM_FIFO_H (*(REGType16v *)0x400006a)\n#define reg_GX_MASTER_BRIGHT (*(REGType16v *)0x400006c)\n#define reg_GX_TVOUTCNT (*(REGType16v *)0x4000070)\n#define reg_MI_DMA0SAD (*(REGType32v *)0x40000b0)\n#define reg_MI_DMA0DAD (*(REGType32v *)0x40000b4)\n#define reg_MI_DMA0CNT (*(REGType32v *)0x40000b8)\n#define reg_MI_DMA1SAD (*(REGType32v *)0x40000bc)\n#define reg_MI_DMA1DAD (*(REGType32v *)0x40000c0)\n#define reg_MI_DMA1CNT (*(REGType32v *)0x40000c4)\n#define reg_MI_DMA2SAD (*(REGType32v *)0x40000c8)\n#define reg_MI_DMA2DAD (*(REGType32v *)0x40000cc)\n#define reg_MI_DMA2CNT (*(REGType32v *)0x40000d0)\n#define reg_MI_DMA3SAD (*(REGType32v *)0x40000d4)\n#define reg_MI_DMA3DAD (*(REGType32v *)0x40000d8)\n#define reg_MI_DMA3CNT (*(REGType32v *)0x40000dc)\n#define reg_MI_DMA0_CLR_DATA (*(REGType32v *)0x40000e0)\n#define reg_MI_DMA1_CLR_DATA (*(REGType32v *)0x40000e4)\n#define reg_MI_DMA2_CLR_DATA (*(REGType32v *)0x40000e8)\n#define reg_MI_DMA3_CLR_DATA (*(REGType32v *)0x40000ec)\n#define reg_EXI_SIODATA32 (*(REGType32v *)0x4000120)\n#define reg_EXI_SIOCNT (*(REGType16v *)0x4000128)\n#define reg_EXI_SIOSEL (*(REGType32v *)0x400012c)\n#define reg_PAD_KEYINPUT (*(REGType16v *)0x4000130)\n#define reg_PAD_KEYCNT (*(REGType16v *)0x4000132)\n#define REG_SUBPINTF_ADDR 0x4000180\n#define reg_PXI_SUBPINTF (*(REGType16v *)REG_SUBPINTF_ADDR)\n#define reg_PXI_SUBP_FIFO_CNT (*(REGType16v *)0x4000184)\n#define reg_PXI_SEND_FIFO (*(REGType32v *)0x4000188)\n#define reg_MI_MCCNT0 (*(REGType16v *)0x40001a0)\n#define reg_CARD_MASTERCNT (*(REGType8v *)0x40001a1)\n#define reg_MI_MCD0 (*(REGType16v *)0x40001a2)\n#define reg_MI_MCCNT1 (*(REGType32v *)0x40001a4)\n#define reg_CARD_CNT (*(REGType32v *)0x40001a4)\n#define reg_MI_MCCMD0 (*(REGType32v *)0x40001a8)\n#define reg_CARD_CMD (*(REGType8v *)0x40001a8)\n#define reg_MI_MCCMD1 (*(REGType32v *)0x40001ac)\n#define reg_MI_EXMEMCNT (*(REGType16v *)0x4000204)\n#define reg_OS_PAUSE (*(REGType16v *)0x4000300)\n#define reg_GX_VRAMCNT (*(REGType32v *)0x4000240)\n#define reg_GX_VRAMCNT_A (*(REGType8v *)0x4000240)\n#define reg_GX_VRAMCNT_B (*(REGType8v *)0x4000241)\n#define reg_GX_VRAMCNT_C (*(REGType8v *)0x4000242)\n#define reg_GX_VRAMCNT_D (*(REGType8v *)0x4000243)\n#define reg_GX_WVRAMCNT (*(REGType32v *)0x4000244)\n#define reg_GX_VRAMCNT_E (*(REGType8v *)0x4000244)\n#define reg_GX_VRAMCNT_F (*(REGType8v *)0x4000245)\n#define reg_GX_VRAMCNT_G (*(REGType8v *)0x4000246)\n#define reg_GX_VRAMCNT_WRAM (*(REGType8v *)0x4000247)\n#define reg_GX_VRAM_HI_CNT (*(REGType16v *)0x4000248)\n#define reg_GX_VRAMCNT_H (*(REGType8v *)0x4000248)\n#define reg_GX_VRAMCNT_I (*(REGType8v *)0x4000249)\n#define reg_CP_DIVCNT (*(REGType16v *)0x4000280)\n#define REG_DIV_NUMER_ADDR 0x4000290\n#define reg_CP_DIV_NUMER (*(REGType64v *)REG_DIV_NUMER_ADDR)\n#define reg_CP_DIV_NUMER_L (*(REGType32v *)REG_DIV_NUMER_ADDR)\n#define reg_CP_DIV_NUMER_H (*(REGType32v *)0x4000294)\n#define reg_CP_DIV_DENOM (*(REGType64v *)0x4000298)\n#define reg_CP_DIV_DENOM_L (*(REGType32v *)0x4000298)\n#define reg_CP_DIV_DENOM_H (*(REGType32v *)0x400029c)\n#define reg_CP_DIV_RESULT (*(REGType64v *)0x40002A0)\n#define reg_CP_DIV_RESULT_L (*(REGType32v *)0x40002A0)\n#define reg_CP_DIV_RESULT_H (*(REGType32v *)0x40002A4)\n#define reg_CP_DIVREM_RESULT (*(REGType64v *)0x40002A8)\n#define reg_CP_DIVREM_RESULT_L (*(REGType32v *)0x40002A8)\n#define reg_CP_DIVREM_RESULT_H (*(REGType32v *)0x40002Ac)\n#define reg_CP_SQRTCNT (*(REGType16v *)0x40002B0)\n#define reg_CP_SQRT_RESULT (*(REGType32v *)0x40002B4)\n#define reg_CP_SQRT_PARAM (*(REGType64v *)0x40002B8)\n#define reg_CP_SQRT_PARAM_L (*(REGType32v *)0x40002B8)\n#define reg_CP_SQRT_PARAM_H (*(REGType32v *)0x40002Bc)\n#define reg_GX_POWCNT (*(REGType16v *)0x4000304)\n#define reg_G3X_RDLINES_COUNT (*(const REGType16v *)0x4000320)\n#define reg_G3X_EDGE_COLOR_0 (*(REGType32v *)0x4000330)\n#define reg_G3X_EDGE_COLOR_0_L (*(REGType16v *)0x4000330)\n#define reg_G3X_EDGE_COLOR_0_H (*(REGType16v *)0x4000332)\n#define reg_G3X_EDGE_COLOR_1 (*(REGType32v *)0x4000334)\n#define reg_G3X_EDGE_COLOR_1_L (*(REGType16v *)0x4000334)\n#define reg_G3X_EDGE_COLOR_1_H (*(REGType16v *)0x4000336)\n#define reg_G3X_EDGE_COLOR_2 (*(REGType32v *)0x4000338)\n#define reg_G3X_EDGE_COLOR_2_L (*(REGType16v *)0x4000338)\n#define reg_G3X_EDGE_COLOR_2_H (*(REGType16v *)0x400033a)\n#define reg_G3X_EDGE_COLOR_3 (*(REGType32v *)0x400033c)\n#define reg_G3X_EDGE_COLOR_3_L (*(REGType16v *)0x400033c)\n#define reg_G3X_EDGE_COLOR_3_H (*(REGType16v *)0x400033e)\n#define reg_G3X_ALPHA_TEST_REF (*(REGType16v *)0x4000340)\n#define reg_G3X_CLEAR_COLOR (*(REGType32v *)0x4000350)\n#define reg_G3X_CLEAR_DEPTH (*(REGType16v *)0x4000354)\n#define reg_G3X_CLRIMAGE_OFFSET (*(REGType16v *)0x4000356)\n#define reg_G3X_FOG_COLOR (*(REGType32v *)0x4000358)\n#define reg_G3X_FOG_OFFSET (*(REGType16v *)0x400035c)\n#define reg_G3X_FOG_TABLE_0 (*(REGType32v *)0x4000360)\n#define reg_G3X_FOG_TABLE_0_L (*(REGType16v *)0x4000360)\n#define reg_G3X_FOG_TABLE_0_H (*(REGType16v *)0x4000362)\n#define reg_G3X_FOG_TABLE_1 (*(REGType32v *)0x4000364)\n#define reg_G3X_FOG_TABLE_1_L (*(REGType16v *)0x4000364)\n#define reg_G3X_FOG_TABLE_1_H (*(REGType16v *)0x4000366)\n#define reg_G3X_FOG_TABLE_2 (*(REGType32v *)0x4000368)\n#define reg_G3X_FOG_TABLE_2_L (*(REGType16v *)0x4000368)\n#define reg_G3X_FOG_TABLE_2_H (*(REGType16v *)0x400036a)\n#define reg_G3X_FOG_TABLE_3 (*(REGType32v *)0x400036c)\n#define reg_G3X_FOG_TABLE_3_L (*(REGType16v *)0x400036c)\n#define reg_G3X_FOG_TABLE_3_H (*(REGType16v *)0x400036e)\n#define reg_G3X_FOG_TABLE_4 (*(REGType32v *)0x4000370)\n#define reg_G3X_FOG_TABLE_4_L (*(REGType16v *)0x4000370)\n#define reg_G3X_FOG_TABLE_4_H (*(REGType16v *)0x4000372)\n#define reg_G3X_FOG_TABLE_5 (*(REGType32v *)0x4000374)\n#define reg_G3X_FOG_TABLE_5_L (*(REGType16v *)0x4000374)\n#define reg_G3X_FOG_TABLE_5_H (*(REGType16v *)0x4000376)\n#define reg_G3X_FOG_TABLE_6 (*(REGType32v *)0x4000378)\n#define reg_G3X_FOG_TABLE_6_L (*(REGType16v *)0x4000378)\n#define reg_G3X_FOG_TABLE_6_H (*(REGType16v *)0x400037a)\n#define reg_G3X_FOG_TABLE_7 (*(REGType32v *)0x400037c)\n#define reg_G3X_FOG_TABLE_7_L (*(REGType16v *)0x400037c)\n#define reg_G3X_FOG_TABLE_7_H (*(REGType16v *)0x400037e)\n#define reg_G3X_TOON_TABLE_0 (*(REGType32v *)0x4000380)\n#define reg_G3X_TOON_TABLE_0_L (*(REGType16v *)0x4000380)\n#define reg_G3X_TOON_TABLE_0_H (*(REGType16v *)0x4000382)\n#define reg_G3X_TOON_TABLE_1 (*(REGType32v *)0x4000384)\n#define reg_G3X_TOON_TABLE_1_L (*(REGType16v *)0x4000384)\n#define reg_G3X_TOON_TABLE_1_H (*(REGType16v *)0x4000386)\n#define reg_G3X_TOON_TABLE_2 (*(REGType32v *)0x4000388)\n#define reg_G3X_TOON_TABLE_2_L (*(REGType16v *)0x4000388)\n#define reg_G3X_TOON_TABLE_2_H (*(REGType16v *)0x400038a)\n#define reg_G3X_TOON_TABLE_3 (*(REGType32v *)0x400038c)\n#define reg_G3X_TOON_TABLE_3_L (*(REGType16v *)0x400038c)\n#define reg_G3X_TOON_TABLE_3_H (*(REGType16v *)0x400038e)\n#define reg_G3X_TOON_TABLE_4 (*(REGType32v *)0x4000390)\n#define reg_G3X_TOON_TABLE_4_L (*(REGType16v *)0x4000390)\n#define reg_G3X_TOON_TABLE_4_H (*(REGType16v *)0x4000392)\n#define reg_G3X_TOON_TABLE_5 (*(REGType32v *)0x4000394)\n#define reg_G3X_TOON_TABLE_5_L (*(REGType16v *)0x4000394)\n#define reg_G3X_TOON_TABLE_5_H (*(REGType16v *)0x4000396)\n#define reg_G3X_TOON_TABLE_7 (*(REGType32v *)0x400039c)\n#define reg_G3X_TOON_TABLE_7_L (*(REGType16v *)0x400039c)\n#define reg_G3X_TOON_TABLE_7_H (*(REGType16v *)0x400039e)\n#define reg_G3X_TOON_TABLE_8 (*(REGType32v *)0x40003a0)\n#define reg_G3X_TOON_TABLE_8_L (*(REGType16v *)0x40003a0)\n#define reg_G3X_TOON_TABLE_8_H (*(REGType16v *)0x40003a2)\n#define reg_G3X_TOON_TABLE_9 (*(REGType32v *)0x40003a4)\n#define reg_G3X_TOON_TABLE_9_L (*(REGType16v *)0x40003a4)\n#define reg_G3X_TOON_TABLE_9_H (*(REGType16v *)0x40003a6)\n#define reg_G3X_TOON_TABLE_10 (*(REGType32v *)0x40003a8)\n#define reg_G3X_TOON_TABLE_10_L (*(REGType16v *)0x40003a8)\n#define reg_G3X_TOON_TABLE_10_H (*(REGType16v *)0x40003aa)\n#define reg_G3X_TOON_TABLE_11 (*(REGType32v *)0x40003ac)\n#define reg_G3X_TOON_TABLE_11_L (*(REGType16v *)0x40003ac)\n#define reg_G3X_TOON_TABLE_11_H (*(REGType16v *)0x40003ae)\n#define reg_G3X_TOON_TABLE_12 (*(REGType32v *)0x40003b0)\n#define reg_G3X_TOON_TABLE_12_L (*(REGType16v *)0x40003b0)\n#define reg_G3X_TOON_TABLE_12_H (*(REGType16v *)0x40003b2)\n#define reg_G3X_TOON_TABLE_13 (*(REGType32v *)0x40003b4)\n#define reg_G3X_TOON_TABLE_13_L (*(REGType16v *)0x40003b4)\n#define reg_G3X_TOON_TABLE_13_H (*(REGType16v *)0x40003b6)\n#define reg_G3X_TOON_TABLE_14 (*(REGType32v *)0x40003b8)\n#define reg_G3X_TOON_TABLE_14_L (*(REGType16v *)0x40003b8)\n#define reg_G3X_TOON_TABLE_14_H (*(REGType16v *)0x40003ba)\n#define reg_G3X_TOON_TABLE_15 (*(REGType32v *)0x40003bc)\n#define reg_G3X_TOON_TABLE_15_L (*(REGType16v *)0x40003bc)\n#define reg_G3X_TOON_TABLE_15_H (*(REGType16v *)0x40003be)\n#define reg_G3X_GXFIFO (*(REGType32v *)0x4000400)\n#define reg_G3_MTX_MODE (*(REGType32v *)0x4000440)\n#define reg_G3_MTX_PUSH (*(REGType32v *)0x4000444)\n#define reg_G3_MTX_POP (*(REGType32v *)0x4000448)\n#define reg_G3_MTX_STORE (*(REGType32v *)0x400044c)\n#define reg_G3_MTX_RESTORE (*(REGType32v *)0x4000450)\n#define reg_G3_MTX_IDENTITY (*(REGType32v *)0x4000454)\n#define reg_G3_MTX_LOAD_4x4 (*(REGType32v *)0x4000458)\n#define reg_G3_MTX_LOAD_4x3 (*(REGType32v *)0x400045c)\n#define reg_G3_MTX_MULT_4x4 (*(REGType32v *)0x4000460)\n#define reg_G3_MTX_MULT_4x3 (*(REGType32v *)0x4000464)\n#define reg_G3_MTX_MULT_3x3 (*(REGType32v *)0x4000468)\n#define reg_G3_MTX_SCALE (*(REGType32v *)0x400046c)\n#define reg_G3_MTX_TRANS (*(REGType32v *)0x4000470)\n#define reg_G3_COLOR (*(REGType32v *)0x4000480)\n#define reg_G3_NORMAL (*(REGType32v *)0x4000484)\n#define reg_G3_TEXCOORD (*(REGType32v *)0x4000488)\n#define reg_G3_VTX_16 (*(REGType32v *)0x400048c)\n#define reg_G3_VTX_10 (*(REGType32v *)0x4000490)\n#define reg_G3_VTX_XY (*(REGType32v *)0x4000494)\n#define reg_G3_VTX_XZ (*(REGType32v *)0x4000498)\n#define reg_G3_VTX_YZ (*(REGType32v *)0x400049c)\n#define reg_G3_VTX_DIFF (*(REGType32v *)0x40004a0)\n#define reg_G3_POLYGON_ATTR (*(REGType32v *)0x40004a4)\n#define reg_G3_TEXIMAGE_PARAM (*(REGType32v *)0x40004a8)\n#define reg_G3_TEXPLTT_BASE (*(REGType32v *)0x40004ac)\n#define reg_G3_DIF_AMB (*(REGType32v *)0x40004c0)\n#define reg_G3_SPE_EMI (*(REGType32v *)0x40004c4)\n#define reg_G3_LIGHT_VECTOR (*(REGType32v *)0x40004c8)\n#define reg_G3_LIGHT_COLOR (*(REGType32v *)0x40004cc)\n#define reg_G3_SHININESS (*(REGType32v *)0x40004d0)\n#define reg_G3_BEGIN_VTXS (*(REGType32v *)0x4000500)\n#define reg_G3_END_VTXS (*(REGType32v *)0x4000504)\n#define reg_G3_SWAP_BUFFERS (*(REGType32v *)0x4000540)\n#define reg_G3_VIEWPORT (*(REGType32v *)0x4000580)\n#define reg_G3_BOX_TEST (*(REGType32v *)0x40005c0)\n#define reg_G3_POS_TEST (*(REGType32v *)0x40005c4)\n#define reg_G3_VEC_TEST (*(REGType32v *)0x40005c8)\n#define reg_G3X_GXSTAT (*(REGType32v *)0x4000600)\n#define reg_G3X_LISTRAM_COUNT (*(REGType16v *)0x4000604)\n#define reg_G3X_VTXRAM_COUNT (*(REGType16v *)0x4000606)\n#define reg_G3X_DISP_1DOT_DEPTH (*(REGType16v *)0x4000610)\n#define reg_G3X_POS_RESULT_X (*(const REGType32v *)0x4000620)\n#define reg_G3X_POS_RESULT_Y (*(const REGType32v *)0x4000624)\n#define reg_G3X_POS_RESULT_Z (*(const REGType32v *)0x4000628)\n#define reg_G3X_POS_RESULT_W (*(const REGType32v *)0x400062c)\n#define reg_G3X_VEC_RESULT_X (*(const REGType16v *)0x4000630)\n#define reg_G3X_VEC_RESULT_Y (*(const REGType16v *)0x4000632)\n#define reg_G3X_VEC_RESULT_Z (*(const REGType16v *)0x4000634)\n#define reg_G3X_CLIPMTX_RESULT_0 (*(const REGType32v *)0x4000640)\n#define reg_G3X_CLIPMTX_RESULT_1 (*(const REGType32v *)0x4000644)\n#define reg_G3X_CLIPMTX_RESULT_2 (*(const REGType32v *)0x4000648)\n#define reg_G3X_CLIPMTX_RESULT_3 (*(const REGType32v *)0x400064c)\n#define reg_G3X_CLIPMTX_RESULT_4 (*(const REGType32v *)0x4000650)\n#define reg_G3X_CLIPMTX_RESULT_5 (*(const REGType32v *)0x4000654)\n#define reg_G3X_CLIPMTX_RESULT_6 (*(const REGType32v *)0x4000658)\n#define reg_G3X_CLIPMTX_RESULT_7 (*(const REGType32v *)0x400065c)\n#define reg_G3X_CLIPMTX_RESULT_8 (*(const REGType32v *)0x4000660)\n#define reg_G3X_CLIPMTX_RESULT_9 (*(const REGType32v *)0x4000664)\n#define reg_G3X_CLIPMTX_RESULT_10 (*(const REGType32v *)0x4000668)\n#define reg_G3X_CLIPMTX_RESULT_11 (*(const REGType32v *)0x400066c)\n#define reg_G3X_CLIPMTX_RESULT_12 (*(const REGType32v *)0x4000670)\n#define reg_G3X_CLIPMTX_RESULT_13 (*(const REGType32v *)0x4000674)\n#define reg_G3X_CLIPMTX_RESULT_14 (*(const REGType32v *)0x4000678)\n#define reg_G3X_CLIPMTX_RESULT_15 (*(const REGType32v *)0x400067c)\n#define reg_G3X_VECMTX_RESULT_0 (*(const REGType32v *)0x4000680)\n#define reg_G3X_VECMTX_RESULT_1 (*(const REGType32v *)0x4000684)\n#define reg_G3X_VECMTX_RESULT_2 (*(const REGType32v *)0x4000688)\n#define reg_G3X_VECMTX_RESULT_3 (*(const REGType32v *)0x400068c)\n#define reg_G3X_VECMTX_RESULT_4 (*(const REGType32v *)0x4000690)\n#define reg_G3X_VECMTX_RESULT_5 (*(const REGType32v *)0x4000694)\n#define reg_G3X_VECMTX_RESULT_6 (*(const REGType32v *)0x4000698)\n#define reg_G3X_VECMTX_RESULT_7 (*(const REGType32v *)0x400069c)\n#define reg_G3X_VECMTX_RESULT_8 (*(const REGType32v *)0x40006a0)\n#define reg_GXS_DB_DISPCNT (*(REGType32v *)0x4001000)\n#define reg_G2S_DB_BG0CNT (*(REGType16v *)0x4001008)\n#define reg_G2S_DB_BG1CNT (*(REGType16v *)0x400100a)\n#define reg_G2S_DB_BG2CNT (*(REGType16v *)0x400100c)\n#define reg_G2S_DB_BG3CNT (*(REGType16v *)0x400100e)\n#define reg_G2S_DB_BG0OFS (*(REGType32v *)0x4001010)\n#define reg_G2S_DB_BG0HOFS (*(REGType16v *)0x4001010)\n#define reg_G2S_DB_BG0VOFS (*(REGType16v *)0x4001012)\n#define reg_G2S_DB_BG1OFS (*(REGType32v *)0x4001014)\n#define reg_G2S_DB_BG1HOFS (*(REGType16v *)0x4001014)\n#define reg_G2S_DB_BG1VOFS (*(REGType16v *)0x4001016)\n#define reg_G2S_DB_BG2OFS (*(REGType32v *)0x4001018)\n#define reg_G2S_DB_BG2HOFS (*(REGType16v *)0x4001018)\n#define reg_G2S_DB_BG2VOFS (*(REGType16v *)0x400101a)\n#define reg_G2S_DB_BG3OFS (*(REGType32v *)0x400101c)\n#define reg_G2S_DB_BG3HOFS (*(REGType16v *)0x400101c)\n#define reg_G2S_DB_BG3VOFS (*(REGType16v *)0x400101e)\n#define reg_G2S_DB_BG2PA (*(REGType16v *)0x4001020)\n#define reg_G2S_DB_BG2PB (*(REGType16v *)0x4001022)\n#define reg_G2S_DB_BG2PC (*(REGType16v *)0x4001024)\n#define reg_G2S_DB_BG2PD (*(REGType16v *)0x4001026)\n#define reg_G2S_DB_BG2X (*(REGType32v *)0x4001028)\n#define reg_G2S_DB_BG2Y (*(REGType32v *)0x400102c)\n#define reg_G2S_DB_BG3PA (*(REGType16v *)0x4001030)\n#define reg_G2S_DB_BG3PB (*(REGType16v *)0x4001032)\n#define reg_G2S_DB_BG3PC (*(REGType16v *)0x4001034)\n#define reg_G2S_DB_BG3PD (*(REGType16v *)0x4001036)\n#define reg_G2S_DB_BG3X (*(REGType32v *)0x4001038)\n#define reg_G2S_DB_BG3Y (*(REGType32v *)0x400103c)\n#define reg_G2S_DB_WIN0H (*(REGType16v *)0x4001040)\n#define reg_G2S_DB_WIN1H (*(REGType16v *)0x4001042)\n#define reg_G2S_DB_WIN0V (*(REGType16v *)0x4001044)\n#define reg_G2S_DB_WIN1V (*(REGType16v *)0x4001046)\n#define reg_G2S_DB_WININ (*(REGType16v *)0x4001048)\n#define reg_G2S_DB_WINOUT (*(REGType16v *)0x400104a)\n#define reg_G2S_DB_MOSAIC (*(REGType16v *)0x400104c)\n#define reg_G2S_DB_BLEND (*(REGType32v *)0x4001050)\n#define reg_G2S_DB_BLDCNT (*(REGType16v *)0x4001050)\n#define reg_G2S_DB_BLDALPHA (*(REGType16v *)0x4001052)\n#define reg_G2S_DB_BLDY (*(REGType16v *)0x4001054)\n#define reg_GXS_DB_MASTER_BRIGHT (*(REGType16v *)0x400106c)\n#define reg_PXI_RECV_FIFO (*(REGType32v *)0x4100000)\n#define reg_MI_MCD1 (*(REGType32v *)0x4100010)\n#define reg_CARD_DATA (*(REGType32v *)0x4100010)\n#define REG_OS_IE_VE_SHIFT 2\n#define REG_OS_IE_T0_SHIFT 3\n#define REG_OS_IE_T1_SHIFT 4\n#define REG_OS_IE_T2_SHIFT 5\n#define REG_OS_IE_T3_SHIFT 6\n#define REG_OS_IE_IFN_SHIFT 18\n#define REG_OS_IE_MC_SHIFT 19\n#define REG_PAD_KEYINPUT_L_SHIFT 9\n#define REG_PAD_KEYINPUT_L_SIZE 1\n#define REG_PAD_KEYINPUT_L_MASK 0x0200\n#define REG_PAD_KEYINPUT_R_SHIFT 8\n#define REG_PAD_KEYINPUT_R_SIZE 1\n#define REG_PAD_KEYINPUT_R_MASK 0x0100\n#define REG_PAD_KEYINPUT_DOWN_SHIFT 7\n#define REG_PAD_KEYINPUT_DOWN_SIZE 1\n#define REG_PAD_KEYINPUT_DOWN_MASK 0x0080\n#define REG_PAD_KEYINPUT_UP_SHIFT 6\n#define REG_PAD_KEYINPUT_UP_SIZE 1\n#define REG_PAD_KEYINPUT_UP_MASK 0x0040\n#define REG_PAD_KEYINPUT_LEFT_SHIFT 5\n#define REG_PAD_KEYINPUT_LEFT_SIZE 1\n#define REG_PAD_KEYINPUT_LEFT_MASK 0x0020\n#define REG_PAD_KEYINPUT_RIGHT_SHIFT 4\n#define REG_PAD_KEYINPUT_RIGHT_SIZE 1\n#define REG_PAD_KEYINPUT_RIGHT_MASK 0x0010\n#define REG_PAD_KEYINPUT_START_SHIFT 3\n#define REG_PAD_KEYINPUT_START_SIZE 1\n#define REG_PAD_KEYINPUT_START_MASK 0x0008\n#define REG_PAD_KEYINPUT_SEL_SHIFT 2\n#define REG_PAD_KEYINPUT_SEL_SIZE 1\n#define REG_PAD_KEYINPUT_SEL_MASK 0x0004\n#define REG_PAD_KEYINPUT_B_SHIFT 1\n#define REG_PAD_KEYINPUT_B_SIZE 1\n#define REG_PAD_KEYINPUT_B_MASK 0x0002\n#define REG_PAD_KEYINPUT_A_SHIFT 0\n#define REG_PAD_KEYINPUT_A_SIZE 1\n#define REG_PAD_KEYINPUT_A_MASK 0x0001\n#define REG_PAD_KEYINPUT_FIELD(l,r,down,up,left,right,start,sel,b,a) (u16)( ((u32)(l) << REG_PAD_KEYINPUT_L_SHIFT) | ((u32)(r) << REG_PAD_KEYINPUT_R_SHIFT) | ((u32)(down) << REG_PAD_KEYINPUT_DOWN_SHIFT) | ((u32)(up) << REG_PAD_KEYINPUT_UP_SHIFT) | ((u32)(left) << REG_PAD_KEYINPUT_LEFT_SHIFT) | ((u32)(right) << REG_PAD_KEYINPUT_RIGHT_SHIFT) | ((u32)(start) << REG_PAD_KEYINPUT_START_SHIFT) | ((u32)(sel) << REG_PAD_KEYINPUT_SEL_SHIFT) | ((u32)(b) << REG_PAD_KEYINPUT_B_SHIFT) | ((u32)(a) << REG_PAD_KEYINPUT_A_SHIFT))\n#define REG_PAD_KEYCNT_LOGIC_SHIFT 15\n#define REG_PAD_KEYCNT_LOGIC_SIZE 1\n#define REG_PAD_KEYCNT_LOGIC_MASK 0x8000\n#define REG_PAD_KEYCNT_INTR_SHIFT 14\n#define REG_PAD_KEYCNT_INTR_SIZE 1\n#define REG_PAD_KEYCNT_INTR_MASK 0x4000\n#define REG_PAD_KEYCNT_L_SHIFT 9\n#define REG_PAD_KEYCNT_L_SIZE 1\n#define REG_PAD_KEYCNT_L_MASK 0x0200\n#define REG_PAD_KEYCNT_R_SHIFT 8\n#define REG_PAD_KEYCNT_R_SIZE 1\n#define REG_PAD_KEYCNT_R_MASK 0x0100\n#define REG_PAD_KEYCNT_DOWN_SHIFT 7\n#define REG_PAD_KEYCNT_DOWN_SIZE 1\n#define REG_PAD_KEYCNT_DOWN_MASK 0x0080\n#define REG_PAD_KEYCNT_UP_SHIFT 6\n#define REG_PAD_KEYCNT_UP_SIZE 1\n#define REG_PAD_KEYCNT_UP_MASK 0x0040\n#define REG_PAD_KEYCNT_LEFT_SHIFT 5\n#define REG_PAD_KEYCNT_LEFT_SIZE 1\n#define REG_PAD_KEYCNT_LEFT_MASK 0x0020\n#define REG_PAD_KEYCNT_RIGHT_SHIFT 4\n#define REG_PAD_KEYCNT_RIGHT_SIZE 1\n#define REG_PAD_KEYCNT_RIGHT_MASK 0x0010\n#define REG_PAD_KEYCNT_START_SHIFT 3\n#define REG_PAD_KEYCNT_START_SIZE 1\n#define REG_PAD_KEYCNT_START_MASK 0x0008\n#define REG_PAD_KEYCNT_SEL_SHIFT 2\n#define REG_PAD_KEYCNT_SEL_SIZE 1\n#define REG_PAD_KEYCNT_SEL_MASK 0x0004\n#define REG_PAD_KEYCNT_B_SHIFT 1\n#define REG_PAD_KEYCNT_B_SIZE 1\n#define REG_PAD_KEYCNT_B_MASK 0x0002\n#define REG_PAD_KEYCNT_A_SHIFT 0\n#define REG_PAD_KEYCNT_A_SIZE 1\n#define REG_PAD_KEYCNT_A_MASK 0x0001\n#define REG_G2_WINOUT_OBJWININ_SHIFT 8\n#define REG_G2_WINOUT_OBJWININ_SIZE 6\n#define REG_G2_WINOUT_OBJWININ_MASK 0x3f00\n#define REG_G2_WINOUT_WINOUT_SHIFT 0\n#define REG_G2_WINOUT_WINOUT_SIZE 6\n#define REG_G2_WINOUT_WINOUT_MASK 0x003f\n#define REG_G2_WINOUT_FIELD(objwinin,winout) (u16)( ((u32)(objwinin) << REG_G2_WINOUT_OBJWININ_SHIFT) | ((u32)(winout) << REG_G2_WINOUT_WINOUT_SHIFT))\n#define REG_PAD_KEYCNT_FIELD(logic,intr,l,r,down,up,left,right,start,sel,b,a) (u16)( ((u32)(logic) << REG_PAD_KEYCNT_LOGIC_SHIFT) | ((u32)(intr) << REG_PAD_KEYCNT_INTR_SHIFT) | ((u32)(l) << REG_PAD_KEYCNT_L_SHIFT) | ((u32)(r) << REG_PAD_KEYCNT_R_SHIFT) | ((u32)(down) << REG_PAD_KEYCNT_DOWN_SHIFT) | ((u32)(up) << REG_PAD_KEYCNT_UP_SHIFT) | ((u32)(left) << REG_PAD_KEYCNT_LEFT_SHIFT) | ((u32)(right) << REG_PAD_KEYCNT_RIGHT_SHIFT) | ((u32)(start) << REG_PAD_KEYCNT_START_SHIFT) | ((u32)(sel) << REG_PAD_KEYCNT_SEL_SHIFT) | ((u32)(b) << REG_PAD_KEYCNT_B_SHIFT) | ((u32)(a) << REG_PAD_KEYCNT_A_SHIFT))\n#define REG_GX_POWCNT_GE_SHIFT 3\n#define REG_GX_POWCNT_GE_SIZE 1\n#define REG_GX_POWCNT_GE_MASK 0x0008\n#define REG_GX_POWCNT_RE_SHIFT 2\n#define REG_GX_POWCNT_RE_SIZE 1\n#define REG_GX_POWCNT_RE_MASK 0x0004\n#define REG_GX_POWCNT_E2DG_SHIFT 1\n#define REG_GX_POWCNT_E2DG_SIZE 1\n#define REG_GX_POWCNT_E2DG_MASK 0x0002\n#define REG_GX_POWCNT_LCD_SHIFT 0\n#define REG_GX_POWCNT_LCD_SIZE 1\n#define REG_GX_POWCNT_LCD_MASK 0x0001\n#define REG_GX_POWCNT_LCDB_SHIFT 8\n#define REG_GX_POWCNT_LCDB_SIZE 1\n#define REG_GX_POWCNT_LCDB_MASK 0x0100\n#define REG_GX_POWCNT_E2DGB_SHIFT 9\n#define REG_GX_POWCNT_E2DGB_SIZE 1\n#define REG_GX_POWCNT_E2DGB_MASK 0x0200\n#define REG_GX_POWCNT_DSEL_SHIFT 15\n#define REG_GX_POWCNT_DSEL_SIZE 1\n#define REG_GX_POWCNT_DSEL_MASK 0x8000\n#define REG_GX_DISPCNT_O_SHIFT 31\n#define REG_GX_DISPCNT_O_SIZE 1\n#define REG_GX_DISPCNT_O_MASK 0x80000000\n#define REG_GX_DISPCNT_BG_SHIFT 30\n#define REG_GX_DISPCNT_BG_SIZE 1\n#define REG_GX_DISPCNT_BG_MASK 0x40000000\n#define REG_GX_DISPCNT_BGSCREENOFFSET_SHIFT 27\n#define REG_GX_DISPCNT_BGSCREENOFFSET_SIZE 3\n#define REG_GX_DISPCNT_BGSCREENOFFSET_MASK 0x38000000\n#define REG_GX_DISPCNT_BGCHAROFFSET_SHIFT 24\n#define REG_GX_DISPCNT_BGCHAROFFSET_SIZE 3\n#define REG_GX_DISPCNT_BGCHAROFFSET_MASK 0x07000000\n#define REG_GX_DISPCNT_OH_SHIFT 23\n#define REG_GX_DISPCNT_OH_SIZE 1\n#define REG_GX_DISPCNT_OH_MASK 0x00800000\n#define REG_GX_DISPCNT_EXOBJ_SHIFT 20\n#define REG_GX_DISPCNT_EXOBJ_SIZE 3\n#define REG_GX_DISPCNT_EXOBJ_MASK 0x00700000\n#define REG_GX_DISPCNT_VRAM_SHIFT 18\n#define REG_GX_DISPCNT_VRAM_SIZE 2\n#define REG_GX_DISPCNT_VRAM_MASK 0x000c0000\n#define REG_GX_DISPCNT_MODE_SHIFT 16\n#define REG_GX_DISPCNT_MODE_SIZE 2\n#define REG_GX_DISPCNT_MODE_MASK 0x00030000\n#define REG_GX_DISPCNT_OW_SHIFT 15\n#define REG_GX_DISPCNT_OW_SIZE 1\n#define REG_GX_DISPCNT_OW_MASK 0x00008000\n#define REG_GX_DISPCNT_W1_SHIFT 14\n#define REG_GX_DISPCNT_W1_SIZE 1\n#define REG_GX_DISPCNT_W1_MASK 0x00004000\n#define REG_GX_DISPCNT_W0_SHIFT 13\n#define REG_GX_DISPCNT_W0_SIZE 1\n#define REG_GX_DISPCNT_W0_MASK 0x00002000\n#define REG_GX_DISPCNT_DISPLAY_SHIFT 8\n#define REG_GX_DISPCNT_DISPLAY_SIZE 5\n#define REG_GX_DISPCNT_DISPLAY_MASK 0x00001f00\n#define REG_GX_DISPCNT_BLANK_SHIFT 7\n#define REG_GX_DISPCNT_BLANK_SIZE 1\n#define REG_GX_DISPCNT_BLANK_MASK 0x00000080\n#define REG_GX_DISPCNT_OBJMAP_SHIFT 4\n#define REG_GX_DISPCNT_OBJMAP_SIZE 3\n#define REG_GX_DISPCNT_OBJMAP_MASK 0x00000070\n#define REG_GX_DISPCNT_BG02D3D_SHIFT 3\n#define REG_GX_DISPCNT_BG02D3D_SIZE 1\n#define REG_GX_DISPCNT_BG02D3D_MASK 0x00000008\n#define REG_GX_DISPCNT_BGMODE_SHIFT 0\n#define REG_GX_DISPCNT_BGMODE_SIZE 3\n#define REG_GX_DISPCNT_BGMODE_MASK 0x00000007\n#define REG_GX_DISPCNT_OBJMAP_CH_SHIFT 4\n#define REG_GX_DISPCNT_OBJMAP_CH_SIZE 1\n#define REG_GX_DISPCNT_OBJMAP_CH_MASK 0x00000010\n#define REG_GX_DISPCNT_OBJMAP_BM_SHIFT 5\n#define REG_GX_DISPCNT_OBJMAP_BM_SIZE 2\n#define REG_GX_DISPCNT_OBJMAP_BM_MASK 0x00000060\n#define REG_GX_DISPCNT_EXOBJ_CH_SHIFT 20\n#define REG_GX_DISPCNT_EXOBJ_CH_SIZE 2\n#define REG_GX_DISPCNT_EXOBJ_CH_MASK 0x00300000\n#define REG_GX_DISPCNT_EXOBJ_BM_SHIFT 22\n#define REG_GX_DISPCNT_EXOBJ_BM_SIZE 1\n#define REG_GX_DISPCNT_EXOBJ_BM_MASK 0x00400000\n#define REG_GXS_DB_DISPCNT_O_SHIFT 31\n#define REG_GXS_DB_DISPCNT_O_SIZE 1\n#define REG_GXS_DB_DISPCNT_O_MASK 0x80000000\n#define REG_GXS_DB_DISPCNT_BG_SHIFT 30\n#define REG_GXS_DB_DISPCNT_BG_SIZE 1\n#define REG_GXS_DB_DISPCNT_BG_MASK 0x40000000\n#define REG_GXS_DB_DISPCNT_OH_SHIFT 23\n#define REG_GXS_DB_DISPCNT_OH_SIZE 1\n#define REG_GXS_DB_DISPCNT_OH_MASK 0x00800000\n#define REG_GXS_DB_DISPCNT_EXOBJ_SHIFT 20\n#define REG_GXS_DB_DISPCNT_EXOBJ_SIZE 2\n#define REG_GXS_DB_DISPCNT_EXOBJ_MASK 0x00300000\n#define REG_GXS_DB_DISPCNT_MODE_SHIFT 16\n#define REG_GXS_DB_DISPCNT_MODE_SIZE 1\n#define REG_GXS_DB_DISPCNT_MODE_MASK 0x00010000\n#define REG_GXS_DB_DISPCNT_OW_SHIFT 15\n#define REG_GXS_DB_DISPCNT_OW_SIZE 1\n#define REG_GXS_DB_DISPCNT_OW_MASK 0x00008000\n#define REG_GXS_DB_DISPCNT_W1_SHIFT 14\n#define REG_GXS_DB_DISPCNT_W1_SIZE 1\n#define REG_GXS_DB_DISPCNT_W1_MASK 0x00004000\n#define REG_GXS_DB_DISPCNT_W0_SHIFT 13\n#define REG_GXS_DB_DISPCNT_W0_SIZE 1\n#define REG_GXS_DB_DISPCNT_W0_MASK 0x00002000\n#define REG_GXS_DB_DISPCNT_DISPLAY_SHIFT 8\n#define REG_GXS_DB_DISPCNT_DISPLAY_SIZE 5\n#define REG_GXS_DB_DISPCNT_DISPLAY_MASK 0x00001f00\n#define REG_GXS_DB_DISPCNT_BLANK_SHIFT 7\n#define REG_GXS_DB_DISPCNT_BLANK_SIZE 1\n#define REG_GXS_DB_DISPCNT_BLANK_MASK 0x00000080\n#define REG_GXS_DB_DISPCNT_OBJMAP_SHIFT 4\n#define REG_GXS_DB_DISPCNT_OBJMAP_SIZE 3\n#define REG_GXS_DB_DISPCNT_OBJMAP_MASK 0x00000070\n#define REG_GXS_DB_DISPCNT_BGMODE_SHIFT 0\n#define REG_GXS_DB_DISPCNT_BGMODE_SIZE 3\n#define REG_GXS_DB_DISPCNT_BGMODE_MASK 0x00000007\n#define REG_GXS_DB_DISPCNT_OBJMAP_CH_SHIFT 4\n#define REG_GXS_DB_DISPCNT_OBJMAP_CH_SIZE 1\n#define REG_GXS_DB_DISPCNT_OBJMAP_CH_MASK 0x00000010\n#define REG_GXS_DB_DISPCNT_OBJMAP_BM_SHIFT 5\n#define REG_GXS_DB_DISPCNT_OBJMAP_BM_SIZE 2\n#define REG_GXS_DB_DISPCNT_OBJMAP_BM_MASK 0x00000060\n#define REG_GXS_DB_DISPCNT_EXOBJ_CH_SHIFT 20\n#define REG_GXS_DB_DISPCNT_EXOBJ_CH_SIZE 2\n#define REG_GXS_DB_DISPCNT_EXOBJ_CH_MASK 0x00300000\n#define REG_GX_MASTER_BRIGHT_E_MOD_SHIFT 14\n#define REG_GX_MASTER_BRIGHT_E_MOD_SIZE 2\n#define REG_GX_MASTER_BRIGHT_E_MOD_MASK 0xc000\n#define REG_GX_MASTER_BRIGHT_E_VALUE_SHIFT 0\n#define REG_GX_MASTER_BRIGHT_E_VALUE_SIZE 5\n#define REG_GX_MASTER_BRIGHT_E_VALUE_MASK 0x001f\n#define REG_GX_DISPSTAT_VCOUNTER_SHIFT 7\n#define REG_GX_DISPSTAT_VCOUNTER_SIZE 9\n#define REG_GX_DISPSTAT_VCOUNTER_MASK 0xff80\n#define REG_GX_DISPSTAT_VQI_SHIFT 5\n#define REG_GX_DISPSTAT_VQI_SIZE 1\n#define REG_GX_DISPSTAT_VQI_MASK 0x0020\n#define REG_GX_DISPSTAT_HBI_SHIFT 4\n#define REG_GX_DISPSTAT_HBI_SIZE 1\n#define REG_GX_DISPSTAT_HBI_MASK 0x0010\n#define REG_GX_DISPSTAT_VBI_SHIFT 3\n#define REG_GX_DISPSTAT_VBI_SIZE 1\n#define REG_GX_DISPSTAT_VBI_MASK 0x0008\n#define REG_GX_DISPSTAT_LYC_SHIFT 2\n#define REG_GX_DISPSTAT_LYC_SIZE 1\n#define REG_GX_DISPSTAT_LYC_MASK 0x0004\n#define REG_GX_DISPSTAT_HBLK_SHIFT 1\n#define REG_GX_DISPSTAT_HBLK_SIZE 1\n#define REG_GX_DISPSTAT_HBLK_MASK 0x0002\n#define REG_GX_DISPSTAT_VBLK_SHIFT 0\n#define REG_GX_DISPSTAT_VBLK_SIZE 1\n#define REG_GX_DISPSTAT_VBLK_MASK 0x0001\n#define REG_G2_BG0CNT_SCREENSIZE_SHIFT 14\n#define REG_G2_BG0CNT_SCREENSIZE_SIZE 2\n#define REG_G2_BG0CNT_SCREENSIZE_MASK 0xc000\n#define REG_G2_BG0CNT_BGPLTTSLOT_SHIFT 13\n#define REG_G2_BG0CNT_BGPLTTSLOT_SIZE 1\n#define REG_G2_BG0CNT_BGPLTTSLOT_MASK 0x2000\n#define REG_G2_BG0CNT_SCREENBASE_SHIFT 8\n#define REG_G2_BG0CNT_SCREENBASE_SIZE 5\n#define REG_G2_BG0CNT_SCREENBASE_MASK 0x1f00\n#define REG_G2_BG0CNT_COLORMODE_SHIFT 7\n#define REG_G2_BG0CNT_COLORMODE_SIZE 1\n#define REG_G2_BG0CNT_COLORMODE_MASK 0x0080\n#define REG_G2_BG0CNT_MOSAIC_SHIFT 6\n#define REG_G2_BG0CNT_MOSAIC_SIZE 1\n#define REG_G2_BG0CNT_MOSAIC_MASK 0x0040\n#define REG_G2_BG0CNT_CHARBASE_SHIFT 2\n#define REG_G2_BG0CNT_CHARBASE_SIZE 4\n#define REG_G2_BG0CNT_CHARBASE_MASK 0x003c\n#define REG_G2_BG0CNT_PRIORITY_SHIFT 0\n#define REG_G2_BG0CNT_PRIORITY_SIZE 2\n#define REG_G2_BG0CNT_PRIORITY_MASK 0x0003\n#define REG_G2_BG1CNT_SCREENSIZE_SHIFT 14\n#define REG_G2_BG1CNT_SCREENSIZE_SIZE 2\n#define REG_G2_BG1CNT_SCREENSIZE_MASK 0xc000\n#define REG_G2_BG1CNT_BGPLTTSLOT_SHIFT 13\n#define REG_G2_BG1CNT_BGPLTTSLOT_SIZE 1\n#define REG_G2_BG1CNT_BGPLTTSLOT_MASK 0x2000\n#define REG_G2_BG1CNT_SCREENBASE_SHIFT 8\n#define REG_G2_BG1CNT_SCREENBASE_SIZE 5\n#define REG_G2_BG1CNT_SCREENBASE_MASK 0x1f00\n#define REG_G2_BG1CNT_COLORMODE_SHIFT 7\n#define REG_G2_BG1CNT_COLORMODE_SIZE 1\n#define REG_G2_BG1CNT_COLORMODE_MASK 0x0080\n#define REG_G2_BG1CNT_MOSAIC_SHIFT 6\n#define REG_G2_BG1CNT_MOSAIC_SIZE 1\n#define REG_G2_BG1CNT_MOSAIC_MASK 0x0040\n#define REG_G2_BG1CNT_CHARBASE_SHIFT 2\n#define REG_G2_BG1CNT_CHARBASE_SIZE 4\n#define REG_G2_BG1CNT_CHARBASE_MASK 0x003c\n#define REG_G2_BG1CNT_PRIORITY_SHIFT 0\n#define REG_G2_BG1CNT_PRIORITY_SIZE 2\n#define REG_G2_BG1CNT_PRIORITY_MASK 0x0003\n#define REG_G2_BG2CNT_SCREENSIZE_SHIFT 14\n#define REG_G2_BG2CNT_SCREENSIZE_SIZE 2\n#define REG_G2_BG2CNT_SCREENSIZE_MASK 0xc000\n#define REG_G2_BG2CNT_AREAOVER_SHIFT 13\n#define REG_G2_BG2CNT_AREAOVER_SIZE 1\n#define REG_G2_BG2CNT_AREAOVER_MASK 0x2000\n#define REG_G2_BG2CNT_SCREENBASE_SHIFT 8\n#define REG_G2_BG2CNT_SCREENBASE_SIZE 5\n#define REG_G2_BG2CNT_SCREENBASE_MASK 0x1f00\n#define REG_G2_BG2CNT_COLORMODE_SHIFT 7\n#define REG_G2_BG2CNT_COLORMODE_SIZE 1\n#define REG_G2_BG2CNT_COLORMODE_MASK 0x0080\n#define REG_G2_BG2CNT_MOSAIC_SHIFT 6\n#define REG_G2_BG2CNT_MOSAIC_SIZE 1\n#define REG_G2_BG2CNT_MOSAIC_MASK 0x0040\n#define REG_G2_BG2CNT_CHARBASE_SHIFT 2\n#define REG_G2_BG2CNT_CHARBASE_SIZE 4\n#define REG_G2_BG2CNT_CHARBASE_MASK 0x003c\n#define REG_G2_BG2CNT_PRIORITY_SHIFT 0\n#define REG_G2_BG2CNT_PRIORITY_SIZE 2\n#define REG_G2_BG2CNT_PRIORITY_MASK 0x0003\n#define REG_G2_BG3CNT_SCREENSIZE_SHIFT 14\n#define REG_G2_BG3CNT_SCREENSIZE_SIZE 2\n#define REG_G2_BG3CNT_SCREENSIZE_MASK 0xc000\n#define REG_G2_BG3CNT_AREAOVER_SHIFT 13\n#define REG_G2_BG3CNT_AREAOVER_SIZE 1\n#define REG_G2_BG3CNT_AREAOVER_MASK 0x2000\n#define REG_G2_BG3CNT_SCREENBASE_SHIFT 8\n#define REG_G2_BG3CNT_SCREENBASE_SIZE 5\n#define REG_G2_BG3CNT_SCREENBASE_MASK 0x1f00\n#define REG_G2_BG3CNT_COLORMODE_SHIFT 7\n#define REG_G2_BG3CNT_COLORMODE_SIZE 1\n#define REG_G2_BG3CNT_COLORMODE_MASK 0x0080\n#define REG_G2_BG3CNT_MOSAIC_SHIFT 6\n#define REG_G2_BG3CNT_MOSAIC_SIZE 1\n#define REG_G2_BG3CNT_MOSAIC_MASK 0x0040\n#define REG_G2_BG3CNT_CHARBASE_SHIFT 2\n#define REG_G2_BG3CNT_CHARBASE_SIZE 4\n#define REG_G2_BG3CNT_CHARBASE_MASK 0x003c\n#define REG_G2_BG3CNT_PRIORITY_SHIFT 0\n#define REG_G2_BG3CNT_PRIORITY_SIZE 2\n#define REG_G2_BG3CNT_PRIORITY_MASK 0x0003\n#define REG_G2S_DB_BG0CNT_SCREENSIZE_SHIFT 14\n#define REG_G2S_DB_BG0CNT_SCREENSIZE_SIZE 2\n#define REG_G2S_DB_BG0CNT_SCREENSIZE_MASK 0xc000\n#define REG_G2S_DB_BG0CNT_BGPLTTSLOT_SHIFT 13\n#define REG_G2S_DB_BG0CNT_BGPLTTSLOT_SIZE 1\n#define REG_G2S_DB_BG0CNT_BGPLTTSLOT_MASK 0x2000\n#define REG_G2S_DB_BG0CNT_SCREENBASE_SHIFT 8\n#define REG_G2S_DB_BG0CNT_SCREENBASE_SIZE 5\n#define REG_G2S_DB_BG0CNT_SCREENBASE_MASK 0x1f00\n#define REG_G2S_DB_BG0CNT_COLORMODE_SHIFT 7\n#define REG_G2S_DB_BG0CNT_COLORMODE_SIZE 1\n#define REG_G2S_DB_BG0CNT_COLORMODE_MASK 0x0080\n#define REG_G2S_DB_BG0CNT_MOSAIC_SHIFT 6\n#define REG_G2S_DB_BG0CNT_MOSAIC_SIZE 1\n#define REG_G2S_DB_BG0CNT_MOSAIC_MASK 0x0040\n#define REG_G2S_DB_BG0CNT_CHARBASE_SHIFT 2\n#define REG_G2S_DB_BG0CNT_CHARBASE_SIZE 4\n#define REG_G2S_DB_BG0CNT_CHARBASE_MASK 0x003c\n#define REG_G2S_DB_BG0CNT_PRIORITY_SHIFT 0\n#define REG_G2S_DB_BG0CNT_PRIORITY_SIZE 2\n#define REG_G2S_DB_BG0CNT_PRIORITY_MASK 0x0003\n#define REG_G2S_DB_BG1CNT_SCREENSIZE_SHIFT 14\n#define REG_G2S_DB_BG1CNT_SCREENSIZE_SIZE 2\n#define REG_G2S_DB_BG1CNT_SCREENSIZE_MASK 0xc000\n#define REG_G2S_DB_BG1CNT_BGPLTTSLOT_SHIFT 13\n#define REG_G2S_DB_BG1CNT_BGPLTTSLOT_SIZE 1\n#define REG_G2S_DB_BG1CNT_BGPLTTSLOT_MASK 0x2000\n#define REG_G2S_DB_BG1CNT_SCREENBASE_SHIFT 8\n#define REG_G2S_DB_BG1CNT_SCREENBASE_SIZE 5\n#define REG_G2S_DB_BG1CNT_SCREENBASE_MASK 0x1f00\n#define REG_G2S_DB_BG1CNT_COLORMODE_SHIFT 7\n#define REG_G2S_DB_BG1CNT_COLORMODE_SIZE 1\n#define REG_G2S_DB_BG1CNT_COLORMODE_MASK 0x0080\n#define REG_G2S_DB_BG1CNT_MOSAIC_SHIFT 6\n#define REG_G2S_DB_BG1CNT_MOSAIC_SIZE 1\n#define REG_G2S_DB_BG1CNT_MOSAIC_MASK 0x0040\n#define REG_G2S_DB_BG1CNT_CHARBASE_SHIFT 2\n#define REG_G2S_DB_BG1CNT_CHARBASE_SIZE 4\n#define REG_G2S_DB_BG1CNT_CHARBASE_MASK 0x003c\n#define REG_G2S_DB_BG1CNT_PRIORITY_SHIFT 0\n#define REG_G2S_DB_BG1CNT_PRIORITY_SIZE 2\n#define REG_G2S_DB_BG1CNT_PRIORITY_MASK 0x0003\n#define REG_G2S_DB_BG2CNT_SCREENSIZE_SHIFT 14\n#define REG_G2S_DB_BG2CNT_SCREENSIZE_SIZE 2\n#define REG_G2S_DB_BG2CNT_SCREENSIZE_MASK 0xc000\n#define REG_G2S_DB_BG2CNT_AREAOVER_SHIFT 13\n#define REG_G2S_DB_BG2CNT_AREAOVER_SIZE 1\n#define REG_G2S_DB_BG2CNT_AREAOVER_MASK 0x2000\n#define REG_G2S_DB_BG2CNT_SCREENBASE_SHIFT 8\n#define REG_G2S_DB_BG2CNT_SCREENBASE_SIZE 5\n#define REG_G2S_DB_BG2CNT_SCREENBASE_MASK 0x1f00\n#define REG_G2S_DB_BG2CNT_COLORMODE_SHIFT 7\n#define REG_G2S_DB_BG2CNT_COLORMODE_SIZE 1\n#define REG_G2S_DB_BG2CNT_COLORMODE_MASK 0x0080\n#define REG_G2S_DB_BG2CNT_MOSAIC_SHIFT 6\n#define REG_G2S_DB_BG2CNT_MOSAIC_SIZE 1\n#define REG_G2S_DB_BG2CNT_MOSAIC_MASK 0x0040\n#define REG_G2S_DB_BG2CNT_CHARBASE_SHIFT 2\n#define REG_G2S_DB_BG2CNT_CHARBASE_SIZE 4\n#define REG_G2S_DB_BG2CNT_CHARBASE_MASK 0x003c\n#define REG_G2S_DB_BG2CNT_PRIORITY_SHIFT 0\n#define REG_G2S_DB_BG2CNT_PRIORITY_SIZE 2\n#define REG_G2S_DB_BG2CNT_PRIORITY_MASK 0x0003\n#define REG_G2S_DB_BG3CNT_SCREENSIZE_SHIFT 14\n#define REG_G2S_DB_BG3CNT_SCREENSIZE_SIZE 2\n#define REG_G2S_DB_BG3CNT_SCREENSIZE_MASK 0xc000\n#define REG_G2S_DB_BG3CNT_AREAOVER_SHIFT 13\n#define REG_G2S_DB_BG3CNT_AREAOVER_SIZE 1\n#define REG_G2S_DB_BG3CNT_AREAOVER_MASK 0x2000\n#define REG_G2S_DB_BG3CNT_SCREENBASE_SHIFT 8\n#define REG_G2S_DB_BG3CNT_SCREENBASE_SIZE 5\n#define REG_G2S_DB_BG3CNT_SCREENBASE_MASK 0x1f00\n#define REG_G2S_DB_BG3CNT_COLORMODE_SHIFT 7\n#define REG_G2S_DB_BG3CNT_COLORMODE_SIZE 1\n#define REG_G2S_DB_BG3CNT_COLORMODE_MASK 0x0080\n#define REG_G2S_DB_BG3CNT_MOSAIC_SHIFT 6\n#define REG_G2S_DB_BG3CNT_MOSAIC_SIZE 1\n#define REG_G2S_DB_BG3CNT_MOSAIC_MASK 0x0040\n#define REG_G2S_DB_BG3CNT_CHARBASE_SHIFT 2\n#define REG_G2S_DB_BG3CNT_CHARBASE_SIZE 4\n#define REG_G2S_DB_BG3CNT_CHARBASE_MASK 0x003c\n#define REG_G2S_DB_BG3CNT_PRIORITY_SHIFT 0\n#define REG_G2S_DB_BG3CNT_PRIORITY_SIZE 2\n#define REG_G2S_DB_BG3CNT_PRIORITY_MASK 0x0003\n#define REG_G2_BG0OFS_VOFFSET_SHIFT 16\n#define REG_G2_BG0OFS_VOFFSET_SIZE 9\n#define REG_G2_BG0OFS_VOFFSET_MASK 0x01ff0000\n#define REG_G2_BG0OFS_HOFFSET_SHIFT 0\n#define REG_G2_BG0OFS_HOFFSET_SIZE 9\n#define REG_G2_BG0OFS_HOFFSET_MASK 0x000001ff\n#define REG_G2_BG1OFS_VOFFSET_SHIFT 16\n#define REG_G2_BG1OFS_VOFFSET_SIZE 9\n#define REG_G2_BG1OFS_VOFFSET_MASK 0x01ff0000\n#define REG_G2_BG1OFS_HOFFSET_SHIFT 0\n#define REG_G2_BG1OFS_HOFFSET_SIZE 9\n#define REG_G2_BG1OFS_HOFFSET_MASK 0x000001ff\n#define REG_G2_BG2OFS_VOFFSET_SHIFT 16\n#define REG_G2_BG2OFS_VOFFSET_SIZE 9\n#define REG_G2_BG2OFS_VOFFSET_MASK 0x01ff0000\n#define REG_G2_BG2OFS_HOFFSET_SHIFT 0\n#define REG_G2_BG2OFS_HOFFSET_SIZE 9\n#define REG_G2_BG2OFS_HOFFSET_MASK 0x000001ff\n#define REG_G2_BG3OFS_VOFFSET_SHIFT 16\n#define REG_G2_BG3OFS_VOFFSET_SIZE 9\n#define REG_G2_BG3OFS_VOFFSET_MASK 0x01ff0000\n#define REG_G2_BG3OFS_HOFFSET_SHIFT 0\n#define REG_G2_BG3OFS_HOFFSET_SIZE 9\n#define REG_G2_BG3OFS_HOFFSET_MASK 0x000001ff\n#define REG_G2S_DB_BG0OFS_VOFFSET_SHIFT 16\n#define REG_G2S_DB_BG0OFS_VOFFSET_SIZE 9\n#define REG_G2S_DB_BG0OFS_VOFFSET_MASK 0x01ff0000\n#define REG_G2S_DB_BG0OFS_HOFFSET_SHIFT 0\n#define REG_G2S_DB_BG0OFS_HOFFSET_SIZE 9\n#define REG_G2S_DB_BG0OFS_HOFFSET_MASK 0x000001ff\n#define REG_G2S_DB_BG1OFS_VOFFSET_SHIFT 16\n#define REG_G2S_DB_BG1OFS_VOFFSET_SIZE 9\n#define REG_G2S_DB_BG1OFS_VOFFSET_MASK 0x01ff0000\n#define REG_G2S_DB_BG1OFS_HOFFSET_SHIFT 0\n#define REG_G2S_DB_BG1OFS_HOFFSET_SIZE 9\n#define REG_G2S_DB_BG1OFS_HOFFSET_MASK 0x000001ff\n#define REG_G2S_DB_BG2OFS_VOFFSET_SHIFT 16\n#define REG_G2S_DB_BG2OFS_VOFFSET_SIZE 9\n#define REG_G2S_DB_BG2OFS_VOFFSET_MASK 0x01ff0000\n#define REG_G2S_DB_BG2OFS_HOFFSET_SHIFT 0\n#define REG_G2S_DB_BG2OFS_HOFFSET_SIZE 9\n#define REG_G2S_DB_BG2OFS_HOFFSET_MASK 0x000001ff\n#define REG_G2S_DB_BG3OFS_VOFFSET_SHIFT 16\n#define REG_G2S_DB_BG3OFS_VOFFSET_SIZE 9\n#define REG_G2S_DB_BG3OFS_VOFFSET_MASK 0x01ff0000\n#define REG_G2S_DB_BG3OFS_HOFFSET_SHIFT 0\n#define REG_G2S_DB_BG3OFS_HOFFSET_SIZE 9\n#define REG_G2S_DB_BG3OFS_HOFFSET_MASK 0x000001ff\n#define REG_OS_TM0CNT_L_TIMER0CNT_SHIFT 0\n#define REG_OS_TM0CNT_L_TIMER0CNT_SIZE 16\n#define REG_OS_TM0CNT_L_TIMER0CNT_MASK 0xffff\n#define REG_OS_TM0CNT_H_E_SHIFT 7\n#define REG_OS_TM0CNT_H_E_SIZE 1\n#define REG_OS_TM0CNT_H_E_MASK 0x0080\n#define REG_OS_TM0CNT_H_I_SHIFT 6\n#define REG_OS_TM0CNT_H_I_SIZE 1\n#define REG_OS_TM0CNT_H_I_MASK 0x0040\n#define REG_OS_TM0CNT_H_PS_SHIFT 0\n#define REG_OS_TM0CNT_H_PS_SIZE 2\n#define REG_OS_TM0CNT_H_PS_MASK 0x0003\n#define REG_OS_TM1CNT_L_TIMER0CNT_SHIFT 0\n#define REG_OS_TM1CNT_L_TIMER0CNT_SIZE 16\n#define REG_OS_TM1CNT_L_TIMER0CNT_MASK 0xffff\n#define REG_OS_TM1CNT_H_E_SHIFT 7\n#define REG_OS_TM1CNT_H_E_SIZE 1\n#define REG_OS_TM1CNT_H_E_MASK 0x0080\n#define REG_OS_TM1CNT_H_I_SHIFT 6\n#define REG_OS_TM1CNT_H_I_SIZE 1\n#define REG_OS_TM1CNT_H_I_MASK 0x0040\n#define REG_OS_TM1CNT_H_PS_SHIFT 0\n#define REG_OS_TM1CNT_H_PS_SIZE 2\n#define REG_OS_TM1CNT_H_PS_MASK 0x0003\n#define REG_OS_TM2CNT_L_TIMER0CNT_SHIFT 0\n#define REG_OS_TM2CNT_L_TIMER0CNT_SIZE 16\n#define REG_OS_TM2CNT_L_TIMER0CNT_MASK 0xffff\n#define REG_OS_TM2CNT_H_E_SHIFT 7\n#define REG_OS_TM2CNT_H_E_SIZE 1\n#define REG_OS_TM2CNT_H_E_MASK 0x0080\n#define REG_OS_TM2CNT_H_I_SHIFT 6\n#define REG_OS_TM2CNT_H_I_SIZE 1\n#define REG_OS_TM2CNT_H_I_MASK 0x0040\n#define REG_OS_TM2CNT_H_PS_SHIFT 0\n#define REG_OS_TM2CNT_H_PS_SIZE 2\n#define REG_OS_TM2CNT_H_PS_MASK 0x0003\n#define REG_OS_TM3CNT_L_TIMER0CNT_SHIFT 0\n#define REG_OS_TM3CNT_L_TIMER0CNT_SIZE 16\n#define REG_OS_TM3CNT_L_TIMER0CNT_MASK 0xffff\n#define REG_OS_TM3CNT_H_E_SHIFT 7\n#define REG_OS_TM3CNT_H_E_SIZE 1\n#define REG_OS_TM3CNT_H_E_MASK 0x0080\n#define REG_OS_TM3CNT_H_I_SHIFT 6\n#define REG_OS_TM3CNT_H_I_SIZE 1\n#define REG_OS_TM3CNT_H_I_MASK 0x0040\n#define REG_OS_TM3CNT_H_PS_SHIFT 0\n#define REG_OS_TM3CNT_H_PS_SIZE 2\n#define REG_OS_TM3CNT_H_PS_MASK 0x0003\n#define REG_G3_POLYGON_ATTR_ID_SHIFT 24\n#define REG_G3_POLYGON_ATTR_ID_SIZE 6\n#define REG_G3_POLYGON_ATTR_ID_MASK 0x3f000000\n#define REG_G3_POLYGON_ATTR_ALPHA_SHIFT 16\n#define REG_G3_POLYGON_ATTR_ALPHA_SIZE 5\n#define REG_G3_POLYGON_ATTR_ALPHA_MASK 0x001f0000\n#define REG_G3_POLYGON_ATTR_FE_SHIFT 15\n#define REG_G3_POLYGON_ATTR_FE_SIZE 1\n#define REG_G3_POLYGON_ATTR_FE_MASK 0x00008000\n#define REG_G3_POLYGON_ATTR_DT_SHIFT 14\n#define REG_G3_POLYGON_ATTR_DT_SIZE 1\n#define REG_G3_POLYGON_ATTR_DT_MASK 0x00004000\n#define REG_G3_POLYGON_ATTR_D1_SHIFT 13\n#define REG_G3_POLYGON_ATTR_D1_SIZE 1\n#define REG_G3_POLYGON_ATTR_D1_MASK 0x00002000\n#define REG_G3_POLYGON_ATTR_FC_SHIFT 12\n#define REG_G3_POLYGON_ATTR_FC_SIZE 1\n#define REG_G3_POLYGON_ATTR_FC_MASK 0x00001000\n#define REG_G3_POLYGON_ATTR_XL_SHIFT 11\n#define REG_G3_POLYGON_ATTR_XL_SIZE 1\n#define REG_G3_POLYGON_ATTR_XL_MASK 0x00000800\n#define REG_G3_POLYGON_ATTR_FR_SHIFT 7\n#define REG_G3_POLYGON_ATTR_FR_SIZE 1\n#define REG_G3_POLYGON_ATTR_FR_MASK 0x00000080\n#define REG_G3_POLYGON_ATTR_BK_SHIFT 6\n#define REG_G3_POLYGON_ATTR_BK_SIZE 1\n#define REG_G3_POLYGON_ATTR_BK_MASK 0x00000040\n#define REG_G3_POLYGON_ATTR_PM_SHIFT 4\n#define REG_G3_POLYGON_ATTR_PM_SIZE 2\n#define REG_G3_POLYGON_ATTR_PM_MASK 0x00000030\n#define REG_G3_POLYGON_ATTR_LE_SHIFT 0\n#define REG_G3_POLYGON_ATTR_LE_SIZE 4\n#define REG_G3_POLYGON_ATTR_LE_MASK 0x0000000f\n#define REG_G3_TEXIMAGE_PARAM_TGEN_SHIFT 30\n#define REG_G3_TEXIMAGE_PARAM_TGEN_SIZE 2\n#define REG_G3_TEXIMAGE_PARAM_TGEN_MASK 0xc0000000\n#define REG_G3_TEXIMAGE_PARAM_TR_SHIFT 29\n#define REG_G3_TEXIMAGE_PARAM_TR_SIZE 1\n#define REG_G3_TEXIMAGE_PARAM_TR_MASK 0x20000000\n#define REG_G3_TEXIMAGE_PARAM_TEXFMT_SHIFT 26\n#define REG_G3_TEXIMAGE_PARAM_TEXFMT_SIZE 3\n#define REG_G3_TEXIMAGE_PARAM_TEXFMT_MASK 0x1c000000\n#define REG_G3_TEXIMAGE_PARAM_T_SIZE_SHIFT 23\n#define REG_G3_TEXIMAGE_PARAM_T_SIZE_SIZE 3\n#define REG_G3_TEXIMAGE_PARAM_T_SIZE_MASK 0x03800000\n#define REG_G3_TEXIMAGE_PARAM_V_SIZE_SHIFT 20\n#define REG_G3_TEXIMAGE_PARAM_V_SIZE_SIZE 3\n#define REG_G3_TEXIMAGE_PARAM_V_SIZE_MASK 0x00700000\n#define REG_G3_TEXIMAGE_PARAM_FT_SHIFT 19\n#define REG_G3_TEXIMAGE_PARAM_FT_SIZE 1\n#define REG_G3_TEXIMAGE_PARAM_FT_MASK 0x00080000\n#define REG_G3_TEXIMAGE_PARAM_FS_SHIFT 18\n#define REG_G3_TEXIMAGE_PARAM_FS_SIZE 1\n#define REG_G3_TEXIMAGE_PARAM_FS_MASK 0x00040000\n#define REG_G3_TEXIMAGE_PARAM_RT_SHIFT 17\n#define REG_G3_TEXIMAGE_PARAM_RT_SIZE 1\n#define REG_G3_TEXIMAGE_PARAM_RT_MASK 0x00020000\n#define REG_G3_TEXIMAGE_PARAM_RS_SHIFT 16\n#define REG_G3_TEXIMAGE_PARAM_RS_SIZE 1\n#define REG_G3_TEXIMAGE_PARAM_RS_MASK 0x00010000\n#define REG_G3_TEXIMAGE_PARAM_TEX_ADDR_SHIFT 0\n#define REG_G3_TEXIMAGE_PARAM_TEX_ADDR_SIZE 16\n#define REG_G3_TEXIMAGE_PARAM_TEX_ADDR_MASK 0x0000ffff\n#define REG_G3_DIF_AMB_AMBIENT_BLUE_SHIFT 26\n#define REG_G3_DIF_AMB_AMBIENT_BLUE_SIZE 5\n#define REG_G3_DIF_AMB_AMBIENT_BLUE_MASK 0x7c000000\n#define REG_G3_DIF_AMB_AMBIENT_GREEN_SHIFT 21\n#define REG_G3_DIF_AMB_AMBIENT_GREEN_SIZE 5\n#define REG_G3_DIF_AMB_AMBIENT_GREEN_MASK 0x03e00000\n#define REG_G3_DIF_AMB_AMBIENT_RED_SHIFT 16\n#define REG_G3_DIF_AMB_AMBIENT_RED_SIZE 5\n#define REG_G3_DIF_AMB_AMBIENT_RED_MASK 0x001f0000\n#define REG_G3_DIF_AMB_C_SHIFT 15\n#define REG_G3_DIF_AMB_C_SIZE 1\n#define REG_G3_DIF_AMB_C_MASK 0x00008000\n#define REG_G3_DIF_AMB_DIFFUSE_BLUE_SHIFT 10\n#define REG_G3_DIF_AMB_DIFFUSE_BLUE_SIZE 5\n#define REG_G3_DIF_AMB_DIFFUSE_BLUE_MASK 0x00007c00\n#define REG_G3_DIF_AMB_DIFFUSE_GREEN_SHIFT 5\n#define REG_G3_DIF_AMB_DIFFUSE_GREEN_SIZE 5\n#define REG_G3_DIF_AMB_DIFFUSE_GREEN_MASK 0x000003e0\n#define REG_G3_DIF_AMB_DIFFUSE_RED_SHIFT 0\n#define REG_G3_DIF_AMB_DIFFUSE_RED_SIZE 5\n#define REG_G3_DIF_AMB_DIFFUSE_RED_MASK 0x0000001f\n#define REG_G3_SPE_EMI_EMISSION_BLUE_SHIFT 26\n#define REG_G3_SPE_EMI_EMISSION_BLUE_SIZE 5\n#define REG_G3_SPE_EMI_EMISSION_BLUE_MASK 0x7c000000\n#define REG_G3_SPE_EMI_EMISSION_GREEN_SHIFT 21\n#define REG_G3_SPE_EMI_EMISSION_GREEN_SIZE 5\n#define REG_G3_SPE_EMI_EMISSION_GREEN_MASK 0x03e00000\n#define REG_G3_SPE_EMI_EMISSION_RED_SHIFT 16\n#define REG_G3_SPE_EMI_EMISSION_RED_SIZE 5\n#define REG_G3_SPE_EMI_EMISSION_RED_MASK 0x001f0000\n#define REG_G3_SPE_EMI_S_SHIFT 15\n#define REG_G3_SPE_EMI_S_SIZE 1\n#define REG_G3_SPE_EMI_S_MASK 0x00008000\n#define REG_G3_SPE_EMI_SPECULAR_BLUE_SHIFT 10\n#define REG_G3_SPE_EMI_SPECULAR_BLUE_SIZE 5\n#define REG_G3_SPE_EMI_SPECULAR_BLUE_MASK 0x00007c00\n#define REG_G3_SPE_EMI_SPECULAR_GREEN_SHIFT 5\n#define REG_G3_SPE_EMI_SPECULAR_GREEN_SIZE 5\n#define REG_G3_SPE_EMI_SPECULAR_GREEN_MASK 0x000003e0\n#define REG_G3_SPE_EMI_SPECULAR_RED_SHIFT 0\n#define REG_G3_SPE_EMI_SPECULAR_RED_SIZE 5\n#define REG_G3_SPE_EMI_SPECULAR_RED_MASK 0x0000001f\nvoid GXi_NopClearFifo128_(void *);\n#define GUARD_GXCOMMON_H \ntypedef u16 GXRgb;\n#define GXRGB_ASSERT(gxrgb) SDK_ASSERT(((gxrgb) & 0x8000) == 0)\n#define GX_RGB_R_SHIFT (0)\n#define GX_RGB_R_MASK (0x001f)\n#define GX_RGB_G_SHIFT (5)\n#define GX_RGB_G_MASK (0x03e0)\n#define GX_RGB_B_SHIFT (10)\n#define GX_RGB_B_MASK (0x7c00)\n#define GX_RGB(r,g,b) ((GXRgb)(((r) << GX_RGB_R_SHIFT) | ((g) << GX_RGB_G_SHIFT) | ((b) << GX_RGB_B_SHIFT)))\n#define GX_RGB_BLACK (GX_RGB(0, 0, 0))\n#define GX_RGB_WHITE (GX_RGB(31, 31, 31))\ntypedef u16 GXRgba;\n#define GX_RGBA_R_SHIFT (0)\n#define GX_RGBA_R_MASK (0x001f)\n#define GX_RGBA_G_SHIFT (5)\n#define GX_RGBA_G_MASK (0x03e0)\n#define GX_RGBA_B_SHIFT (10)\n#define GX_RGBA_B_MASK (0x7c00)\n#define GX_RGBA_A_SHIFT (15)\n#define GX_RGBA_A_MASK (0x8000)\n#define GX_RGBA(r,g,b,a) ((GXRgba)(((r) << GX_RGBA_R_SHIFT) | ((g) << GX_RGBA_G_SHIFT) | ((b) << GX_RGBA_B_SHIFT) | ((a) << GX_RGBA_A_SHIFT)))\n#define GUARD_GX_STRUCT_2D_H \ntypedef u16 GXScrFmtText;\n#define GX_SCRFMT_TEXT_CHARNAME_SHIFT (0)\n#define GX_SCRFMT_TEXT_CHARNAME_MASK (0x03ff)\n#define GX_SCRFMT_TEXT_HF_SHIFT (10)\n#define GX_SCRFMT_TEXT_HF_MASK (0x0400)\n#define GX_SCRFMT_TEXT_VF_SHIFT (11)\n#define GX_SCRFMT_TEXT_VF_MASK (0x0800)\n#define GX_SCRFMT_TEXT_COLORPLTT_SHIFT (12)\n#define GX_SCRFMT_TEXT_COLORPLTT_MASK (0xf000)\n#define GX_SCRFMT_TEXT(pltt,vf,hf,name) ((u16)(((name) << GX_SCRFMT_TEXT_CHARNAME_SHIFT) | ((hf) << GX_SCRFMT_TEXT_HF_SHIFT) | ((vf) << GX_SCRFMT_TEXT_VF_SHIFT) | ((pltt) << GX_SCRFMT_TEXT_COLORPLTT_SHIFT)))\ntypedef u8 GXScrFmtAffine;\n#define GX_SCRFMT_AFFINE_CHARNAME_SHIFT (0)\n#define GX_SCRFMT_AFFINE_CHARNAME_MASK (0xff)\ntypedef u8 GXScrFmt256Bmp;\n#define GX_SCRFMT_256BMP_COLORNO_SHIFT (0)\n#define GX_SCRFMT_256BMP_COLORNO_MASK (0xff)\ntypedef union\n{\n    u32 data32[8];\n    u16 data16[16];\n    u8 data8[32];\n}\nGXCharFmt16;\ntypedef union\n{\n    u32 data32[16];\n    u16 data16[32];\n    u8 data8[64];\n}\nGXCharFmt256;\ntypedef union\n{\n    u16 data16[16];\n    u32 data32[8];\n    GXRgb rgb[16];\n}\nGXBGPltt16;\ntypedef GXBGPltt16 GXOBJPltt16;\ntypedef union\n{\n    u16 data16[256];\n    u32 data32[128];\n    GXRgb rgb[256];\n}\nGXBGPltt256;\ntypedef GXBGPltt256 GXOBJPltt256;\ntypedef union\n{\n    u16 data16[32 * 32];\n    u32 data32[32 * 32 / 2];\n    GXScrFmtText scr[32][32];\n}\nGXScrText32x32;\ntypedef union\n{\n    u16 data16[64 * 32];\n    u32 data32[64 * 32 / 2];\n    GXScrFmtText scr[64][32];\n}\nGXScrText64x32;\ntypedef union\n{\n    u16 data16[32 * 64];\n    u32 data32[32 * 64 / 2];\n    GXScrFmtText scr[32][64];\n}\nGXScrText32x64;\ntypedef union\n{\n    u16 data16[64 * 64];\n    u32 data32[64 * 64 / 2];\n    GXScrFmtText scr[64][64];\n}\nGXScrText64x64;\ntypedef union\n{\n    u8 data8[16 * 16];\n    u32 data32[16 * 16 / 4];\n    GXScrFmtAffine scr[16][16];\n}\nGXScrAffine16x16;\ntypedef union\n{\n    u8 data8[32 * 32];\n    u32 data32[32 * 32 / 4];\n    GXScrFmtAffine scr[32][32];\n}\nGXScrAffine32x32;\ntypedef union\n{\n    u8 data8[64 * 64];\n    u32 data32[64 * 64 / 4];\n    GXScrFmtAffine scr[64][64];\n}\nGXScrAffine64x64;\ntypedef union\n{\n    u8 data8[128 * 128];\n    u32 data32[128 * 128 / 4];\n    GXScrFmtAffine scr[128][128];\n}\nGXScrAffine128x128;\ntypedef union\n{\n    u8 data8[128 * 128];\n    u32 data32[128 * 128 / 4];\n    GXScrFmt256Bmp scr[128][128];\n}\nGXScr256Bmp128x128;\ntypedef union\n{\n    u8 data8[256 * 256];\n    u32 data32[256 * 256 / 4];\n    GXScrFmt256Bmp scr[256][256];\n}\nGXScr256Bmp256x256;\ntypedef union\n{\n    u8 data8[512 * 256];\n    u32 data32[512 * 256 / 4];\n    GXScrFmt256Bmp scr[512][256];\n}\nGXScr256Bmp512x256;\ntypedef union\n{\n    u8 data8[512 * 512];\n    u32 data32[512 * 512 / 4];\n    GXScrFmt256Bmp scr[512][512];\n}\nGXScr256Bmp512x512;\ntypedef union\n{\n    u16 data16[128 * 128];\n    u32 data32[128 * 128 / 2];\n    GXRgba scr[128][128];\n}\nGXScrDCBmp128x128;\ntypedef union\n{\n    u16 data16[256 * 256];\n    u32 data32[256 * 256 / 2];\n    GXRgba scr[256][256];\n}\nGXScrDCBmp256x256;\ntypedef union\n{\n    u16 data16[512 * 256];\n    u32 data32[512 * 256 / 2];\n    GXRgba scr[512][256];\n}\nGXScrDCBmp512x256;\ntypedef union\n{\n    u16 data16[512 * 512];\n    u32 data32[512 * 512 / 2];\n    GXRgba scr[512][512];\n}\nGXScrDCBmp512x512;\ntypedef struct\n{\n    GXCharFmt16 ch[1024];\n}\nGXCharBGText16;\ntypedef struct\n{\n    GXCharFmt256 ch[1024];\n}\nGXCharBGText256;\ntypedef struct\n{\n    GXCharFmt256 ch[256];\n}\nGXCharBGAffine256;\ntypedef union\n{\n    GXBGPltt256 pltt256;\n    GXBGPltt16 pltt16[16];\n}\nGXBGStdPlttData;\ntypedef union\n{\n    GXOBJPltt256 pltt256;\n    GXOBJPltt16 pltt16[16];\n}\nGXOBJStdPlttData;\ntypedef struct\n{\n    GXBGStdPlttData bgPltt;\n    GXOBJStdPlttData objPltt;\n}\nGXStdPlttData;\ntypedef struct\n{\n    GXBGPltt256 pltt256[16];\n}\nGXBGExtPlttData;\ntypedef struct\n{\n    GXOBJPltt256 pltt256[16];\n}\nGXOBJExtPlttData;\n#define GUARD_GX_G3_H \nstruct GXDLInfo\n{\n    u8 *curr_cmd;\n    u32 *curr_param;\n    u32 *bottom;\n    u32 length;\n    BOOL param0_cmd_flg;\n};\nvoid G3_BeginMakeDL(struct GXDLInfo *displaylist, void *r1, u32 r2);\ns32 G3_EndMakeDL(struct GXDLInfo *displaylist);\ntypedef enum\n{\n    GX_MTXMODE_PROJECTION = 0,\n    GX_MTXMODE_POSITION = 1,\n    GX_MTXMODE_POSITION_VECTOR = 2,\n    GX_MTXMODE_TEXTURE = 3\n}\nGXMtxMode;\ntypedef enum\n{\n    GX_BEGIN_TRIANGLES = 0,\n    GX_BEGIN_QUADS = 1,\n    GX_BEGIN_TRIANGLE_STRIP = 2,\n    GX_BEGIN_QUAD_STRIP = 3\n}\nGXBegin;\ntypedef enum\n{\n    GX_SORTMODE_AUTO = 0,\n    GX_SORTMODE_MANUAL = 1\n}\nGXSortMode;\ntypedef enum\n{\n    GX_BUFFERMODE_Z = 0,\n    GX_BUFFERMODE_W = 1\n}\nGXBufferMode;\ntypedef enum\n{\n    GX_LIGHTMASK_NONE = 0,\n    GX_LIGHTMASK_0 = 1,\n    GX_LIGHTMASK_1 = 2,\n    GX_LIGHTMASK_01 = 3,\n    GX_LIGHTMASK_2 = 4,\n    GX_LIGHTMASK_02 = 5,\n    GX_LIGHTMASK_12 = 6,\n    GX_LIGHTMASK_012 = 7,\n    GX_LIGHTMASK_3 = 8,\n    GX_LIGHTMASK_03 = 9,\n    GX_LIGHTMASK_13 = 10,\n    GX_LIGHTMASK_013 = 11,\n    GX_LIGHTMASK_23 = 12,\n    GX_LIGHTMASK_023 = 13,\n    GX_LIGHTMASK_123 = 14,\n    GX_LIGHTMASK_0123 = 15\n}\nGXLightMask;\ntypedef enum\n{\n    GX_POLYGONMODE_MODULATE = 0,\n    GX_POLYGONMODE_DECAL = 1,\n    GX_POLYGONMODE_TOON = 2,\n    GX_POLYGONMODE_SHADOW = 3\n}\nGXPolygonMode;\ntypedef enum\n{\n    GX_CULL_ALL = 0,\n    GX_CULL_FRONT = 1,\n    GX_CULL_BACK = 2,\n    GX_CULL_NONE = 3\n}\nGXCull;\ntypedef enum\n{\n    GX_TEXREPEAT_NONE = 0,\n    GX_TEXREPEAT_S = 1,\n    GX_TEXREPEAT_T = 2,\n    GX_TEXREPEAT_ST = 3\n}\nGXTexRepeat;\ntypedef enum\n{\n    GX_TEXFLIP_NONE = 0,\n    GX_TEXFLIP_S = 1,\n    GX_TEXFLIP_T = 2,\n    GX_TEXFLIP_ST = 3\n}\nGXTexFlip;\ntypedef enum\n{\n    GX_TEXSIZE_S8 = 0,\n    GX_TEXSIZE_S16 = 1,\n    GX_TEXSIZE_S32 = 2,\n    GX_TEXSIZE_S64 = 3,\n    GX_TEXSIZE_S128 = 4,\n    GX_TEXSIZE_S256 = 5,\n    GX_TEXSIZE_S512 = 6,\n    GX_TEXSIZE_S1024 = 7\n}\nGXTexSizeS;\ntypedef enum\n{\n    GX_TEXSIZE_T8 = 0,\n    GX_TEXSIZE_T16 = 1,\n    GX_TEXSIZE_T32 = 2,\n    GX_TEXSIZE_T64 = 3,\n    GX_TEXSIZE_T128 = 4,\n    GX_TEXSIZE_T256 = 5,\n    GX_TEXSIZE_T512 = 6,\n    GX_TEXSIZE_T1024 = 7\n}\nGXTexSizeT;\ntypedef enum\n{\n    GX_TEXFMT_NONE = 0,\n    GX_TEXFMT_A3I5 = 1,\n    GX_TEXFMT_PLTT4 = 2,\n    GX_TEXFMT_PLTT16 = 3,\n    GX_TEXFMT_PLTT256 = 4,\n    GX_TEXFMT_COMP4x4 = 5,\n    GX_TEXFMT_A5I3 = 6,\n    GX_TEXFMT_DIRECT = 7\n}\nGXTexFmt;\ntypedef enum\n{\n    GX_TEXPLTTCOLOR0_USE = 0,\n    GX_TEXPLTTCOLOR0_TRNS = 1\n}\nGXTexPlttColor0;\ntypedef enum\n{\n    GX_TEXGEN_NONE = 0,\n    GX_TEXGEN_TEXCOORD = 1,\n    GX_TEXGEN_NORMAL = 2,\n    GX_TEXGEN_VERTEX = 3\n}\nGXTexGen;\ntypedef enum\n{\n    GX_LIGHTID_0 = 0,\n    GX_LIGHTID_1 = 1,\n    GX_LIGHTID_2 = 2,\n    GX_LIGHTID_3 = 3\n}\nGXLightId;\ntypedef union\n{\n    u32 val[3];\n    struct\n    {\n        fx16 x;\n        fx16 y;\n        fx16 z;\n        fx16 width;\n        fx16 height;\n        fx16 depth;\n    };\n}\nGXBoxTestParam;\n#define GX_PACK_TEXIMAGE_PARAM(texFmt,texGen,s,t,repeat,flip,pltt0,addr) ((u32)(((addr) >> 3) | ((texFmt) << REG_G3_TEXIMAGE_PARAM_TEXFMT_SHIFT) | ((texGen) << REG_G3_TEXIMAGE_PARAM_TGEN_SHIFT) | ((s) << REG_G3_TEXIMAGE_PARAM_V_SIZE_SHIFT) | ((t) << REG_G3_TEXIMAGE_PARAM_T_SIZE_SHIFT) | ((repeat) << REG_G3_TEXIMAGE_PARAM_RS_SHIFT) | ((flip) << REG_G3_TEXIMAGE_PARAM_FS_SHIFT) | ((pltt0) << REG_G3_TEXIMAGE_PARAM_TR_SHIFT)))\n#define GX_PACK_POLYGONATTR_PARAM(light,polyMode,cullMode,polygonID,alpha,misc) ((u32)(((light) << REG_G3_POLYGON_ATTR_LE_SHIFT) | ((polyMode) << REG_G3_POLYGON_ATTR_PM_SHIFT) | ((cullMode) << REG_G3_POLYGON_ATTR_BK_SHIFT) | (misc) | ((polygonID) << REG_G3_POLYGON_ATTR_ID_SHIFT) | ((alpha) << REG_G3_POLYGON_ATTR_ALPHA_SHIFT)))\n#define GX_PACK_TEXPLTTBASE_PARAM(addr,texFmt) ((u32)((addr) >> (4 - ((texFmt) == GX_TEXFMT_PLTT4))))\n#define GX_PACK_DIFFAMB_PARAM(diffuse,ambient,IsSetVtxColor) ((u32)((diffuse) | ((ambient) << REG_G3_DIF_AMB_AMBIENT_RED_SHIFT) | ((IsSetVtxColor != FALSE) << REG_G3_DIF_AMB_C_SHIFT)))\n#define GX_PACK_SPECEMI_PARAM(specular,emission,IsShininess) ((u32)((specular) | ((emission) << REG_G3_SPE_EMI_EMISSION_RED_SHIFT) | ((IsShininess != FALSE) << REG_G3_SPE_EMI_S_SHIFT)))\n#define GUARD_GX_G3X_H \nvoid GXi_NopClearFifo128_(void *reg);\nvoid G3X_Init();\nvoid G3X_ResetMtxStack();\nvoid G3X_ClearFifo();\nvoid G3X_InitMtxStack();\nvoid G3X_ResetMtxStack_2();\nvoid G3X_SetFog(u32 enable, u32 alphamode, u32 depth, s32 offset);\nu32 G3X_GetClipMtx(struct Mtx44 *dst);\nu32 G3X_GetVectorMtx(struct Mtx33 *dst);\nvoid G3X_SetEdgeColorTable(void *tbl_ptr);\nvoid G3X_SetFogTable(void *tbl_ptr);\nvoid G3X_SetClearColor(u32 col, u32 alpha, u32 depth, u32 polygon_id, u32 enable_fog);\nvoid G3X_InitTable();\nu32 G3X_GetMtxStackLevelPV(u32 *level);\nu32 G3X_GetMtxStackLevelPJ(u32 *level);\nu32 G3X_GetBoxTestResult(u32 *result);\nvoid G3X_SetHOffset(u32 offset);\ntypedef enum\n{\n    GX_SHADING_TOON = 0,\n    GX_SHADING_HIGHLIGHT = 1\n}\nGXShading;\ntypedef enum\n{\n    GX_FOGBLEND_COLOR_ALPHA = 0,\n    GX_FOGBLEND_ALPHA = 1\n}\nGXFogBlend;\ntypedef enum\n{\n    GX_FOGSLOPE_0x8000 = 0,\n    GX_FOGSLOPE_0x4000 = 1,\n    GX_FOGSLOPE_0x2000 = 2,\n    GX_FOGSLOPE_0x1000 = 3,\n    GX_FOGSLOPE_0x0800 = 4,\n    GX_FOGSLOPE_0x0400 = 5,\n    GX_FOGSLOPE_0x0200 = 6,\n    GX_FOGSLOPE_0x0100 = 7,\n    GX_FOGSLOPE_0x0080 = 8,\n    GX_FOGSLOPE_0x0040 = 9,\n    GX_FOGSLOPE_0x0020 = 10\n}\nGXFogSlope;\ntypedef enum\n{\n    GX_FIFOINTR_COND_DISABLE = 0,\n    GX_FIFOINTR_COND_UNDERHALF = 1,\n    GX_FIFOINTR_COND_EMPTY = 2\n}\nGXFifoIntrCond;\ntypedef enum\n{\n    GX_FIFOSTAT_EMPTY = 6,\n    GX_FIFOSTAT_UNDERHALF = 2,\n    GX_FIFOSTAT_OVERHALF = 0,\n    GX_FIFOSTAT_FULL = 1\n}\nGXFifoStat;\nstatic inline void G3X_SetFifoIntrCond(GXFifoIntrCond cond)\n{\n    (*(REGType32v *)0x4000600) = (((*(REGType32v *)0x4000600) & ~0xc0000000) |\n                      (cond << 30));\n}\nstatic inline GXFifoStat G3X_GetCommandFifoStatus(void)\n{\n    return (GXFifoStat)(((*(REGType32v *)0x4000600) & (0x01000000 |\n                                           0x02000000 |\n                                           0x04000000)) >> 24);\n}\n#define GUARD_GX_G3B_H \nvoid G3BS_LoadMtx44(struct GXDLInfo *displaylist, struct Mtx44 *mtx);\nvoid G3B_PushMtx(struct GXDLInfo *displaylist);\nvoid G3B_PopMtx(struct GXDLInfo *displaylist, void *mtx);\nvoid G3B_LoadMtx44(struct GXDLInfo *displaylist, struct Mtx44 *mtx);\nvoid G3B_Color(struct GXDLInfo * displaylist, u32 vtx_col);\nvoid G3B_Normal(struct GXDLInfo * displaylist, fx16 x, fx16 y, fx16 z);\nvoid G3B_Vtx(struct GXDLInfo * displaylist, fx32 x, fx32 y, fx32 z);\nvoid G3B_PolygonAttr(struct GXDLInfo *displaylist, u32 r1, u32 r2, u32 r3, u32 r4, u32 r5, u32 r6);\nvoid G3B_MaterialColorDiffAmb(struct GXDLInfo *displaylist, u32 diffuse_col, u32 ambient_col, u32 replace);\nvoid G3B_MaterialColorSpecEmi(struct GXDLInfo *displaylist, u32 specular_col, u32 emission_col, u32 shiny_table);\nvoid G3B_LightVector(struct GXDLInfo * displaylist, u32 light_num, fx16 x, fx16 y, fx16 z);\nvoid G3B_LightColor(struct GXDLInfo * displaylist, u32 light_num, u32 col);\nvoid G3B_Begin(struct GXDLInfo * displaylist, u32 type);\nvoid G3B_End(struct GXDLInfo * displaylist);\n#define GUARD_GX_ASM_H \nvoid GX_SendFifo48B(register void *pSrc, register void *pDest);\n#define GUARD_GX_VRAMCNT_H \n#define NITRO_OS_VRAMEXCLUSIVE_H_ \n#define OS_VRAM_BANK_ID_A 0x0001\n#define OS_VRAM_BANK_ID_B 0x0002\n#define OS_VRAM_BANK_ID_C 0x0004\n#define OS_VRAM_BANK_ID_D 0x0008\n#define OS_VRAM_BANK_ID_E 0x0010\n#define OS_VRAM_BANK_ID_F 0x0020\n#define OS_VRAM_BANK_ID_G 0x0040\n#define OS_VRAM_BANK_ID_H 0x0080\n#define OS_VRAM_BANK_ID_I 0x0100\n#define OS_VRAM_BANK_ID_ALL 0x01ff\n#define OS_VRAM_BANK_KINDS 9\ntypedef enum {\n    GX_VRAM_A = 0x0001,\n    GX_VRAM_B = 0x0002,\n    GX_VRAM_C = 0x0004,\n    GX_VRAM_D = 0x0008,\n    GX_VRAM_E = 0x0010,\n    GX_VRAM_F = 0x0020,\n    GX_VRAM_G = 0x0040,\n    GX_VRAM_H = 0x0080,\n    GX_VRAM_I = 0x0100,\n    GX_VRAM_ALL = 0x01ff\n} GXVRam;\ntypedef enum {\n    GX_VRAM_LCDC_NONE = 0x0000,\n    GX_VRAM_LCDC_A = GX_VRAM_A,\n    GX_VRAM_LCDC_B = GX_VRAM_B,\n    GX_VRAM_LCDC_C = GX_VRAM_C,\n    GX_VRAM_LCDC_D = GX_VRAM_D,\n    GX_VRAM_LCDC_E = GX_VRAM_E,\n    GX_VRAM_LCDC_F = GX_VRAM_F,\n    GX_VRAM_LCDC_G = GX_VRAM_G,\n    GX_VRAM_LCDC_H = GX_VRAM_H,\n    GX_VRAM_LCDC_I = GX_VRAM_I,\n    GX_VRAM_LCDC_ALL = GX_VRAM_ALL\n} GXVRamLCDC;\ntypedef enum {\n    GX_VRAM_BG_NONE = 0x0000,\n    GX_VRAM_BG_16_F = GX_VRAM_F,\n    GX_VRAM_BG_16_G = GX_VRAM_G,\n    GX_VRAM_BG_32_FG = GX_VRAM_F | GX_VRAM_G,\n    GX_VRAM_BG_64_E = GX_VRAM_E,\n    GX_VRAM_BG_80_EF = GX_VRAM_E | GX_VRAM_F,\n    GX_VRAM_BG_96_EFG = GX_VRAM_E | GX_VRAM_F | GX_VRAM_G,\n    GX_VRAM_BG_128_A = GX_VRAM_A,\n    GX_VRAM_BG_128_B = GX_VRAM_B,\n    GX_VRAM_BG_128_C = GX_VRAM_C,\n    GX_VRAM_BG_128_D = GX_VRAM_D,\n    GX_VRAM_BG_256_AB = GX_VRAM_A | GX_VRAM_B,\n    GX_VRAM_BG_256_BC = GX_VRAM_B | GX_VRAM_C,\n    GX_VRAM_BG_256_CD = GX_VRAM_C | GX_VRAM_D,\n    GX_VRAM_BG_384_ABC = GX_VRAM_A | GX_VRAM_B | GX_VRAM_C,\n    GX_VRAM_BG_384_BCD = GX_VRAM_B | GX_VRAM_C | GX_VRAM_D,\n    GX_VRAM_BG_512_ABCD = GX_VRAM_A | GX_VRAM_B | GX_VRAM_C | GX_VRAM_D,\n    GX_VRAM_BG_80_EG = GX_VRAM_E | GX_VRAM_G,\n    GX_VRAM_BG_256_AC = GX_VRAM_A | GX_VRAM_C,\n    GX_VRAM_BG_256_AD = GX_VRAM_A | GX_VRAM_D,\n    GX_VRAM_BG_256_BD = GX_VRAM_B | GX_VRAM_D,\n    GX_VRAM_BG_384_ABD = GX_VRAM_A | GX_VRAM_B | GX_VRAM_D,\n    GX_VRAM_BG_384_ACD = GX_VRAM_A | GX_VRAM_C | GX_VRAM_D\n} GXVRamBG;\ntypedef enum {\n    GX_VRAM_OBJ_NONE = 0x0000,\n    GX_VRAM_OBJ_16_F = GX_VRAM_F,\n    GX_VRAM_OBJ_16_G = GX_VRAM_G,\n    GX_VRAM_OBJ_32_FG = GX_VRAM_F | GX_VRAM_G,\n    GX_VRAM_OBJ_64_E = GX_VRAM_E,\n    GX_VRAM_OBJ_80_EF = GX_VRAM_E | GX_VRAM_F,\n    GX_VRAM_OBJ_80_EG = GX_VRAM_E | GX_VRAM_G,\n    GX_VRAM_OBJ_96_EFG = GX_VRAM_E | GX_VRAM_F | GX_VRAM_G,\n    GX_VRAM_OBJ_128_A = GX_VRAM_A,\n    GX_VRAM_OBJ_128_B = GX_VRAM_B,\n    GX_VRAM_OBJ_256_AB = GX_VRAM_A | GX_VRAM_B\n} GXVRamOBJ;\ntypedef enum {\n    GX_VRAM_TEX_NONE = 0x0000,\n    GX_VRAM_TEX_0_A = GX_VRAM_A,\n    GX_VRAM_TEX_0_B = GX_VRAM_B,\n    GX_VRAM_TEX_0_C = GX_VRAM_C,\n    GX_VRAM_TEX_0_D = GX_VRAM_D,\n    GX_VRAM_TEX_01_AB = GX_VRAM_A | GX_VRAM_B,\n    GX_VRAM_TEX_01_BC = GX_VRAM_B | GX_VRAM_C,\n    GX_VRAM_TEX_01_CD = GX_VRAM_C | GX_VRAM_D,\n    GX_VRAM_TEX_012_ABC = GX_VRAM_A | GX_VRAM_B | GX_VRAM_C,\n    GX_VRAM_TEX_012_BCD = GX_VRAM_B | GX_VRAM_C | GX_VRAM_D,\n    GX_VRAM_TEX_0123_ABCD = GX_VRAM_A | GX_VRAM_B | GX_VRAM_C | GX_VRAM_D,\n    GX_VRAM_TEX_01_AC = GX_VRAM_A | GX_VRAM_C,\n    GX_VRAM_TEX_01_AD = GX_VRAM_A | GX_VRAM_D,\n    GX_VRAM_TEX_01_BD = GX_VRAM_B | GX_VRAM_D,\n    GX_VRAM_TEX_012_ABD = GX_VRAM_A | GX_VRAM_B | GX_VRAM_D,\n    GX_VRAM_TEX_012_ACD = GX_VRAM_A | GX_VRAM_C | GX_VRAM_D\n} GXVRamTex;\ntypedef enum {\n    GX_VRAM_CLEARIMAGE_NONE = 0x0000,\n    GX_VRAM_CLEARIMAGE_256_AB = GX_VRAM_A | GX_VRAM_B,\n    GX_VRAM_CLEARIMAGE_256_CD = GX_VRAM_C | GX_VRAM_D,\n    GX_VRAM_CLEARDEPTH_128_A = GX_VRAM_A,\n    GX_VRAM_CLEARDEPTH_128_B = GX_VRAM_B,\n    GX_VRAM_CLEARDEPTH_128_C = GX_VRAM_C,\n    GX_VRAM_CLEARDEPTH_128_D = GX_VRAM_D\n} GXVRamClearImage;\ntypedef enum {\n    GX_VRAM_TEXPLTT_NONE = 0x0000,\n    GX_VRAM_TEXPLTT_0_F = GX_VRAM_F,\n    GX_VRAM_TEXPLTT_0_G = GX_VRAM_G,\n    GX_VRAM_TEXPLTT_01_FG = GX_VRAM_F | GX_VRAM_G,\n    GX_VRAM_TEXPLTT_0123_E = GX_VRAM_E,\n    GX_VRAM_TEXPLTT_01234_EF = GX_VRAM_E | GX_VRAM_F,\n    GX_VRAM_TEXPLTT_012345_EFG = GX_VRAM_E | GX_VRAM_F | GX_VRAM_G\n} GXVRamTexPltt;\ntypedef enum {\n    GX_VRAM_BGEXTPLTT_NONE = 0x0000,\n    GX_VRAM_BGEXTPLTT_01_F = GX_VRAM_F,\n    GX_VRAM_BGEXTPLTT_23_G = GX_VRAM_G,\n    GX_VRAM_BGEXTPLTT_0123_E = GX_VRAM_E,\n    GX_VRAM_BGEXTPLTT_0123_FG = GX_VRAM_F | GX_VRAM_G\n} GXVRamBGExtPltt;\ntypedef enum {\n    GX_VRAM_OBJEXTPLTT_NONE = 0,\n    GX_VRAM_OBJEXTPLTT_0_F = GX_VRAM_F,\n    GX_VRAM_OBJEXTPLTT_0_G = GX_VRAM_G\n} GXVRamOBJExtPltt;\ntypedef enum {\n    GX_VRAM_SUB_BG_NONE = 0x0000,\n    GX_VRAM_SUB_BG_128_C = GX_VRAM_C,\n    GX_VRAM_SUB_BG_32_H = GX_VRAM_H,\n    GX_VRAM_SUB_BG_48_HI = GX_VRAM_H | GX_VRAM_I\n} GXVRamSubBG;\ntypedef enum {\n    GX_VRAM_SUB_OBJ_NONE = 0x0000,\n    GX_VRAM_SUB_OBJ_128_D = GX_VRAM_D,\n    GX_VRAM_SUB_OBJ_16_I = GX_VRAM_I\n} GXVRamSubOBJ;\ntypedef enum {\n    GX_VRAM_SUB_BGEXTPLTT_NONE = 0x0000,\n    GX_VRAM_SUB_BGEXTPLTT_0123_H = GX_VRAM_H\n} GXVRamSubBGExtPltt;\ntypedef enum {\n    GX_VRAM_SUB_OBJEXTPLTT_NONE = 0x0000,\n    GX_VRAM_SUB_OBJEXTPLTT_0_I = GX_VRAM_I\n} GXVRamSubOBJExtPltt;\nvoid GX_VRAMCNT_SetLCDC_(u32 mask);\nvoid GX_SetBankForBG(s32 bg);\nvoid GX_SetBankForOBJ(s32 obj);\nvoid GX_SetBankForBGExtPltt(s32 bgextpltt);\nvoid GX_SetBankForOBJExtPltt(s32 objextpltt);\nvoid GX_SetBankForTex(s32 tex);\nvoid GX_SetBankForTexPltt(s32 texpltt);\nvoid GX_SetBankForClearImage(s32 clearimage);\nvoid GX_SetBankForARM7(s32 arm7);\nvoid GX_SetBankForLCDC(s32 lcdc);\nvoid GX_SetBankForSubBG(s32 subbg);\nvoid GX_SetBankForSubOBJ(s32 subobj);\nvoid GX_SetBankForSubBGExtPltt(s32 subbgextpltt);\nvoid GX_SetBankForSubOBJExtPltt(s32 subobjextpltt);\nu32 resetBankForX_(u16 *ptr);\nu32 GX_ResetBankForBG();\nu32 GX_ResetBankForOBJ();\nu32 GX_ResetBankForBGExtPltt();\nu32 GX_ResetBankForOBJExtPltt();\nu32 GX_ResetBankForTex();\nu32 GX_ResetBankForTexPltt();\nu32 GX_ResetBankForClearImage();\nu32 GX_ResetBankForSubBG();\nu32 GX_ResetBankForSubOBJ();\nu32 GX_ResetBankForSubBGExtPltt();\nu32 GX_ResetBankForSubOBJExtPltt();\nu32 disableBankForX_(u16 *ptr);\nu32 GX_DisableBankForBG();\nu32 GX_DisableBankForOBJ();\nu32 GX_DisableBankForBGExtPltt();\nu32 GX_DisableBankForOBJExtPltt();\nu32 GX_DisableBankForTex();\nu32 GX_DisableBankForTexPltt();\nu32 GX_DisableBankForClearImage();\nu32 GX_DisableBankForARM7();\nu32 GX_DisableBankForLCDC();\nu32 GX_DisableBankForSubBG();\nu32 GX_DisableBankForSubOBJ();\nu32 GX_DisableBankForSubBGExtPltt();\nu32 GX_DisableBankForSubOBJExtPltt();\nu32 GX_GetBankForBG();\nu32 GX_GetBankForOBJ();\nu32 GX_GetBankForBGExtPltt();\nu32 GX_GetBankForOBJExtPltt();\nu32 GX_GetBankForTex();\nu32 GX_GetBankForTexPltt();\nu32 GX_GetBankForLCDC();\nu32 GX_GetBankForSubBG();\nu32 GX_GetBankForSubOBJ();\nu32 GX_GetBankForSubBGExtPltt();\nu32 GX_GetBankForSubOBJExtPltt();\n#define GUARD_GX_BGCNT_H \nvoid *G2_GetBG0ScrPtr();\nvoid *G2S_GetBG0ScrPtr();\nvoid *G2_GetBG1ScrPtr();\nvoid *G2S_GetBG1ScrPtr();\nvoid *G2_GetBG2ScrPtr();\nvoid *G2S_GetBG2ScrPtr();\nvoid *G2_GetBG3ScrPtr();\nvoid *G2S_GetBG3ScrPtr();\nvoid *G2_GetBG0CharPtr();\nvoid *G2S_GetBG0CharPtr();\nvoid *G2_GetBG1CharPtr();\nvoid *G2S_GetBG1CharPtr();\nvoid *G2_GetBG2CharPtr();\nvoid *G2S_GetBG2CharPtr();\nvoid *G2_GetBG3CharPtr();\nvoid *G2S_GetBG3CharPtr();\ntypedef union\n{\n    u16 raw;\n    struct\n    {\n        u16 priority:2;\n        u16 charBase:4;\n        u16 mosaic:1;\n        u16 colorMode:1;\n        u16 screenBase:5;\n        u16 bgExtPltt:1;\n        u16 screenSize:2;\n    };\n}\nGXBg01Control;\ntypedef union\n{\n    u16 raw;\n    struct\n    {\n        u16 priority:2;\n        u16 charBase:4;\n        u16 mosaic:1;\n        u16 colorMode:1;\n        u16 screenBase:5;\n        u16 _reserve:1;\n        u16 screenSize:2;\n    };\n}\nGXBg23ControlText;\ntypedef union\n{\n    u16 raw;\n    struct\n    {\n        u16 priority:2;\n        u16 charBase:4;\n        u16 mosaic:1;\n        u16 _reserve:1;\n        u16 screenBase:5;\n        u16 areaOver:1;\n        u16 screenSize:2;\n    };\n}\nGXBg23ControlAffine;\ntypedef union\n{\n    u16 raw;\n    struct\n    {\n        u16 priority:2;\n        u16 _reserve1:1;\n        u16 charBase:3;\n        u16 mosaic:1;\n        u16 _reserve2:1;\n        u16 screenBase:5;\n        u16 areaOver:1;\n        u16 screenSize:2;\n    };\n}\nGXBg23Control256x16Pltt;\ntypedef union\n{\n    u16 raw;\n    struct\n    {\n        u16 priority:2;\n        u16 _reserve1:4;\n        u16 mosaic:1;\n        u16 _reserve2:1;\n        u16 screenBase:5;\n        u16 areaOver:1;\n        u16 screenSize:2;\n    };\n}\nGXBg23Control256Bmp, GXBg23ControlDCBmp;\ntypedef union\n{\n    u16 raw;\n    struct\n    {\n        u16 priority:2;\n        u16 _reserve1:4;\n        u16 mosaic:1;\n        u16 _reserve2:6;\n        u16 areaOver:1;\n        u16 screenSize:2;\n    };\n}\nGXBg2ControlLargeBmp;\ntypedef enum\n{\n    GX_BG_SCRSIZE_TEXT_256x256 = 0,\n    GX_BG_SCRSIZE_TEXT_512x256 = 1,\n    GX_BG_SCRSIZE_TEXT_256x512 = 2,\n    GX_BG_SCRSIZE_TEXT_512x512 = 3\n}\nGXBGScrSizeText;\ntypedef enum\n{\n    GX_BG_SCRSIZE_AFFINE_128x128 = 0,\n    GX_BG_SCRSIZE_AFFINE_256x256 = 1,\n    GX_BG_SCRSIZE_AFFINE_512x512 = 2,\n    GX_BG_SCRSIZE_AFFINE_1024x1024 = 3\n}\nGXBGScrSizeAffine;\ntypedef enum\n{\n    GX_BG_SCRSIZE_256x16PLTT_128x128 = 0,\n    GX_BG_SCRSIZE_256x16PLTT_256x256 = 1,\n    GX_BG_SCRSIZE_256x16PLTT_512x512 = 2,\n    GX_BG_SCRSIZE_256x16PLTT_1024x1024 = 3\n}\nGXBGScrSize256x16Pltt;\ntypedef enum\n{\n    GX_BG_SCRSIZE_256BMP_128x128 = 0,\n    GX_BG_SCRSIZE_256BMP_256x256 = 1,\n    GX_BG_SCRSIZE_256BMP_512x256 = 2,\n    GX_BG_SCRSIZE_256BMP_512x512 = 3\n}\nGXBGScrSize256Bmp;\ntypedef enum\n{\n    GX_BG_SCRSIZE_DCBMP_128x128 = 0,\n    GX_BG_SCRSIZE_DCBMP_256x256 = 1,\n    GX_BG_SCRSIZE_DCBMP_512x256 = 2,\n    GX_BG_SCRSIZE_DCBMP_512x512 = 3\n}\nGXBGScrSizeDcBmp;\ntypedef enum\n{\n    GX_BG_SCRSIZE_LARGEBMP_512x1024 = 0,\n    GX_BG_SCRSIZE_LARGEBMP_1024x512 = 1\n}\nGXBGScrSizeLargeBmp;\ntypedef enum {\n    GX_BG_COLORMODE_16 = 0,\n    GX_BG_COLORMODE_256 = 1\n} GXBGColorMode;\ntypedef enum\n{\n    GX_BG_AREAOVER_XLU = 0,\n    GX_BG_AREAOVER_REPEAT = 1\n}\nGXBGAreaOver;\ntypedef enum\n{\n    GX_BG_CHARBASE_0x00000 = 0,\n    GX_BG_CHARBASE_0x04000 = 1,\n    GX_BG_CHARBASE_0x08000 = 2,\n    GX_BG_CHARBASE_0x0c000 = 3,\n    GX_BG_CHARBASE_0x10000 = 4,\n    GX_BG_CHARBASE_0x14000 = 5,\n    GX_BG_CHARBASE_0x18000 = 6,\n    GX_BG_CHARBASE_0x1c000 = 7,\n    GX_BG_CHARBASE_0x20000 = 8,\n    GX_BG_CHARBASE_0x24000 = 9,\n    GX_BG_CHARBASE_0x28000 = 10,\n    GX_BG_CHARBASE_0x2c000 = 11,\n    GX_BG_CHARBASE_0x30000 = 12,\n    GX_BG_CHARBASE_0x34000 = 13,\n    GX_BG_CHARBASE_0x38000 = 14,\n    GX_BG_CHARBASE_0x3c000 = 15\n}\nGXBGCharBase;\ntypedef enum\n{\n    GX_BG_SCRBASE_0x0000 = 0,\n    GX_BG_SCRBASE_0x0800 = 1,\n    GX_BG_SCRBASE_0x1000 = 2,\n    GX_BG_SCRBASE_0x1800 = 3,\n    GX_BG_SCRBASE_0x2000 = 4,\n    GX_BG_SCRBASE_0x2800 = 5,\n    GX_BG_SCRBASE_0x3000 = 6,\n    GX_BG_SCRBASE_0x3800 = 7,\n    GX_BG_SCRBASE_0x4000 = 8,\n    GX_BG_SCRBASE_0x4800 = 9,\n    GX_BG_SCRBASE_0x5000 = 10,\n    GX_BG_SCRBASE_0x5800 = 11,\n    GX_BG_SCRBASE_0x6000 = 12,\n    GX_BG_SCRBASE_0x6800 = 13,\n    GX_BG_SCRBASE_0x7000 = 14,\n    GX_BG_SCRBASE_0x7800 = 15,\n    GX_BG_SCRBASE_0x8000 = 16,\n    GX_BG_SCRBASE_0x8800 = 17,\n    GX_BG_SCRBASE_0x9000 = 18,\n    GX_BG_SCRBASE_0x9800 = 19,\n    GX_BG_SCRBASE_0xa000 = 20,\n    GX_BG_SCRBASE_0xa800 = 21,\n    GX_BG_SCRBASE_0xb000 = 22,\n    GX_BG_SCRBASE_0xb800 = 23,\n    GX_BG_SCRBASE_0xc000 = 24,\n    GX_BG_SCRBASE_0xc800 = 25,\n    GX_BG_SCRBASE_0xd000 = 26,\n    GX_BG_SCRBASE_0xd800 = 27,\n    GX_BG_SCRBASE_0xe000 = 28,\n    GX_BG_SCRBASE_0xe800 = 29,\n    GX_BG_SCRBASE_0xf000 = 30,\n    GX_BG_SCRBASE_0xf800 = 31\n}\nGXBGScrBase;\ntypedef enum\n{\n    GX_BG_BMPSCRBASE_0x00000 = 0,\n    GX_BG_BMPSCRBASE_0x04000 = 1,\n    GX_BG_BMPSCRBASE_0x08000 = 2,\n    GX_BG_BMPSCRBASE_0x0c000 = 3,\n    GX_BG_BMPSCRBASE_0x10000 = 4,\n    GX_BG_BMPSCRBASE_0x14000 = 5,\n    GX_BG_BMPSCRBASE_0x18000 = 6,\n    GX_BG_BMPSCRBASE_0x1c000 = 7,\n    GX_BG_BMPSCRBASE_0x20000 = 8,\n    GX_BG_BMPSCRBASE_0x24000 = 9,\n    GX_BG_BMPSCRBASE_0x28000 = 10,\n    GX_BG_BMPSCRBASE_0x2c000 = 11,\n    GX_BG_BMPSCRBASE_0x30000 = 12,\n    GX_BG_BMPSCRBASE_0x34000 = 13,\n    GX_BG_BMPSCRBASE_0x38000 = 14,\n    GX_BG_BMPSCRBASE_0x3c000 = 15,\n    GX_BG_BMPSCRBASE_0x40000 = 16,\n    GX_BG_BMPSCRBASE_0x44000 = 17,\n    GX_BG_BMPSCRBASE_0x48000 = 18,\n    GX_BG_BMPSCRBASE_0x4c000 = 19,\n    GX_BG_BMPSCRBASE_0x50000 = 20,\n    GX_BG_BMPSCRBASE_0x54000 = 21,\n    GX_BG_BMPSCRBASE_0x58000 = 22,\n    GX_BG_BMPSCRBASE_0x5c000 = 23,\n    GX_BG_BMPSCRBASE_0x60000 = 24,\n    GX_BG_BMPSCRBASE_0x64000 = 25,\n    GX_BG_BMPSCRBASE_0x68000 = 26,\n    GX_BG_BMPSCRBASE_0x6c000 = 27,\n    GX_BG_BMPSCRBASE_0x70000 = 28,\n    GX_BG_BMPSCRBASE_0x74000 = 29,\n    GX_BG_BMPSCRBASE_0x78000 = 30,\n    GX_BG_BMPSCRBASE_0x7c000 = 31\n}\nGXBGBmpScrBase;\ntypedef enum\n{\n    GX_BG_EXTPLTT_01 = 0,\n    GX_BG_EXTPLTT_23 = 1\n}\nGXBGExtPltt;\ntypedef enum\n{\n    GX_BG_EXTMODE_256x16PLTT = (0 << 2) | (0 << 7),\n    GX_BG_EXTMODE_256BITMAP = (0 << 2) | (1 << 7),\n    GX_BG_EXTMODE_DCBITMAP = (1 << 2) | (1 << 7)\n}\nGXBGExtMode;\ntypedef enum\n{\n    GX_CAPTURE_DEST_VRAM_A_0x00000 = 0,\n    GX_CAPTURE_DEST_VRAM_B_0x00000 = 1,\n    GX_CAPTURE_DEST_VRAM_C_0x00000 = 2,\n    GX_CAPTURE_DEST_VRAM_D_0x00000 = 3,\n    GX_CAPTURE_DEST_VRAM_A_0x08000 = 4,\n    GX_CAPTURE_DEST_VRAM_B_0x08000 = 5,\n    GX_CAPTURE_DEST_VRAM_C_0x08000 = 6,\n    GX_CAPTURE_DEST_VRAM_D_0x08000 = 7,\n    GX_CAPTURE_DEST_VRAM_A_0x10000 = 8,\n    GX_CAPTURE_DEST_VRAM_B_0x10000 = 9,\n    GX_CAPTURE_DEST_VRAM_C_0x10000 = 10,\n    GX_CAPTURE_DEST_VRAM_D_0x10000 = 11,\n    GX_CAPTURE_DEST_VRAM_A_0x18000 = 12,\n    GX_CAPTURE_DEST_VRAM_B_0x18000 = 13,\n    GX_CAPTURE_DEST_VRAM_C_0x18000 = 14,\n    GX_CAPTURE_DEST_VRAM_D_0x18000 = 15\n}\nGXCaptureDest;\ntypedef enum\n{\n    GX_CAPTURE_SIZE_128x128 = 0,\n    GX_CAPTURE_SIZE_256x64 = 1,\n    GX_CAPTURE_SIZE_256x128 = 2,\n    GX_CAPTURE_SIZE_256x192 = 3\n}\nGXCaptureSize;\ntypedef enum\n{\n    GX_CAPTURE_SRCA_2D3D = 0,\n    GX_CAPTURE_SRCA_3D = 1\n}\nGXCaptureSrcA;\ntypedef enum\n{\n    GX_CAPTURE_SRCB_VRAM_0x00000 = 0,\n    GX_CAPTURE_SRCB_MRAM = 1,\n    GX_CAPTURE_SRCB_VRAM_0x08000 = 2,\n    GX_CAPTURE_SRCB_VRAM_0x10000 = 4,\n    GX_CAPTURE_SRCB_VRAM_0x18000 = 6\n}\nGXCaptureSrcB;\ntypedef enum\n{\n    GX_CAPTURE_MODE_A = 0,\n    GX_CAPTURE_MODE_B = 1,\n    GX_CAPTURE_MODE_AB = 2\n}\nGXCaptureMode;\nstatic inline void G2_SetBG0Control(GXBGScrSizeText screenSize, GXBGColorMode colorMode, GXBGScrBase screenBase, GXBGCharBase charBase, GXBGExtPltt bgExtPltt)\n{\n    (*(REGType16v *)0x4000008) = (u16)(((*(REGType16v *)0x4000008) & (0x0003 | 0x0040)) | (screenSize << 14) | (colorMode << 7) | (screenBase << 8) | (charBase << 2) | (bgExtPltt << 13));\n}\nstatic inline void G2S_SetBG0Control(GXBGScrSizeText screenSize, GXBGColorMode colorMode, GXBGScrBase screenBase, GXBGCharBase charBase, GXBGExtPltt bgExtPltt)\n{\n    (*(REGType16v *)0x4001008) = (u16)(((*(REGType16v *)0x4001008) & (0x0003 | 0x0040)) | (screenSize << 14) | (colorMode << 7) | (screenBase << 8) | (charBase << 2) | (bgExtPltt << 13));\n}\nstatic inline void G2_SetBG1Control(GXBGScrSizeText screenSize, GXBGColorMode colorMode, GXBGScrBase screenBase, GXBGCharBase charBase, GXBGExtPltt bgExtPltt)\n{\n    (*(REGType16v *)0x400000a) = (u16)(((*(REGType16v *)0x400000a) & (0x0003 | 0x0040)) | (screenSize << 14) | (colorMode << 7) | (screenBase << 8) | (charBase << 2) | (bgExtPltt << 13));\n}\nstatic inline void G2S_SetBG1Control(GXBGScrSizeText screenSize, GXBGColorMode colorMode, GXBGScrBase screenBase, GXBGCharBase charBase, GXBGExtPltt bgExtPltt)\n{\n    (*(REGType16v *)0x400100a) = (u16)(((*(REGType16v *)0x400100a) & (0x0003 | 0x0040)) | (screenSize << 14) | (colorMode << 7) | (screenBase << 8) | (charBase << 2) | (bgExtPltt << 13));\n}\nstatic inline void G2_SetBG2ControlText(GXBGScrSizeText screenSize, GXBGColorMode colorMode, GXBGScrBase screenBase, GXBGCharBase charBase)\n{\n    (*(REGType16v *)0x400000c) = (u16)(((*(REGType16v *)0x400000c) & ((0x0003 | 0x0040))) | (screenSize << 14) | (colorMode << 7) | (screenBase << 8) | (charBase << 2));\n}\nstatic inline void G2S_SetBG2ControlText(GXBGScrSizeText screenSize, GXBGColorMode colorMode, GXBGScrBase screenBase, GXBGCharBase charBase)\n{\n    (*(REGType16v *)0x400100c) = (u16)(((*(REGType16v *)0x400100c) & ((0x0003 | 0x0040))) | (screenSize << 14) | (colorMode << 7) | (screenBase << 8) | (charBase << 2));\n}\nstatic inline void G2_SetBG2ControlAffine(GXBGScrSizeAffine screenSize, GXBGAreaOver areaOver, GXBGScrBase screenBase, GXBGCharBase charBase)\n{\n    (*(REGType16v *)0x400000c) = (u16)(((*(REGType16v *)0x400000c) & ((0x0003 | 0x0040))) | (screenSize << 14) | (screenBase << 8) | (charBase << 2) | (areaOver << 13));\n}\nstatic inline void G2S_SetBG2ControlAffine(GXBGScrSizeAffine screenSize, GXBGAreaOver areaOver, GXBGScrBase screenBase, GXBGCharBase charBase)\n{\n    (*(REGType16v *)0x400100c) = (u16)(((*(REGType16v *)0x400100c) & ((0x0003 | 0x0040))) | (screenSize << 14) | (screenBase << 8) | (charBase << 2) | (areaOver << 13));\n}\nstatic inline void G2_SetBG2Control256x16Pltt(GXBGScrSize256x16Pltt screenSize, GXBGAreaOver areaOver, GXBGScrBase screenBase, GXBGCharBase charBase)\n{\n    (*(REGType16v *)0x400000c) = (u16)(((*(REGType16v *)0x400000c) & (0x0003 | 0x0040)) | (screenSize << 14) | (charBase << 2) | GX_BG_EXTMODE_256x16PLTT | (screenBase << 8) | (areaOver << 13));\n}\nstatic inline void G2S_SetBG2Control256x16Pltt(GXBGScrSize256x16Pltt screenSize, GXBGAreaOver areaOver, GXBGScrBase screenBase, GXBGCharBase charBase)\n{\n    (*(REGType16v *)0x400100c) = (u16)(((*(REGType16v *)0x400100c) & (0x0003 | 0x0040)) | (screenSize << 14) | (charBase << 2) | GX_BG_EXTMODE_256x16PLTT | (screenBase << 8) | (areaOver << 13));\n}\nstatic inline void G2_SetBG2Control256Bmp(GXBGScrSize256Bmp screenSize, GXBGAreaOver areaOver, GXBGBmpScrBase screenBase)\n{\n    (*(REGType16v *)0x400000c) = (u16)(((*(REGType16v *)0x400000c) & (0x0003 | 0x0040)) | (screenSize << 14) | GX_BG_EXTMODE_256BITMAP | (screenBase << 8) | (areaOver << 13));\n}\nstatic inline void G2S_SetBG2Control256Bmp(GXBGScrSize256Bmp screenSize, GXBGAreaOver areaOver, GXBGBmpScrBase screenBase)\n{\n    (*(REGType16v *)0x400100c) = (u16)(((*(REGType16v *)0x400100c) & (0x0003 | 0x0040)) | (screenSize << 14) | GX_BG_EXTMODE_256BITMAP | (screenBase << 8) | (areaOver << 13));\n}\nstatic inline void G2_SetBG2ControlDCBmp(GXBGScrSizeDcBmp screenSize, GXBGAreaOver areaOver, GXBGBmpScrBase screenBase)\n{\n    (*(REGType16v *)0x400000c) = (u16)(((*(REGType16v *)0x400000c) & (0x0003 | 0x0040)) | (screenSize << 14) | GX_BG_EXTMODE_DCBITMAP | (screenBase << 8) | (areaOver << 13));\n}\nstatic inline void G2S_SetBG2ControlDCBmp(GXBGScrSizeDcBmp screenSize, GXBGAreaOver areaOver, GXBGBmpScrBase screenBase)\n{\n    (*(REGType16v *)0x400100c) = (u16)(((*(REGType16v *)0x400100c) & (0x0003 | 0x0040)) | (screenSize << 14) | GX_BG_EXTMODE_DCBITMAP | (screenBase << 8) | (areaOver << 13));\n}\nstatic inline void G2_SetBG2ControlLargeBmp(GXBGScrSizeLargeBmp screenSize, GXBGAreaOver areaOver)\n{\n    (*(REGType16v *)0x400000c) = (u16)(((*(REGType16v *)0x400000c) & (0x0003 | 0x0040)) | (screenSize << 14) | (areaOver << 13));\n}\nstatic inline void G2S_SetBG2ControlLargeBmp(GXBGScrSizeLargeBmp screenSize, GXBGAreaOver areaOver)\n{\n    (*(REGType16v *)0x400100c) = (u16)(((*(REGType16v *)0x400100c) & (0x0003 | 0x0040)) | (screenSize << 14) | (areaOver << 13));\n}\nstatic inline void G2_SetBG3ControlText(GXBGScrSizeText screenSize, GXBGColorMode colorMode, GXBGScrBase screenBase, GXBGCharBase charBase)\n{\n    (*(REGType16v *)0x400000e) = (u16)(((*(REGType16v *)0x400000e) & ((0x0003 | 0x0040))) | (screenSize << 14) | (colorMode << 7) | (screenBase << 8) | (charBase << 2));\n}\nstatic inline void G2S_SetBG3ControlText(GXBGScrSizeText screenSize, GXBGColorMode colorMode, GXBGScrBase screenBase, GXBGCharBase charBase)\n{\n    (*(REGType16v *)0x400100e) = (u16)(((*(REGType16v *)0x400100e) & ((0x0003 | 0x0040))) | (screenSize << 14) | (colorMode << 7) | (screenBase << 8) | (charBase << 2));\n}\nstatic inline void G2_SetBG3ControlAffine(GXBGScrSizeAffine screenSize, GXBGAreaOver areaOver, GXBGScrBase screenBase, GXBGCharBase charBase)\n{\n    (*(REGType16v *)0x400000e) = (u16)(((*(REGType16v *)0x400000e) & ((0x0003 | 0x0040))) | (screenSize << 14) | (screenBase << 8) | (charBase << 2) | (areaOver << 13));\n}\nstatic inline void G2S_SetBG3ControlAffine(GXBGScrSizeAffine screenSize, GXBGAreaOver areaOver, GXBGScrBase screenBase, GXBGCharBase charBase)\n{\n    (*(REGType16v *)0x400100e) = (u16)(((*(REGType16v *)0x400100e) & ((0x0003 | 0x0040))) | (screenSize << 14) | (screenBase << 8) | (charBase << 2) | (areaOver << 13));\n}\nstatic inline void G2_SetBG3Control256x16Pltt(GXBGScrSize256x16Pltt screenSize, GXBGAreaOver areaOver, GXBGScrBase screenBase, GXBGCharBase charBase)\n{\n    (*(REGType16v *)0x400000e) = (u16)(((*(REGType16v *)0x400000e) & (0x0003 | 0x0040)) | (screenSize << 14) | (charBase << 2) | GX_BG_EXTMODE_256x16PLTT | (screenBase << 8) | (areaOver << 13));\n}\nstatic inline void G2S_SetBG3Control256x16Pltt(GXBGScrSize256x16Pltt screenSize, GXBGAreaOver areaOver, GXBGScrBase screenBase, GXBGCharBase charBase)\n{\n    (*(REGType16v *)0x400100e) = (u16)(((*(REGType16v *)0x400100e) & (0x0003 | 0x0040)) | (screenSize << 14) | (charBase << 2) | GX_BG_EXTMODE_256x16PLTT | (screenBase << 8) | (areaOver << 13));\n}\nstatic inline void G2_SetBG3Control256Bmp(GXBGScrSize256Bmp screenSize, GXBGAreaOver areaOver, GXBGBmpScrBase screenBase)\n{\n    (*(REGType16v *)0x400000e) = (u16)(((*(REGType16v *)0x400000e) & (0x0003 | 0x0040)) | (screenSize << 14) | GX_BG_EXTMODE_256BITMAP | (screenBase << 8) | (areaOver << 13));\n}\nstatic inline void G2S_SetBG3Control256Bmp(GXBGScrSize256Bmp screenSize, GXBGAreaOver areaOver, GXBGBmpScrBase screenBase)\n{\n    (*(REGType16v *)0x400100e) = (u16)(((*(REGType16v *)0x400100e) & (0x0003 | 0x0040)) | (screenSize << 14) | GX_BG_EXTMODE_256BITMAP | (screenBase << 8) | (areaOver << 13));\n}\nstatic inline void G2_SetBG3ControlDCBmp(GXBGScrSizeDcBmp screenSize, GXBGAreaOver areaOver, GXBGBmpScrBase screenBase)\n{\n    (*(REGType16v *)0x400000e) = (u16)(((*(REGType16v *)0x400000e) & (0x0003 | 0x0040)) | (screenSize << 14) | GX_BG_EXTMODE_DCBITMAP | (screenBase << 8) | (areaOver << 13));\n}\nstatic inline void G2S_SetBG3ControlDCBmp(GXBGScrSizeDcBmp screenSize, GXBGAreaOver areaOver, GXBGBmpScrBase screenBase)\n{\n    (*(REGType16v *)0x400100e) = (u16)(((*(REGType16v *)0x400100e) & (0x0003 | 0x0040)) | (screenSize << 14) | GX_BG_EXTMODE_DCBITMAP | (screenBase << 8) | (areaOver << 13));\n}\nstatic inline void G2_SetBG3ControlLargeBmp(GXBGScrSizeLargeBmp screenSize, GXBGAreaOver areaOver)\n{\n    (*(REGType16v *)0x400000e) = (u16)(((*(REGType16v *)0x400000e) & (0x0003 | 0x0040)) | (screenSize << 14) | (areaOver << 13));\n}\nstatic inline void G2S_SetBG3ControlLargeBmp(GXBGScrSizeLargeBmp screenSize, GXBGAreaOver areaOver)\n{\n    (*(REGType16v *)0x400100e) = (u16)(((*(REGType16v *)0x400100e) & (0x0003 | 0x0040)) | (screenSize << 14) | (areaOver << 13));\n}\nstatic inline void G2_BG0Mosaic(BOOL enable)\n{\n    if (enable)\n    {\n        (*(REGType16v *)0x4000008) |= 0x0040;\n    }\n    else\n    {\n        (*(REGType16v *)0x4000008) &= ~0x0040;\n    }\n}\nstatic inline void G2S_BG0Mosaic(BOOL enable)\n{\n    if (enable)\n    {\n        (*(REGType16v *)0x4001008) |= 0x0040;\n    }\n    else\n    {\n        (*(REGType16v *)0x4001008) &= ~0x0040;\n    }\n}\nstatic inline void G2_BG1Mosaic(BOOL enable)\n{\n    if (enable)\n    {\n        (*(REGType16v *)0x400000a) |= 0x0040;\n    }\n    else\n    {\n        (*(REGType16v *)0x400000a) &= ~0x0040;\n    }\n}\nstatic inline void G2S_BG1Mosaic(BOOL enable)\n{\n    if (enable)\n    {\n        (*(REGType16v *)0x400100a) |= 0x0040;\n    }\n    else\n    {\n        (*(REGType16v *)0x400100a) &= ~0x0040;\n    }\n}\nstatic inline void G2_BG2Mosaic(BOOL enable)\n{\n    if (enable)\n    {\n        (*(REGType16v *)0x400000c) |= 0x0040;\n    }\n    else\n    {\n        (*(REGType16v *)0x400000c) &= ~0x0040;\n    }\n}\nstatic inline void G2S_BG2Mosaic(BOOL enable)\n{\n    if (enable)\n    {\n        (*(REGType16v *)0x400100c) |= 0x0040;\n    }\n    else\n    {\n        (*(REGType16v *)0x400100c) &= ~0x0040;\n    }\n}\nstatic inline void G2_BG3Mosaic(BOOL enable)\n{\n    if (enable)\n    {\n        (*(REGType16v *)0x400000e) |= 0x0040;\n    }\n    else\n    {\n        (*(REGType16v *)0x400000e) &= ~0x0040;\n    }\n}\nstatic inline void G2S_BG3Mosaic(BOOL enable)\n{\n    if (enable)\n    {\n        (*(REGType16v *)0x400100e) |= 0x0040;\n    }\n    else\n    {\n        (*(REGType16v *)0x400100e) &= ~0x0040;\n    }\n}\nstatic inline void G2_SetBG0Priority(int priority)\n{\n    (*(REGType16v *)0x4000008) = (u16)(((*(REGType16v *)0x4000008) & ~0x0003) | (priority << 0));\n}\nstatic inline void G2S_SetBG0Priority(int priority)\n{\n    (*(REGType16v *)0x4001008) = (u16)(((*(REGType16v *)0x4001008) & ~0x0003) | (priority << 0));\n}\nstatic inline void G2_SetBG1Priority(int priority)\n{\n    (*(REGType16v *)0x400000a) = (u16)(((*(REGType16v *)0x400000a) & ~0x0003) | (priority << 0));\n}\nstatic inline void G2S_SetBG1Priority(int priority)\n{\n    (*(REGType16v *)0x400100a) = (u16)(((*(REGType16v *)0x400100a) & ~0x0003) | (priority << 0));\n}\nstatic inline void G2_SetBG2Priority(int priority)\n{\n    (*(REGType16v *)0x400000c) = (u16)(((*(REGType16v *)0x400000c) & ~0x0003) | (priority << 0));\n}\nstatic inline void G2S_SetBG2Priority(int priority)\n{\n    (*(REGType16v *)0x400100c) = (u16)(((*(REGType16v *)0x400100c) & ~0x0003) | (priority << 0));\n}\nstatic inline void G2_SetBG3Priority(int priority)\n{\n    (*(REGType16v *)0x400000e) = (u16)(((*(REGType16v *)0x400000e) & ~0x0003) | (priority << 0));\n}\nstatic inline void G2S_SetBG3Priority(int priority)\n{\n    (*(REGType16v *)0x400100e) = (u16)(((*(REGType16v *)0x400100e) & ~0x0003) | (priority << 0));\n}\nstatic inline GXBg01Control G2_GetBG0Control(void)\n{\n    return *(volatile GXBg01Control *)&(*(REGType16v *)0x4000008);\n}\nstatic inline GXBg01Control G2S_GetBG0Control(void)\n{\n    return *(volatile GXBg01Control *)&(*(REGType16v *)0x4001008);\n}\nstatic inline GXBg01Control G2_GetBG1Control(void)\n{\n    return *(volatile GXBg01Control *)&(*(REGType16v *)0x400000a);\n}\nstatic inline GXBg01Control G2S_GetBG1Control(void)\n{\n    return *(volatile GXBg01Control *)&(*(REGType16v *)0x400100a);\n}\nstatic inline GXBg23ControlText G2_GetBG2ControlText(void)\n{\n    return *(volatile GXBg23ControlText *)&(*(REGType16v *)0x400000c);\n}\nstatic inline GXBg23ControlText G2S_GetBG2ControlText(void)\n{\n    return *(volatile GXBg23ControlText *)&(*(REGType16v *)0x400100c);\n}\nstatic inline GXBg23ControlAffine G2_GetBG2ControlAffine(void)\n{\n    return *(volatile GXBg23ControlAffine *)&(*(REGType16v *)0x400000c);\n}\nstatic inline GXBg23ControlAffine G2S_GetBG2ControlAffine(void)\n{\n    return *(volatile GXBg23ControlAffine *)&(*(REGType16v *)0x400100c);\n}\nstatic inline GXBg23Control256x16Pltt G2_GetBG2Control256x16Pltt(void)\n{\n    return *(volatile GXBg23Control256x16Pltt *)&(*(REGType16v *)0x400000c);\n}\nstatic inline GXBg23Control256x16Pltt G2S_GetBG2Control256x16Pltt(void)\n{\n    return *(volatile GXBg23Control256x16Pltt *)&(*(REGType16v *)0x400100c);\n}\nstatic inline GXBg23Control256Bmp G2_GetBG2Control256Bmp(void)\n{\n    return *(volatile GXBg23Control256Bmp *)&(*(REGType16v *)0x400000c);\n}\nstatic inline GXBg23Control256Bmp G2S_GetBG2Control256Bmp(void)\n{\n    return *(volatile GXBg23Control256Bmp *)&(*(REGType16v *)0x400100c);\n}\nstatic inline GXBg23ControlDCBmp G2_GetBG2ControlDCBmp(void)\n{\n    return *(volatile GXBg23ControlDCBmp *)&(*(REGType16v *)0x400000c);\n}\nstatic inline GXBg23ControlDCBmp G2S_GetBG2ControlDCBmp(void)\n{\n    return *(volatile GXBg23ControlDCBmp *)&(*(REGType16v *)0x400100c);\n}\nstatic inline GXBg2ControlLargeBmp G2_GetBG2ControlLargeBmp(void)\n{\n    return *(volatile GXBg2ControlLargeBmp *)&(*(REGType16v *)0x400000c);\n}\nstatic inline GXBg2ControlLargeBmp G2S_GetBG2ControlLargeBmp(void)\n{\n    return *(volatile GXBg2ControlLargeBmp *)&(*(REGType16v *)0x400100c);\n}\nstatic inline GXBg23ControlText G2_GetBG3ControlText(void)\n{\n    return *(volatile GXBg23ControlText *)&(*(REGType16v *)0x400000e);\n}\nstatic inline GXBg23ControlText G2S_GetBG3ControlText(void)\n{\n    return *(volatile GXBg23ControlText *)&(*(REGType16v *)0x400100e);\n}\nstatic inline GXBg23ControlAffine G2_GetBG3ControlAffine(void)\n{\n    return *(volatile GXBg23ControlAffine *)&(*(REGType16v *)0x400000e);\n}\nstatic inline GXBg23ControlAffine G2S_GetBG3ControlAffine(void)\n{\n    return *(volatile GXBg23ControlAffine *)&(*(REGType16v *)0x400100e);\n}\nstatic inline GXBg23Control256x16Pltt G2_GetBG3Control256x16Pltt(void)\n{\n    return *(volatile GXBg23Control256x16Pltt *)&(*(REGType16v *)0x400000e);\n}\nstatic inline GXBg23Control256x16Pltt G2S_GetBG3Control256x16Pltt(void)\n{\n    return *(volatile GXBg23Control256x16Pltt *)&(*(REGType16v *)0x400100e);\n}\nstatic inline GXBg23Control256Bmp G2_GetBG3Control256Bmp(void)\n{\n    return *(volatile GXBg23Control256Bmp *)&(*(REGType16v *)0x400000e);\n}\nstatic inline GXBg23Control256Bmp G2S_GetBG3Control256Bmp(void)\n{\n    return *(volatile GXBg23Control256Bmp *)&(*(REGType16v *)0x400100e);\n}\nstatic inline GXBg23ControlDCBmp G2_GetBG3ControlDCBmp(void)\n{\n    return *(volatile GXBg23ControlDCBmp *)&(*(REGType16v *)0x400000e);\n}\nstatic inline GXBg23ControlDCBmp G2S_GetBG3ControlDCBmp(void)\n{\n    return *(volatile GXBg23ControlDCBmp *)&(*(REGType16v *)0x400100e);\n}\n#define GUARD_GX_LOAD2D_H \nvoid GX_LoadBGPltt(void *src, u32 offset, u32 size);\nvoid GXS_LoadBGPltt(void *src, u32 offset, u32 size);\nvoid GX_LoadOBJPltt(void *src, u32 offset, u32 size);\nvoid GXS_LoadOBJPltt(void *src, u32 offset, u32 size);\nvoid GX_LoadOAM(void *src, u32 offset, u32 size);\nvoid GXS_LoadOAM(void *src, u32 offset, u32 size);\nvoid GX_LoadOBJ(void *src, u32 offset, u32 size);\nvoid GXS_LoadOBJ(void *src, u32 offset, u32 size);\nvoid GX_LoadBG0Scr(void *src, u32 offset, u32 size);\nvoid GXS_LoadBG0Scr(void *src, u32 offset, u32 size);\nvoid GX_LoadBG1Scr(void *src, u32 offset, u32 size);\nvoid GXS_LoadBG1Scr(void *src, u32 offset, u32 size);\nvoid GX_LoadBG2Scr(void *src, u32 offset, u32 size);\nvoid GXS_LoadBG2Scr(void *src, u32 offset, u32 size);\nvoid GX_LoadBG3Scr(void *src, u32 offset, u32 size);\nvoid GXS_LoadBG3Scr(void *src, u32 offset, u32 size);\nvoid GX_LoadBG0Char(void *src, u32 offset, u32 size);\nvoid GXS_LoadBG0Char(void *src, u32 offset, u32 size);\nvoid GX_LoadBG1Char(void *src, u32 offset, u32 size);\nvoid GXS_LoadBG1Char(void *src, u32 offset, u32 size);\nvoid GX_LoadBG2Char(void *src, u32 offset, u32 size);\nvoid GXS_LoadBG2Char(void *src, u32 offset, u32 size);\nvoid GX_LoadBG3Char(void *src, u32 offset, u32 size);\nvoid GXS_LoadBG3Char(void *src, u32 offset, u32 size);\nvoid GX_BeginLoadBGExtPltt();\nvoid GX_LoadBGExtPltt(void *src, u32 offset, u32 size);\nvoid GX_EndLoadBGExtPltt();\nvoid GX_BeginLoadOBJExtPltt();\nvoid GX_LoadOBJExtPltt(void *src, u32 offset, u32 size);\nvoid GX_EndLoadOBJExtPltt();\nvoid GXS_BeginLoadBGExtPltt();\nvoid GXS_LoadBGExtPltt(void *src, u32 offset, u32 size);\nvoid GXS_EndLoadBGExtPltt();\nvoid GXS_BeginLoadOBJExtPltt();\nvoid GXS_LoadOBJExtPltt(void *src, u32 offset, u32 size);\nvoid GXS_EndLoadOBJExtPltt();\n#define GUARD_GX_LOAD3D_H \nvoid GX_BeginLoadTex();\nvoid GX_LoadTex(void *src, u32 offset, u32 size);\nvoid GX_EndLoadTex();\nvoid GX_BeginLoadTexPltt();\nvoid GX_LoadTexPltt(void *src, u32 offset, u32 size);\nvoid GX_EndLoadTexPltt();\nvoid GX_BeginLoadClearImage();\nvoid GX_LoadClearImageColor(void *src, u32 size);\nvoid GX_LoadClearImageDepth(void *src, u32 size);\nvoid GX_EndLoadClearImage();\n#define GUARD_GX_G2_H \ntypedef enum GXBlendPlaneMask {\n    GX_BLEND_PLANEMASK_NONE = 0x0000,\n    GX_BLEND_PLANEMASK_BG0 = 0x0001,\n    GX_BLEND_PLANEMASK_BG1 = 0x0002,\n    GX_BLEND_PLANEMASK_BG2 = 0x0004,\n    GX_BLEND_PLANEMASK_BG3 = 0x0008,\n    GX_BLEND_PLANEMASK_OBJ = 0x0010,\n    GX_BLEND_PLANEMASK_BD = 0x0020\n} GXBlendPlaneMask;\nvoid G2x_SetBGyAffine_(u32 ptr, const struct Mtx22 *mtx, fx32 a, fx32 b, fx32 c, fx32 d);\nvoid G2x_SetBlendAlpha_(u32 *ptr, GXBlendPlaneMask plane1, GXBlendPlaneMask plane2, fx32 c, fx32 d);\nvoid G2x_SetBlendBrightness_(volatile u16 *ptr, fx32 a, fx32 brightness);\nvoid G2x_SetBlendBrightnessExt_(u16 *ptr, fx32 a, fx32 b, fx32 c, fx32 d, fx32 brightness);\nvoid G2x_ChangeBlendBrightness_(u16 *ptr, fx32 brightness);\ntypedef struct\n{\n    u8 planeMask:5;\n    u8 effect:1;\n    u8 _reserve:2;\n} GXWndPlane;\ntypedef enum\n{\n    GX_WND_PLANEMASK_NONE = 0x0000,\n    GX_WND_PLANEMASK_BG0 = 0x0001,\n    GX_WND_PLANEMASK_BG1 = 0x0002,\n    GX_WND_PLANEMASK_BG2 = 0x0004,\n    GX_WND_PLANEMASK_BG3 = 0x0008,\n    GX_WND_PLANEMASK_OBJ = 0x0010\n} GXWndPlaneMask;\nstatic inline void G2_SetWndOutsidePlane(int wnd, BOOL effect)\n{\n    u32 tmp;\n    tmp = (((*(REGType16v *)0x400004a) & ~0x003f) | ((u32)wnd << 0));\n    if (effect)\n    {\n        tmp |= (0x20 << 0);\n    }\n    (*(REGType16v *)0x400004a) = (u16)tmp;\n}\nstatic inline void G2_SetBG0Offset(int hOffset, int vOffset)\n{\n    (*(REGType32v *)0x4000010) = (u32)(((hOffset << 0) & 0x000001ff) |\n                          ((vOffset << 16) & 0x01ff0000));\n}\nstatic inline void G2_SetBG1Offset(int hOffset, int vOffset)\n{\n    (*(REGType32v *)0x4000014) = (u32)(((hOffset << 0) & 0x000001ff) |\n                          ((vOffset << 16) & 0x01ff0000));\n}\nstatic inline void G2_SetBG2Offset(int hOffset, int vOffset)\n{\n    (*(REGType32v *)0x4000018) = (u32)(((hOffset << 0) & 0x000001ff) |\n                          ((vOffset << 16) & 0x01ff0000));\n}\nstatic inline void G2_SetBG3Offset(int hOffset, int vOffset)\n{\n    (*(REGType32v *)0x400001c) = (u32)(((hOffset << 0) & 0x000001ff) |\n                          ((vOffset << 16) & 0x01ff0000));\n}\nstatic inline void G2S_SetBG0Offset(int hOffset, int vOffset)\n{\n    (*(REGType32v *)0x4001010) = (u32)(((hOffset << 0) & 0x000001ff) |\n                          ((vOffset << 16) & 0x01ff0000));\n}\nstatic inline void G2S_SetBG1Offset(int hOffset, int vOffset)\n{\n    (*(REGType32v *)0x4001014) = (u32)(((hOffset << 0) & 0x000001ff) |\n                          ((vOffset << 16) & 0x01ff0000));\n}\nstatic inline void G2S_SetBG2Offset(int hOffset, int vOffset)\n{\n    (*(REGType32v *)0x4001018) = (u32)(((hOffset << 0) & 0x000001ff) |\n                          ((vOffset << 16) & 0x01ff0000));\n}\nstatic inline void G2S_SetBG3Offset(int hOffset, int vOffset)\n{\n    (*(REGType32v *)0x400101c) = (u32)(((hOffset << 0) & 0x000001ff) |\n                          ((vOffset << 16) & 0x01ff0000));\n}\nstatic inline void G2_SetBG2Affine(const struct Mtx22 *mtx, int centerX, int centerY, int x1, int y1)\n{\n    G2x_SetBGyAffine_((u32)&(*(REGType16v *)0x4000020), mtx, centerX, centerY, x1, y1);\n}\nstatic inline void G2_SetBG3Affine(const struct Mtx22 *mtx, int centerX, int centerY, int x1, int y1)\n{\n    G2x_SetBGyAffine_((u32)&(*(REGType16v *)0x4000030), mtx, centerX, centerY, x1, y1);\n}\nstatic inline void G2S_SetBG2Affine(const struct Mtx22 *mtx, int centerX, int centerY, int x1, int y1)\n{\n    G2x_SetBGyAffine_((u32)&(*(REGType16v *)0x4001020), mtx, centerX, centerY, x1, y1);\n}\nstatic inline void G2S_SetBG3Affine(const struct Mtx22 *mtx, int centerX, int centerY, int x1, int y1)\n{\n    G2x_SetBGyAffine_((u32)&(*(REGType16v *)0x4001030), mtx, centerX, centerY, x1, y1);\n}\nstatic inline void G2_BlendNone(void)\n{\n    (*(REGType16v *)0x4000050) = 0;\n}\nstatic inline void G2S_BlendNone(void)\n{\n    (*(REGType16v *)0x4001050) = 0;\n}\nstatic inline void G2_SetBlendAlpha(GXBlendPlaneMask plane1, GXBlendPlaneMask plane2, fx32 ev1, fx32 ev2)\n{\n    G2x_SetBlendAlpha_((u32 *)&(*(REGType32v *)0x4000050), plane1, plane2, ev1, ev2);\n}\nstatic inline void G2S_SetBlendAlpha(GXBlendPlaneMask plane1, GXBlendPlaneMask plane2, fx32 ev1, fx32 ev2)\n{\n    G2x_SetBlendAlpha_((u32 *)&(*(REGType32v *)0x4001050), plane1, plane2, ev1, ev2);\n}\nstatic inline void G2_SetBlendBrightness(fx32 plane, fx32 brightness) {\n    G2x_SetBlendBrightness_(&(*(REGType16v *)0x4000050), plane, brightness);\n}\nstatic inline void G2S_SetBlendBrightness(fx32 plane, fx32 brightness) {\n    G2x_SetBlendBrightness_(&(*(REGType16v *)0x4001050), plane, brightness);\n}\n#define GUARD_GX_STATE_H \nstruct GX_State\n{\n    u16 lcdc;\n    u16 bg;\n    u16 obj;\n    u16 arm7;\n    u16 tex;\n    u16 texPltt;\n    u16 clrImg;\n    u16 bgExtPltt;\n    u16 objExtPltt;\n    u16 sub_bg;\n    u16 sub_obj;\n    u16 sub_bgExtPltt;\n    u16 sub_objExtPltt;\n};\nvoid GX_InitGXState();\n#define GUARD_GX_G3IMM_H \nvoid G3_LoadMtx43(struct Mtx43 *mtx);\nvoid G3_MultMtx43(struct Mtx43 *mtx);\nvoid G3_MultMtx33(struct Mtx33 *mtx);\nstatic inline void G3_PushMtx()\n{\n    (*(REGType32v *)0x4000444) = 0;\n}\nstatic inline void G3_PopMtx(int num)\n{\n    (*(REGType32v *)0x4000448) = (u32)num;\n}\nstatic inline void G3_Identity()\n{\n    (*(REGType32v *)0x4000454) = 0;\n}\nstatic inline void G3_Translate(fx32 x, fx32 y, fx32 z)\n{\n    (*(REGType32v *)0x4000470) = (u32)x;\n    (*(REGType32v *)0x4000470) = (u32)y;\n    (*(REGType32v *)0x4000470) = (u32)z;\n}\nstatic inline void G3_PolygonAttr(int light, GXPolygonMode polyMode, GXCull cullMode, int polygonID, int alpha, int misc) {\n    (*(REGType32v *)0x40004a4) = ((u32)(((light) << 0) | ((polyMode) << 4) | ((cullMode) << 6) | (misc) | ((polygonID) << 24) | ((alpha) << 16)));\n}\nstatic inline void G3_TexImageParam(GXTexFmt texFmt,\n                                    GXTexGen texGen,\n                                    GXTexSizeS s,\n                                    GXTexSizeT t,\n                                    GXTexRepeat repeat,\n                                    GXTexFlip flip, GXTexPlttColor0 pltt0, u32 addr) {\n    (*(REGType32v *)0x40004a8) = ((u32)(((addr) >> 3) | ((texFmt) << 26) | ((texGen) << 30) | ((s) << 20) | ((t) << 23) | ((repeat) << 16) | ((flip) << 18) | ((pltt0) << 29)));\n}\nstatic inline void G3_TexPlttBase(u32 addr, GXTexFmt texfmt)\n{\n    u32 param = ((u32)((addr) >> (4 - ((texfmt) == GX_TEXFMT_PLTT4))));\n    (*(REGType32v *)0x40004ac) = param;\n}\nstatic inline void G3_MaterialColorDiffAmb(GXRgb diffuse, GXRgb ambient, BOOL IsSetVtxColor)\n{\n    (*(REGType32v *)0x40004c0) = ((u32)((diffuse) | ((ambient) << 16) | ((IsSetVtxColor != 0) << 15)));\n}\nstatic inline void G3_MaterialColorSpecEmi(GXRgb specular, GXRgb emission, BOOL IsShininess)\n{\n    (*(REGType32v *)0x40004c4) = ((u32)((specular) | ((emission) << 16) | ((IsShininess != 0) << 15)));\n}\n#define GUARD_GX_DMA_H \n#define GX_DMA_NOT_USE -1\n#define GX_CPU_FASTER32_SIZE 0x30\n#define GX_CPU_FASTER16_SIZE 0x1C\nstatic inline void GXi_DmaCopy32(u32 dmaNo, const void *src, void *dest, u32 size)\n{\n    if (dmaNo != -1 && size > 0x30)\n    {\n        MI_DmaCopy32(dmaNo, src, dest, size);\n    }\n    else\n    {\n        MIi_CpuCopy32(src, dest, size);\n    }\n}\nstatic inline void GXi_DmaCopy16(u32 dmaNo, const void *src, void *dest, u32 size)\n{\n    if (dmaNo != -1 && size > 0x1C)\n    {\n        MI_DmaCopy16(dmaNo, src, dest, size);\n    }\n    else\n    {\n        MIi_CpuCopy16(src, dest, size);\n    }\n}\nstatic inline void GXi_DmaCopy32Async(u32 dmaNo, const void *src, void *dest, u32 size,\n                                      MIDmaCallback callback, void *arg)\n{\n    if (dmaNo != -1)\n    {\n        MI_DmaCopy32Async(dmaNo, src, dest, size, callback, arg);\n    }\n    else\n    {\n        MIi_CpuCopy32(src, dest, size);\n    }\n}\nstatic inline void GXi_WaitDma(u32 dmaNo)\n{\n    if (dmaNo != -1)\n    {\n        MI_WaitDma(dmaNo);\n    }\n}\ntypedef union\n{\n    u32 raw;\n    struct\n    {\n        u32 bgMode:3;\n        u32 bg0_2d3d:1;\n        u32 objMapChar:1;\n        u32 objMapBmp:2;\n        u32 blankScr:1;\n        u32 visiblePlane:5;\n        u32 visibleWnd:3;\n        u32 dispMode:4;\n        u32 extObjMapChar:2;\n        u32 extObjMapBmp:1;\n        u32 hBlankObjProc:1;\n        u32 bgCharOffset:3;\n        u32 bgScrOffset:3;\n        u32 bgExtPltt:1;\n        u32 objExtPltt:1;\n    };\n}\nGXDispCnt;\ntypedef union\n{\n    u32 raw;\n    struct\n    {\n        u32 bgMode:3;\n        u32 _reserve1:1;\n        u32 objMapChar:1;\n        u32 objMapBmp:2;\n        u32 blankScr:1;\n        u32 visiblePlane:5;\n        u32 visibleWnd:3;\n        u32 dispMode:1;\n        u32 _reserve2:3;\n        u32 extObjMapChar:2;\n        u32 _reserve3:1;\n        u32 hBlankObjProc:1;\n        u32 _reserve4:6;\n        u32 bgExtPltt:1;\n        u32 objExtPltt:1;\n    };\n}\nGXSDispCnt;\ntypedef enum\n{\n    GX_BGMODE_0 = 0,\n    GX_BGMODE_1 = 1,\n    GX_BGMODE_2 = 2,\n    GX_BGMODE_3 = 3,\n    GX_BGMODE_4 = 4,\n    GX_BGMODE_5 = 5,\n    GX_BGMODE_6 = 6\n}\nGXBGMode;\ntypedef enum\n{\n    GX_BG0_AS_2D = 0,\n    GX_BG0_AS_3D = 1\n}\nGXBG0As;\ntypedef enum\n{\n    GX_DISPMODE_GRAPHICS = 0x01,\n    GX_DISPMODE_VRAM_A = 0x02,\n    GX_DISPMODE_VRAM_B = 0x06,\n    GX_DISPMODE_VRAM_C = 0x0a,\n    GX_DISPMODE_VRAM_D = 0x0e,\n    GX_DISPMODE_MMEM = 0x03\n}\nGXDispMode;\ntypedef enum\n{\n    GX_PLANEMASK_NONE = 0x00,\n    GX_PLANEMASK_BG0 = 0x01,\n    GX_PLANEMASK_BG1 = 0x02,\n    GX_PLANEMASK_BG2 = 0x04,\n    GX_PLANEMASK_BG3 = 0x08,\n    GX_PLANEMASK_OBJ = 0x10\n}\nGXPlaneMask;\ntypedef enum\n{\n    GX_WNDMASK_NONE = 0x00,\n    GX_WNDMASK_W0 = 0x01,\n    GX_WNDMASK_W1 = 0x02,\n    GX_WNDMASK_OW = 0x04\n}\nGXWndMask;\ntypedef enum\n{\n    GX_BGCHAROFFSET_0x00000 = 0x00,\n    GX_BGCHAROFFSET_0x10000 = 0x01,\n    GX_BGCHAROFFSET_0x20000 = 0x02,\n    GX_BGCHAROFFSET_0x30000 = 0x03,\n    GX_BGCHAROFFSET_0x40000 = 0x04,\n    GX_BGCHAROFFSET_0x50000 = 0x05,\n    GX_BGCHAROFFSET_0x60000 = 0x06,\n    GX_BGCHAROFFSET_0x70000 = 0x07\n}\nGXBGCharOffset;\ntypedef enum\n{\n    GX_BGSCROFFSET_0x00000 = 0x00,\n    GX_BGSCROFFSET_0x10000 = 0x01,\n    GX_BGSCROFFSET_0x20000 = 0x02,\n    GX_BGSCROFFSET_0x30000 = 0x03,\n    GX_BGSCROFFSET_0x40000 = 0x04,\n    GX_BGSCROFFSET_0x50000 = 0x05,\n    GX_BGSCROFFSET_0x60000 = 0x06,\n    GX_BGSCROFFSET_0x70000 = 0x07\n}\nGXBGScrOffset;\ntypedef enum\n{\n    GX_DISP_SELECT_SUB_MAIN = 0,\n    GX_DISP_SELECT_MAIN_SUB = 1\n}\nGXDispSelect;\ntypedef enum\n{\n    GX_OBJVRAMMODE_CHAR_2D = (0 << 4) | (0 << 20),\n    GX_OBJVRAMMODE_CHAR_1D_32K =\n    (1 << 4) | (0 << 20),\n    GX_OBJVRAMMODE_CHAR_1D_64K =\n    (1 << 4) | (1 << 20),\n    GX_OBJVRAMMODE_CHAR_1D_128K =\n    (1 << 4) | (2 << 20),\n    GX_OBJVRAMMODE_CHAR_1D_256K =\n    (1 << 4) | (3 << 20)\n}\n    GXOBJVRamModeChar;\nvoid GX_Init();\nu32 GX_HBlankIntr(u32 enable);\nu32 GX_VBlankIntr(u32 enable);\nvoid GX_DispOff();\nvoid GX_DispOn();\nvoid GX_SetGraphicsMode(GXDispMode dispMode, GXBGMode bgMode, GXBG0As bg0_2d3d);\nvoid GXS_SetGraphicsMode(GXBGMode mode);\nvoid GXx_SetMasterBrightness_(vu16 *dst, s32 brightness);\nstatic inline void GX_SetMasterBrightness(int brightness)\n{\n    GXx_SetMasterBrightness_(&(*(REGType16v *)0x400006c), brightness);\n}\nstatic inline void GX_SetVisiblePlane(int plane)\n{\n    (*(REGType32v *)0x4000000) = (u32)(((*(REGType32v *)0x4000000) & ~0x00001f00) | (plane << 8));\n}\nstatic inline void GXS_SetVisiblePlane(int plane)\n{\n    (*(REGType32v *)0x4001000) = (u32)(((*(REGType32v *)0x4001000) & ~0x00001f00) | (plane << 8));\n}\nstatic inline void GXS_DispOn(void)\n{\n    (*(REGType32v *)0x4001000) |= 0x00010000;\n}\nstatic inline void GX_SetDispSelect(GXDispSelect sel)\n{\n    (*(REGType16v *)0x4000304) = (u16)(((*(REGType16v *)0x4000304) & ~0x8000) | (sel << 15));\n}\nstatic inline void GX_SetBGScrOffset(GXBGScrOffset offset)\n{\n    (*(REGType32v *)0x4000000) = (u32)(((*(REGType32v *)0x4000000) & ~0x38000000) | (offset << 27));\n}\nstatic inline void GX_SetBGCharOffset(GXBGCharOffset offset)\n{\n    (*(REGType32v *)0x4000000) = (u32)(((*(REGType32v *)0x4000000) & ~0x07000000) | (offset << 24));\n}\nstatic inline void GX_SetVisibleWnd(int window)\n{\n    (*(REGType32v *)0x4000000) = (u32)(((*(REGType32v *)0x4000000) & ~(0x00002000 | 0x00004000 | 0x00008000)) | (window << 13));\n}\nstatic inline void GXS_SetVisibleWnd(int window)\n{\n    (*(REGType32v *)0x4001000) = (u32)(((*(REGType32v *)0x4001000) & ~(0x00002000 | 0x00004000 | 0x00008000)) | (window << 13));\n}\nstatic inline void GXS_SetOBJVRamModeChar(GXOBJVRamModeChar mode)\n{\n    (*(REGType32v *)0x4001000) = (u32)((*(REGType32v *)0x4001000) & ~(0x00300000 | 0x00000010) | mode);\n}\n#define GX_DEFAULT_DMAID 3\ntypedef struct NNSG2dCharacterData\n{\n    u16 H;\n    u16 W;\n    GXTexFmt pixelFmt;\n    GXOBJVRamModeChar mapingType;\n    u32 characterFmt;\n    u32 szByte;\n    void * pRawData;\n} NNSG2dCharacterData;\ntypedef struct NNSG2dScreenData\n{\n    u16 screenWidth;\n    u16 screenHeight;\n    u16 colorMode;\n    u16 screenFormat;\n    u32 szByte;\n    u32 rawData[1];\n} NNSG2dScreenData;\ntypedef struct NNSG2dPaletteData\n{\n    GXTexFmt fmt;\n    BOOL bExtendedPlt;\n    u32 szByte;\n    void * pRawData;\n} NNSG2dPaletteData;\ntypedef enum NNS_G2D_VRAM_TYPE\n{\n    NNS_G2D_VRAM_TYPE_3DMAIN = 0,\n    NNS_G2D_VRAM_TYPE_2DMAIN = 1,\n    NNS_G2D_VRAM_TYPE_2DSUB = 2,\n    NNS_G2D_VRAM_TYPE_MAX = 3\n} NNS_G2D_VRAM_TYPE;\ntypedef enum NNSG2dCharacterDataMapingType\n{\n    NNS_G2D_CHARACTERMAPING_1D_32,\n    NNS_G2D_CHARACTERMAPING_1D_64,\n    NNS_G2D_CHARACTERMAPING_1D_128,\n    NNS_G2D_CHARACTERMAPING_1D_256,\n    NNS_G2D_CHARACTERMAPING_2D,\n    NNS_G2D_CHARACTERMAPING_MAX\n} NNSG2dCharacterDataMapingType;\ntypedef struct NNSG2dImageAttr\n{\n    GXTexSizeS sizeS;\n    GXTexSizeT sizeT;\n    GXTexFmt fmt;\n    BOOL bExtendedPlt;\n    GXTexPlttColor0 plttUse;\n    GXOBJVRamModeChar mappingType;\n} NNSG2dImageAttr;\ntypedef struct NNSG2dVRamLocation\n{\n    u32 baseAddrOfVram[ NNS_G2D_VRAM_TYPE_MAX ];\n} NNSG2dVRamLocation;\ntypedef struct NNSG2dImageProxy\n{\n    NNSG2dVRamLocation vramLocation;\n    NNSG2dImageAttr attr;\n} NNSG2dImageProxy;\ntypedef struct NNSG2dPaletteCompressInfo\n{\n    u16 numPalette;\n    u16 pad16;\n    void * pPlttIdxTbl;\n} NNSG2dPaletteCompressInfo;\nvoid NNS_G2dLoadImage1DMapping\n(\n    const NNSG2dCharacterData * pSrcData,\n    u32 baseAddr,\n    NNS_G2D_VRAM_TYPE type,\n    NNSG2dImageProxy * pImgProxy\n);\nvoid NNS_G2dLoadImage2DMapping\n(\n    const NNSG2dCharacterData * pSrcData,\n    u32 baseAddr,\n    NNS_G2D_VRAM_TYPE type,\n    NNSG2dImageProxy * pImgProxy\n);\ntypedef struct NNSG2dImagePaletteProxy\n{\n    GXTexFmt fmt;\n    BOOL bExtendedPlt;\n    NNSG2dVRamLocation vramLocation;\n} NNSG2dImagePaletteProxy;\nvoid NNS_G2dLoadPalette\n(\n    const NNSG2dPaletteData * pSrcData,\n    u32 addr,\n    NNS_G2D_VRAM_TYPE type,\n    NNSG2dImagePaletteProxy * pPltProxy\n);\nvoid NNS_G2dLoadPaletteEx\n(\n    const NNSG2dPaletteData * pSrcData,\n    const NNSG2dPaletteCompressInfo * pCmpInfo,\n    u32 addr,\n    NNS_G2D_VRAM_TYPE type,\n    NNSG2dImagePaletteProxy * pPltProxy\n);\ntypedef struct NNSG2dCellVramTransferData\n{\n    u32 srcDataOffset;\n    u32 szByte;\n} NNSG2dCellVramTransferData;\ntypedef struct NNSG2dVramTransferData\n{\n    u32 szByteMax;\n    NNSG2dCellVramTransferData * pCellTransferDataArray;\n} NNSG2dVramTransferData;\ntypedef struct NNSG2dCellOAMAttrData\n{\n    u16 attr0;\n    u16 attr1;\n    u16 attr2;\n} NNSG2dCellOAMAttrData;\ntypedef struct NNSG2dCellData\n{\n    u16 numOAMAttrs;\n    u16 cellAttr;\n    NNSG2dCellOAMAttrData * pOamAttrArray;\n} NNSG2dCellData;\ntypedef struct NNSG2dCellDataBank\n{\n    u16 numCells;\n    u16 cellBankAttr;\n    NNSG2dCellData * pCellDataArrayHead;\n    NNSG2dCharacterDataMapingType mappingMode;\n    NNSG2dVramTransferData * pVramTransferData;\n    void * pStringBank;\n    void * pExtendedData;\n} NNSG2dCellDataBank;\ntypedef enum NNSG2dAnimationPlayMode\n{\n    NNS_G2D_ANIMATIONPLAYMODE_INVALID = 0x0,\n    NNS_G2D_ANIMATIONPLAYMODE_FORWARD,\n    NNS_G2D_ANIMATIONPLAYMODE_FORWARD_LOOP,\n    NNS_G2D_ANIMATIONPLAYMODE_REVERSE,\n    NNS_G2D_ANIMATIONPLAYMODE_REVERSE_LOOP,\n    NNS_G2D_ANIMATIONPLAYMODE_MAX\n} NNSG2dAnimationPlayMode;\ntypedef struct NNSG2dAnimFrameData\n{\n    void * pContent;\n    u16 frames;\n    u16 pad16;\n} NNSG2dAnimFrameData;\ntypedef struct NNSG2dAnimSequenceData\n{\n    u16 numFrames;\n    u16 loopStartFrameIdx;\n    u32 animType;\n    NNSG2dAnimationPlayMode playMode;\n    NNSG2dAnimFrameData * pAnmFrameArray;\n} NNSG2dAnimSequenceData;\ntypedef struct NNSG2dAnimBankData\n{\n    u16 numSequences;\n    u16 numTotalFrames;\n    NNSG2dAnimSequenceData * pSequenceArrayHead;\n    NNSG2dAnimFrameData * pFrameArrayHead;\n    void * pAnimContents;\n    void * pStringBank;\n    void * pExtendedData;\n} NNSG2dAnimBankData;\ntypedef struct NNSG2dOamManager\n{\n    u8 unk00[0x1c];\n} NNSG2dOamManager;\nBOOL NNS_G2dGetUnpackedBGCharacterData(void * pNcgrFile, NNSG2dCharacterData ** ppCharData);\nBOOL NNS_G2dGetUnpackedCharacterData(void * pNcgrFile, NNSG2dCharacterData ** ppCharData);\nBOOL NNS_G2dGetUnpackedScreenData(void * pNscrFile, NNSG2dScreenData ** ppScrData);\nBOOL NNS_G2dGetUnpackedPaletteData(void * pNclrFile, NNSG2dPaletteData ** ppPltData);\nBOOL NNS_G2dGetUnpackedPaletteData(void * pNclrFile, NNSG2dPaletteData ** ppPltData);\nBOOL NNS_G2dGetUnpackedPaletteCompressInfo(void * pNclrFile, NNSG2dPaletteCompressInfo ** ppPltCmpInfo);\nBOOL NNS_G2dGetUnpackedCellBank(void * pNcerFile, NNSG2dCellDataBank ** ppCellBank);\nBOOL NNS_G2dGetUnpackedAnimBank(void * pNanrFile, NNSG2dAnimBankData ** ppAnimBank);\nBOOL NNS_G2dGetNewOamManagerInstance(\n    NNSG2dOamManager *oamManager, u16 param1, u16 param2, u16 param3, u16 param4, u32 param5);\nvoid NNS_G2dApplyAndResetOamManagerBuffer(NNSG2dOamManager *oamManager);\nu32 NNS_G2dEntryOamManagerOamWithAffineIdx(\n    NNSG2dOamManager *oamManager, u32 param1, u32 param2);\nu32 NNS_G2dEntryOamManagerAffine(NNSG2dOamManager *oamManager, u32 param1);\nvoid NNS_G2dInitImageProxy(NNSG2dImageProxy *);\nvoid NNS_G2dInitImagePaletteProxy(NNSG2dImagePaletteProxy *);\n#define POKEDIAMOND_GF_GX_PLANES_H \ntypedef enum {\n    GX_PLANE_TOGGLE_OFF,\n    GX_PLANE_TOGGLE_ON,\n} GXPlaneToggle;\ntypedef struct GraphicsBanks\n{\n    GXVRamBG bg;\n    GXVRamBGExtPltt bgextpltt;\n    GXVRamSubBG subbg;\n    GXVRamSubBGExtPltt subbgextpltt;\n    GXVRamOBJ obj;\n    GXVRamOBJExtPltt objextpltt;\n    GXVRamSubOBJ subobj;\n    GXVRamSubOBJExtPltt subobjextpltt;\n    GXVRamTex tex;\n    GXVRamTexPltt texpltt;\n} GraphicsBanks;\ntypedef struct GraphicsModes {\n    GXDispMode dispMode;\n    GXBGMode bgMode;\n    GXBGMode subMode;\n    GXBG0As _2d3dMode;\n} GraphicsModes;\nvoid GfGfx_SetBanks(const struct GraphicsBanks *banks);\nvoid GfGfx_DisableEngineAPlanes(void);\nvoid GfGfx_EngineATogglePlanes(u32 layer_mask, GXPlaneToggle layer_toggle);\nvoid GfGfx_EngineASetPlanes(u32 layer_mask);\nvoid GfGfx_DisableEngineBPlanes(void);\nvoid GfGfx_EngineBTogglePlanes(u32 layer_mask, GXPlaneToggle layer_toggle);\nvoid GfGfx_BothDispOn(void);\nvoid GfGfx_SwapDisplay(void);\nu32 GfGfx_EngineAGetPlanes(void);\n#define POKEDIAMOND_MI_UNCOMPRESS_H \nvoid MIi_UncompressBackward(void * bottom);\nvoid MI_UncompressLZ8(register const void *srcp, register void *destp);\ninline u32 MI_GetUncompressedSize(const void *srcp) {\n    return (*(u32 *)srcp >> 8);\n}\n#define POKEDIAMOND_OS_CACHE_H \nvoid DC_InvalidateAll(void);\nvoid DC_StoreAll(void);\nvoid DC_FlushAll(void);\nvoid DC_InvalidateRange(register void *startAddr, register u32 nBytes);\nvoid DC_StoreRange(register void *startAddr, register u32 nBytes);\nvoid DC_FlushRange(register const void *startAddr, register u32 nBytes);\nvoid DC_WaitWriteBufferEmpty(void);\nvoid IC_InvalidateAll(void);\nvoid IC_InvalidateRange(register void *startAddr, register u32 nBytes);\n#define POKEDIAMOND_HEAP_H \n#define POKEDIAMOND_OS_ARENA_SHARED_H \ntypedef enum {\n    OS_ARENA_MAIN = 0,\n    OS_ARENA_MAIN_SUBPRIV = 1,\n    OS_ARENA_MAINEX = 2,\n    OS_ARENA_ITCM = 3,\n    OS_ARENA_DTCM = 4,\n    OS_ARENA_SHARED = 5,\n    OS_ARENA_WRAM_MAIN = 6,\n    OS_ARENA_WRAM_SUB = 7,\n    OS_ARENA_WRAM_SUBPRIV = 8,\n    OS_ARENA_MAX = 9\n} OSArenaId;\ntypedef struct {\n    void* lo[OS_ARENA_MAX];\n    void* hi[OS_ARENA_MAX];\n    u16 initialized;\n    u8 padding[2];\n} OSArenaInfo;\n#define GUARD_NNS_FND_EXPHEAP_H \n#define GUARD_NNS_FND_HEAPCOMMON_H \n#define GUARD_NNS_FND_LIST_H \ntypedef struct\n{\n    void* prevObject;\n    void* nextObject;\n} NNSFndLink;\ntypedef struct\n{\n    void* headObject;\n    void* tailObject;\n    u16 numObjects;\n    u16 offset;\n} NNSFndList;\nvoid NNS_FndInitList(\n    NNSFndList *pList,\n    s32 alignment\n);\nvoid NNS_FndAppendListObject(\n    NNSFndList *pList,\n    void* object\n);\nvoid NNS_FndRemoveListObject(\n    NNSFndList *pList,\n    void* object\n);\nvoid NNS_FndPrependListObject(NNSFndList* list, void* object);\nvoid NNS_FndInsertListObject(NNSFndList* list, void* where, void* object);\nvoid * NNS_FndGetNextListObject(NNSFndList* list, void* object);\nvoid * NNS_FndGetPrevListObject(NNSFndList* list, void* object);\n#define NNS_FND_HEAP_DEFAULT_ALIGNMENT 4\n#define NNS_FndGetFillValForHeap(type) (0)\ntypedef struct NNSiFndHeapHead NNSiFndHeapHead;\ntypedef s32 NNSiIntPtr;\ntypedef u32 NNSiUIntPtr;\n#define NNSi_FndGetBitValue(data,st,bits) (((data) >>(st)) & ((1 <<(bits)) -1))\n#define NNSi_FndSetBitValue(data,st,bits,val) do { u32 maskBits = (u32)((1 << (bits)) - 1); u32 newVal = (val) & maskBits; (void)(maskBits <<= st); (data) &= ~maskBits; (data) |= newVal << (st); } while (FALSE);\nstruct NNSiFndHeapHead\n{\n    u32 signature;\n    NNSFndLink link;\n    NNSFndList childList;\n    void* heapStart;\n    void* heapEnd;\n    u32 attribute;\n};\ntypedef NNSiFndHeapHead* NNSFndHeapHandle;\nstatic inline NNSiUIntPtr NNSiGetUIntPtr(const void* ptr)\n{\n    return (NNSiUIntPtr)ptr;\n}\nstatic inline u32 GetOffsetFromPtr(const void* start, const void* end)\n{\n    return NNSiGetUIntPtr(end) - NNSiGetUIntPtr(start);\n}\nstatic inline void* AddU32ToPtr(void* ptr, u32 val)\n{\n    return (void*)( NNSiGetUIntPtr(ptr) + val );\n}\nstatic inline const void* AddU32ToCPtr(const void* ptr, u32 val)\n{\n    return (const void*)( NNSiGetUIntPtr(ptr) + val );\n}\nstatic inline void* SubU32ToPtr(void* ptr, u32 val)\n{\n    return (void*)(NNSiGetUIntPtr(ptr) - val);\n}\nstatic inline const void* SubU32ToCPtr(const void* ptr, u32 val)\n{\n    return (const void*)(NNSiGetUIntPtr(ptr) - val);\n}\nstatic inline int ComparePtr(const void* a, const void* b)\n{\n    const u8* wa = a;\n    const u8* wb = b;\n    return wa - wb;\n}\nstatic inline u16 GetOptForHeap(const NNSiFndHeapHead* pHeapHd)\n{\n    return (u16)(((pHeapHd->attribute) >>(0)) & ((1 <<(8)) -1));\n}\nstatic inline void SetOptForHeap(\n    NNSiFndHeapHead* pHeapHd,\n    u16 optFlag\n    )\n{\n    do { u32 maskBits = (u32)((1 << (8)) - 1); u32 newVal = (optFlag) & maskBits; (void)(maskBits <<= 0); (pHeapHd->attribute) &= ~maskBits; (pHeapHd->attribute) |= newVal << (0); } while (0);;\n}\nstatic inline void FillAllocMemory(NNSiFndHeapHead* pHeapHd, void* address, u32 size)\n{\n    if (GetOptForHeap(pHeapHd) & 1)\n        MI_CpuFill32(address, (0), size);\n}\nvoid NNSi_FndInitHeapHead(NNSiFndHeapHead *pHead, u32 signature, void* heapStart, void* heapEnd, u16 optionFlag);\nvoid NNSi_FndFinalizeHeap(NNSiFndHeapHead *pHead);\n#define NNSi_FndRoundUp(value,alignment) (((value) + (alignment - 1)) & ~(alignment - 1))\n#define NNSi_FndRoundUpPtr(ptr,alignment) ((void*)NNSi_FndRoundUp(NNSiGetUIntPtr(ptr), alignment))\n#define NNSi_FndRoundDown(value,alignment) ((value) & ~(alignment - 1))\n#define NNSi_FndRoundDownPtr(ptr,alignment) ((void*)NNSi_FndRoundDown(NNSiGetUIntPtr(ptr), alignment))\ntypedef struct NNSiFndExpHeapMBlockHead NNSiFndExpHeapMBlockHead;\nstruct NNSiFndExpHeapMBlockHead\n{\n    u16 signature;\n    u16 attribute;\n    u32 blockSize;\n    NNSiFndExpHeapMBlockHead* pMBHeadPrev;\n    NNSiFndExpHeapMBlockHead* pMBHeadNext;\n};\ntypedef struct NNSiFndExpMBlockList NNSiFndExpMBlockList;\nstruct NNSiFndExpMBlockList\n{\n    NNSiFndExpHeapMBlockHead* head;\n    NNSiFndExpHeapMBlockHead* tail;\n};\ntypedef struct NNSiFndExpHeapHead NNSiFndExpHeapHead;\nstruct NNSiFndExpHeapHead\n{\n    NNSiFndExpMBlockList mbFreeList;\n    NNSiFndExpMBlockList mbUsedList;\n    u16 groupID;\n    u16 feature;\n};\ntypedef struct NNSiMemRegion {\n    void* start;\n    void* end;\n} NNSiMemRegion;\nNNSFndHeapHandle NNS_FndCreateExpHeapEx(void *startAddress, u32 size, u16 optFlag);\nvoid *NNS_FndAllocFromExpHeapEx(NNSFndHeapHandle heap, u32 size, int alignment);\nvoid NNS_FndDestroyExpHeap(NNSFndHeapHandle heap);\nvoid NNS_FndFreeToExpHeap(NNSFndHeapHandle heap, void *memBlock);\nu32 NNS_FndGetTotalFreeSizeForExpHeap(NNSFndHeapHandle heap);\nu32 NNS_FndGetSizeForMBlockExpHeap(const void *memBlock);\nu32 NNS_FndResizeForMBlockExpHeap(NNSFndHeapHandle heap, void *memBlock, u32 size);\nNNSiFndExpHeapMBlockHead* InsertMBlock(NNSiFndExpMBlockList* list, NNSiFndExpHeapMBlockHead* target, NNSiFndExpHeapMBlockHead* prev);\nNNSiFndExpHeapMBlockHead* InitMBlock(const NNSiMemRegion* pRegion, u16 signature);\nNNSiFndHeapHead* InitExpHeap(void* startAddress, void* endAddress, u16 optFlag);\nvoid* AllocUsedBlockFromFreeBlock(NNSiFndExpHeapHead* pEHHead, NNSiFndExpHeapMBlockHead* pMBHeadFree, void* mblock, u32 size, u16 direction);\nvoid GetRegionOfMBlock(NNSiMemRegion* region, NNSiFndExpHeapMBlockHead* block);\nvoid* AllocFromHead(NNSiFndHeapHead* pHeapHd, u32 size, int alignment);\nvoid* AllocFromTail(NNSiFndHeapHead* pHeapHd, u32 size, int alignment);\nBOOL RecycleRegion(NNSiFndExpHeapHead* pEHHead, const NNSiMemRegion* pRegion);\nNNSiFndExpHeapMBlockHead* RemoveMBlock(NNSiFndExpMBlockList* list, NNSiFndExpHeapMBlockHead* block);\n#define NNS_FndCreateExpHeap(startAddress,size) NNS_FndCreateExpHeapEx(startAddress, size, 0)\n#define NNS_FndAllocFromExpHeap(heap,size) NNS_FndAllocFromExpHeapEx(heap, size, NNS_FND_HEAP_DEFAULT_ALIGNMENT)\n#define GUARD_NNS_FND_ALLOCATOR_H \ntypedef struct NNSFndAllocator NNSFndAllocator;\ntypedef void* (*NNSFndFuncAllocatorAlloc)(\n    NNSFndAllocator* pAllocator,\n    u32 size);\ntypedef void (*NNSFndFuncAllocatorFree)(\n    NNSFndAllocator* pAllocator,\n    void* memBlock);\ntypedef struct NNSFndAllocatorFunc NNSFndAllocatorFunc;\nstruct NNSFndAllocatorFunc\n{\n    NNSFndFuncAllocatorAlloc pfAlloc;\n    NNSFndFuncAllocatorFree pfFree;\n};\nstruct NNSFndAllocator\n{\n    NNSFndAllocatorFunc const * pFunc;\n    void* pHeap;\n    u32 heapParam1;\n    u32 heapParam2;\n};\nvoid *AllocatorAllocForExpHeap(NNSFndAllocator * pAllocator, u32 size);\nvoid AllocatorFreeForExpHeap(NNSFndAllocator * pAllocator, void *memBlock);\nvoid *NNS_FndAllocFromAllocator(NNSFndAllocator * pAllocator, u32 size);\nvoid NNS_FndFreeToAllocator(NNSFndAllocator * pAllocator, void *memBlock);\nvoid NNS_FndInitAllocatorForExpHeap(NNSFndAllocator * pAllocator, NNSFndHeapHandle heap, int alignment);\ntypedef enum HeapID {\n    HEAP_ID_DEFAULT,\n    HEAP_ID_1,\n    HEAP_ID_2,\n    HEAP_ID_MAIN,\n    HEAP_ID_4,\n    HEAP_ID_8 = 8,\n    HEAP_ID_FIELD = 11,\n    HEAP_ID_15 = 15,\n    HEAP_ID_32 = 32,\n    HEAP_ID_49 = 49,\n    HEAP_ID_76 = 76,\n    HEAP_ID_77,\n    HEAP_ID_INTRO = 82,\n    HEAP_ID_INTRO_TV = 83,\n} HeapID;\nstruct HeapParam\n{\n    u32 size;\n    OSArenaId arena;\n};\nvoid InitHeapSystem(const struct HeapParam *templates, u32 nTemplates, u32 totalNumHeaps, u32 pre_size);\ns32 FindFirstAvailableHeapHandle(void);\nBOOL CreateHeap(u32 parent, u32 child, u32 size);\nBOOL CreateHeapAtEnd(u32 parent, u32 child, u32 size);\nBOOL CreateHeapInternal(u32 parent, u32 child, u32 size, s32 alignment);\nvoid DestroyHeap(HeapID heapId);\nvoid *AllocFromHeapInternal(NNSFndHeapHandle heap, u32 size, s32 alignment, HeapID heapId);\nvoid AllocFail(void);\nvoid *AllocFromHeap(HeapID heapId, u32 size);\nvoid *AllocFromHeapAtEnd(HeapID heapId, u32 size);\nvoid FreeToHeap(void *ptr);\nvoid FreeToHeapExplicit(HeapID heapId, void * ptr);\nu32 GF_ExpHeap_FndGetTotalFreeSize(HeapID heapId);\nvoid GF_ExpHeap_FndInitAllocator(NNSFndAllocator * pAllocator, HeapID heapId, int alignment);\nvoid ReallocFromHeap(void *ptr, u32 newSize);\nBOOL GF_heap_c_dummy_return_true(HeapID heapId);\n#define POKEDIAMOND_MATH_UTIL_H \ns32 Sin(u16 degrees);\ns32 Cos(u16 degrees);\ns32 Sin_Wrap(u16 degrees);\ns32 Cos_Wrap(u16 degrees);\nu16 MathUtil_0201B9A0(u16 x);\ns32 Sin32(s32 degrees);\nu32 GetLCRNGSeed();\nvoid SetLCRNGSeed(u32 seed);\nu16 LCRandom(void);\nu32 PRandom(u32 seed);\nvoid SetMTRNGSeed(u32 seed);\nu32 MTRandom(void);\nvoid MTX22_2DAffine(struct Mtx22 * mtx, u16 radians, fx32 x, fx32 y, u8 type);\ns32 CircularDistance(s32 x1, s32 y1, s32 x2, s32 y2);\ns32 MathUtil_0201BC84(u16 arg0, s32 arg1);\ns32 CALC_SomeDeadstrippedFunction(s32 arg);\ntypedef struct BgTemplate {\n    u32 x;\n    u32 y;\n    u32 bufferSize;\n    u32 baseTile;\n    u8 size;\n    u8 colorMode;\n    u8 screenBase;\n    u8 charBase;\n    u8 bgExtPltt;\n    u8 priority;\n    u8 areaOver;\n    u8 dummy;\n    u32 mosaic;\n} BgTemplate;\ntypedef struct Background {\n    void *tilemapBuffer;\n    u32 bufferSize;\n    u32 baseTile;\n    fx32 hOffset;\n    fx32 vOffset;\n    u8 mode;\n    u8 size;\n    u8 colorMode;\n    u8 tileSize;\n    u16 rotation;\n    u16 unk22;\n    fx32 xScale;\n    fx32 yScale;\n    fx32 centerX;\n    fx32 centerY;\n} Background;\ntypedef struct BgConfig {\n    HeapID heapId;\n    u16 scrollScheduled;\n    u16 bufferTransferScheduled;\n    Background bgs[8];\n} BgConfig;\ntypedef struct Bitmap {\n    const u8 *pixels;\n    u16 width;\n    u16 height;\n} Bitmap;\ntypedef struct WindowTemplate {\n    u8 bgId;\n    u8 left;\n    u8 top;\n    u8 width;\n    u8 height;\n    u8 palette;\n    u16 baseTile;\n} WindowTemplate;\ntypedef struct Window {\n    BgConfig *bgConfig;\n    u8 bgId;\n    u8 tilemapLeft;\n    u8 tilemapTop;\n    u8 width;\n    u8 height;\n    u8 paletteNum;\n    u16 baseTile : 15;\n    u16 colorMode : 1;\n    void *pixelBuffer;\n} Window;\nenum GFScreen {\n    SCREEN_MAIN = 0,\n    SCREEN_SUB = 1,\n};\nenum GFBppMode {\n    GF_BG_CLR_4BPP = 0,\n    GF_BG_CLR_8BPP,\n};\nenum GFBgLayer {\n    GF_BG_LYR_MAIN_0 = 0,\n    GF_BG_LYR_MAIN_1,\n    GF_BG_LYR_MAIN_2,\n    GF_BG_LYR_MAIN_3,\n    GF_BG_LYR_SUB_0,\n    GF_BG_LYR_SUB_1,\n    GF_BG_LYR_SUB_2,\n    GF_BG_LYR_SUB_3,\n    GF_BG_LYR_MAIN_CNT = 4,\n    GF_BG_LYR_SUB_CNT = 4,\n    GF_BG_LYR_MAIN_FIRST = GF_BG_LYR_MAIN_0,\n    GF_BG_LYR_SUB_FIRST = GF_BG_LYR_SUB_0,\n    GF_BG_LYR_MAX = 8,\n    GF_BG_LYR_MAIN_0_F = 1 << (GF_BG_LYR_MAIN_0 - GF_BG_LYR_MAIN_FIRST),\n    GF_BG_LYR_MAIN_1_F = 1 << (GF_BG_LYR_MAIN_1 - GF_BG_LYR_MAIN_FIRST),\n    GF_BG_LYR_MAIN_2_F = 1 << (GF_BG_LYR_MAIN_2 - GF_BG_LYR_MAIN_FIRST),\n    GF_BG_LYR_MAIN_3_F = 1 << (GF_BG_LYR_MAIN_3 - GF_BG_LYR_MAIN_FIRST),\n    GF_BG_LYR_SUB_0_F = 1 << (GF_BG_LYR_SUB_0 - GF_BG_LYR_SUB_FIRST),\n    GF_BG_LYR_SUB_1_F = 1 << (GF_BG_LYR_SUB_1 - GF_BG_LYR_SUB_FIRST),\n    GF_BG_LYR_SUB_2_F = 1 << (GF_BG_LYR_SUB_2 - GF_BG_LYR_SUB_FIRST),\n    GF_BG_LYR_SUB_3_F = 1 << (GF_BG_LYR_SUB_3 - GF_BG_LYR_SUB_FIRST),\n    GF_BG_LYR_UNALLOC = 0xFF,\n};\nenum GFPalLoadLocation {\n    GF_PAL_LOCATION_MAIN_BG = 0,\n    GF_PAL_LOCATION_MAIN_OBJ,\n    GF_PAL_LOCATION_MAIN_BGEXT,\n    GF_PAL_LOCATION_MAIN_OBJEXT,\n    GF_PAL_LOCATION_SUB_BG,\n    GF_PAL_LOCATION_SUB_OBJ,\n    GF_PAL_LOCATION_SUB_BGEXT,\n    GF_PAL_LOCATION_SUB_OBJEXT,\n};\nenum GFPalSlotOffset {\n    GF_PAL_SLOT_OFFSET_0 = 0x00,\n    GF_PAL_SLOT_OFFSET_1 = 0x20,\n    GF_PAL_SLOT_OFFSET_2 = 0x40,\n    GF_PAL_SLOT_OFFSET_3 = 0x60,\n    GF_PAL_SLOT_OFFSET_4 = 0x80,\n    GF_PAL_SLOT_OFFSET_5 = 0xA0,\n    GF_PAL_SLOT_OFFSET_6 = 0xC0,\n    GF_PAL_SLOT_OFFSET_7 = 0xE0,\n    GF_PAL_SLOT_OFFSET_8 = 0x100,\n    GF_PAL_SLOT_OFFSET_9 = 0x120,\n    GF_PAL_SLOT_OFFSET_10 = 0x140,\n    GF_PAL_SLOT_OFFSET_11 = 0x160,\n    GF_PAL_SLOT_OFFSET_12 = 0x180,\n    GF_PAL_SLOT_OFFSET_13 = 0x1A0,\n    GF_PAL_SLOT_OFFSET_14 = 0X1C0,\n    GF_PAL_SLOT_OFFSET_15 = 0X1E0\n};\nenum GFBgType {\n    GF_BG_TYPE_TEXT = 0,\n    GF_BG_TYPE_AFFINE,\n    GF_BG_TYPE_256x16PLTT,\n    GF_BG_TYPE_MAX,\n};\nenum GFBgCntSet {\n    GF_BG_CNT_SET_COLOR_MODE = 0,\n    GF_BG_CNT_SET_SCREEN_BASE,\n    GF_BG_CNT_SET_CHAR_BASE,\n};\nenum GFBgScreenSize {\n    GF_BG_SCR_SIZE_128x128 = 0,\n    GF_BG_SCR_SIZE_256x256,\n    GF_BG_SCR_SIZE_256x512,\n    GF_BG_SCR_SIZE_512x256,\n    GF_BG_SCR_SIZE_512x512,\n    GF_BG_SCR_SIZE_1024x1024\n};\nenum BgPosAdjustOp {\n    BG_POS_OP_SET_X = 0,\n    BG_POS_OP_ADD_X,\n    BG_POS_OP_SUB_X,\n    BG_POS_OP_SET_Y,\n    BG_POS_OP_ADD_Y,\n    BG_POS_OP_SUB_Y,\n    BG_POS_OP_SET_ROT = 0,\n    BG_POS_OP_ADD_ROT,\n    BG_POS_OP_SUB_ROT,\n    BG_POS_OP_SET_CENTERX = 9,\n    BG_POS_OP_ADD_CENTERX,\n    BG_POS_OP_SUB_CENTERX,\n    BG_POS_OP_SET_CENTERY,\n    BG_POS_OP_ADD_CENTERY,\n    BG_POS_OP_SUB_CENTERY,\n};\nenum {\n    TILE_SIZE_4BPP = 32,\n    TILE_SIZE_8BPP = 64,\n};\n#define TILEMAP_COPY_SRC_FLAT 0\n#define TILEMAP_COPY_SRC_RECT 1\n#define TILEMAP_FILL_KEEP_PAL 16\n#define TILEMAP_FILL_OVWT_PAL 17\nBgConfig *BgConfig_Alloc(HeapID heapId);\nHeapID BgConfig_GetHeapId(BgConfig *bgConfig);\nvoid SetBothScreensModesAndDisable(const GraphicsModes *modes);\nvoid SetScreenModeAndDisable(const struct GraphicsModes *gfxModes, enum GFScreen screen);\nvoid InitBgFromTemplate(BgConfig *bgConfig, u8 bgId, const BgTemplate *template, u8 bgMode);\nvoid SetBgControlParam(BgConfig *config, u8 bgId, enum GFBgCntSet attr, u8 value);\nvoid FreeBgTilemapBuffer(BgConfig *bgConfig, u8 bgId);\nvoid SetBgPriority(u8 bgId, u16 priority);\nvoid ToggleBgLayer(u8 bgId, GXPlaneToggle toggle);\nvoid BgSetPosTextAndCommit(BgConfig *bgConfig, u8 bgId, enum BgPosAdjustOp op, fx32 val);\nfx32 Bg_GetXpos(const BgConfig *bgConfig, enum GFBgLayer bgId);\nfx32 Bg_GetYpos(BgConfig *bgConfig, enum GFBgLayer bgId);\nvoid Bg_SetTextDimAndAffineParams(BgConfig *bgConfig, u8 bgId, enum BgPosAdjustOp op, fx32 value, MtxFx22 *mtx, fx32 centerX, fx32 centerY);\nvoid SetBgAffine(BgConfig *bgConfig, u8 bgId, MtxFx22 *mtx, fx32 centerX, fx32 centerY);\nvoid BgCommitTilemapBufferToVram(BgConfig *bgConfig, u8 bgId);\nvoid BgCopyOrUncompressTilemapBufferRangeToVram(BgConfig *bgConfig, u8 bgId, const void *buffer, u32 bufferSize, u32 baseTile);\nvoid BG_LoadScreenTilemapData(BgConfig *bgConfig, u8 bgId, const void *data, u32 size);\nvoid BG_LoadCharTilesData(BgConfig *bgConfig, u8 bgId, const void *data, u32 size, u32 tileStart);\nvoid BG_ClearCharDataRange(u8 bgId, u32 size, u32 offset, HeapID heapId);\nvoid BG_FillCharDataRange(BgConfig *bgConfig, enum GFBgLayer bgId, u32 fillValue, u32 ntiles, u32 offset);\nvoid BG_LoadPlttData(u32 location, void *plttData, u32 size, enum GFPalSlotOffset offset);\nvoid BG_SetMaskColor(u8 bgId, u16 value);\nvoid LoadRectToBgTilemapRect(BgConfig *bgConfig, u8 bgId, const void *buffer, u8 destX, u8 destY, u8 width, u8 height);\nvoid CopyToBgTilemapRect(BgConfig *bgConfig, u8 bgId, u8 destX, u8 destY, u8 destWidth, u8 destHeight, const void *buffer, u8 srcX, u8 srcY, u8 srcWidth, u8 srcHeight);\nvoid CopyRectToBgTilemapRect(BgConfig *bgConfig, u8 bgId, u8 destX, u8 destY, u8 destWidth, u8 destHeight, const void *buffer, u8 srcX, u8 srcY, u8 srcWidth, u8 srcHeight);\nvoid FillBgTilemapRect(BgConfig *bgConfig, u8 bgId, u16 fillValue, u8 x, u8 y, u8 width, u8 height, u8 mode);\nvoid BgTilemapRectChangePalette(BgConfig *bgConfig, u8 bgId, u8 x, u8 y, u8 width, u8 height, u8 palette);\nvoid BgClearTilemapBufferAndCommit(BgConfig *bgConfig, u8 bgId);\nvoid BgFillTilemapBufferAndCommit(BgConfig *bgConfig, u8 bgId, u16 fillValue);\nvoid BgFillTilemapBufferAndSchedule(BgConfig *bgConfig, u8 bgId, u16 fillValue);\nvoid *BgGetCharPtr(u8 bgId);\nu8 *Convert4bppTo8bpp(u8 *src4Bpp, u32 size, u8 paletteNum, HeapID heapId);\nvoid *GetBgTilemapBuffer(BgConfig *bgConfig, u8 bgId);\nu16 GetBgRotation(BgConfig *bgConfig, u8 bgId);\nu8 GetBgPriority(BgConfig *bgConfig, u8 bgId);\nvoid BlitBitmapRect4Bit(const Bitmap *src, const Bitmap *dest, u16 srcX, u16 srcY, u16 destX, u16 destY, u16 width, u16 height, u16 colorKey);\nvoid FillBitmapRect8Bit(const Bitmap *surface, u16 x, u16 y, u16 width, u16 height, u8 fillValue);\nWindow *AllocWindows(HeapID heapId, s32 num);\nvoid InitWindow(Window *window);\nBOOL WindowIsInUse(const Window *window);\nvoid AddWindowParameterized(BgConfig *bgConfig, Window *window, u8 bgId, u8 x, u8 y, u8 width, u8 height, u8 paletteNum, u16 baseTile);\nvoid AddTextWindowTopLeftCorner(BgConfig *bgConfig, Window *window, u8 width, u8 height, u16 baseTile, u8 paletteNum);\nvoid AddWindow(BgConfig *bgConfig, Window *window, const WindowTemplate *template);\nvoid RemoveWindow(Window *window);\nvoid WindowArray_Delete(Window *windows, s32 count);\nvoid CopyWindowToVram(Window *window);\nvoid ScheduleWindowCopyToVram(Window *window);\nvoid PutWindowTilemap(Window *window);\nvoid PutWindowTilemapRectAnchoredTopLeft(Window *window, u8 width, u8 height);\nvoid ClearWindowTilemap(Window *window);\nvoid PutWindowTilemap_AffineMode(Window *window);\nvoid CopyWindowPixelsToVram_TextMode(Window *window);\nvoid ClearWindowTilemapAndCopyToVram(Window *window);\nvoid ClearWindowTilemapAndScheduleTransfer(Window *window);\nvoid FillWindowPixelBuffer(Window *window, u8 fillValue);\nvoid BlitBitmapRectToWindow(Window *window, void *src, u16 srcX, u16 srcY, u16 srcWidth, u16 srcHeight, u16 destX, u16 destY, u16 destWidth, u16 destHeight);\nvoid BlitBitmapRect(Window *window, void *src, u16 srcX, u16 srcY, u16 srcWidth, u16 srcHeight, u16 destX, u16 destY, u16 destWidth, u16 destHeight, u16 colorKey);\nvoid FillWindowPixelRect(Window *window, u8 fillValue, u16 x, u16 y, u16 width, u16 height);\nvoid CopyGlyphToWindow(Window *window, u8 *glyphPixels, u16 srcWidth, u16 srcHeight, u16 destX, u16 destY, u16 table);\nvoid ScrollWindow(Window *window, u8 direction, u8 y, u8 fillValue);\nu8 GetWindowBgId(Window *window);\nu8 GetWindowWidth(Window *window);\nu8 GetWindowHeight(Window *window);\nu8 GetWindowX(Window *window);\nu8 GetWindowY(Window *window);\nvoid SetWindowX(Window *window, u8 x);\nvoid SetWindowY(Window *window, u8 y);\nvoid SetWindowPaletteNum(Window *window, u8 paletteNum);\nNNSG2dCharacterData *LoadCharacterDataFromFile(void **char_ret, HeapID heapId, const char *path);\nNNSG2dPaletteData *LoadPaletteDataFromFile(void **pltt_ret, HeapID heapId, const char *path);\nvoid DoScheduledBgGpuUpdates(BgConfig *bgConfig);\nvoid ScheduleBgTilemapBufferTransfer(BgConfig *bgConfig, u8 bgId);\nvoid ScheduleSetBgPosText(BgConfig *bgConfig, u8 bgId, enum BgPosAdjustOp op, fx32 value);\nvoid ScheduleSetBgAffineRotation(BgConfig *bgConfig, u8 bgId, enum BgPosAdjustOp op, u16 value);\nvoid ScheduleSetBgAffinePos(BgConfig *bgConfig, u8 bgId, enum BgPosAdjustOp op, fx32 value);\nBOOL DoesPixelAtScreenXYMatchPtrVal(BgConfig *bgConfig, u8 bgId, u8 x, u8 y, u16 *src);\n#define POKEDIAMOND_CAMERA_H \n#define CAMERA_UPDATE_ENABLE_X 1\n#define CAMERA_UPDATE_ENABLE_Y 2\n#define CAMERA_UPDATE_ENABLE_Z 4\n#define CAMERA_PERSPECTIVE_TYPE_PERSPECTIVE 0\n#define CAMERA_PERSPECTIVE_TYPE_ORTHOGRAPHIC 1\ntypedef struct CameraHistory {\n    s32 count;\n    s32 readIdx;\n    s32 writeIdx;\n    s32 writeIdxInit;\n    BOOL overrideEnabled;\n    BOOL enableUpdateX;\n    BOOL enableUpdateY;\n    BOOL enableUpdateZ;\n    VecFx32 *vecs;\n} CameraHistory;\ntypedef struct CameraAngle {\n    u16 x;\n    u16 y;\n    u16 z;\n    u16 unused;\n} CameraAngle;\ntypedef struct CameraPerspective {\n    fx32 fovySin;\n    fx32 fovyCos;\n    fx32 aspect;\n    fx32 near;\n    fx32 far;\n} CameraPerspective;\ntypedef struct CameraLookAt {\n    VecFx32 camPos;\n    VecFx32 camTarget;\n    VecFx32 camUp;\n} CameraLookAt;\ntypedef struct Camera {\n    CameraPerspective perspective;\n    CameraLookAt lookAt;\n    fx32 distance;\n    CameraAngle angle;\n    u8 perspectiveType;\n    u16 perspectiveAngle;\n    VecFx32 lastTarget;\n    const VecFx32 *curTarget;\n    BOOL enableOffsetX;\n    BOOL enableOffsetY;\n    BOOL enableOffsetZ;\n    CameraHistory *history;\n} Camera;\nvoid Camera_History_New(s32 count, s32 initialWriteIdx, s32 updateEnableFlags, HeapID heapId, Camera *camera);\nvoid Camera_History_Delete(Camera *camera);\nCamera *Camera_New(HeapID heapId);\nvoid Camera_Delete(Camera *camera);\nvoid Camera_Copy(Camera *src, Camera *dest);\nvoid Camera_SetStaticPtr(Camera *camera);\nvoid Camera_UnsetStaticPtr(void);\nvoid Camera_PushLookAtToNNSGlb(void);\nvoid Camera_SetLookAtCamUp(VecFx32 *camUp, Camera *camera);\nvoid Camera_SetFixedTarget(VecFx32 *target, Camera *camera);\nvoid Camera_ClearFixedTarget(Camera *camera);\nvoid Camera_SetPerspectiveClippingPlane(fx32 near, fx32 far, Camera *camera);\nvoid Camera_Init_FromTargetDistanceAndAngle(VecFx32 *target, fx32 distance, CameraAngle *angle, u16 perspectiveAngle, u8 perspectiveType, BOOL setReference, Camera *camera);\nvoid Camera_Init_FromPosDistanceAndAngle(VecFx32 *pos, fx32 distance, CameraAngle *angle, u16 perspectiveAngle, u8 perspectiveType, Camera *camera);\nvoid Camera_Init_FromTargetAndPos(const VecFx32 *target, const VecFx32 *pos, u16 perspectiveAngle, u8 perspectiveType, BOOL setReference, Camera *camera);\nvoid Camera_ApplyPerspectiveType(u8 perspectiveType, Camera *camera);\nvoid Camera_SetPerspectiveAngle(u16 perspectiveAngle, Camera *camera);\nvoid Camera_AdjustPerspectiveAngle(u16 rotation, Camera *camera);\nvoid Camera_OffsetLookAtPosAndTarget(const VecFx32 *delta, Camera *camera);\nvoid Camera_SetAnglePos(const CameraAngle *angle, Camera *camera);\nvoid Camera_AdjustAngleTarget(const CameraAngle *delta, Camera *camera);\nvoid Camera_SetDistance(fx32 distance, Camera *camera);\nvoid Camera_SetLookAtTargetAndRecalcPos(const VecFx32 *target, Camera *camera);\nu16 Camera_GetPerspectiveAngle(Camera *camera);\nfx32 Camera_GetDistance(Camera *camera);\nvoid Camera_GetAngle(CameraAngle *dest, Camera *camera);\nvoid Camera_GetLookAtCamTarget(VecFx32 *dest, const Camera *camera);\nvoid Camera_GetLookAtCamPos(VecFx32 *dest, const Camera *camera);\nvoid Camera_SetLookAtCamTarget(const VecFx32 *target, Camera *camera);\nvoid Camera_SetLookAtCamPos(const VecFx32 *pos, Camera *camera);\n#define POKEDIAMOND_FIELD_PLAYER_AVATAR_H \ntypedef struct PlayerAvatar\n{\n    u8 padding0[0x40];\n} PlayerAvatar;\n#define POKEDIAMOND_SAVE_H \n#define GUARD_MATH_CRC_H \ntypedef u8 MATHCRC8Context;\ntypedef u16 MATHCRC16Context;\ntypedef u32 MATHCRC32Context;\n#define MATH_CRC16_CCITT_POLY 0x1021\nstruct MATHCRC8Table {\n    u8 table[256];\n};\nstruct MATHCRC16Table {\n    u16 table[256];\n};\nstruct MATHCRC32Table {\n    u32 table[256];\n};\nu32 MATH_CalcCRC32(const struct MATHCRC32Table *table, const void *data, u32 dataLength);\nvoid MATHi_CRC32UpdateRev(const struct MATHCRC32Table *table, MATHCRC32Context *context, const void *input, u32 length);\nu16 MATH_CalcCRC16CCITT(const struct MATHCRC16Table *table, const void *data, u32 dataLength);\nvoid MATHi_CRC16Update(const struct MATHCRC16Table *table, MATHCRC16Context *context, const void *input, u32 length);\nu16 MATH_CalcCRC16(const struct MATHCRC16Table *table, const void *data, u32 dataLength);\nvoid MATHi_CRC16UpdateRev(const struct MATHCRC16Table *table, MATHCRC16Context *context, const void *input, u32 length);\nu8 MATH_CalcCRC8(const struct MATHCRC8Table *table, const void *data, u32 dataLength);\nvoid MATHi_CRC8Update(const struct MATHCRC8Table *table, MATHCRC8Context *context, const void *input, u32 length);\nvoid MATHi_CRC32InitTableRev(struct MATHCRC32Table *table, u32 poly);\nvoid MATHi_CRC16UpdateRev(const struct MATHCRC16Table *table, MATHCRC16Context *context, const void *input, u32 length);\nvoid MATHi_CRC16Update(const struct MATHCRC16Table *table, MATHCRC16Context *context, const void *input, u32 length);\nvoid MATHi_CRC16InitTableRev(struct MATHCRC16Table *table, u16 poly);\nvoid MATHi_CRC16InitTable(struct MATHCRC16Table *table, u16 poly);\nvoid MATHi_CRC8Update(const struct MATHCRC8Table *table, MATHCRC8Context *context, const void *input, u32 length);\nvoid MATHi_CRC8InitTable(struct MATHCRC8Table *table, u8 poly);\nstatic inline void MATH_CRC16InitTable(struct MATHCRC16Table * table)\n{\n    MATHi_CRC16InitTable(table, 0x1021);\n}\n#define POKEDIAMOND_CONSTANTS_SAVE_ARRAYS_H \n#define SAVE_BAG 3\n#define SAVE_FLAGS 4\n#define SAVE_DAYCARE 8\n#define SAVE_SAFARI_ZONE 27\n#define SAVE_EASY_CHAT 34\n#define SAVE_BLOCK_NUM 36\n#define SAVE_PAGE_MAX 32\n#define SAVE_SECTOR_SIZE 0x1000\nstruct SaveArrayHeader\n{\n    int id;\n    u32 size;\n    u32 offset;\n    u16 crc;\n    u16 slot;\n};\nstruct SaveArrayFooter\n{\n    u32 magic;\n    u32 saveno;\n    u32 size;\n    u16 idx;\n    u16 crc;\n};\nstruct SaveChunkFooter\n{\n    u32 unk_0;\n    u32 offset;\n    u32 size;\n    u32 magic;\n    u8 unk_10;\n    u8 padding_11;\n    u16 crc;\n};\nstruct SaveSlotSpec {\n    u8 id;\n    u8 firstPage;\n    u8 numPages;\n    u8 padding_3;\n    u32 offset;\n    u32 size;\n};\nstruct AsyncWriteManager\n{\n    int rollbackCounter;\n    int unk_4;\n    int curSector;\n    int numSectors;\n    int lockId;\n    u32 state;\n    u32 count;\n    u32 unk_1C[2];\n};\nstruct UnkStruct_0202288C\n{\n    BOOL unk_0;\n    u32 offset;\n    u32 size;\n};\ntypedef struct SaveData\n{\n                  BOOL flashOkay;\n                  u32 saveFileExists;\n                  u32 isNewGame;\n                  int largeSectorChanged;\n                  int unk_00010;\n                  struct MATHCRC16Table crcTable;\n                  u8 dynamic_region[32 * 0x1000];\n                  u32 unk_20214;\n                  u32 unk_20218[2];\n                  u8 unk_20220[2];\n                  u8 filler_20222[2];\n                  struct SaveArrayHeader arrayHeaders[36];\n                  struct SaveSlotSpec saveSlotSpecs[2];\n                  struct AsyncWriteManager asyncWriteMan;\n                  u32 unk_204A0;\n                  u32 unk_204A4;\n} SaveData;\ntypedef u32 (*SAVSIZEFN)(void);\ntypedef void (*SAVINITFN)(void *);\nstruct SaveChunkHeader\n{\n    int id;\n    int linkedId;\n    SAVSIZEFN sizeFunc;\n    SAVINITFN initFunc;\n};\nextern const struct SaveChunkHeader UNK_020EE6E0[];\nextern const struct SaveChunkHeader UNK_020EE700[];\nextern const int UNK_020EE6DC;\nextern const int UNK_020EE6D8;\nstruct SaveData * SaveData_New(void);\nstruct SaveData * sub_020225F8(void);\nvoid * SaveArray_Get(struct SaveData * save, int idx);\nvoid * sub_02022634(struct SaveData * save, int idx);\nBOOL sub_0202263C(struct SaveData * save);\nBOOL sub_020226FC(struct SaveData * save);\nint SaveGame(struct SaveData * save);\nvoid sub_020227A0(struct SaveData * save, int a1);\nvoid Save_InitDynamicRegion(struct SaveData * save);\nint sub_020227FC(struct SaveData * save);\nint sub_02022800(struct SaveData * save);\nu32 Save_FileExists(struct SaveData * save);\nu32 Save_IsNewGame(struct SaveData * save);\nBOOL Save_FileDoesNotBelongToPlayer(struct SaveData * save);\nint Save_GetDirtyBit(struct SaveData * save);\nvoid Save_SetDirtyBit(void);\nvoid sub_02022840(struct SaveData * save, int a1);\nint sub_02022854(struct SaveData * save);\nvoid sub_0202287C(struct SaveData * save);\nvoid sub_0202288C(struct UnkStruct_0202288C * header);\nu16 sub_02022898(struct SaveData * save, void * data, u32 size);\nu32 GetChunkOffsetFromCurrentSaveSlot(u32 slot, struct SaveSlotSpec * header);\nstruct SaveChunkFooter * sub_020228B8(struct SaveData * save, u8 * offset, int idx);\nBOOL sub_020228E0(struct SaveData * save, void * data, int idx);\nvoid sub_0202293C(struct UnkStruct_0202288C * r5, struct SaveData * save, void * data, int idx);\nvoid sub_02022968(struct SaveData * save, void * data, int idx);\nint sub_020229B8(u32 x, u32 y);\nint sub_020229F0(struct UnkStruct_0202288C * r7, struct UnkStruct_0202288C * r6, u32 * r5, u32 * r4);\nvoid sub_02022AA0(struct SaveData * save, struct UnkStruct_0202288C * a1, struct UnkStruct_0202288C * a2, u32 a3, u32 a4);\nint sub_02022AD8(struct SaveData * save);\nBOOL FlashLoadChunkIntoDynamicRegionFromHeader(u32 slot, struct SaveSlotSpec * header, u8 * dest);\nBOOL Save_LoadDynamicRegion(struct SaveData * save);\nint sub_02022D54(struct SaveData * save, int chunk, u8 slot);\nint sub_02022D94(struct SaveData * save, int chunk, u8 slot);\nint sub_02022DC8(struct SaveData * save, int chunk, u8 slot);\nvoid sub_02022DFC(struct SaveData * save, struct AsyncWriteManager * a1, int a2);\nint sub_02022E78(struct SaveData * save, struct AsyncWriteManager * a1);\nvoid sub_02022F80(struct SaveData * save, struct AsyncWriteManager * a1, int a2);\nvoid sub_02022FF0(struct SaveData * save, struct AsyncWriteManager * a1);\nint sub_02023044(struct SaveData * save);\nint FlashClobberChunkFooter(struct SaveData * save, int x, u32 y);\nu32 SaveArray_sizeof(int idx);\nvoid SaveData_InitSubstructs(struct SaveArrayHeader * headers);\nvoid sub_02023160(struct SaveSlotSpec * spec, struct SaveArrayHeader * headers);\nvoid Save_InitDynamicRegion_Internal(u8 * dynamic_region, struct SaveArrayHeader * headers);\nvoid CreateChunkFooter(struct SaveData * save, u8 * data, int id, u32 size);\nBOOL ValidateChunk(struct SaveData * save, u8 * data, int id, u32 size);\nu32 sub_020232B4(u8 * data, u32 size);\nint WriteSaveFileToFlash(struct SaveData * save, int idx, u8 * data);\nu8 * ReadSaveFileFromFlash(struct SaveData * save, HeapID heapId, int idx, int * ret_p);\nBOOL SaveDetectFlash(void);\nint FlashWriteChunk(u32 offset, u8 * data, u32 size);\nBOOL FlashLoadChunk(u32 src, void * dest, u32 size);\nvoid FlashWriteCommandCallback(void * arg);\nint FlashWriteChunkInternal(u32 dest, void * src, u32 size);\nBOOL WaitFlashWrite(int lock, BOOL * res);\nvoid SaveErrorHandling(int lock, u32 errno);\n#define POKEDIAMOND_TASK_H \n#define GUARD_MAIN_H \n#define NITRO_FS_OVERLAY_H_ \n#define POKEDIAMOND_NITRO_H \n#define GUARD_SECTIONS_H \n#pragma define_section ITCM \".itcm\" \".itcm.bss\" abs32 RWX\n#pragma define_section DTCM \".dtcm\" \".dtcm.bss\" abs32 RWX\n#pragma define_section VERSION \".version\" abs32 RWX\n#pragma define_section PARENT \".parent\" abs32 RWX\n#define GUARD_MISC_H \nvoid OSi_ReferSymbol(void *symbol);\n#define SDK_REFER_SYMBOL(symbol) OSi_ReferSymbol((void*)(symbol))\n#define SDK_MIDDLEWARE_STRING(vender,module) \"[SDK+\" vender \":\" module \"]\"\n#define SDK_DEFINE_MIDDLEWARE(id,vender,module) static char id [] = SDK_MIDDLEWARE_STRING(vender, module)\n#define SDK_USING_MIDDLEWARE(id) SDK_REFER_SYMBOL(id)\n#define POKEDIAMOND_ARM9_OS_INIT_H \n#define POKEDIAMOND_OS_TCM_H \nu32 OS_GetDTCMAddress(void);\n#define POKEDIAMOND_ARM9_OS_SPINLOCK_H \n#define POKEDIAMOND_OS_SPINLOCK_SHARED_H \ntypedef volatile struct OSLockWord {\n    u32 lockFlag;\n    u16 ownerID;\n    u16 extension;\n} OSLockWord;\n#define POKEDIAMOND_ARM9_SYSCALL_H \nvoid SVC_CpuSet(const void *srcp, void *destp, u32 dmaCntData);\n#define SVC_CpuClear(data,destp,size,bit) do{ vu ##bit tmp = (vu ##bit )(data); SVC_CpuSet((u8 *)&(tmp), (u8 *)(destp), ( MI_DMA_SRC_FIX | MI_DMA_ ##bit ##BIT_BUS | ((size)/((bit)/8) & 0x1fffff))); } while(0)\nvoid SVC_WaitByLoop(u32 ct);\n#define OS_ReadOwnerOfLockCartridge() OS_ReadOwnerOfLockWord( (OSLockWord *)HW_CTRDG_LOCK_BUF )\n#define OS_MAINP_LOCKED_FLAG 0x40\n#define OS_LOCK_SUCCESS 0\n#define OS_LOCK_ID_ERROR (-3)\nstatic inline void OSi_WaitByLoop(void)\n{\n    SVC_WaitByLoop(0x1000 / 4);\n}\nvoid OS_InitLock(void);\ns32 OSi_DoLockByWord(u16 lockId, OSLockWord *lockp, void (*ctrlFuncp) (void),\n        BOOL disableFiq);\ns32 OS_TryLockByWord(u16 lockId, OSLockWord *lockp, void (*ctrlFuncp) (void));\ns32 OSi_DoUnlockByWord(u16 lockID, OSLockWord *lockp, void (*ctrlFuncp) (void),\n        BOOL disableFIQ);\ns32 OS_UnlockByWord(u16 lockId, OSLockWord *lockp, void (*ctrlFuncp) (void));\ns32 OSi_DoTryLockByWord(u16 lockID, OSLockWord *lockp, void (*ctrlFuncp) (void),\n        BOOL disableFiq);\ns32 OS_LockCartridge(u16 lockID);\ns32 OS_UnlockCartridge(u16 lockID);\ns32 OS_TryLockCartridge(u16 lockID);\nvoid OSi_AllocateCartridgeBus(void);\nvoid OSi_FreeCartridgeBus(void);\ns32 OS_TryLockCard(u16 lockID);\ns32 OS_UnlockCard(u16 lockID);\nvoid OSi_AllocateCardBus(void);\nvoid OSi_FreeCardBus(void);\nu16 OS_ReadOwnerOfLockWord(OSLockWord * lock);\ns32 OS_UnLockCartridge(u16 lockID);\ns32 OS_GetLockID(void);\nvoid OS_ReleaseLockID(register u16 lockID);\n#define POKEDIAMOND_ARM9_OS_CONTEXT_H \n#define POKEDIAMOND_CP_CONTEXT_H \ntypedef struct CPContext {\n    u64 div_numer;\n    u64 div_denom;\n    u64 sqrt;\n    u16 div_mode;\n    u16 sqrt_mode;\n} CPContext;\nvoid CP_SaveContext(register CPContext *context);\nvoid CPi_RestoreContext(const CPContext* context);\ntypedef struct OSContext\n{\n    u32 cpsr;\n    u32 r[13];\n    u32 sp;\n    u32 lr;\n    u32 pc_plus4;\n    u32 sp_svc;\n    CPContext cp_context;\n} OSContext;\nvoid OS_InitContext(register OSContext *context, register u32 newpc, register u32 newsp);\nBOOL OS_SaveContext(register OSContext *context);\nvoid OS_LoadContext(register OSContext *context);\n#define POKEDIAMOND_ARM9_OS_TIMER_H \n#define POKEDIAMOND_OS_TIMER_SHARED_H \ntypedef enum\n{\n    OS_TIMER_PRESCALER_1 = (0UL << 0),\n    OS_TIMER_PRESCALER_64 = (1UL << 0),\n    OS_TIMER_PRESCALER_256 = (2UL << 0),\n    OS_TIMER_PRESCALER_1024 = (3UL << 0)\n} OSTimerPrescaler;\ntypedef enum\n{\n    OS_TIMER_0 = 0,\n    OS_TIMER_1 = 1,\n    OS_TIMER_2 = 2,\n    OS_TIMER_3 = 3\n} OSTimer;\nstatic inline void OS_SetTimerCount(OSTimer id, u16 count)\n{\n    *((REGType16 *)((u32)&(*(REGType16v *)0x4000100) + id * 4)) = count;\n}\nstatic inline void OS_SetTimerControl(OSTimer id, u16 control)\n{\n    *((REGType16 *)((u32)&(*(REGType16v *)0x4000102) + id * 4)) = control;\n}\nvoid OSi_SetTimerReserved(s32 timerNum);\n#define POKEDIAMOND_ARM9_OS_TICK_H \n#define POKEDIAMOND_OS_TICK_SHARED_H \ntypedef u64 OSTick;\n#define OS_SYSTEM_CLOCK HW_SYSTEM_CLOCK\n#define OS_MilliSecondsToTicks(msec) ((OSTick)(((OS_SYSTEM_CLOCK/1000) * (u64)(msec)) / 64))\n#define OSi_TICK_TIMERCONTROL (REG_OS_TM0CNT_H_E_MASK | REG_OS_TM0CNT_H_I_MASK | OS_TIMER_PRESCALER_64)\nvoid OS_InitTick(void);\nBOOL OS_IsTickAvailable(void);\nOSTick OS_GetTick(void);\nu16 OS_GetTickLo(void);\n#define POKEDIAMOND_ARM9_OS_ALARM_H \n#define POKEDIAMOND_ARM9_OS_THREAD_H \n#define POKEDIAMOND_OS_THREAD_SHARED_H \ntypedef struct OSiAlarm OSAlarm;\ntypedef struct _OSThread OSThread;\ntypedef struct _OSThreadQueue OSThreadQueue;\ntypedef struct _OSThreadLink OSThreadLink;\ntypedef struct _OSMutexQueue OSMutexQueue;\ntypedef struct _OSMutexLink OSMutexLink;\ntypedef struct OSMutex OSMutex;\nstruct _OSThreadQueue\n{\n    OSThread *head;\n    OSThread *tail;\n};\nstruct _OSThreadLink\n{\n    OSThread *prev;\n    OSThread *next;\n};\nstruct _OSMutexQueue\n{\n    OSMutex *head;\n    OSMutex *tail;\n};\nstruct _OSMutexLink\n{\n    OSMutex *next;\n    OSMutex *prev;\n};\ntypedef struct OSThreadInfo {\n    u16 isNeedRescheduling;\n    u16 irqDepth;\n    OSThread* current;\n    OSThread* list;\n    void* switchCallback;\n} OSThreadInfo;\ntypedef enum {\n    OS_THREAD_STATE_WAITING = 0,\n    OS_THREAD_STATE_READY = 1,\n    OS_THREAD_STATE_TERMINATED = 2\n} OSThreadState;\ntypedef void (*OSSwitchThreadCallback) (OSThread *from, OSThread *to);\ntypedef void (*OSThreadDestructor) (void *);\nstruct _OSThread\n{\n    OSContext context;\n    OSThreadState state;\n    OSThread *next;\n    u32 id;\n    u32 priority;\n    void *profiler;\n    OSThreadQueue *queue;\n    OSThreadLink link;\n    OSMutex *mutex;\n    OSMutexQueue mutexQueue;\n    u32 stackTop;\n    u32 stackBottom;\n    u32 stackWarningOffset;\n    OSThreadQueue joinQueue;\n    void *specific[3];\n    OSAlarm *alarmForSleep;\n    OSThreadDestructor destructor;\n    void *userParameter;\n    u32 systemErrno;\n};\nextern OSThreadInfo OSi_ThreadInfo;\nstatic inline OSThreadInfo *OS_GetThreadInfo(void)\n{\n    return &OSi_ThreadInfo;\n}\nstatic inline BOOL OS_IsThreadRunnable(const OSThread *thread)\n{\n    return thread->state == OS_THREAD_STATE_READY;\n}\nstatic inline void OS_InitThreadQueue(OSThreadQueue * queue)\n{\n    queue->head = queue->tail = ((void *)0);\n}\nstatic inline OSThread *OS_GetCurrentThread(void)\n{\n    return OS_GetThreadInfo()->current;\n}\nstatic inline void OS_SetCurrentThread(OSThread *thread)\n{\n    OS_GetThreadInfo()->current = thread;\n}\n#define OSi_GetCurrentThread() (*OSi_CurrentThreadPtr)\nOSMutex *OSi_RemoveMutexLinkFromQueue(OSMutexQueue *queue);\nvoid OS_InitThread(void);\nBOOL OS_IsThreadAvailable(void);\nvoid OS_CreateThread(OSThread *thread, void (*func) (void *), void *arg, void *stack, u32 stackSize, u32 prio);\nvoid OS_ExitThread(void);\nvoid OS_DestroyThread(OSThread *thread);\nvoid OS_JoinThread(OSThread *thread);\nBOOL OS_IsThreadTerminated(const OSThread *thread);\nvoid OS_SleepThread(OSThreadQueue *queue);\nvoid OS_WakeupThread(OSThreadQueue *queue);\nvoid OS_WakeupThreadDirect(OSThread *thread);\nOSThread *OS_SelectThread(void);\nvoid OS_RescheduleThread(void);\nvoid OS_YieldThread(void);\nBOOL OS_SetThreadPriority(OSThread *thread, u32 prio);\nu32 OS_GetThreadPriority(const OSThread *thread);\nvoid OS_Sleep(u32 msec);\nOSSwitchThreadCallback OS_SetSwitchThreadCallback(OSSwitchThreadCallback callback);\nu32 OS_DisableScheduler(void);\nu32 OS_EnableScheduler(void);\nvoid OS_SetThreadDestructor(OSThread *thread, OSThreadDestructor dtor);\n#define POKEDIAMOND_OS_ALARM_SHARED_H \ntypedef void (*OSAlarmHandler) (void *);\nstruct OSiAlarm\n{\n    OSAlarmHandler handler;\n    void *arg;\n    u32 tag;\n    OSTick fire;\n    OSAlarm *prev;\n    OSAlarm *next;\n    OSTick period;\n    OSTick start;\n};\nstruct OSiAlarmQueue\n{\n    OSAlarm *head;\n    OSAlarm *tail;\n};\nvoid OS_InitAlarm(void);\nBOOL OS_IsAlarmAvailable(void);\nvoid OS_CreateAlarm(OSAlarm *alarm);\nvoid OS_SetAlarm(OSAlarm *alarm, OSTick tick, OSAlarmHandler handler, void *arg);\nvoid OS_CancelAlarm(OSAlarm *alarm);\nvoid OSi_AlarmHandler(void *arg);\n#define POKEDIAMOND_ARM9_OS_MUTEX_H \n#define POKEDIAMOND_OS_MUTEX_SHARED_H \nstruct OSMutex {\n    OSThreadQueue queue;\n    OSThread *thread;\n    s32 count;\n    OSMutexLink link;\n};\nvoid OS_InitMutex(OSMutex *mutex);\nvoid OS_LockMutex(OSMutex *mutex);\nvoid OS_UnlockMutex(OSMutex *mutex);\nvoid OSi_UnlockAllMutex(OSThread * thread);\nBOOL OS_TryLockMutex(OSMutex *mutex);\nvoid OSi_EnqueueTail(OSThread *thread, OSMutex *mutex);\nvoid OSi_DequeueItem(OSThread *thread, OSMutex *mutex);\n#define POKEDIAMOND_OS_PROTECTIONREGION_H \nvoid OS_SetDPermissionsForProtectionRegion(register u32 setMask, register u32 flags);\nvoid OS_SetProtectionRegion1(u32 param);\nvoid OS_SetProtectionRegion2(u32 param);\ntypedef enum\n{\n    OSi_PR_BASE_MASK_4KB = 0xfffff000,\n    OSi_PR_BASE_MASK_8KB = 0xffffe000,\n    OSi_PR_BASE_MASK_16KB = 0xffffc000,\n    OSi_PR_BASE_MASK_32KB = 0xffff8000,\n    OSi_PR_BASE_MASK_64KB = 0xffff0000,\n    OSi_PR_BASE_MASK_128KB = 0xfffe0000,\n    OSi_PR_BASE_MASK_256KB = 0xfffc0000,\n    OSi_PR_BASE_MASK_512KB = 0xfff80000,\n    OSi_PR_BASE_MASK_1MB = 0xfff00000,\n    OSi_PR_BASE_MASK_2MB = 0xffe00000,\n    OSi_PR_BASE_MASK_4MB = 0xffc00000,\n    OSi_PR_BASE_MASK_8MB = 0xff800000,\n    OSi_PR_BASE_MASK_16MB = 0xff000000,\n    OSi_PR_BASE_MASK_32MB = 0xfe000000,\n    OSi_PR_BASE_MASK_64MB = 0xfc000000,\n    OSi_PR_BASE_MASK_128MB = 0xf8000000,\n    OSi_PR_BASE_MASK_256MB = 0xf0000000,\n    OSi_PR_BASE_MASK_512MB = 0xe0000000,\n    OSi_PR_BASE_MASK_1GB = 0xc0000000,\n    OSi_PR_BASE_MASK_2GB = 0x80000000,\n    OSi_PR_BASE_MASK_4GB = 0x00000000\n} OSiProtectionRegionBaseMask;\nstatic inline u32 OSi_CalcPRParam(u32 address, u32 size, OSiProtectionRegionBaseMask mask) {\n    return ((address & mask) | size);\n}\n#define OS_SetProtectionRegion(regionNo,address,sizeStr) OS_SetProtectionRegion ##regionNo(OSi_CalcPRParam(address, HW_C6_PR_ ##sizeStr, OSi_PR_BASE_MASK_ ##sizeStr) | 1)\n#define OS_PR3_ACCESS_MASK (HW_C5_PERMIT_MASK << HW_C5_PR3_SFT)\n#define OS_PR3_ACCESS_RW (HW_C5_PERMIT_RW << HW_C5_PR3_SFT)\n#define OS_PR3_ACCESS_RO (HW_C5_PERMIT_RO << HW_C5_PR3_SFT)\n#define POKEDIAMOND_OS_PROTECTIONUNIT_H \nvoid OS_EnableProtectionUnit(void);\nvoid OS_DisableProtectionUnit(void);\n#define POKEDIAMOND_OS_ENTROPY_H \nvoid OS_GetLowEntropyData(u32 * arr);\nextern vu64 OSi_TickCounter;\nextern u16 OS_GetTickLo(void);\nstatic inline s32 GX_GetVCount(void)\n{\n    return (*(REGType16v *)0x4000006);\n}\n#define POKEDIAMOND_OS_EMULATOR_H \nBOOL OS_IsRunOnEmulator(void);\nu32 OS_GetConsoleType(void);\n#define POKEDIAMOND_ARM9_OS_ARENA_H \nvoid OS_InitArena(void);\nvoid OS_InitArenaEx(void);\nvoid* OS_GetArenaHi(OSArenaId id);\nvoid* OS_GetArenaLo(OSArenaId id);\nvoid* OS_GetInitArenaHi(OSArenaId id);\nvoid* OS_GetInitArenaLo(OSArenaId id);\nvoid OS_SetArenaHi(OSArenaId id, void *newHi);\nvoid OS_SetArenaLo(OSArenaId id, void *newLo);\nvoid* OS_AllocFromArenaLo(OSArenaId id, u32 size, u32 align);\nvoid* OS_AllocFromArenaHi(OSArenaId id, u32 size, u32 align);\n#define POKEDIAMOND_ARM9_OS_ALLOC_H \n#define POKEDIAMOND_OS_ALLOC_SHARED_H \ntypedef s32 OSHeapHandle;\ntypedef struct Cell Cell;\nstruct Cell {\n    Cell* prev;\n    Cell* next;\n    long size;\n};\ntypedef struct {\n    long size;\n    Cell *free;\n    Cell *allocated;\n} HeapDesc;\ntypedef struct {\n    volatile OSHeapHandle currentHeap;\n    int numHeaps;\n    void* arenaStart;\n    void* arenaEnd;\n    HeapDesc* heapArray;\n} OSHeapInfo;\nCell* DLAddFront(Cell* list, Cell* cell);\nCell* DLExtract(Cell* list, Cell* cell);\nCell *DLInsert(Cell *original, Cell *inserted);\nvoid* OS_AllocFromHeap(OSArenaId id, OSHeapHandle heap, u32 size);\nvoid OS_FreeToHeap(OSArenaId id, OSHeapHandle heap, void *ptr);\n#define POKEDIAMOND_ARM9_OS_TERMINATE_PROC_H \nvoid OS_Terminate(void);\nvoid OS_Halt(void);\n#define POKEDIAMOND_OS_IRQHANDLER_H \n#define POKEDIAMOND_ARM9_OS_INTERRUPT_H \n#define POKEDIAMOND_ARM9_MMAP_H \nextern u32 SDK_AUTOLOAD_DTCM_START[];\n#define HW_MAIN_MEM_EX_SIZE 0x00800000\n#define HW_MAIN_MEM_DEBUGGER_OFFSET 0x00700000\n#define HW_ITCM_IMAGE 0x01000000\n#define HW_ITCM 0x01FF8000\n#define HW_ITCM_SIZE 0x00008000\n#define HW_ITCM_END (HW_ITCM + HW_ITCM_SIZE)\n#define HW_IOREG 0x04000000\n#define HW_CTRDG_ROM 0x08000000\n#define HW_BIOS 0xffff0000\n#define HW_DTCM ((u32)SDK_AUTOLOAD_DTCM_START)\n#define HW_DTCM_SIZE 0x00004000\n#define HW_DTCM_SYSRV (HW_DTCM + 0x00003fc0)\n#define HW_INTR_CHECK_BUF (HW_DTCM_SYSRV + 0x38)\n#define HW_EXCP_VECTOR_BUF (HW_DTCM_SYSRV + 0x1C)\n#define HW_CARD_ROM_HEADER_SIZE 0x00000160\n#define HW_DOWNLOAD_PARAMETER_SIZE 0x00000020\n#define HW_CHECK_DEBUGGER_SW 0x027ffc10\n#define HW_CARD_ROM_HEADER (HW_MAIN_MEM + 0x007ffa80)\n#define HW_BOOT_CHECK_INFO_BUF (HW_MAIN_MEM + 0x007ffc00)\n#define HW_RESET_PARAMETER_BUF (HW_MAIN_MEM + 0x007ffc20)\n#define HW_ROM_BASE_OFFSET_BUF (HW_MAIN_MEM + 0x007ffc2c)\n#define HW_CTRDG_MODULE_INFO_BUF (HW_MAIN_MEM + 0x007ffc30)\n#define HW_ROM_HEADER_BUF (HW_MAIN_MEM + 0x007ffe00)\n#define HW_RED_RESERVED (HW_MAIN_MEM + 0x007ff800)\n#define HW_MAIN_MEM_EX_END (HW_MAIN_MEM + HW_MAIN_MEM_EX_SIZE)\n#define HW_MAIN_MEM_SHARED (HW_MAIN_MEM_EX_END - HW_MAIN_MEM_SHARED_SIZE)\n#define HW_DTCM_SVC_STACK_END (HW_DTCM + 0x00003fc0)\n#define HW_DTCM_SVC_STACK (HW_DTCM_SVC_STACK_END - HW_SVC_STACK_SIZE)\n#define HW_DTCM_IRQ_STACK_END (HW_DTCM_SVC_STACK)\n#define HW_MAIN_MEM_SUB (HW_MAIN_MEM_MAIN_END + 0x400000)\n#define HW_BIOS_EXCP_STACK_MAIN (HW_MAIN_MEM + 0x007ffd80)\n#define HW_EXCP_VECTOR_MAIN (HW_MAIN_MEM + 0x007ffd9c)\n#define HW_PXI_SIGNAL_PARAM_ARM9 (HW_MAIN_MEM + 0x007fff80)\n#define HW_WM_RSSI_POOL (HW_MAIN_MEM + 0x007fff98)\n#define HW_COMPONENT_PARAM (HW_MAIN_MEM + 0x007fff9c)\n#define HW_LOCK_ID_FLAG_MAIN (HW_MAIN_MEM + 0x007fffb0)\n#define HW_SHARED_LOCK_BUF (HW_MAIN_MEM + 0x007fffc0)\n#define HW_CARD_LOCK_BUF (HW_MAIN_MEM + 0x007fffe0)\n#define OSi_MAIN_ARENA_HI_DEFAULT (HW_MAIN_MEM_MAIN_END)\n#define OSi_MAINEX_ARENA_HI_DEFAULT (HW_MAIN_MEM + HW_MAIN_MEM_DEBUGGER_OFFSET)\n#define HW_ITCM_ARENA_HI_DEFAULT (HW_ITCM + HW_ITCM_SIZE)\n#define HW_SHARED_ARENA_HI_DEFAULT (HW_RED_RESERVED - HW_CARD_ROM_HEADER_SIZE - HW_DOWNLOAD_PARAMETER_SIZE)\n#define HW_SHARED_ARENA_LO_DEFAULT (HW_MAIN_MEM_SHARED)\n#define OSi_WRAM_MAIN_ARENA_HI_DEFAULT (HW_WRAM)\n#define OSi_WRAM_MAIN_ARENA_LO_DEFAULT (HW_WRAM)\n#define HW_BG_PLTT 0x05000000\n#define HW_BG_PLTT_END 0x05000200\n#define HW_BG_PLTT_SIZE (HW_BG_PLTT_END-HW_BG_PLTT)\n#define HW_OBJ_PLTT 0x05000200\n#define HW_OBJ_PLTT_END 0x05000400\n#define HW_OBJ_PLTT_SIZE (HW_OBJ_PLTT_END-HW_OBJ_PLTT)\n#define HW_PLTT HW_BG_PLTT\n#define HW_PLTT_END HW_OBJ_PLTT_END\n#define HW_PLTT_SIZE (HW_PLTT_END-HW_PLTT)\n#define HW_DB_BG_PLTT 0x05000400\n#define HW_DB_BG_PLTT_END 0x05000600\n#define HW_DB_BG_PLTT_SIZE (HW_DB_BG_PLTT_END-HW_DB_BG_PLTT)\n#define HW_DB_OBJ_PLTT 0x05000600\n#define HW_DB_OBJ_PLTT_END 0x05000800\n#define HW_DB_OBJ_PLTT_SIZE (HW_DB_OBJ_PLTT_END-HW_DB_OBJ_PLTT)\n#define HW_DB_PLTT HW_DB_BG_PLTT\n#define HW_DB_PLTT_END HW_DB_OBJ_PLTT_END\n#define HW_DB_PLTT_SIZE (HW_DB_PLTT_END-HW_DB_PLTT)\n#define HW_LCDC_VRAM 0x6800000\n#define HW_LCDC_VRAM_END 0x68a4000\n#define HW_LCDC_VRAM_SIZE (HW_LCDC_VRAM_END - HW_LCDC_VRAM)\n#define HW_OAM 0x07000000\n#define HW_OAM_END 0x07000400\n#define HW_OAM_SIZE (HW_OAM_END-HW_OAM)\n#define HW_DB_OAM 0x07000400\n#define HW_DB_OAM_END 0x07000800\n#define HW_DB_OAM_SIZE (HW_DB_OAM_END-HW_DB_OAM)\n#define HW_CTRDG_RAM_END 0x0a010000\n#define HW_DTCM_SYSRV_OFS_INTR_VECTOR 0x3c\n#define HW_RESET_VECTOR 0xffff0000\n#define POKEDIAMOND_OS_INTERRUPT_SHARED_H \ntypedef u32 OSIrqMask;\ntypedef void (*OSIrqFunction) (void);\ntypedef struct\n{\n    void (*func) (void *);\n    u32 enable;\n    void* arg;\n} OSIrqCallbackInfo;\n#define REG_OS_IME_IME_SHIFT 0\n#define OS_IME_DISABLE (0UL << REG_OS_IME_IME_SHIFT)\n#define OS_IME_ENABLE (1UL << REG_OS_IME_IME_SHIFT)\n#define OS_IE_V_COUNT (1UL << REG_OS_IE_VE_SHIFT)\n#define OS_IE_TIMER0 (1UL << REG_OS_IE_T0_SHIFT)\n#define OS_IE_TIMER1 (1UL << REG_OS_IE_T1_SHIFT)\n#define OS_IE_TIMER2 (1UL << REG_OS_IE_T2_SHIFT)\n#define OS_IE_TIMER3 (1UL << REG_OS_IE_T3_SHIFT)\n#define OS_IE_SPFIFO_RECV (1UL << REG_OS_IE_IFN_SHIFT)\n#define OS_IE_CARD_DATA (1UL << REG_OS_IE_MC_SHIFT)\nextern OSIrqFunction OS_IRQTable[];\nextern OSIrqCallbackInfo OSi_IrqCallbackInfo[8];\nvoid OS_InitIrqTable(void);\nvoid OS_SetIrqFunction(OSIrqMask intrBit, OSIrqFunction function);\nOSIrqFunction OS_GetIrqFunction(OSIrqMask intrBit);\nvoid OSi_EnterDmaCallback(u32 dmaNo, void (*callback) (void *), void *arg);\nvoid OSi_EnterTimerCallback(u32 timerNo, void (*callback) (void *), void *arg);\nOSIrqMask OS_SetIrqMask(OSIrqMask mask);\nOSIrqMask OS_EnableIrqMask(OSIrqMask mask);\nOSIrqMask OS_DisableIrqMask(OSIrqMask mask);\nOSIrqMask OS_ResetRequestIrqMask(OSIrqMask mask);\nvoid OS_SetIrqStackChecker(void);\nstatic inline BOOL OS_DisableIrq(void)\n{\n    u16 prep = (*(REGType16v *)0x4000208);\n    (*(REGType16v *)0x4000208) = (0UL << 0);\n    return (BOOL)prep;\n}\nstatic inline BOOL OS_EnableIrq(void)\n{\n    u16 prep = (*(REGType16v *)0x4000208);\n    (*(REGType16v *)0x4000208) = (1UL << 0);\n    return (BOOL)prep;\n}\nstatic inline BOOL OS_RestoreIrq(BOOL enable)\n{\n    u16 prep = (*(REGType16v *)0x4000208);\n    (*(REGType16v *)0x4000208) = (u16)enable;\n    return (BOOL)prep;\n}\nstatic inline OSIrqMask OS_GetIrqMask(void)\n{\n    return (*(REGType32v *)0x4000210);\n}\nstatic inline void OS_ClearIrqCheckFlag(OSIrqMask intr)\n{\n    *(vu32 *)((((u32)SDK_AUTOLOAD_DTCM_START) + 0x00003fc0) + 0x38) &= (u32)~intr;\n}\nstatic inline OSIrqMask OS_GetIrqCheckFlag(void)\n{\n    return *(OSIrqMask *)((((u32)SDK_AUTOLOAD_DTCM_START) + 0x00003fc0) + 0x38);\n}\nvoid OS_IrqHandler(void);\nvoid OS_IrqHandler_ThreadSwitch(void);\nvoid OS_WaitIrq(BOOL clear, OSIrqMask irqFlags);\n#define POKEDIAMOND_ARM9_OS_IRQTABLE_H \nvoid OS_IrqDummy(void);\nvoid OSi_IrqCallback(s32 index);\nvoid OSi_IrqDma0(void);\nvoid OSi_IrqDma1(void);\nvoid OSi_IrqDma2(void);\nvoid OSi_IrqDma3(void);\nvoid OSi_IrqTimer0(void);\nvoid OSi_IrqTimer1(void);\nvoid OSi_IrqTimer2(void);\nvoid OSi_IrqTimer3(void);\nstatic inline void OS_SetIrqCheckFlag(OSIrqMask intr)\n{\n    *(vu32 *)((((u32)SDK_AUTOLOAD_DTCM_START) + 0x00003fc0) + 0x38) |= (u32)intr;\n}\n#define POKEDIAMOND_ARM9_OS_RESET_H \n#define POKEDIAMOND_OS_RESET_SHARED_H \n#define OS_PXI_COMMAND_MASK 0x7f00\n#define OS_PXI_COMMAND_SHIFT 8\n#define OS_PXI_COMMAND_RESET 0x10\nvoid OS_InitReset(void);\nvoid OS_ResetSystem(u32 parameter);\nvoid OSi_DoBoot(void);\nstatic inline u32 OS_GetResetParameter(void)\n{\n    return (u32)*(u32 *)(0x02000000 + 0x007ffc20);\n}\n#define POKEDIAMOND_OS_EXCEPTION_H \ntypedef struct\n{\n    OSContext context;\n    u32 cp15;\n    u32 spsr;\n    u32 exinfo;\n    u32 debug[4];\n} OSiExContext;\ntypedef void (*OSExceptionHandler) (u32, void *);\nvoid OS_InitException(void);\nvoid OSi_ExceptionHandler(void);\n#define POKEDIAMOND_ARM9_OS_MESSAGE_H \n#define POKEDIAMOND_OS_MESSAGE_SHARED_H \ntypedef void *OSMessage;\n#define OS_MESSAGE_NOBLOCK 0\n#define OS_MESSAGE_BLOCK 1\ntypedef struct OSMessageQueue\n{\n    OSThreadQueue queueSend;\n    OSThreadQueue queueReceive;\n    OSMessage *msgArray;\n    s32 msgCount;\n    s32 firstIndex;\n    s32 usedCount;\n} OSMessageQueue;\nvoid OS_InitMessageQueue(OSMessageQueue *mq, OSMessage *msgArray, s32 msgCount);\nBOOL OS_SendMessage(OSMessageQueue *mq, OSMessage msg, s32 flags);\nBOOL OS_ReceiveMessage(OSMessageQueue *mq, OSMessage *msg, s32 flags);\nBOOL OS_JamMessage(OSMessageQueue *mq, OSMessage msg, s32 flags);\nBOOL OS_ReadMessage(OSMessageQueue *mq, OSMessage *msg, s32 flags);\n#define POKEDIAMOND_OS_VALARM_H \ntypedef struct OSiVAlarm OSVAlarm;\nstruct OSiVAlarm\n{\n    OSAlarmHandler handler;\n    void *arg;\n    u32 tag;\n    u32 frame;\n    s16 fire;\n    s16 delay;\n    OSVAlarm *prev;\n    OSVAlarm *next;\n    BOOL period;\n    BOOL finish;\n    BOOL canceled;\n};\nvoid OS_InitVAlarm(void);\nvoid OS_Init(void);\n#define POKEDIAMOND_MI_EXMEMORY_H \ntypedef enum {\n    MI_PROCESSOR_ARM9 = 0,\n    MI_PROCESSOR_ARM7 = 1\n} MIProcessor;\ntypedef enum\n{\n    MI_CTRDG_ROMCYCLE1_10 = 0,\n    MI_CTRDG_ROMCYCLE1_8 = 1,\n    MI_CTRDG_ROMCYCLE1_6 = 2,\n    MI_CTRDG_ROMCYCLE1_18 = 3\n} MICartridgeRomCycle1st;\ntypedef enum\n{\n    MI_CTRDG_ROMCYCLE2_6 = 0,\n    MI_CTRDG_ROMCYCLE2_4 = 1\n} MICartridgeRomCycle2nd;\ntypedef enum\n{\n    MI_CTRDG_RAMCYCLE_10 = 0,\n    MI_CTRDG_RAMCYCLE_8 = 1,\n    MI_CTRDG_RAMCYCLE_6 = 2,\n    MI_CTRDG_RAMCYCLE_18 = 3\n} MICartridgeRamCycle;\nstatic inline void MIi_SetCardProcessor(MIProcessor proc)\n{\n    (*(REGType16v *)0x4000204) =\n            (u16)(((*(REGType16v *)0x4000204) & ~0x0800) | (proc << 11));\n}\nstatic inline void MIi_SetCartridgeProcessor(MIProcessor proc)\n{\n    (*(REGType16v *)0x4000204) =\n            (u16)(((*(REGType16v *)0x4000204) & ~0x0080) | (proc << 7));\n}\nstatic inline MICartridgeRomCycle1st MI_GetCartridgeRomCycle1st(void)\n{\n    return (MICartridgeRomCycle1st)(((*(REGType16v *)0x4000204) & 0xc) >> 2);\n}\nstatic inline MICartridgeRomCycle2nd MI_GetCartridgeRomCycle2nd(void)\n{\n    return (MICartridgeRomCycle2nd)(((*(REGType16v *)0x4000204) & 0x10) >> 4);\n}\nstatic inline void MI_SetCartridgeRomCycle1st(MICartridgeRomCycle1st c1)\n{\n    (*(REGType16v *)0x4000204) = (u16)(((*(REGType16v *)0x4000204) & ~0xc) | (c1 << 2));\n}\nstatic inline void MI_SetCartridgeRomCycle2nd(MICartridgeRomCycle2nd c2)\n{\n    (*(REGType16v *)0x4000204) = (u16)(((*(REGType16v *)0x4000204) & ~0x10) | (c2 << 4));\n}\nstatic inline void MI_SetCartridgeRamCycle(MICartridgeRamCycle c)\n{\n    (*(REGType16v *)0x4000204) = (u16)(((*(REGType16v *)0x4000204) & ~3) | (c << 0));\n}\nstatic inline MICartridgeRamCycle MI_GetCartridgeRamCycle(void)\n{\n    return (MICartridgeRamCycle)(((*(REGType16v *)0x4000204) & 3) >> 0);\n}\n#define NITRO_FS_FILE_H_ \n#define NITRO_FS_ARCHIVE_H_ \nstruct FSFile;\nstruct FSArchive;\n#define FS_ARCHIVE_NAME_LEN_MAX 3\n#define FS_ARCHIVE_FLAG_REGISTER 0x00000001\n#define FS_ARCHIVE_FLAG_LOADED 0x00000002\n#define FS_ARCHIVE_FLAG_TABLE_LOAD 0x00000004\n#define FS_ARCHIVE_FLAG_SUSPEND 0x00000008\n#define FS_ARCHIVE_FLAG_RUNNING 0x00000010\n#define FS_ARCHIVE_FLAG_CANCELING 0x00000020\n#define FS_ARCHIVE_FLAG_SUSPENDING 0x00000040\n#define FS_ARCHIVE_FLAG_UNLOADING 0x00000080\n#define FS_ARCHIVE_FLAG_IS_ASYNC 0x00000100\n#define FS_ARCHIVE_FLAG_IS_SYNC 0x00000200\ntypedef enum {\n    FS_COMMAND_ASYNC_BEGIN = 0,\n    FS_COMMAND_READFILE = FS_COMMAND_ASYNC_BEGIN,\n    FS_COMMAND_WRITEFILE,\n    FS_COMMAND_ASYNC_END,\n    FS_COMMAND_SYNC_BEGIN = FS_COMMAND_ASYNC_END,\n    FS_COMMAND_SEEKDIR = FS_COMMAND_SYNC_BEGIN,\n    FS_COMMAND_READDIR,\n    FS_COMMAND_FINDPATH,\n    FS_COMMAND_GETPATH,\n    FS_COMMAND_OPENFILEFAST,\n    FS_COMMAND_OPENFILEDIRECT,\n    FS_COMMAND_CLOSEFILE,\n    FS_COMMAND_SYNC_END,\n    FS_COMMAND_STATUS_BEGIN = FS_COMMAND_SYNC_END,\n    FS_COMMAND_ACTIVATE = FS_COMMAND_STATUS_BEGIN,\n    FS_COMMAND_IDLE,\n    FS_COMMAND_SUSPEND,\n    FS_COMMAND_RESUME,\n    FS_COMMAND_STATUS_END,\n    FS_COMMAND_INVALID\n} FSCommandType;\n#define FS_ARCHIVE_PROC_READFILE (1 << FS_COMMAND_READFILE)\n#define FS_ARCHIVE_PROC_WRITEFILE (1 << FS_COMMAND_WRITEFILE)\n#define FS_ARCHIVE_PROC_ASYNC (FS_ARCHIVE_PROC_READFILE | FS_ARCHIVE_PROC_WRITEFILE)\n#define FS_ARCHIVE_PROC_SEEKDIR (1 << FS_COMMAND_SEEKDIR)\n#define FS_ARCHIVE_PROC_READDIR (1 << FS_COMMAND_READDIR)\n#define FS_ARCHIVE_PROC_FINDPATH (1 << FS_COMMAND_FINDPATH)\n#define FS_ARCHIVE_PROC_GETPATH (1 << FS_COMMAND_GETPATH)\n#define FS_ARCHIVE_PROC_OPENFILEFAST (1 << FS_COMMAND_OPENFILEFAST)\n#define FS_ARCHIVE_PROC_OPENFILEDIRECT (1 << FS_COMMAND_OPENFILEDIRECT)\n#define FS_ARCHIVE_PROC_CLOSEFILE (1 << FS_COMMAND_CLOSEFILE)\n#define FS_ARCHIVE_PROC_SYNC (FS_ARCHIVE_PROC_SEEKDIR | FS_ARCHIVE_PROC_READDIR | FS_ARCHIVE_PROC_FINDPATH | FS_ARCHIVE_PROC_GETPATH | FS_ARCHIVE_PROC_OPENFILEFAST | FS_ARCHIVE_PROC_OPENFILEDIRECT | FS_ARCHIVE_PROC_CLOSEFILE)\n#define FS_ARCHIVE_PROC_ACTIVATE (1 << FS_COMMAND_ACTIVATE)\n#define FS_ARCHIVE_PROC_IDLE (1 << FS_COMMAND_IDLE)\n#define FS_ARCHIVE_PROC_SUSPENDING (1 << FS_COMMAND_SUSPEND)\n#define FS_ARCHIVE_PROC_RESUME (1 << FS_COMMAND_RESUME)\n#define FS_ARCHIVE_PROC_STATUS (FS_ARCHIVE_PROC_ACTIVATE | FS_ARCHIVE_PROC_IDLE | FS_ARCHIVE_PROC_SUSPENDING | FS_ARCHIVE_PROC_RESUME)\n#define FS_ARCHIVE_PROC_ALL (~0)\ntypedef enum {\n    FS_RESULT_SUCCESS = 0,\n    FS_RESULT_FAILURE,\n    FS_RESULT_BUSY,\n    FS_RESULT_CANCELED,\n    FS_RESULT_CANCELLED = FS_RESULT_CANCELED,\n    FS_RESULT_UNSUPPORTED,\n    FS_RESULT_ERROR,\n    FS_RESULT_PROC_ASYNC,\n    FS_RESULT_PROC_DEFAULT,\n    FS_RESULT_PROC_UNKNOWN\n}\nFSResult;\ntypedef FSResult (*FS_ARCHIVE_READ_FUNC) (struct FSArchive *p, void *dst, u32 pos, u32 size);\ntypedef FSResult (*FS_ARCHIVE_WRITE_FUNC) (struct FSArchive *p, const void *src, u32 pos, u32 size);\ntypedef FSResult (*FS_ARCHIVE_PROC_FUNC) (struct FSFile *, FSCommandType);\ntypedef struct\n{\n    struct FSFile * prev;\n    struct FSFile * next;\n}\nFSFileLink;\ntypedef struct\n{\n    u32 start;\n    u16 index;\n    u16 parent;\n} FSArchiveFNT;\ntypedef struct\n{\n    u32 top;\n    u32 bottom;\n} FSArchiveFAT;\ntypedef struct FSArchive\n{\n    union\n    {\n        char ptr[4];\n        u32 pack;\n    } name;\n    struct FSArchive * next;\n    struct FSArchive * prev;\n    OSThreadQueue sync_q;\n    OSThreadQueue stat_q;\n    u32 flag;\n    FSFileLink list;\n    u32 base;\n    u32 fat;\n    u32 fat_size;\n    u32 fnt;\n    u32 fnt_size;\n    u32 fat_bak;\n    u32 fnt_bak;\n    void * load_mem;\n    FS_ARCHIVE_READ_FUNC read_func;\n    FS_ARCHIVE_WRITE_FUNC write_func;\n    FS_ARCHIVE_READ_FUNC table_func;\n    FS_ARCHIVE_PROC_FUNC proc;\n    u32 proc_flag;\n} FSArchive;\nstatic inline BOOL FS_IsArchiveLoaded(volatile const FSArchive * p_arc)\n{\n    return (p_arc->flag & 0x00000002) ? 1 : 0;\n}\nstatic inline u32 FS_GetArchiveOffset(const FSArchive * p_arc, u32 pos)\n{\n    return p_arc->base + pos;\n}\nstatic inline BOOL FSi_IsArchiveCanceling(volatile const FSArchive * p_arc)\n{\n    return (p_arc->flag & 0x00000020) != 0;\n}\nstatic inline BOOL FS_IsArchiveSuspended(volatile const FSArchive * p_arc)\n{\n    return (p_arc->flag & 0x00000008) ? 1 : 0;\n}\nstatic inline BOOL FSi_IsArchiveSuspending(volatile const FSArchive * p_arc)\n{\n    return (p_arc->flag & 0x00000040) != 0;\n}\nstatic inline BOOL FSi_IsArchiveRunning(volatile const FSArchive * p_arc)\n{\n    return (p_arc->flag & 0x00000010) != 0;\n}\nstatic inline BOOL FSi_IsArchiveUnloading(volatile const FSArchive * p_arc)\n{\n    return (p_arc->flag & 0x00000080) != 0;\n}\nstatic inline BOOL FSi_IsArchiveAsync(volatile const FSArchive * p_arc)\n{\n    return (p_arc->flag & 0x00000100) != 0;\n}\nstatic inline BOOL FSi_IsArchiveSync(volatile const FSArchive * p_arc)\n{\n    return (p_arc->flag & 0x00000200) != 0;\n}\nstatic inline BOOL FS_IsArchiveTableLoaded(volatile const FSArchive * p_arc)\n{\n    return (p_arc->flag & 0x00000004) ? 1 : 0;\n}\nu32 FSi_GetPackedName(const char * name, int name_len);\nFSResult FSi_ReadMemCallback(struct FSArchive * p_arc, void * dest, u32 pos, u32 size);\nFSResult FSi_WriteMemCallback(struct FSArchive * p_arc, const void * src, u32 pos, u32 size);\nFSResult FSi_ReadMemoryCore(struct FSArchive * p_arc, void * dest, u32 pos, u32 size);\nstruct FSFile * FSi_NextCommand(struct FSArchive * p_arc);\nvoid FSi_ExecuteAsyncCommand(struct FSFile * p_file);\nBOOL FSi_ExecuteSyncCommand(struct FSFile * file);\nBOOL FSi_SendCommand(struct FSFile * file, FSCommandType command);\nvoid FS_InitArchive(struct FSArchive * p_arc);\nstruct FSArchive * const FS_FindArchive(const char * path, int offset);\nBOOL FS_RegisterArchiveName(struct FSArchive * p_arc, const char * name, int name_len);\nvoid FS_ReleaseArchiveName(struct FSArchive * p_arc);\nBOOL FS_LoadArchive(struct FSArchive * p_arc, u32 base, u32 fat, u32 fat_size, u32 fnt, u32 fnt_size, FS_ARCHIVE_READ_FUNC read_func, FS_ARCHIVE_WRITE_FUNC write_func);\nBOOL FS_UnloadArchive(struct FSArchive * p_arc);\nu32 FS_LoadArchiveTables(struct FSArchive *p_arc, void *p_mem, u32 max_size);\nvoid * FS_UnloadArchiveTables(struct FSArchive * p_arc);\nBOOL FS_SuspendArchive(struct FSArchive * p_arc);\nBOOL FS_ResumeArchive(struct FSArchive * p_arc);\nvoid FS_SetArchiveProc(struct FSArchive * p_arc, FS_ARCHIVE_PROC_FUNC proc, u32 flags);\nvoid FS_NotifyArchiveAsyncEnd(struct FSArchive *p_arc, FSResult ret);\n#define FS_FILE_STATUS_BUSY 0x00000001\n#define FS_FILE_STATUS_CANCEL 0x00000002\n#define FS_FILE_STATUS_SYNC 0x00000004\n#define FS_FILE_STATUS_ASYNC 0x00000008\n#define FS_FILE_STATUS_IS_FILE 0x00000010\n#define FS_FILE_STATUS_IS_DIR 0x00000020\n#define FS_FILE_STATUS_OPERATING 0x00000040\n#define FS_FILE_NAME_MAX 127\ntypedef enum FSSeekFileMode\n{\n    FS_SEEK_SET = 0,\n    FS_SEEK_CUR,\n    FS_SEEK_END\n} FSSeekFileMode;\nstruct FSFile;\n#define FS_DMA_NOT_USE ((u32)~0)\ntypedef struct FSDirPos\n{\n    struct FSArchive *arc;\n    u16 own_id;\n    u16 index;\n    u32 pos;\n}\nFSDirPos;\ntypedef struct FSFileID\n{\n    struct FSArchive *arc;\n    u32 file_id;\n}\nFSFileID;\ntypedef struct\n{\n    union\n    {\n        FSFileID file_id;\n        FSDirPos dir_id;\n    };\n    u32 is_directory;\n    u32 name_len;\n    char name[128];\n}\nFSDirEntry;\ntypedef struct\n{\n    FSDirPos pos;\n}\nFSSeekDirInfo;\ntypedef struct\n{\n    FSDirEntry *p_entry;\n    BOOL skip_string;\n}\nFSReadDirInfo;\ntypedef struct\n{\n    FSDirPos pos;\n    const char *path;\n    BOOL find_directory;\n    union\n    {\n        FSFileID *file;\n        FSDirPos *dir;\n    }\n    result;\n}\nFSFindPathInfo;\ntypedef struct\n{\n    u8 *buf;\n    u32 buf_len;\n    u16 total_len;\n    u16 dir_id;\n}\nFSGetPathInfo;\ntypedef struct\n{\n    FSFileID id;\n}\nFSOpenFileFastInfo;\ntypedef struct\n{\n    u32 top;\n    u32 bottom;\n    u32 index;\n}\nFSOpenFileDirectInfo;\ntypedef struct\n{\n    u32 reserved;\n}\nFSCloseFileInfo;\ntypedef struct\n{\n    void *dst;\n    u32 len_org;\n    u32 len;\n}\nFSReadFileInfo;\ntypedef struct\n{\n    const void *src;\n    u32 len_org;\n    u32 len;\n}\nFSWriteFileInfo;\ntypedef struct FSFile\n{\n    FSFileLink link;\n    struct FSArchive *arc;\n    u32 stat;\n    FSCommandType command;\n    FSResult error;\n    OSThreadQueue queue[1];\n    union {\n        struct\n        {\n            u32 own_id;\n            u32 top;\n            u32 bottom;\n            u32 pos;\n        } file;\n        struct\n        {\n            FSDirPos pos;\n            u32 parent;\n        } dir;\n    } prop;\n    union {\n        FSReadFileInfo readfile;\n        FSWriteFileInfo writefile;\n        FSSeekDirInfo seekdir;\n        FSReadDirInfo readdir;\n        FSFindPathInfo findpath;\n        FSGetPathInfo getpath;\n        FSOpenFileFastInfo openfilefast;\n        FSOpenFileDirectInfo openfiledirect;\n        FSCloseFileInfo closefile;\n    } arg;\n}\nFSFile;\nvoid FS_Init(u32 default_dma_no);\nBOOL FS_IsAvailable(void);\nvoid FS_InitFile(FSFile * p_file);\nint FSi_ReadFileCore(FSFile * p_file, void * dst, s32 len, BOOL async);\nBOOL FS_ConvertPathToFileID(FSFileID * p_file_id, const char * path);\nBOOL FS_OpenFileDirect(FSFile * p_file, FSArchive * p_arc, u32 image_top, u32 image_bottom, u32 file_index);\nBOOL FS_OpenFileFast(FSFile * p_file, FSFileID file_id);\nBOOL FS_OpenFile(FSFile * p_file, const char * path);\nBOOL FS_CloseFile(FSFile * p_file);\nBOOL FS_WaitAsync(FSFile * p_file);\nint FS_ReadFileAsync(FSFile * p_file, void * dst, s32 len);\nint FS_ReadFile(FSFile * p_file, void * dst, s32 len);\nBOOL FS_SeekFile(FSFile * p_file, s32 offset, FSSeekFileMode origin);\nBOOL FS_ChangeDir(const char * path);\nstatic inline u32 const FS_GetFileImageTop(volatile const FSFile * p_file) {\n    return p_file->prop.file.top;\n}\nstatic inline u32 const FS_GetLength(volatile const FSFile * p_file)\n{\n    return p_file->prop.file.bottom - p_file->prop.file.top;\n}\nstatic inline BOOL FS_IsCanceling(volatile const FSFile * p_file)\n{\n    return (p_file->stat & 0x00000002) ? 1 : 0;\n}\nstatic inline BOOL FS_IsFileSyncMode(volatile const FSFile * p_file)\n{\n    return (p_file->stat & 0x00000004) ? 1 : 0;\n}\nstatic inline BOOL FS_IsBusy(volatile const FSFile * p_file)\n{\n    return p_file->stat & 0x00000001 ? 1 : 0;\n}\nstatic inline BOOL FS_IsSucceeded(volatile const FSFile * p_file)\n{\n    return (p_file->error == FS_RESULT_SUCCESS) ? 1 : 0;\n}\nstatic inline BOOL FS_IsDir(volatile const FSFile * p_file)\n{\n    return (p_file->stat & 0x00000020) ? 1 : 0;\n}\n#define POKEDIAMOND_CARD_ROM_H \n#define POKEDIAMOND_CARD_COMMON_H \n#define POKEDIAMOND_ARM9_PXI_FIFO_H \n#define POKEDIAMOND_PXI_FIFO_SHARED_H \ntypedef enum\n{\n    PXI_PROC_ARM9 = 0,\n    PXI_PROC_ARM7 = 1\n} PXIProc;\ntypedef enum {\n    PXI_FIFO_TAG_EX = 0,\n    PXI_FIFO_TAG_USER_0,\n    PXI_FIFO_TAG_USER_1,\n    PXI_FIFO_TAG_SYSTEM,\n    PXI_FIFO_TAG_NVRAM,\n    PXI_FIFO_TAG_RTC,\n    PXI_FIFO_TAG_TOUCHPANEL,\n    PXI_FIFO_TAG_SOUND,\n    PXI_FIFO_TAG_PM,\n    PXI_FIFO_TAG_MIC,\n    PXI_FIFO_TAG_WM,\n    PXI_FIFO_TAG_FS,\n    PXI_FIFO_TAG_OS,\n    PXI_FIFO_TAG_CTRDG,\n    PXI_FIFO_TAG_CARD,\n    PXI_FIFO_TAG_WVR,\n    PXI_FIFO_TAG_CTRDG_Ex,\n    PXI_MAX_FIFO_TAG = 32\n} PXIFifoTag;\ntypedef enum\n{\n    PXI_FIFO_SUCCESS = 0,\n    PXI_FIFO_FAIL_SEND_ERR = -1,\n    PXI_FIFO_FAIL_SEND_FULL = -2,\n    PXI_FIFO_FAIL_RECV_ERR = -3,\n    PXI_FIFO_FAIL_RECV_EMPTY = -4,\n    PXI_FIFO_NO_CALLBACK_ENTRY = -5\n} PXIFifoStatus;\ntypedef union\n{\n    struct\n    {\n        u32 tag:5;\n        u32 err:1;\n        u32 data:26;\n    } e;\n    u32 raw;\n} PXIFifoMessage;\ntypedef void (*PXIFifoCallback) (PXIFifoTag tag, u32 data, BOOL err);\nvoid PXI_InitFifo(void);\nvoid PXI_SetFifoRecvCallback(s32 fifotag, PXIFifoCallback callback);\nBOOL PXI_IsCallbackReady(s32 fifotag, PXIProc proc);\ns32 PXI_SendWordByFifo(s32 fifotag, u32 data, BOOL err);\nvoid PXIi_HandlerRecvFifoNotEmpty(void);\n#define CARD_PXI_COMMAND_MASK 0x3f\n#define CARD_PXI_COMMAND_PULLED_OUT 0x0011\n#define CARD_PXI_COMMAND_TERMINATE 0x0001\n#define CARD_THREAD_PRIORITY_DEFAULT 4\n#define CARD_BACKUP_TYPE_DEVICE_SHIFT 0\n#define CARD_BACKUP_TYPE_DEVICE_MASK 0xFF\n#define CARD_BACKUP_TYPE_DEVICE_EEPROM 1\n#define CARD_BACKUP_TYPE_DEVICE_FLASH 2\n#define CARD_BACKUP_TYPE_DEVICE_FRAM 3\n#define CARD_BACKUP_TYPE_SIZEBIT_SHIFT 8\n#define CARD_BACKUP_TYPE_SIZEBIT_MASK 0xFF\n#define CARD_BACKUP_TYPE_VENDER_SHIFT 16\n#define CARD_BACKUP_TYPE_DEFINE(type,size,vender) (((CARD_BACKUP_TYPE_DEVICE_ ## type) << CARD_BACKUP_TYPE_DEVICE_SHIFT) | ((size) << CARD_BACKUP_TYPE_SIZEBIT_SHIFT) | ((vender) << CARD_BACKUP_TYPE_VENDER_SHIFT))\n#define ALIGN_MASK(a) ((a) - 1)\n#define CARD_ALIGN_HI_BIT(n) (((u32)(n)) & ~ALIGN_MASK(CARD_ROM_PAGE_SIZE))\n#define CARD_ALIGN_LO_BIT(n) (((u32)(n)) & ALIGN_MASK(CARD_ROM_PAGE_SIZE))\n#define CARD_BACKUP_CAPS_AVAILABLE (u32)(CARD_BACKUP_CAPS_READ - 1)\n#define CARD_BACKUP_CAPS_READ (u32)(1 << CARD_REQ_READ_BACKUP)\n#define CARD_BACKUP_CAPS_WRITE (u32)(1 << CARD_REQ_WRITE_BACKUP)\n#define CARD_BACKUP_CAPS_PROGRAM (u32)(1 << CARD_REQ_PROGRAM_BACKUP)\n#define CARD_BACKUP_CAPS_VERIFY (u32)(1 << CARD_REQ_VERIFY_BACKUP)\n#define CARD_BACKUP_CAPS_ERASE_PAGE (u32)(1 << CARD_REQ_ERASE_PAGE_BACKUP)\n#define CARD_BACKUP_CAPS_ERASE_SECTOR (u32)(1 << CARD_REQ_ERASE_SECTOR_BACKUP)\n#define CARD_BACKUP_CAPS_ERASE_CHIP (u32)(1 << CARD_REQ_ERASE_CHIP_BACKUP)\ntypedef enum\n{\n    CARD_BACKUP_TYPE_EEPROM_4KBITS = (((1) << 0) | ((9) << 8) | ((0) << 16)),\n    CARD_BACKUP_TYPE_EEPROM_64KBITS = (((1) << 0) | ((13) << 8) | ((0) << 16)),\n    CARD_BACKUP_TYPE_EEPROM_512KBITS = (((1) << 0) | ((16) << 8) | ((0) << 16)),\n    CARD_BACKUP_TYPE_FLASH_2MBITS = (((2) << 0) | ((18) << 8) | ((0) << 16)),\n    CARD_BACKUP_TYPE_FLASH_4MBITS = (((2) << 0) | ((19) << 8) | ((0) << 16)),\n    CARD_BACKUP_TYPE_FLASH_8MBITS = (((2) << 0) | ((20) << 8) | ((0) << 16)),\n    CARD_BACKUP_TYPE_FRAM_256KBITS = (((3) << 0) | ((15) << 8) | ((0) << 16)),\n    CARD_BACKUP_TYPE_NOT_USE = 0\n} CARDBackupType;\ntypedef enum\n{\n    CARD_RESULT_SUCCESS = 0,\n    CARD_RESULT_FAILURE,\n    CARD_RESULT_INVALID_PARAM,\n    CARD_RESULT_UNSUPPORTED,\n    CARD_RESULT_TIMEOUT,\n    CARD_RESULT_ERROR,\n    CARD_RESULT_NO_RESPONSE,\n    CARD_RESULT_CANCELED\n} CARDResult;\ntypedef enum\n{\n    CARD_TARGET_NONE,\n    CARD_TARGET_ROM,\n    CARD_TARGET_BACKUP\n} CARDTargetMode;\ntypedef enum\n{\n    CARD_REQ_INIT = 0,\n    CARD_REQ_ACK,\n    CARD_REQ_IDENTIFY,\n    CARD_REQ_READ_ID,\n    CARD_REQ_READ_ROM,\n    CARD_REQ_WRITE_ROM,\n    CARD_REQ_READ_BACKUP,\n    CARD_REQ_WRITE_BACKUP,\n    CARD_REQ_PROGRAM_BACKUP,\n    CARD_REQ_VERIFY_BACKUP,\n    CARD_REQ_ERASE_PAGE_BACKUP,\n    CARD_REQ_ERASE_SECTOR_BACKUP,\n    CARD_REQ_ERASE_CHIP_BACKUP,\n    CARD_REQ_MAX\n} CARDRequest;\ntypedef enum\n{\n    CARD_REQUEST_MODE_RECV,\n    CARD_REQUEST_MODE_SEND,\n    CARD_REQUEST_MODE_SEND_VERIFY,\n    CARD_REQUEST_MODE_SPECIAL\n} CARDRequestMode;\nenum\n{\n    CARD_STAT_INIT = (1 << 0),\n    CARD_STAT_INIT_CMD = (1 << 1),\n    CARD_STAT_BUSY = (1 << 2),\n    CARD_STAT_TASK = (1 << 3),\n    CARD_STAT_RECV = (1 << 4),\n    CARD_STAT_REQ = (1 << 5),\n    CARD_STAT_CANCEL = (1 << 6)\n};\ntypedef s32 CARDiOwner;\ntypedef struct CARDiCommandArg\n{\n    CARDResult result;\n    CARDBackupType type;\n    u32 id;\n    u32 src;\n    u32 dest;\n    u32 len;\n    struct\n    {\n        u32 total_size;\n        u32 sect_size;\n        u32 page_size;\n        u32 addr_width;\n        u32 program_page;\n        u32 write_page;\n        u32 write_page_total;\n        u32 erase_chip;\n        u32 erase_chip_total;\n        u32 erase_sector;\n        u32 erase_sector_total;\n        u32 erase_page;\n        u8 initial_status;\n        u8 padding1[3];\n        u32 caps;\n        u8 padding2[16];\n    } spec;\n} CARDiCommandArg;\ntypedef struct CARDiCommon\n{\n    CARDiCommandArg *cmd;\n    s32 command;\n    volatile CARDiOwner lock_owner;\n    volatile s32 lock_ref;\n    OSThreadQueue lock_queue[1];\n    CARDTargetMode lock_target;\n    u32 src;\n    u32 dst;\n    u32 len;\n    u32 dma;\n    CARDRequest req_type;\n    s32 req_retry;\n    CARDRequestMode req_mode;\n    MIDmaCallback callback;\n    void *callback_arg;\n    void (*task_func) (struct CARDiCommon *);\n    OSThread thread[1];\n    OSThread *cur_th;\n    u32 priority;\n    OSThreadQueue busy_q[1];\n    volatile u32 flag;\n    u8 dummy[8];\n    u8 backup_cache_page_buf[256] __attribute__ ((aligned(32)));\n} CARDiCommon;\nstatic inline void CARDi_EndTask(CARDiCommon *p, BOOL is_own_task)\n{\n    const MIDmaCallback func = p->callback;\n    void *const arg = p->callback_arg;\n    {\n        OSIntrMode bak_psr = OS_DisableInterrupts();\n        p->flag &= ~(CARD_STAT_BUSY | CARD_STAT_TASK | CARD_STAT_CANCEL);\n        OS_WakeupThread(p->busy_q);\n        if ((p->flag & CARD_STAT_RECV) != 0)\n        {\n            OS_WakeupThreadDirect(p->thread);\n        }\n        (void)OS_RestoreInterrupts(bak_psr);\n    }\n    if (is_own_task && func)\n    {\n        (*func)(arg);\n    }\n}\nstatic inline void CARDi_WaitTask(CARDiCommon *p, MIDmaCallback callback, void *callback_arg)\n{\n    OSIntrMode bak_psr = OS_DisableInterrupts();\n    while ((p->flag & CARD_STAT_BUSY) != 0)\n    {\n        OS_SleepThread(p->busy_q);\n    }\n    p->flag |= CARD_STAT_BUSY;\n    p->callback = callback;\n    p->callback_arg = callback_arg;\n    (void)OS_RestoreInterrupts(bak_psr);\n}\nvoid CARDi_SetTask(void (*task) (CARDiCommon *));\nvoid CARDi_InitCommon(void);\nBOOL CARD_IsEnabled(void);\nvoid CARD_CheckEnabled(void);\nvoid CARD_Enable(BOOL enable);\nBOOL CARDi_WaitAsync(void);\nBOOL CARDi_TryWaitAsync(void);\nCARDResult CARD_GetResultCode(void);\nvoid CARD_LockRom(u16 lock_id);\nvoid CARD_UnlockRom(u16 lock_id);\nvoid CARD_LockBackup(u16 lock_id);\nvoid CARD_UnlockBackup(u16 lock_id);\n#define CARD_RETRY_COUNT_MAX 10\nstatic inline void CARDi_SendPxi(u32 data)\n{\n    while (PXI_SendWordByFifo(PXI_FIFO_TAG_FS, data, 1) < 0)\n        ;\n}\n#define CARD_ROM_PAGE_SIZE 512\n#define CARDMST_SEL_ROM 0x00\n#define CARDMST_IF_ENABLE 0x40\n#define CARDMST_ENABLE 0x80\n#define CARD_DATA_READY 0x00800000\n#define CARD_COMMAND_PAGE 0x01000000\n#define CARD_COMMAND_ID 0x07000000\n#define CARD_COMMAND_MASK 0x07000000\n#define CARD_RESET_HI 0x20000000\n#define CARD_READ_MODE 0x00000000\n#define CARD_START 0x80000000\n#define CARD_LATENCY1_MASK 0x00001FFF\n#define MROMOP_G_READ_PAGE 0xB7000000\n#define MROMOP_G_READ_ID 0xB8000000\nextern CARDiCommon cardi_common;\ntypedef struct\n{\n    u32 offset;\n    u32 length;\n}\nCARDRomRegion;\ntypedef struct CARDRomHeader\n{\n    char game_name[12];\n    u32 game_code;\n    u16 maker_code;\n    u8 product_id;\n    u8 device_type;\n    u8 device_size;\n    u8 reserved_A[9];\n    u8 game_version;\n    u8 property;\n    void *main_rom_offset;\n    void *main_entry_address;\n    void *main_ram_address;\n    u32 main_size;\n    void *sub_rom_offset;\n    void *sub_entry_address;\n    void *sub_ram_address;\n    u32 sub_size;\n    CARDRomRegion fnt;\n    CARDRomRegion fat;\n    CARDRomRegion main_ovt;\n    CARDRomRegion sub_ovt;\n    u8 rom_param_A[8];\n    u32 banner_offset;\n    u16 secure_crc;\n    u8 rom_param_B[2];\n    void *main_autoload_done;\n    void *sub_autoload_done;\n    u8 rom_param_C[8];\n    u32 rom_size;\n    u32 header_size;\n    u8 reserved_B[0x38];\n    u8 logo_data[0x9C];\n    u16 logo_crc;\n    u16 header_crc;\n} CARDRomHeader;\ntypedef struct CARDRomStat\n{\n    void (*read_func) (struct CARDRomStat *);\n    u32 ctrl;\n    u8 *cache_page;\n    u32 dummy[5];\n    u8 cache_buf[512];\n} CARDRomStat;\nstatic inline const CARDRomRegion * CARD_GetRomRegionOVT(MIProcessor target)\n{\n    return (target == MI_PROCESSOR_ARM9)\n    ? (const CARDRomRegion *)((const u8 *)(0x02000000 + 0x007ffe00) + 0x50)\n    : (const CARDRomRegion *)((const u8 *)(0x02000000 + 0x007ffe00) + 0x58);\n}\nBOOL CARDi_TryReadCardDma(CARDRomStat *p);\nvoid CARDi_ReadCard(CARDRomStat *p);\nu32 CARDi_ReadRomIDCore(void);\nvoid CARDi_CheckPulledOutCore(u32 id);\nvoid CARDi_ReadRom(u32 dma, const void *src, void *dst, u32 len, MIDmaCallback callback, void *arg, BOOL is_async);\nvoid CARD_Init(void);\nvoid CARD_WaitRomAsync(void);\nvoid (*CARDi_GetRomAccessor(void)) (CARDRomStat *);\nstatic inline void CARD_ReadRomAsync(u32 dma, const void * src, void * dst, u32 len, MIDmaCallback callback, void * arg)\n{\n    CARDi_ReadRom(dma, src, dst, len, callback, arg, 1);\n}\nstatic inline const CARDRomRegion * CARD_GetRomRegionFNT() {\n    return (const CARDRomRegion *)((const u8 *)(0x02000000 + 0x007ffe00) + 0x40);\n}\nstatic inline const CARDRomRegion * CARD_GetRomRegionFAT() {\n    return (const CARDRomRegion *)((const u8 *)(0x02000000 + 0x007ffe00) + 0x48);\n}\nstatic inline void CARDi_ReadEnd(void)\n{\n    CARDiCommon *const p = &cardi_common;\n    CARDi_CheckPulledOutCore(CARDi_ReadRomIDCore());\n    p->cmd->result = CARD_RESULT_SUCCESS;\n    CARDi_EndTask(p, 1);\n}\nstatic inline BOOL CARDi_IsInTcm(u32 buf, u32 len)\n{\n    const u32 i = (u32)0x01FF8000;\n    const u32 d = OS_GetDTCMAddress();\n    return ((i < buf + len) && (i + 0x00008000 > buf)) ||\n           ((d < buf + len) && (d + 0x00004000 > buf));\n}\nextern u32 cardi_rom_header_addr;\nstatic inline u32 CARDi_GetRomFlag(u32 flag)\n{\n    const u32 rom_ctrl = *(vu32 *)(cardi_rom_header_addr + 0x60);\n    return (u32)((rom_ctrl & ~0x07000000) | flag |\n                 0x00000000 | 0x80000000 | 0x20000000);\n}\ntypedef u32 FSOverlayID;\n#define FS_EXTERN_OVERLAY(name) extern u32 SDK_OVERLAY_ ## name ## _ID[1]\n#define FS_OVERLAY_ID(name) ((u32)&(SDK_OVERLAY_ ## name ## _ID))\ntypedef void (*FSOverlayInitFunc)(void);\ntypedef struct FSOverlayInfoHeader\n{\n    u32 id;\n    u8 *ram_address;\n    u32 ram_size;\n    u32 bss_size;\n    FSOverlayInitFunc *sinit_init;\n    FSOverlayInitFunc *sinit_init_end;\n    u32 file_id;\n    u32 compressed: 24;\n    u32 flag: 8;\n} FSOverlayInfoHeader;\ntypedef struct FSOverlayInfo\n{\n    FSOverlayInfoHeader header;\n    MIProcessor target;\n    CARDRomRegion file_pos;\n} FSOverlayInfo;\nstatic inline u8 *const FS_GetOverlayAddress(FSOverlayInfo *p_ovi)\n{\n    return p_ovi->header.ram_address;\n}\nstatic inline u32 const FS_GetOverlayImageSize(FSOverlayInfo *p_ovi)\n{\n    return p_ovi->header.ram_size;\n}\nstatic inline u32 const FS_GetOverlayTotalSize(FSOverlayInfo *p_ovi)\n{\n    return p_ovi->header.ram_size + p_ovi->header.bss_size;\n}\nu32 FSi_GetOverlayBinarySize(FSOverlayInfo * p_ovi);\nvoid FS_ClearOverlayImage(FSOverlayInfo * p_ovi);\nFSFileID FS_GetOverlayFileID(FSOverlayInfo * p_ovi);\nBOOL FSi_LoadOverlayInfoCore(FSOverlayInfo * p_ovi, MIProcessor target, FSOverlayID id, FSArchive * arc, u32 offset_arm9, u32 len_arm9, u32 offset_arm7, u32 len_arm7);\nBOOL FS_LoadOverlayInfo(FSOverlayInfo *p_ovi, MIProcessor target, FSOverlayID id);\nBOOL FS_LoadOverlayImageAsync(FSOverlayInfo *p_ovi, FSFile *p_file);\nBOOL FS_LoadOverlayImage(FSOverlayInfo *p_ovi);\nBOOL FSi_CompareDigest(const u8 *spec_digest, void *src, u32 len);\nvoid FS_StartOverlay(FSOverlayInfo *p_ovi);\nvoid FS_EndOverlay(FSOverlayInfo *p_ovi);\nBOOL FS_UnloadOverlayImage(FSOverlayInfo * p_ovi);\nBOOL FS_LoadOverlay(MIProcessor target, FSOverlayID id);\nBOOL FS_UnloadOverlay(MIProcessor target, FSOverlayID id);\n#define NITRO_SPI_PM_H_ \n\n#pragma enumsalwaysint on\n\n#define PM_TRIGGER_KEY (1 << 0)\n#define PM_TRIGGER_RTC_ALARM (1 << 1)\n#define PM_TRIGGER_COVER_OPEN (1 << 2)\n#define PM_TRIGGER_CARD (1 << 3)\n#define PM_TRIGGER_CARTRIDGE (1 << 4)\ntypedef u32 PMWakeUpTrigger;\n#define PM_PAD_LOGIC_OR (0 << REG_PAD_KEYCNT_LOGIC_SHIFT)\n#define PM_PAD_LOGIC_AND (1 << REG_PAD_KEYCNT_LOGIC_SHIFT)\ntypedef u32 PMLogic;\ntypedef enum\n{\n    PM_BACKLIGHT_OFF = 0,\n    PM_BACKLIGHT_ON = 1\n} PMBackLightSwitch;\ntypedef enum\n{\n    PM_LCD_TOP = 0,\n    PM_LCD_BOTTOM = 1,\n    PM_LCD_ALL = 2\n}\nPMLCDTarget;\nvoid PM_GetBackLight(PMBackLightSwitch * top, PMBackLightSwitch * bottom);\nvoid PM_GoSleepMode(PMWakeUpTrigger trigger, PMLogic logic, u16 keyPattern);\nu32 PM_SetBackLight(PMLCDTarget target, PMBackLightSwitch status);\nu32 PM_ForceToPowerOff(void);\nvoid PM_SetAmp(int gain);\nvoid PM_SetAmpGain(int gain);\n\n#pragma enumsalwaysint reset\n\n#define POKEDIAMOND_OVERLAY_MANAGER_H \nstruct OverlayManager;\ntypedef struct OverlayManagerTemplate\n{\n    BOOL (*initFunc)(struct OverlayManager *manager, u32 *status);\n    BOOL (*mainFunc)(struct OverlayManager *manager, u32 *status);\n    BOOL (*exitFunc)(struct OverlayManager *manager, u32 *status);\n    FSOverlayID ovly;\n} OverlayManagerTemplate;\nstruct OverlayManager\n{\n    struct OverlayManagerTemplate template;\n    u32 managerStatus;\n    u32 overlayStatus;\n    s32 * unk18;\n    void * data;\n    struct SaveData *save;\n    u32 unk24;\n};\nstruct OverlayManager * OverlayManager_New(const struct OverlayManagerTemplate *template, s32 * a1, HeapID heapId);\nvoid OverlayManager_Delete(struct OverlayManager * overlayManager);\nvoid * OverlayManager_CreateAndGetData(struct OverlayManager * overlayManager, u32 size, HeapID heapId);\nvoid * OverlayManager_GetData(struct OverlayManager * overlayManager);\nvoid OverlayManager_FreeData(struct OverlayManager * overlayManager);\ns32 * OverlayManager_GetField18(struct OverlayManager * overlayManager);\nBOOL OverlayManager_Run(struct OverlayManager * overlayManager);\nstruct Unk21C4818\n{\n    u32 unk0;\n    u32 unk4;\n    u32 unk8;\n    u32 unkC;\n};\nstruct Unk21C4828\n{\n    u32 unk0;\n    u32 unk4;\n    u32 unk8;\n};\nstruct UnkStruct_021C4918 {\n    s32 unk0;\n    u8 unk4;\n    u8 unk5;\n    u8 unk6;\n    u8 unk7;\n    u8 unk8;\n    u8 padding[3];\n};\nstruct Main\n{\n    void (*vBlankIntr)(void *);\n    void * vBlankIntrArg;\n    void (*hBlankIntr)(void *);\n    void * hBlankIntrArg;\n    s32 unk10;\n    s32 unk14;\n    void * unk18;\n    void * unk1C;\n    void * unk20;\n    void * unk24;\n    s32 unk28;\n    u32 unk2C;\n    s32 unk30;\n    u32 buttonMode;\n    u32 heldKeysRaw;\n    u32 newKeysRaw;\n    u32 newAndRepeatedKeysRaw;\n    u32 heldKeys;\n    u32 newKeys;\n    u32 newAndRepeatedKeys;\n    s32 keyRepeatCounter;\n    s32 keyRepeatContinueDelay;\n    s32 keyRepeatStartDelay;\n    u16 touchX;\n    u16 touchY;\n    u16 touchNew;\n    u16 touchHeld;\n    u8 touchpadReadAuto;\n    u8 screensFlipped;\n    u8 gbaCartId;\n    u8 unk67;\n    u8 softResetDisabled;\n    u8 padding_69[3];\n    s32 unk6C;\n};\nextern PMBackLightSwitch gBacklightTop;\nextern s32 UNK_02016FA4;\nstruct UnkStruct_02016FA8\n{\n    FSOverlayID mainOverlayId;\n    struct OverlayManager *overlayManager;\n    FSOverlayID queuedMainOverlayId;\n    const struct OverlayManagerTemplate *template;\n    s32 unk10;\n    s32 unk14;\n    struct SaveData *save;\n};\nextern struct UnkStruct_02016FA8 UNK_02016FA8;\nvoid NitroMain(void);\nextern struct Main gSystem;\nvoid sub_02000DF4(void);\nvoid Main_RunOverlayManager(void);\nvoid RegisterMainOverlay(FSOverlayID id, const struct OverlayManagerTemplate *template);\nvoid sub_02000E9C(void);\nvoid sub_02000EC8(u32 parameter);\nvoid sub_02000EE8(void);\nvoid DoSoftReset(u32 parameter);\nvoid sub_02000F4C(u32 arg0, u32 arg1);\nvoid InitializeMainRNG(void);\nvoid HandleDSLidAction(void);\ntypedef struct TaskManager TaskManager;\ntypedef BOOL (*TaskFunc)(TaskManager *taskManager);\nstruct FieldSystem;\nstruct TaskManager\n{\n    struct TaskManager *prev;\n    TaskFunc func;\n    u32 state;\n    void *env;\n    struct TaskManager *unk10;\n    void *unk14;\n    struct FieldSystem *fieldSystem;\n    u32 *unk1C;\n};\nextern void LoadOverlay_OVERLAY_05(void *);\nextern void sub_020373D4(struct FieldSystem *, struct OverlayManagerTemplate *, void*);\nextern BOOL sub_020373AC(void *);\nextern BOOL sub_0203739C(struct FieldSystem *fieldSystem);\nextern BOOL sub_020373C4(struct FieldSystem *fieldSystem);\nstruct TaskManager *Task_New(struct FieldSystem *fieldSystem, TaskFunc taskFunc, void *env);\nvoid FieldSystem_CreateTask(struct FieldSystem *fieldSystem, TaskFunc taskFunc, void *env);\nvoid TaskManager_Jump(struct TaskManager *taskManager, TaskFunc taskFunc, void *env);\nvoid TaskManager_Call(struct TaskManager *taskManager, TaskFunc taskFunc, void *env);\nBOOL sub_02046420(struct TaskManager *taskManager);\nBOOL sub_0204646C(struct TaskManager *taskManager);\nBOOL FieldSystem_ApplicationIsRunning(struct FieldSystem *fieldSystem);\nvoid sub_0204649C(void * r0);\nBOOL sub_020464A4(void * r0);\nBOOL sub_020464B8(struct TaskManager *taskManager);\nvoid sub_02046500(struct TaskManager *taskManager, u32 r5, u32 r4);\nvoid * TaskManager_GetEnvironment(struct TaskManager *taskManager);\nu32 * TaskManager_GetStatePtr(struct TaskManager *taskManager);\nu32 sub_02046534(struct TaskManager *taskManager);\nstruct FieldSystem *TaskManager_GetFieldSystem(struct TaskManager *taskManager);\ntypedef struct Location {\n    u32 mapId;\n    u32 warpId;\n    u32 x;\n    u32 y;\n    u32 direction;\n} Location;\ntypedef struct UnkFieldStruct04 {\n    u8 padding[0xC];\n    u32 unk0C;\n} UnkFieldStruct04;\ntypedef struct MapObjectManager {\n} MapObjectManager;\ntypedef struct UnkStruct_020464D4\n{\n    u16 unk0[4];\n    u8 padding[0x108];\n} UnkStruct_020464D4;\ntypedef struct UnkStruct_02046444\n{\n    u8 padding[0x24];\n    u16 unk24;\n    u16 unk26;\n    u16 unk28;\n    u8 padding2[0x66];\n    UnkStruct_020464D4 unk90[1];\n} UnkStruct_02046444;\ntypedef struct FieldSystem\n{\n    u32 *unk00;\n    UnkFieldStruct04 *unk04;\n    BgConfig *bgConfig;\n    SaveData *saveData;\n    TaskManager *taskManager;\n    u8 padding2[0x8];\n    Location *location;\n    Camera *camera;\n    u32 unk24;\n    u8 padding3[0xC];\n    MapObjectManager *mapObjectManager;\n    PlayerAvatar *playerAvatar;\n    u8 padding4[0x24];\n    u32 unk60;\n    u8 padding5[0x12];\n    u16 unk76;\n    u32 unk78;\n    u32 unk7C;\n    u8 padding6[0x10];\n    u32 unk90;\n    u8 padding7[0x4];\n    u32 *unk98;\n    u8 padding8[0xC];\n    UnkStruct_02046444 * unkA8;\n} FieldSystem;\n#define POKEDIAMOND_MESSAGE_FORMAT_H \n#define POKEDIAMOND_POKEMON_H \n#define GUARD_CONSTANTS_SPECIES_H \n#define SPECIES_NONE 0\n#define SPECIES_BULBASAUR 1\n#define SPECIES_IVYSAUR 2\n#define SPECIES_VENUSAUR 3\n#define SPECIES_CHARMANDER 4\n#define SPECIES_CHARMELEON 5\n#define SPECIES_CHARIZARD 6\n#define SPECIES_SQUIRTLE 7\n#define SPECIES_WARTORTLE 8\n#define SPECIES_BLASTOISE 9\n#define SPECIES_CATERPIE 10\n#define SPECIES_METAPOD 11\n#define SPECIES_BUTTERFREE 12\n#define SPECIES_WEEDLE 13\n#define SPECIES_KAKUNA 14\n#define SPECIES_BEEDRILL 15\n#define SPECIES_PIDGEY 16\n#define SPECIES_PIDGEOTTO 17\n#define SPECIES_PIDGEOT 18\n#define SPECIES_RATTATA 19\n#define SPECIES_RATICATE 20\n#define SPECIES_SPEAROW 21\n#define SPECIES_FEAROW 22\n#define SPECIES_EKANS 23\n#define SPECIES_ARBOK 24\n#define SPECIES_PIKACHU 25\n#define SPECIES_RAICHU 26\n#define SPECIES_SANDSHREW 27\n#define SPECIES_SANDSLASH 28\n#define SPECIES_NIDORAN_F 29\n#define SPECIES_NIDORINA 30\n#define SPECIES_NIDOQUEEN 31\n#define SPECIES_NIDORAN_M 32\n#define SPECIES_NIDORINO 33\n#define SPECIES_NIDOKING 34\n#define SPECIES_CLEFAIRY 35\n#define SPECIES_CLEFABLE 36\n#define SPECIES_VULPIX 37\n#define SPECIES_NINETALES 38\n#define SPECIES_JIGGLYPUFF 39\n#define SPECIES_WIGGLYTUFF 40\n#define SPECIES_ZUBAT 41\n#define SPECIES_GOLBAT 42\n#define SPECIES_ODDISH 43\n#define SPECIES_GLOOM 44\n#define SPECIES_VILEPLUME 45\n#define SPECIES_PARAS 46\n#define SPECIES_PARASECT 47\n#define SPECIES_VENONAT 48\n#define SPECIES_VENOMOTH 49\n#define SPECIES_DIGLETT 50\n#define SPECIES_DUGTRIO 51\n#define SPECIES_MEOWTH 52\n#define SPECIES_PERSIAN 53\n#define SPECIES_PSYDUCK 54\n#define SPECIES_GOLDUCK 55\n#define SPECIES_MANKEY 56\n#define SPECIES_PRIMEAPE 57\n#define SPECIES_GROWLITHE 58\n#define SPECIES_ARCANINE 59\n#define SPECIES_POLIWAG 60\n#define SPECIES_POLIWHIRL 61\n#define SPECIES_POLIWRATH 62\n#define SPECIES_ABRA 63\n#define SPECIES_KADABRA 64\n#define SPECIES_ALAKAZAM 65\n#define SPECIES_MACHOP 66\n#define SPECIES_MACHOKE 67\n#define SPECIES_MACHAMP 68\n#define SPECIES_BELLSPROUT 69\n#define SPECIES_WEEPINBELL 70\n#define SPECIES_VICTREEBEL 71\n#define SPECIES_TENTACOOL 72\n#define SPECIES_TENTACRUEL 73\n#define SPECIES_GEODUDE 74\n#define SPECIES_GRAVELER 75\n#define SPECIES_GOLEM 76\n#define SPECIES_PONYTA 77\n#define SPECIES_RAPIDASH 78\n#define SPECIES_SLOWPOKE 79\n#define SPECIES_SLOWBRO 80\n#define SPECIES_MAGNEMITE 81\n#define SPECIES_MAGNETON 82\n#define SPECIES_FARFETCHD 83\n#define SPECIES_DODUO 84\n#define SPECIES_DODRIO 85\n#define SPECIES_SEEL 86\n#define SPECIES_DEWGONG 87\n#define SPECIES_GRIMER 88\n#define SPECIES_MUK 89\n#define SPECIES_SHELLDER 90\n#define SPECIES_CLOYSTER 91\n#define SPECIES_GASTLY 92\n#define SPECIES_HAUNTER 93\n#define SPECIES_GENGAR 94\n#define SPECIES_ONIX 95\n#define SPECIES_DROWZEE 96\n#define SPECIES_HYPNO 97\n#define SPECIES_KRABBY 98\n#define SPECIES_KINGLER 99\n#define SPECIES_VOLTORB 100\n#define SPECIES_ELECTRODE 101\n#define SPECIES_EXEGGCUTE 102\n#define SPECIES_EXEGGUTOR 103\n#define SPECIES_CUBONE 104\n#define SPECIES_MAROWAK 105\n#define SPECIES_HITMONLEE 106\n#define SPECIES_HITMONCHAN 107\n#define SPECIES_LICKITUNG 108\n#define SPECIES_KOFFING 109\n#define SPECIES_WEEZING 110\n#define SPECIES_RHYHORN 111\n#define SPECIES_RHYDON 112\n#define SPECIES_CHANSEY 113\n#define SPECIES_TANGELA 114\n#define SPECIES_KANGASKHAN 115\n#define SPECIES_HORSEA 116\n#define SPECIES_SEADRA 117\n#define SPECIES_GOLDEEN 118\n#define SPECIES_SEAKING 119\n#define SPECIES_STARYU 120\n#define SPECIES_STARMIE 121\n#define SPECIES_MR_MIME 122\n#define SPECIES_SCYTHER 123\n#define SPECIES_JYNX 124\n#define SPECIES_ELECTABUZZ 125\n#define SPECIES_MAGMAR 126\n#define SPECIES_PINSIR 127\n#define SPECIES_TAUROS 128\n#define SPECIES_MAGIKARP 129\n#define SPECIES_GYARADOS 130\n#define SPECIES_LAPRAS 131\n#define SPECIES_DITTO 132\n#define SPECIES_EEVEE 133\n#define SPECIES_VAPOREON 134\n#define SPECIES_JOLTEON 135\n#define SPECIES_FLAREON 136\n#define SPECIES_PORYGON 137\n#define SPECIES_OMANYTE 138\n#define SPECIES_OMASTAR 139\n#define SPECIES_KABUTO 140\n#define SPECIES_KABUTOPS 141\n#define SPECIES_AERODACTYL 142\n#define SPECIES_SNORLAX 143\n#define SPECIES_ARTICUNO 144\n#define SPECIES_ZAPDOS 145\n#define SPECIES_MOLTRES 146\n#define SPECIES_DRATINI 147\n#define SPECIES_DRAGONAIR 148\n#define SPECIES_DRAGONITE 149\n#define SPECIES_MEWTWO 150\n#define SPECIES_MEW 151\n#define KANTO_DEX_COUNT SPECIES_MEW\n#define SPECIES_CHIKORITA 152\n#define SPECIES_BAYLEEF 153\n#define SPECIES_MEGANIUM 154\n#define SPECIES_CYNDAQUIL 155\n#define SPECIES_QUILAVA 156\n#define SPECIES_TYPHLOSION 157\n#define SPECIES_TOTODILE 158\n#define SPECIES_CROCONAW 159\n#define SPECIES_FERALIGATR 160\n#define SPECIES_SENTRET 161\n#define SPECIES_FURRET 162\n#define SPECIES_HOOTHOOT 163\n#define SPECIES_NOCTOWL 164\n#define SPECIES_LEDYBA 165\n#define SPECIES_LEDIAN 166\n#define SPECIES_SPINARAK 167\n#define SPECIES_ARIADOS 168\n#define SPECIES_CROBAT 169\n#define SPECIES_CHINCHOU 170\n#define SPECIES_LANTURN 171\n#define SPECIES_PICHU 172\n#define SPECIES_CLEFFA 173\n#define SPECIES_IGGLYBUFF 174\n#define SPECIES_TOGEPI 175\n#define SPECIES_TOGETIC 176\n#define SPECIES_NATU 177\n#define SPECIES_XATU 178\n#define SPECIES_MAREEP 179\n#define SPECIES_FLAAFFY 180\n#define SPECIES_AMPHAROS 181\n#define SPECIES_BELLOSSOM 182\n#define SPECIES_MARILL 183\n#define SPECIES_AZUMARILL 184\n#define SPECIES_SUDOWOODO 185\n#define SPECIES_POLITOED 186\n#define SPECIES_HOPPIP 187\n#define SPECIES_SKIPLOOM 188\n#define SPECIES_JUMPLUFF 189\n#define SPECIES_AIPOM 190\n#define SPECIES_SUNKERN 191\n#define SPECIES_SUNFLORA 192\n#define SPECIES_YANMA 193\n#define SPECIES_WOOPER 194\n#define SPECIES_QUAGSIRE 195\n#define SPECIES_ESPEON 196\n#define SPECIES_UMBREON 197\n#define SPECIES_MURKROW 198\n#define SPECIES_SLOWKING 199\n#define SPECIES_MISDREAVUS 200\n#define SPECIES_UNOWN 201\n#define SPECIES_WOBBUFFET 202\n#define SPECIES_GIRAFARIG 203\n#define SPECIES_PINECO 204\n#define SPECIES_FORRETRESS 205\n#define SPECIES_DUNSPARCE 206\n#define SPECIES_GLIGAR 207\n#define SPECIES_STEELIX 208\n#define SPECIES_SNUBBULL 209\n#define SPECIES_GRANBULL 210\n#define SPECIES_QWILFISH 211\n#define SPECIES_SCIZOR 212\n#define SPECIES_SHUCKLE 213\n#define SPECIES_HERACROSS 214\n#define SPECIES_SNEASEL 215\n#define SPECIES_TEDDIURSA 216\n#define SPECIES_URSARING 217\n#define SPECIES_SLUGMA 218\n#define SPECIES_MAGCARGO 219\n#define SPECIES_SWINUB 220\n#define SPECIES_PILOSWINE 221\n#define SPECIES_CORSOLA 222\n#define SPECIES_REMORAID 223\n#define SPECIES_OCTILLERY 224\n#define SPECIES_DELIBIRD 225\n#define SPECIES_MANTINE 226\n#define SPECIES_SKARMORY 227\n#define SPECIES_HOUNDOUR 228\n#define SPECIES_HOUNDOOM 229\n#define SPECIES_KINGDRA 230\n#define SPECIES_PHANPY 231\n#define SPECIES_DONPHAN 232\n#define SPECIES_PORYGON2 233\n#define SPECIES_STANTLER 234\n#define SPECIES_SMEARGLE 235\n#define SPECIES_TYROGUE 236\n#define SPECIES_HITMONTOP 237\n#define SPECIES_SMOOCHUM 238\n#define SPECIES_ELEKID 239\n#define SPECIES_MAGBY 240\n#define SPECIES_MILTANK 241\n#define SPECIES_BLISSEY 242\n#define SPECIES_RAIKOU 243\n#define SPECIES_ENTEI 244\n#define SPECIES_SUICUNE 245\n#define SPECIES_LARVITAR 246\n#define SPECIES_PUPITAR 247\n#define SPECIES_TYRANITAR 248\n#define SPECIES_LUGIA 249\n#define SPECIES_HO_OH 250\n#define SPECIES_CELEBI 251\n#define JOHTO_DEX_COUNT SPECIES_CELEBI\n#define SPECIES_TREECKO 252\n#define SPECIES_GROVYLE 253\n#define SPECIES_SCEPTILE 254\n#define SPECIES_TORCHIC 255\n#define SPECIES_COMBUSKEN 256\n#define SPECIES_BLAZIKEN 257\n#define SPECIES_MUDKIP 258\n#define SPECIES_MARSHTOMP 259\n#define SPECIES_SWAMPERT 260\n#define SPECIES_POOCHYENA 261\n#define SPECIES_MIGHTYENA 262\n#define SPECIES_ZIGZAGOON 263\n#define SPECIES_LINOONE 264\n#define SPECIES_WURMPLE 265\n#define SPECIES_SILCOON 266\n#define SPECIES_BEAUTIFLY 267\n#define SPECIES_CASCOON 268\n#define SPECIES_DUSTOX 269\n#define SPECIES_LOTAD 270\n#define SPECIES_LOMBRE 271\n#define SPECIES_LUDICOLO 272\n#define SPECIES_SEEDOT 273\n#define SPECIES_NUZLEAF 274\n#define SPECIES_SHIFTRY 275\n#define SPECIES_TAILLOW 276\n#define SPECIES_SWELLOW 277\n#define SPECIES_WINGULL 278\n#define SPECIES_PELIPPER 279\n#define SPECIES_RALTS 280\n#define SPECIES_KIRLIA 281\n#define SPECIES_GARDEVOIR 282\n#define SPECIES_SURSKIT 283\n#define SPECIES_MASQUERAIN 284\n#define SPECIES_SHROOMISH 285\n#define SPECIES_BRELOOM 286\n#define SPECIES_SLAKOTH 287\n#define SPECIES_VIGOROTH 288\n#define SPECIES_SLAKING 289\n#define SPECIES_NINCADA 290\n#define SPECIES_NINJASK 291\n#define SPECIES_SHEDINJA 292\n#define SPECIES_WHISMUR 293\n#define SPECIES_LOUDRED 294\n#define SPECIES_EXPLOUD 295\n#define SPECIES_MAKUHITA 296\n#define SPECIES_HARIYAMA 297\n#define SPECIES_AZURILL 298\n#define SPECIES_NOSEPASS 299\n#define SPECIES_SKITTY 300\n#define SPECIES_DELCATTY 301\n#define SPECIES_SABLEYE 302\n#define SPECIES_MAWILE 303\n#define SPECIES_ARON 304\n#define SPECIES_LAIRON 305\n#define SPECIES_AGGRON 306\n#define SPECIES_MEDITITE 307\n#define SPECIES_MEDICHAM 308\n#define SPECIES_ELECTRIKE 309\n#define SPECIES_MANECTRIC 310\n#define SPECIES_PLUSLE 311\n#define SPECIES_MINUN 312\n#define SPECIES_VOLBEAT 313\n#define SPECIES_ILLUMISE 314\n#define SPECIES_ROSELIA 315\n#define SPECIES_GULPIN 316\n#define SPECIES_SWALOT 317\n#define SPECIES_CARVANHA 318\n#define SPECIES_SHARPEDO 319\n#define SPECIES_WAILMER 320\n#define SPECIES_WAILORD 321\n#define SPECIES_NUMEL 322\n#define SPECIES_CAMERUPT 323\n#define SPECIES_TORKOAL 324\n#define SPECIES_SPOINK 325\n#define SPECIES_GRUMPIG 326\n#define SPECIES_SPINDA 327\n#define SPECIES_TRAPINCH 328\n#define SPECIES_VIBRAVA 329\n#define SPECIES_FLYGON 330\n#define SPECIES_CACNEA 331\n#define SPECIES_CACTURNE 332\n#define SPECIES_SWABLU 333\n#define SPECIES_ALTARIA 334\n#define SPECIES_ZANGOOSE 335\n#define SPECIES_SEVIPER 336\n#define SPECIES_LUNATONE 337\n#define SPECIES_SOLROCK 338\n#define SPECIES_BARBOACH 339\n#define SPECIES_WHISCASH 340\n#define SPECIES_CORPHISH 341\n#define SPECIES_CRAWDAUNT 342\n#define SPECIES_BALTOY 343\n#define SPECIES_CLAYDOL 344\n#define SPECIES_LILEEP 345\n#define SPECIES_CRADILY 346\n#define SPECIES_ANORITH 347\n#define SPECIES_ARMALDO 348\n#define SPECIES_FEEBAS 349\n#define SPECIES_MILOTIC 350\n#define SPECIES_CASTFORM 351\n#define SPECIES_KECLEON 352\n#define SPECIES_SHUPPET 353\n#define SPECIES_BANETTE 354\n#define SPECIES_DUSKULL 355\n#define SPECIES_DUSCLOPS 356\n#define SPECIES_TROPIUS 357\n#define SPECIES_CHIMECHO 358\n#define SPECIES_ABSOL 359\n#define SPECIES_WYNAUT 360\n#define SPECIES_SNORUNT 361\n#define SPECIES_GLALIE 362\n#define SPECIES_SPHEAL 363\n#define SPECIES_SEALEO 364\n#define SPECIES_WALREIN 365\n#define SPECIES_CLAMPERL 366\n#define SPECIES_HUNTAIL 367\n#define SPECIES_GOREBYSS 368\n#define SPECIES_RELICANTH 369\n#define SPECIES_LUVDISC 370\n#define SPECIES_BAGON 371\n#define SPECIES_SHELGON 372\n#define SPECIES_SALAMENCE 373\n#define SPECIES_BELDUM 374\n#define SPECIES_METANG 375\n#define SPECIES_METAGROSS 376\n#define SPECIES_REGIROCK 377\n#define SPECIES_REGICE 378\n#define SPECIES_REGISTEEL 379\n#define SPECIES_LATIAS 380\n#define SPECIES_LATIOS 381\n#define SPECIES_KYOGRE 382\n#define SPECIES_GROUDON 383\n#define SPECIES_RAYQUAZA 384\n#define SPECIES_JIRACHI 385\n#define SPECIES_DEOXYS 386\n#define HOENN_DEX_COUNT SPECIES_DEOXYS\n#define SPECIES_TURTWIG 387\n#define SPECIES_GROTLE 388\n#define SPECIES_TORTERRA 389\n#define SPECIES_CHIMCHAR 390\n#define SPECIES_MONFERNO 391\n#define SPECIES_INFERNAPE 392\n#define SPECIES_PIPLUP 393\n#define SPECIES_PRINPLUP 394\n#define SPECIES_EMPOLEON 395\n#define SPECIES_STARLY 396\n#define SPECIES_STARAVIA 397\n#define SPECIES_STARAPTOR 398\n#define SPECIES_BIDOOF 399\n#define SPECIES_BIBAREL 400\n#define SPECIES_KRICKETOT 401\n#define SPECIES_KRICKETUNE 402\n#define SPECIES_SHINX 403\n#define SPECIES_LUXIO 404\n#define SPECIES_LUXRAY 405\n#define SPECIES_BUDEW 406\n#define SPECIES_ROSERADE 407\n#define SPECIES_CRANIDOS 408\n#define SPECIES_RAMPARDOS 409\n#define SPECIES_SHIELDON 410\n#define SPECIES_BASTIODON 411\n#define SPECIES_BURMY 412\n#define SPECIES_WORMADAM 413\n#define SPECIES_MOTHIM 414\n#define SPECIES_COMBEE 415\n#define SPECIES_VESPIQUEN 416\n#define SPECIES_PACHIRISU 417\n#define SPECIES_BUIZEL 418\n#define SPECIES_FLOATZEL 419\n#define SPECIES_CHERUBI 420\n#define SPECIES_CHERRIM 421\n#define SPECIES_SHELLOS 422\n#define SPECIES_GASTRODON 423\n#define SPECIES_AMBIPOM 424\n#define SPECIES_DRIFLOON 425\n#define SPECIES_DRIFBLIM 426\n#define SPECIES_BUNEARY 427\n#define SPECIES_LOPUNNY 428\n#define SPECIES_MISMAGIUS 429\n#define SPECIES_HONCHKROW 430\n#define SPECIES_GLAMEOW 431\n#define SPECIES_PURUGLY 432\n#define SPECIES_CHINGLING 433\n#define SPECIES_STUNKY 434\n#define SPECIES_SKUNTANK 435\n#define SPECIES_BRONZOR 436\n#define SPECIES_BRONZONG 437\n#define SPECIES_BONSLY 438\n#define SPECIES_MIME_JR 439\n#define SPECIES_HAPPINY 440\n#define SPECIES_CHATOT 441\n#define SPECIES_SPIRITOMB 442\n#define SPECIES_GIBLE 443\n#define SPECIES_GABITE 444\n#define SPECIES_GARCHOMP 445\n#define SPECIES_MUNCHLAX 446\n#define SPECIES_RIOLU 447\n#define SPECIES_LUCARIO 448\n#define SPECIES_HIPPOPOTAS 449\n#define SPECIES_HIPPOWDON 450\n#define SPECIES_SKORUPI 451\n#define SPECIES_DRAPION 452\n#define SPECIES_CROAGUNK 453\n#define SPECIES_TOXICROAK 454\n#define SPECIES_CARNIVINE 455\n#define SPECIES_FINNEON 456\n#define SPECIES_LUMINEON 457\n#define SPECIES_MANTYKE 458\n#define SPECIES_SNOVER 459\n#define SPECIES_ABOMASNOW 460\n#define SPECIES_WEAVILE 461\n#define SPECIES_MAGNEZONE 462\n#define SPECIES_LICKILICKY 463\n#define SPECIES_RHYPERIOR 464\n#define SPECIES_TANGROWTH 465\n#define SPECIES_ELECTIVIRE 466\n#define SPECIES_MAGMORTAR 467\n#define SPECIES_TOGEKISS 468\n#define SPECIES_YANMEGA 469\n#define SPECIES_LEAFEON 470\n#define SPECIES_GLACEON 471\n#define SPECIES_GLISCOR 472\n#define SPECIES_MAMOSWINE 473\n#define SPECIES_PORYGON_Z 474\n#define SPECIES_GALLADE 475\n#define SPECIES_PROBOPASS 476\n#define SPECIES_DUSKNOIR 477\n#define SPECIES_FROSLASS 478\n#define SPECIES_ROTOM 479\n#define SPECIES_UXIE 480\n#define SPECIES_MESPRIT 481\n#define SPECIES_AZELF 482\n#define SPECIES_DIALGA 483\n#define SPECIES_PALKIA 484\n#define SPECIES_HEATRAN 485\n#define SPECIES_REGIGIGAS 486\n#define SPECIES_GIRATINA 487\n#define SPECIES_CRESSELIA 488\n#define SPECIES_PHIONE 489\n#define SPECIES_MANAPHY 490\n#define SPECIES_DARKRAI 491\n#define SPECIES_SHAYMIN 492\n#define SPECIES_ARCEUS 493\n#define NATIONAL_DEX_COUNT SPECIES_ARCEUS\n#define SPECIES_EGG 494\n#define SPECIES_MANAPHY_EGG 495\n#define SPECIES_DEOXYS_ATK 496\n#define SPECIES_DEOXYS_DEF 497\n#define SPECIES_DEOXYS_SPD 498\n#define SPECIES_WORMADAM_SANDY 499\n#define SPECIES_WORMADAM_TRASH 500\n#define NUM_SPECIES SPECIES_WORMADAM_TRASH\n#define POKEDIAMOND_SEALS_H \n#define POKEDIAMOND_MAIL_MESSAGE_H \nstruct MailMessage\n{\n    u16 msg_bank;\n    u16 msg_no;\n    u16 fields[2];\n};\n#define MAILMSG_BANK_NONE (0xFFFF)\n#define MAILMSG_FIELDS_MAX (2)\nvoid MailMsg_Init(struct MailMessage * mailMsg);\nvoid MailMsg_Init_WithBank(struct MailMessage * mailMsg, u16 bank);\nvoid MailMsg_Init_Default(struct MailMessage * mailMsg);\nvoid MailMsg_Init_FromTemplate(struct MailMessage * mailMsg, u32 a1);\nstruct String * MailMsg_GetExpandedString(struct MailMessage * mailMsg, HeapID heapId);\nstruct String * MailMsg_GetRawString(struct MailMessage * mailMsg, HeapID heapId);\nBOOL MailMsg_IsInit(struct MailMessage * mailMsg);\nBOOL MailMsg_AllFieldsAreInit(struct MailMessage * mailMsg);\nu32 MailMsg_NumFields(u16 bank, u16 num);\nu16 MailMsg_GetFieldI(struct MailMessage * mailMsg, u32 a1);\nu16 MailMsg_GetMsgBank(struct MailMessage * mailMsg);\nu16 MailMsg_GetMsgNo(struct MailMessage * mailMsg);\nBOOL MailMsg_Compare(const struct MailMessage *mailMsg, const struct MailMessage *a1);\nvoid MailMsg_Copy(struct MailMessage * mailMsg, const struct MailMessage * a1);\nu32 MailMsg_NumMsgsInBank(u16 bank);\nvoid MailMsg_SetMsgBankAndNum(struct MailMessage * mailMsg, u16 bank, u16 num);\nvoid MailMsg_SetFieldI(struct MailMessage * mailMsg, u32 idx, u16 word);\nvoid MailMsg_SetTrailingFieldsEmpty(struct MailMessage * mailMsg);\nunion MailPatternData\n{\n    u16 raw;\n    struct {\n        u16 unk_0:12;\n        u16 unk_C:4;\n    } bits;\n};\ntypedef struct Mail\n{\n    u32 author_otId;\n    u8 author_gender;\n    u8 author_language;\n    u8 author_version;\n    u8 mail_type;\n    u16 author_name[7 + 1];\n    union MailPatternData unk_18[3];\n    u8 padding_1E[2];\n    struct MailMessage unk_20[3];\n} Mail;\nstruct Mail * Mail_New(HeapID heapId);\nvoid Mail_Init(struct Mail * mail);\nBOOL Mail_TypeIsValid(struct Mail * mail);\nstruct Mail * Mail_New(HeapID heapId);\nvoid Mail_Copy(const struct Mail * src, struct Mail * dest);\nvoid Mail_SetNewMessageDetails(struct Mail * mail, u8 type, u8 monIdx, struct SaveData * save);\nu32 Mail_GetOTID(struct Mail * mail);\nu16 * Mail_GetAuthorNamePtr(struct Mail * mail);\nu8 Mail_GetAuthorGender(struct Mail * mail);\nu8 Mail_GetType(struct Mail * mail);\nvoid Mail_SetType(struct Mail * mail, u8 type);\nu8 Mail_GetLanguage(struct Mail * mail);\nu8 Mail_GetVersion(struct Mail * mail);\nu16 Mail_GetAttrFromUnk18Array(struct Mail * mail, u32 idx, u32 attr);\nstruct MailMessage * Mail_GetUnk20Array(struct Mail * mail, u32 idx);\nvoid Mail_CopyToUnk20Array(struct Mail * mail, const struct MailMessage * src, u32 idx);\nstruct Mail * Save_Mailbox_Get(struct SaveData * save);\nu32 Save_Mailbox_sizeof(void);\nvoid Save_Mailbox_Init(struct Mail * mail);\ns32 Mailbox_GetFirstEmptySlotIdx(struct Mail * mail, BOOL r1);\nvoid Mailbox_DeleteSlotI(struct Mail * mail, BOOL r1, s32 idx);\nvoid Mailbox_CopyMailToSlotI(struct Mail * mail, BOOL r1, s32 idx, const struct Mail * src);\ns32 Mailbox_CountMessages(struct Mail * mail, BOOL r1);\nstruct Mail * Mailbox_AllocAndFetchMailI(struct Mail * mail, BOOL r1, s32 idx, HeapID heapId);\nvoid Mailbox_FetchMailIToBuffer(struct Mail * mail, BOOL r1, s32 idx, struct Mail * dest);\ns32 MailArray_GetFirstEmptySlotIdx(struct Mail * mail, s32 count);\ns32 MailArray_CountMessages(struct Mail * mail, s32 count);\nstruct Mail * Mailbox_GetPtrToSlotI(struct Mail * mail, BOOL r1, s32 idx);\n#define POKEDIAMOND_CONSTANTS_POKEMON_H \n#define MAX_LEVEL 100\n#define MON_MOVES 4\n#define MAX_EV 100\n#define MAX_EV_SUM 510\n#define TYPE_NONE 255\n#define TYPE_NORMAL 0\n#define TYPE_FIGHTING 1\n#define TYPE_FLYING 2\n#define TYPE_POISON 3\n#define TYPE_GROUND 4\n#define TYPE_ROCK 5\n#define TYPE_BUG 6\n#define TYPE_GHOST 7\n#define TYPE_STEEL 8\n#define TYPE_MYSTERY 9\n#define TYPE_FIRE 10\n#define TYPE_WATER 11\n#define TYPE_GRASS 12\n#define TYPE_ELECTRIC 13\n#define TYPE_PSYCHIC 14\n#define TYPE_ICE 15\n#define TYPE_DRAGON 16\n#define TYPE_DARK 17\n#define NUMBER_OF_MON_TYPES 18\n#define COOL 0\n#define BEAUTY 1\n#define CUTE 2\n#define SMART 3\n#define TOUGH 4\n#define EGG_GROUP_NONE 0\n#define EGG_GROUP_MONSTER 1\n#define EGG_GROUP_WATER_1 2\n#define EGG_GROUP_BUG 3\n#define EGG_GROUP_FLYING 4\n#define EGG_GROUP_FIELD 5\n#define EGG_GROUP_FAIRY 6\n#define EGG_GROUP_GRASS 7\n#define EGG_GROUP_HUMAN_LIKE 8\n#define EGG_GROUP_WATER_3 9\n#define EGG_GROUP_MINERAL 10\n#define EGG_GROUP_AMORPHOUS 11\n#define EGG_GROUP_WATER_2 12\n#define EGG_GROUP_DITTO 13\n#define EGG_GROUP_DRAGON 14\n#define EGG_GROUP_UNDISCOVERED 15\n#define EGG_GROUPS_PER_MON 2\n#define MON_STATUS_SLP_MASK 0x7\n#define MON_STATUS_SLP_SHIFT 0\n#define MON_STATUS_PSN_MASK 0x8\n#define MON_STATUS_PSN_SHIFT 3\n#define MON_STATUS_TOX_MASK 0x80\n#define MON_STATUS_TOX_SHIFT 7\n#define MON_STATUS_BRN_MASK 0x10\n#define MON_STATUS_BRN_SHIFT 4\n#define MON_STATUS_FRZ_MASK 0x20\n#define MON_STATUS_FRZ_SHIFT 5\n#define MON_STATUS_PRZ_MASK 0x40\n#define MON_STATUS_PRZ_SHIFT 6\n#define NATURE_HARDY 0\n#define NATURE_LONELY 1\n#define NATURE_BRAVE 2\n#define NATURE_ADAMANT 3\n#define NATURE_NAUGHTY 4\n#define NATURE_BOLD 5\n#define NATURE_DOCILE 6\n#define NATURE_RELAXED 7\n#define NATURE_IMPISH 8\n#define NATURE_LAX 9\n#define NATURE_TIMID 10\n#define NATURE_HASTY 11\n#define NATURE_SERIOUS 12\n#define NATURE_JOLLY 13\n#define NATURE_NAIVE 14\n#define NATURE_MODEST 15\n#define NATURE_MILD 16\n#define NATURE_QUIET 17\n#define NATURE_BASHFUL 18\n#define NATURE_RASH 19\n#define NATURE_CALM 20\n#define NATURE_GENTLE 21\n#define NATURE_SASSY 22\n#define NATURE_CAREFUL 23\n#define NATURE_QUIRKY 24\n#define STAT_HP 0\n#define STAT_ATK 1\n#define STAT_DEF 2\n#define STAT_SPEED 3\n#define STAT_SPATK 4\n#define STAT_SPDEF 5\n#define STAT_ACC 6\n#define STAT_EVASION 7\n#define NUM_EV_STATS NUM_STATS - 1\n#define NUM_BATTLE_STATS NUM_STATS + 2\n#define SHINY_ODDS 8\n#define MON_DATA_PERSONALITY 0\n#define MON_DATA_PARTY_LOCK 1\n#define MON_DATA_BOX_LOCK 2\n#define MON_DATA_CHECKSUM_FAILED 3\n#define MON_DATA_CHECKSUM 4\n#define MON_DATA_SPECIES 5\n#define MON_DATA_HELD_ITEM 6\n#define MON_DATA_OTID 7\n#define MON_DATA_EXPERIENCE 8\n#define MON_DATA_FRIENDSHIP 9\n#define MON_DATA_ABILITY 10\n#define MON_DATA_MARKINGS 11\n#define MON_DATA_GAME_LANGUAGE 12\n#define MON_DATA_HP_EV 13\n#define MON_DATA_ATK_EV 14\n#define MON_DATA_DEF_EV 15\n#define MON_DATA_SPEED_EV 16\n#define MON_DATA_SPATK_EV 17\n#define MON_DATA_SPDEF_EV 18\n#define MON_DATA_COOL 19\n#define MON_DATA_BEAUTY 20\n#define MON_DATA_CUTE 21\n#define MON_DATA_SMART 22\n#define MON_DATA_TOUGH 23\n#define MON_DATA_SHEEN 24\n#define MON_DATA_SINNOH_CHAMP_RIBBON 25\n#define MON_DATA_ABILITY_RIBBON 26\n#define MON_DATA_GREAT_ABILITY_RIBBON 27\n#define MON_DATA_DOUBLE_ABILITY_RIBBON 28\n#define MON_DATA_MULTI_ABILITY_RIBBON 29\n#define MON_DATA_PAIR_ABILITY_RIBBON 30\n#define MON_DATA_WORLD_ABILITY_RIBBON 31\n#define MON_DATA_ALERT_RIBBON 32\n#define MON_DATA_SHOCK_RIBBON 33\n#define MON_DATA_DOWNCAST_RIBBON 34\n#define MON_DATA_CARELESS_RIBBON 35\n#define MON_DATA_RELAX_RIBBON 36\n#define MON_DATA_SNOOZE_RIBBON 37\n#define MON_DATA_SMILE_RIBBON 38\n#define MON_DATA_GORGEOUS_RIBBON 39\n#define MON_DATA_ROYAL_RIBBON 40\n#define MON_DATA_GORGEOUS_ROYAL_RIBBON 41\n#define MON_DATA_FOOTPRINT_RIBBON 42\n#define MON_DATA_RECORD_RIBBON 43\n#define MON_DATA_HISTORY_RIBBON 44\n#define MON_DATA_LEGEND_RIBBON 45\n#define MON_DATA_RED_RIBBON 46\n#define MON_DATA_GREEN_RIBBON 47\n#define MON_DATA_BLUE_RIBBON 48\n#define MON_DATA_FESTIVAL_RIBBON 49\n#define MON_DATA_CARNIVAL_RIBBON 50\n#define MON_DATA_CLASSIC_RIBBON 51\n#define MON_DATA_PREMIER_RIBBON 52\n#define MON_DATA_SINNOH_RIBBON_53 53\n#define MON_DATA_MOVE1 54\n#define MON_DATA_MOVE2 55\n#define MON_DATA_MOVE3 56\n#define MON_DATA_MOVE4 57\n#define MON_DATA_MOVE1PP 58\n#define MON_DATA_MOVE2PP 59\n#define MON_DATA_MOVE3PP 60\n#define MON_DATA_MOVE4PP 61\n#define MON_DATA_MOVE1PPUP 62\n#define MON_DATA_MOVE2PPUP 63\n#define MON_DATA_MOVE3PPUP 64\n#define MON_DATA_MOVE4PPUP 65\n#define MON_DATA_MOVE1MAXPP 66\n#define MON_DATA_MOVE2MAXPP 67\n#define MON_DATA_MOVE3MAXPP 68\n#define MON_DATA_MOVE4MAXPP 69\n#define MON_DATA_HP_IV 70\n#define MON_DATA_ATK_IV 71\n#define MON_DATA_DEF_IV 72\n#define MON_DATA_SPEED_IV 73\n#define MON_DATA_SPATK_IV 74\n#define MON_DATA_SPDEF_IV 75\n#define MON_DATA_IS_EGG 76\n#define MON_DATA_HAS_NICKNAME 77\n#define MON_DATA_HOENN_COOL_RIBBON 78\n#define MON_DATA_HOENN_COOL_RIBBON_SUPER 79\n#define MON_DATA_HOENN_COOL_RIBBON_HYPER 80\n#define MON_DATA_HOENN_COOL_RIBBON_MASTER 81\n#define MON_DATA_HOENN_BEAUTY_RIBBON 82\n#define MON_DATA_HOENN_BEAUTY_RIBBON_SUPER 83\n#define MON_DATA_HOENN_BEAUTY_RIBBON_HYPER 84\n#define MON_DATA_HOENN_BEAUTY_RIBBON_MASTER 85\n#define MON_DATA_HOENN_CUTE_RIBBON 86\n#define MON_DATA_HOENN_CUTE_RIBBON_SUPER 87\n#define MON_DATA_HOENN_CUTE_RIBBON_HYPER 88\n#define MON_DATA_HOENN_CUTE_RIBBON_MASTER 89\n#define MON_DATA_HOENN_SMART_RIBBON 90\n#define MON_DATA_HOENN_SMART_RIBBON_SUPER 91\n#define MON_DATA_HOENN_SMART_RIBBON_HYPER 92\n#define MON_DATA_HOENN_SMART_RIBBON_MASTER 93\n#define MON_DATA_HOENN_TOUGH_RIBBON 94\n#define MON_DATA_HOENN_TOUGH_RIBBON_SUPER 95\n#define MON_DATA_HOENN_TOUGH_RIBBON_HYPER 96\n#define MON_DATA_HOENN_TOUGH_RIBBON_MASTER 97\n#define MON_DATA_HOENN_CHAMPION_RIBBON 98\n#define MON_DATA_HOENN_WINNING_RIBBON 99\n#define MON_DATA_HOENN_VICTORY_RIBBON 100\n#define MON_DATA_HOENN_ARTIST_RIBBON 101\n#define MON_DATA_HOENN_EFFORT_RIBBON 102\n#define MON_DATA_HOENN_MARINE_RIBBON 103\n#define MON_DATA_HOENN_LAND_RIBBON 104\n#define MON_DATA_HOENN_SKY_RIBBON 105\n#define MON_DATA_HOENN_COUNTRY_RIBBON 106\n#define MON_DATA_HOENN_NATIONAL_RIBBON 107\n#define MON_DATA_HOENN_EARTH_RIBBON 108\n#define MON_DATA_HOENN_WORLD_RIBBON 109\n#define MON_DATA_FATEFUL_ENCOUNTER 110\n#define MON_DATA_GENDER 111\n#define MON_DATA_FORM 112\n#define MON_DATA_RESERVED_113 113\n#define MON_DATA_RESERVED_114 114\n#define MON_DATA_UNUSED_115 115\n#define MON_DATA_NICKNAME 116\n#define MON_DATA_NICKNAME_2 117\n#define MON_DATA_NICKNAME_3 118\n#define MON_DATA_NICKNAME_4 119\n#define MON_DATA_UNK_120 120\n#define MON_DATA_GAME_VERSION 121\n#define MON_DATA_COOL_RIBBON 122\n#define MON_DATA_COOL_RIBBON_GREAT 123\n#define MON_DATA_COOL_RIBBON_ULTRA 124\n#define MON_DATA_COOL_RIBBON_MASTER 125\n#define MON_DATA_BEAUTY_RIBBON 126\n#define MON_DATA_BEAUTY_RIBBON_GREAT 127\n#define MON_DATA_BEAUTY_RIBBON_ULTRA 128\n#define MON_DATA_BEAUTY_RIBBON_MASTER 129\n#define MON_DATA_CUTE_RIBBON 130\n#define MON_DATA_CUTE_RIBBON_GREAT 131\n#define MON_DATA_CUTE_RIBBON_ULTRA 132\n#define MON_DATA_CUTE_RIBBON_MASTER 133\n#define MON_DATA_SMART_RIBBON 134\n#define MON_DATA_SMART_RIBBON_GREAT 135\n#define MON_DATA_SMART_RIBBON_ULTRA 136\n#define MON_DATA_SMART_RIBBON_MASTER 137\n#define MON_DATA_TOUGH_RIBBON 138\n#define MON_DATA_TOUGH_RIBBON_GREAT 139\n#define MON_DATA_TOUGH_RIBBON_ULTRA 140\n#define MON_DATA_TOUGH_RIBBON_MASTER 141\n#define MON_DATA_SINNOH_RIBBON_142 142\n#define MON_DATA_OT_NAME 143\n#define MON_DATA_OT_NAME_2 144\n#define MON_DATA_EGG_MET_YEAR 145\n#define MON_DATA_EGG_MET_MONTH 146\n#define MON_DATA_EGG_MET_DAY 147\n#define MON_DATA_MET_YEAR 148\n#define MON_DATA_MET_MONTH 149\n#define MON_DATA_MET_DAY 150\n#define MON_DATA_EGG_MET_LOCATION 151\n#define MON_DATA_MET_LOCATION 152\n#define MON_DATA_POKERUS 153\n#define MON_DATA_POKEBALL 154\n#define MON_DATA_MET_LEVEL 155\n#define MON_DATA_MET_GENDER 156\n#define MON_DATA_ENCOUNTER_TYPE 157\n#define MON_DATA_RESERVED_158 158\n#define MON_DATA_STATUS 159\n#define MON_DATA_LEVEL 160\n#define MON_DATA_CAPSULE 161\n#define MON_DATA_HP 162\n#define MON_DATA_MAXHP 163\n#define MON_DATA_ATK 164\n#define MON_DATA_DEF 165\n#define MON_DATA_SPEED 166\n#define MON_DATA_SPATK 167\n#define MON_DATA_SPDEF 168\n#define MON_DATA_MAIL_STRUCT 169\n#define MON_DATA_SEAL_COORDS 170\n#define MON_DATA_SPECIES_EXISTS 171\n#define MON_DATA_SANITY_IS_EGG 172\n#define MON_DATA_SPECIES2 173\n#define MON_DATA_IVS_WORD 174\n#define MON_DATA_UNK_175 175\n#define MON_DATA_TYPE_1 176\n#define MON_DATA_TYPE_2 177\n#define MON_DATA_SPECIES_NAME 178\n#define OT_ID_PLAYER_ID 0\n#define OT_ID_PRESET 1\n#define OT_ID_RANDOM_NO_SHINY 2\n#define MON_RATIO_MALE 0\n#define MON_RATIO_EIGHTH 31\n#define MON_RATIO_QUARTER 63\n#define MON_RATIO_HALF 127\n#define MON_RATIO_THREEQUARTER 191\n#define MON_RATIO_FEMALE 254\n#define MON_RATIO_UNKNOWN 255\n#define GENDER_RATIO(frac) ( (frac) <= 1 ? (u8)((frac) * 254.75) : 255 )\nenum MonGender\n{\n    MON_MALE = 0,\n    MON_FEMALE = 1,\n    MON_GENDERLESS = 2\n};\n#define FRIENDSHIP_EVENT_GROW_LEVEL 0\n#define FRIENDSHIP_EVENT_VITAMIN 1\n#define FRIENDSHIP_EVENT_BATTLE_ITEM 2\n#define FRIENDSHIP_EVENT_LEAGUE_BATTLE 3\n#define FRIENDSHIP_EVENT_LEARN_TMHM 4\n#define FRIENDSHIP_EVENT_WALKING 5\n#define FRIENDSHIP_EVENT_FAINT_SMALL 6\n#define FRIENDSHIP_EVENT_HEAL_FIELD_PSN 7\n#define FRIENDSHIP_EVENT_FAINT_LARGE 8\nenum BaseStat {\n    BASE_HP = 0,\n    BASE_ATK,\n    BASE_DEF,\n    BASE_SPEED,\n    BASE_SPATK,\n    BASE_SPDEF,\n    BASE_TYPE1,\n    BASE_TYPE2,\n    BASE_CATCH_RATE,\n    BASE_EXP_YIELD,\n    BASE_HP_YIELD,\n    BASE_ATK_YIELD,\n    BASE_DEF_YIELD,\n    BASE_SPEED_YIELD,\n    BASE_SPATK_YIELD,\n    BASE_SPDEF_YIELD,\n    BASE_ITEM_1,\n    BASE_ITEM_2,\n    BASE_GENDER_RATIO,\n    BASE_EGG_CYCLES,\n    BASE_FRIENDSHIP,\n    BASE_GROWTH_RATE,\n    BASE_EGG_GROUP_1,\n    GASE_EGG_GROUP_2,\n    BASE_ABILITY_1,\n    BASE_ABILITY_2,\n    BASE_GREAT_MARSH_RATE,\n    BASE_COLOR,\n    BASE_FLIP,\n    BASE_TMHM_1,\n    BASE_TMHM_2,\n    BASE_TMHM_3,\n    BASE_TMHM_4,\n};\ntypedef enum {\n    EGG = 0,\n    EVENT = 0,\n    HATCHED = 0,\n    PAL_PARK = 0,\n    TALL_GRASS = 2,\n    DIALGA_GAME_EVENT = 4,\n    PALKIA_GAME_EVENT = 4,\n    CAVE = 5,\n    HALL_OF_ORIGIN = 5,\n    SURFING = 7,\n    FISHING = 7,\n    BUILDING = 9,\n    SAFARI_ZONE = 10,\n    STARTER = 12,\n    FOSSIL = 12,\n    GIFT_EEVEE = 12\n} EncounterType;\ntypedef int OriginLanguage;\ntypedef enum {\n    ARCEUS_NORMAL = 0,\n    ARCEUS_FIST = 1,\n    ARCEUS_SKY = 2,\n    ARCEUS_TOXIC = 3,\n    ARCEUS_EARTH = 4,\n    ARCEUS_STONE = 5,\n    ARCEUS_INSECT = 6,\n    ARCEUS_SPOOKY = 7,\n    ARCEUS_IRON = 8,\n    ARCEUS_FLAME = 9,\n    ARCEUS_SPLASH = 10,\n    ARCEUS_MEADOW = 11,\n    ARCEUS_ZAP = 12,\n    ARCEUS_MIND = 13,\n    ARCEUS_ICICLE = 14,\n    ARCEUS_DRACO = 15,\n    ARCEUS_DREAD = 16,\n    BURMY_PLANT = 0,\n    BURMY_SANDY = 1,\n    BURMY_TRASH = 2,\n    DEOXYS_NORMAL = 0,\n    DEOXYS_ATTACK = 1,\n    DEOXYS_DEFENSE = 2,\n    DEOXYS_SPEED = 3,\n    GIRATINA_ALTERED = 0,\n    GIRATINA_ORIGIN = 1,\n    ROTOM_NORMAL = 0,\n    ROTOM_HEAT = 1,\n    ROTOM_WASH = 2,\n    ROTOM_FROST = 3,\n    ROTOM_FAN = 4,\n    ROTOM_MOW = 5,\n    SHAYMIN_LAND = 0,\n    SHAYMIN_SKY = 1,\n    SHELLOS_WEST = 0,\n    SHELLOS_EAST = 1,\n    UNOWN_A = 0,\n    UNOWN_B = 1,\n    UNOWN_C = 2,\n    UNOWN_D = 3,\n    UNOWN_E = 4,\n    UNOWN_F = 5,\n    UNOWN_G = 6,\n    UNOWN_H = 7,\n    UNOWN_I = 8,\n    UNOWN_J = 9,\n    UNOWN_K = 10,\n    UNOWN_L = 11,\n    UNOWN_M = 12,\n    UNOWN_N = 13,\n    UNOWN_O = 14,\n    UNOWN_P = 15,\n    UNOWN_Q = 16,\n    UNOWN_R = 17,\n    UNOWN_S = 18,\n    UNOWN_T = 19,\n    UNOWN_U = 20,\n    UNOWN_V = 21,\n    UNOWN_W = 22,\n    UNOWN_X = 23,\n    UNOWN_Y = 24,\n    UNOWN_Z = 25,\n    UNOWN_EXCLAMATION_MARK = 26,\n    UNOWN_QUESTION_MARK = 27\n} AlternateForms;\ntypedef enum EvoMethod\n{\n    EVO_NONE = 0,\n    EVO_FRIENDSHIP,\n    EVO_FRIENDSHIP_DAY,\n    EVO_FRIENDSHIP_NIGHT,\n    EVO_LEVEL,\n    EVO_TRADE,\n    EVO_TRADE_ITEM,\n    EVO_STONE,\n    EVO_LEVEL_ATK_GT_DEF,\n    EVO_LEVEL_ATK_EQ_DEF,\n    EVO_LEVEL_ATK_LT_DEF,\n    EVO_LEVEL_PID_LO,\n    EVO_LEVEL_PID_HI,\n    EVO_LEVEL_NINJASK,\n    EVO_LEVEL_SHEDINJA,\n    EVO_BEAUTY,\n    EVO_STONE_MALE,\n    EVO_STONE_FEMALE,\n    EVO_ITEM_DAY,\n    EVO_ITEM_NIGHT,\n    EVO_HAS_MOVE,\n    EVO_OTHER_PARTY_MON,\n    EVO_LEVEL_MALE,\n    EVO_LEVEL_FEMALE,\n    EVO_CORONET,\n    EVO_ETERNA,\n    EVO_ROUTE217,\n} EvoMethod;\nenum GrowthRate\n{\n    GROWTH_MEDIUM_FAST = 0,\n    GROWTH_ERRATIC,\n    GROWTH_FLUCTUATING,\n    GROWTH_MEDIUM_SLOW,\n    GROWTH_FAST,\n    GROWTH_SLOW,\n};\n#define POKEDIAMOND_STRING16_H \n#define POKEDIAMOND_STRING_UTIL_H \nenum PrintingMode {\n    PRINTING_MODE_LEFT_ALIGN,\n    PRINTING_MODE_RIGHT_ALIGN,\n    PRINTING_MODE_LEADING_ZEROS\n};\nvoid CopyU16StringArray(u16 *dest, const u16 *src);\nu16 *CopyU16StringArrayN(u16 *dest, const u16 *src, u32 num);\nu32 StringLength(const u16 *str);\nBOOL StringNotEqual(const u16 *s1, const u16 *s2);\nBOOL StringNotEqualN(const u16 *s1, const u16 *s2, u32 num);\nu16 *StringFill(u16 *dest, u16 value, u32 num);\nu16 *StringFillEOS(u16 *dest, u32 num);\nu16 *ConvertUIntToDecimalString(u16 *dest, u32 value, enum PrintingMode mode, u32 n);\n#define POKEDIAMOND_UNK_02021590_H \n#define POKEDIAMOND_FILESYSTEM_H \ntypedef struct NARC\n{\n    FSFile file;\n    u32 btaf_start;\n    u32 gmif_start;\n    u16 num_files;\n} NARC;\ntypedef enum NarcId\n{\n    NARC_BATTLE_SKILL_WAZA_SEQ = 0,\n    NARC_BATTLE_SKILL_SUB_SEQ = 1,\n    NARC_POKETOOL_PERSONAL_PERSONAL = 2,\n    NARC_POKETOOL_PERSONAL_GROWTBL = 3,\n    NARC_POKETOOL_POKEGRA_POKEGRA = 4,\n    NARC_POKETOOL_POKEGRA_HEIGHT = 5,\n    NARC_POKETOOL_TRGRA_TRBGRA = 6,\n    NARC_BATTLE_GRAPHIC_BATT_BG = 7,\n    NARC_WAZAEFFECT_WE = 8,\n    NARC_POKETOOL_WAZA_WAZA_TBL = 9,\n    NARC_FIELDDATA_SCRIPT_SCR_SEQ_RELEASE = 10,\n    NARC_MSGDATA_SCENARIO_SCR_MSG = 11,\n    NARC_GRAPHIC_POKETCH = 12,\n    NARC_GRAPHIC_BAG_GRA = 13,\n    NARC_GRAPHIC_FONT = 14,\n    NARC_ITEMTOOL_ITEMDATA_ITEM_DATA = 15,\n    NARC_ITEMTOOL_ITEMDATA_ITEM_ICON = 16,\n    NARC_GRAPHIC_TMAP_GRA = 17,\n    NARC_GRAPHIC_BOX = 18,\n    NARC_POKETOOL_ICONGRA_POKE_ICON = 19,\n    NARC_GRAPHIC_PLIST_GRA = 20,\n    NARC_WAZAEFFECT_EFFECTCLACT_WECHAR = 21,\n    NARC_WAZAEFFECT_EFFECTCLACT_WEPLTT = 22,\n    NARC_WAZAEFFECT_EFFECTCLACT_WECELL = 23,\n    NARC_WAZAEFFECT_EFFECTCLACT_WECELLANM = 24,\n    NARC_GRAPHIC_IMAGECLIP = 25,\n    NARC_MSGDATA_MSG = 26,\n    NARC_BATTLE_GRAPHIC_BATT_OBJ = 27,\n    NARC_DATA_UNDERG_RADAR = 28,\n    NARC_WAZAEFFECT_EFFECTDATA_WAZA_PARTICLE = 29,\n    NARC_BATTLE_SKILL_BE_SEQ = 30,\n    NARC_DATA_NAMEIN = 31,\n    NARC_FIELDDATA_EVENTDATA_ZONE_EVENT_RELEASE = 32,\n    NARC_POKETOOL_PERSONAL_WOTBL = 33,\n    NARC_POKETOOL_PERSONAL_EVO = 34,\n    NARC_GRAPHIC_FONTOAM = 35,\n    NARC_GRAPHIC_FIELD_BOARD = 36,\n    NARC_FIELDDATA_ENCOUNTDATA_D_ENC_DATA = 37,\n    NARC_GRAPHIC_WINFRAME = 38,\n    NARC_GRAPHIC_PST_GRA = 39,\n    NARC_FIELDDATA_BUILD_MODEL_BUILD_MODEL = 40,\n    NARC_FIELDDATA_MAPMATRIX_MAP_MATRIX = 41,\n    NARC_FIELDDATA_AREADATA_AREA_DATA = 42,\n    NARC_FIELDDATA_AREADATA_AREA_BUILD_MODEL_AREA_BUILD = 43,\n    NARC_FIELDDATA_AREADATA_AREA_MAP_TEX_MAP_TEX_SET = 44,\n    NARC_CONTEST_GRAPHIC_CONTEST_BG = 45,\n    NARC_CONTEST_GRAPHIC_CONTEST_OBJ = 46,\n    NARC_DATA_UGEFFECT_OBJ_GRAPHIC = 47,\n    NARC_DEMO_TITLE_TITLEDEMO = 48,\n    NARC_FIELDDATA_AREADATA_AREA_MOVE_MODEL_MOVE_MODEL_LIST = 49,\n    NARC_DATA_UG_TRAP = 50,\n    NARC_GRAPHIC_TRAINER_CASE = 51,\n    NARC_DATA_UG_FOSSIL = 52,\n    NARC_GRAPHIC_NTAG_GRA = 53,\n    NARC_DATA_TRADELIST = 54,\n    NARC_DATA_UG_PARTS = 55,\n    NARC_GRAPHIC_OPENING = 56,\n    NARC_POKETOOL_TRAINER_TRDATA = 57,\n    NARC_POKETOOL_TRAINER_TRPOKE = 58,\n    NARC_POKETOOL_TRMSG_TRTBL = 59,\n    NARC_POKETOOL_TRGRA_TRFGRA = 60,\n    NARC_PARTICLEDATA_PARTICLEDATA = 61,\n    NARC_GRAPHIC_SHOP_GRA = 62,\n    NARC_WAZAEFFECT_WE_SUB = 63,\n    NARC_DATA_UG_ANIM = 64,\n    NARC_DATA_WEATHER_SYS = 65,\n    NARC_GRAPHIC_MENU_GRA = 66,\n    NARC_FIELDDATA_LAND_DATA_LAND_DATA_RELEASE = 67,\n    NARC_ITEMTOOL_ITEMDATA_NUTS_DATA = 68,\n    NARC_RESOURCE_ENG_ZUKAN_ZUKAN = 69,\n    NARC_POKETOOL_POKEFOOT_POKEFOOT = 70,\n    NARC_FIELDDATA_AREADATA_AREA_BUILD_MODEL_AREABM_TEXSET = 71,\n    NARC_BATTLE_GRAPHIC_B_PLIST_GRA = 72,\n    NARC_GRAPHIC_CONFIG_GRA = 73,\n    NARC_GRAPHIC_UNIONROOM = 74,\n    NARC_APPLICATION_ZUKANLIST_ZKN_DATA_ZUKAN_DATA = 75,\n    NARC_GRAPHIC_PMSI = 76,\n    NARC_BATTLE_GRAPHIC_B_BAG_GRA = 77,\n    NARC_GRAPHIC_OEKAKI = 78,\n    NARC_GRAPHIC_MAIL_GRA = 79,\n    NARC_GRAPHIC_F_NOTE_GRA = 80,\n    NARC_DATA_MMODEL_MMODEL = 81,\n    NARC_GRAPHIC_EV_POKESELECT = 82,\n    NARC_GRAPHIC_PORU_GRA = 83,\n    NARC_GRAPHIC_TOUCH_SUBWINDOW = 84,\n    NARC_GRAPHIC_FLD_COMACT = 85,\n    NARC_GRAPHIC_RECORD = 86,\n    NARC_GRAPHIC_PORUDEMO = 87,\n    NARC_GRAPHIC_PORUACT = 88,\n    NARC_DATA_WIFINOTE = 89,\n    NARC_CONTEST_DATA_CONTEST_DATA = 90,\n    NARC_APPLICATION_CUSTOM_BALL_DATA_CB_DATA = 91,\n    NARC_DATA_WIFIP2PMATCH = 92,\n    NARC_GRAPHIC_DEMO_TRADE = 93,\n    NARC_POKEANIME_POKE_ANM = 94,\n    NARC_GRAPHIC_MYSIGN = 95,\n    NARC_FIELDDATA_MM_LIST_MOVE_MODEL_LIST = 96,\n    NARC_DATA_FIELD_CUTIN = 97,\n    NARC_DATA_DEMO_CLIMAX = 98,\n    NARC_WAZAEFFECT_EFFECTDATA_BALL_PARTICLE = 99,\n    NARC_WAZAEFFECT_PT_DEBUG_DEBUG_PARTICLE = 100,\n    NARC_GRAPHIC_DENDOU_PC = 101,\n    NARC_APPLICATION_WIFI_EARTH_WIFI_EARTH_PLACE = 102,\n    NARC_BATTLE_TR_AI_TR_AI_SEQ = 103,\n    NARC_GRAPHIC_WORLDTRADE = 104,\n    NARC_GRAPHIC_DENDOU_DEMO = 105,\n    NARC_ARC_ENCDATA_EX = 106,\n    NARC_DATA_MMODEL_FLDEFF = 107,\n    NARC_BATTLE_GRAPHIC_VS_DEMO_GRA = 108,\n    NARC_POKETOOL_POKEZUKAN = 109,\n    NARC_ARC_BM_ANIME = 110,\n    NARC_ARC_BM_ANIME_LIST = 111,\n    NARC_GRAPHIC_FIELD_ENCOUNTEFFECT = 112,\n    NARC_GRAPHIC_WAZA_OSHIE_GRA = 113,\n    NARC_POKETOOL_POKEANM_POKEANM = 114,\n    NARC_FIELDDATA_POKEMON_TRADE_FLD_TRADE = 115,\n    NARC_GRAPHIC_MYSTERY = 116,\n    NARC_POKETOOL_POKEGRA_OTHERPOKE = 117,\n    NARC_DEMO_EGG_DATA_EGG_DATA = 118,\n    NARC_DEMO_EGG_DATA_PARTICLE_EGG_DEMO_PARTICLE = 119,\n    NARC_ARC_SHIP_DEMO = 120,\n    NARC_POKETOOL_POKEGRA_HEIGHT_O = 121,\n    NARC_GRAPHIC_NUTMIXER = 122,\n    NARC_GRAPHIC_BTOWER = 123,\n    NARC_DEMO_SHINKA_DATA_PARTICLE_SHINKA_DEMO_PARTICLE = 124,\n    NARC_DEMO_INTRO_INTRO = 125,\n    NARC_ARC_TV = 126,\n    NARC_GRAPHIC_ENDING = 127,\n    NARC_DEMO_TITLE_OP_DEMO = 128,\n    NARC_APPLICATION_WIFI_EARTH_WIFI_EARTH = 129,\n    NARC_GRAPHIC_RANKING = 130,\n    NARC_ARC_PPARK = 131,\n    NARC_DEMO_SYOUJYOU_SYOUJYOU = 132,\n    NARC_DATA_SLOT = 133,\n    NARC_BATTLE_B_TOWER_BTDTR = 134,\n    NARC_BATTLE_B_TOWER_BTDPM = 135,\n    NARC_DEMO_INTRO_INTRO_TV = 136,\n    NARC_POKETOOL_TRMSG_TRTBLOFS = 137,\n    NARC_POKETOOL_POKEGRA_POKE_YOFS = 138,\n    NARC_APPLICATION_ZUKANLIST_ZKN_DATA_ZUKAN_ENC_DIAMOND = 139,\n    NARC_APPLICATION_ZUKANLIST_ZKN_DATA_ZUKAN_ENC_PEARL = 140,\n    NARC_GRAPHIC_HIDEN_EFFECT = 141,\n    NARC_POKETOOL_POKEGRA_POKE_SHADOW = 142,\n    NARC_FIELDDATA_ENCOUNTDATA_P_ENC_DATA = 143,\n    NARC_POKETOOL_POKEGRA_POKE_SHADOW_OFX = 144,\n    NARC_POKETOOL_SHINZUKAN = 145,\n} NarcId;\nvoid ReadFromNarcMemberByPathAndId(void * dest, const char * path, s32 file_idx, u32 offset, u32 size);\nvoid * AllocAndReadFromNarcMemberByPathAndId(const char * path, s32 file_idx, HeapID heapId, u32 offset, u32 size, BOOL r4);\nvoid ReadWholeNarcMemberByIdPair(void * dest, NarcId narc_id, s32 file_id);\nvoid * AllocAndReadWholeNarcMemberByIdPair(NarcId narc_id, s32 file_id, HeapID heapId);\nvoid * AllocAtEndAndReadWholeNarcMemberByIdPair(NarcId narc_id, s32 file_id, HeapID heapId);\nvoid ReadFromNarcMemberByIdPair(void * dest, NarcId narc_id, s32 file_id, u32 offset, u32 size);\nvoid * AllocAndReadFromNarcMemberByIdPair(NarcId narc_id, s32 file_id, HeapID heapId, u32 offset, u32 size);\nvoid * AllocAtEndAndReadFromNarcMemberByIdPair(NarcId narc_id, s32 file_id, HeapID heapId, u32 offset, u32 size);\nu32 GetNarcMemberSizeByIdPair(NarcId narc_id, s32 file_idx);\nNARC * NARC_New(NarcId narc_id, HeapID heapId);\nvoid NARC_Delete(NARC * narc);\nvoid * NARC_AllocAndReadWholeMember(NARC * narc, u32 file_id, HeapID heapId);\nvoid NARC_ReadWholeMember(NARC * narc, u32 file_id, void * dest);\nu32 NARC_GetMemberSize(NARC * narc, u32 file_id);\nvoid NARC_ReadFromMember(NARC * narc, u32 file_id, u32 pos, u32 size, void * dest);\nvoid NARC_ReadFile(NARC * narc, u32 size, void * dest);\nu16 NARC_GetFileCount(NARC * narc);\n#define POKEDIAMOND_FONT_H \n#define POKEDIAMOND_TEXT_H \n#define MAKE_TEXT_COLOR(fg,sh,bg) ((((fg) & 0xFF) << 16) | (((sh) & 0xFF) << 8) | (((bg) & 0xFF) << 0))\n#define TEXT_SPEED_INSTANT 0\n#define TEXT_SPEED_NOTRANSFER 0xFF\nunion StrbufForPrint\n{\n    struct String * wrapped;\n    const u16 * raw;\n};\nstruct TextPrinterTemplate\n{\n    union StrbufForPrint currentChar;\n    struct Window * window;\n    u8 padding[1];\n    u8 fontId;\n    u8 x;\n    u8 y;\n    u8 currentX;\n    u8 currentY;\n    u8 letterSpacing;\n    u8 lineSpacing;\n    u8 unk;\n    u8 fgColor;\n    u8 bgColor;\n    u8 shadowColor;\n    u16 unk2;\n    u8 unk3;\n    u8 unk4;\n};\nstruct TextPrinter\n{\n    struct TextPrinterTemplate printerTemplate;\n    u8 (*callback)(struct TextPrinterTemplate *, u16);\n    u8 subStructFields[7];\n    u8 active;\n    u8 state;\n    u8 textSpeedBottom:7;\n    u8 textSpeedTop:1;\n    u8 delayCounter;\n    u8 scrollDistance;\n    u8 minLetterSpacing;\n    u8 Unk29;\n    u16 Unk2A;\n    u16 *Unk2C;\n};\nstruct FontInfo\n{\n    u8 maxLetterWidth;\n    u8 maxLetterHeight;\n    u8 letterSpacing;\n    u8 lineSpacing;\n    u8 unk;\n    u8 fgColor;\n    u8 bgColor;\n    u8 shadowColor;\n};\nvoid SetFontsPointer(const struct FontInfo *fonts);\nu8 sub_0201BCC8(void (*func)(u32, void *), void *printer, u32 param2);\nvoid sub_0201BCFC(u8 textPrinterNumber);\nBOOL sub_0201BD44(u8 textPrinterNumber);\nvoid ResetAllTextPrinters(void);\nu8 sub_0201BD70(u8 textPrinterNumber);\nvoid sub_0201BD7C(u8 textPrinterNumber);\nu16 AddTextPrinterParameterized(struct Window * window, u8 fontId, struct String *str, u32 x, u32 y, u32 speed, u8 (*callback)(struct TextPrinterTemplate *, u16));\nu16 AddTextPrinterParameterized2(struct Window * window, u8 fontId, struct String *str, u32 x, u32 y, u32 speed, u32 colors, u8 (*callback)(struct TextPrinterTemplate *, u16));\nu16 AddTextPrinterParameterized3(struct Window * window, u32 fontId, struct String *str, u32 x, u32 y, u32 speed, u32 colors, u32 letterSpacing, u32 lineSpacing, u8 (*callback)(struct TextPrinterTemplate *, u16));\nu16 AddTextPrinter(struct TextPrinterTemplate *printerTemplate, u32 speed, u8 (*callback)(struct TextPrinterTemplate *, u16));\nvoid RunTextPrinter(u32 param0, struct TextPrinter *printer);\nu32 RenderFont(struct TextPrinter *printer);\nvoid GenerateFontHalfRowLookupTable(u8 fgColor, u8 bgColor, u8 shadowColor);\nvoid DecompressGlyphTile(const u16 *src, u16 *dst);\nvoid sub_0201C1A8(struct TextPrinter *printer);\nu16 *sub_0201C1B0(void);\nvoid sub_0201C1EC(struct TextPrinter *printer, u32 param1, u32 param2, u32 param3);\nvoid sub_0201C238(struct TextPrinter *printer);\nstruct UnkStruct_02002C14_sub\n{\n    const char buf[0x80];\n    u8 width;\n    u8 height;\n};\nstruct UnkStruct_02002C14\n{\n    struct UnkStruct_02002C14_sub unk00;\n    void *unk84[4];\n    struct FontData *unk94[4];\n};\nextern struct UnkStruct_02002C14 *UNK_02106FC8;\nvoid sub_02002C14();\nvoid sub_02002C50(u32 font_id, HeapID heapId);\nvoid sub_02002C84(s32 param0, HeapID heapId);\nvoid sub_02002CC0(s32 param0);\nvoid sub_02002CF8(int param0);\nstruct UnkStruct_02002C14_sub *sub_02002D94(u32 param0, u32 param1);\nu32 FontFunc(u32 fontId, struct TextPrinter *printer);\nu32 sub_02002DE0(u32 param0, u16 *str, u32 param2);\nu32 sub_02002E14(u32 param0, struct String *str, u32 param2);\ns32 GetFontAttribute(u8 fontId, s32 attr);\nvoid LoadFontPal0(enum GFPalLoadLocation location, enum GFPalSlotOffset palSlotOffset, HeapID heapId);\nvoid LoadFontPal1(enum GFPalLoadLocation location, enum GFPalSlotOffset palSlotOffset, HeapID heapId);\ns32 sub_02002F08(u32 param0, struct String *str, u32 param2);\nu32 sub_02002F40(u32 param0, struct String *str, u32 param2, u32 param3);\nu32 sub_02002F58(const u16 *str);\nu32 sub_02002F90(struct String *str);\ns32 sub_02002F9C(u32 param0, struct String *str);\nstruct FontGraphicHeader\n{\n    u32 headerSize;\n    u32 widthDataStart;\n    u32 numGlyphs;\n    u8 fixedWidth;\n    u8 fixedHeight;\n    u8 glyphWidth;\n    u8 glyphHeight;\n};\nstruct FontData\n{\n    u32 glyphAccessMode;\n    void (*uncompGlyphFunc)(struct FontData *, u16, struct UnkStruct_02002C14_sub *);\n    u32 glyphShape;\n    u32 glyphSize;\n    void * narcReadBuf;\n    u8 glyphReadBuf[0x40];\n    NARC * narc;\n    u32 fileId;\n    struct FontGraphicHeader gfxHeader;\n    BOOL isFixedWidthFont;\n    int (*glyphWidthFunc)(struct FontData *, int);\n    u8 * glyphWidths;\n};\nstruct FontData *FontData_New(NarcId narcId, s32 fileId, u32 unk2, BOOL unk3, HeapID heapId);\nvoid FontData_Delete(struct FontData * ptr);\nvoid FontData_ModeSwitch(struct FontData * ptr, u32 a1, HeapID heapId);\nvoid FontData_Init(struct FontData *ptr, NarcId narcId, s32 fileId, BOOL unk, HeapID heapId);\nvoid FontData_FreeWidthsAndNarc(struct FontData * ptr);\nvoid InitFontResources(struct FontData * ptr, u32 a1, HeapID heapId);\nvoid InitFontResources_FromPreloaded(struct FontData * ptr, HeapID heapId);\nvoid InitFontResources_LazyFromNarc(struct FontData * ptr, HeapID heapId);\nvoid FreeLoadedFontResources(struct FontData * ptr);\nvoid FreeLoadedFontResources_FromPreloaded(struct FontData * ptr);\nvoid FreeLoadedFontResources_LazyFromNarc(struct FontData * ptr);\nvoid TryLoadGlyph(struct FontData * ptr, u32 param1, struct UnkStruct_02002C14_sub * ptr2);\nvoid DecompressGlyphTiles_FromPreloaded(struct FontData * ptr, u16 param1, struct UnkStruct_02002C14_sub * param2);\nvoid DecompressGlyphTiles_LazyFromNarc(struct FontData * ptr, u16 param1, struct UnkStruct_02002C14_sub * param2);\nu32 GetStringWidth(struct FontData * ptr, const u16 * str, u32 letterSpacing);\nint GetGlyphWidth_VariableWidth(struct FontData * ptr, int a1);\nint GetGlyphWidth_FixedWidth(struct FontData * ptr, int a1);\ns32 GetStringWidthMultiline(struct FontData * r7, const u16 * arr, u32 r6);\ns32 StringGetWidth_SingleLine_HandleClearToControlCode(struct FontData * r6, const u16 * arr);\ntypedef struct String\n{\n    u16 maxsize;\n    u16 size;\n    u32 magic;\n    u16 data[1];\n    u8 padding[2];\n} String;\n#define STR16_MAGIC 0xB6F8D2EC\nstruct String * String_New(u32 count, HeapID heapId);\nBOOL String_Compare(struct String *, struct String *);\nvoid CopyU16ArrayToStringN(struct String *, u16 *, u32);\nvoid String_SetEmpty(struct String *);\nstruct String * StringDup(struct String *, HeapID heapId);\nvoid String_Delete(struct String * str);\nvoid StringCopy(struct String * dest, struct String * src);\nvoid String16_FormatInteger(struct String * str, int num, u32 ndigits, enum PrintingMode printingMode, BOOL whichCharset);\ns64 String_atoi(struct String * str, BOOL * flag);\nu16 StringGetLength(struct String * str);\nint StringCountLines(volatile struct String * str);\nvoid StringGetLineN(struct String * dest, volatile struct String * src, u32 n);\nvoid CopyU16ArrayToString(struct String * str, u16 * buf);\nvoid CopyStringToU16Array(struct String * str, u16 * buf, u32 length);\nu16 * String_c_str(struct String * str);\nvoid StrAddChar(struct String * str, u16 val);\nvoid StringCat(struct String * dest, struct String * src);\nvoid StrUpperFirstChar(struct String * str);\nBOOL String_IsTrainerName(struct String * string);\nvoid StringCat_HandleTrainerName(struct String * dest, struct String * src);\n#define POKEDIAMOND_PLAYER_DATA_H \n#define POKEDIAMOND_OPTIONS_H \nstruct SaveData;\nstruct Options {\n    u16 textSpeed:4;\n    u16 soundMethod:2;\n    u16 battleStyle:1;\n    u16 battleScene:1;\n    u16 buttonMode:2;\n    u16 frame:5;\n};\nstruct Options * Options_New(HeapID heapId);\nvoid Options_Copy(struct Options * src, struct Options * dest);\nvoid Options_Init(struct Options * options);\nvoid Options_SetButtonModeOnMain(struct SaveData * save, u32 buttonMode);\nu16 Options_GetTextSpeed(struct Options * options);\nvoid Options_SetTextSpeed(struct Options * options, u16 textSpeed);\nu32 Options_GetTextFrameDelay(struct Options * options);\nu16 Options_GetSoundMethod(struct Options * options);\nvoid Options_SetSoundMethod(struct Options * options, u16 soundMethod);\nu16 Options_GetBattleScene(struct Options * options);\nvoid Options_SetBattleScene(struct Options * options, u16 battleScene);\nu16 Options_GetBattleStyle(struct Options * options);\nvoid Options_SetBattleStyle(struct Options * options, u16 battleStyle);\nu16 Options_GetButtonMode(struct Options * options);\nvoid Options_SetButtonMode(struct Options * options, u16 buttonMode);\nu16 Options_GetFrame(struct Options * options);\nvoid Options_SetFrame(struct Options * options, u16 frame);\n#define POKEDIAMOND_IGT_H \ntypedef struct IGT\n{\n    u16 hours;\n    u8 minutes;\n    u8 seconds;\n} IGT;\nvoid InitIGT(struct IGT * igt);\nvoid AddIGTSeconds(struct IGT * igt, u32 seconds);\nu16 GetIGTHours(struct IGT * igt);\nu8 GetIGTMinutes(struct IGT * igt);\nstruct SaveData;\n#define MAX_MONEY 999999\ntypedef enum PlayerGender\n{\n    PLAYER_GENDER_MALE = 0,\n    PLAYER_GENDER_FEMALE = 1\n} PlayerGender;\ntypedef struct PlayerProfile\n{\n               u16 playerName[7 + 1];\n               u32 playerId;\n               u32 money;\n               u8 gender;\n               u8 language;\n               u8 badges;\n               u8 avatar;\n               u8 version;\n               u8 gameCleared:1;\n               u8 nationalDex:1;\n               u8 field_1D_pad:6;\n               u8 padding_1E[2];\n} PlayerProfile;\ntypedef struct PlayerData\n{\n    struct Options options;\n    u8 padding[2];\n    PlayerProfile profile;\n    u16 coins;\n    struct IGT igt;\n    u8 padding2[2];\n} PlayerData;\nu32 Save_PlayerData_sizeof(void);\nvoid Save_PlayerData_Init(PlayerData * data);\nPlayerProfile * Save_PlayerData_GetProfileAddr(struct SaveData * save);\nstruct Options * Save_PlayerData_GetOptionsAddr(struct SaveData * save);\nu16 * Save_PlayerData_GetCoinsAddr(struct SaveData * save);\nstruct IGT * Save_PlayerData_GetIGTAddr(struct SaveData * save);\nu32 PlayerProfile_sizeof(void);\nPlayerProfile * PlayerProfile_New(HeapID heapId);\nvoid PlayerProfile_Copy(const PlayerProfile * src, PlayerProfile * dest);\nvoid PlayerProfile_Init(PlayerProfile * data);\nvoid CopyPlayerName(u16 * dest, PlayerProfile * data);\nvoid PlayerName_StringToFlat(PlayerProfile * data, struct String * str);\nu16 * PlayerProfile_GetNamePtr(PlayerProfile * data);\nvoid PlayerName_FlatToString(PlayerProfile * data, struct String * str);\nstruct String * PlayerProfile_GetPlayerName_NewString(PlayerProfile * data, HeapID heapId);\nvoid PlayerProfile_SetTrainerID(PlayerProfile *playerProfile, u32 otid);\nu32 PlayerProfile_GetTrainerID(PlayerProfile * data);\nu16 PlayerProfile_GetTrainerID_VisibleHalf(PlayerProfile * data);\nvoid PlayerProfile_SetTrainerGender(PlayerProfile * data, PlayerGender gender);\nPlayerGender PlayerProfile_GetTrainerGender(PlayerProfile * data);\nBOOL PlayerProfile_TestBadgeFlag(PlayerProfile * data, u32 badgeno);\nvoid PlayerProfile_SetBadgeFlag(PlayerProfile * data, u32 badgeno);\nu32 PlayerProfile_CountBadges(PlayerProfile * data);\nu32 PlayerProfile_GetMoney(PlayerProfile * data);\nu32 PlayerProfile_SetMoney(PlayerProfile * data, u32 amount);\nu8 PlayerProfile_GetAvatar(PlayerProfile * data);\nvoid PlayerProfile_SetAvatar(PlayerProfile * data, u8 avatar);\nu32 PlayerProfile_AddMoney(PlayerProfile * data, u32 amount);\nu32 PlayerProfile_SubMoney(PlayerProfile * data, u32 amount);\nu8 PlayerProfile_GetVersion(PlayerProfile * data);\nvoid PlayerProfile_SetVersion(PlayerProfile * data, u8 a1);\nu8 PlayerProfile_GetLanguage(PlayerProfile * data);\nvoid PlayerProfile_SetLanguage(PlayerProfile * data, u8 language);\nvoid PlayerProfile_SetGameClearFlag(PlayerProfile * data);\nBOOL PlayerProfile_GetGameClearFlag(PlayerProfile * data);\nvoid PlayerProfile_SetNatDexFlag(PlayerProfile * data);\nBOOL PlayerProfile_GetNatDexFlag(PlayerProfile * data);\nBOOL PlayerProfile_NameAndOTIDMatchPlayer(PlayerProfile * a, PlayerProfile * b);\n#define POKEDIAMOND_SOUND_CHATOT_H \n#define POKEDIAMOND_SAV_CHATOT_H \nstruct SaveChatotSoundClip\n{\n    BOOL exists;\n    s8 data[1000];\n};\nu32 Save_Chatot_sizeof(void);\nvoid Save_Chatot_Init(struct SaveChatotSoundClip * chatot);\nstruct SaveChatotSoundClip * Chatot_New(HeapID heapId);\nstruct SaveChatotSoundClip * Save_Chatot_Get(struct SaveData * save);\nBOOL Chatot_Exists(struct SaveChatotSoundClip * chatot);\nvoid Chatot_Invalidate(struct SaveChatotSoundClip * chatot);\ns8 * Chatot_GetData(struct SaveChatotSoundClip * chatot);\nvoid Chatot_Decode(s8 * dest, const s8 * data);\nvoid Chatot_Encode(struct SaveChatotSoundClip * chatot, const s8 * data);\nvoid Chatot_Copy(struct SaveChatotSoundClip * dest, const struct SaveChatotSoundClip * src);\nBOOL sub_02005CFC(void);\nBOOL Chatot_checkCry(struct SaveChatotSoundClip *param0);\nu32 sub_02005D48(struct SaveChatotSoundClip *param0, u32 param1, s32 param2, s32 param3);\nvoid sub_02005DFC(void);\nu32 Chatot_startRecording(void);\nvoid Chatot_stopRecording(void);\nvoid Chatot_saveRecording(struct SaveChatotSoundClip *param0);\nvoid sub_02005E80(u8 param0);\nvoid sub_02005E90(struct SaveChatotSoundClip *param0, u32 param1, s32 param2, s32 param3);\nu32 sub_02005EE0(struct SaveChatotSoundClip *param0);\nBOOL sub_02005F14(s32 param0);\nstruct BaseStats {\n               u8 hp;\n               u8 atk;\n               u8 def;\n               u8 speed;\n               u8 spatk;\n               u8 spdef;\n               u8 types[2];\n               u8 catchRate;\n               u8 expYield;\n               u16 hp_yield:2;\n               u16 atk_yield:2;\n               u16 def_yield:2;\n               u16 speed_yield:2;\n               u16 spatk_yield:2;\n               u16 spdef_yield:2;\n               u16 padding_B_4:4;\n               u16 item1;\n               u16 item2;\n               u8 genderRatio;\n               u8 eggCycles;\n               u8 friendship;\n               u8 growthRate;\n               u8 eggGroups[2];\n               u8 abilities[2];\n               u8 greatMarshRate;\n               u8 color:7;\n               u8 flip:1;\n               u8 padding_1A[2];\n               u32 unk1C;\n               u32 unk20;\n               u32 unk24;\n               u32 unk28;\n};\ntypedef struct {\n               u16 species;\n               u16 heldItem;\n               u32 otID;\n               u32 exp;\n               u8 friendship;\n               u8 ability;\n               u8 markings;\n               u8 originLanguage;\n               u8 hpEV;\n               u8 atkEV;\n               u8 defEV;\n               u8 spdEV;\n               u8 spatkEV;\n               u8 spdefEV;\n               u8 coolStat;\n               u8 beautyStat;\n               u8 cuteStat;\n               u8 smartStat;\n               u8 toughStat;\n               u8 sheen;\n               u32 sinnohRibbons;\n} PokemonDataBlockA;\ntypedef struct {\n               u16 moves[4];\n               u8 movePP[4];\n               u8 movePpUps[4];\n               u32 hpIV:5, atkIV:5, defIV:5, spdIV:5, spatkIV:5, spdefIV:5, isEgg:1, isNicknamed:1;\n               u32 ribbonFlags;\n               u8 fatefulEncounter:1, gender:2, alternateForm:5;\n               u8 HGSS_shinyLeaves;\n               u16 Unused;\n               u16 Platinum_EggLocation;\n               u16 Platinum_MetLocation;\n} PokemonDataBlockB;\ntypedef struct {\n               u16 nickname[11];\n               u8 Unused;\n               u8 originGame;\n               u64 sinnohRibbons2;\n} PokemonDataBlockC;\ntypedef struct {\n               u16 otTrainerName[8];\n               u8 dateEggReceived[3];\n               u8 dateMet[3];\n               u16 DP_EggLocation;\n               u16 DP_MetLocation;\n               u8 pokerus;\n               u8 pokeball;\n               u8 metLevel:7;\n               u8 metGender:1;\n               u8 encounterType;\n               u16 HGSS_Pokeball;\n} PokemonDataBlockD;\ntypedef union {\n    PokemonDataBlockA blockA;\n    PokemonDataBlockB blockB;\n    PokemonDataBlockC blockC;\n    PokemonDataBlockD blockD;\n} PokemonDataBlock;\ntypedef struct BoxPokemon {\n                u32 pid;\n                u16 party_lock:1;\n                u16 box_lock:1;\n                u16 checksum_fail:1;\n                u16 Unused:13;\n                u16 checksum;\n                PokemonDataBlock substructs[4];\n} BoxPokemon;\nstruct PartyPokemon\n{\n                u32 status;\n                u8 level;\n                u8 capsule;\n                u16 hp;\n                u16 maxHp;\n                u16 atk;\n                u16 def;\n                u16 speed;\n                u16 spatk;\n                u16 spdef;\n                struct Mail mail;\n                u8 sealCoords[8][3];\n};\ntypedef struct Pokemon {\n                struct BoxPokemon box;\n                struct PartyPokemon party;\n} Pokemon;\nstruct SomeDrawPokemonStruct\n{\n    u16 unk0;\n    u16 unk2;\n    u16 unk4;\n    u16 unk6;\n    u8 unk8;\n    u8 filler_9[3];\n    u32 unkC;\n};\nstruct PokeanmSub\n{\n    s8 unk0;\n    u8 unk1;\n};\nstruct Pokeanm\n{\n    struct PokeanmSub unk0[4];\n    u8 unk8[20];\n};\nstruct UnkStruct_02069038\n{\n    u16 unk0;\n    u16 unk2;\n    u8 unk4;\n    u8 padding;\n    struct Pokeanm anim;\n};\nstruct Evolution\n{\n    u16 method;\n    u16 param;\n    u16 target;\n};\n#define PARTY_SIZE 6\ntypedef struct Party\n{\n    int maxCount;\n    int curCount;\n    struct Pokemon mons[6];\n} Party;\nvoid ZeroMonData(struct Pokemon * pokemon);\nvoid ZeroBoxMonData(struct BoxPokemon * boxmon);\nu32 SizeOfStructPokemon(void);\nstruct Pokemon * AllocMonZeroed(HeapID heapId);\nBOOL AcquireMonLock(struct Pokemon * mon);\nBOOL ReleaseMonLock(struct Pokemon * mon, BOOL decrypt_result);\nBOOL AcquireBoxMonLock(struct BoxPokemon * mon);\nBOOL ReleaseBoxMonLock(struct BoxPokemon * mon, BOOL decrypt_result);\nvoid CreateMon(struct Pokemon * pokemon, int species, int level, int fixedIV, int hasFixedPersonality, int fixedPersonality, int otIdType, int fixedOtId);\nvoid CreateBoxMon(struct BoxPokemon * boxPokemon, int species, int level, int fixedIV, int hasFixedPersonality, int fixedPersonality, int otIdType, int fixedOtId);\nvoid CreateMonWithNature(struct Pokemon * pokemon, u16 species, u8 level, u8 fixedIv, u8 nature);\nvoid CreateMonWithGenderNatureLetter(struct Pokemon * pokemon, u16 species, u8 level, u8 fixedIv, u8 gender, u8 nature, u8 letter);\nu32 GenPersonalityByGenderAndNature(u16 species, u8 gender, u8 nature);\nvoid CreateMonWithFixedIVs(struct Pokemon * pokemon, int species, int level, int ivs, int personality);\nvoid CalcMonLevelAndStats(struct Pokemon * pokemon);\nvoid CalcMonStats(struct Pokemon * pokemon);\nu32 GetMonData();\nu32 GetBoxMonData();\nvoid SetMonData(struct Pokemon * pokemon, int attr, void * ptr);\nvoid SetBoxMonData(struct BoxPokemon * pokemon, int attr, void * ptr);\nvoid AddMonData(struct Pokemon * pokemon, int attr, int amount);\nstruct BaseStats * AllocAndLoadMonPersonal(int species, HeapID heapId);\nint GetPersonalAttr(struct BaseStats * baseStats, enum BaseStat attr);\nvoid FreeMonPersonal(struct BaseStats * personal);\nint GetMonBaseStat_HandleFormConversion(int species, int form, enum BaseStat stat_id);\nint GetMonBaseStat(int species, enum BaseStat stat_id);\nu8 GetPercentProgressTowardsNextLevel(struct Pokemon * pokemon);\nu32 CalcMonExpToNextLevel(struct Pokemon * pokemon);\nu32 GetMonBaseExperienceAtCurrentLevel(struct Pokemon * pokemon);\nu32 GetMonExpBySpeciesAndLevel(int species, int level);\nvoid LoadGrowthTable(int growthRate, u32 * table);\nu32 GetExpByGrowthRateAndLevel(int rate, int level);\nint CalcMonLevel(struct Pokemon * pokemon);\nint CalcBoxMonLevel(struct BoxPokemon * boxmon);\nint CalcLevelBySpeciesAndExp(u16 species, u32 experience);\nint CalcLevelBySpeciesAndExp_PreloadedPersonal(struct BaseStats * personal, u16 species, u32 experience);\nu8 GetBoxMonNature(struct BoxPokemon * boxmon);\nu8 GetMonNature(struct Pokemon * mon);\nu8 GetNatureFromPersonality(u32 pid);\nvoid MonApplyFriendshipMod(struct Pokemon * pokemon, u32 kind, u32 location);\nu8 GetMonGender(struct Pokemon * pokemon);\nu8 GetBoxMonGender(struct BoxPokemon * boxmon);\nu8 GetGenderBySpeciesAndPersonality(u16 species, u32 pid);\nu8 MonIsShiny(struct Pokemon * pokemon);\nu32 GenerateShinyPersonality(u32 otid);\nvoid sub_02068B70(struct SomeDrawPokemonStruct * spC, struct BoxPokemon * boxmon, u8 sp10);\nvoid sub_02068C00(struct SomeDrawPokemonStruct * spC, int species, u8 gender, u8 sp10, u8 shiny, u8 form, u32 personality);\nu8 sub_02068E14(struct Pokemon * pokemon, u32 a1);\nu8 sub_02068E1C(struct BoxPokemon * boxmon, u32 a1);\nu8 sub_02068E88(int species, u8 gender, u32 a2, u8 form, u32 pid);\nu32 GetArceusTypeByHeldItemEffect(u16 plate);\nint sub_0206AA30(int a0);\nvoid sub_02068B68(struct SomeDrawPokemonStruct * spC, struct Pokemon * pokemon, u8 sp10);\nvoid sub_02068FE0(struct SomeDrawPokemonStruct * a0, u16 a1, int a2);\nvoid sub_02069010(void * dest, int a1);\nvoid sub_02069038(u32 a0, u32 a1, u32 a2, s32 a3, u32 a4, u32 a5, u32 a6);\nvoid sub_020690AC(struct SomeDrawPokemonStruct * a0, u32 a1);\nu32 sub_020690C4(void);\nu32 sub_020690C8(void);\nu8 GetBoxMonUnownLetter(struct BoxPokemon * boxmon);\nu8 GetMonUnownLetter(struct Pokemon * pokemon);\nstruct BoxPokemon * sub_020690E4(struct Pokemon * pokemon);\nu16 GetMonEvolution(struct Party * party, struct Pokemon * pokemon, u32 context, u32 usedItem, u32 * method_ret);\nu16 ReadFromPersonalPmsNarc(u16 species);\nu16 GetEggSpecies(u16 species);\nBOOL sub_020690E8(struct Pokemon * pokemon);\nu32 sub_02069698(struct Pokemon * pokemon, u16 move);\nvoid sub_02069708(struct Pokemon * pokemon, u16 move);\nvoid sub_02069718(struct BoxPokemon * boxmon, u16 move);\nvoid MonSetMoveInSlot(struct Pokemon * pokemon, u16 move, u8 slot);\nu32 sub_02069818(struct Pokemon * pokemon, u32 * r5, u16 * sp0);\nvoid sub_020698E0(struct Pokemon * pokemon, int slot1, int slot2);\nvoid sub_020698E8(struct BoxPokemon * boxmon, int slot1, int slot2);\nvoid sub_020699A4(struct Pokemon * pokemon, u32 slot);\nvoid CopyBoxPokemonToPokemon(struct BoxPokemon * src, struct Pokemon * dest);\nu8 Party_GetMaxLevel(struct Party * party);\nu16 SpeciesToSinnohDexNo(u16 species);\nu16 SinnohDexNoToSpecies(u16 sinnoh_dex);\nvoid CopyPokemonToPokemon(struct Pokemon * src, struct Pokemon * dest);\nvoid CopyPokemonToBoxPokemon(struct Pokemon * src, struct BoxPokemon * dest);\nvoid CopyBoxPokemonToBoxPokemon(struct BoxPokemon * src, struct BoxPokemon * dest);\ns8 MonGetFlavorPreference(struct Pokemon * pokemon, int flavor);\nint Species_LoadLearnsetTable(u16 species, u32 form, u16 * dest);\nvoid Party_GivePokerusAtRandom(struct Party * party);\nvoid Party_UpdatePokerus(struct Party * party, int r5);\nvoid Party_SpreadPokerus(struct Party * party);\nBOOL Pokemon_HasPokerus(struct Pokemon * pokemon);\nBOOL Pokemon_IsImmuneToPokerus(struct Pokemon * pokemon);\nvoid Pokemon_UpdateArceusForm(struct Pokemon * pokemon);\nvoid sub_02069FB0(struct SaveChatotSoundClip *r7, u32 r5, u16 r4, s32 r6, s32 sp18, u32 sp1C, HeapID heapId);\nvoid sub_0206A014(struct Pokemon * pokemon, PlayerProfile * a1, u32 pokeball, u32 a3, u32 encounterType, HeapID heapId);\nvoid sub_0206A094(struct Pokemon * pokemon, u32 a1, u32 a2);\nBOOL sub_0206A13C(struct Pokemon * pokemon, u32 a1);\nvoid sub_0206A1C4(struct Pokemon * pokemon);\nvoid sub_0206A23C(struct Pokemon * r5, u32 personality);\nint LowestFlagNo(u32 mask);\nBOOL IsPokemonLegendaryOrMythical(u16 species);\nu16 GetLegendaryMon(u32 idx);\nBOOL sub_0206A998(struct Pokemon * pokemon);\nBOOL sub_0206A9AC(struct BoxPokemon * boxmon, PlayerProfile * sb2, HeapID heapId);\nvoid Pokemon_RemoveCapsule(struct Pokemon * pokemon);\nvoid RestoreBoxMonPP(struct BoxPokemon * boxmon);\n#define POKEDIAMOND_POKEMON_STORAGE_SYSTEM_H \n#define NUM_BOXES 18u\n#define MONS_PER_BOX 30u\n#define BOX_NAME_LENGTH 20u\n#define NUM_DEFAULT_WALLPAPERS 16u\n#define NUM_BONUS_WALLPAPERS 8u\n#define NUM_WALLPAPERS ((u32)(NUM_DEFAULT_WALLPAPERS + NUM_BONUS_WALLPAPERS))\ntypedef struct PCStorage\n{\n                  u32 curBox;\n                  struct BoxPokemon boxes[18u][30u];\n                  u16 names[18u][20u];\n                  u8 wallpapers[18u];\n                  u8 unlockedWallpapers;\n                  u8 pad_byte;\n} PCStorage;\nvoid PCStorage_Init(struct PCStorage * pc);\nu32 PCStorage_sizeof(void);\nvoid PCStorage_InitializeBoxes(struct PCStorage * pc);\nBOOL PCStorage_PlaceMonInFirstEmptySlotInAnyBox(struct PCStorage * pc, struct BoxPokemon * boxmon);\nBOOL PCStorage_PlaceMonInBoxFirstEmptySlot(struct PCStorage * pc, int boxno, struct BoxPokemon * boxmon);\nBOOL PCStorage_PlaceMonInBoxByIndexPair(struct PCStorage * pc, int boxno, int slotno, struct BoxPokemon * boxmon);\nvoid PCStorage_DeleteBoxMonByIndexPair(struct PCStorage * pc, int boxno, int slotno);\nint PCStorage_GetActiveBox(struct PCStorage * pc);\nint PCStorage_FindFirstBoxWithEmptySlot(struct PCStorage * pc);\nBOOL PCStorage_FindFirstEmptySlot(struct PCStorage * pc, int * boxno, int * slotno);\nint PCStorage_CountMonsAndEggsInAllBoxes(struct PCStorage * pc);\nvoid PCStorage_SetActiveBox(struct PCStorage * pc, int boxno);\nu8 PCStorage_GetBoxWallpaper(struct PCStorage * pc, int boxno);\nvoid PCStorage_SetBoxWallpaper(struct PCStorage * pc, int boxno, u8 wallpaper);\nvoid PCStorage_GetBoxName(struct PCStorage * pc, int boxno, struct String * ret);\nvoid PCStorage_SetBoxName(struct PCStorage * pc, int boxno, struct String * src);\nint PCStorage_CountMonsAndEggsInBox(struct PCStorage * pc, int boxno);\nint PCStorage_CountMonsInBox(struct PCStorage * pc, int boxno);\nint PCStorage_CountMonsInAllBoxes(struct PCStorage * pc);\nvoid PCStorage_SetBoxMonDataByIndexPair(struct PCStorage * pc, int boxno, int slotno, u32 attr, void * value);\nstruct BoxPokemon * PCStorage_GetMonByIndexPair(struct PCStorage * pc, int boxno, int slotno);\nvoid PCStorage_UnlockBonusWallpaper(struct PCStorage * pc, int wallpaper);\nBOOL PCStorage_IsBonusWallpaperUnlocked(struct PCStorage * pc, int wallpaper);\nint PCStorage_CountUnlockedBonusWallpapers(struct PCStorage * pc);\n#define POKEDIAMOND_TRAINER_DATA_H \nstruct TrainerMonSpecies\n{\n    u16 difficulty;\n    u16 level;\n    u16 species;\n};\nstruct TrainerMonSpeciesMoves\n{\n    u16 difficulty;\n    u16 level;\n    u16 species;\n    u16 moves[4];\n};\nstruct TrainerMonSpeciesItem\n{\n    u16 difficulty;\n    u16 level;\n    u16 species;\n    u16 item;\n};\nstruct TrainerMonSpeciesItemMoves\n{\n    u16 difficulty;\n    u16 level;\n    u16 species;\n    u16 item;\n    u16 moves[4];\n};\nunion TrainerMon\n{\n    struct TrainerMonSpecies species;\n    struct TrainerMonSpeciesMoves species_moves;\n    struct TrainerMonSpeciesItem species_item;\n    struct TrainerMonSpeciesItemMoves species_item_moves;\n};\n#define TRTYPE_MON 0\n#define TRTYPE_MON_MOVES 1\n#define TRTYPE_MON_ITEM 2\n#define TRTYPE_MON_ITEM_MOVES 3\ntypedef struct TrainerData\n{\n    u8 trainerType;\n    u8 trainerClass;\n    u8 unk_2;\n    u8 npoke;\n    u16 items[4];\n    u32 aiFlags;\n    u32 doubleBattle;\n} TrainerData;\ntypedef struct Trainer\n{\n    struct TrainerData data;\n    u16 name[7 + 1];\n    u8 padding[16];\n} Trainer;\ntypedef struct BattleSetup BattleSetup;\nvoid EnemyTrainerSet_Init(BattleSetup *setup, struct SaveData * r4, HeapID heapId);\ns32 TrainerData_GetAttr(u32 tr_idx, u32 attr_no);\nBOOL TrainerMessageWithIdPairExists(u32 pos, u32 idx, HeapID heapId);\nvoid GetTrainerMessageByIdPair(u32 pos, u32 idx, struct String * str, HeapID heapId);\nvoid TrainerData_ReadTrData(u32 idx, struct TrainerData * dest);\nvoid TrainerData_ReadTrPoke(u32 idx, union TrainerMon * dest);\nint TrainerClass_GetGenderOrTrainerCount(int a0);\nvoid CreateNPCTrainerParty(BattleSetup *setup, s32 party_id, HeapID heapId);\ntypedef struct MessageFormatAttrs\n{\n    u8 data[4];\n} MessageFormatAttrs;\ntypedef struct MessageFormatFields\n{\n    MessageFormatAttrs attrs;\n    struct String *msg;\n} MessageFormatFields;\ntypedef struct MessageFormat\n{\n    u32 count;\n    HeapID heapId;\n    MessageFormatFields *fields;\n    struct String *buffer;\n} MessageFormat;\nstruct UnkStruct_0200B870\n{\n    void * unk_0;\n    struct NNSG2dCharacterData * unk_4;\n    u16 data[16];\n    u32 unk_28;\n};\nMessageFormat * MessageFormat_New(HeapID heapId);\nMessageFormat * MessageFormat_New_Custom(u32 nstr, u32 strlen, HeapID heapId);\nvoid MessageFormat_Delete(MessageFormat *messageFormat);\nvoid MessageFormat_InitFields(MessageFormatFields *fields);\nvoid SetStringAsPlaceholder(MessageFormat *messageFormat, u32 idx, struct String * str, MessageFormatAttrs *attrs);\nvoid BufferString(MessageFormat *messageFormat, u32 idx, struct String * str, u32 a3, u32 a4, u32 a5);\nvoid BufferPlayersName(MessageFormat *messageFormat, u32 idx, PlayerProfile * data);\nvoid BufferRivalsName(MessageFormat *messageFormat, u32 idx, struct SaveData * save);\nvoid BufferFriendsName(MessageFormat *messageFormat, u32 idx, struct SaveData * save);\nvoid BufferBoxMonSpeciesName(MessageFormat *messageFormat, u32 idx, struct BoxPokemon * mon);\nvoid BufferBoxMonSpeciesNameWithArticle(MessageFormat *messageFormat, u32 idx, struct BoxPokemon * mon);\nvoid BufferSpeciesNameWithArticle(MessageFormat *messageFormat, u32 idx, u32 species);\nvoid BufferBoxMonNickname(MessageFormat *messageFormat, u32 idx, struct BoxPokemon * mon);\nvoid BufferBoxMonOTName(MessageFormat *messageFormat, u32 idx, struct BoxPokemon * mon);\nvoid BufferIntegerAsString(MessageFormat *messageFormat, u32 idx, s32 num, u32 ndigits, enum PrintingMode printingMode, BOOL whichCharset);\nvoid BufferMoveName(MessageFormat *messageFormat, u32 idx, u32 move);\nvoid BufferRibbonNameOrDesc(MessageFormat *messageFormat, u32 idx, u32 ribbon);\nvoid BufferAbilityName(MessageFormat *messageFormat, u32 idx, u32 ability);\nvoid BufferNatureName(MessageFormat *messageFormat, u32 idx, u32 nature);\nvoid BufferItemName(MessageFormat *messageFormat, u32 idx, u32 item);\nvoid BufferItemNameWithIndefArticle(MessageFormat *messageFormat, u32 idx, u32 item);\nvoid BufferItemNamePlural(MessageFormat *messageFormat, u32 idx, u32 item);\nvoid BufferPocketName(MessageFormat *messageFormat, u32 idx, u32 pocket);\nvoid BufferTypeName(MessageFormat *messageFormat, u32 idx, u32 type);\nvoid BufferStatName(MessageFormat *messageFormat, u32 idx, u32 stat);\nvoid BufferStatusName(MessageFormat *messageFormat, u32 idx, u32 status);\nvoid BufferFlavorDislikeText(MessageFormat *messageFormat, u32 idx, u32 flavor);\nvoid BufferLandmarkName(MessageFormat *messageFormat, u32 idx, u32 landmark);\nvoid BufferPoketchAppName(MessageFormat *messageFormat, u32 idx, u32 app);\nvoid BufferTrainerClassName(MessageFormat *messageFormat, u32 idx, u32 trclass);\nvoid BufferTrainerClassNameWithArticle(MessageFormat *messageFormat, u32 idx, u32 trclass);\nvoid BufferTrainerClassNameFromDataStruct(MessageFormat *messageFormat, u32 idx, Trainer * tr);\nvoid BufferTrainerName(MessageFormat *messageFormat, u32 idx, u32 msgno);\nvoid BufferTrainerNameFromDataStruct(MessageFormat *messageFormat, u32 idx, Trainer * trdata);\nvoid BufferUndergroundItemName(MessageFormat *messageFormat, u32 idx, u32 item);\nvoid BufferUndergroundItemNameWithArticle(MessageFormat *messageFormat, u32 idx, u32 item);\nvoid BufferUndergroundTrapName(MessageFormat *messageFormat, u32 idx, u32 trap);\nvoid BufferUndergroundTrapNameWithArticle(MessageFormat *messageFormat, u32 idx, u32 trap);\nvoid BufferContestJudgeName(MessageFormat *messageFormat, u32 idx, u32 judge);\nvoid BufferContestMessage(MessageFormat *messageFormat, u32 idx, u32 msg);\nvoid BufferContestMessage2(MessageFormat *messageFormat, u32 idx, u32 msg);\nvoid BufferInterviewQuestion(MessageFormat *messageFormat, u32 idx, u32 question);\nvoid BufferInterviewAnswer(MessageFormat *messageFormat, u32 idx, u32 answer);\nvoid BufferDecorationName(MessageFormat *messageFormat, u32 idx, u32 decor);\nvoid BufferDecorationNameWithArticle(MessageFormat *messageFormat, u32 idx, u32 decor);\nvoid BufferGenderSymbol(MessageFormat *messageFormat, u32 idx, u32 gender);\nvoid BufferBoxName(MessageFormat *messageFormat, u32 idx, struct PCStorage * pc, s32 boxno);\nvoid BufferGymName(MessageFormat *messageFormat, u32 idx, u32 gym);\nvoid BufferTimeOfDayName(MessageFormat *messageFormat, u32 idx, u32 time);\nvoid BufferCountryName(MessageFormat *messageFormat, u32 idx, u32 country);\nvoid BufferCityName(MessageFormat *messageFormat, u32 idx, u32 a2, u32 a3);\nvoid BufferECWord(MessageFormat *messageFormat, u32 idx, u32 a2);\nvoid BufferSealName(MessageFormat *messageFormat, u32 idx, u32 seal);\nvoid BufferSealNamePlural(MessageFormat *messageFormat, u32 idx, u32 seal);\nvoid BufferLocationName(MessageFormat *messageFormat, u32 idx, u16 location);\nvoid BufferPoffinName(MessageFormat *messageFormat, u32 idx, u32 poffin);\nvoid BufferFashionName(MessageFormat *messageFormat, u32 idx, u32 fashion);\nvoid BufferFashionNameWithArticle(MessageFormat *messageFormat, u32 idx, u32 fashion);\nvoid BufferContestBackgroundName(MessageFormat *messageFormat, u32 idx, u32 bg);\nvoid BufferGroupName(MessageFormat *messageFormat, struct SaveData * save, u32 r5, u32 idx, u32 sp28);\nvoid BufferMonthNameAbbr(MessageFormat *messageFormat, u32 idx, u32 month);\nvoid MessageFormat_UpperFirstChar(MessageFormat *messageFormat, u32 idx);\nvoid StringExpandPlaceholders(MessageFormat *messageFormat, struct String * dest, struct String * src);\nvoid MessageFormat_ResetBuffers(MessageFormat *messageFormat);\nstruct UnkStruct_0200B870 * MessagePrinter_New(u32 color1, u32 color2, u32 color3, HeapID heapId);\nvoid MessagePrinter_Delete(struct UnkStruct_0200B870 * a0);\nvoid sub_0200B9A8(struct UnkStruct_0200B870 * a0, int a1, struct Window * a2, int a3, int a4);\nvoid sub_0200B9EC(struct UnkStruct_0200B870 * string, u32 value, u32 n, enum PrintingMode mode, struct Window *window, int x, int y);\n#define POKEDIAMOND_MSG_DATA_H \ntypedef enum MsgDataLoadType {\n    MSGDATA_LOAD_DIRECT,\n    MSGDATA_LOAD_LAZY,\n} MsgDataLoadType;\nstruct MsgDataAlloc\n{\n    u32 offset;\n    u32 length;\n};\nstruct MsgDataTable\n{\n    u16 count;\n    u16 key;\n    struct MsgDataAlloc alloc[1];\n};\ntypedef struct MsgData\n{\n    u16 type;\n    u16 heapId;\n    u16 narc_id;\n    u16 file_id;\n    union {\n        struct MsgDataTable * raw;\n        NARC * narc;\n    } data;\n} MsgData;\nvoid ReadMsgData_NewNarc_ExistingString(NarcId narc_id, u32 group, u32 num, HeapID heapId, struct String * dest);\nstruct MsgData * NewMsgDataFromNarc(MsgDataLoadType type, NarcId narcId, s32 msgId, HeapID heapId);\nvoid DestroyMsgData(struct MsgData *);\nstruct String * ReadMsgData_NewNarc_NewString(NarcId narc_id, u32 group, u32 num, HeapID heapId);\nvoid ReadMsgDataIntoString(struct MsgData * msgData, u32 msg_no, struct String * dest);\nstruct String * NewString_ReadMsgData(struct MsgData *, u32);\nu16 MsgDataGetCount(struct MsgData * msgData);\nvoid ReadMsgDataIntoU16Array(struct MsgData * msgData, u32 msg_no, u16 * dest);\nvoid GetSpeciesNameIntoArray(u16 species, HeapID heapId, u16 * dest);\nstruct String * ReadMsgData_ExpandPlaceholders(MessageFormat *messageFormat, struct MsgData * msgData, u32 msgno, HeapID heapId);\nstruct String * GetMoveName(u32 move, HeapID heapId);\nstruct String * GetSpeciesName(u16 species, HeapID heapId);\ntypedef struct BlackoutScreenEnvironment {\n    s32 state;\n    FieldSystem *fieldSystem;\n    BgConfig *bgConfig;\n    Window window;\n    MsgData *msgData;\n    MessageFormat *msgFmt;\n} BlackoutScreenEnvironment;\n#define POKEDIAMOND_CONSTANTS_MAPS_H \n#define MAP_EVERYWHERE 0\n#define MAP_NOTHING 1\n#define MAP_UG 2\n#define MAP_C01 3\n#define MAP_C01FS0101 4\n#define MAP_C01GYM0101 5\n#define MAP_C01PC0101 6\n#define MAP_C01PC0102 7\n#define MAP_C01R0101 8\n#define MAP_C01R0102 9\n#define MAP_C01R0103 10\n#define MAP_C01R0201 11\n#define MAP_C01R0202 12\n#define MAP_C01R0203 13\n#define MAP_C01R0204 14\n#define MAP_C01R0205 15\n#define MAP_C01R0206 16\n#define MAP_C01R0207 17\n#define MAP_C01R0208 18\n#define MAP_C01R0301 19\n#define MAP_C01R0302 20\n#define MAP_C01R0303 21\n#define MAP_C01R0304 22\n#define MAP_C01R0401 23\n#define MAP_C01R0501 24\n#define MAP_C01R0502 25\n#define MAP_C01R0503 26\n#define MAP_C01R0504 27\n#define MAP_C01R0601 28\n#define MAP_C01R0701 29\n#define MAP_C01R0801 30\n#define MAP_C01R0901 31\n#define MAP_C01R1001 32\n#define MAP_C02 33\n#define MAP_C02FS0101 34\n#define MAP_C02GYM0101 35\n#define MAP_C02PC0101 36\n#define MAP_C02PC0102 37\n#define MAP_C02R0101 38\n#define MAP_C02R0102 39\n#define MAP_C02R0103 40\n#define MAP_C02R0201 41\n#define MAP_C02R0301 42\n#define MAP_C02R0401 43\n#define MAP_C02R0501 44\n#define MAP_C03 45\n#define MAP_C03FS0101 46\n#define MAP_C03GYM0101 47\n#define MAP_C03PC0101 48\n#define MAP_C03PC0102 49\n#define MAP_C03R0101 50\n#define MAP_C03R0102 51\n#define MAP_C03R0103 52\n#define MAP_C03R0104 53\n#define MAP_C03R0201 54\n#define MAP_C03R0202 55\n#define MAP_C03R0203 56\n#define MAP_C03R0204 57\n#define MAP_C03R0301 58\n#define MAP_C03R0401 59\n#define MAP_C03R0501 60\n#define MAP_C03R0601 61\n#define MAP_C03R0602 62\n#define MAP_C03R0603 63\n#define MAP_C03R0701 64\n#define MAP_C04 65\n#define MAP_C04FS0101 66\n#define MAP_C04GYM0101 67\n#define MAP_C04GYM0102 68\n#define MAP_C04PC0101 69\n#define MAP_C04PC0102 70\n#define MAP_C04R0101 71\n#define MAP_C04R0201 72\n#define MAP_C04R0202 73\n#define MAP_C04R0203 74\n#define MAP_C04R0204 75\n#define MAP_C04R0301 76\n#define MAP_C04R0302 77\n#define MAP_C04R0303 78\n#define MAP_C04R0304 79\n#define MAP_C04R0401 80\n#define MAP_C04R0501 81\n#define MAP_C04R0601 82\n#define MAP_C04R0701 83\n#define MAP_C04R0801 84\n#define MAP_C04R0901 85\n#define MAP_C05 86\n#define MAP_C05FS0101 87\n#define MAP_C05GYM0101 88\n#define MAP_C05GYM0102 89\n#define MAP_C05GYM0103 90\n#define MAP_C05GYM0104 91\n#define MAP_C05GYM0105 92\n#define MAP_C05GYM0106 93\n#define MAP_C05GYM0107 94\n#define MAP_C05GYM0108 95\n#define MAP_C05GYM0109 96\n#define MAP_C05GYM0110 97\n#define MAP_C05GYM0111 98\n#define MAP_C05GYM0112 99\n#define MAP_C05GYM0113 100\n#define MAP_C05PC0101 101\n#define MAP_C05PC0102 102\n#define MAP_C05R0101 103\n#define MAP_C05R0102 104\n#define MAP_C05R0103 105\n#define MAP_C05R0201 106\n#define MAP_C05R0301 107\n#define MAP_C05R0401 108\n#define MAP_C05R0501 109\n#define MAP_C05R0601 110\n#define MAP_C05R0701 111\n#define MAP_C05R0801 112\n#define MAP_C05R0802 113\n#define MAP_C05R0803 114\n#define MAP_C05R0901 115\n#define MAP_C05R1001 116\n#define MAP_C05R1101 117\n#define MAP_C05R1102 118\n#define MAP_C05R1201 119\n#define MAP_C06 120\n#define MAP_C06FS0101 121\n#define MAP_C06GYM0101 122\n#define MAP_C06PC0101 123\n#define MAP_C06PC0102 124\n#define MAP_C06R0101 125\n#define MAP_C06R0102 126\n#define MAP_C06R0201 127\n#define MAP_C06R0301 128\n#define MAP_C06R0401 129\n#define MAP_C06R0501 130\n#define MAP_C06R0601 131\n#define MAP_C07 132\n#define MAP_C07GYM0101 133\n#define MAP_C07PC0101 134\n#define MAP_C07PC0102 135\n#define MAP_C07R0101 136\n#define MAP_C07R0201 137\n#define MAP_C07R0202 138\n#define MAP_C07R0203 139\n#define MAP_C07R0204 140\n#define MAP_C07R0205 141\n#define MAP_C07R0206 142\n#define MAP_C07R0301 143\n#define MAP_C07R0401 144\n#define MAP_C07R0501 145\n#define MAP_C07R0601 146\n#define MAP_C07R0701 147\n#define MAP_C07R0801 148\n#define MAP_C07R0901 149\n#define MAP_C08 150\n#define MAP_C08PC0101 151\n#define MAP_C08PC0102 152\n#define MAP_C08FS0101 153\n#define MAP_C08GYM0101 154\n#define MAP_C08GYM0102 155\n#define MAP_C08GYM0103 156\n#define MAP_C08R0101 157\n#define MAP_C08R0201 158\n#define MAP_C08R0301 159\n#define MAP_C08R0401 160\n#define MAP_C08R0501 161\n#define MAP_C08R0601 162\n#define MAP_C08R0701 163\n#define MAP_C08R0801 164\n#define MAP_C09 165\n#define MAP_C09FS0101 166\n#define MAP_C09GYM0101 167\n#define MAP_C09PC0101 168\n#define MAP_C09PC0102 169\n#define MAP_C09R0101 170\n#define MAP_C09R0201 171\n#define MAP_C10 172\n#define MAP_C10PC0101 173\n#define MAP_C10PC0102 174\n#define MAP_C10R0101 175\n#define MAP_C10R0102 176\n#define MAP_C10R0103 177\n#define MAP_C10R0104 178\n#define MAP_C10R0105 179\n#define MAP_C10R0106 180\n#define MAP_C10R0107 181\n#define MAP_C10R0108 182\n#define MAP_C10R0109 183\n#define MAP_C10R0110 184\n#define MAP_C10R0111 185\n#define MAP_C10R0112 186\n#define MAP_C10R0113 187\n#define MAP_C11 188\n#define MAP_C11PC0101 189\n#define MAP_C11PC0102 190\n#define MAP_C11FS0101 191\n#define MAP_C11R0101 192\n#define MAP_C11R0201 193\n#define MAP_C11R0301 194\n#define MAP_C11R0401 195\n#define MAP_C11R0501 196\n#define MAP_D01 197\n#define MAP_D01R0101 198\n#define MAP_D01R0102 199\n#define MAP_D02 200\n#define MAP_D02R0101 201\n#define MAP_D03 202\n#define MAP_D03R0101 203\n#define MAP_D04 204\n#define MAP_D04R0101 205\n#define MAP_D05 206\n#define MAP_D05R0101 207\n#define MAP_D05R0102 208\n#define MAP_D05R0103 209\n#define MAP_D05R0104 210\n#define MAP_D05R0105 211\n#define MAP_D05R0106 212\n#define MAP_D05R0107 213\n#define MAP_D05R0108 214\n#define MAP_D05R0109 215\n#define MAP_D05R0110 216\n#define MAP_D05R0111 217\n#define MAP_D05R0112 218\n#define MAP_D05R0113 219\n#define MAP_D05R0114 220\n#define MAP_D05R0115 221\n#define MAP_D06 222\n#define MAP_D06R0101 223\n#define MAP_D07 224\n#define MAP_D07R0101 225\n#define MAP_D07R0102 226\n#define MAP_D07R0103 227\n#define MAP_D07R0104 228\n#define MAP_D07R0105 229\n#define MAP_D07R0106 230\n#define MAP_D07R0107 231\n#define MAP_D07R0108 232\n#define MAP_D07R0109 233\n#define MAP_D07R0110 234\n#define MAP_D07R0111 235\n#define MAP_D07R0112 236\n#define MAP_D07R0113 237\n#define MAP_D07R0114 238\n#define MAP_D07R0115 239\n#define MAP_D07R0116 240\n#define MAP_D07R0117 241\n#define MAP_D07R0118 242\n#define MAP_D09 243\n#define MAP_D09R0101 244\n#define MAP_D09R0102 245\n#define MAP_D09R0103 246\n#define MAP_D09R0104 247\n#define MAP_D09R0105 248\n#define MAP_D09R0106 249\n#define MAP_D10 250\n#define MAP_D10R0101 251\n#define MAP_D11 252\n#define MAP_D11R0101 253\n#define MAP_D12R0101 254\n#define MAP_D13 255\n#define MAP_D13R0101 256\n#define MAP_D13R0102 257\n#define MAP_D14R0101 258\n#define MAP_D14R0102 259\n#define MAP_D15 260\n#define MAP_D15R0101 261\n#define MAP_D16 262\n#define MAP_D16R0101 263\n#define MAP_D16R0102 264\n#define MAP_D16R0103 265\n#define MAP_D17 266\n#define MAP_D17R0101 267\n#define MAP_D17R0102 268\n#define MAP_D17R0103 269\n#define MAP_D17R0104 270\n#define MAP_D17R0105 271\n#define MAP_D17R0106 272\n#define MAP_D17R0107 273\n#define MAP_D18 274\n#define MAP_D18R0101 275\n#define MAP_D19A 276\n#define MAP_D19B 277\n#define MAP_D20R0101 278\n#define MAP_D20R0102 279\n#define MAP_D20R0103 280\n#define MAP_D20R0104 281\n#define MAP_D20R0105 282\n#define MAP_D20R0106 283\n#define MAP_D21R0101 284\n#define MAP_D21R0102 285\n#define MAP_D22R0101 286\n#define MAP_D23R0101 287\n#define MAP_D24 288\n#define MAP_D24R0101 289\n#define MAP_D24R0102 290\n#define MAP_D24R0103 291\n#define MAP_D24R0104 292\n#define MAP_D24R0105 293\n#define MAP_D24R0106 294\n#define MAP_D25R0101 295\n#define MAP_D25R0102 296\n#define MAP_D25R0103 297\n#define MAP_D25R0104 298\n#define MAP_D25R0105 299\n#define MAP_D25R0106 300\n#define MAP_D25R0107 301\n#define MAP_D25R0108 302\n#define MAP_D25R0109 303\n#define MAP_D25R1001 304\n#define MAP_D26R0101 305\n#define MAP_D26R0102 306\n#define MAP_D26R0103 307\n#define MAP_D26R0104 308\n#define MAP_D26R0105 309\n#define MAP_D26R0106 310\n#define MAP_D27R0101 311\n#define MAP_D27R0102 312\n#define MAP_D27R0103 313\n#define MAP_D28R0101 314\n#define MAP_D28R0102 315\n#define MAP_D28R0103 316\n#define MAP_D29R0101 317\n#define MAP_D29R0102 318\n#define MAP_D29R0103 319\n#define MAP_D30 320\n#define MAP_D30R0101 321\n#define MAP_D31 322\n#define MAP_D31R0101 323\n#define MAP_D31R0102 324\n#define MAP_D31R0103 325\n#define MAP_D31R0201 326\n#define MAP_D31R0202 327\n#define MAP_D31R0203 328\n#define MAP_D31R0204 329\n#define MAP_D31R0205 330\n#define MAP_D31R0206 331\n#define MAP_DIRECT2 332\n#define MAP_DIRECT4 333\n#define MAP_L01 334\n#define MAP_L01R0101 335\n#define MAP_L02 336\n#define MAP_L02R0101 337\n#define MAP_L02R0201 338\n#define MAP_L02R0301 339\n#define MAP_L03 340\n#define MAP_L04 341\n#define MAP_R201 342\n#define MAP_R202 343\n#define MAP_R203 344\n#define MAP_R204A 345\n#define MAP_R204B 346\n#define MAP_R205A 347\n#define MAP_R205AR0101 348\n#define MAP_R205B 349\n#define MAP_R206 350\n#define MAP_R206R0101 351\n#define MAP_R206R0201 352\n#define MAP_R207 353\n#define MAP_R208 354\n#define MAP_R208R0101 355\n#define MAP_R209 356\n#define MAP_R209R0101 357\n#define MAP_R209R0102 358\n#define MAP_R209R0103 359\n#define MAP_R209R0104 360\n#define MAP_R209R0105 361\n#define MAP_R210A 362\n#define MAP_R210B 363\n#define MAP_R210BR0101 364\n#define MAP_R211A 365\n#define MAP_R211B 366\n#define MAP_R212A 367\n#define MAP_R212AR0101 368\n#define MAP_R212AR0102 369\n#define MAP_R212AR0103 370\n#define MAP_R212B 371\n#define MAP_R212BR0101 372\n#define MAP_R213 373\n#define MAP_R213R0101 374\n#define MAP_R213R0201 375\n#define MAP_R213R0301 376\n#define MAP_R213R0401 377\n#define MAP_R213R0501 378\n#define MAP_R213R0601 379\n#define MAP_R214 380\n#define MAP_R214R0101 381\n#define MAP_R215 382\n#define MAP_R216 383\n#define MAP_R216R0101 384\n#define MAP_R217 385\n#define MAP_R217R0101 386\n#define MAP_R217R0201 387\n#define MAP_R218 388\n#define MAP_R218R0101 389\n#define MAP_R218R0201 390\n#define MAP_R219 391\n#define MAP_R221 392\n#define MAP_R221R0101 393\n#define MAP_R221R0201 394\n#define MAP_R222 395\n#define MAP_R222R0101 396\n#define MAP_R222R0201 397\n#define MAP_R222R0301 398\n#define MAP_R224 399\n#define MAP_R225 400\n#define MAP_R226A 401\n#define MAP_R226B 402\n#define MAP_R227 403\n#define MAP_R227A 404\n#define MAP_R227B 405\n#define MAP_R228 406\n#define MAP_R229 407\n#define MAP_R230 408\n#define MAP_R232 409\n#define MAP_RECORD 410\n#define MAP_T01 411\n#define MAP_T01R0101 412\n#define MAP_T01R0102 413\n#define MAP_T01R0201 414\n#define MAP_T01R0202 415\n#define MAP_T01R0301 416\n#define MAP_T01R0401 417\n#define MAP_T02 418\n#define MAP_T02FS0101 419\n#define MAP_T02PC0101 420\n#define MAP_T02PC0102 421\n#define MAP_T02R0101 422\n#define MAP_T02R0201 423\n#define MAP_T02R0202 424\n#define MAP_T02R0301 425\n#define MAP_T03 426\n#define MAP_T03FS0101 427\n#define MAP_T03PC0101 428\n#define MAP_T03PC0102 429\n#define MAP_T03R0101 430\n#define MAP_T03R0201 431\n#define MAP_T03R0301 432\n#define MAP_T04 433\n#define MAP_T04FS0101 434\n#define MAP_T04PC0101 435\n#define MAP_T04PC0102 436\n#define MAP_T04R0101 437\n#define MAP_T04R0201 438\n#define MAP_T04R0301 439\n#define MAP_T04R0401 440\n#define MAP_T04R0501 441\n#define MAP_T05 442\n#define MAP_T05PC0101 443\n#define MAP_T05PC0102 444\n#define MAP_T05R0101 445\n#define MAP_T05R0201 446\n#define MAP_T05R0301 447\n#define MAP_T05R0401 448\n#define MAP_T05R0501 449\n#define MAP_T06 450\n#define MAP_T06FS0101 451\n#define MAP_T06PC0101 452\n#define MAP_T06PC0102 453\n#define MAP_T06R0101 454\n#define MAP_T06R0201 455\n#define MAP_T06R0301 456\n#define MAP_T07 457\n#define MAP_T07FS0101 458\n#define MAP_T07PC0101 459\n#define MAP_T07PC0102 460\n#define MAP_T07R0101 461\n#define MAP_T07R0102 462\n#define MAP_T07R0103 463\n#define MAP_T07R0201 464\n#define MAP_T07R0301 465\n#define MAP_UNION 466\n#define MAP_W220 467\n#define MAP_W223 468\n#define MAP_W226 469\n#define MAP_W229 470\n#define MAP_W230 471\n#define MAP_W231 472\n#define MAP_W233 473\n#define MAP_C01PC0103 474\n#define MAP_C02PC0103 475\n#define MAP_C03PC0103 476\n#define MAP_C04PC0103 477\n#define MAP_C05PC0103 478\n#define MAP_C06PC0103 479\n#define MAP_C07PC0103 480\n#define MAP_C08PC0103 481\n#define MAP_C09PC0103 482\n#define MAP_C10PC0103 483\n#define MAP_C11PC0103 484\n#define MAP_T02PC0103 485\n#define MAP_T03PC0103 486\n#define MAP_T04PC0103 487\n#define MAP_T05PC0103 488\n#define MAP_T06PC0103 489\n#define MAP_T07PC0103 490\n#define MAP_C02R0601 491\n#define MAP_R210AR0101 492\n#define MAP_D31R0207 493\n#define MAP_D26R0107 494\n#define MAP_C10R0114 495\n#define MAP_C10R0115 496\n#define MAP_D26R0108 497\n#define MAP_R225R0101 498\n#define MAP_W226R0101 499\n#define MAP_R227R0101 500\n#define MAP_R228R0101 501\n#define MAP_R228R0201 502\n#define MAP_R228R0301 503\n#define MAP_D06R0201 504\n#define MAP_D06R0202 505\n#define MAP_D06R0203 506\n#define MAP_D06R0204 507\n#define MAP_D06R0205 508\n#define MAP_D06R0206 509\n#define MAP_D05R0116 510\n#define MAP_D05R0117 511\n#define MAP_D22R0102 512\n#define MAP_D22R0103 513\n#define MAP_D24R0201 514\n#define MAP_D07R0119 515\n#define MAP_C08R0802 516\n#define MAP_C01R0802 517\n#define MAP_D17R0108 518\n#define MAP_D17R0109 519\n#define MAP_D17R0110 520\n#define MAP_D17R0111 521\n#define MAP_D17R0112 522\n#define MAP_D17R0113 523\n#define MAP_D17R0114 524\n#define MAP_D17R0115 525\n#define MAP_D17R0116 526\n#define MAP_D17R0117 527\n#define MAP_D17R0118 528\n#define MAP_D17R0119 529\n#define MAP_D17R0120 530\n#define MAP_D17R0121 531\n#define MAP_D17R0122 532\n#define MAP_D17R0123 533\n#define MAP_D17R0124 534\n#define MAP_D17R0125 535\n#define MAP_D17R0126 536\n#define MAP_D17R0127 537\n#define MAP_D17R0128 538\n#define MAP_D17R0129 539\n#define MAP_D17R0130 540\n#define MAP_D17R0131 541\n#define MAP_D17R0132 542\n#define MAP_D17R0133 543\n#define MAP_D17R0134 544\n#define MAP_D17R0135 545\n#define MAP_D17R0136 546\n#define MAP_D17R0137 547\n#define MAP_D17R0138 548\n#define MAP_D17R0139 549\n#define MAP_D17R0140 550\n#define MAP_D17R0141 551\n#define MAP_D17R0142 552\n#define MAP_D17R0143 553\n#define MAP_D17R0144 554\n#define MAP_D17R0145 555\n#define MAP_D17R0146 556\n#define MAP_D17R0147 557\n#define MAP_C05R1103 558\n#define POKEDIAMOND_CONSTANTS_RGB_H \n#define RGB(r,g,b) (GX_RGB(r, g, b))\n#define RGB_BLACK (RGB(0, 0, 0))\n#define RGB_WHITE (RGB(31, 31, 31))\n#define NARC_MSG_NAIX_ \nenum {\n NARC_msg_narc_0000_bin = 0,\n NARC_msg_narc_0001_bin = 1,\n NARC_msg_narc_0002_bin = 2,\n NARC_msg_narc_0003_bin = 3,\n NARC_msg_narc_0004_bin = 4,\n NARC_msg_narc_0005_bin = 5,\n NARC_msg_narc_0006_bin = 6,\n NARC_msg_narc_0007_bin = 7,\n NARC_msg_narc_0008_bin = 8,\n NARC_msg_narc_0009_bin = 9,\n NARC_msg_narc_0010_bin = 10,\n NARC_msg_narc_0011_bin = 11,\n NARC_msg_narc_0012_bin = 12,\n NARC_msg_narc_0013_bin = 13,\n NARC_msg_narc_0014_bin = 14,\n NARC_msg_narc_0015_bin = 15,\n NARC_msg_narc_0016_bin = 16,\n NARC_msg_narc_0017_bin = 17,\n NARC_msg_narc_0018_bin = 18,\n NARC_msg_narc_0019_bin = 19,\n NARC_msg_narc_0020_bin = 20,\n NARC_msg_narc_0021_bin = 21,\n NARC_msg_narc_0022_bin = 22,\n NARC_msg_narc_0023_bin = 23,\n NARC_msg_narc_0024_bin = 24,\n NARC_msg_narc_0025_bin = 25,\n NARC_msg_narc_0026_bin = 26,\n NARC_msg_narc_0027_bin = 27,\n NARC_msg_narc_0028_bin = 28,\n NARC_msg_narc_0029_bin = 29,\n NARC_msg_narc_0030_bin = 30,\n NARC_msg_narc_0031_bin = 31,\n NARC_msg_narc_0032_bin = 32,\n NARC_msg_narc_0033_bin = 33,\n NARC_msg_narc_0034_bin = 34,\n NARC_msg_narc_0035_bin = 35,\n NARC_msg_narc_0036_bin = 36,\n NARC_msg_narc_0037_bin = 37,\n NARC_msg_narc_0038_bin = 38,\n NARC_msg_narc_0039_bin = 39,\n NARC_msg_narc_0040_bin = 40,\n NARC_msg_narc_0041_bin = 41,\n NARC_msg_narc_0042_bin = 42,\n NARC_msg_narc_0043_bin = 43,\n NARC_msg_narc_0044_bin = 44,\n NARC_msg_narc_0045_bin = 45,\n NARC_msg_narc_0046_bin = 46,\n NARC_msg_narc_0047_bin = 47,\n NARC_msg_narc_0048_bin = 48,\n NARC_msg_narc_0049_bin = 49,\n NARC_msg_narc_0050_bin = 50,\n NARC_msg_narc_0051_bin = 51,\n NARC_msg_narc_0052_bin = 52,\n NARC_msg_narc_0053_bin = 53,\n NARC_msg_narc_0054_bin = 54,\n NARC_msg_narc_0055_bin = 55,\n NARC_msg_narc_0056_bin = 56,\n NARC_msg_narc_0057_bin = 57,\n NARC_msg_narc_0058_bin = 58,\n NARC_msg_narc_0059_bin = 59,\n NARC_msg_narc_0060_bin = 60,\n NARC_msg_narc_0061_bin = 61,\n NARC_msg_narc_0062_bin = 62,\n NARC_msg_narc_0063_bin = 63,\n NARC_msg_narc_0064_bin = 64,\n NARC_msg_narc_0065_bin = 65,\n NARC_msg_narc_0066_bin = 66,\n NARC_msg_narc_0067_bin = 67,\n NARC_msg_narc_0068_bin = 68,\n NARC_msg_narc_0069_bin = 69,\n NARC_msg_narc_0070_bin = 70,\n NARC_msg_narc_0071_bin = 71,\n NARC_msg_narc_0072_bin = 72,\n NARC_msg_narc_0073_bin = 73,\n NARC_msg_narc_0074_bin = 74,\n NARC_msg_narc_0075_bin = 75,\n NARC_msg_narc_0076_bin = 76,\n NARC_msg_narc_0077_bin = 77,\n NARC_msg_narc_0078_bin = 78,\n NARC_msg_narc_0079_bin = 79,\n NARC_msg_narc_0080_bin = 80,\n NARC_msg_narc_0081_bin = 81,\n NARC_msg_narc_0082_bin = 82,\n NARC_msg_narc_0083_bin = 83,\n NARC_msg_narc_0084_bin = 84,\n NARC_msg_narc_0085_bin = 85,\n NARC_msg_narc_0086_bin = 86,\n NARC_msg_narc_0087_bin = 87,\n NARC_msg_narc_0088_bin = 88,\n NARC_msg_narc_0089_bin = 89,\n NARC_msg_narc_0090_bin = 90,\n NARC_msg_narc_0091_bin = 91,\n NARC_msg_narc_0092_bin = 92,\n NARC_msg_narc_0093_bin = 93,\n NARC_msg_narc_0094_bin = 94,\n NARC_msg_narc_0095_bin = 95,\n NARC_msg_narc_0096_bin = 96,\n NARC_msg_narc_0097_bin = 97,\n NARC_msg_narc_0098_bin = 98,\n NARC_msg_narc_0099_bin = 99,\n NARC_msg_narc_0100_bin = 100,\n NARC_msg_narc_0101_bin = 101,\n NARC_msg_narc_0102_bin = 102,\n NARC_msg_narc_0103_bin = 103,\n NARC_msg_narc_0104_bin = 104,\n NARC_msg_narc_0105_bin = 105,\n NARC_msg_narc_0106_bin = 106,\n NARC_msg_narc_0107_bin = 107,\n NARC_msg_narc_0108_bin = 108,\n NARC_msg_narc_0109_bin = 109,\n NARC_msg_narc_0110_bin = 110,\n NARC_msg_narc_0111_bin = 111,\n NARC_msg_narc_0112_bin = 112,\n NARC_msg_narc_0113_bin = 113,\n NARC_msg_narc_0114_bin = 114,\n NARC_msg_narc_0115_bin = 115,\n NARC_msg_narc_0116_bin = 116,\n NARC_msg_narc_0117_bin = 117,\n NARC_msg_narc_0118_bin = 118,\n NARC_msg_narc_0119_bin = 119,\n NARC_msg_narc_0120_bin = 120,\n NARC_msg_narc_0121_bin = 121,\n NARC_msg_narc_0122_bin = 122,\n NARC_msg_narc_0123_bin = 123,\n NARC_msg_narc_0124_bin = 124,\n NARC_msg_narc_0125_bin = 125,\n NARC_msg_narc_0126_bin = 126,\n NARC_msg_narc_0127_bin = 127,\n NARC_msg_narc_0128_bin = 128,\n NARC_msg_narc_0129_bin = 129,\n NARC_msg_narc_0130_bin = 130,\n NARC_msg_narc_0131_bin = 131,\n NARC_msg_narc_0132_bin = 132,\n NARC_msg_narc_0133_bin = 133,\n NARC_msg_narc_0134_bin = 134,\n NARC_msg_narc_0135_bin = 135,\n NARC_msg_narc_0136_bin = 136,\n NARC_msg_narc_0137_bin = 137,\n NARC_msg_narc_0138_bin = 138,\n NARC_msg_narc_0139_bin = 139,\n NARC_msg_narc_0140_bin = 140,\n NARC_msg_narc_0141_bin = 141,\n NARC_msg_narc_0142_bin = 142,\n NARC_msg_narc_0143_bin = 143,\n NARC_msg_narc_0144_bin = 144,\n NARC_msg_narc_0145_bin = 145,\n NARC_msg_narc_0146_bin = 146,\n NARC_msg_narc_0147_bin = 147,\n NARC_msg_narc_0148_bin = 148,\n NARC_msg_narc_0149_bin = 149,\n NARC_msg_narc_0150_bin = 150,\n NARC_msg_narc_0151_bin = 151,\n NARC_msg_narc_0152_bin = 152,\n NARC_msg_narc_0153_bin = 153,\n NARC_msg_narc_0154_bin = 154,\n NARC_msg_narc_0155_bin = 155,\n NARC_msg_narc_0156_bin = 156,\n NARC_msg_narc_0157_bin = 157,\n NARC_msg_narc_0158_bin = 158,\n NARC_msg_narc_0159_bin = 159,\n NARC_msg_narc_0160_bin = 160,\n NARC_msg_narc_0161_bin = 161,\n NARC_msg_narc_0162_bin = 162,\n NARC_msg_narc_0163_bin = 163,\n NARC_msg_narc_0164_bin = 164,\n NARC_msg_narc_0165_bin = 165,\n NARC_msg_narc_0166_bin = 166,\n NARC_msg_narc_0167_bin = 167,\n NARC_msg_narc_0168_bin = 168,\n NARC_msg_narc_0169_bin = 169,\n NARC_msg_narc_0170_bin = 170,\n NARC_msg_narc_0171_bin = 171,\n NARC_msg_narc_0172_bin = 172,\n NARC_msg_narc_0173_bin = 173,\n NARC_msg_narc_0174_bin = 174,\n NARC_msg_narc_0175_bin = 175,\n NARC_msg_narc_0176_bin = 176,\n NARC_msg_narc_0177_bin = 177,\n NARC_msg_narc_0178_bin = 178,\n NARC_msg_narc_0179_bin = 179,\n NARC_msg_narc_0180_bin = 180,\n NARC_msg_narc_0181_bin = 181,\n NARC_msg_narc_0182_bin = 182,\n NARC_msg_narc_0183_bin = 183,\n NARC_msg_narc_0184_bin = 184,\n NARC_msg_narc_0185_bin = 185,\n NARC_msg_narc_0186_bin = 186,\n NARC_msg_narc_0187_bin = 187,\n NARC_msg_narc_0188_bin = 188,\n NARC_msg_narc_0189_bin = 189,\n NARC_msg_narc_0190_bin = 190,\n NARC_msg_narc_0191_bin = 191,\n NARC_msg_narc_0192_bin = 192,\n NARC_msg_narc_0193_bin = 193,\n NARC_msg_narc_0194_bin = 194,\n NARC_msg_narc_0195_bin = 195,\n NARC_msg_narc_0196_bin = 196,\n NARC_msg_narc_0197_bin = 197,\n NARC_msg_narc_0198_bin = 198,\n NARC_msg_narc_0199_bin = 199,\n NARC_msg_narc_0200_bin = 200,\n NARC_msg_narc_0201_bin = 201,\n NARC_msg_narc_0202_bin = 202,\n NARC_msg_narc_0203_bin = 203,\n NARC_msg_narc_0204_bin = 204,\n NARC_msg_narc_0205_bin = 205,\n NARC_msg_narc_0206_bin = 206,\n NARC_msg_narc_0207_bin = 207,\n NARC_msg_narc_0208_bin = 208,\n NARC_msg_narc_0209_bin = 209,\n NARC_msg_narc_0210_bin = 210,\n NARC_msg_narc_0211_bin = 211,\n NARC_msg_narc_0212_bin = 212,\n NARC_msg_narc_0213_bin = 213,\n NARC_msg_narc_0214_bin = 214,\n NARC_msg_narc_0215_bin = 215,\n NARC_msg_narc_0216_bin = 216,\n NARC_msg_narc_0217_bin = 217,\n NARC_msg_narc_0218_bin = 218,\n NARC_msg_narc_0219_bin = 219,\n NARC_msg_narc_0220_bin = 220,\n NARC_msg_narc_0221_bin = 221,\n NARC_msg_narc_0222_bin = 222,\n NARC_msg_narc_0223_bin = 223,\n NARC_msg_narc_0224_bin = 224,\n NARC_msg_narc_0225_bin = 225,\n NARC_msg_narc_0226_bin = 226,\n NARC_msg_narc_0227_bin = 227,\n NARC_msg_narc_0228_bin = 228,\n NARC_msg_narc_0229_bin = 229,\n NARC_msg_narc_0230_bin = 230,\n NARC_msg_narc_0231_bin = 231,\n NARC_msg_narc_0232_bin = 232,\n NARC_msg_narc_0233_bin = 233,\n NARC_msg_narc_0234_bin = 234,\n NARC_msg_narc_0235_bin = 235,\n NARC_msg_narc_0236_bin = 236,\n NARC_msg_narc_0237_bin = 237,\n NARC_msg_narc_0238_bin = 238,\n NARC_msg_narc_0239_bin = 239,\n NARC_msg_narc_0240_bin = 240,\n NARC_msg_narc_0241_bin = 241,\n NARC_msg_narc_0242_bin = 242,\n NARC_msg_narc_0243_bin = 243,\n NARC_msg_narc_0244_bin = 244,\n NARC_msg_narc_0245_bin = 245,\n NARC_msg_narc_0246_bin = 246,\n NARC_msg_narc_0247_bin = 247,\n NARC_msg_narc_0248_bin = 248,\n NARC_msg_narc_0249_bin = 249,\n NARC_msg_narc_0250_bin = 250,\n NARC_msg_narc_0251_bin = 251,\n NARC_msg_narc_0252_bin = 252,\n NARC_msg_narc_0253_bin = 253,\n NARC_msg_narc_0254_bin = 254,\n NARC_msg_narc_0255_bin = 255,\n NARC_msg_narc_0256_bin = 256,\n NARC_msg_narc_0257_bin = 257,\n NARC_msg_narc_0258_bin = 258,\n NARC_msg_narc_0259_bin = 259,\n NARC_msg_narc_0260_bin = 260,\n NARC_msg_narc_0261_bin = 261,\n NARC_msg_narc_0262_bin = 262,\n NARC_msg_narc_0263_bin = 263,\n NARC_msg_narc_0264_bin = 264,\n NARC_msg_narc_0265_bin = 265,\n NARC_msg_narc_0266_bin = 266,\n NARC_msg_narc_0267_bin = 267,\n NARC_msg_narc_0268_bin = 268,\n NARC_msg_narc_0269_bin = 269,\n NARC_msg_narc_0270_bin = 270,\n NARC_msg_narc_0271_bin = 271,\n NARC_msg_narc_0272_bin = 272,\n NARC_msg_narc_0273_bin = 273,\n NARC_msg_narc_0274_bin = 274,\n NARC_msg_narc_0275_bin = 275,\n NARC_msg_narc_0276_bin = 276,\n NARC_msg_narc_0277_bin = 277,\n NARC_msg_narc_0278_bin = 278,\n NARC_msg_narc_0279_bin = 279,\n NARC_msg_narc_0280_bin = 280,\n NARC_msg_narc_0281_bin = 281,\n NARC_msg_narc_0282_bin = 282,\n NARC_msg_narc_0283_bin = 283,\n NARC_msg_narc_0284_bin = 284,\n NARC_msg_narc_0285_bin = 285,\n NARC_msg_narc_0286_bin = 286,\n NARC_msg_narc_0287_bin = 287,\n NARC_msg_narc_0288_bin = 288,\n NARC_msg_narc_0289_bin = 289,\n NARC_msg_narc_0290_bin = 290,\n NARC_msg_narc_0291_bin = 291,\n NARC_msg_narc_0292_bin = 292,\n NARC_msg_narc_0293_bin = 293,\n NARC_msg_narc_0294_bin = 294,\n NARC_msg_narc_0295_bin = 295,\n NARC_msg_narc_0296_bin = 296,\n NARC_msg_narc_0297_bin = 297,\n NARC_msg_narc_0298_bin = 298,\n NARC_msg_narc_0299_bin = 299,\n NARC_msg_narc_0300_bin = 300,\n NARC_msg_narc_0301_bin = 301,\n NARC_msg_narc_0302_bin = 302,\n NARC_msg_narc_0303_bin = 303,\n NARC_msg_narc_0304_bin = 304,\n NARC_msg_narc_0305_bin = 305,\n NARC_msg_narc_0306_bin = 306,\n NARC_msg_narc_0307_bin = 307,\n NARC_msg_narc_0308_bin = 308,\n NARC_msg_narc_0309_bin = 309,\n NARC_msg_narc_0310_bin = 310,\n NARC_msg_narc_0311_bin = 311,\n NARC_msg_narc_0312_bin = 312,\n NARC_msg_narc_0313_bin = 313,\n NARC_msg_narc_0314_bin = 314,\n NARC_msg_narc_0315_bin = 315,\n NARC_msg_narc_0316_bin = 316,\n NARC_msg_narc_0317_bin = 317,\n NARC_msg_narc_0318_bin = 318,\n NARC_msg_narc_0319_bin = 319,\n NARC_msg_narc_0320_bin = 320,\n NARC_msg_narc_0321_bin = 321,\n NARC_msg_narc_0322_bin = 322,\n NARC_msg_narc_0323_bin = 323,\n NARC_msg_narc_0324_bin = 324,\n NARC_msg_narc_0325_bin = 325,\n NARC_msg_narc_0326_bin = 326,\n NARC_msg_narc_0327_bin = 327,\n NARC_msg_narc_0328_bin = 328,\n NARC_msg_narc_0329_bin = 329,\n NARC_msg_narc_0330_bin = 330,\n NARC_msg_narc_0331_bin = 331,\n NARC_msg_narc_0332_bin = 332,\n NARC_msg_narc_0333_bin = 333,\n NARC_msg_narc_0334_bin = 334,\n NARC_msg_narc_0335_bin = 335,\n NARC_msg_narc_0336_bin = 336,\n NARC_msg_narc_0337_bin = 337,\n NARC_msg_narc_0338_bin = 338,\n NARC_msg_narc_0339_bin = 339,\n NARC_msg_narc_0340_bin = 340,\n NARC_msg_narc_0341_bin = 341,\n NARC_msg_narc_0342_bin = 342,\n NARC_msg_narc_0343_bin = 343,\n NARC_msg_narc_0344_bin = 344,\n NARC_msg_narc_0345_bin = 345,\n NARC_msg_narc_0346_bin = 346,\n NARC_msg_narc_0347_bin = 347,\n NARC_msg_narc_0348_bin = 348,\n NARC_msg_narc_0349_bin = 349,\n NARC_msg_narc_0350_bin = 350,\n NARC_msg_narc_0351_bin = 351,\n NARC_msg_narc_0352_bin = 352,\n NARC_msg_narc_0353_bin = 353,\n NARC_msg_narc_0354_bin = 354,\n NARC_msg_narc_0355_bin = 355,\n NARC_msg_narc_0356_bin = 356,\n NARC_msg_narc_0357_bin = 357,\n NARC_msg_narc_0358_bin = 358,\n NARC_msg_narc_0359_bin = 359,\n NARC_msg_narc_0360_bin = 360,\n NARC_msg_narc_0361_bin = 361,\n NARC_msg_narc_0362_bin = 362,\n NARC_msg_narc_0363_bin = 363,\n NARC_msg_narc_0364_bin = 364,\n NARC_msg_narc_0365_bin = 365,\n NARC_msg_narc_0366_bin = 366,\n NARC_msg_narc_0367_bin = 367,\n NARC_msg_narc_0368_bin = 368,\n NARC_msg_narc_0369_bin = 369,\n NARC_msg_narc_0370_bin = 370,\n NARC_msg_narc_0371_bin = 371,\n NARC_msg_narc_0372_bin = 372,\n NARC_msg_narc_0373_bin = 373,\n NARC_msg_narc_0374_bin = 374,\n NARC_msg_narc_0375_bin = 375,\n NARC_msg_narc_0376_bin = 376,\n NARC_msg_narc_0377_bin = 377,\n NARC_msg_narc_0378_bin = 378,\n NARC_msg_narc_0379_bin = 379,\n NARC_msg_narc_0380_bin = 380,\n NARC_msg_narc_0381_bin = 381,\n NARC_msg_narc_0382_bin = 382,\n NARC_msg_narc_0383_bin = 383,\n NARC_msg_narc_0384_bin = 384,\n NARC_msg_narc_0385_bin = 385,\n NARC_msg_narc_0386_bin = 386,\n NARC_msg_narc_0387_bin = 387,\n NARC_msg_narc_0388_bin = 388,\n NARC_msg_narc_0389_bin = 389,\n NARC_msg_narc_0390_bin = 390,\n NARC_msg_narc_0391_bin = 391,\n NARC_msg_narc_0392_bin = 392,\n NARC_msg_narc_0393_bin = 393,\n NARC_msg_narc_0394_bin = 394,\n NARC_msg_narc_0395_bin = 395,\n NARC_msg_narc_0396_bin = 396,\n NARC_msg_narc_0397_bin = 397,\n NARC_msg_narc_0398_bin = 398,\n NARC_msg_narc_0399_bin = 399,\n NARC_msg_narc_0400_bin = 400,\n NARC_msg_narc_0401_bin = 401,\n NARC_msg_narc_0402_bin = 402,\n NARC_msg_narc_0403_bin = 403,\n NARC_msg_narc_0404_bin = 404,\n NARC_msg_narc_0405_bin = 405,\n NARC_msg_narc_0406_bin = 406,\n NARC_msg_narc_0407_bin = 407,\n NARC_msg_narc_0408_bin = 408,\n NARC_msg_narc_0409_bin = 409,\n NARC_msg_narc_0410_bin = 410,\n NARC_msg_narc_0411_bin = 411,\n NARC_msg_narc_0412_bin = 412,\n NARC_msg_narc_0413_bin = 413,\n NARC_msg_narc_0414_bin = 414,\n NARC_msg_narc_0415_bin = 415,\n NARC_msg_narc_0416_bin = 416,\n NARC_msg_narc_0417_bin = 417,\n NARC_msg_narc_0418_bin = 418,\n NARC_msg_narc_0419_bin = 419,\n NARC_msg_narc_0420_bin = 420,\n NARC_msg_narc_0421_bin = 421,\n NARC_msg_narc_0422_bin = 422,\n NARC_msg_narc_0423_bin = 423,\n NARC_msg_narc_0424_bin = 424,\n NARC_msg_narc_0425_bin = 425,\n NARC_msg_narc_0426_bin = 426,\n NARC_msg_narc_0427_bin = 427,\n NARC_msg_narc_0428_bin = 428,\n NARC_msg_narc_0429_bin = 429,\n NARC_msg_narc_0430_bin = 430,\n NARC_msg_narc_0431_bin = 431,\n NARC_msg_narc_0432_bin = 432,\n NARC_msg_narc_0433_bin = 433,\n NARC_msg_narc_0434_bin = 434,\n NARC_msg_narc_0435_bin = 435,\n NARC_msg_narc_0436_bin = 436,\n NARC_msg_narc_0437_bin = 437,\n NARC_msg_narc_0438_bin = 438,\n NARC_msg_narc_0439_bin = 439,\n NARC_msg_narc_0440_bin = 440,\n NARC_msg_narc_0441_bin = 441,\n NARC_msg_narc_0442_bin = 442,\n NARC_msg_narc_0443_bin = 443,\n NARC_msg_narc_0444_bin = 444,\n NARC_msg_narc_0445_bin = 445,\n NARC_msg_narc_0446_bin = 446,\n NARC_msg_narc_0447_bin = 447,\n NARC_msg_narc_0448_bin = 448,\n NARC_msg_narc_0449_bin = 449,\n NARC_msg_narc_0450_bin = 450,\n NARC_msg_narc_0451_bin = 451,\n NARC_msg_narc_0452_bin = 452,\n NARC_msg_narc_0453_bin = 453,\n NARC_msg_narc_0454_bin = 454,\n NARC_msg_narc_0455_bin = 455,\n NARC_msg_narc_0456_bin = 456,\n NARC_msg_narc_0457_bin = 457,\n NARC_msg_narc_0458_bin = 458,\n NARC_msg_narc_0459_bin = 459,\n NARC_msg_narc_0460_bin = 460,\n NARC_msg_narc_0461_bin = 461,\n NARC_msg_narc_0462_bin = 462,\n NARC_msg_narc_0463_bin = 463,\n NARC_msg_narc_0464_bin = 464,\n NARC_msg_narc_0465_bin = 465,\n NARC_msg_narc_0466_bin = 466,\n NARC_msg_narc_0467_bin = 467,\n NARC_msg_narc_0468_bin = 468,\n NARC_msg_narc_0469_bin = 469,\n NARC_msg_narc_0470_bin = 470,\n NARC_msg_narc_0471_bin = 471,\n NARC_msg_narc_0472_bin = 472,\n NARC_msg_narc_0473_bin = 473,\n NARC_msg_narc_0474_bin = 474,\n NARC_msg_narc_0475_bin = 475,\n NARC_msg_narc_0476_bin = 476,\n NARC_msg_narc_0477_bin = 477,\n NARC_msg_narc_0478_bin = 478,\n NARC_msg_narc_0479_bin = 479,\n NARC_msg_narc_0480_bin = 480,\n NARC_msg_narc_0481_bin = 481,\n NARC_msg_narc_0482_bin = 482,\n NARC_msg_narc_0483_bin = 483,\n NARC_msg_narc_0484_bin = 484,\n NARC_msg_narc_0485_bin = 485,\n NARC_msg_narc_0486_bin = 486,\n NARC_msg_narc_0487_bin = 487,\n NARC_msg_narc_0488_bin = 488,\n NARC_msg_narc_0489_bin = 489,\n NARC_msg_narc_0490_bin = 490,\n NARC_msg_narc_0491_bin = 491,\n NARC_msg_narc_0492_bin = 492,\n NARC_msg_narc_0493_bin = 493,\n NARC_msg_narc_0494_bin = 494,\n NARC_msg_narc_0495_bin = 495,\n NARC_msg_narc_0496_bin = 496,\n NARC_msg_narc_0497_bin = 497,\n NARC_msg_narc_0498_bin = 498,\n NARC_msg_narc_0499_bin = 499,\n NARC_msg_narc_0500_bin = 500,\n NARC_msg_narc_0501_bin = 501,\n NARC_msg_narc_0502_bin = 502,\n NARC_msg_narc_0503_bin = 503,\n NARC_msg_narc_0504_bin = 504,\n NARC_msg_narc_0505_bin = 505,\n NARC_msg_narc_0506_bin = 506,\n NARC_msg_narc_0507_bin = 507,\n NARC_msg_narc_0508_bin = 508,\n NARC_msg_narc_0509_bin = 509,\n NARC_msg_narc_0510_bin = 510,\n NARC_msg_narc_0511_bin = 511,\n NARC_msg_narc_0512_bin = 512,\n NARC_msg_narc_0513_bin = 513,\n NARC_msg_narc_0514_bin = 514,\n NARC_msg_narc_0515_bin = 515,\n NARC_msg_narc_0516_bin = 516,\n NARC_msg_narc_0517_bin = 517,\n NARC_msg_narc_0518_bin = 518,\n NARC_msg_narc_0519_bin = 519,\n NARC_msg_narc_0520_bin = 520,\n NARC_msg_narc_0521_bin = 521,\n NARC_msg_narc_0522_bin = 522,\n NARC_msg_narc_0523_bin = 523,\n NARC_msg_narc_0524_bin = 524,\n NARC_msg_narc_0525_bin = 525,\n NARC_msg_narc_0526_bin = 526,\n NARC_msg_narc_0527_bin = 527,\n NARC_msg_narc_0528_bin = 528,\n NARC_msg_narc_0529_bin = 529,\n NARC_msg_narc_0530_bin = 530,\n NARC_msg_narc_0531_bin = 531,\n NARC_msg_narc_0532_bin = 532,\n NARC_msg_narc_0533_bin = 533,\n NARC_msg_narc_0534_bin = 534,\n NARC_msg_narc_0535_bin = 535,\n NARC_msg_narc_0536_bin = 536,\n NARC_msg_narc_0537_bin = 537,\n NARC_msg_narc_0538_bin = 538,\n NARC_msg_narc_0539_bin = 539,\n NARC_msg_narc_0540_bin = 540,\n NARC_msg_narc_0541_bin = 541,\n NARC_msg_narc_0542_bin = 542,\n NARC_msg_narc_0543_bin = 543,\n NARC_msg_narc_0544_bin = 544,\n NARC_msg_narc_0545_bin = 545,\n NARC_msg_narc_0546_bin = 546,\n NARC_msg_narc_0547_bin = 547,\n NARC_msg_narc_0548_bin = 548,\n NARC_msg_narc_0549_bin = 549,\n NARC_msg_narc_0550_bin = 550,\n NARC_msg_narc_0551_bin = 551,\n NARC_msg_narc_0552_bin = 552,\n NARC_msg_narc_0553_bin = 553,\n NARC_msg_narc_0554_bin = 554,\n NARC_msg_narc_0555_bin = 555,\n NARC_msg_narc_0556_bin = 556,\n NARC_msg_narc_0557_bin = 557,\n NARC_msg_narc_0558_bin = 558,\n NARC_msg_narc_0559_bin = 559,\n NARC_msg_narc_0560_bin = 560,\n NARC_msg_narc_0561_bin = 561,\n NARC_msg_narc_0562_bin = 562,\n NARC_msg_narc_0563_bin = 563,\n NARC_msg_narc_0564_bin = 564,\n NARC_msg_narc_0565_bin = 565,\n NARC_msg_narc_0566_bin = 566,\n NARC_msg_narc_0567_bin = 567,\n NARC_msg_narc_0568_bin = 568,\n NARC_msg_narc_0569_bin = 569,\n NARC_msg_narc_0570_bin = 570,\n NARC_msg_narc_0571_bin = 571,\n NARC_msg_narc_0572_bin = 572,\n NARC_msg_narc_0573_bin = 573,\n NARC_msg_narc_0574_bin = 574,\n NARC_msg_narc_0575_bin = 575,\n NARC_msg_narc_0576_bin = 576,\n NARC_msg_narc_0577_bin = 577,\n NARC_msg_narc_0578_bin = 578,\n NARC_msg_narc_0579_bin = 579,\n NARC_msg_narc_0580_bin = 580,\n NARC_msg_narc_0581_bin = 581,\n NARC_msg_narc_0582_bin = 582,\n NARC_msg_narc_0583_bin = 583,\n NARC_msg_narc_0584_bin = 584,\n NARC_msg_narc_0585_bin = 585,\n NARC_msg_narc_0586_bin = 586,\n NARC_msg_narc_0587_bin = 587,\n NARC_msg_narc_0588_bin = 588,\n NARC_msg_narc_0589_bin = 589,\n NARC_msg_narc_0590_bin = 590,\n NARC_msg_narc_0591_bin = 591,\n NARC_msg_narc_0592_bin = 592,\n NARC_msg_narc_0593_bin = 593,\n NARC_msg_narc_0594_bin = 594,\n NARC_msg_narc_0595_bin = 595,\n NARC_msg_narc_0596_bin = 596,\n NARC_msg_narc_0597_bin = 597,\n NARC_msg_narc_0598_bin = 598,\n NARC_msg_narc_0599_bin = 599,\n NARC_msg_narc_0600_bin = 600,\n NARC_msg_narc_0601_bin = 601,\n NARC_msg_narc_0602_bin = 602,\n NARC_msg_narc_0603_bin = 603,\n NARC_msg_narc_0604_bin = 604,\n NARC_msg_narc_0605_bin = 605,\n NARC_msg_narc_0606_bin = 606,\n NARC_msg_narc_0607_bin = 607,\n NARC_msg_narc_0608_bin = 608,\n NARC_msg_narc_0609_bin = 609,\n NARC_msg_narc_0610_bin = 610,\n NARC_msg_narc_0611_bin = 611,\n NARC_msg_narc_0612_bin = 612,\n NARC_msg_narc_0613_bin = 613,\n NARC_msg_narc_0614_bin = 614,\n NARC_msg_narc_0615_bin = 615,\n NARC_msg_narc_0616_bin = 616,\n NARC_msg_narc_0617_bin = 617,\n NARC_msg_narc_0618_bin = 618,\n NARC_msg_narc_0619_bin = 619,\n NARC_msg_narc_0620_bin = 620,\n NARC_msg_narc_0621_bin = 621,\n NARC_msg_narc_0622_bin = 622,\n NARC_msg_narc_0623_bin = 623,\n};\n#define MSGENC_FILES_MSGDATA_MSG_NARC_0328_H \n#define narc_0328_00000 0\n#define narc_0328_00001 1\n#define narc_0328_00002 2\n#define narc_0328_00003 3\n#define narc_0328_00004 4\n#define NARC_FONT_NAIX_ \nenum {\n NARC_font_narc_0000_bin = 0,\n NARC_font_narc_0001_bin = 1,\n NARC_font_narc_0002_bin = 2,\n NARC_font_narc_0003_bin = 3,\n NARC_font_narc_0004_NCGR_lz = 4,\n NARC_font_narc_0005_NCGR = 5,\n NARC_font_narc_0006_NCLR = 6,\n NARC_font_narc_0007_NCLR = 7,\n};\n#define POKEDIAMOND_GF_GFX_LOADER_H \nu32 GfGfxLoader_LoadCharData(NarcId narcId, s32 memberNo, struct BgConfig * unkStruct02016B94_2, u32 layer, u32 numTiles, u32 szByte, BOOL isCompressed, HeapID heapId);\nvoid GfGfxLoader_LoadScrnData(NarcId narcId, s32 memberNo, struct BgConfig * unkStruct02016B94_2, u32 layer, u32 tileOffset, u32 szByte, BOOL isCompressed, HeapID heapId);\nvoid GfGfxLoader_GXLoadPal(NarcId narcId, s32 memberNo, enum GFPalLoadLocation location, enum GFPalSlotOffset palSlotOffset, u32 szByte, HeapID heapId);\nvoid GfGfxLoader_GXLoadPalWithSrcOffset(NarcId narcId, s32 memberNo, enum GFPalLoadLocation location, u32 srcOffset, enum GFPalSlotOffset palSlotOffset, u32 szByte, HeapID heapId);\nu32 GfGfxLoader_LoadWholePalette(NarcId narcId, s32 memberId, u32 layer, u32 baseAddr, u32 szByte, BOOL isCompressed, HeapID heapId);\nvoid GfGfxLoader_PartiallyLoadPalette(NarcId narcId, s32 memberId, NNS_G2D_VRAM_TYPE vramType, u32 baseAddr, HeapID heapId, NNSG2dImagePaletteProxy * pPltProxy);\nu32 GfGfxLoader_LoadImageMapping(NarcId narcId, s32 memberId, BOOL isCompressed, u32 layer, u32 szByte, NNS_G2D_VRAM_TYPE type, u32 baseAddr, HeapID heapId, NNSG2dImageProxy *pImgProxy);\nvoid GfGfxLoader_SetObjCntFlagsAndLoadImageMapping(NarcId narcId, s32 memberId, BOOL isCompressed, u32 layer, u32 szByte, NNS_G2D_VRAM_TYPE type, u32 baseAddr, HeapID heapId, NNSG2dImageProxy * pImageProxy);\nvoid * GfGfxLoader_GetCharData(NarcId narcId, s32 memberId, BOOL isCompressed, NNSG2dCharacterData ** ppCharData, HeapID heapId);\nvoid * GfGfxLoader_GetScrnData(NarcId narcId, s32 memberId, BOOL isCompressed, NNSG2dScreenData ** ppScrData, HeapID heapId);\nvoid * GfGfxLoader_GetPlttData(NarcId narcId, s32 memberId, NNSG2dPaletteData ** ppPltData, HeapID heapId);\nvoid * GfGfxLoader_GetCellBank(NarcId narcId, s32 memberId, BOOL isCompressed, NNSG2dCellDataBank ** ppCellBank, HeapID heapId);\nvoid * GfGfxLoader_GetAnimBank(NarcId narcId, s32 memberId, BOOL isCompressed, NNSG2dAnimBankData ** ppAnimBank, HeapID heapId);\nvoid * GfGfxLoader_UncompressFromNarc(NarcId narcId, s32 memberId, HeapID heapId);\nvoid * GfGfxLoader_LoadFromNarc(NarcId narcId, s32 memberNo, BOOL isCompressed, HeapID heapId, BOOL allocAtEnd);\nvoid * GfGfxLoader_LoadFromNarc_GetSizeOut(NarcId narcId, s32 memberNo, BOOL isCompressed, HeapID heapId, BOOL allocAtEnd, u32 *size_p);\n#define NITRO_PAD_PAD_H_ \n#define PAD_PLUS_KEY_MASK 0x00f0\n#define PAD_BUTTON_MASK 0x2f0f\n#define PAD_DEBUG_BUTTON_MASK 0x2000\n#define PAD_ALL_MASK 0x2fff\n#define PAD_RCNTPORT_MASK 0x2c00\n#define PAD_KEYPORT_MASK 0x03ff\n#define PAD_DETECT_FOLD_MASK 0x8000\n#define PAD_BUTTON_A 0x0001\n#define PAD_BUTTON_B 0x0002\n#define PAD_BUTTON_SELECT 0x0004\n#define PAD_BUTTON_START 0x0008\n#define PAD_KEY_RIGHT 0x0010\n#define PAD_KEY_LEFT 0x0020\n#define PAD_KEY_UP 0x0040\n#define PAD_KEY_DOWN 0x0080\n#define PAD_BUTTON_R 0x0100\n#define PAD_BUTTON_L 0x0200\n#define PAD_BUTTON_X 0x0400\n#define PAD_BUTTON_Y 0x0800\n#define PAD_BUTTON_DEBUG 0x2000\nstatic inline u16 PAD_Read(void)\n{\n    return (u16)((((*(REGType16v *)0x4000130) | *(vu16 *)(0x02000000 + 0x007FFFA8)) ^\n                  (0x00f0 | 0x2f0f)) & (0x00f0 | 0x2f0f));\n}\nstatic inline BOOL PAD_DetectFold(void)\n{\n    return (BOOL)((*(vu16 *)(0x02000000 + 0x007FFFA8) & 0x8000) >> 15);\n}\n#define POKEDIAMOND_UNK_0200CABC_H \n#define POKEDIAMOND_UNK_02008DEC_H \nstruct UnkStruct_02008DEC_sub\n{\n    u32 unk00;\n    u32 unk04;\n    void *unk08;\n};\nstruct UnkStruct_02008DEC_1\n{\n    u32 unk00;\n    struct UnkStruct_02008DEC_sub *unk04;\n    s32 unk08;\n    u32 unk0C;\n    s32 unk10;\n};\nstruct UnkStruct_02008DEC_2\n{\n    union\n    {\n        struct UnkStruct_02008DEC_3 *unk00_3;\n        struct UnkStruct_02008DEC_4 *unk00_4;\n    };\n    s32 unk04;\n    u32 unk08;\n    u8 unk0C;\n};\nstruct UnkStruct_02008DEC_3\n{\n    s32 unk00;\n    u8 unk04[0x40];\n    u32 unk44;\n    u32 unk48;\n};\nstruct UnkStruct_02008DEC_4\n{\n    NarcId unk00;\n    s32 unk04;\n    BOOL unk08;\n    s32 unk0C;\n    u32 unk10;\n    u32 unk14;\n};\nstruct UnkStruct_02008DEC_5\n{\n    struct UnkStruct_02008DEC_sub **unk00;\n    s32 unk04;\n    s32 unk08;\n};\nstruct CharacterData_02008DEC\n{\n    NNSG2dCharacterData *chData;\n    u32 unk04;\n};\nstruct PaletteData_02008DEC\n{\n    NNSG2dPaletteData *plttData;\n    u32 unk04;\n    u32 unk08;\n};\nstruct CellDataBank_02008DEC\n{\n    NNSG2dCellDataBank *cellBank;\n};\nstruct AnimBank_02008DEC\n{\n    NNSG2dAnimBankData *bankData;\n};\nstruct UnkStruct_02008DEC_1 *sub_02008DEC(u32 param0, s32 param1, HeapID heapId);\nvoid sub_02008E2C(struct UnkStruct_02008DEC_1 *param0);\nstruct UnkStruct_02008DEC_sub *sub_02008E6C(struct UnkStruct_02008DEC_1 *param0,\n    struct UnkStruct_02008DEC_2 *param1,\n    s32 param2,\n    HeapID heapId);\nstruct UnkStruct_02008DEC_sub *sub_02008F34(struct UnkStruct_02008DEC_1 *param0,\n    NarcId param1,\n    s32 param2,\n    BOOL param3,\n    s32 param4,\n    u32 param5,\n    HeapID heapId);\nstruct UnkStruct_02008DEC_sub *sub_02008F90(struct UnkStruct_02008DEC_1 *param0,\n    NarcId param1,\n    s32 param2,\n    BOOL param3,\n    s32 param4,\n    u32 param5,\n    HeapID heapId,\n    BOOL param7);\nstruct UnkStruct_02008DEC_sub *sub_02008FEC(struct UnkStruct_02008DEC_1 *param0,\n    NarcId param1,\n    s32 param2,\n    BOOL param3,\n    s32 param4,\n    u32 param5,\n    u32 param6,\n    HeapID heapId);\nstruct UnkStruct_02008DEC_sub *sub_0200904C(struct UnkStruct_02008DEC_1 *param0,\n    NarcId param1,\n    s32 param2,\n    BOOL param3,\n    s32 param4,\n    u32 param5,\n    u32 param6,\n    HeapID heapId,\n    BOOL param8);\nstruct UnkStruct_02008DEC_sub *sub_020090AC(struct UnkStruct_02008DEC_1 *param0,\n    NarcId param1,\n    s32 param2,\n    BOOL param3,\n    s32 param4,\n    u32 param5,\n    HeapID heapId);\nvoid sub_020090FC(struct UnkStruct_02008DEC_1 *param0,\n    struct UnkStruct_02008DEC_sub *param1,\n    NarcId param2,\n    s32 param3,\n    BOOL param4,\n    HeapID heapId);\nvoid sub_02009168(struct UnkStruct_02008DEC_1 *param0,\n    struct UnkStruct_02008DEC_sub *param1,\n    NarcId param2,\n    s32 param3,\n    BOOL param4,\n    HeapID heapId);\nstruct UnkStruct_02008DEC_sub *sub_020091E0(struct UnkStruct_02008DEC_1 *param0,\n    NARC *param1,\n    u32 param2,\n    u32 param3,\n    s32 param4,\n    u32 param5,\n    HeapID heapId);\nstruct UnkStruct_02008DEC_sub *sub_0200923C(struct UnkStruct_02008DEC_1 *param0,\n    NARC *param1,\n    u32 param2,\n    u32 param3,\n    s32 param4,\n    u32 param5,\n    HeapID heapId,\n    u32 param7);\nstruct UnkStruct_02008DEC_sub *sub_02009298(struct UnkStruct_02008DEC_1 *param0,\n    NARC *param1,\n    u32 param2,\n    u32 param3,\n    s32 param4,\n    u32 param5,\n    u32 param6,\n    HeapID heapId);\nstruct UnkStruct_02008DEC_sub *sub_020092F8(struct UnkStruct_02008DEC_1 *param0,\n    NARC *param1,\n    u32 param2,\n    u32 param3,\n    s32 param4,\n    u32 param5,\n    u32 param6,\n    HeapID heapId,\n    u32 param8);\nstruct UnkStruct_02008DEC_sub *sub_02009358(struct UnkStruct_02008DEC_1 *param0,\n    NARC *param1,\n    u32 param2,\n    u32 param3,\n    s32 param4,\n    u32 param5,\n    HeapID heapId);\ns32 sub_020093A8(struct UnkStruct_02008DEC_1 *param0,\n    struct UnkStruct_02008DEC_2 *param1,\n    struct UnkStruct_02008DEC_5 *param2,\n    HeapID heapId);\nvoid sub_020093DC(struct UnkStruct_02008DEC_1 *param0,\n    struct UnkStruct_02008DEC_2 *param1,\n    s32 param2,\n    s32 param3,\n    struct UnkStruct_02008DEC_5 *param4,\n    HeapID heapId);\nstruct UnkStruct_02008DEC_5 *sub_02009424(s32 param0, HeapID heapId);\nvoid sub_02009448(struct UnkStruct_02008DEC_5 *param0);\nu32 sub_0200945C(struct UnkStruct_02008DEC_1 *param0, s32 param1);\nvoid sub_02009474(struct UnkStruct_02008DEC_sub *param0);\nvoid sub_02009490(struct UnkStruct_02008DEC_1 *param0, struct UnkStruct_02008DEC_sub *param1);\nvoid sub_020094C4(struct UnkStruct_02008DEC_1 *param0);\nstruct UnkStruct_02008DEC_sub *sub_020094F0(struct UnkStruct_02008DEC_1 *param0, s32 param1);\ns32 sub_02009530(struct UnkStruct_02008DEC_sub *param0);\nu32 sub_02009544(struct UnkStruct_02008DEC_sub *param0);\nu32 sub_0200955C(struct UnkStruct_02008DEC_sub *param0);\nu32 sub_02009574(struct UnkStruct_02008DEC_sub *param0);\nu32 sub_0200958C(struct UnkStruct_02008DEC_sub *param0);\nu32 sub_020095A4(struct UnkStruct_02008DEC_sub *param0);\nu32 sub_020095BC(struct UnkStruct_02008DEC_sub *param0);\nu32 sub_020095D4(struct UnkStruct_02008DEC_sub *param0);\nu32 sub_020095E4(struct UnkStruct_02008DEC_sub *param0);\nu32 sub_02009610(struct UnkStruct_02008DEC_sub *param0);\nvoid sub_02009630(struct UnkStruct_02008DEC_sub *param0, u32 param1);\nu32 sub_0200965C(void);\nstruct UnkStruct_02008DEC_2 *sub_02009660(struct UnkStruct_02008DEC_2 *param0, s32 param1);\nvoid sub_02009668(u32 *param0, struct UnkStruct_02008DEC_2 *param1, HeapID heapId);\nvoid sub_020096B4(struct UnkStruct_02008DEC_2 *param0);\ns32 sub_020096CC(struct UnkStruct_02008DEC_2 *param0);\ns32 sub_020096DC(struct UnkStruct_02008DEC_2 *param0, s32 param1);\ns32 sub_02009710(struct UnkStruct_02008DEC_2 *param0, s32 param1);\nBOOL sub_0200973C(struct UnkStruct_02008DEC_2 *param0, s32 param1);\nu32 sub_02009768(struct UnkStruct_02008DEC_2 *param0, s32 param1);\nu32 sub_0200979C(struct UnkStruct_02008DEC_2 *param0, s32 param1);\nstruct UnkStruct_02008DEC_sub *sub_020097D0(struct UnkStruct_02008DEC_1 *param0);\nvoid sub_020097FC(\n    struct UnkStruct_02008DEC_sub *param0, u32 param1, u32 param2, u32 param3, HeapID heapId);\nstruct CharacterData_02008DEC *sub_0200986C(void *param0, u32 param1, HeapID heapId);\nstruct PaletteData_02008DEC *sub_0200988C(void *param0, u32 param1, u32 param2, HeapID heapId);\nstruct CellDataBank_02008DEC *sub_020098B0(void *param0, HeapID heapId);\nstruct AnimBank_02008DEC *sub_020098CC(void *param0, HeapID heapId);\nvoid *sub_020098E8(void *param0, HeapID heapId);\nvoid *sub_02009904(void *param0, HeapID heapId);\nvoid sub_02009920(struct UnkStruct_02008DEC_sub *param0);\nu32 *sub_02009934(struct UnkStruct_02008DEC_sub *param0);\nvoid sub_0200994C(struct UnkStruct_02008DEC_1 *param0,\n    struct UnkStruct_02008DEC_sub *param1,\n    void *param2,\n    s32 param3,\n    u32 param4,\n    u32 param5,\n    u32 param6,\n    HeapID heapId);\nvoid sub_02009978(struct UnkStruct_02008DEC_1 *param0,\n    struct UnkStruct_02008DEC_sub *param1,\n    NarcId param2,\n    s32 param3,\n    BOOL param4,\n    s32 param5,\n    u32 param6,\n    u32 param7,\n    u32 param8,\n    HeapID heapId,\n    BOOL param10);\nvoid sub_020099B0(struct UnkStruct_02008DEC_1 *param0,\n    struct UnkStruct_02008DEC_sub *param1,\n    NARC *param2,\n    u32 param3,\n    u32 param4,\n    s32 param5,\n    u32 param6,\n    u32 param7,\n    u32 param8,\n    HeapID heapId,\n    u32 param10);\ns32 sub_020099E8(struct UnkStruct_02008DEC_4 *param0);\nvoid *sub_02009A04(NARC *param0, u32 param1, u32 param2, HeapID heapId, u32 param4);\nu32 sub_02009A50(struct UnkStruct_02008DEC_sub *param0);\nvoid sub_02009A90(struct UnkStruct_02008DEC_5 *param0);\nu32 sub_02009AC4(struct UnkStruct_02008DEC_sub *param0);\nu32 sub_02009B04(struct UnkStruct_02008DEC_sub *param0);\nvoid sub_02009B44(struct UnkStruct_02008DEC_5 *param0);\nu32 sub_02009B78(struct UnkStruct_02008DEC_sub *param0);\nvoid sub_02009BB8(struct UnkStruct_02008DEC_sub *param0, struct UnkStruct_02008DEC_sub *param1);\nvoid sub_02009BE8(struct UnkStruct_02008DEC_sub *param0);\nvoid sub_02009C0C(struct UnkStruct_02008DEC_sub *param0);\nvoid sub_02009C30(struct UnkStruct_02008DEC_5 *param0);\nu32 sub_02009C5C(struct UnkStruct_02008DEC_sub *param0);\nu32 sub_02009C80(struct UnkStruct_02008DEC_sub *param0, struct UnkStruct_02008DEC_sub *param1);\nvoid sub_02009CDC(u32 param0);\nu32 sub_02009CF0(struct UnkStruct_02008DEC_sub *param0);\nvoid sub_02009D34(struct UnkStruct_02008DEC_5 *param0);\nu32 sub_02009D68(struct UnkStruct_02008DEC_sub *param0);\nvoid sub_02009DAC(struct UnkStruct_02008DEC_5 *param0);\nvoid sub_02009DE0(struct UnkStruct_02008DEC_sub *param0);\nvoid sub_02009E04(struct UnkStruct_02008DEC_sub *param0);\nvoid sub_02009E28(struct UnkStruct_02008DEC_5 *param0);\nu32 sub_02009E54(struct UnkStruct_02008DEC_sub *param0, u32 param1);\ns32 sub_02009E88(struct UnkStruct_02008DEC_sub *param0, u32 param1);\ntypedef struct PokepicManager {\n    u8 unk00;\n} PokepicManager;\ntypedef struct WaitingIcon {\n    struct Window *window;\n    u8 unk004[9][0x80];\n    u16 fillValue;\n    u8 unk486;\n    u8 unk487 : 7;\n    u8 unk488 : 2;\n} WaitingIcon;\nstruct UnkStruct_0200CABC_2\n{\n    u32 unk000;\n    u8 unk004[0x12c];\n    struct UnkStruct_02008DEC_1 *unk130;\n    struct UnkStruct_02008DEC_1 *unk134;\n    u8 unk138[0x2a];\n    u16 unk162;\n    u32 *unk164;\n    struct BgConfig *bgConfig;\n    u8 bgId;\n    u8 x;\n    u8 y;\n    PokepicManager pokepicManager;\n};\nstruct UnkStruct_0200CABC_3\n{\n    u32 unk00;\n    u32 unk04;\n    u32 unk08;\n    u32 unk0c;\n};\nu32 sub_0200CABC(struct BgConfig *bgConfig, u32 layer, u32 numTiles, u32 param3, HeapID heapId);\ns32 sub_0200CAFC(void);\nvoid LoadUserFrameGfx1(struct BgConfig *bg_config, enum GFBgLayer layer, u32 num_tiles, u32 paletteNumber, u8 frame_id, HeapID heapId);\nvoid DrawFrame1(struct BgConfig *bgConfig,\n    u8 bgId,\n    u8 x,\n    u8 y,\n    u8 width,\n    u8 height,\n    u8 paletteNum,\n    u16 fillValue);\nvoid DrawFrameAndWindow1(struct Window *window, BOOL copy_to_vram, u16 fill_value, u8 palette_num);\nvoid ClearFrameAndWindow1(struct Window *window, BOOL copy_to_vram);\ns32 sub_0200CD60(s32 param0);\ns32 sub_0200CD64(s32 param0);\nvoid sub_0200CD68(struct BgConfig *bg_config, u32 layer, u32 num_tiles, u32 palNumber, u8 frame_id, HeapID heapId);\nvoid DrawFrame2(struct BgConfig *bgConfig, u8 bgId, u8 x, u8 y, u8 width, u8 height, u8 paletteNum, u16 fillValue);\nvoid DrawWindowFrame2(struct Window *window, u32 fill_value, u32 palette_num);\nvoid DrawFrameAndWindow2(struct Window *window, BOOL copy_to_vram, u16 fill_value, u8 palette_num);\nvoid ClearFrameAndWindow2(struct Window *window, BOOL param1);\nvoid BlitRect4Bit(u8 *srcPixels,\n    u16 srcX,\n    u16 srcY,\n    u16 srcWidth,\n    u16 srcHeight,\n    u8 *dstPixels,\n    u16 dstWidth,\n    u16 dstHeight,\n    u16 dstX,\n    u16 dstY,\n    u16 width,\n    u16 height);\nvoid sub_0200D18C(struct Window *window, u16 fill_value);\nvoid sub_0200D274(struct BgConfig *bg_config, u8 bg_id, u16 param2, u8 param3, u8 param4, HeapID heapId);\nvoid sub_0200D300(struct BgConfig *bg_config,\n    u8 bg_id,\n    u16 numtiles,\n    u8 param3,\n    u8 param4,\n    u16 param5,\n    HeapID heapId);\nvoid sub_0200D378(struct BgConfig *bg_config, u8 bg_id, u16 numtiles, u8 param3, u16 param4, HeapID heapId);\nvoid DrawFrame3(struct BgConfig *bgConfig,\n    u8 bgId,\n    u8 x,\n    u8 y,\n    u8 width,\n    u8 height,\n    u8 paletteNum,\n    u16 fillValue);\nvoid DrawWindowCorner(struct Window *window, u16 fillValue, u8 paletteNum);\nvoid DrawFrameAndWindow3(struct Window *window, BOOL copy_to_vram, u16 fillValue, u8 paletteNum, u8 param4);\nvoid ClearFrameAndWindow3(struct Window *window, u8 param1, BOOL copy_to_vram);\nWaitingIcon *WaitingIcon_New(struct Window *window, u32 param1);\nvoid sub_0200D980(WaitingIcon *waitingIcon, u32 param1);\nvoid sub_0200DB7C(u32 param0, void *param1);\nvoid sub_0200DBE8(u32 param0, void *param1);\nvoid sub_0200DBFC(WaitingIcon *waitingIcon);\nvoid sub_0200DC24(WaitingIcon *waitingIcon);\nPokepicManager *DrawPokemonPicFromSpecies(struct BgConfig *bg_config, u8 bg_id, u8 param2, u8 param3, u8 param4, u16 numTiles, u16 species, u8 gender, HeapID heapId);\nPokepicManager *DrawPokemonPicFromMon(struct BgConfig *bg_config, u8 bg_id, u8 param2, u8 param3, u8 param4, u16 numTiles, struct Pokemon *mon, HeapID heapId);\nvoid sub_0200DCF8(u32 param0, void *param1);\nstruct UnkStruct_0200CABC_2 *sub_0200DD70(struct BgConfig *bg_config, u8 bg_id, u8 param2, u8 param3, HeapID heapId);\nvoid sub_0200DDAC(struct UnkStruct_0200CABC_2 *param0, HeapID heapId);\nvoid sub_0200DDD8(struct UnkStruct_0200CABC_2 *param0);\nvoid sub_0200DE30(struct UnkStruct_0200CABC_2 *param0, u8 param1, u8 param2);\nvoid sub_0200DE80(struct UnkStruct_0200CABC_2 *param0, u16 param1, u8 param2);\nvoid sub_0200DEC0(struct UnkStruct_0200CABC_2 *param0, struct Pokemon *param1);\nvoid sub_0200DEF4(struct UnkStruct_0200CABC_2 *param0, struct SomeDrawPokemonStruct *param1);\nvoid DrawFramed10x10Square(struct UnkStruct_0200CABC_2 *param0, u8 paletteNum, u16 fillValue);\nvoid ClearFramed10x10Square(struct UnkStruct_0200CABC_2 *param0);\n", "diff_flags": [], "diff_label": "Blackout_PrintMessage", "libraries": []}