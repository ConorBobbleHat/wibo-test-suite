{"compiler": "mwcc_40_1028", "compiler_flags": "-O4,s -inline off -g -proc arm7tdmi -fp soft -lang c99 -interworking", "source_code": "extern u16 BC_ADRS[3]; // from WlNic.c\nextern WL_MAN* wlMan;\nextern u16 global_vtsf_var;\nextern u16 W_TXBUF_TIM;\n\nvoid WL_WriteByte(void* p, u8 data);\nvoid WSetMacAdrs3(u16* dst, u16* src1, u16* src2, u16* src3);\nu32 WCalcManRate(void);\nu8 WL_ReadByte(void* p);\n\nvoid MakeBeaconFrame(void) { // TxCtrl.c:1692\n    TXFRM_MAC* pFrm = wlMan->TxCtrl.Beacon.pMacFrm; // r0 - :1694\n    CONFIG_PARAM* pConfig = &wlMan->Config; // r5 - :1695\n    WORK_PARAM* pWork = &wlMan->Work; // r6 - :1696\n    BEACON_BODY* pBody; // r0 - :1697\n    u8* pBuf; // r0 - :1698\n    u8* p; // r4 - :1699\n    u32 i, vtsf; // r7, r4 - :1700\n    u16* p16; // r8 - :1701\n    \n    pFrm->MacHeader.Tx.Status = 0; // :1707\n    pFrm->MacHeader.Tx.Status2 = 0; // :1708\n    pFrm->MacHeader.Tx.rsv_RetryCount = 0; // :1709\n    pFrm->MacHeader.Tx.rsv_AppRate = 0; // :1710\n    pFrm->MacHeader.Tx.Service_Rate = WCalcManRate(); // :1711\n    \n    pFrm->Dot11Header.FrameCtrl.Data = 128; // :1722\n    pFrm->Dot11Header.DurationID = 0; // :1723\n    WSetMacAdrs3(pFrm->Dot11Header.Adrs1, BC_ADRS, pConfig->MacAdrs, pConfig->MacAdrs); // :1724\n    pFrm->Dot11Header.SeqCtrl.Data = 0; // :1725\n    \n    pBody = (BEACON_BODY*)pFrm->Body; // :1730\n    pBody->TimeStamp[0] = 0; // :1732\n    pBody->TimeStamp[1] = 0; // :1733\n    pBody->BeaconInterval = pWork->BeaconPeriod; // :1734\n    pBody->CapaInfo.Data = pWork->CapaInfo; // :1735\n    \n    pBuf = (u8*)pBody->Buf; // :1737\n    \n    if (pConfig->BeaconType == 0) { // :1739\n        pWork->Ofst.Beacon.SSID = (u32)pBuf - (u32)pBody; // :1741\n        \n        WL_WriteByte(pBuf++, 0); // :1742\n        WL_WriteByte(pBuf++, pWork->SSIDLength) ; // :1743\n        \n        for (i = 0; i < pWork->SSIDLength; i++) { // :1744\n            WL_WriteByte(pBuf++, WL_ReadByte(&pWork->SSID[i])); // :1746\n        }\n        \n        // why are we writing length again?\n        WL_WriteByte(&pBuf[-i-1], i); // :1749\n    \n    } else {\n        pWork->Ofst.Beacon.SSID = 0; // :1753\n    }\n    \n    pBuf += SetSupRateSet(pBuf); // :1757\n    WL_WriteByte(pBuf++, 3);\n    WL_WriteByte(pBuf++, 1);\n    WL_WriteByte(pBuf++, pWork->CurrChannel);\n    \n    pWork->Ofst.Beacon.TIM = (u32)pBuf - (u32)pBody;\n    W_TXBUF_TIM = pWork->Ofst.Beacon.TIM + 2;\n    \n    WL_WriteByte(pBuf++, 5);\n    WL_WriteByte(pBuf++, 5);\n    WL_WriteByte(pBuf++, 0);\n    WL_WriteByte(pBuf++, pWork->DTIMPeriod);\n    WL_WriteByte(pBuf++, 0);\n    WL_WriteByte(pBuf++, 0);\n    WL_WriteByte(pBuf++, 0);\n    \n    pWork->Ofst.Beacon.GameInfo = (u32)pBuf - (u32)pBody;\n    pWork->GameInfoAlign = pWork->Ofst.Beacon.GameInfo & 1;\n    \n    WL_WriteByte(pBuf++, 0xDD);\n    WL_WriteByte(pBuf++, pWork->GameInfoLength + 8);\n    WL_WriteByte(pBuf++, 0); // 00:09:BF:00 (OUI)\n    WL_WriteByte(pBuf++, 9);\n    WL_WriteByte(pBuf++, 0xBF);\n    WL_WriteByte(pBuf++, 0);\n    \n    if (pWork->PowerMgtMode == 1) {\n        WL_WriteByte(pBuf++, pConfig->ActiveZone);\n        WL_WriteByte(pBuf++, pConfig->ActiveZone >> 8);\n    } else {\n        WL_WriteByte(pBuf++, 0xFF);\n        WL_WriteByte(pBuf++, 0xFF);\n    }\n    \n    vtsf = global_vtsf_var; // :1794\n    WL_WriteByte(pBuf++, vtsf); // :1795\n    WL_WriteByte(pBuf++, vtsf >> 8); // :1796\n    \n    p = pWork->GameInfoAdrs; // :1797\n    for (i = 0; i < pWork->GameInfoLength; i++) { // :1798\n        WL_WriteByte(pBuf++, WL_ReadByte(p)); // :1800\n        p++; // :1801\n    }\n    \n    if (pWork->GameInfoAlign != 0) {\n        p = (u8*)((u32)pWork->GameInfoAdrs + pWork->GameInfoLength - 1);\n        \n        for (i = 0; i < pWork->GameInfoLength; i++, p--) { // :1808\n            WL_WriteByte(p+1, WL_ReadByte(p)); // :1810\n        }\n    }\n    \n    if (wlMan->WlOperation & 4) { // :1814\n        u16* pId = (u16*)(((u32)pBuf + 3) & ~3); // r0 - :1816\n        pId[0] = 0xB6B8;\n        pId[1] = 0x1D46;\n    }\n    \n    pWork->bUpdateGameInfo = 0;\n    pFrm->MacHeader.Tx.MPDU = (u32)pBuf + 28 - (u32)pBody;\n}", "context": "#pragma pack(1)\n\ntypedef unsigned char u8;\ntypedef unsigned short u16;\ntypedef unsigned long u32;\ntypedef unsigned long long u64;\n\ntypedef signed char s8;\ntypedef signed short s16;\ntypedef signed long s32;\ntypedef signed long long s64;\n\ntypedef union {\n    struct {\n        u16 Status; // offset 00\n        u16 Status2; // offset 02\n        u16 rsv_RetryCount; // offset 04\n        u16 rsv_AppRate; // offset 06\n        u16 Service_Rate; // offset 08\n        u16 MPDU; // offset 0a\n    } Tx; // offset 00\n    struct {\n        u16 Status; // offset 00\n        u16 NextBnry; // offset 02\n        u16 TimeStamp; // offset 04\n        u16 Service_Rate; // offset 06\n        u16 MPDU; // offset 08\n        u16 rsv_RSSI; // offset 0a\n    } Rx; // offset 00\n} MAC_HEADER;\n\ntypedef union {\n    u16 Data; // offset 00\n    struct {\n        u16 Version : 2; // offset 00\n        u16 Type : 2; // offset 00\n        u16 SubType : 4; // offset 00\n        u16 ToDS : 1; // offset 00\n        u16 FromDS : 1; // offset 00\n        u16 MoreFrag : 1; // offset 00\n        u16 Retry : 1; // offset 00\n        u16 PowerMan : 1; // offset 00\n        u16 MoreData : 1; // offset 00\n        u16 WEP : 1; // offset 00\n        u16 Order : 1; // offset 00\n    } Bit; // offset 00\n} FRAME_CTRL;\n\ntypedef union {\n    u16 Data; // offset 00\n    struct {\n        u16 FragNum : 4; // offset 00\n        u16 SeqNum : 12; // offset 00\n    } Bit; // offset 00\n} SEQ_CTRL;\n\ntypedef struct {\n    FRAME_CTRL FrameCtrl; // offset 00\n    u16 DurationID; // offset 02\n    u16 Adrs1[3]; // offset 04\n    u16 Adrs2[3]; // offset 0a\n    u16 Adrs3[3]; // offset 10\n    SEQ_CTRL SeqCtrl; // offset 16\n} DATA_HEADER;\n\ntypedef struct {\n    MAC_HEADER MacHeader; // offset 00\n    DATA_HEADER Dot11Header; // offset 0c\n    u8 Body[4]; // offset 24\n} TXFRM_MAC;\n\ntypedef struct {\n    u16 state; // offset 00\n    u16 aid; // offset 02\n    u16 macAdrs[3]; // offset 04\n    u16 rssi; // offset 0a\n    u16 capaInfo; // offset 0c\n    u16 authSeed; // offset 0e\n    u16 supRateSet; // offset 10\n    u16 rsv; // offset 12\n    u16 lastSeqCtrl; // offset 14\n    u16 frameCount; // offset 16\n    u16 lifeTime; // offset 18\n    u16 maxLifeTime; // offset 1a\n} CAM_ELEMENT;\n\ntypedef struct {\n    CAM_ELEMENT* pCAM; // offset 00\n    u16 CamMaxStaNum; // offset 04\n    u16 MaxStaNum; // offset 06\n    u16 MacAdrs[3]; // offset 08\n    u16 RetryLimit; // offset 0e\n    u16 EnableChannel; // offset 10\n    u16 Mode; // offset 12\n    u16 Rate; // offset 14\n    u16 AuthAlgo; // offset 16\n    u16 WepMode; // offset 18\n    u16 WepKeyId; // offset 1a\n    u16 FrameLifeTimePerBeacon; // offset 1c\n    u16 BeaconType : 1; // offset 1e\n    u16 BcSsidResponse : 1; // offset 1e\n    u16 PreambleType : 1; // offset 1e\n    u16 MainAntenna : 1; // offset 1e\n    u16 Diversity : 1; // offset 1e\n    u16 UseAntenna : 1; // offset 1e\n    u16 BcnTxRxIndMsg : 1; // offset 1e\n    u16 NullKeyRes : 1; // offset 1e\n    u16 MulticastPass : 1; // offset 1e\n    u16 dmm : 7; // offset 1e\n    u16 ActiveZone; // offset 20\n    u16 DiagResult; // offset 22\n    u32 ParamFlag; // offset 24\n} CONFIG_PARAM;\n\ntypedef struct {\n    u16 Basic; // offset 00\n    u16 Support; // offset 02\n} RATE_SET;\n\ntypedef struct {\n    u64 NextTbttTsf; // offset 00\n    u16 STA; // offset 08\n    u16 RSSI; // offset 0a\n    u16 Mode; // offset 0c\n    u16 PowerMgtMode; // offset 0e\n    u16 PowerState; // offset 10\n    u16 bSynchro; // offset 12\n    u16 RxDtims; // offset 14\n    u16 PN15Rate; // offset 16\n    u16 SigTest2; // offset 18\n    u16 bFirstTbtt; // offset 1a\n    u16 ManCtrlRetry; // offset 1c\n    u16 SSIDLength; // offset 1e\n    u8 SSID[32]; // offset 20\n    u8 SSIDMask[32]; // offset 40\n    RATE_SET RateSet; // offset 60\n    u16 BSSID[3]; // offset 64\n    u16 AID; // offset 6a\n    u16 SeqNum; // offset 6c\n    u16 BeaconPeriod; // offset 6e\n    u16 ListenInterval; // offset 70\n    u16 CurrListenInterval; // offset 72\n    u16 DTIMPeriod; // offset 74\n    u16 DTIMCount; // offset 76\n    u16 rsvcc; // offset 78\n    u16 CurrChannel; // offset 7a\n    u16 CapaInfo; // offset 7c\n    u16 BeaconLostTh; // offset 7e\n    u16 BeaconLostCnt; // offset 80\n    u16 LinkAdrs[3]; // offset 82\n    u16 APCamAdrs; // offset 88\n    u16 FrameCtrl; // offset 8a\n    u16 FrameLifeTime; // offset 8c\n    u16 bExistTIM; // offset 8e\n    u16 TxPower; // offset 90\n    struct {\n        struct {\n            u16 SSID; // offset 00\n            u16 TIM; // offset 02\n            u16 GameInfo; // offset 04\n        } Beacon; // offset 00\n        struct {\n            u16 SSID; // offset 00\n        } ProbeReq; // offset 06\n        struct {\n            u16 Size; // offset 00\n        } RxBuf; // offset 08\n    } Ofst; // offset 92\n    void* GameInfoAdrs; // offset 9c\n    u16 GameInfoLength; // offset a0\n    u16 GameInfoAlign; // offset a2\n    u16 bUpdateGameInfo; // offset a4\n    u16 TmpttPs; // offset a6\n    u32 IntervalCount; // offset a8\n    u16 Scrambler; // offset ac\n    u16 DbgSeqNum; // offset ae\n    u16 FatalErr; // offset b0\n    u16 rsv; // offset b2\n    u16 CurrErrCount; // offset b4\n    u16 TxBufErrCount; // offset b6\n    u16 TxBufResCount; // offset b8\n    u16 WepErrCount; // offset ba\n    u16 MpEndErrCount; // offset bc\n    u16 NotPollTxErrCount; // offset be\n} WORK_PARAM;\n\ntypedef union {\n    u16 Data; // offset 00\n    struct {\n        u16 ESS : 1; // offset 00\n        u16 IBSS : 1; // offset 00\n        u16 CFPollable : 1; // offset 00\n        u16 CFPollRequest : 1; // offset 00\n        u16 Privacy : 1; // offset 00\n        u16 ShortPreamble : 1; // offset 00\n        u16 rsv6 : 1; // offset 00\n        u16 rsv7 : 1; // offset 00\n        u16 rsv8 : 1; // offset 00\n        u16 rsv9 : 1; // offset 00\n        u16 rsv10 : 1; // offset 00\n        u16 rsv11 : 1; // offset 00\n        u16 rsv12 : 1; // offset 00\n        u16 rsv13 : 1; // offset 00\n        u16 rsv14 : 1; // offset 00\n        u16 rsv15 : 1; // offset 00\n    } Bit; // offset 00\n} CAPA_INFO;\n\ntypedef struct {\n    u32 TimeStamp[2]; // offset 00\n    u16 BeaconInterval; // offset 08\n    CAPA_INFO CapaInfo; // offset 0a\n    u8 Buf[54]; // offset 0c\n    u8 pad[2]; // offset 42\n} BEACON_BODY;\n\ntypedef void TXFRM;\n\ntypedef struct {\n    u16 Busy; // offset 00\n    u16 InCount; // offset 02\n    u16 OutCount; // offset 04\n    u16 pad; // offset 06\n    TXFRM_MAC* pMacFrm; // offset 08\n    TXFRM* pFrm; // offset 0c\n    void (*pEndFunc)(TXFRM*, u32); // offset 10\n} TXQ;\n\ntypedef void WlMaMpEndInd;\n\ntypedef struct {\n    TXQ Txq[3]; // offset 00\n    TXQ Mp; // offset 3c\n    TXQ Key[2]; // offset 50\n    TXQ Beacon; // offset 78\n    u32 Flag; // offset 8c\n    WlMaMpEndInd* pMpEndInd; // offset 90\n    u16 TXOP; // offset 94\n    u16 TMPTT; // offset 96\n    u16 SetKeyMap; // offset 98\n    u16 GetKeyMap; // offset 9a\n    u16 DataLength; // offset 9c\n    u16 RetryLimit; // offset 9e\n    u16 RestBitmap; // offset a0\n    u16 BkKeyIn; // offset a2\n    u16 BkKeyOut; // offset a4\n    u16 BkSeqNum; // offset a6\n    u16 MpBlkCnt; // offset a8\n    u16 MpRstCnt; // offset aa\n    u16 MpLastOk; // offset ac\n    u16 TimeOutFrm; // offset ae\n} TX_CTRL;\n\n// dummy structures and types\ntypedef u8 TASK_MAN[380];\ntypedef u8 HEAP_MAN[192];\ntypedef u8 WlApElement[50];\ntypedef u8 MLME_MAN[32];\ntypedef u8 CMDIF_MAN[8];\ntypedef u8 RX_CTRL[84];\ntypedef u8 CAM_MAN[16];\ntypedef u8 WlCounter[180];\ntypedef u8 RAND_CTRL[8];\ntypedef u8 RF_CONFIG[16];\n\nstruct OSiAlarm {\n    u8 dummy[44];\n};\n\ntypedef struct {\n    TASK_MAN TaskMan; // offset 00\n    HEAP_MAN HeapMan; // offset 17c\n    WlApElement ApList[4]; // offset 23c\n    struct OSMessageQueue* pSendMsgQueue; // offset 304\n    struct OSMessageQueue* pRecvMsgQueue; // offset 308\n    u32 DmaChannel; // offset 30c\n    u32 DmaMaxCount; // offset 310\n    long lockID; // offset 314\n    void* pFlashImg; // offset 318\n    CONFIG_PARAM Config; // offset 31c\n    WORK_PARAM Work; // offset 344\n    MLME_MAN MLME; // offset 404\n    CMDIF_MAN CmdIf; // offset 424\n    TX_CTRL TxCtrl; // offset 42c\n    RX_CTRL RxCtrl; // offset 4dc\n    CAM_MAN CamMan; // offset 530\n    WlCounter Counter; // offset 540\n    RAND_CTRL Rand; // offset 5f4\n    RF_CONFIG Rf; // offset 5fc\n    struct OSiAlarm PeriodicAlarm; // offset 60c\n    struct OSiAlarm Alarm; // offset 638\n    struct OSiAlarm KeyAlarm; // offset 664\n    u32 WlDbgLevel; // offset 690\n    u16 WlOperation; // offset 694\n    u16 EnableChannel; // offset 696\n} WL_MAN;", "diff_flags": [], "diff_label": "", "libraries": []}