{"compiler": "mwcc_40_1028", "compiler_flags": "-inline off -g -proc arm7tdmi -fp soft -lang c99 -interworking -O4,s -char signed", "source_code": "u32 WCheckSSID(u16 len, u8* pSSID) { // WlNic.c:2494\n    WORK_PARAM* pWork = &wlMan->Work; // r2 - :2496\n    u8 *pBuf, *pMask; // r5, r6 - :2497\n    u32 mask, ssid, myss; // r0, r0, r0 - :2498\n    u32 i; // r7 - :2499\n    \n    if (len > 0x20)\n        return 0;\n    \n    if (pWork->SSIDLength == 0)\n        return 1;\n    \n    if (wlMan->MLME.State == 0x13) {\n        if (len < pWork->SSIDLength)\n            return 0;\n        \n        len = pWork->SSIDLength;\n        \n    } else {\n        if (len != pWork->SSIDLength) {\n            return 0;\n        }\n    }\n    \n    pBuf = pWork->SSID;\n    pMask = pWork->SSIDMask;\n    \n    for (i = 0; i < len; i++) {\n        mask = WL_ReadByte(pMask++);\n        ssid = WL_ReadByte(pSSID++);\n        myss = WL_ReadByte(pBuf++);\n        \n        if ((ssid | mask) != (myss | mask)) {\n            return 0;\n        }\n    }\n    \n    return 1;\n}", "context": "#pragma pack(1)\n\ntypedef unsigned char u8;\ntypedef unsigned short u16;\ntypedef unsigned long u32;\ntypedef unsigned long long u64;\n\ntypedef signed char s8;\ntypedef signed short s16;\ntypedef signed long s32;\ntypedef signed long long s64;\n\ntypedef int BOOL;\ntypedef int OSHeapHandle;\ntypedef int mbstate_t;\ntypedef u32 MATHCRC32Context;\ntypedef u32 REGType32;\ntypedef u32 OSIrqMask;\ntypedef u32 FSCommandType;\ntypedef u32 CARDEvent;\ntypedef u32 __file_handle;\ntypedef u32 size_t;\ntypedef u32 OSIntrMode;\ntypedef u32 fpos_t;\ntypedef u32 REGType32v;\ntypedef u32 FSEvent;\ntypedef u32 PMWakeUpTrigger;\ntypedef u32 PMLogic;\ntypedef u32 FSOverlayID;\ntypedef u32 VecFx10;\nstruct _OSThreadQueue {\n    struct _OSThread* head; // offset 00\n    struct _OSThread* tail; // offset 04\n};\ntypedef struct _OSThreadQueue OSThreadQueue;\nstruct OSContext {\n    u32 cpsr; // offset 00\n    u32 r[13]; // offset 04\n    u32 sp; // offset 38\n    u32 lr; // offset 3c\n    u32 pc_plus4; // offset 40\n    u32 sp_svc; // offset 44\n};\nstruct _OSMutexQueue {\n    struct OSMutex* head; // offset 00\n    struct OSMutex* tail; // offset 04\n};\nenum _enum_2150 {\n    OS_THREAD_STATE_WAITING = 0,\n    OS_THREAD_STATE_READY = 1,\n    OS_THREAD_STATE_TERMINATED = 2,\n};\nstruct _OSThreadLink {\n    struct _OSThread* prev; // offset 00\n    struct _OSThread* next; // offset 04\n};\nstruct _OSThread {\n    struct OSContext context; // offset 00\n    enum _enum_2150 state; // offset 48\n    struct _OSThread* next; // offset 4c\n    u32 id; // offset 50\n    u32 priority; // offset 54\n    void* profiler; // offset 58\n    struct _OSThreadQueue* queue; // offset 5c\n    struct _OSThreadLink link; // offset 60\n    struct OSMutex* mutex; // offset 68\n    struct _OSMutexQueue mutexQueue; // offset 6c\n    u32 stackTop; // offset 74\n    u32 stackBottom; // offset 78\n    u32 stackWarningOffset; // offset 7c\n    struct _OSThreadQueue joinQueue; // offset 80\n    void* specific[3]; // offset 88\n    struct OSiAlarm* alarmForSleep; // offset 94\n    void (*destructor)(void*); // offset 98\n    void* userParameter; // offset 9c\n    int systemErrno; // offset a0\n};\ntypedef struct _OSThread OSThread;\ntypedef struct OSContext OSContext;\ntypedef struct _OSThreadLink OSThreadLink;\nstruct _OSMutexLink {\n    struct OSMutex* next; // offset 00\n    struct OSMutex* prev; // offset 04\n};\nstruct OSMutex {\n    struct _OSThreadQueue queue; // offset 00\n    struct _OSThread* thread; // offset 08\n    long count; // offset 0c\n    struct _OSMutexLink link; // offset 10\n};\ntypedef struct OSMutex OSMutex;\ntypedef struct _OSMutexLink OSMutexLink;\ntypedef struct _OSMutexQueue OSMutexQueue;\nstruct OSiAlarm {\n    void (*handler)(void*); // offset 00\n    void* arg; // offset 04\n    u32 tag; // offset 08\n    u64 fire; // offset 0c\n    struct OSiAlarm* prev; // offset 14\n    struct OSiAlarm* next; // offset 18\n    u64 period; // offset 1c\n    u64 start; // offset 24\n};\ntypedef struct OSiAlarm OSAlarm;\ntypedef u64 REGType64;\ntypedef u64 REGType64v;\ntypedef u64 OSTick;\ntypedef u16 MATHCRC16Context;\ntypedef u16 MATHChecksum8Context;\ntypedef u16 wctype_t;\ntypedef u16 MATHChecksum16Context;\ntypedef u16 GXRgb;\ntypedef u16 REGType16;\ntypedef u16 PMBatteryLevel;\ntypedef u16 wint_t;\ntypedef u16 REGType16v;\ntypedef u16 GXRgba;\ntypedef u16 Wint_t;\ntypedef u16 OSBootType;\ntypedef u16 wchar_t;\ntypedef struct {\n    void (*func)(void*); // offset 00\n    u32 enable; // offset 04\n    void* arg; // offset 08\n} OSIrqCallbackInfo;\nstruct OSLockWord {\n    u32 lockFlag; // offset 00\n    u16 ownerID; // offset 04\n    u16 extension; // offset 06\n};\ntypedef struct OSLockWord OSLockWord;\ntypedef union {\n    u16 s; // offset 00\n    char c[2]; // offset 00\n} OSPrintWChar;\ntypedef struct {\n    u32 in; // offset 00\n    u32 out; // offset 04\n    OSPrintWChar buffer[512]; // offset 08\n} OSPrintServerBuffer;\nstruct OSThreadInfo {\n    u16 isNeedRescheduling; // offset 00\n    u16 irqDepth; // offset 02\n    struct _OSThread* current; // offset 04\n    struct _OSThread* list; // offset 08\n    void* switchCallback; // offset 0c\n};\ntypedef struct OSThreadInfo OSThreadInfo;\nstruct OSThreadResource {\n    int num; // offset 00\n};\ntypedef struct OSThreadResource OSThreadResource;\nstruct OSMessageQueue {\n    struct _OSThreadQueue queueSend; // offset 00\n    struct _OSThreadQueue queueReceive; // offset 08\n    void** msgArray; // offset 10\n    long msgCount; // offset 14\n    long firstIndex; // offset 18\n    long usedCount; // offset 1c\n};\ntypedef struct OSMessageQueue OSMessageQueue;\nenum _enum_16263 {\n    OS_ARENA_MAIN = 0,\n    OS_ARENA_MAIN_SUBPRIV = 1,\n    OS_ARENA_MAINEX = 2,\n    OS_ARENA_ITCM = 3,\n    OS_ARENA_DTCM = 4,\n    OS_ARENA_SHARED = 5,\n    OS_ARENA_WRAM_MAIN = 6,\n    OS_ARENA_WRAM_SUB = 7,\n    OS_ARENA_WRAM_SUBPRIV = 8,\n    OS_ARENA_MAX = 9,\n};\ntypedef u8 REGType8;\ntypedef u8 REGType8v;\ntypedef u8 MATHCRC8Context;\ntypedef struct {\n    void* lo[9]; // offset 00\n    void* hi[9]; // offset 24\n} OSArenaInfo;\nstruct OSArenaResource {\n    OSArenaInfo info; // offset 00\n};\ntypedef struct OSArenaResource OSArenaResource;\nstruct Cell {\n    struct Cell* prev; // offset 00\n    struct Cell* next; // offset 04\n    long size; // offset 08\n};\ntypedef struct Cell Cell;\nstruct HeapDesc {\n    long size; // offset 00\n    struct Cell* free; // offset 04\n    struct Cell* allocated; // offset 08\n};\ntypedef struct HeapDesc HeapDesc;\ntypedef struct {\n    int currentHeap; // offset 00\n    int numHeaps; // offset 04\n    void* arenaStart; // offset 08\n    void* arenaEnd; // offset 0c\n    struct HeapDesc* heapArray; // offset 10\n} OSHeapInfo;\ntypedef struct {\n    struct OSContext context; // offset 00\n    u32 cp15; // offset 48\n    u32 spsr; // offset 4c\n    u32 exinfo; // offset 50\n} OSiExContext;\nstruct OSiAlarmQueue {\n    struct OSiAlarm* head; // offset 00\n    struct OSiAlarm* tail; // offset 04\n};\nstruct OSAlarmResource {\n    int num; // offset 00\n};\ntypedef struct OSAlarmResource OSAlarmResource;\nstruct OSiVAlarmQueue {\n    struct OSiVAlarm* head; // offset 00\n    struct OSiVAlarm* tail; // offset 04\n};\nstruct OSiVAlarm {\n    void (*handler)(void*); // offset 00\n    void* arg; // offset 04\n    u32 tag; // offset 08\n    u32 frame; // offset 0c\n    s16 fire; // offset 10\n    s16 delay; // offset 12\n    struct OSiVAlarm* prev; // offset 14\n    struct OSiVAlarm* next; // offset 18\n    int period; // offset 1c\n    int finish; // offset 20\n    int canceled; // offset 24\n};\nstruct OSVAlarmResource {\n    int num; // offset 00\n};\ntypedef struct OSVAlarmResource OSVAlarmResource;\nenum _enum_24784 {\n    OS_PROCMODE_USER = 16,\n    OS_PROCMODE_FIQ = 17,\n    OS_PROCMODE_IRQ = 18,\n    OS_PROCMODE_SVC = 19,\n    OS_PROCMODE_ABORT = 23,\n    OS_PROCMODE_UNDEF = 27,\n    OS_PROCMODE_SYS = 31,\n};\nstruct OSBootInfo {\n    u16 boot_type; // offset 00\n    u16 length; // offset 02\n    u16 rssi; // offset 04\n    u16 bssid[3]; // offset 06\n    u16 ssidLength; // offset 0c\n    u8 ssid[32]; // offset 0e\n    u16 capaInfo; // offset 2e\n    struct {\n        u16 basic; // offset 00\n        u16 support; // offset 02\n    } rateSet; // offset 30\n    u16 beaconPeriod; // offset 34\n    u16 dtimPeriod; // offset 36\n    u16 channel; // offset 38\n    u16 cfpPeriod; // offset 3a\n    u16 cfpMaxDuration; // offset 3c\n    u16 rsv1; // offset 3e\n};\ntypedef struct OSBootInfo OSBootInfo;\nstruct OSBirthday {\n    u8 month; // offset 00\n    u8 day; // offset 01\n};\nstruct OSOwnerInfo {\n    u8 language; // offset 00\n    u8 favoriteColor; // offset 01\n    struct OSBirthday birthday; // offset 02\n    u16 nickName[11]; // offset 04\n    u16 nickNameLength; // offset 1a\n    u16 comment[27]; // offset 1c\n    u16 commentLength; // offset 52\n};\ntypedef struct OSOwnerInfo OSOwnerInfo;\ntypedef struct OSBirthday OSBirthday;\ntypedef struct {\n    u32 flag; // offset 00\n    struct _OSThreadQueue queue; // offset 04\n} OSEvent;\ntypedef union {\n    u32 b32; // offset 00\n    u16 b16; // offset 00\n} MIiDmaClearSrc;\ntypedef struct {\n    u16 srcNum; // offset 00\n    u16 srcBitNum : 8; // offset 02\n    u16 destBitNum : 8; // offset 02\n    u32 destOffset : 31; // offset 04\n    u32 destOffset0_on : 1; // offset 04\n} MIUnpackBitsParam;\ntypedef struct {\n    long (*initStream)(u8*, void*, void*); // offset 00\n    long (*terminateStream)(u8*); // offset 04\n    u8 (*readByteStream)(u8*); // offset 08\n    u16 (*readShortStream)(u8*); // offset 0c\n    u32 (*readWordStream)(u8*); // offset 10\n} MIReadStreamCallbacks;\nenum _enum_29898 {\n    MI_CTRDG_ROMCYCLE1_10 = 0,\n    MI_CTRDG_ROMCYCLE1_8 = 1,\n    MI_CTRDG_ROMCYCLE1_6 = 2,\n    MI_CTRDG_ROMCYCLE1_18 = 3,\n};\nenum _enum_30021 {\n    MI_CTRDG_ROMCYCLE2_6 = 0,\n    MI_CTRDG_ROMCYCLE2_4 = 1,\n};\nstruct MICache {\n    u32 pagewidth; // offset 00\n    struct MICachePage* valid; // offset 04\n    struct MICachePage* invalid; // offset 08\n    struct MICachePage* loading; // offset 0c\n    int valid_total; // offset 10\n    int invalid_total; // offset 14\n    int loading_total; // offset 18\n};\ntypedef struct MICache MICache;\nstruct MICachePage {\n    struct MICachePage* next; // offset 00\n    u32 offset; // offset 04\n    u8* buffer; // offset 08\n};\ntypedef struct MICachePage MICachePage;\nstruct MIDevice {\n    void* userdata; // offset 00\n    int (*Read)(void*, void*, u32, u32); // offset 04\n    int (*Write)(void*, void*, u32, u32); // offset 08\n};\ntypedef struct MIDevice MIDevice;\nenum _enum_31522 {\n    PXI_FIFO_TAG_EX = 0,\n    PXI_FIFO_TAG_USER_0 = 1,\n    PXI_FIFO_TAG_USER_1 = 2,\n    PXI_FIFO_TAG_SYSTEM = 3,\n    PXI_FIFO_TAG_NVRAM = 4,\n    PXI_FIFO_TAG_RTC = 5,\n    PXI_FIFO_TAG_TOUCHPANEL = 6,\n    PXI_FIFO_TAG_SOUND = 7,\n    PXI_FIFO_TAG_PM = 8,\n    PXI_FIFO_TAG_MIC = 9,\n    PXI_FIFO_TAG_WM = 10,\n    PXI_FIFO_TAG_FS = 11,\n    PXI_FIFO_TAG_OS = 12,\n    PXI_FIFO_TAG_CTRDG = 13,\n    PXI_FIFO_TAG_CARD = 14,\n    PXI_FIFO_TAG_WVR = 15,\n    PXI_FIFO_TAG_CTRDG_Ex = 16,\n    PXI_FIFO_TAG_CTRDG_PHI = 17,\n    PXI_MAX_FIFO_TAG = 32,\n};\nenum _enum_32007 {\n    PXI_PROC_ARM9 = 0,\n    PXI_PROC_ARM7 = 1,\n};\ntypedef union {\n    struct {\n        u32 tag : 5; // offset 00\n        u32 err : 1; // offset 00\n        u32 data : 26; // offset 00\n    } e; // offset 00\n    u32 raw; // offset 00\n} PXIFifoMessage;\nenum _enum_32197 {\n    PXI_FIFO_SUCCESS = 0,\n    PXI_FIFO_FAIL_SEND_ERR = 4294967295,\n    PXI_FIFO_FAIL_SEND_FULL = 4294967294,\n    PXI_FIFO_FAIL_RECV_ERR = 4294967293,\n    PXI_FIFO_FAIL_RECV_EMPTY = 4294967292,\n    PXI_FIFO_NO_CALLBACK_ENTRY = 4294967291,\n};\nstruct MATHMD5Context {\n    union {\n        struct {\n            u32 a; // offset 00\n            u32 b; // offset 04\n            u32 c; // offset 08\n            u32 d; // offset 0c\n        }; // offset 00\n        u32 state[4]; // offset 00\n    }; // offset 00\n    u64 length; // offset 10\n    union {\n        u32 buffer32[16]; // offset 00\n        u8 buffer8[64]; // offset 00\n    }; // offset 18\n};\ntypedef struct MATHMD5Context MATHMD5Context;\nstruct MATHiHMACFuncs {\n    u32 dlength; // offset 00\n    u32 blength; // offset 04\n    void* context; // offset 08\n    u8* hash_buf; // offset 0c\n    void (*HashReset)(void*); // offset 10\n    void (*HashSetSource)(void*, void*, u32); // offset 14\n    void (*HashGetDigest)(void*, void*); // offset 18\n};\ntypedef struct MATHiHMACFuncs MATHiHMACFuncs;\nstruct MATHSHA1Context {\n    u32 h[5]; // offset 00\n    u8 block[64]; // offset 14\n    u32 pool; // offset 54\n    u32 blocks_low; // offset 58\n    u32 blocks_high; // offset 5c\n};\ntypedef struct MATHSHA1Context MATHSHA1Context;\nstruct MATHCRC8Table {\n    u8 table[256]; // offset 00\n};\ntypedef struct MATHCRC8Table MATHCRC8Table;\nstruct MATHCRC16Table {\n    u16 table[256]; // offset 00\n};\ntypedef struct MATHCRC16Table MATHCRC16Table;\nstruct MATHCRC32Table {\n    u32 table[256]; // offset 00\n};\ntypedef struct MATHCRC32Table MATHCRC32Table;\nstruct MATHSHA256Context {\n    u32 h[8]; // offset 00\n    u32 Nl; // offset 20\n    u32 Nh; // offset 24\n    u8 data[64]; // offset 28\n    int num; // offset 68\n};\ntypedef struct MATHSHA256Context MATHSHA256Context;\nenum _enum_35466 {\n    EXI_GPIOIF_SERIAL = 0,\n    EXI_GPIOIF_UNDEF = 16384,\n    EXI_GPIOIF_GPIO = 32768,\n    EXI_GPIOIF_JOY = 49152,\n};\nenum SNDOutput {\n    SND_OUTPUT_MIXER = 0,\n    SND_OUTPUT_CHANNEL1 = 1,\n    SND_OUTPUT_CHANNEL3 = 2,\n    SND_OUTPUT_CHANNEL1_3 = 3,\n};\nenum SNDChannelOut {\n    SND_CHANNEL_OUT_MIXER = 0,\n    SND_CHANNEL_OUT_BYPASS = 1,\n};\nenum _enum_36756 {\n    SND_WAVE_FORMAT_PCM8 = 0,\n    SND_WAVE_FORMAT_PCM16 = 1,\n    SND_WAVE_FORMAT_ADPCM = 2,\n    SND_WAVE_FORMAT_PSG = 3,\n    SND_WAVE_FORMAT_NOISE = 3,\n};\nenum _enum_36906 {\n    SND_CHANNEL_LOOP_MANUAL = 0,\n    SND_CHANNEL_LOOP_REPEAT = 1,\n    SND_CHANNEL_LOOP_1SHOT = 2,\n};\nenum _enum_37008 {\n    SND_CHANNEL_DATASHIFT_NONE = 0,\n    SND_CHANNEL_DATASHIFT_1BIT = 1,\n    SND_CHANNEL_DATASHIFT_2BIT = 2,\n    SND_CHANNEL_DATASHIFT_4BIT = 3,\n};\nenum _enum_37153 {\n    SND_DUTY_1_8 = 0,\n    SND_DUTY_2_8 = 1,\n    SND_DUTY_3_8 = 2,\n    SND_DUTY_4_8 = 3,\n    SND_DUTY_5_8 = 4,\n    SND_DUTY_6_8 = 5,\n    SND_DUTY_7_8 = 6,\n};\nenum _enum_40436 {\n    SND_CAPTURE_0 = 0,\n    SND_CAPTURE_1 = 1,\n};\nenum _enum_40489 {\n    SND_CAPTURE_FORMAT_PCM16 = 0,\n    SND_CAPTURE_FORMAT_PCM8 = 1,\n};\nenum _enum_40569 {\n    SND_CAPTURE_IN_MIXER = 0,\n    SND_CAPTURE_IN_CHANNEL = 1,\n    SND_CAPTURE_IN_MIXER_L = 0,\n    SND_CAPTURE_IN_MIXER_R = 0,\n    SND_CAPTURE_IN_CHANNEL0 = 1,\n    SND_CAPTURE_IN_CHANNEL2 = 1,\n};\nenum _enum_40756 {\n    SND_CAPTURE_OUT_NORMAL = 0,\n    SND_CAPTURE_OUT_CHANNEL_MIX = 1,\n    SND_CAPTURE_OUT_CHANNEL0_MIX = 1,\n    SND_CAPTURE_OUT_CHANNEL2_MIX = 1,\n};\nenum SNDExChannelCallbackStatus {\n    SND_EX_CHANNEL_CALLBACK_DROP = 0,\n    SND_EX_CHANNEL_CALLBACK_FINISH = 1,\n};\nstruct SNDLfoParam {\n    u8 target; // offset 00\n    u8 speed; // offset 01\n    u8 depth; // offset 02\n    u8 range; // offset 03\n    u16 delay; // offset 04\n};\nstruct SNDLfo {\n    struct SNDLfoParam param; // offset 00\n    u16 delay_counter; // offset 06\n    u16 counter; // offset 08\n};\nstruct SNDWaveParam {\n    u8 format; // offset 00\n    u8 loopflag; // offset 01\n    u16 rate; // offset 02\n    u16 timer; // offset 04\n    u16 loopstart; // offset 06\n    u32 looplen; // offset 08\n};\nstruct SNDExChannel {\n    u8 myNo; // offset 00\n    u8 type; // offset 01\n    u8 env_status; // offset 02\n    u8 active_flag : 1; // offset 03\n    u8 start_flag : 1; // offset 03\n    u8 auto_sweep : 1; // offset 03\n    u8 sync_flag : 5; // offset 03\n    u8 pan_range; // offset 04\n    u8 original_key; // offset 05\n    s16 user_decay2; // offset 06\n    u8 key; // offset 08\n    u8 velocity; // offset 09\n    s8 init_pan; // offset 0a\n    s8 user_pan; // offset 0b\n    s16 user_decay; // offset 0c\n    s16 user_pitch; // offset 0e\n    long env_decay; // offset 10\n    long sweep_counter; // offset 14\n    long sweep_length; // offset 18\n    u8 attack; // offset 1c\n    u8 sustain; // offset 1d\n    u16 decay; // offset 1e\n    u16 release; // offset 20\n    u8 prio; // offset 22\n    u8 pan; // offset 23\n    u16 volume; // offset 24\n    u16 timer; // offset 26\n    struct SNDLfo lfo; // offset 28\n    s16 sweep_pitch; // offset 32\n    long length; // offset 34\n    struct SNDWaveParam wave; // offset 38\n    union {\n        void* data; // offset 00\n        enum _enum_37153 duty; // offset 00\n    }; // offset 44\n    void (*callback)(struct SNDExChannel*, enum SNDExChannelCallbackStatus, void*); // offset 48\n    void* callback_data; // offset 4c\n    struct SNDExChannel* nextLink; // offset 50\n};\ntypedef struct SNDExChannel SNDExChannel;\ntypedef struct SNDLfo SNDLfo;\ntypedef struct SNDLfoParam SNDLfoParam;\ntypedef struct SNDWaveParam SNDWaveParam;\nstruct SNDSeqCache {\n    u32* base; // offset 00\n    u32* endp; // offset 04\n    u32 buffer[4]; // offset 08\n};\ntypedef struct SNDSeqCache SNDSeqCache;\nstruct SNDPlayer {\n    u8 active_flag : 1; // offset 00\n    u8 prepared_flag : 1; // offset 00\n    u8 pause_flag : 1; // offset 00\n    u8 pad_ : 5; // offset 00\n    u8 myNo; // offset 01\n    u8 pad2_; // offset 02\n    u8 pad3_; // offset 03\n    u8 prio; // offset 04\n    u8 volume; // offset 05\n    s16 extFader; // offset 06\n    u8 tracks[16]; // offset 08\n    u16 tempo; // offset 18\n    u16 tempo_ratio; // offset 1a\n    u16 tempo_counter; // offset 1c\n    u16 pad__; // offset 1e\n    struct SNDBankData* bank; // offset 20\n};\ntypedef struct SNDPlayer SNDPlayer;\nstruct SNDWaveArcLink {\n    struct SNDWaveArc* waveArc; // offset 00\n    struct SNDWaveArcLink* next; // offset 04\n};\nstruct SNDBinaryFileHeader {\n    char signature[4]; // offset 00\n    u16 byteOrder; // offset 04\n    u16 version; // offset 06\n    u32 fileSize; // offset 08\n    u16 headerSize; // offset 0c\n    u16 dataBlocks; // offset 0e\n};\nstruct SNDBinaryBlockHeader {\n    u32 kind; // offset 00\n    u32 size; // offset 04\n};\nstruct SNDBankData {\n    struct SNDBinaryFileHeader fileHeader; // offset 00\n    struct SNDBinaryBlockHeader blockHeader; // offset 10\n    struct SNDWaveArcLink waveArcLink[4]; // offset 18\n    u32 instCount; // offset 38\n    u32 instOffset[0]; // offset 3c\n};\ntypedef struct SNDBankData SNDBankData;\ntypedef struct SNDBinaryFileHeader SNDBinaryFileHeader;\ntypedef struct SNDBinaryBlockHeader SNDBinaryBlockHeader;\ntypedef struct SNDWaveArcLink SNDWaveArcLink;\nstruct SNDWaveArc {\n    struct SNDBinaryFileHeader fileHeader; // offset 00\n    struct SNDBinaryBlockHeader blockHeader; // offset 10\n    struct SNDWaveArcLink* topLink; // offset 18\n    u32 reserved[7]; // offset 1c\n    u32 waveCount; // offset 38\n    u32 waveOffset[0]; // offset 3c\n};\ntypedef struct SNDWaveArc SNDWaveArc;\nstruct SNDTrack {\n    u8 active_flag : 1; // offset 00\n    u8 note_wait : 1; // offset 00\n    u8 mute_flag : 1; // offset 00\n    u8 tie_flag : 1; // offset 00\n    u8 note_finish_wait : 1; // offset 00\n    u8 porta_flag : 1; // offset 00\n    u8 cmp_flag : 1; // offset 00\n    u8 channel_mask_flag : 1; // offset 00\n    u8 pan_range; // offset 01\n    u16 prgNo; // offset 02\n    u8 volume; // offset 04\n    u8 volume2; // offset 05\n    s8 pitch_bend; // offset 06\n    u8 bend_range; // offset 07\n    s8 pan; // offset 08\n    s8 ext_pan; // offset 09\n    s16 extFader; // offset 0a\n    s16 ext_pitch; // offset 0c\n    u8 attack; // offset 0e\n    u8 decay; // offset 0f\n    u8 sustain; // offset 10\n    u8 release; // offset 11\n    u8 prio; // offset 12\n    s8 transpose; // offset 13\n    u8 porta_key; // offset 14\n    u8 porta_time; // offset 15\n    s16 sweep_pitch; // offset 16\n    struct SNDLfoParam mod; // offset 18\n    u16 channel_mask; // offset 1e\n    long wait; // offset 20\n    u8* base; // offset 24\n    u8* cur; // offset 28\n    u8* call_stack[3]; // offset 2c\n    u8 loop_count[3]; // offset 38\n    u8 call_stack_depth; // offset 3b\n    struct SNDExChannel* channel_list; // offset 3c\n};\ntypedef struct SNDTrack SNDTrack;\nenum _enum_48280 {\n    SND_SEQ_MUTE_OFF = 0,\n    SND_SEQ_MUTE_NO_STOP = 1,\n    SND_SEQ_MUTE_RELEASE = 2,\n    SND_SEQ_MUTE_STOP = 3,\n};\nenum _enum_48508 {\n    SEQ_ARG_U8 = 0,\n    SEQ_ARG_S16 = 1,\n    SEQ_ARG_VMIDI = 2,\n    SEQ_ARG_RANDOM = 3,\n    SEQ_ARG_VARIABLE = 4,\n};\nstruct SNDMidiChannel {\n    struct SNDExChannel* chp; // offset 00\n    u8 key; // offset 04\n    u8 pad1; // offset 05\n    u16 pad2; // offset 06\n};\nstruct SNDMidiTrack {\n    struct SNDMidiChannel channels[16]; // offset 00\n    struct SNDLfoParam mod; // offset 80\n    s16 sweep_pitch; // offset 86\n    u16 prgNo; // offset 88\n    s8 pitchbend; // offset 8a\n    u8 porta_time; // offset 8b\n    u8 volume; // offset 8c\n    s8 pan; // offset 8d\n    u8 expression; // offset 8e\n    s8 transpose; // offset 8f\n    u8 prio; // offset 90\n    u8 bendrange; // offset 91\n    u8 porta_flag; // offset 92\n    u8 porta_key; // offset 93\n    u8 attack; // offset 94\n    u8 decay; // offset 95\n    u8 sustain; // offset 96\n    u8 release; // offset 97\n    u8 rpnLSB; // offset 98\n    u8 rpnMSB; // offset 99\n    u8 nrpnLSB; // offset 9a\n    u8 nrpnMSB; // offset 9b\n    u8 rpn_flag; // offset 9c\n    u8 pad1; // offset 9d\n    u16 pad2; // offset 9e\n};\nstruct SNDMidiPlayer {\n    struct SNDBankData* bank; // offset 00\n    struct SNDMidiTrack track[16]; // offset 04\n    u8 main_volume; // offset a04\n    u8 prio; // offset a05\n    u16 pad; // offset a06\n};\ntypedef struct SNDMidiPlayer SNDMidiPlayer;\ntypedef struct SNDMidiTrack SNDMidiTrack;\ntypedef struct SNDMidiChannel SNDMidiChannel;\nstruct SNDInstParam {\n    u16 wave[2]; // offset 00\n    u8 original_key; // offset 04\n    u8 attack; // offset 05\n    u8 decay; // offset 06\n    u8 sustain; // offset 07\n    u8 release; // offset 08\n    u8 pan; // offset 09\n};\nstruct SNDInstData {\n    u8 type; // offset 00\n    u8 padding_; // offset 01\n    struct SNDInstParam param; // offset 02\n};\ntypedef struct SNDInstData SNDInstData;\ntypedef struct SNDInstParam SNDInstParam;\nstruct SNDKeySplit {\n    u8 key[8]; // offset 00\n    struct SNDInstData instOffset[0]; // offset 08\n};\ntypedef struct SNDKeySplit SNDKeySplit;\nstruct SNDDrumSet {\n    u8 min; // offset 00\n    u8 max; // offset 01\n    struct SNDInstData instOffset[0]; // offset 02\n};\ntypedef struct SNDDrumSet SNDDrumSet;\nstruct SNDInstPos {\n    u32 prgNo; // offset 00\n    u32 index; // offset 04\n};\ntypedef struct SNDInstPos SNDInstPos;\nstruct SNDWaveData {\n    struct SNDWaveParam param; // offset 00\n    u8 samples[0]; // offset 0c\n};\ntypedef struct SNDWaveData SNDWaveData;\nstruct SNDSharedWork {\n    u32 finishCommandTag; // offset 00\n    u32 playerStatus; // offset 04\n    u16 channelStatus; // offset 08\n    u16 captureStatus; // offset 0a\n    u32 padding[5]; // offset 0c\n    struct {\n        s16 variable[16]; // offset 00\n        u32 tickCounter; // offset 20\n    } player[16]; // offset 20\n    s16 globalVariable[16]; // offset 260\n};\ntypedef struct SNDSharedWork SNDSharedWork;\nstruct SNDAlarm {\n    u8 enable; // offset 00\n    u8 id; // offset 01\n    u8 count; // offset 02\n    u8 padding; // offset 03\n    struct {\n        u64 tick; // offset 00\n        u64 period; // offset 08\n    } setting; // offset 04\n    struct OSiAlarm alarm; // offset 14\n};\nstruct SNDWork {\n    struct SNDExChannel channel[16]; // offset 00\n    struct SNDPlayer player[16]; // offset 540\n    struct SNDTrack track[32]; // offset 780\n    struct SNDAlarm alarm[8]; // offset f80\n};\ntypedef struct SNDWork SNDWork;\ntypedef struct SNDAlarm SNDAlarm;\nstruct SNDDriverInfo {\n    struct SNDWork work; // offset 00\n    u32 chCtrl[16]; // offset 1180\n    struct SNDWork* workAddress; // offset 11c0\n    u32 lockedChannels; // offset 11c4\n    u32 padding[6]; // offset 11c8\n};\ntypedef struct SNDDriverInfo SNDDriverInfo;\nenum SNDEnvStatus {\n    SND_ENV_ATTACK = 0,\n    SND_ENV_DECAY = 1,\n    SND_ENV_SUSTAIN = 2,\n    SND_ENV_RELEASE = 3,\n};\nstruct SNDChannelInfo {\n    int activeFlag : 1; // offset 00\n    int lockFlag : 1; // offset 00\n    u16 volume; // offset 04\n    u8 pan; // offset 06\n    u8 pad_; // offset 07\n    enum SNDEnvStatus envStatus; // offset 08\n};\ntypedef struct SNDChannelInfo SNDChannelInfo;\nstruct SNDPlayerInfo {\n    int activeFlag : 1; // offset 00\n    int pauseFlag : 1; // offset 00\n    u16 trackBitMask; // offset 04\n    u16 tempo; // offset 06\n    u8 volume; // offset 08\n    u8 pad_; // offset 09\n    u16 pad2_; // offset 0a\n};\ntypedef struct SNDPlayerInfo SNDPlayerInfo;\nstruct SNDTrackInfo {\n    u16 prgNo; // offset 00\n    u8 volume; // offset 02\n    u8 volume2; // offset 03\n    s8 pitchBend; // offset 04\n    u8 bendRange; // offset 05\n    u8 pan; // offset 06\n    s8 transpose; // offset 07\n    u8 pad_; // offset 08\n    u8 chCount; // offset 09\n    u8 channel[16]; // offset 0a\n};\ntypedef struct SNDTrackInfo SNDTrackInfo;\nenum SNDCommandID {\n    SND_COMMAND_START_SEQ = 0,\n    SND_COMMAND_STOP_SEQ = 1,\n    SND_COMMAND_PREPARE_SEQ = 2,\n    SND_COMMAND_START_PREPARED_SEQ = 3,\n    SND_COMMAND_PAUSE_SEQ = 4,\n    SND_COMMAND_SKIP_SEQ = 5,\n    SND_COMMAND_PLAYER_PARAM = 6,\n    SND_COMMAND_TRACK_PARAM = 7,\n    SND_COMMAND_MUTE_TRACK = 8,\n    SND_COMMAND_ALLOCATABLE_CHANNEL = 9,\n    SND_COMMAND_PLAYER_LOCAL_VAR = 10,\n    SND_COMMAND_PLAYER_GLOBAL_VAR = 11,\n    SND_COMMAND_START_TIMER = 12,\n    SND_COMMAND_STOP_TIMER = 13,\n    SND_COMMAND_SETUP_CHANNEL_PCM = 14,\n    SND_COMMAND_SETUP_CHANNEL_PSG = 15,\n    SND_COMMAND_SETUP_CHANNEL_NOISE = 16,\n    SND_COMMAND_SETUP_CAPTURE = 17,\n    SND_COMMAND_SETUP_ALARM = 18,\n    SND_COMMAND_CHANNEL_TIMER = 19,\n    SND_COMMAND_CHANNEL_VOLUME = 20,\n    SND_COMMAND_CHANNEL_PAN = 21,\n    SND_COMMAND_SURROUND_DECAY = 22,\n    SND_COMMAND_MASTER_VOLUME = 23,\n    SND_COMMAND_MASTER_PAN = 24,\n    SND_COMMAND_OUTPUT_SELECTOR = 25,\n    SND_COMMAND_LOCK_CHANNEL = 26,\n    SND_COMMAND_UNLOCK_CHANNEL = 27,\n    SND_COMMAND_STOP_UNLOCKED_CHANNEL = 28,\n    SND_COMMAND_SHARED_WORK = 29,\n    SND_COMMAND_INVALIDATE_SEQ = 30,\n    SND_COMMAND_INVALIDATE_BANK = 31,\n    SND_COMMAND_INVALIDATE_WAVE = 32,\n    SND_COMMAND_READ_DRIVER_INFO = 33,\n};\nstruct SNDCommand {\n    struct SNDCommand* next; // offset 00\n    enum SNDCommandID id; // offset 04\n    u32 arg[4]; // offset 08\n};\ntypedef struct SNDCommand SNDCommand;\nenum SPIDeviceType {\n    SPI_DEVICE_TYPE_TP = 0,\n    SPI_DEVICE_TYPE_NVRAM = 1,\n    SPI_DEVICE_TYPE_MIC = 2,\n    SPI_DEVICE_TYPE_PM = 3,\n    SPI_DEVICE_TYPE_ARM7 = 4,\n    SPI_DEVICE_TYPE_MAX = 5,\n};\nstruct SPIEntry {\n    enum SPIDeviceType type; // offset 00\n    u32 process; // offset 04\n    u32 arg[4]; // offset 08\n};\nstruct SPIWork {\n    int exception; // offset 00\n    enum SPIDeviceType type; // offset 04\n    struct _OSThread thread; // offset 08\n    u64 stack[64]; // offset ac\n    struct OSMessageQueue message; // offset 2ac\n    void* msg_buf[16]; // offset 2cc\n    struct SPIEntry entry[16]; // offset 30c\n    u32 entryIndex; // offset 48c\n    struct _OSThreadQueue lock; // offset 490\n    u32 lockId; // offset 498\n};\ntypedef struct SPIWork SPIWork;\ntypedef struct SPIEntry SPIEntry;\nenum PMStatus {\n    PM_STATUS_READY = 0,\n    PM_STATUS_START_SLEEP = 1,\n    PM_STATUS_UTILITY = 2,\n    PM_STATUS_READ_REGISTER = 3,\n    PM_STATUS_WRITE_REGISTER = 4,\n};\nstruct PMWork {\n    u16 command[16]; // offset 00\n    enum PMStatus status; // offset 20\n    u32 param; // offset 24\n    u32 regNumber; // offset 28\n};\ntypedef struct PMWork PMWork;\nenum _enum_63738 {\n    PM_LED_NONE = 0,\n    PM_LED_ON = 1,\n    PM_LED_BLINK_LOW = 2,\n    PM_LED_BLINK_HIGH = 3,\n};\nenum _enum_64984 {\n    PM_LED_PATTERN_NONE = 0,\n    PM_LED_PATTERN_ON = 1,\n    PM_LED_PATTERN_BLINK_LOW = 2,\n    PM_LED_PATTERN_BLINK_HIGH = 3,\n    PM_LED_PATTERN_BLINK1 = 4,\n    PM_LED_PATTERN_BLINK2 = 5,\n    PM_LED_PATTERN_BLINK3 = 6,\n    PM_LED_PATTERN_BLINK4 = 7,\n    PM_LED_PATTERN_BLINK5 = 8,\n    PM_LED_PATTERN_BLINK6 = 9,\n    PM_LED_PATTERN_BLINK8 = 10,\n    PM_LED_PATTERN_BLINK10 = 11,\n    PM_LED_PATTERN_PATTERN1 = 12,\n    PM_LED_PATTERN_PATTERN2 = 13,\n    PM_LED_PATTERN_PATTERN3 = 14,\n    PM_LED_PATTERN_WIRELESS = 15,\n};\ntypedef struct {\n    u64 pattern; // offset 00\n    u16 patternSize; // offset 08\n    u16 patternResolution; // offset 0a\n} PMiBlinkPatternData;\nstruct NVRAMWork {\n    u16 command[16]; // offset 00\n};\ntypedef struct NVRAMWork NVRAMWork;\nenum TPStatus {\n    TP_STATUS_READY = 0,\n    TP_STATUS_AUTO_START = 1,\n    TP_STATUS_AUTO_SAMPLING = 2,\n    TP_STATUS_AUTO_WAIT_END = 3,\n};\nstruct TPWork {\n    u16 command[16]; // offset 00\n    enum TPStatus status; // offset 20\n    long range; // offset 24\n    long rangeMin; // offset 28\n    struct OSiVAlarm vAlarm[4]; // offset 2c\n    u16 vCount[4]; // offset cc\n};\ntypedef struct TPWork TPWork;\nunion SPITpData {\n    struct {\n        u32 x : 12; // offset 00\n        u32 y : 12; // offset 00\n        u32 touch : 1; // offset 00\n        u32 validity : 2; // offset 00\n        u32 dummy : 5; // offset 00\n    } e; // offset 00\n    u32 raw; // offset 00\n    u8 bytes[4]; // offset 00\n    u16 halfs[2]; // offset 00\n};\ntypedef union SPITpData SPITpData;\nenum SPITpValidity {\n    SPI_TP_VALIDITY_VALID = 0,\n    SPI_TP_VALIDITY_INVALID_X = 1,\n    SPI_TP_VALIDITY_INVALID_Y = 2,\n    SPI_TP_VALIDITY_INVALID_XY = 3,\n};\nenum _enum_69614 {\n    TP_DETECT_AXIS_X = 0,\n    TP_DETECT_AXIS_Y = 1,\n};\nenum MICStatus {\n    MIC_STATUS_READY = 0,\n    MIC_STATUS_AUTO_START = 1,\n    MIC_STATUS_AUTO_SAMPLING = 2,\n    MIC_STATUS_AUTO_END = 3,\n    MIC_STATUS_END_WAIT = 4,\n};\nstruct MICWork {\n    u16 command[16]; // offset 00\n    enum MICStatus status; // offset 20\n    u16 type; // offset 24\n    u16 admode; // offset 26\n    void* buf; // offset 28\n    u32 index; // offset 2c\n    u32 size; // offset 30\n    u16 timerValue; // offset 34\n    u16 timerPrescaler; // offset 36\n    u16 temp16; // offset 38\n    u16 temporary; // offset 3a\n};\ntypedef struct MICWork MICWork;\nstruct MICIntrInfo {\n    u32 count; // offset 00\n    u32 sp; // offset 04\n    u32 ie; // offset 08\n    u32 handler; // offset 0c\n};\ntypedef struct MICIntrInfo MICIntrInfo;\nstruct MICIntrPrio {\n    u32 ieBit; // offset 00\n    u32 tableIndex; // offset 04\n};\ntypedef struct MICIntrPrio MICIntrPrio;\ntypedef void FSArgumentForSuspend;\ntypedef void FSArgumentForUnmount;\ntypedef void FSArgumentForActivate;\ntypedef void FSArgumentForIdle;\ntypedef void FSArgumentForMount;\ntypedef void FSArgumentForCloseFile;\ntypedef void FSArgumentForFlushFile;\ntypedef void FSArgumentForCloseDirectory;\ntypedef void FSArgumentForResume;\nstruct CARDRomRegion {\n    u32 offset; // offset 00\n    u32 length; // offset 04\n};\nstruct FSOverlaySource {\n    struct FSArchive* arc; // offset 00\n    struct CARDRomRegion ovt9; // offset 04\n    struct CARDRomRegion ovt7; // offset 0c\n    void* digest_key_ptr; // offset 14\n    u32 digest_key_len; // offset 18\n};\ntypedef struct FSOverlaySource FSOverlaySource;\nenum FSResult {\n    FS_RESULT_SUCCESS = 0,\n    FS_RESULT_FAILURE = 1,\n    FS_RESULT_BUSY = 2,\n    FS_RESULT_CANCELED = 3,\n    FS_RESULT_CANCELLED = 3,\n    FS_RESULT_UNSUPPORTED = 4,\n    FS_RESULT_ERROR = 5,\n    FS_RESULT_INVALID_PARAMETER = 6,\n    FS_RESULT_NO_MORE_RESOURCE = 7,\n    FS_RESULT_ALREADY_DONE = 8,\n    FS_RESULT_PERMISSION_DENIED = 9,\n    FS_RESULT_MEDIA_FATAL = 10,\n    FS_RESULT_NO_ENTRY = 11,\n    FS_RESULT_MEDIA_NOTHING = 12,\n    FS_RESULT_MEDIA_UNKNOWN = 13,\n    FS_RESULT_BAD_FORMAT = 14,\n    FS_RESULT_MAX = 15,\n    FS_RESULT_PROC_ASYNC = 256,\n    FS_RESULT_PROC_DEFAULT = 257,\n    FS_RESULT_PROC_UNKNOWN = 258,\n};\nstruct FSArchive {\n    union {\n        char ptr[4]; // offset 00\n        u32 pack; // offset 00\n    } name; // offset 00\n    struct FSArchive* next; // offset 04\n    struct FSFile* list; // offset 08\n    struct _OSThreadQueue queue; // offset 0c\n    u32 flag; // offset 14\n    u32 command; // offset 18\n    enum FSResult result; // offset 1c\n    void* userdata; // offset 20\n    struct FSArchiveInterface* vtbl; // offset 24\n    union {\n        u8 reserved2[52]; // offset 00\n        struct {\n            u32 base; // offset 00\n            u32 fat; // offset 04\n            u32 fat_size; // offset 08\n            u32 fnt; // offset 0c\n            u32 fnt_size; // offset 10\n            u32 fat_bak; // offset 14\n            u32 fnt_bak; // offset 18\n            void* load_mem; // offset 1c\n            enum FSResult (*read_func)(struct FSArchive*, void*, u32, u32); // offset 20\n            enum FSResult (*write_func)(struct FSArchive*, void*, u32, u32); // offset 24\n            u8 reserved3[4]; // offset 28\n            enum FSResult (*proc)(struct FSFile*, u32); // offset 2c\n            u32 proc_flag; // offset 30\n        }; // offset 00\n    }; // offset 28\n};\ntypedef struct FSArchive FSArchive;\nstruct FSFileID {\n    struct FSArchive* arc; // offset 00\n    u32 file_id; // offset 04\n};\ntypedef struct {\n    struct FSFileID id; // offset 00\n} FSOpenFileFastInfo;\ntypedef struct {\n    void* src; // offset 00\n    u32 len_org; // offset 04\n    u32 len; // offset 08\n} FSWriteFileInfo;\nstruct FSDirPos {\n    struct FSArchive* arc; // offset 00\n    u16 own_id; // offset 04\n    u16 index; // offset 06\n    u32 pos; // offset 08\n};\ntypedef struct {\n    struct FSDirPos pos; // offset 00\n} FSSeekDirInfo;\ntypedef struct {\n    void* dst; // offset 00\n    u32 len_org; // offset 04\n    u32 len; // offset 08\n} FSReadFileInfo;\ntypedef struct {\n    struct FSDirPos pos; // offset 00\n    char* path; // offset 0c\n    int find_directory; // offset 10\n    union {\n        struct FSFileID* file; // offset 00\n        struct FSDirPos* dir; // offset 00\n    } result; // offset 14\n} FSFindPathInfo;\ntypedef struct {\n    u8* buf; // offset 00\n    u32 buf_len; // offset 04\n    u16 total_len; // offset 08\n    u16 dir_id; // offset 0a\n} FSGetPathInfo;\ntypedef struct {\n    union {\n        struct FSFileID file_id; // offset 00\n        struct FSDirPos dir_id; // offset 00\n    }; // offset 00\n    u32 is_directory; // offset 0c\n    u32 name_len; // offset 10\n    char name[128]; // offset 14\n} FSDirEntry;\ntypedef struct {\n    FSDirEntry* p_entry; // offset 00\n    int skip_string; // offset 04\n} FSReadDirInfo;\ntypedef struct {\n    u32 top; // offset 00\n    u32 bottom; // offset 04\n    u32 index; // offset 08\n} FSOpenFileDirectInfo;\ntypedef struct {\n    u32 reserved; // offset 00\n} FSCloseFileInfo;\nunion FSROMFATCommandInfo {\n    FSReadFileInfo readfile; // offset 00\n    FSWriteFileInfo writefile; // offset 00\n    FSSeekDirInfo seekdir; // offset 00\n    FSReadDirInfo readdir; // offset 00\n    FSFindPathInfo findpath; // offset 00\n    FSGetPathInfo getpath; // offset 00\n    FSOpenFileFastInfo openfilefast; // offset 00\n    FSOpenFileDirectInfo openfiledirect; // offset 00\n    FSCloseFileInfo closefile; // offset 00\n};\nstruct FSROMFATFileProperty {\n    u32 own_id; // offset 00\n    u32 top; // offset 04\n    u32 bottom; // offset 08\n    u32 pos; // offset 0c\n};\nstruct FSROMFATDirProperty {\n    struct FSDirPos pos; // offset 00\n    u32 parent; // offset 0c\n};\nunion FSROMFATProperty {\n    struct FSROMFATFileProperty file; // offset 00\n    struct FSROMFATDirProperty dir; // offset 00\n};\nstruct FSFile {\n    struct FSFile* next; // offset 00\n    void* userdata; // offset 04\n    struct FSArchive* arc; // offset 08\n    u32 stat; // offset 0c\n    void* argument; // offset 10\n    enum FSResult error; // offset 14\n    struct _OSThreadQueue queue[1]; // offset 18\n    union {\n        u8 reserved1[16]; // offset 00\n        union FSROMFATProperty prop; // offset 00\n    }; // offset 20\n    union {\n        u8 reserved2[24]; // offset 00\n        union FSROMFATCommandInfo arg; // offset 00\n    }; // offset 30\n};\ntypedef struct FSFile FSFile;\ntypedef union FSROMFATProperty FSROMFATProperty;\ntypedef struct FSROMFATFileProperty FSROMFATFileProperty;\ntypedef struct FSROMFATDirProperty FSROMFATDirProperty;\ntypedef struct FSDirPos FSDirPos;\ntypedef union FSROMFATCommandInfo FSROMFATCommandInfo;\ntypedef struct FSFileID FSFileID;\nenum FSSeekFileMode {\n    FS_SEEK_SET = 0,\n    FS_SEEK_CUR = 1,\n    FS_SEEK_END = 2,\n};\ntypedef struct FSArchiveInterface FSArchiveInterface;\nstruct FSDateTime {\n    u32 year; // offset 00\n    u32 month; // offset 04\n    u32 day; // offset 08\n    u32 hour; // offset 0c\n    u32 minute; // offset 10\n    u32 second; // offset 14\n};\nstruct FSDirectoryEntryInfo {\n    char s16name[16]; // offset 00\n    u32 s16name_length; // offset 10\n    char longname[260]; // offset 14\n    u64 name_length; // offset 118\n    u32 attributes; // offset 11c\n    struct FSDateTime atime; // offset 120\n    struct FSDateTime mtime; // offset 138\n    struct FSDateTime ctime; // offset 150\n    u32 filesize; // offset 168\n    u32 id; // offset 16c\n};\ntypedef struct FSDirectoryEntryInfo FSDirectoryEntryInfo;\ntypedef struct FSDateTime FSDateTime;\nstruct FSPathInfo {\n    u32 attributes; // offset 00\n    struct FSDateTime ctime; // offset 04\n    struct FSDateTime mtime; // offset 1c\n    struct FSDateTime atime; // offset 34\n    u32 filesize; // offset 4c\n    u32 id; // offset 50\n};\ntypedef struct FSPathInfo FSFileInfo;\ntypedef struct FSPathInfo FSPathInfo;\nstruct FSArchiveResource {\n    u64 totalSize; // offset 00\n    u64 availableSize; // offset 08\n    u32 maxFileHandles; // offset 10\n    u32 currentFileHandles; // offset 14\n    u32 maxDirectoryHandles; // offset 18\n    u32 currentDirectoryHandles; // offset 1c\n    u32 bytesPerSector; // offset 20\n    u32 sectorsPerCluster; // offset 24\n    u32 totalClusters; // offset 28\n    u32 availableClusters; // offset 2c\n};\ntypedef struct FSArchiveResource FSArchiveResource;\ntypedef struct CARDRomRegion CARDRomRegion;\nenum _enum_81074 {\n    MI_PROCESSOR_ARM9 = 0,\n    MI_PROCESSOR_ARM7 = 1,\n};\nstruct FSOverlayInfoHeader {\n    u32 id; // offset 00\n    u8* ram_address; // offset 04\n    u32 ram_size; // offset 08\n    u32 bss_size; // offset 0c\n    void (**sinit_init)(); // offset 10\n    void (**sinit_init_end)(); // offset 14\n    u32 file_id; // offset 18\n    u32 compressed : 24; // offset 1c\n    u32 flag : 8; // offset 1c\n};\nstruct FSOverlayInfo {\n    struct FSOverlayInfoHeader header; // offset 00\n    enum _enum_81074 target; // offset 20\n    struct CARDRomRegion file_pos; // offset 24\n};\ntypedef struct FSOverlayInfo FSOverlayInfo;\ntypedef struct FSOverlayInfoHeader FSOverlayInfoHeader;\n\nstruct FSArchiveInterface {\n    enum FSResult (*ReadFile)(struct FSArchive*, struct FSFile*, void*, u32*); // offset 00\n    enum FSResult (*WriteFile)(struct FSArchive*, struct FSFile*, void*, u32*); // offset 04\n    enum FSResult (*SeekDirectory)(struct FSArchive*, struct FSFile*, u32, u32); // offset 08\n    enum FSResult (*ReadDirectory)(struct FSArchive*, struct FSFile*, struct FSDirectoryEntryInfo*); // offset 0c\n    enum FSResult (*FindPath)(struct FSArchive*, u32, char*, u32*, int); // offset 10\n    enum FSResult (*GetPath)(struct FSArchive*, struct FSFile*, int, char*, u32*); // offset 14\n    enum FSResult (*OpenFileFast)(struct FSArchive*, struct FSFile*, u32, u32); // offset 18\n    enum FSResult (*OpenFileDirect)(struct FSArchive*, struct FSFile*, u32, u32, u32*); // offset 1c\n    enum FSResult (*CloseFile)(struct FSArchive*, struct FSFile*); // offset 20\n    void (*Activate)(struct FSArchive*); // offset 24\n    void (*Idle)(struct FSArchive*); // offset 28\n    void (*Suspend)(struct FSArchive*); // offset 2c\n    void (*Resume)(struct FSArchive*); // offset 30\n    enum FSResult (*OpenFile)(struct FSArchive*, struct FSFile*, u32, char*, u32); // offset 34\n    enum FSResult (*SeekFile)(struct FSArchive*, struct FSFile*, int*, enum FSSeekFileMode); // offset 38\n    enum FSResult (*GetFileLength)(struct FSArchive*, struct FSFile*, u32*); // offset 3c\n    enum FSResult (*GetFilePosition)(struct FSArchive*, struct FSFile*, u32*); // offset 40\n    void (*Mount)(struct FSArchive*); // offset 44\n    void (*Unmount)(struct FSArchive*); // offset 48\n    enum FSResult (*GetArchiveCaps)(struct FSArchive*, u32*); // offset 4c\n    enum FSResult (*CreateFile)(struct FSArchive*, u32, char*, u32); // offset 50\n    enum FSResult (*DeleteFile)(struct FSArchive*, u32, char*); // offset 54\n    enum FSResult (*RenameFile)(struct FSArchive*, u32, char*, u32, char*); // offset 58\n    enum FSResult (*GetPathInfo)(struct FSArchive*, u32, char*, struct FSPathInfo*); // offset 5c\n    enum FSResult (*SetPathInfo)(struct FSArchive*, u32, char*, struct FSPathInfo*); // offset 60\n    enum FSResult (*CreateDirectory)(struct FSArchive*, u32, char*, u32); // offset 64\n    enum FSResult (*DeleteDirectory)(struct FSArchive*, u32, char*); // offset 68\n    enum FSResult (*RenameDirectory)(struct FSArchive*, u32, char*, u32, char*); // offset 6c\n    enum FSResult (*GetArchiveResource)(struct FSArchive*, struct FSArchiveResource*); // offset 70\n    void* unused_29; // offset 74\n    enum FSResult (*FlushFile)(struct FSArchive*, struct FSFile*); // offset 78\n    enum FSResult (*SetFileLength)(struct FSArchive*, struct FSFile*, u32); // offset 7c\n    enum FSResult (*OpenDirectory)(struct FSArchive*, struct FSFile*, u32, char*, u32); // offset 80\n    enum FSResult (*CloseDirectory)(struct FSArchive*, struct FSFile*); // offset 84\n    enum FSResult (*SetSeekCache)(struct FSArchive*, struct FSFile*, void*, u32); // offset 88\n    u8 reserved[116]; // offset 8c\n};\nstruct CARDRomHeader {\n    char game_name[12]; // offset 00\n    u32 game_code; // offset 0c\n    u16 maker_code; // offset 10\n    u8 product_id; // offset 12\n    u8 device_type; // offset 13\n    u8 device_size; // offset 14\n    u8 reserved_A[9]; // offset 15\n    u8 game_version; // offset 1e\n    u8 property; // offset 1f\n    void* main_rom_offset; // offset 20\n    void* main_entry_address; // offset 24\n    void* main_ram_address; // offset 28\n    u32 main_size; // offset 2c\n    void* sub_rom_offset; // offset 30\n    void* sub_entry_address; // offset 34\n    void* sub_ram_address; // offset 38\n    u32 sub_size; // offset 3c\n    struct CARDRomRegion fnt; // offset 40\n    struct CARDRomRegion fat; // offset 48\n    struct CARDRomRegion main_ovt; // offset 50\n    struct CARDRomRegion sub_ovt; // offset 58\n    u8 rom_param_A[8]; // offset 60\n    u32 banner_offset; // offset 68\n    u16 secure_crc; // offset 6c\n    u8 rom_param_B[2]; // offset 6e\n    void* main_autoload_done; // offset 70\n    void* sub_autoload_done; // offset 74\n    u8 rom_param_C[8]; // offset 78\n    u32 rom_size; // offset 80\n    u32 header_size; // offset 84\n    u32 main_module_param_offset; // offset 88\n    u32 sub_module_param_offset; // offset 8c\n    u16 normal_area_rom_offset; // offset 90\n    u16 twl_ltd_area_rom_offset; // offset 92\n    u8 reserved_B[44]; // offset 94\n    u8 logo_data[156]; // offset c0\n    u16 logo_crc; // offset 15c\n    u16 header_crc; // offset 15e\n};\ntypedef struct CARDRomHeader CARDRomHeaderNTR;\ntypedef struct CARDRomHeader CARDRomHeader;\nstruct FSArchiveFAT {\n    u32 top; // offset 00\n    u32 bottom; // offset 04\n};\ntypedef struct FSArchiveFAT FSArchiveFAT;\nstruct MWiDestructorChain {\n    struct MWiDestructorChain* next; // offset 00\n    void (*dtor)(void*); // offset 04\n    void* obj; // offset 08\n};\ntypedef struct MWiDestructorChain MWiDestructorChain;\nstruct CARDEventListener {\n    OSEvent event[1]; // offset 00\n    struct OSiVAlarm valarm[1]; // offset 0c\n    int (*Condition)(void*); // offset 34\n    void* userdata; // offset 38\n    u16 lockID; // offset 3c\n    u8 padding[2]; // offset 3e\n};\ntypedef struct CARDEventListener CARDEventListener;\ntypedef u32 CARDAccessLevel;\ntypedef long CARDiOwner;\nstruct CARDTaskQueue {\n    struct CARDTask* list; // offset 00\n    struct _OSThreadQueue workers[1]; // offset 04\n    u32 quit : 1; // offset 0c\n    u32 dummy : 31; // offset 0c\n};\nenum _enum_84897 {\n    CARD_TARGET_NONE = 0,\n    CARD_TARGET_ROM = 1,\n    CARD_TARGET_BACKUP = 2,\n    CARD_TARGET_RW = 3,\n};\nstruct CARDTask {\n    struct CARDTask* next; // offset 00\n    u32 priority; // offset 04\n    void* userdata; // offset 08\n    void (*function)(struct CARDTask*); // offset 0c\n    void (*callback)(struct CARDTask*); // offset 10\n};\nstruct CARDiCommon {\n    struct CARDiCommandArg* cmd; // offset 00\n    u32 flag; // offset 04\n    u32 priority; // offset 08\n    long lock_owner; // offset 0c\n    int lock_ref; // offset 10\n    struct _OSThreadQueue lock_queue[1]; // offset 14\n    enum _enum_84897 lock_target; // offset 1c\n    struct {\n        struct _OSThread context[1]; // offset 00\n        u8 stack[1024]; // offset a4\n    } thread; // offset 20\n    struct CARDTask task[1]; // offset 4c4\n    struct CARDTaskQueue task_q[1]; // offset 4d8\n    int command; // offset 4e8\n    u8 padding[20]; // offset 4ec\n};\ntypedef struct CARDiCommon CARDiCommon;\nenum CARDResult {\n    CARD_RESULT_SUCCESS = 0,\n    CARD_RESULT_FAILURE = 1,\n    CARD_RESULT_INVALID_PARAM = 2,\n    CARD_RESULT_UNSUPPORTED = 3,\n    CARD_RESULT_TIMEOUT = 4,\n    CARD_RESULT_ERROR = 5,\n    CARD_RESULT_NO_RESPONSE = 6,\n    CARD_RESULT_CANCELED = 7,\n};\nenum CARDBackupType {\n    CARD_BACKUP_TYPE_EEPROM_4KBITS = 2305,\n    CARD_BACKUP_TYPE_EEPROM_64KBITS = 3329,\n    CARD_BACKUP_TYPE_EEPROM_512KBITS = 4097,\n    CARD_BACKUP_TYPE_EEPROM_1MBITS = 4353,\n    CARD_BACKUP_TYPE_FLASH_2MBITS = 4610,\n    CARD_BACKUP_TYPE_FLASH_4MBITS = 4866,\n    CARD_BACKUP_TYPE_FLASH_8MBITS = 5122,\n    CARD_BACKUP_TYPE_FLASH_16MBITS = 5378,\n    CARD_BACKUP_TYPE_FLASH_64MBITS = 5890,\n    CARD_BACKUP_TYPE_FRAM_256KBITS = 3843,\n    CARD_BACKUP_TYPE_NOT_USE = 0,\n};\nstruct CARDiCommandArg {\n    enum CARDResult result; // offset 00\n    enum CARDBackupType type; // offset 04\n    u32 id; // offset 08\n    u32 src; // offset 0c\n    u32 dst; // offset 10\n    u32 len; // offset 14\n    struct {\n        u32 total_size; // offset 00\n        u32 sect_size; // offset 04\n        u32 subsect_size; // offset 08\n        u32 page_size; // offset 0c\n        u32 addr_width; // offset 10\n        u32 program_page; // offset 14\n        u32 write_page; // offset 18\n        u32 write_page_total; // offset 1c\n        u32 erase_chip; // offset 20\n        u32 erase_chip_total; // offset 24\n        u32 erase_sector; // offset 28\n        u32 erase_sector_total; // offset 2c\n        u32 erase_subsector; // offset 30\n        u32 erase_subsector_total; // offset 34\n        u32 erase_page; // offset 38\n        u8 initial_status; // offset 3c\n        u8 padding1[3]; // offset 3d\n        u32 caps; // offset 40\n        u8 padding2[4]; // offset 44\n    } spec; // offset 18\n};\ntypedef struct CARDiCommandArg CARDiCommandArg;\ntypedef struct CARDTask CARDTask;\ntypedef struct CARDTaskQueue CARDTaskQueue;\nstruct CARDHookContext {\n    struct CARDHookContext* next; // offset 00\n    void* userdata; // offset 04\n    void (*callback)(void*, u32, void*); // offset 08\n};\ntypedef struct CARDHookContext CARDHookContext;\nstruct CARDDmaInterface {\n    void (*Recv)(u32, void*, void*, u32); // offset 00\n    void (*Stop)(u32); // offset 04\n};\ntypedef struct CARDDmaInterface CARDDmaInterface;\ntypedef struct {\n    u32 rest_comm; // offset 00\n    u32 src; // offset 04\n    u32 dst; // offset 08\n    int cmp; // offset 0c\n} CARDiParam;\nstruct dst_string_tag {\n    u32 len; // offset 00\n    char* cur; // offset 04\n    char* base; // offset 08\n};\ntypedef struct dst_string_tag dst_string;\nstruct CTRDGWork {\n    u16 subpInitialized; // offset 00\n    u16 lockID; // offset 02\n};\ntypedef struct CTRDGWork CTRDGWork;\nstruct CTRDGRomCycle {\n    enum _enum_29898 c1; // offset 00\n    enum _enum_30021 c2; // offset 04\n};\ntypedef struct CTRDGRomCycle CTRDGRomCycle;\nstruct CTRDGLockByProc {\n    int locked; // offset 00\n    u32 irq; // offset 04\n};\ntypedef struct CTRDGLockByProc CTRDGLockByProc;\nenum _enum_95311 {\n    VIB_STOP = 0,\n    VIB_START = 2,\n};\nenum CTRDGStatus {\n    CTRDG_STATUS_READY = 0,\n    CTRDG_STATUS_INIT_MODULE_INFO = 1,\n};\nstruct CTRDGWorkSp {\n    union {\n        u32 cmd32[4]; // offset 00\n        u16 cmd16[8]; // offset 00\n    }; // offset 00\n    enum CTRDGStatus status; // offset 10\n    u16 count; // offset 14\n    u16 pad[1]; // offset 16\n};\ntypedef struct CTRDGWorkSp CTRDGWorkSp;\ntypedef struct {\n    u32 startAddress; // offset 00\n    u8 nintendoLogo[156]; // offset 04\n    char titleName[12]; // offset a0\n    u32 gameCode; // offset ac\n    u16 makerCode; // offset b0\n    u8 isRomCode; // offset b2\n    u8 machineCode; // offset b3\n    u8 deviceType; // offset b4\n    u8 exLsiID[3]; // offset b5\n    u8 reserved_A[4]; // offset b8\n    u8 softVersion; // offset bc\n    u8 complement; // offset bd\n    u16 moduleID; // offset be\n} CTRDGHeader;\nenum _enum_96095 {\n    CTRDG_PHI_CLOCK_LOW = 0,\n    CTRDG_PHI_CLOCK_4MHZ = 1,\n    CTRDG_PHI_CLOCK_8MHZ = 2,\n    CTRDG_PHI_CLOCK_16MHZ = 3,\n};\nstruct RTCWork {\n    struct OSMessageQueue msgQ; // offset 00\n    void* msgArray[4]; // offset 20\n    struct _OSThread thread; // offset 30\n    u64 stack[32]; // offset d4\n    int busy; // offset 1d4\n    u16 command; // offset 1d8\n    u16 padding; // offset 1da\n    struct _OSThread polling; // offset 1dc\n    struct _OSThreadQueue pollingQ; // offset 280\n    u64 pollingStack[32]; // offset 288\n    struct OSiAlarm pollingAlarm; // offset 388\n};\ntypedef struct RTCWork RTCWork;\nenum RTCPxiResult {\n    RTC_PXI_RESULT_SUCCESS = 0,\n    RTC_PXI_RESULT_INVALID_COMMAND = 1,\n    RTC_PXI_RESULT_ILLEGAL_STATUS = 2,\n    RTC_PXI_RESULT_BUSY = 3,\n    RTC_PXI_RESULT_FATAL_ERROR = 4,\n    RTC_PXI_RESULT_MAX = 5,\n};\nstruct RTCRawStatus2 {\n    u16 intr_mode : 4; // offset 00\n    u16 dummy0 : 2; // offset 00\n    u16 intr2_mode : 1; // offset 00\n    u16 test : 1; // offset 00\n    u16 dummy1 : 8; // offset 00\n};\ntypedef struct RTCRawStatus2 RTCRawStatus2;\nstruct RTCRawStatus1 {\n    u16 reset : 1; // offset 00\n    u16 format : 1; // offset 00\n    u16 dummy0 : 2; // offset 00\n    u16 intr1 : 1; // offset 00\n    u16 intr2 : 1; // offset 00\n    u16 bld : 1; // offset 00\n    u16 poc : 1; // offset 00\n    u16 dummy1 : 8; // offset 00\n};\ntypedef struct RTCRawStatus1 RTCRawStatus1;\nstruct RTCRawAlarm {\n    u32 week : 3; // offset 00\n    u32 dummy0 : 4; // offset 00\n    u32 we : 1; // offset 00\n    u32 hour : 6; // offset 00\n    u32 afternoon : 1; // offset 00\n    u32 he : 1; // offset 00\n    u32 minute : 7; // offset 00\n    u32 me : 1; // offset 00\n    u32 dummy2 : 8; // offset 00\n};\ntypedef struct RTCRawAlarm RTCRawAlarm;\nstruct RTCRawTime {\n    u32 hour : 6; // offset 00\n    u32 afternoon : 1; // offset 00\n    u32 dummy0 : 1; // offset 00\n    u32 minute : 7; // offset 00\n    u32 dummy1 : 1; // offset 00\n    u32 second : 7; // offset 00\n    u32 dummy2 : 9; // offset 00\n};\nstruct RTCRawAdjust {\n    u32 adjust : 8; // offset 00\n    u32 dummy : 24; // offset 00\n};\nstruct RTCRawPulse {\n    u32 pulse : 5; // offset 00\n    u32 dummy : 27; // offset 00\n};\nstruct RTCRawDate {\n    u32 year : 8; // offset 00\n    u32 month : 5; // offset 00\n    u32 dummy0 : 3; // offset 00\n    u32 day : 6; // offset 00\n    u32 dummy1 : 2; // offset 00\n    u32 week : 3; // offset 00\n    u32 dummy2 : 5; // offset 00\n};\nstruct RTCRawFree {\n    u32 free : 8; // offset 00\n    u32 dummy : 24; // offset 00\n};\nunion RTCRawData {\n    struct {\n        struct RTCRawDate date; // offset 00\n        struct RTCRawTime time; // offset 04\n    } t; // offset 00\n    struct {\n        struct RTCRawStatus1 status1; // offset 00\n        struct RTCRawStatus2 status2; // offset 02\n        union {\n            struct RTCRawAlarm alarm; // offset 00\n        }; // offset 04\n    } a; // offset 00\n    u32 words[2]; // offset 00\n    u16 halfs[4]; // offset 00\n    u8 bytes[8]; // offset 00\n};\ntypedef union RTCRawData RTCRawData;\ntypedef struct RTCRawDate RTCRawDate;\ntypedef struct RTCRawTime RTCRawTime;\ntypedef struct RTCRawPulse RTCRawPulse;\ntypedef struct RTCRawAdjust RTCRawAdjust;\ntypedef struct RTCRawFree RTCRawFree;\ntypedef struct {\n    u16 state; // offset 00\n    u16 aid; // offset 02\n    u16 macAdrs[3]; // offset 04\n    u16 rssi; // offset 0a\n    u16 capaInfo; // offset 0c\n    u16 authSeed; // offset 0e\n    u16 supRateSet; // offset 10\n    u16 rsv; // offset 12\n    u16 lastSeqCtrl; // offset 14\n    u16 frameCount; // offset 16\n    u16 lifeTime; // offset 18\n    u16 maxLifeTime; // offset 1a\n} WlStaElement;\nstruct WmInit {\n    u32 dmaNo; // offset 00\n    u32 indPrio_low; // offset 04\n    u32 indPrio_high; // offset 08\n    u32 reqPrio_low; // offset 0c\n    u32 reqPrio_high; // offset 10\n    u32 wlPrio_low; // offset 14\n    u32 wlPrio_high; // offset 18\n};\ntypedef struct WmInit WmInit;\ntypedef struct {\n    u32 workingMemAdrs; // offset 00\n    void* stack; // offset 04\n    u32 stacksize; // offset 08\n    u32 priority; // offset 0c\n    struct OSMessageQueue* sendMsgQueuep; // offset 10\n    struct OSMessageQueue* recvMsgQueuep; // offset 14\n    u32 dmaChannel; // offset 18\n    u32 dmaMaxSize; // offset 1c\n    u32 heapType; // offset 20\n    union {\n        struct {\n            enum _enum_16263 id; // offset 00\n            int heapHandle; // offset 04\n        } os; // offset 00\n        struct {\n            u32 (*alloc)(u32); // offset 00\n            u32 (*free)(void*); // offset 04\n        } ext; // offset 00\n    } heapFunc; // offset 24\n    void* camAdrs; // offset 2c\n    u32 camSize; // offset 30\n} WlInit;\nstruct WMCallback {\n    u16 apiid; // offset 00\n    u16 errcode; // offset 02\n    u16 wlCmdID; // offset 04\n    u16 wlResult; // offset 06\n};\ntypedef struct WMCallback WMCallback;\nstruct WMSPWork {\n    struct OSMessageQueue toWLmsgQ; // offset 00\n    void* toWLmsg[2]; // offset 20\n    struct OSMessageQueue fromWLmsgQ; // offset 28\n    void* fromWLmsg[4]; // offset 48\n    struct OSMessageQueue confirmQ; // offset 58\n    void* confirm[4]; // offset 78\n    struct OSMessageQueue requestQ; // offset 88\n    void* request[32]; // offset a8\n    u32 requestStack[1024]; // offset 128\n    u32 indicateStack[256]; // offset 1128\n    struct OSMutex fifoExclusive; // offset 1528\n    u32 dmaNo; // offset 1540\n    enum _enum_16263 arenaId; // offset 1544\n    int heapHandle; // offset 1548\n    struct WMArm7Buf* wm7buf; // offset 154c\n    struct WMStatus* status; // offset 1550\n    u8 rssiHistory[32]; // offset 1554\n    u32 rssiIndex; // offset 1574\n    u32 indPrio_high; // offset 1578\n    u32 wlPrio_high; // offset 157c\n    u32 reqPrio_high; // offset 1580\n    u32 indPrio_low; // offset 1584\n    u32 wlPrio_low; // offset 1588\n    u32 reqPrio_low; // offset 158c\n};\ntypedef struct WMSPWork WMSPWork;\nstruct WMGameInfo {\n    u16 magicNumber; // offset 00\n    u8 ver; // offset 02\n    u8 platform; // offset 03\n    u32 ggid; // offset 04\n    u16 tgid; // offset 08\n    u8 userGameInfoLength; // offset 0a\n    union {\n        u8 gameNameCount_attribute; // offset 00\n        u8 attribute; // offset 00\n    }; // offset 0b\n    u16 parentMaxSize; // offset 0c\n    u16 childMaxSize; // offset 0e\n    union {\n        u16 userGameInfo[56]; // offset 00\n        struct {\n            u16 userName[4]; // offset 00\n            u16 gameName[8]; // offset 08\n            u16 padd1[44]; // offset 18\n        } old_type; // offset 00\n    }; // offset 10\n};\nstruct WMBssDesc {\n    u16 length; // offset 00\n    u16 rssi; // offset 02\n    u8 bssid[6]; // offset 04\n    u16 ssidLength; // offset 0a\n    u8 ssid[32]; // offset 0c\n    u16 capaInfo; // offset 2c\n    struct {\n        u16 basic; // offset 00\n        u16 support; // offset 02\n    } rateSet; // offset 2e\n    u16 beaconPeriod; // offset 32\n    u16 dtimPeriod; // offset 34\n    u16 channel; // offset 36\n    u16 cfpPeriod; // offset 38\n    u16 cfpMaxDuration; // offset 3a\n    u16 gameInfoLength; // offset 3c\n    u16 otherElementCount; // offset 3e\n    struct WMGameInfo gameInfo; // offset 40\n};\nstruct WMArm7Buf {\n    struct WMStatus* status; // offset 00\n    u8 reserved_a[4]; // offset 04\n    u32* fifo7to9; // offset 08\n    u8 reserved_b[4]; // offset 0c\n    struct WMBssDesc connectPInfo; // offset 10\n    u32 requestBuf[128]; // offset d0\n};\ntypedef struct WMArm7Buf WMarm7Buf;\ntypedef struct WMArm7Buf WMArm7Buf;\nstruct WMParentParam {\n    u16* userGameInfo; // offset 00\n    u16 userGameInfoLength; // offset 04\n    u16 padding; // offset 06\n    u32 ggid; // offset 08\n    u16 tgid; // offset 0c\n    u16 entryFlag; // offset 0e\n    u16 maxEntry; // offset 10\n    u16 multiBootFlag; // offset 12\n    u16 KS_Flag; // offset 14\n    u16 CS_Flag; // offset 16\n    u16 beaconPeriod; // offset 18\n    u16 rsv1[4]; // offset 1a\n    u16 rsv2[8]; // offset 22\n    u16 channel; // offset 32\n    u16 parentMaxSize; // offset 34\n    u16 childMaxSize; // offset 36\n    u16 rsv[4]; // offset 38\n};\ntypedef struct {\n    u16 head; // offset 00\n    u16 tail; // offset 02\n} WMPortSendQueue;\ntypedef struct {\n    u16 next; // offset 00\n    u16 port; // offset 02\n    u16 destBitmap; // offset 04\n    u16 restBitmap; // offset 06\n    u16 sentBitmap; // offset 08\n    u16 sendingBitmap; // offset 0a\n    u16 padding; // offset 0c\n    u16 size; // offset 0e\n    u16 seqNo; // offset 10\n    u16 retryCount; // offset 12\n    u16* data; // offset 14\n    void (*callback)(void*); // offset 18\n    void* arg; // offset 1c\n} WMPortSendQueueData;\nstruct WMStatus {\n    u16 state; // offset 00\n    u16 BusyApiid; // offset 02\n    int apiBusy; // offset 04\n    int scan_continue; // offset 08\n    int mp_flag; // offset 0c\n    int dcf_flag; // offset 10\n    int ks_flag; // offset 14\n    int dcf_sendFlag; // offset 18\n    int VSyncFlag; // offset 1c\n    u8 wlVersion[8]; // offset 20\n    u16 macVersion; // offset 28\n    u16 rfVersion; // offset 2a\n    u16 bbpVersion[2]; // offset 2c\n    u16 mp_parentSize; // offset 30\n    u16 mp_childSize; // offset 32\n    u16 mp_parentMaxSize; // offset 34\n    u16 mp_childMaxSize; // offset 36\n    u16 mp_sendSize; // offset 38\n    u16 mp_recvSize; // offset 3a\n    u16 mp_maxSendSize; // offset 3c\n    u16 mp_maxRecvSize; // offset 3e\n    u16 mp_parentVCount; // offset 40\n    u16 mp_childVCount; // offset 42\n    u16 mp_parentInterval; // offset 44\n    u16 mp_childInterval; // offset 46\n    u64 mp_parentIntervalTick; // offset 48\n    u64 mp_childIntervalTick; // offset 50\n    u16 mp_minFreq; // offset 58\n    u16 mp_freq; // offset 5a\n    u16 mp_maxFreq; // offset 5c\n    u16 mp_vsyncOrderedFlag; // offset 5e\n    u16 mp_vsyncFlag; // offset 60\n    s16 mp_count; // offset 62\n    s16 mp_limitCount; // offset 64\n    u16 mp_resumeFlag; // offset 66\n    u16 mp_prevPollBitmap; // offset 68\n    u16 mp_prevWmHeader; // offset 6a\n    u16 mp_prevTxop; // offset 6c\n    u16 mp_prevDataLength; // offset 6e\n    u16 mp_recvBufSel; // offset 70\n    u16 mp_recvBufSize; // offset 72\n    struct WMMpRecvBuf* mp_recvBuf[2]; // offset 74\n    u32* mp_sendBuf; // offset 7c\n    u16 mp_sendBufSize; // offset 80\n    u16 mp_ackTime; // offset 82\n    u16 mp_waitAckFlag; // offset 84\n    u16 mp_readyBitmap; // offset 86\n    u16 mp_newFrameFlag; // offset 88\n    u8 reserved_b[2]; // offset 8a\n    u16 mp_sentDataFlag; // offset 8c\n    u16 mp_bufferEmptyFlag; // offset 8e\n    u16 mp_isPolledFlag; // offset 90\n    u16 mp_minPollBmpMode; // offset 92\n    u16 mp_singlePacketMode; // offset 94\n    u8 reserved_c[2]; // offset 96\n    u16 mp_defaultRetryCount; // offset 98\n    u16 mp_ignoreFatalErrorMode; // offset 9a\n    u16 mp_ignoreSizePrecheckMode; // offset 9c\n    u16 mp_pingFlag; // offset 9e\n    u16 mp_pingCounter; // offset a0\n    u8 dcf_destAdr[6]; // offset a2\n    u16* dcf_sendData; // offset a8\n    u16 dcf_sendSize; // offset ac\n    u16 dcf_recvBufSel; // offset ae\n    struct WMDcfRecvBuf* dcf_recvBuf[2]; // offset b0\n    u16 dcf_recvBufSize; // offset b8\n    u16 curr_tgid; // offset ba\n    u16 linkLevel; // offset bc\n    u16 minRssi; // offset be\n    u16 rssiCounter; // offset c0\n    u16 beaconIndicateFlag; // offset c2\n    u16 wepKeyId; // offset c4\n    u16 pwrMgtMode; // offset c6\n    u32 miscFlags; // offset c8\n    u16 VSyncBitmap; // offset cc\n    u16 valarm_queuedFlag; // offset ce\n    u32 v_tsf; // offset d0\n    u32 v_tsf_bak; // offset d4\n    u32 v_remain; // offset d8\n    u16 valarm_counter; // offset dc\n    u8 reserved_e[2]; // offset de\n    u8 MacAddress[6]; // offset e0\n    u16 mode; // offset e6\n    struct WMParentParam pparam; // offset e8\n    u8 childMacAddress[15][6]; // offset 128\n    u16 child_bitmap; // offset 182\n    struct WMBssDesc* pInfoBuf; // offset 184\n    u16 aid; // offset 188\n    u8 parentMacAddress[6]; // offset 18a\n    u16 scan_channel; // offset 190\n    u8 reserved_f[4]; // offset 192\n    u16 wepMode; // offset 196\n    int wep_flag; // offset 198\n    u16 wepKey[40]; // offset 19c\n    u16 rate; // offset 1ec\n    u16 preamble; // offset 1ee\n    u16 tmptt; // offset 1f0\n    u16 retryLimit; // offset 1f2\n    u16 enableChannel; // offset 1f4\n    u16 allowedChannel; // offset 1f6\n    u16 portSeqNo[16][8]; // offset 1f8\n    WMPortSendQueueData sendQueueData[32]; // offset 2f8\n    WMPortSendQueue sendQueueFreeList; // offset 6f8\n    WMPortSendQueue sendQueue[4]; // offset 6fc\n    WMPortSendQueue readyQueue[4]; // offset 70c\n    struct OSMutex sendQueueMutex; // offset 71c\n    int sendQueueInUse; // offset 734\n    u64 mp_lastRecvTick[16]; // offset 738\n    u64 mp_lifeTimeTick; // offset 7b8\n    u16 mp_current_minFreq; // offset 7c0\n    u16 mp_current_freq; // offset 7c2\n    u16 mp_current_maxFreq; // offset 7c4\n    u16 mp_current_minPollBmpMode; // offset 7c6\n    u16 mp_current_singlePacketMode; // offset 7c8\n    u16 mp_current_defaultRetryCount; // offset 7ca\n    u16 mp_current_ignoreFatalErrorMode; // offset 7cc\n    u8 reserved_g[2]; // offset 7ce\n};\ntypedef struct WMStatus WMStatus;\ntypedef struct WMStatus WMstatus;\nstruct WMMpRecvBuf {\n    u16 rsv1[3]; // offset 00\n    u16 length; // offset 06\n    u16 rsv2[1]; // offset 08\n    u16 ackTimeStamp; // offset 0a\n    u16 timeStamp; // offset 0c\n    u16 rate_rssi; // offset 0e\n    u16 rsv3[2]; // offset 10\n    u16 rsv4[2]; // offset 14\n    u8 destAdrs[6]; // offset 18\n    u8 srcAdrs[6]; // offset 1e\n    u16 rsv5[3]; // offset 24\n    u16 seqCtrl; // offset 2a\n    u16 txop; // offset 2c\n    u16 bitmap; // offset 2e\n    u16 wmHeader; // offset 30\n    u16 data[2]; // offset 32\n};\ntypedef struct WMMpRecvBuf WMmpRecvBuf;\ntypedef struct WMMpRecvBuf WMMpRecvBuf;\nstruct WMDcfRecvBuf {\n    u16 frameID; // offset 00\n    u16 rsv1[2]; // offset 02\n    u16 length; // offset 06\n    u16 rsv2[3]; // offset 08\n    u16 rate_rssi; // offset 0e\n    u16 rsv3[4]; // offset 10\n    u8 destAdrs[6]; // offset 18\n    u8 srcAdrs[6]; // offset 1e\n    u16 rsv4[4]; // offset 24\n    u16 data[2]; // offset 2c\n};\ntypedef struct WMDcfRecvBuf WMDcfRecvBuf;\ntypedef struct WMDcfRecvBuf WMdcfRecvBuf;\ntypedef struct WMParentParam WMpparam;\ntypedef struct WMParentParam WMParentParam;\ntypedef struct WMBssDesc WMbssDesc;\ntypedef struct WMBssDesc WMBssDesc;\ntypedef struct WMGameInfo WMGameInfo;\ntypedef struct WMGameInfo WMgameInfo;\nstruct WMIndCallback {\n    u16 apiid; // offset 00\n    u16 errcode; // offset 02\n    u16 state; // offset 04\n    u16 reason; // offset 06\n};\ntypedef struct WMIndCallback WMindCallback;\ntypedef struct WMIndCallback WMIndCallback;\nstruct WMMpRecvData {\n    u16 length; // offset 00\n    u16 rate_rssi; // offset 02\n    u16 aid; // offset 04\n    u16 noResponse; // offset 06\n    u16 wmHeader; // offset 08\n    u16 cdata[1]; // offset 0a\n};\ntypedef struct WMMpRecvData WMmpRecvData;\ntypedef struct WMMpRecvData WMMpRecvData;\nstruct WMMpRecvHeader {\n    u16 bitmap; // offset 00\n    u16 errBitmap; // offset 02\n    u16 count; // offset 04\n    u16 length; // offset 06\n    u16 txCount; // offset 08\n    struct WMMpRecvData data[1]; // offset 0a\n};\ntypedef struct WMMpRecvHeader WMmpRecvHeader;\ntypedef struct WMMpRecvHeader WMMpRecvHeader;\ntypedef struct {\n    u16 code; // offset 00\n    u16 length; // offset 02\n} WlCmdHeader;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 staMacAdrs[3]; // offset 10\n    u16 retryLimit; // offset 16\n    u16 enableChannel; // offset 18\n    u16 rsv; // offset 1a\n    u16 mode; // offset 1c\n    u16 rate; // offset 1e\n    u16 wepMode; // offset 20\n    u16 wepKeyId; // offset 22\n    u16 wepKey[4][10]; // offset 24\n    u16 beaconType; // offset 74\n    u16 probeRes; // offset 76\n    u16 beaconLostTh; // offset 78\n    u16 activeZoneTime; // offset 7a\n    u8 ssidMask[32]; // offset 7c\n    u16 preambleType; // offset 9c\n    u16 authAlgo; // offset 9e\n} WlParamSetAllReq;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlParamSetCfm;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 buf[2]; // offset 10\n} WlCmdReq;\ntypedef struct {\n    u8 rsv1[6]; // offset 00\n    u16 length; // offset 06\n    u16 txKeySts; // offset 08\n    u16 rsv3; // offset 0a\n    u16 timeStamp; // offset 0c\n    u8 rate; // offset 0e\n    u8 rssi; // offset 0f\n    u8 rsv4[4]; // offset 10\n    u8 rsv5[4]; // offset 14\n    u16 destAdrs[3]; // offset 18\n    u16 srcAdrs[3]; // offset 1e\n    u8 rsv6[6]; // offset 24\n    u16 seqCtrl; // offset 2a\n    u16 tmptt; // offset 2c\n    u16 bitmap; // offset 2e\n} WlRxMpAckFrame;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    WlRxMpAckFrame ack; // offset 10\n} WlMaMpAckInd;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlMlmeResetCfm;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 mib; // offset 10\n} WlMlmeResetReq;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlMlmePowerManagementCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlMlmePowerMgtCfm;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 pwrMgtMode; // offset 10\n    u16 wakeUp; // offset 12\n    u16 recieveDtims; // offset 14\n} WlMlmePowerManagementReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 pwrMgtMode; // offset 10\n    u16 wakeUp; // offset 12\n    u16 recieveDtims; // offset 14\n} WlMlmePowerMgtReq;\nunion _element {\n    u8 gameInfo[4]; // offset 00\n    u8 otherElement[4]; // offset 00\n};\ntypedef struct {\n    u16 length; // offset 00\n    u16 rssi; // offset 02\n    u16 bssid[3]; // offset 04\n    u16 ssidLength; // offset 0a\n    u8 ssid[32]; // offset 0c\n    u16 capaInfo; // offset 2c\n    struct {\n        u16 basic; // offset 00\n        u16 support; // offset 02\n    } rateSet; // offset 2e\n    u16 beaconPeriod; // offset 32\n    u16 dtimPeriod; // offset 34\n    u16 channel; // offset 36\n    u16 cfpPeriod; // offset 38\n    u16 cfpMaxDuration; // offset 3a\n    u16 gameInfoLength; // offset 3c\n    u16 otherElementCount; // offset 3e\n    union _element; // offset 40\n} WlBssDesc;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 foundMap; // offset 06\n    u16 bssDescCount; // offset 08\n    WlBssDesc bssDescList[1]; // offset 0a\n} WlMlmeScanCfm;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 bssid[3]; // offset 10\n    u16 ssidLength; // offset 16\n    u8 ssid[32]; // offset 18\n    u16 scanType; // offset 38\n    u8 channelList[16]; // offset 3a\n    u16 maxChannelTime; // offset 4a\n    u16 bssidMaskCount; // offset 4c\n    u16 bssidMask[3]; // offset 4e\n} WlMlmeScanReq;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 statusCode; // offset 06\n    u16 peerMacAdrs[3]; // offset 08\n} WlMlmeJoinCfm;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 timeOut; // offset 10\n    u16 rsv; // offset 12\n    WlBssDesc bssDesc; // offset 14\n} WlMlmeJoinReq;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 statusCode; // offset 06\n    u16 peerMacAdrs[3]; // offset 08\n    u16 algorithm; // offset 0e\n} WlMlmeAuthenticateCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 statusCode; // offset 06\n    u16 peerMacAdrs[3]; // offset 08\n    u16 algorithm; // offset 0e\n} WlMlmeAuthCfm;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 peerMacAdrs[3]; // offset 10\n    u16 algorithm; // offset 16\n    u16 timeOut; // offset 18\n} WlMlmeAuthenticateReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 peerMacAdrs[3]; // offset 10\n    u16 algorithm; // offset 16\n    u16 timeOut; // offset 18\n} WlMlmeAuthReq;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 peerMacAdrs[3]; // offset 06\n} WlMlmeDeAuthCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 peerMacAdrs[3]; // offset 06\n} WlMlmeDeAuthenticateCfm;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 peerMacAdrs[3]; // offset 10\n    u16 reasonCode; // offset 16\n} WlMlmeDeAuthReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 peerMacAdrs[3]; // offset 10\n    u16 reasonCode; // offset 16\n} WlMlmeDeAuthenticateReq;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 statusCode; // offset 06\n    u16 aid; // offset 08\n} WlMlmeAssCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 statusCode; // offset 06\n    u16 aid; // offset 08\n} WlMlmeAssociateCfm;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 peerMacAdrs[3]; // offset 10\n    u16 listenInterval; // offset 16\n    u16 timeOut; // offset 18\n} WlMlmeAssReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 peerMacAdrs[3]; // offset 10\n    u16 listenInterval; // offset 16\n    u16 timeOut; // offset 18\n} WlMlmeAssociateReq;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 statusCode; // offset 06\n    u16 aid; // offset 08\n} WlMlmeReAssociateCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 statusCode; // offset 06\n    u16 aid; // offset 08\n} WlMlmeReAssCfm;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 newApMacAdrs[3]; // offset 10\n    u16 listenInterval; // offset 16\n    u16 timeOut; // offset 18\n} WlMlmeReAssociateReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 newApMacAdrs[3]; // offset 10\n    u16 listenInterval; // offset 16\n    u16 timeOut; // offset 18\n} WlMlmeReAssReq;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlMlmeDisAssociateCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlMlmeDisAssCfm;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 peerMacAdrs[3]; // offset 10\n    u16 reasonCode; // offset 16\n} WlMlmeDisAssociateReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 peerMacAdrs[3]; // offset 10\n    u16 reasonCode; // offset 16\n} WlMlmeDisAssReq;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlMlmeStartCfm;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 ssidLength; // offset 10\n    u8 ssid[32]; // offset 12\n    u16 beaconPeriod; // offset 32\n    u16 dtimPeriod; // offset 34\n    u16 channel; // offset 36\n    u16 basicRateSet; // offset 38\n    u16 supportRateSet; // offset 3a\n    u16 gameInfoLength; // offset 3c\n    u8 gameInfo[2]; // offset 3e\n} WlMlmeStartReq;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 reserved; // offset 06\n    u16 ccaBusyInfo[16]; // offset 08\n} WlMlmeMeasChanCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 reserved; // offset 06\n    u16 ccaBusyInfo[16]; // offset 08\n} WlMlmeMeasureChannelCfm;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 rsv; // offset 10\n    u16 ccaMode; // offset 12\n    u16 edThreshold; // offset 14\n    u16 measureTime; // offset 16\n    u8 channelList[16]; // offset 18\n} WlMlmeMeasChanReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 rsv; // offset 10\n    u16 ccaMode; // offset 12\n    u16 edThreshold; // offset 14\n    u16 measureTime; // offset 16\n    u8 channelList[16]; // offset 18\n} WlMlmeMeasureChannelReq;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 txStatus; // offset 06\n} WlMaDataCfm;\ntypedef struct {\n    u16 frameId; // offset 00\n    u8 rsv1[4]; // offset 02\n    u16 length; // offset 06\n    u16 status; // offset 08\n    u16 rsvm1; // offset 0a\n    u16 rsvm2; // offset 0c\n    u8 rate; // offset 0e\n    u8 rssi; // offset 0f\n    u32 rsvm3; // offset 10\n    u8 rsv4[4]; // offset 14\n    u16 destAdrs[3]; // offset 18\n    u16 srcAdrs[3]; // offset 1e\n    u8 rsv5[8]; // offset 24\n    u16* datap; // offset 2c\n} WlTxFrame;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    WlTxFrame frame; // offset 10\n} WlMaDataReq;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlMaKeyDataCfm;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 length; // offset 10\n    u16 wmHeader; // offset 12\n    u16* keyDatap; // offset 14\n} WlMaKeyDataReq;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlMaMpCfm;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 resume; // offset 10\n    u16 retryLimit; // offset 12\n    u16 txop; // offset 14\n    u16 pollBitmap; // offset 16\n    u16 tmptt; // offset 18\n    u16 currTsf; // offset 1a\n    u16 dataLength; // offset 1c\n    u16 wmHeader; // offset 1e\n    u16* datap; // offset 20\n} WlMaMpReq;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlMaClearDataCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlMaClrDataCfm;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 flag; // offset 10\n} WlMaClearDataReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 flag; // offset 10\n} WlMaClrDataReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 staMacAdrs[3]; // offset 10\n} WlParamSetMacAdrsReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 staMacAdrs[3]; // offset 10\n} WlParamSetMacAddressReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 retryLimit; // offset 10\n} WlParamSetRetryLimitReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 enableChannel; // offset 10\n} WlParamSetEnableChannelReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 mode; // offset 10\n} WlParamSetModeReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 rate; // offset 10\n} WlParamSetRateReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 wepMode; // offset 10\n} WlParamSetWepModeReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 wepKeyId; // offset 10\n} WlParamSetWepKeyIdReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 wepKey[4][10]; // offset 10\n} WlParamSetWepKeyReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 beaconType; // offset 10\n} WlParamSetBeaconTypeReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 probeRes; // offset 10\n} WlParamSetProbeResReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 probeRes; // offset 10\n} WlParamSetProbeResponseReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 beaconLostTh; // offset 10\n} WlParamSetBeaconLostThresholdReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 beaconLostTh; // offset 10\n} WlParamSetBeaconLostThReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 activeZoneTime; // offset 10\n} WlParamSetActiveZoneReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u8 mask[32]; // offset 10\n} WlParamSetSsidMaskReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 type; // offset 10\n} WlParamSetPreambleTypeReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 type; // offset 10\n} WlParamSetAuthenticationAlgorithmReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 type; // offset 10\n} WlParamSetAuthAlgoReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 ccaMode; // offset 10\n    u16 edThreshold; // offset 12\n    u16 agcLimit; // offset 14\n} WlParamSetCCAModeEDThReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 ccaMode; // offset 10\n    u16 edThreshold; // offset 12\n    u16 agcLimit; // offset 14\n} WlParamSetCCAModeEDThresholdReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 tableNumber; // offset 10\n    u16 camLifeTime; // offset 12\n    u16 frameLifeTime; // offset 14\n} WlParamSetLifeTimeReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 count; // offset 10\n} WlParamSetMaxConnReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 count; // offset 10\n} WlParamSetMaxConnectableChildReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 mainAntenna; // offset 10\n} WlParamSetMainAntennaReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 diversity; // offset 10\n    u16 useAntenna; // offset 12\n} WlParamSetDiversityReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 enableMessage; // offset 10\n} WlParamSetBeaconSendRecvIndReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 mode; // offset 10\n} WlParamSetNullKeyModeReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 bssid[3]; // offset 10\n} WlParamSetBssidReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 ssidLength; // offset 10\n    u8 ssid[32]; // offset 12\n} WlParamSetSsidReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 beaconPeriod; // offset 10\n} WlParamSetBeaconPeriodReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 dtimPeriod; // offset 10\n} WlParamSetDtimPeriodReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 listenInterval; // offset 10\n} WlParamSetIntervalReq;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 gameInfoLength; // offset 10\n    u16 gameInfo[1]; // offset 12\n} WlParamSetGameInfoReq;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 staMacAdrs[3]; // offset 06\n    u16 retryLimit; // offset 0c\n    u16 enableChannel; // offset 0e\n    u16 channel; // offset 10\n    u16 mode; // offset 12\n    u16 rate; // offset 14\n    u16 wepMode; // offset 16\n    u16 wepKeyId; // offset 18\n    u16 beaconType; // offset 1a\n    u16 probeRes; // offset 1c\n    u16 beaconLostTh; // offset 1e\n    u16 activeZoneTime; // offset 20\n    u8 ssidMask[32]; // offset 22\n    u16 preambleType; // offset 42\n    u16 authAlgo; // offset 44\n} WlParamGetAllCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 staMacAdrs[3]; // offset 06\n} WlParamGetMacAdrsCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 staMacAdrs[3]; // offset 06\n} WlParamGetMacAddressCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 retryLimit; // offset 06\n} WlParamGetRetryLimitCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 enableChannel; // offset 06\n    u16 channel; // offset 08\n} WlParamGetEnableChannelCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 mode; // offset 06\n} WlParamGetModeCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 rate; // offset 06\n} WlParamGetRateCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 wepMode; // offset 06\n} WlParamGetWepModeCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 wepKeyId; // offset 06\n} WlParamGetWepKeyIdCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 beaconType; // offset 06\n} WlParamGetBeaconTypeCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 probe; // offset 06\n} WlParamGetProbeResCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 probe; // offset 06\n} WlParamGetProbeResponseCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 beaconLostTh; // offset 06\n} WlParamGetBeaconLostThresholdCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 beaconLostTh; // offset 06\n} WlParamGetBeaconLostThCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 activeZoneTime; // offset 06\n} WlParamGetActiveZoneCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u8 mask[32]; // offset 06\n} WlParamGetSsidMaskCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 type; // offset 06\n} WlParamGetPreambleTypeCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 type; // offset 06\n} WlParamGetAuthenticationAlgorithmCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 type; // offset 06\n} WlParamGetAuthAlgoCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 ccaMode; // offset 06\n    u16 edThreshold; // offset 08\n    u16 agcLimit; // offset 0a\n} WlParamGetCCAModeEDThCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 ccaMode; // offset 06\n    u16 edThreshold; // offset 08\n    u16 agcLimit; // offset 0a\n} WlParamGetCCAModeEDThresholdCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 count; // offset 06\n} WlParamGetMaxConnectableChildCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 count; // offset 06\n} WlParamGetMaxConnCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 mainAntenna; // offset 06\n} WlParamGetMainAntennaCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 diversity; // offset 06\n    u16 useAntenna; // offset 08\n} WlParamGetDiversityCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 enableMessage; // offset 06\n} WlParamGetBeaconSendRecvIndCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 mode; // offset 06\n} WlParamGetNullKeyModeCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 bssid[3]; // offset 06\n} WlParamGetBssidCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 ssidLength; // offset 06\n    u8 ssid[32]; // offset 08\n} WlParamGetSsidCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 beaconPeriod; // offset 06\n} WlParamGetBeaconPeriodCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 dtimPeriond; // offset 06\n} WlParamGetDtimPeriodCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 listenInterval; // offset 06\n} WlParamGetIntervalCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 gameInfoLength; // offset 06\n    u16 gameInfo[1]; // offset 08\n} WlParamGetGameInfoCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlDevShutdownCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlDevIdleCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlDevClass1Cfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlDevRebootCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlDevRestartCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlDevSetInitializeWirelessCounterCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlDevClrInfoCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u8 wlVersion[8]; // offset 06\n    u16 macVersion; // offset 0e\n    u16 bbpVersion[2]; // offset 10\n    u16 rfVersion; // offset 14\n} WlDevGetVerInfoCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u8 wlVersion[8]; // offset 06\n    u16 macVersion; // offset 0e\n    u16 bbpVersion[2]; // offset 10\n    u16 rfVersion; // offset 14\n} WlDevGetVersionCfm;\ntypedef struct {\n    struct {\n        u32 success; // offset 00\n        u32 failed; // offset 04\n        u32 retry; // offset 08\n        u32 ackErr; // offset 0c\n        u32 unicast; // offset 10\n        u32 multicast; // offset 14\n        u32 wep; // offset 18\n        u32 beacon; // offset 1c\n    } tx; // offset 00\n    struct {\n        u32 rts; // offset 00\n        u32 fragment; // offset 04\n        u32 unicast; // offset 08\n        u32 multicast; // offset 0c\n        u32 wep; // offset 10\n        u32 beacon; // offset 14\n        u32 fcsErr; // offset 18\n        u32 duplicateErr; // offset 1c\n        u32 mpDuplicateErr; // offset 20\n        u32 icvErr; // offset 24\n        u32 fcErr; // offset 28\n        u32 lengthErr; // offset 2c\n        u32 plcpErr; // offset 30\n        u32 bufOvfErr; // offset 34\n        u32 pathErr; // offset 38\n        u32 rateErr; // offset 3c\n        u32 fcsOk; // offset 40\n    } rx; // offset 20\n    struct {\n        u32 txMp; // offset 00\n        u32 txKey; // offset 04\n        u32 txNull; // offset 08\n        u32 rxMp; // offset 0c\n        u32 rxMpAck; // offset 10\n        u32 keyResponseErr[15]; // offset 14\n    } multiPoll; // offset 64\n} WlCounter;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 rsv1; // offset 06\n    WlCounter counter; // offset 08\n} WlDevGetWirelessCounterCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 rsv1; // offset 06\n    WlCounter counter; // offset 08\n} WlDevGetInfoCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 state; // offset 06\n} WlDevGetStateCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 state; // offset 06\n} WlDevGetStationStateCfm;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlDevTestSignalCfm;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 control; // offset 10\n    u16 signal; // offset 12\n    u16 rate; // offset 14\n    u16 channel; // offset 16\n} WlDevTestSignalReq;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n} WlDevTestRxCfm;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 control; // offset 10\n    u16 channel; // offset 12\n} WlDevTestRxReq;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 buf[2]; // offset 06\n} WlCmdCfm;\nstruct WMStartParentCallback {\n    u16 apiid; // offset 00\n    u16 errcode; // offset 02\n    u16 wlCmdID; // offset 04\n    u16 wlResult; // offset 06\n    u16 state; // offset 08\n    u8 macAddress[6]; // offset 0a\n    u16 aid; // offset 10\n    u16 reason; // offset 12\n    u8 ssid[24]; // offset 14\n    u16 parentSize; // offset 2c\n    u16 childSize; // offset 2e\n};\ntypedef struct WMStartParentCallback WMstartParentCallback;\ntypedef struct WMStartParentCallback WMStartParentCallback;\nstruct WMStartScanCallback {\n    u16 apiid; // offset 00\n    u16 errcode; // offset 02\n    u16 wlCmdID; // offset 04\n    u16 wlResult; // offset 06\n    u16 state; // offset 08\n    u8 macAddress[6]; // offset 0a\n    u16 channel; // offset 10\n    u16 linkLevel; // offset 12\n    u16 ssidLength; // offset 14\n    u16 ssid[16]; // offset 16\n    u16 gameInfoLength; // offset 36\n    struct WMGameInfo gameInfo; // offset 38\n};\ntypedef struct WMStartScanCallback WMStartScanCallback;\ntypedef struct WMStartScanCallback WMstartScanCallback;\nstruct WMStartScanReq {\n    u16 apiid; // offset 00\n    u16 channel; // offset 02\n    struct WMBssDesc* scanBuf; // offset 04\n    u16 maxChannelTime; // offset 08\n    u8 bssid[6]; // offset 0a\n};\ntypedef struct WMStartScanReq WMStartScanReq;\ntypedef struct WMStartScanReq WMstartScanReq;\nstruct WMStartScanExCallback {\n    u16 apiid; // offset 00\n    u16 errcode; // offset 02\n    u16 wlCmdID; // offset 04\n    u16 wlResult; // offset 06\n    u16 state; // offset 08\n    u16 channelList; // offset 0a\n    u8 reserved[2]; // offset 0c\n    u16 bssDescCount; // offset 0e\n    struct WMBssDesc* bssDesc[16]; // offset 10\n    u16 linkLevel[16]; // offset 50\n};\ntypedef struct WMStartScanExCallback WMStartScanExCallback;\ntypedef struct WMStartScanExCallback WMstartScanExCallback;\nstruct WMStartScanExReq {\n    u16 apiid; // offset 00\n    u16 channelList; // offset 02\n    struct WMBssDesc* scanBuf; // offset 04\n    u16 scanBufSize; // offset 08\n    u16 maxChannelTime; // offset 0a\n    u8 bssid[6]; // offset 0c\n    u16 scanType; // offset 12\n    u16 ssidLength; // offset 14\n    u8 ssid[32]; // offset 16\n    u16 ssidMatchLength; // offset 36\n    u16 rsv[2]; // offset 38\n};\ntypedef struct WMStartScanExReq WMStartScanExReq;\ntypedef struct WMStartScanExReq WMstartScanExReq;\nstruct WMStartConnectCallback {\n    u16 apiid; // offset 00\n    u16 errcode; // offset 02\n    u16 wlCmdID; // offset 04\n    u16 wlResult; // offset 06\n    u16 state; // offset 08\n    u16 aid; // offset 0a\n    u16 reason; // offset 0c\n    u16 wlStatus; // offset 0e\n    u8 macAddress[6]; // offset 10\n    u16 parentSize; // offset 16\n    u16 childSize; // offset 18\n};\ntypedef struct WMStartConnectCallback WMstartConnectCallback;\ntypedef struct WMStartConnectCallback WMStartConnectCallback;\nstruct WMStartConnectReq {\n    u16 apiid; // offset 00\n    u16 reserved; // offset 02\n    struct WMBssDesc* pInfo; // offset 04\n    u8 ssid[24]; // offset 08\n    int powerSave; // offset 20\n    u16 reserved2; // offset 24\n    u16 authMode; // offset 26\n};\ntypedef struct WMStartConnectReq WMStartConnectReq;\ntypedef struct WMStartConnectReq WMstartConnectReq;\nstruct WMDisconnectCallback {\n    u16 apiid; // offset 00\n    u16 errcode; // offset 02\n    u16 wlCmdID; // offset 04\n    u16 wlResult; // offset 06\n    u16 tryBitmap; // offset 08\n    u16 disconnectedBitmap; // offset 0a\n};\ntypedef struct WMDisconnectCallback WMDisconnectCallback;\nstruct WMStartMPCallback {\n    u16 apiid; // offset 00\n    u16 errcode; // offset 02\n    u16 state; // offset 04\n    u8 reserved[2]; // offset 06\n    struct WMMpRecvBuf* recvBuf; // offset 08\n    u16 timeStamp; // offset 0c\n    u16 rate_rssi; // offset 0e\n    u8 destAdrs[6]; // offset 10\n    u8 srcAdrs[6]; // offset 16\n    u16 seqNum; // offset 1c\n    u16 tmptt; // offset 1e\n    u16 pollbmp; // offset 20\n    u16 reserved2; // offset 22\n};\ntypedef struct WMStartMPCallback WMStartMPCallback;\ntypedef struct WMStartMPCallback WMstartMPCallback;\nstruct WMMPTmpParam {\n    u32 mask; // offset 00\n    u16 minFrequency; // offset 04\n    u16 frequency; // offset 06\n    u16 maxFrequency; // offset 08\n    u16 defaultRetryCount; // offset 0a\n    u8 minPollBmpMode; // offset 0c\n    u8 singlePacketMode; // offset 0d\n    u8 ignoreFatalErrorMode; // offset 0e\n    u8 reserved[1]; // offset 0f\n};\ntypedef struct WMMPTmpParam WMMPTmpParam;\nstruct WMMPParam {\n    u32 mask; // offset 00\n    u16 minFrequency; // offset 04\n    u16 frequency; // offset 06\n    u16 maxFrequency; // offset 08\n    u16 parentSize; // offset 0a\n    u16 childSize; // offset 0c\n    u16 parentInterval; // offset 0e\n    u16 childInterval; // offset 10\n    u16 parentVCount; // offset 12\n    u16 childVCount; // offset 14\n    u16 defaultRetryCount; // offset 16\n    u8 minPollBmpMode; // offset 18\n    u8 singlePacketMode; // offset 19\n    u8 ignoreFatalErrorMode; // offset 1a\n    u8 ignoreSizePrecheckMode; // offset 1b\n};\ntypedef struct WMMPParam WMMPParam;\nstruct WMStartMPReq {\n    u16 apiid; // offset 00\n    u16 rsv1; // offset 02\n    u32* recvBuf; // offset 04\n    u32 recvBufSize; // offset 08\n    u32* sendBuf; // offset 0c\n    u32 sendBufSize; // offset 10\n    struct WMMPParam param; // offset 14\n    struct WMMPTmpParam tmpParam; // offset 30\n};\ntypedef struct WMStartMPReq WMStartMPReq;\nenum WMErrCode {\n    WM_ERRCODE_SUCCESS = 0,\n    WM_ERRCODE_FAILED = 1,\n    WM_ERRCODE_OPERATING = 2,\n    WM_ERRCODE_ILLEGAL_STATE = 3,\n    WM_ERRCODE_WM_DISABLE = 4,\n    WM_ERRCODE_NO_KEYSET = 5,\n    WM_ERRCODE_NO_DATASET = 5,\n    WM_ERRCODE_INVALID_PARAM = 6,\n    WM_ERRCODE_NO_CHILD = 7,\n    WM_ERRCODE_FIFO_ERROR = 8,\n    WM_ERRCODE_TIMEOUT = 9,\n    WM_ERRCODE_SEND_QUEUE_FULL = 10,\n    WM_ERRCODE_NO_ENTRY = 11,\n    WM_ERRCODE_OVER_MAX_ENTRY = 12,\n    WM_ERRCODE_INVALID_POLLBITMAP = 13,\n    WM_ERRCODE_NO_DATA = 14,\n    WM_ERRCODE_SEND_FAILED = 15,\n    WM_ERRCODE_DCF_TEST = 16,\n    WM_ERRCODE_WL_INVALID_PARAM = 17,\n    WM_ERRCODE_WL_LENGTH_ERR = 18,\n    WM_ERRCODE_FLASH_ERROR = 19,\n    WM_ERRCODE_MAX = 20,\n};\nstruct WMPortSendCallback {\n    u16 apiid; // offset 00\n    u16 errcode; // offset 02\n    u16 wlCmdID; // offset 04\n    u16 wlResult; // offset 06\n    u16 state; // offset 08\n    u16 port; // offset 0a\n    u16 destBitmap; // offset 0c\n    u16 restBitmap; // offset 0e\n    u16 sentBitmap; // offset 10\n    u16 rsv; // offset 12\n    u16* data; // offset 14\n    union {\n        u16 size; // offset 00\n        u16 length; // offset 00\n    }; // offset 18\n    u16 seqNo; // offset 1a\n    void (*callback)(void*); // offset 1c\n    void* arg; // offset 20\n    u16 maxSendDataSize; // offset 24\n    u16 maxRecvDataSize; // offset 26\n};\ntypedef struct WMPortSendCallback WMPortSendCallback;\nstruct WMStartDCFCallback {\n    u16 apiid; // offset 00\n    u16 errcode; // offset 02\n    u16 state; // offset 04\n    u8 reserved[2]; // offset 06\n    struct WMDcfRecvBuf* recvBuf; // offset 08\n};\ntypedef struct WMStartDCFCallback WMStartDCFCallback;\ntypedef struct WMStartDCFCallback WMstartDCFCallback;\nstruct WMStartTestModeCallback {\n    u16 apiid; // offset 00\n    u16 errcode; // offset 02\n    u32 RFadr5; // offset 04\n    u32 RFadr6; // offset 08\n    u16 PllLockCheck; // offset 0c\n    u16 RFMDflag; // offset 0e\n};\ntypedef struct WMStartTestModeCallback WMStartTestModeCallback;\nstruct WMMeasureChannelCallback {\n    u16 apiid; // offset 00\n    u16 errcode; // offset 02\n    u16 wlCmdID; // offset 04\n    u16 wlResult; // offset 06\n    u16 channel; // offset 08\n    u16 ccaBusyRatio; // offset 0a\n};\ntypedef struct WMMeasureChannelCallback WMmeasureChannelCallback;\ntypedef struct WMMeasureChannelCallback WMMeasureChannelCallback;\nstruct WMMeasureChannelReq {\n    u16 apiid; // offset 00\n    u16 ccaMode; // offset 02\n    u16 edThreshold; // offset 04\n    u16 channel; // offset 06\n    u16 measureTime; // offset 08\n};\ntypedef struct WMMeasureChannelReq WMMeasureChannelReq;\ntypedef struct WMMeasureChannelReq WMmeasureChannelReq;\nstruct WMGetWirelessCounterCallback {\n    u16 apiid; // offset 00\n    u16 errcode; // offset 02\n    u16 wlCmdID; // offset 04\n    u16 wlResult; // offset 06\n    u32 TX_Success; // offset 08\n    u32 TX_Failed; // offset 0c\n    u32 TX_Retry; // offset 10\n    u32 TX_AckError; // offset 14\n    u32 TX_Unicast; // offset 18\n    u32 TX_Multicast; // offset 1c\n    u32 TX_WEP; // offset 20\n    u32 TX_Beacon; // offset 24\n    u32 RX_RTS; // offset 28\n    u32 RX_Fragment; // offset 2c\n    u32 RX_Unicast; // offset 30\n    u32 RX_Multicast; // offset 34\n    u32 RX_WEP; // offset 38\n    u32 RX_Beacon; // offset 3c\n    u32 RX_FCSError; // offset 40\n    u32 RX_DuplicateError; // offset 44\n    u32 RX_MPDuplicateError; // offset 48\n    u32 RX_ICVError; // offset 4c\n    u32 RX_FrameCtrlError; // offset 50\n    u32 RX_LengthError; // offset 54\n    u32 RX_PLCPError; // offset 58\n    u32 RX_BufferOverflowError; // offset 5c\n    u32 RX_PathError; // offset 60\n    u32 RX_RateError; // offset 64\n    u32 RX_FCSOK; // offset 68\n    u32 TX_MP; // offset 6c\n    u32 TX_KeyData; // offset 70\n    u32 TX_NullKey; // offset 74\n    u32 RX_MP; // offset 78\n    u32 RX_MPACK; // offset 7c\n    u32 MPKeyResponseError[15]; // offset 80\n};\ntypedef struct WMGetWirelessCounterCallback WMgetWirelessCounterCallback;\ntypedef struct WMGetWirelessCounterCallback WMGetWirelessCounterCallback;\nstruct WMPortRecvCallback {\n    u16 apiid; // offset 00\n    u16 errcode; // offset 02\n    u16 state; // offset 04\n    u16 port; // offset 06\n    struct WMMpRecvBuf* recvBuf; // offset 08\n    u16* data; // offset 0c\n    u16 length; // offset 10\n    u16 aid; // offset 12\n    u8 macAddress[6]; // offset 14\n    u16 seqNo; // offset 1a\n    void* arg; // offset 1c\n    u16 myAid; // offset 20\n    u16 connectedAidBitmap; // offset 22\n    u8 ssid[24]; // offset 24\n    u16 reason; // offset 3c\n    u16 rssi; // offset 3e\n    u16 maxSendDataSize; // offset 40\n    u16 maxRecvDataSize; // offset 42\n};\ntypedef struct WMPortRecvCallback WMPortRecvCallback;\nstruct WMSetMPParameterCallback {\n    u16 apiid; // offset 00\n    u16 errcode; // offset 02\n    u32 mask; // offset 04\n    struct WMMPParam oldParam; // offset 08\n};\ntypedef struct WMSetMPParameterCallback WMSetMPParameterCallback;\nstruct WMStopTestRxModeCallback {\n    u16 apiid; // offset 00\n    u16 errcode; // offset 02\n    u32 fcsOk; // offset 04\n    u32 fcsErr; // offset 08\n};\ntypedef struct WMStopTestRxModeCallback WMStopTestRxModeCallback;\ntypedef struct {\n    u16 NextId; // offset 00\n    u16 Flag; // offset 02\n    void (*pTaskFunc)(); // offset 04\n} TASK_TBL;\ntypedef struct {\n    u16 EnQ[4]; // offset 00\n    u16 DeQ[4]; // offset 08\n    u16 NextPri; // offset 10\n    u16 TaskPri; // offset 12\n    u16 CurrTaskID; // offset 14\n    u16 pad; // offset 16\n    struct _OSThread Thread; // offset 18\n    TASK_TBL TaskTbl[24]; // offset bc\n} TASK_MAN;\ntypedef struct {\n    u32 Prev; // offset 00\n    u32 Next; // offset 04\n    u16 Flag; // offset 08\n    u16 BufID; // offset 0a\n} HEAPBUF_HEADER;\ntypedef struct {\n    HEAPBUF_HEADER* Head; // offset 00\n    HEAPBUF_HEADER* Tail; // offset 04\n    u16 Count; // offset 08\n    u16 Flag; // offset 0a\n} HEAPBUF_MAN;\ntypedef struct {\n    u32 heapType; // offset 00\n    union {\n        struct {\n            enum _enum_16263 id; // offset 00\n            int heapHandle; // offset 04\n        } os; // offset 00\n        struct {\n            u32 (*alloc)(u32); // offset 00\n            u32 (*free)(void*); // offset 04\n        } ext; // offset 00\n    } func; // offset 04\n} HEAP_INFO;\ntypedef struct {\n    HEAP_INFO HeapInfo; // offset 00\n    HEAPBUF_MAN TmpBuf; // offset 0c\n    HEAPBUF_MAN TxPri[3]; // offset 18\n    HEAPBUF_MAN MaDataCfm; // offset 3c\n    HEAPBUF_MAN RxData; // offset 48\n    HEAPBUF_MAN RxBeacon; // offset 54\n    HEAPBUF_MAN RxManCtrl; // offset 60\n    HEAPBUF_MAN Defrag; // offset 6c\n    HEAPBUF_MAN ToWM; // offset 78\n    HEAPBUF_MAN RequestCmd; // offset 84\n    HEAPBUF_MAN man_rsv[4]; // offset 90\n} HEAP_MAN;\ntypedef struct {\n    u16 Basic; // offset 00\n    u16 Support; // offset 02\n} RATE_SET;\ntypedef struct {\n    u64 NextTbttTsf; // offset 00\n    u16 STA; // offset 08\n    u16 RSSI; // offset 0a\n    u16 Mode; // offset 0c\n    u16 PowerMgtMode; // offset 0e\n    u16 PowerState; // offset 10\n    u16 bSynchro; // offset 12\n    u16 RxDtims; // offset 14\n    u16 PN15Rate; // offset 16\n    u16 SigTest2; // offset 18\n    u16 bFirstTbtt; // offset 1a\n    u16 ManCtrlRetry; // offset 1c\n    u16 SSIDLength; // offset 1e\n    u8 SSID[32]; // offset 20\n    u8 SSIDMask[32]; // offset 40\n    RATE_SET RateSet; // offset 60\n    u16 BSSID[3]; // offset 64\n    u16 AID; // offset 6a\n    u16 SeqNum; // offset 6c\n    u16 BeaconPeriod; // offset 6e\n    u16 ListenInterval; // offset 70\n    u16 CurrListenInterval; // offset 72\n    u16 DTIMPeriod; // offset 74\n    u16 DTIMCount; // offset 76\n    u16 rsvcc; // offset 78\n    u16 CurrChannel; // offset 7a\n    u16 CapaInfo; // offset 7c\n    u16 BeaconLostTh; // offset 7e\n    u16 BeaconLostCnt; // offset 80\n    u16 LinkAdrs[3]; // offset 82\n    u16 APCamAdrs; // offset 88\n    u16 FrameCtrl; // offset 8a\n    u16 FrameLifeTime; // offset 8c\n    u16 bExistTIM; // offset 8e\n    u16 TxPower; // offset 90\n    struct {\n        struct {\n            u16 SSID; // offset 00\n            u16 TIM; // offset 02\n            u16 GameInfo; // offset 04\n        } Beacon; // offset 00\n        struct {\n            u16 SSID; // offset 00\n        } ProbeReq; // offset 06\n        struct {\n            u16 Size; // offset 00\n        } RxBuf; // offset 08\n    } Ofst; // offset 92\n    void* GameInfoAdrs; // offset 9c\n    u16 GameInfoLength; // offset a0\n    u16 GameInfoAlign; // offset a2\n    u16 bUpdateGameInfo; // offset a4\n    u16 TmpttPs; // offset a6\n    u32 IntervalCount; // offset a8\n    u16 Scrambler; // offset ac\n    u16 DbgSeqNum; // offset ae\n    u16 FatalErr; // offset b0\n    u16 rsv; // offset b2\n    u16 CurrErrCount; // offset b4\n    u16 TxBufErrCount; // offset b6\n    u16 TxBufResCount; // offset b8\n    u16 WepErrCount; // offset ba\n    u16 MpEndErrCount; // offset bc\n    u16 NotPollTxErrCount; // offset be\n} WORK_PARAM;\ntypedef struct {\n    u16 adrs; // offset 00\n    u16 value; // offset 02\n} MAC_INIT_REGS;\ntypedef struct {\n    u16 state; // offset 00\n    u16 aid; // offset 02\n    u16 macAdrs[3]; // offset 04\n    u16 rssi; // offset 0a\n    u16 capaInfo; // offset 0c\n    u16 authSeed; // offset 0e\n    u16 supRateSet; // offset 10\n    u16 rsv; // offset 12\n    u16 lastSeqCtrl; // offset 14\n    u16 frameCount; // offset 16\n    u16 lifeTime; // offset 18\n    u16 maxLifeTime; // offset 1a\n} CAM_ELEMENT;\ntypedef struct {\n    CAM_ELEMENT* pCAM; // offset 00\n    u16 CamMaxStaNum; // offset 04\n    u16 MaxStaNum; // offset 06\n    u16 MacAdrs[3]; // offset 08\n    u16 RetryLimit; // offset 0e\n    u16 EnableChannel; // offset 10\n    u16 Mode; // offset 12\n    u16 Rate; // offset 14\n    u16 AuthAlgo; // offset 16\n    u16 WepMode; // offset 18\n    u16 WepKeyId; // offset 1a\n    u16 FrameLifeTimePerBeacon; // offset 1c\n    u16 BeaconType : 1; // offset 1e\n    u16 BcSsidResponse : 1; // offset 1e\n    u16 PreambleType : 1; // offset 1e\n    u16 MainAntenna : 1; // offset 1e\n    u16 Diversity : 1; // offset 1e\n    u16 UseAntenna : 1; // offset 1e\n    u16 BcnTxRxIndMsg : 1; // offset 1e\n    u16 NullKeyRes : 1; // offset 1e\n    u16 MulticastPass : 1; // offset 1e\n    u16 dmm : 7; // offset 1e\n    u16 ActiveZone; // offset 20\n    u16 DiagResult; // offset 22\n    u32 ParamFlag; // offset 24\n} CONFIG_PARAM;\ntypedef struct {\n    u8 ID; // offset 00\n    u8 Length; // offset 01\n    u8 SupportedRate[2]; // offset 02\n} SUP_RATE_ELEMENT;\ntypedef struct {\n    u16 Id; // offset 00\n    u16 Bits; // offset 02\n    u16 InitNum; // offset 04\n    u16 ChanNum; // offset 06\n    u16 BbpCnt; // offset 08\n    u16 pad; // offset 0a\n    u32 BkReg; // offset 0c\n} RF_CONFIG;\ntypedef struct {\n    u16 FrameId; // offset 00\n    u16 CamAdrs; // offset 02\n    u16 FrameTime; // offset 04\n    u16 Length; // offset 06\n} FIRM_HEADER;\ntypedef union {\n    struct {\n        u16 Status; // offset 00\n        u16 Status2; // offset 02\n        u16 rsv_RetryCount; // offset 04\n        u16 rsv_AppRate; // offset 06\n        u16 Service_Rate; // offset 08\n        u16 MPDU; // offset 0a\n    } Tx; // offset 00\n    struct {\n        u16 Status; // offset 00\n        u16 NextBnry; // offset 02\n        u16 TimeStamp; // offset 04\n        u16 Service_Rate; // offset 06\n        u16 MPDU; // offset 08\n        u16 rsv_RSSI; // offset 0a\n    } Rx; // offset 00\n} MAC_HEADER;\ntypedef union {\n    u16 Data; // offset 00\n    struct {\n        u16 Version : 2; // offset 00\n        u16 Type : 2; // offset 00\n        u16 SubType : 4; // offset 00\n        u16 ToDS : 1; // offset 00\n        u16 FromDS : 1; // offset 00\n        u16 MoreFrag : 1; // offset 00\n        u16 Retry : 1; // offset 00\n        u16 PowerMan : 1; // offset 00\n        u16 MoreData : 1; // offset 00\n        u16 WEP : 1; // offset 00\n        u16 Order : 1; // offset 00\n    } Bit; // offset 00\n} FRAME_CTRL;\ntypedef union {\n    u16 Data; // offset 00\n    struct {\n        u16 FragNum : 4; // offset 00\n        u16 SeqNum : 12; // offset 00\n    } Bit; // offset 00\n} SEQ_CTRL;\ntypedef struct {\n    FRAME_CTRL FrameCtrl; // offset 00\n    u16 DurationID; // offset 02\n    u16 Adrs1[3]; // offset 04\n    u16 Adrs2[3]; // offset 0a\n    u16 Adrs3[3]; // offset 10\n    SEQ_CTRL SeqCtrl; // offset 16\n} DATA_HEADER;\ntypedef struct {\n    FIRM_HEADER FirmHeader; // offset 00\n    MAC_HEADER MacHeader; // offset 08\n    DATA_HEADER Dot11Header; // offset 14\n    u8 Body[4]; // offset 2c\n} RXFRM;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    RXFRM frame; // offset 10\n} RXPACKET;\ntypedef struct {\n    u16 DA[3]; // offset 00\n    u16 SA[3]; // offset 06\n    SEQ_CTRL SeqCtrl; // offset 0c\n    u16 pad; // offset 0e\n} DEFRAG_TBL;\ntypedef struct {\n    u16 RestTime; // offset 00\n    u16 UnitLength; // offset 02\n    DEFRAG_TBL DefragTbl; // offset 04\n    RXPACKET* pPacket; // offset 14\n} DEFRAG_LIST;\ntypedef struct {\n    u16 LastMpSeq; // offset 00\n    u16 IcvOkCntFlag; // offset 02\n    u16 wlCurr; // offset 04\n    u16 TxKeyReg; // offset 06\n    u16 TxKeyFrm; // offset 08\n    u16 rsv; // offset 0a\n    DEFRAG_LIST DefragList[3]; // offset 0c\n} RX_CTRL;\ntypedef struct {\n    u16 Count; // offset 00\n    u16 PowerMgtMode; // offset 02\n    u16 PowerState; // offset 04\n    u16 NotClass3; // offset 06\n    u16 NotSetTIM; // offset 08\n    u16 dmm; // offset 0a\n    u16 ConnectSta; // offset 0c\n    u16 UseAidMap; // offset 0e\n} CAM_MAN;\ntypedef struct {\n    FIRM_HEADER FirmHeader; // offset 00\n    MAC_HEADER MacHeader; // offset 08\n    DATA_HEADER Dot11Header; // offset 14\n    union {\n        u8 Body[4]; // offset 00\n        u8* Pointer; // offset 00\n    } Data; // offset 2c\n} TXFRM;\ntypedef struct {\n    MAC_HEADER MacHeader; // offset 00\n    DATA_HEADER Dot11Header; // offset 0c\n    u8 Body[4]; // offset 24\n} TXFRM_MAC;\ntypedef struct {\n    u16 Busy; // offset 00\n    u16 InCount; // offset 02\n    u16 OutCount; // offset 04\n    u16 pad; // offset 06\n    TXFRM_MAC* pMacFrm; // offset 08\n    TXFRM* pFrm; // offset 0c\n    void (*pEndFunc)(TXFRM*, u32); // offset 10\n} TXQ;\ntypedef struct {\n    u16 length; // offset 00\n    u8 rate; // offset 02\n    u8 rssi; // offset 03\n    u16 aid; // offset 04\n    u16 noResponse; // offset 06\n    u8 cdata[4]; // offset 08\n} WlMpKeyData;\ntypedef struct {\n    u16 bitmap; // offset 00\n    u16 errBitmap; // offset 02\n    u16 count; // offset 04\n    u16 length; // offset 06\n    u16 txCount; // offset 08\n    WlMpKeyData data[1]; // offset 0a\n} WlMpKey;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    WlMpKey mpKey; // offset 10\n} WlMaMpEndInd;\ntypedef struct {\n    TXQ Txq[3]; // offset 00\n    TXQ Mp; // offset 3c\n    TXQ Key[2]; // offset 50\n    TXQ Beacon; // offset 78\n    u32 Flag; // offset 8c\n    WlMaMpEndInd* pMpEndInd; // offset 90\n    u16 TXOP; // offset 94\n    u16 TMPTT; // offset 96\n    u16 SetKeyMap; // offset 98\n    u16 GetKeyMap; // offset 9a\n    u16 DataLength; // offset 9c\n    u16 RetryLimit; // offset 9e\n    u16 RestBitmap; // offset a0\n    u16 BkKeyIn; // offset a2\n    u16 BkKeyOut; // offset a4\n    u16 BkSeqNum; // offset a6\n    u16 MpBlkCnt; // offset a8\n    u16 MpRstCnt; // offset aa\n    u16 MpLastOk; // offset ac\n    u16 TimeOutFrm; // offset ae\n} TX_CTRL;\ntypedef struct {\n    u16 a; // offset 00\n    u16 b; // offset 02\n    u16 seed; // offset 04\n    u16 rsv; // offset 06\n} RAND_CTRL;\ntypedef struct {\n    u8* pCmd; // offset 00\n    u16 Busy; // offset 04\n    u16 pad; // offset 06\n} CMDIF_MAN;\ntypedef struct {\n    u16 State; // offset 00\n    u16 pad; // offset 02\n    union {\n        struct {\n            u16 MaxConfirmLength; // offset 00\n            u16 ChannelCount; // offset 02\n            u16 bFound; // offset 04\n            u16 ElapseTime; // offset 06\n            u16 TxPeriod; // offset 08\n        } Scan; // offset 00\n        struct {\n            u16 Result; // offset 00\n            u16 Status; // offset 02\n        } Join; // offset 00\n        struct {\n            TXFRM* pTxFrm; // offset 00\n        } DeAuth; // offset 00\n        struct {\n            TXFRM* pTxFrm; // offset 00\n        } DisAss; // offset 00\n        struct {\n            u32 Counter; // offset 00\n            u32 CCA; // offset 04\n            u16 bkPowerMode; // offset 08\n            u16 bkCCAMode; // offset 0a\n            u16 bkEdTh; // offset 0c\n            u16 bkMode; // offset 0e\n            u16 Channel; // offset 10\n            u16 sts; // offset 12\n        } Measure; // offset 00\n    } Work; // offset 04\n    union {\n        WlMlmeResetReq* Reset; // offset 00\n        WlMlmePowerMgtReq* PwrMgt; // offset 00\n        WlMlmeScanReq* Scan; // offset 00\n        WlMlmeJoinReq* Join; // offset 00\n        WlMlmeAuthReq* Auth; // offset 00\n        WlMlmeDeAuthReq* DeAuth; // offset 00\n        WlMlmeAssReq* Ass; // offset 00\n        WlMlmeReAssReq* ReAss; // offset 00\n        WlMlmeDisAssReq* DisAss; // offset 00\n        WlMlmeStartReq* Start; // offset 00\n        WlMlmeMeasChanReq* MeasChannel; // offset 00\n    } pReq; // offset 18\n    union {\n        WlCmdCfm* Cfm; // offset 00\n        WlMlmeResetCfm* Reset; // offset 00\n        WlMlmePowerMgtCfm* PwrMgt; // offset 00\n        WlMlmeScanCfm* Scan; // offset 00\n        WlMlmeJoinCfm* Join; // offset 00\n        WlMlmeAuthCfm* Auth; // offset 00\n        WlMlmeDeAuthCfm* DeAuth; // offset 00\n        WlMlmeAssCfm* Ass; // offset 00\n        WlMlmeReAssCfm* ReAss; // offset 00\n        WlMlmeDisAssCfm* DisAss; // offset 00\n        WlMlmeStartCfm* Start; // offset 00\n        WlMlmeMeasChanCfm* MeasChannel; // offset 00\n    } pCfm; // offset 1c\n} MLME_MAN;\ntypedef struct {\n    u16 rssi; // offset 00\n    u16 channel; // offset 02\n    u16 capaInfo; // offset 04\n    u16 bssid[3]; // offset 06\n    u16 ssidLength; // offset 0c\n    u8 ssid[32]; // offset 0e\n    u16 beaconInterval; // offset 2e\n    u16 lifeTime; // offset 30\n} WlApElement;\ntypedef struct {\n    TASK_MAN TaskMan; // offset 00\n    HEAP_MAN HeapMan; // offset 17c\n    WlApElement ApList[4]; // offset 23c\n    struct OSMessageQueue* pSendMsgQueue; // offset 304\n    struct OSMessageQueue* pRecvMsgQueue; // offset 308\n    u32 DmaChannel; // offset 30c\n    u32 DmaMaxCount; // offset 310\n    long lockID; // offset 314\n    void* pFlashImg; // offset 318\n    CONFIG_PARAM Config; // offset 31c\n    WORK_PARAM Work; // offset 344\n    MLME_MAN MLME; // offset 404\n    CMDIF_MAN CmdIf; // offset 424\n    TX_CTRL TxCtrl; // offset 42c\n    RX_CTRL RxCtrl; // offset 4dc\n    CAM_MAN CamMan; // offset 530\n    WlCounter Counter; // offset 540\n    RAND_CTRL Rand; // offset 5f4\n    RF_CONFIG Rf; // offset 5fc\n    struct OSiAlarm PeriodicAlarm; // offset 60c\n    struct OSiAlarm Alarm; // offset 638\n    struct OSiAlarm KeyAlarm; // offset 664\n    u32 WlDbgLevel; // offset 690\n    u16 WlOperation; // offset 694\n    u16 EnableChannel; // offset 696\n} WL_MAN;\ntypedef struct {\n    u16 rssi; // offset 00\n    u16 channel; // offset 02\n    u16 capaInfo; // offset 04\n    u16 bssid[3]; // offset 06\n    u16 ssidLength; // offset 0c\n    u8 ssid[32]; // offset 0e\n    u16 beaconInterval; // offset 2e\n    u16 lifeTime; // offset 30\n} AP_LIST;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 errCode; // offset 10\n} WlMaFatalErrInd;\ntypedef struct {\n    u16 adrs; // offset 00\n    u16 mask; // offset 02\n} TEST_REGS;\ntypedef struct {\n    MAC_HEADER MacHeader; // offset 00\n    DATA_HEADER Dot11Header; // offset 0c\n    u8 Body[4]; // offset 24\n} RXFRM_MAC;\ntypedef struct {\n    u8 ID; // offset 00\n    u8 Length; // offset 01\n    u8 DTIMCount; // offset 02\n    u8 DTIMPeriod; // offset 03\n    u8 BitmapCtrl; // offset 04\n    u8 VitrualBitmap[5]; // offset 05\n} TIM_ELEMENT;\ntypedef struct {\n    FRAME_CTRL FrameCtrl; // offset 00\n    u16 Duration; // offset 02\n    u16 DA[3]; // offset 04\n    u16 SA[3]; // offset 0a\n    u16 BSSID[3]; // offset 10\n    SEQ_CTRL SeqCtrl; // offset 16\n} MAN_HEADER;\ntypedef struct {\n    u16 ReasonCode; // offset 00\n} DEAUTH_BODY;\ntypedef struct {\n    FIRM_HEADER FirmHeader; // offset 00\n    MAC_HEADER MacHeader; // offset 08\n    MAN_HEADER Dot11Header; // offset 14\n    DEAUTH_BODY Body; // offset 2c\n} DEAUTH_FRAME;\ntypedef struct {\n    u16 RequestMinLength; // offset 00\n    u16 ConfirmMinLength; // offset 02\n    u16 (*pCmdFunc)(WlCmdReq*, WlCmdCfm*); // offset 04\n} WLLIB_CMD_TBL;\ntypedef struct {\n    u8 ID; // offset 00\n    u8 Length; // offset 01\n    u8 Text[253]; // offset 02\n} CHALLENGE_ELEMENT;\ntypedef struct {\n    u16 AlgoType; // offset 00\n    u16 SeqNum; // offset 02\n    u16 StatusCode; // offset 04\n    CHALLENGE_ELEMENT ChallengeText; // offset 06\n    u8 pad[1]; // offset 105\n} AUTH_BODY;\ntypedef struct {\n    FIRM_HEADER FirmHeader; // offset 00\n    MAC_HEADER MacHeader; // offset 08\n    MAN_HEADER Dot11Header; // offset 14\n    AUTH_BODY Body; // offset 2c\n} AUTH_FRAME;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 peerMacAdrs[3]; // offset 10\n    u16 algorithm; // offset 16\n} WlMlmeAuthInd;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 peerMacAdrs[3]; // offset 10\n    u16 reasonCode; // offset 16\n} WlMlmeDeAuthInd;\ntypedef struct {\n    u8 ID; // offset 00\n    u8 Length; // offset 01\n    u8 SSID[32]; // offset 02\n} SSID_ELEMENT;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 peerMacAdrs[3]; // offset 10\n    u16 aid; // offset 16\n    u16 ssidLength; // offset 18\n    u8 ssid[32]; // offset 1a\n} WlMlmeAssInd;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 peerMacAdrs[3]; // offset 10\n    u16 aid; // offset 16\n    u16 ssidLength; // offset 18\n    u8 ssid[32]; // offset 1a\n} WlMlmeReAssInd;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 peerMacAdrs[3]; // offset 10\n    u16 reasonCode; // offset 16\n} WlMlmeDisAssInd;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 apMacAdrs[3]; // offset 10\n} WlMlmeBeaconLostInd;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n} WlMlmeBeaconSendInd;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 reserved1[3]; // offset 10\n    u16 gameInfoLength; // offset 16\n    u16 reserved2[3]; // offset 18\n    u8 rate; // offset 1e\n    u8 rssi; // offset 1f\n    u16 reserved3[4]; // offset 20\n    u16 reserved4[3]; // offset 28\n    u16 srcMacAdrs[3]; // offset 2e\n    u16 reserved5[4]; // offset 34\n    u16 gameInfo[1]; // offset 3c\n} WlMlmeBeaconRecvInd;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    u16 mode; // offset 10\n} WlParamSetMcPassModeReq;\ntypedef struct {\n    WlCmdHeader header; // offset 00\n    u16 resultCode; // offset 04\n    u16 mode; // offset 06\n} WlParamGetMcPassModeCfm;\ntypedef struct {\n    MAC_HEADER MacHeader; // offset 00\n    DATA_HEADER Dot11Header; // offset 0c\n    u16 TXOP; // offset 24\n    u16 Bitmap; // offset 26\n    u8 Body[4]; // offset 28\n} TXMPFRM_MAC;\ntypedef union {\n    u16 Data; // offset 00\n    struct {\n        u16 ESS : 1; // offset 00\n        u16 IBSS : 1; // offset 00\n        u16 CFPollable : 1; // offset 00\n        u16 CFPollRequest : 1; // offset 00\n        u16 Privacy : 1; // offset 00\n        u16 ShortPreamble : 1; // offset 00\n        u16 rsv6 : 1; // offset 00\n        u16 rsv7 : 1; // offset 00\n        u16 rsv8 : 1; // offset 00\n        u16 rsv9 : 1; // offset 00\n        u16 rsv10 : 1; // offset 00\n        u16 rsv11 : 1; // offset 00\n        u16 rsv12 : 1; // offset 00\n        u16 rsv13 : 1; // offset 00\n        u16 rsv14 : 1; // offset 00\n        u16 rsv15 : 1; // offset 00\n    } Bit; // offset 00\n} CAPA_INFO;\ntypedef struct {\n    CAPA_INFO CapaInfo; // offset 00\n    u16 StatusCode; // offset 02\n    u16 AID; // offset 04\n    u8 Buf[4]; // offset 06\n} ASSRES_BODY;\ntypedef struct {\n    FIRM_HEADER FirmHeader; // offset 00\n    MAC_HEADER MacHeader; // offset 08\n    MAN_HEADER Dot11Header; // offset 14\n    ASSRES_BODY Body; // offset 2c\n} ASSRES_FRAME;\ntypedef struct {\n    u32 TimeStamp[2]; // offset 00\n    u16 BeaconInterval; // offset 08\n    CAPA_INFO CapaInfo; // offset 0a\n    u8 Buf[54]; // offset 0c\n    u8 pad[2]; // offset 42\n} BEACON_BODY;\ntypedef struct {\n    u8 ID; // offset 00\n    u8 Length; // offset 01\n    u8 OUI[3]; // offset 02\n    u8 SubType; // offset 05\n    u8 ActZone[2]; // offset 06\n    u8 VTSF[2]; // offset 08\n    u8 GameInfo[3]; // offset 0a\n} GAME_INFO_ELEMENT;\ntypedef struct {\n    u16 ReasonCode; // offset 00\n} DISASS_BODY;\ntypedef struct {\n    FIRM_HEADER FirmHeader; // offset 00\n    MAC_HEADER MacHeader; // offset 08\n    MAN_HEADER Dot11Header; // offset 14\n    DISASS_BODY Body; // offset 2c\n} DISASS_FRAME;\ntypedef struct {\n    CAPA_INFO CapaInfo; // offset 00\n    u16 ListenInterval; // offset 02\n    u8 Buf[38]; // offset 04\n} ASSREQ_BODY;\ntypedef struct {\n    FIRM_HEADER FirmHeader; // offset 00\n    MAC_HEADER MacHeader; // offset 08\n    MAN_HEADER Dot11Header; // offset 14\n    ASSREQ_BODY Body; // offset 2c\n} ASSREQ_FRAME;\ntypedef struct {\n    CAPA_INFO CapaInfo; // offset 00\n    u16 ListenInterval; // offset 02\n    u16 CurrAPMacAdrs[3]; // offset 04\n    u8 Buf[38]; // offset 0a\n} REASSREQ_BODY;\ntypedef struct {\n    FIRM_HEADER FirmHeader; // offset 00\n    MAC_HEADER MacHeader; // offset 08\n    MAN_HEADER Dot11Header; // offset 14\n    REASSREQ_BODY Body; // offset 2c\n} REASSREQ_FRAME;\ntypedef struct {\n    CAPA_INFO CapaInfo; // offset 00\n    u16 StatusCode; // offset 02\n    u16 AID; // offset 04\n    u8 Buf[4]; // offset 06\n} REASSRES_BODY;\ntypedef struct {\n    FIRM_HEADER FirmHeader; // offset 00\n    MAC_HEADER MacHeader; // offset 08\n    MAN_HEADER Dot11Header; // offset 14\n    REASSRES_BODY Body; // offset 2c\n} REASSRES_FRAME;\ntypedef struct {\n    u8 Buf[38]; // offset 00\n} PRBREQ_BODY;\ntypedef struct {\n    FIRM_HEADER FirmHeader; // offset 00\n    MAC_HEADER MacHeader; // offset 08\n    MAN_HEADER Dot11Header; // offset 14\n    PRBREQ_BODY Body; // offset 2c\n} PRBREQ_FRAME;\ntypedef struct {\n    u32 TimeStamp[2]; // offset 00\n    u16 BeaconInterval; // offset 08\n    CAPA_INFO CapaInfo; // offset 0a\n    u8 Buf[54]; // offset 0c\n    u8 pad[2]; // offset 42\n} PRBRES_BODY;\ntypedef struct {\n    FIRM_HEADER FirmHeader; // offset 00\n    MAC_HEADER MacHeader; // offset 08\n    MAN_HEADER Dot11Header; // offset 14\n    PRBRES_BODY Body; // offset 2c\n} PRBRES_FRAME;\ntypedef struct {\n    u16 frameId; // offset 00\n    u8 rsv1[4]; // offset 02\n    u16 length; // offset 06\n    u16 status; // offset 08\n    u16 rsvm2; // offset 0a\n    u16 timeStamp; // offset 0c\n    u8 rate; // offset 0e\n    u8 rssi; // offset 0f\n    u32 rsvm3; // offset 10\n    u8 rsv4[4]; // offset 14\n    u16 destAdrs[3]; // offset 18\n    u16 srcAdrs[3]; // offset 1e\n    u8 rsv5[8]; // offset 24\n    u8 data[4]; // offset 2c\n} WlRxFrame;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    WlRxFrame frame; // offset 10\n} WlMaDataInd;\ntypedef struct {\n    u8 rsv1[6]; // offset 00\n    u16 length; // offset 06\n    u16 txKeySts; // offset 08\n    u16 ackTimeStamp; // offset 0a\n    u16 timeStamp; // offset 0c\n    u8 rate; // offset 0e\n    u8 rssi; // offset 0f\n    u8 rsv3[4]; // offset 10\n    u8 rsv4[4]; // offset 14\n    u16 destAdrs[3]; // offset 18\n    u16 srcAdrs[3]; // offset 1e\n    u8 rsv5[6]; // offset 24\n    u16 seqCtrl; // offset 2a\n    u16 txop; // offset 2c\n    u16 bitmap; // offset 2e\n    u16 data[1]; // offset 30\n} WlRxMpFrame;\ntypedef struct {\n    u16 wlRsv[6]; // offset 00\n    WlCmdHeader header; // offset 0c\n    WlRxMpFrame frame; // offset 10\n} WlMaMpInd;\ntypedef struct {\n    FIRM_HEADER FirmHeader; // offset 00\n    MAC_HEADER MacHeader; // offset 08\n    MAN_HEADER Dot11Header; // offset 14\n    BEACON_BODY Body; // offset 2c\n} BEACON_FRAME;\ntypedef struct {\n    u8 ID; // offset 00\n    u8 Length; // offset 01\n    u8 CFPCount; // offset 02\n    u8 CFPPeriod; // offset 03\n    union {\n        u16 u16; // offset 00\n        u8 u8[2]; // offset 00\n    } CFPMaxDuration; // offset 04\n    union {\n        u16 u16; // offset 00\n        u8 u8[2]; // offset 00\n    } CFPDurRemain; // offset 06\n} CF_PARAM_ELEMENT;\ntypedef struct {\n    u8* pElement; // offset 00\n    u16 rxStatus; // offset 04\n    u16 capability; // offset 06\n    u16 bodyLength; // offset 08\n    u16 matchFlag; // offset 0a\n    u16 foundFlag; // offset 0c\n    u16 activeZone; // offset 0e\n    u16 vtsf; // offset 10\n    u16 channel; // offset 12\n    RATE_SET rateSet; // offset 14\n    u16 otherElementCount; // offset 18\n    u16 otherElementLength; // offset 1a\n    SSID_ELEMENT* pSSID; // offset 1c\n    CF_PARAM_ELEMENT* pCFP; // offset 20\n    TIM_ELEMENT* pTIM; // offset 24\n    GAME_INFO_ELEMENT* pGMIF; // offset 28\n} ELEMENT_CHECKER;\n\n#define wlMan (*(WL_MAN**)0x0380FFF4)", "diff_flags": ["-DIFFlevenshtein"], "diff_label": "", "libraries": []}