{"compiler": "gcc2.8.1sn", "compiler_flags": "", "source_code": "? func_80004DBC(void* arg0, void* arg1) {\n    f32 sp0;\n    f32 sp4;\n    f32 sp8;\n    f32 spC;\n    f32 sp10;\n    f32 sp14;\n    f32 sp18;\n    f32 sp1C;\n    ? var_v0;\n    f32 temp_f10;\n    f32 temp_f12;\n    f32 temp_f16;\n    f32 temp_f18;\n    f32 temp_f20;\n    f32 temp_f22;\n    f32 temp_f24;\n    f32 temp_f26;\n    f32 temp_f6;\n    f32 var_f0;\n    f32 var_f2;\n    f32 var_f4;\n\n    var_f4 = arg1->unk24;\n    if (var_f4 < 0.0f) {\n        var_f4 = -var_f4;\n    }\n    var_f2 = arg1->unk28;\n    if (var_f2 < 0.0f) {\n        var_f2 = -var_f2;\n    }\n    var_f0 = arg1->unk2C;\n    if (var_f0 < 0.0f) {\n        var_f0 = -var_f0;\n    }\n    if (var_f2 < var_f4) {\n        if (var_f4 < var_f0) {\n            sp0 = arg1->unk0;\n            sp4 = arg1->unk4;\n            sp8 = arg1->unkC;\n            spC = arg1->unk10;\n            sp10 = arg1->unk18;\n            sp14 = arg1->unk1C;\n            sp18 = arg0->unk0;\n            sp1C = arg0->unk4;\n        } else {\n            sp0 = arg1->unk4;\n            sp4 = arg1->unk8;\n            sp8 = arg1->unk10;\n            spC = arg1->unk14;\n            sp10 = arg1->unk1C;\n            sp14 = arg1->unk20;\n            sp18 = arg0->unk4;\n            goto block_13;\n        }\n    } else if (var_f2 < var_f0) {\n        sp0 = arg1->unk0;\n        sp4 = arg1->unk4;\n        sp8 = arg1->unkC;\n        spC = arg1->unk10;\n        sp10 = arg1->unk18;\n        sp14 = arg1->unk1C;\n        sp18 = arg0->unk0;\n        sp1C = arg0->unk4;\n    } else {\n        sp0 = arg1->unk0;\n        sp4 = arg1->unk8;\n        sp8 = arg1->unkC;\n        spC = arg1->unk14;\n        sp10 = arg1->unk18;\n        sp14 = arg1->unk20;\n        sp18 = arg0->unk0;\nblock_13:\n        sp1C = arg0->unk8;\n    }\n    temp_f22 = sp14 - sp4;\n    temp_f24 = sp0 - sp10;\n    temp_f20 = sp4 - spC;\n    temp_f18 = sp8 - sp0;\n    temp_f26 = spC - sp14;\n    temp_f6 = sp10 - sp8;\n    temp_f16 = (temp_f22 * sp10) + (temp_f24 * sp14);\n    temp_f12 = (temp_f20 * sp0) + (temp_f18 * sp4);\n    temp_f10 = (temp_f26 * sp8) + (temp_f6 * spC);\n    if ((temp_f18 * temp_f26) < (temp_f20 * temp_f6)) {\n        var_v0 = 0;\n        if (!(((temp_f22 * sp18) + (temp_f24 * sp1C)) < temp_f16) && !(((temp_f20 * sp18) + (temp_f18 * sp1C)) < temp_f12)) {\n            var_v0 = 1;\n            if (((temp_f26 * sp18) + (temp_f6 * sp1C)) < temp_f10) {\n                return 0;\n            }\n        }\n        /* Duplicate return node #23. Try simplifying control flow for better match */\n        return var_v0;\n    }\n    var_v0 = 0;\n    if (!(temp_f16 < ((temp_f22 * sp18) + (temp_f24 * sp1C))) && !(temp_f12 < ((temp_f20 * sp18) + (temp_f18 * sp1C))) && !(temp_f10 < ((temp_f26 * sp18) + (temp_f6 * sp1C)))) {\n        var_v0 = 1;\n    }\n    return var_v0;\n}\n", "context": "void func_80003A3C(float*, float*, float*);\n\ntypedef int s32;\ntypedef short s16;\ntypedef char s8;\ntypedef unsigned int u32;\ntypedef unsigned short u16;\ntypedef unsigned char u8;\ntypedef float f32;\ntypedef double f64;\n\ntypedef u32 size_t;\ntypedef struct {\n    float x;\n    float y;\n    float z;\n} Vector3;\n\n\nvoid func_80005680(Vector3* arg0, Vector3* arg1, Vector3* arg2);\nvoid func_800055DC(Vector3* arg0, Vector3* arg1, Vector3* arg2);", "diff_flags": [], "diff_label": "func_80004DBC", "libraries": []}