{"compiler": "prodg_35", "compiler_flags": "-O2 -g2 -mps-float", "source_code": "int NuAtan2D(float dx, float dy);\nfloat NuFsqrt(float f);\nint RotDiff(unsigned short a0, unsigned short a1);\nfloat NuFabs(float f);\nextern s32 Level;\nextern float NuTrigTable[65536];\nstruct rail_s Rail[8];\nextern f32 lbl_80105244;\n//extern ? lbl_80105248;\nextern f32 lbl_80105250;\nextern f32 lbl_80105254;\nextern f32 lbl_80105258;\nextern f32 lbl_8010525C;\n/*\n    // Local variables\n    struct rail_s* rail; // r30\n    struct nuvec_s * pL; // r4\n    struct nuvec_s * pC; // r7\n    struct nuvec_s * pR; // r3\n    struct nuvec_s * p0; // r11\n    struct nuvec_s * p1; // r8\n    struct nuvec_s v0; // r1+0x8\n    struct nuvec_s v1; // r1+0x18\n    struct nuvec_s mid; // r1+0x28\n    struct nuvec_s vC; // r1+0x38\n    int a0; // r26\n    int a1; // r4\n    int i0;\n    int i1; // r27\n    unsigned short a; // r3\n    float dx; // f31\n    float dz; // f30\n    float l; // f0\n    float dp; // f1\n*/\n\n\nvoid RailInfo(struct RPos_s *RPos,struct nuvec_s *pos,u16 *yrot,u16 *cam_yrot,u8 *mode) {\n  struct rail_s* rail;\n  struct nuvec_s *pcVar6;\n  struct nuvec_s *pcVar8;\n  struct nuvec_s *pcVar9;\n  struct nuvec_s local_70;\n  float local_48;\n  int i0;\n  int iVar5;\n  int iVar7;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  u16 a;\n  float fVar1;\n  float fVar2;\n  float dVar13;\n  float dVar15;\n  float dVar16;\n  float fVar17;\n\n  \n  i0 = (int)RPos->iRAIL;\n  if ((i0 != -1) && (iVar12 = (int)RPos->iALONG, iVar12 != -1)) {\n      rail = &Rail[i0];\n    iVar11 = iVar12 + 1;\n    if ((iVar11 == rail->edges) && (rail->circuit != '\\0')) {\n      iVar11 = 0;\n    }\n    if (pos != NULL) {\n      iVar7 = (int)(rail->pCAM)->ptsize;\n      pcVar9 = (struct nuvec_s *)(rail->pCAM)->pts;\n      iVar5 = iVar11 * iVar7;\n      iVar7 = iVar12 * iVar7;\n      pos->x = ((pcVar9[iVar5].x) - pcVar9[iVar7].x) * RPos->fALONG + pcVar9[iVar7].x;\n      pos->y = ((pcVar9[iVar5].y) - (pcVar9[iVar7].y)) * RPos->fALONG + (pcVar9[iVar7].y);\n      pos->z = ((pcVar9[iVar5].z) - pcVar9[iVar7].z) * RPos->fALONG + pcVar9[iVar7].z;\n    }\n    if (yrot != NULL) {\n      iVar7 = iVar12 * (rail->pLEFT)->ptsize;\n      pcVar9 = (struct nuvec_s *)(rail->pLEFT)->pts;\n      pcVar6 = (struct nuvec_s *)(rail->pRIGHT)->pts;\n      iVar5 = iVar12 * (rail->pRIGHT)->ptsize;\n      fVar17 = (pcVar9[iVar7].x + pcVar6[iVar5].x) * 0.5f;\n      fVar1 = (pcVar9[iVar7].z + pcVar6[iVar5].z) * 0.5f;\n      iVar5 = NuAtan2D(pcVar6[iVar5].x - pcVar9[iVar7].x, pcVar6[iVar5].z - pcVar9[iVar7].z);\n      iVar7 = iVar11 * (rail->pRIGHT)->ptsize;\n      pcVar6 = (struct nuvec_s *)(rail->pRIGHT)->pts;\n      pcVar9 = (struct nuvec_s *)(rail->pLEFT)->pts;\n      iVar10 = iVar11 * (rail->pLEFT)->ptsize;\n      dVar16 = ((pcVar9[iVar10].x) + pcVar6[iVar7].x) * 0.5f;\n      dVar15 = ((pcVar9[iVar10].z) + pcVar6[iVar7].z) * 0.5f;\n      iVar7 = NuAtan2D(pcVar6[iVar7].x - (pcVar9[iVar10].x), pcVar6[iVar7].z - (pcVar9[iVar10].z));\n      local_48 = RotDiff((u16)iVar5,(u16)iVar7);\n      a = (u16)(iVar5 + (s32)(RPos->fALONG * local_48)) - 0x4000;\n      *yrot = a;\n          if (mode != NULL) {\n                if (pos != NULL) {\n                  dVar15 = (((dVar15 - fVar1) * RPos->fALONG + fVar1) - pos->z);\n                  fVar1 = NuTrigTable[a];\n                  fVar2 = NuTrigTable[(s32)(a + 0x4000) * 4 & 0x3fffc];\n                  dVar16 = (((dVar16 - fVar17) * RPos->fALONG + fVar17) - pos->x);\n                  fVar17 = NuFsqrt((dVar16 * dVar16 + (dVar15 * dVar15)));\n                  fVar17 = fVar1 * (dVar16 * (1.0f / fVar17)) + fVar2 * (dVar15 * (1.0f / fVar17));\n                      if (fVar17 > 0.866f) {\n                          *mode = '\\x01';\n                      }\n                      else {\n                            if (-0.866f > fVar17) {\n                              *mode = '\\x02';\n                            }\n                            else {\n                                dVar13 = NuFabs(dVar13);\n                                    if (0.5f > dVar13) {\n                                        iVar5 = NuAtan2D(dVar16,dVar15);\n                                        iVar5 = RotDiff((u16)iVar5,*yrot);\n                                        if (iVar5 > 0) {\n                                        *mode = '\\x04';\n                                        }\n                                        else {\n                                            *mode = '\\b';\n                                        }\n                                    }\n                                    else {\n                                        *mode = '\\0';\n                                    }\n                            }\n                      }\n                }\n                else {\n                  *mode = '\\0';\n                }\n          }\n    }\n    if (cam_yrot != NULL) {\n      iVar5 = iVar12 * (rail->pLEFT)->ptsize;\n      pcVar8 = (struct nuvec_s *)(rail->pLEFT)->pts;\n      pcVar9 = (struct nuvec_s *)(rail->pRIGHT)->pts;\n      iVar7 = iVar12 * (rail->pRIGHT)->ptsize;\n      pcVar6 = (struct nuvec_s *)(rail->pCAM)->pts;\n      iVar12 = iVar12 * (rail->pCAM)->ptsize;\n      local_70.x = pcVar6[iVar12].x;\n      if ((Level == 6) || (Level == 0x22)) {\n        local_70.x = local_70.x + 5.0f;\n      }\n      iVar12 = NuAtan2D((pcVar8[iVar5].x + pcVar9[iVar7].x) * 0.5f - local_70.x,\n                              (pcVar8[iVar5].z + pcVar9[iVar7].z) * 0.5f - pcVar6[iVar12].z);\n      iVar5 = iVar11 * (rail->pRIGHT)->ptsize;\n      pcVar9 = (struct nuvec_s *)(rail->pLEFT)->pts;\n      pcVar8 = (struct nuvec_s *)(rail->pRIGHT)->pts;\n      iVar7 = iVar11 * (rail->pLEFT)->ptsize;\n      pcVar6 = (struct nuvec_s *)(rail->pCAM)->pts;\n      iVar11 = iVar11 * (rail->pCAM)->ptsize;\n      local_70.x = pcVar6[iVar11].x;\n      if ((Level == 6) || (Level == 0x22)) {\n        local_70.x = local_70.x + 5.0f;\n      }\n      i0 = NuAtan2D((pcVar9[iVar7].x + pcVar8[iVar5].x) * 0.5f - local_70.x,\n                       (pcVar9[iVar7].z + pcVar8[iVar5].z) * 0.5f - pcVar6[iVar11].z);\n      local_48 = RotDiff((u16)iVar12,(u16)i0);\n      *cam_yrot = (u16)(iVar12 + (s32)(RPos->fALONG * local_48));\n    }\n  }\n  return;\n}", "context": "#define NULL 0\ntypedef unsigned long size_t;\ntypedef unsigned long long u64;\ntypedef signed long long s64;\ntypedef unsigned long u32;\ntypedef signed long s32;\ntypedef signed short int16_t;\ntypedef signed int int32_t;\ntypedef signed long int64_t;\ntypedef signed long intmax_t;\ntypedef unsigned char uint8_t;\ntypedef unsigned short uint16_t;\ntypedef unsigned int uint32_t;\ntypedef unsigned int uint;\ntypedef unsigned short u16;\ntypedef signed short s16;\ntypedef unsigned char u8;\ntypedef signed char s8;\ntypedef float f32;\ntypedef double f64;\ntypedef int UNKWORD;\ntypedef void UNKTYPE;\ntypedef void(*error_func)(char[0x60], ...);\nenum { FALSE, TRUE };\ntypedef int BOOL;\n\n\nenum nustencilmode_e\n{\n    NUSTENCIL_REPLACE_NODRAW = 1,\n    NUSTENCIL_NOSTENCIL = 0\n};\n\n// Size: 0xC\nstruct objtemp_s\n{\n        short i; // Offset: 0x0, DWARF: 0x22E0F2\n        unsigned char flags; // Offset: 0x2, DWARF: 0x22E116\n        signed char action; // Offset: 0x3, DWARF: 0x22E13E\n        float anim_time; // Offset: 0x4, DWARF: 0x22E167\n        float scale; // Offset: 0x8, DWARF: 0x22E193\n};\n\nenum nucamfxmode_s\n{\n    NUCAMFX_REFLECT = 1,\n    NUCAMFX_NONE = 0\n};\n\n// Size: 0x40, DWARF: 0x8E9296\nstruct _GSMATRIX\n{\n    float _11; // Offset: 0x0, DWARF: 0x8E92B4\n    float _12; // Offset: 0x4, DWARF: 0x8E92DA\n    float _13; // Offset: 0x8, DWARF: 0x8E9300\n    float _14; // Offset: 0xC, DWARF: 0x8E9326\n    float _21; // Offset: 0x10, DWARF: 0x8E934C\n    float _22; // Offset: 0x14, DWARF: 0x8E9372\n    float _23; // Offset: 0x18, DWARF: 0x8E9398\n    float _24; // Offset: 0x1C, DWARF: 0x8E93BE\n    float _31; // Offset: 0x20, DWARF: 0x8E93E4\n    float _32; // Offset: 0x24, DWARF: 0x8E940A\n    float _33; // Offset: 0x28, DWARF: 0x8E9430\n    float _34; // Offset: 0x2C, DWARF: 0x8E9456\n    float _41; // Offset: 0x30, DWARF: 0x8E947C\n    float _42; // Offset: 0x34, DWARF: 0x8E94A2\n    float _43; // Offset: 0x38, DWARF: 0x8E94C8\n    float _44; // Offset: 0x3C, DWARF: 0x8E94EE\n};\n\nstruct nuvec_s\n{\n    f32 x;\n    f32 y;\n    f32 z;\n}; // 0xC\n\n\nenum nurndritemtype_s\n{\n    NURNDRITEM_GEOMFACE = 3,\n    NURNDRITEM_SKIN3D2 = 2,\n    NURNDRITEM_GEOM2D = 1,\n    NURNDRITEM_GEOM3D = 0\n};\n\n// Size: 0x4\nunion nufx_u\n{\n    void* voidptr; // Offset: 0x0, DWARF: 0xAA08\n    unsigned char u8; // Offset: 0x0, DWARF: 0xAA35\n    char s8; // Offset: 0x0, DWARF: 0xAA5A\n    unsigned short u16; // Offset: 0x0, DWARF: 0xAA7F\n    short s16; // Offset: 0x0, DWARF: 0xAAA5\n    u32 u32; // Offset: 0x0, DWARF: 0xAACB\n    s32 s32; // Offset: 0x0, DWARF: 0xAAF1\n    f32 f32; // Offset: 0x0, DWARF: 0xAB17\n};\n\n// Size: 0xC, DWARF: 0x94E4\nstruct nucolour3_s\n{\n    f32 r; // Offset: 0x0, DWARF: 0x9504\n    f32 g; // Offset: 0x4, DWARF: 0x9528\n    f32 b; // Offset: 0x8, DWARF: 0x954C\n};\n\nunion type_s_name {\n    u8 chrs;\n    u16 all;\n};\n\nstruct numtlattrib_s\n{\n    u32 alpha : 2; // Offset: 0x0, DWARF: 0xA6DE, Bit Offset: 0, Bit Size: 2\n    u32 filter : 2; // Offset: 0x0, DWARF: 0xA716, Bit Offset: 2, Bit Size: 2\n    u32 fx : 2; // Offset: 0x0, DWARF: 0xA74F, Bit Offset: 4, Bit Size: 2\n    u32 utc : 2; // Offset: 0x0, DWARF: 0xA784, Bit Offset: 6, Bit Size: 2\n    u32 vtc : 2; // Offset: 0x0, DWARF: 0xA7BA, Bit Offset: 8, Bit Size: 2\n    u32 cull : 2; // Offset: 0x0, DWARF: 0xA7F0, Bit Offset: 10, Bit Size: 2\n    u32 zmode : 2; // Offset: 0x0, DWARF: 0xA827, Bit Offset: 12, Bit Size: 2\n    u32 lighting : 2; // Offset: 0x0, DWARF: 0xA85F, Bit Offset: 14, Bit Size: 2\n    u32 colour : 1; // Offset: 0x0, DWARF: 0xA89A, Bit Offset: 16, Bit Size: 1\n    u32 fill : 1; // Offset: 0x0, DWARF: 0xA8D3, Bit Offset: 17, Bit Size: 1\n    u32 atst : 3; // Offset: 0x0, DWARF: 0xA90A, Bit Offset: 18, Bit Size: 3\n    u32 aref : 8; // Offset: 0x0, DWARF: 0xA941, Bit Offset: 21, Bit Size: 8\n    u32 afail : 2; // Offset: 0x0, DWARF: 0xA978, Bit Offset: 29, Bit Size: 2\n    u32 uvmode : 1; // Offset: 0x0, DWARF: 0xA9B0, Bit Offset: 31, Bit Size: 1\n};\n\n//0x10\nstruct nurndritem_s\n{\n    struct nurndritem_s* next; // Offset: 0x0, DWARF: 0x58B54\n    enum nurndritemtype_s type; // Offset: 0x4, DWARF: 0x58B80\n    s32 flags; // Offset: 0x8, DWARF: 0x58BA9\n    short lights_index; // Offset: 0xC, DWARF: 0x58BD1\n};\n\n//0x24\nstruct nugeomitem_s\n{\n    struct nurndritem_s hdr; // Offset: 0x0, DWARF: 0x58C44\n    struct numtx_s* mtx; // Offset: 0x10, DWARF: 0x58C6C\n    struct NuGeom* geom; // Offset: 0x14, DWARF: 0x58C97\n    f32** blendvals; // Offset: 0x18, DWARF: 0x58CC3\n    short instancelights_index[3]; // Offset: 0x1C, DWARF: 0x58CF3\n    short hShader; // Offset: 0x22, DWARF: 0x58D2C\n};\n\nstruct numtl_s\n{\n    struct numtl_s* next; // Offset: 0x0, DWARF: 0x9590\n    struct numtlattrib_s attrib; // Offset: 0x4, DWARF: 0x95BC\n    struct nucolour3_s ambient; // Offset: 0x8, DWARF: 0x95E7\n    struct nucolour3_s diffuse; // Offset: 0x14, DWARF: 0x9613\n    union nufx_u fx1; // Offset: 0x20, DWARF: 0x963F\n    union nufx_u fx2; // Offset: 0x24, DWARF: 0x9667\n    union nufx_u fx3; // Offset: 0x28, DWARF: 0x968F\n    union nufx_u fx4; // Offset: 0x2C, DWARF: 0x96B7\n    f32 power; // Offset: 0x30, DWARF: 0x96DF\n    f32 alpha; // Offset: 0x34, DWARF: 0x9707\n    s32 tid; // Offset: 0x38, DWARF: 0x972F\n    short alpha_sort; // Offset: 0x3C, DWARF: 0x9755\n    unsigned char fxid; // Offset: 0x3E, DWARF: 0x9782\n    unsigned char special_id; // Offset: 0x3F, DWARF: 0x97A9\n    short K; // Offset: 0x40, DWARF: 0x97D6\n    unsigned char L; // Offset: 0x42, DWARF: 0x97FA\n    unsigned char uanmmode : 4; // Offset: 0x43, DWARF: 0x981E, Bit Offset: 0, Bit Size: 4\n    unsigned char vanmmode : 4; // Offset: 0x43, DWARF: 0x9859, Bit Offset: 4, Bit Size: 4\n    f32 du; // Offset: 0x44, DWARF: 0x9894\n    f32 dv; // Offset: 0x48, DWARF: 0x98B9\n    f32 su; // Offset: 0x4C, DWARF: 0x98DE\n    f32 sv; // Offset: 0x50, DWARF: 0x9903\n};\n\n// Size: 0x6C\nstruct nusysmtl_s\n{\n    struct numtl_s mtl; // Offset: 0x0, DWARF: 0x58DB8\n    struct nurndritem_s* rndrlist; // Offset: 0x54, DWARF: 0x58DE0\n    struct nugeomitem_s* geom2d; // Offset: 0x58, DWARF: 0x58E10\n    struct nugeomitem_s* geom3d; // Offset: 0x5C, DWARF: 0x58E3E\n    struct nusysmtl_s* next; // Offset: 0x60, DWARF: 0x58E6C\n    struct nusysmtl_s* last; // Offset: 0x64, DWARF: 0x58E98\n    s32 hShader; // Offset: 0x68, DWARF: 0x58EC4\n};\n\n\n\n\n\n\nstruct GS_Buffer\n{\n    u32 size;\n    u32 type;\n}; // 0x8\n\n\n// Size: 0x1C\nstruct nuvtx_tltc1_s\n{\n    struct nuvec_s pnt; // Offset: 0x0\n    float rhw; // Offset: 0xC\n    int diffuse; // Offset: 0x10\n    float tc[2]; // Offset: 0x14\n};\n\nenum nuprimtype_e\n{\n    NUPT_QUADLIST = 10,\n    NUPT_FACEON = 9,\n    NUPT_BEZTRI = 8,\n    NUPT_BEZPATCH = 7,\n    NUPT_NDXTRISTRIP = 6,\n    NUPT_NDXTRI = 5,\n    NUPT_NDXLINE = 4,\n    NUPT_TRISTRIP = 3,\n    NUPT_TRI = 2,\n    NUPT_LINE = 1,\n    NUPT_POINT = 0\n};\n\nenum nutextype_e\n{\n    NUTEX_NUMTEXTURETYPES = 26,\n    NUTEX_RZT16 = 25,\n    NUTEX_RZT24 = 24,\n    NUTEX_RZT32 = 23,\n    NUTEX_RTT16 = 22,\n    NUTEX_RTT24 = 21,\n    NUTEX_RTT32 = 20,\n    NUTEX_RT16 = 19,\n    NUTEX_RT24 = 18,\n    NUTEX_RT32 = 17,\n    NUTEX_RT8H = 16,\n    NUTEX_RTT8 = 15,\n    NUTEX_RT8 = 14,\n    NUTEX_BB = 13,\n    NUTEX_DXT5 = 12,\n    NUTEX_DXT4 = 11,\n    NUTEX_DXT3 = 10,\n    NUTEX_DXT2 = 9,\n    NUTEX_DXT1 = 8,\n    NUTEX_PAL8_S = 7,\n    NUTEX_PAL4_S = 6,\n    NUTEX_PAL8 = 5,\n    NUTEX_PAL4 = 4,\n    NUTEX_RGBA32 = 3,\n    NUTEX_RGB24 = 2,\n    NUTEX_RGBA16 = 1,\n    NUTEX_RGB16 = 0\n};\n\nstruct nuplane_s\n{\n    f32 a;\n    f32 b;\n    f32 c;\n    f32 d;\n};\n\nstruct NuPrim\n{\n    struct NuPrim* next;\n    enum nuprimtype_e type;\n    unsigned short cnt;\n    unsigned short max;\n    unsigned short* vid;\n    struct nuplane_s* pln;\n    s32 idxbuff;\n    s32 cached;\n    short skinmtxlookup[16];\n} ; // 0x3c\n\nstruct  NuFaceOnGeom\n{\n    struct NuFaceOnGeom* next;\n    struct numtl_s* mtl;\n    s32 mtl_id;\n    s32 faceon_type;\n    struct nufaceon_s* faceons;\n    s32 nfaceons;\n    f32 faceon_radius;\n}; // 0x30\n\n// Size: 0x18\nstruct nufaceon_s\n{\n    struct nuvec_s point;\n    f32 width;\n    f32 height;\n    s32 colour;\n};\n\nstruct NuBlendShape {\n    s32 nblends;\n    struct nuvec_s** blend_offsets;\n    s32* ix;\n    struct nuvec_s* offsets;\n    struct nuvec_s* ooffsets;\n    s32 hVB; //VertexBuffer, GS_Buffer * ?\n    s32 blendindex[10];\n};\n\n// Size: 0x10\nstruct NUVTXSKININFO_s\n{\n    f32 wts[3];\n    unsigned char joint_ixs[3];\n    unsigned char pad;\n};\n\nstruct NuSkin\n{\n\tstruct NuSkin* next;\n\ts32 vtxoffset;\n    s32 vtxcnt;\n    s32 mtxcnt;\n    s32* mtxid;\n    f32* weights;\n};\n\nenum nuvtxtype_e\n{\n    NUVT_PS = 17,\n    NUVT_LC1 = 81,\n    NUVT_TLTC1 = 83,\n    NUVT_SK3TC1 = 93,\n    NUVT_TC1 = 89\n};\n\nstruct NuGeom\n{\n    struct NuGeom* next;\n    struct numtl_s* mtl;\n    s32 mtl_id;\n    enum nuvtxtype_e vtxtype;\n    s32 vtxcnt;\n    s32 vtxmax;\n    s32 hVB;\n    void* basisvbptr;\n    struct NuPrim* prims;\n    struct NuSkin* skins;\n    struct NUVTXSKININFO_s* vtxskininfo;\n\tstruct NuBlendShape* blendShape;\n}; // 0x30\n\nstruct nugobj_s\n{\n    struct nugobj_s* sysnext;\n    struct nugobj_s* syslast;\n    s32 type;\n    struct NuGeom* geom;\n    struct NuFaceOnGeom* faceon_geom;\n    f32 bounding_radius_from_origin;\n    f32 bounding_rsq_from_origin;\n    struct nuvec_s bounding_box_min;\t//0xC\n    struct nuvec_s bounding_box_max;\t//0xC\n    struct nuvec_s bounding_box_center;\t//0xC\n    f32 bounding_radius_from_center;\n    f32 bounding_rsq_from_center;\n    s32 ngobjs;\n    struct nugobj_s* next_gobj;\n    struct nuvec_s origin;\n    s32 ignore;\n    s32 culltype;\n}; // 0x64\n\nenum gobjtype_s\n{\n    NUGOBJ_FACEON = 0x1,\n    NUGOBJ_MESH = 0x0\n};\n\n// Size: 0x40, DWARF: 0x724C\nstruct numtx_s\n{\n    f32 _00; // Offset: 0x0, DWARF: 0x7268\n    f32 _01; // Offset: 0x4, DWARF: 0x728E\n    f32 _02; // Offset: 0x8, DWARF: 0x72B4\n    f32 _03; // Offset: 0xC, DWARF: 0x72DA\n    f32 _10; // Offset: 0x10, DWARF: 0x7300\n    f32 _11; // Offset: 0x14, DWARF: 0x7326\n    f32 _12; // Offset: 0x18, DWARF: 0x734C\n    f32 _13; // Offset: 0x1C, DWARF: 0x7372\n    f32 _20; // Offset: 0x20, DWARF: 0x7398\n    f32 _21; // Offset: 0x24, DWARF: 0x73BE\n    f32 _22; // Offset: 0x28, DWARF: 0x73E4\n    f32 _23; // Offset: 0x2C, DWARF: 0x740A\n    f32 _30; // Offset: 0x30, DWARF: 0x7430\n    f32 _31; // Offset: 0x34, DWARF: 0x7456\n    f32 _32; // Offset: 0x38, DWARF: 0x747C\n    f32 _33; // Offset: 0x3C, DWARF: 0x74A2\n};\n\n\n// Size: 0xB4C, DWARF: 0x73CED2\nstruct Bridge_s\n{\n    struct nuvec_s pos[2][24]; // Offset: 0x0, DWARF: 0x73CEE4\n    struct nuvec_s vel[2][24]; // Offset: 0x240, DWARF: 0x73CF0C\n    struct numtx_s mtx[24]; // Offset: 0x480, DWARF: 0x73CF34\n    struct nuinstance_s* instance[24]; // Offset: 0xA80, DWARF: 0x73CF5C\n    struct nuinstance_s* ipost; // Offset: 0xAE0, DWARF: 0x73CF89\n    struct nuvec_s center; // Offset: 0xAE4, DWARF: 0x73CFB6\n    float radius; // Offset: 0xAF0, DWARF: 0x73CFE1\n    short plat[24]; // Offset: 0xAF4, DWARF: 0x73D00A\n    char inrange; // Offset: 0xB24, DWARF: 0x73D033\n    char onscreen; // Offset: 0xB25, DWARF: 0x73D05D\n    char sections; // Offset: 0xB26, DWARF: 0x73D088\n    char postint; // Offset: 0xB27, DWARF: 0x73D0B3\n    s32 colour; // Offset: 0xB28, DWARF: 0x73D0DD\n    short hit; // Offset: 0xB2C, DWARF: 0x73D106\n    short yang; // Offset: 0xB2E, DWARF: 0x73D12C\n    float width; // Offset: 0xB30, DWARF: 0x73D153\n    float tension; // Offset: 0xB34, DWARF: 0x73D17B\n    float gravity; // Offset: 0xB38, DWARF: 0x73D1A5\n    float damp; // Offset: 0xB3C, DWARF: 0x73D1CF\n    float plrweight; // Offset: 0xB40, DWARF: 0x73D1F6\n    float postw; // Offset: 0xB44, DWARF: 0x73D222\n    float posth; // Offset: 0xB48, DWARF: 0x73D24A\n};\n\n// Size: 0x24\nstruct nuvtx_tc1_s\n{\n    struct nuvec_s pnt;\n    struct nuvec_s nrm;\n    s32 diffuse;\n    f32 tc[2];\n};\n\n\n// Size: 0x174\nstruct primdef_s\n{\n    struct nuvtx_tc1_s vrts[3];\n    s32 vid[3];\n    f32 weights[15][3];\n    s32 mtxid[15];\n    s32 nummtx;\n    s32 sorted;\n    s32 baseid;\n};\n\n// Size: 0x10\nstruct nuvec4_s\n{\n    f32 x;\n    f32 y;\n    f32 z;\n    f32 w;\n};\n\nstruct nuivec4_s\n{\n    s32 x;\n    s32 y;\n    s32 z;\n    s32 w;\n};\n\n// Size: 0xC\nstruct nuivec_s\n{\n    s32 x;\n    s32 y;\n    s32 z;\n};\n\n// Size: 0x10\nstruct _sceDmaTag\n{\n    unsigned short qwc;\n    unsigned char mark;\n    unsigned char id;\n    struct _sceDmaTag* next;\n    u32 p[2];\n};\n\nunion variptr_u\n{\n    void* voidptr;\n    unsigned char* u8;\n    unsigned short* u16;\n    short* s16;\n    u32* u32;\n    long long* u64;\n    long long* u128;\n    f32* f32;\n    struct nuvec_s* vec3;\n    struct nuvec4_s* vec4;\n    struct nuivec_s* ivec3;\n    struct nuivec4_s* ivec4;\n    struct numtx_s* mtx44;\n    u32* viftag;\n    u32 intaddr;\n    struct _sceDmaTag* dmatag;\n    // Size: 0x10\n    void* gifTag;\n};\n\n// Size: 0xEC\nstruct nutexanimenv_s\n{\n    struct nutexanimprog_s* prog;\n    s32 pc;\n    s32 rep_count[16];\n    s32 rep_start[16];\n    s32 rep_ix;\n    s32 ra[16];\n    s32 ra_ix;\n    s32 pause;\n    s32 pause_r;\n    s32 pause_cnt;\n    struct numtl_s* mtl;\n    short* tids;\n    s32 tex_ix;\n    s32 dynalloc : 1; // Offset: 0xE8,Bit Offset: 0, Bit Size: 1\n};\n\n// Size: 0x4\nstruct nunrand_s\n{\n    long idum;\n};\n\n// Size: 0x1BC\nstruct nutexanimprog_s\n{\n    struct nutexanimprog_s* succ;\n    struct nutexanimprog_s* prev;\n    char name[32];\n    s32 on_sig[32];\n    s32 off_sig[32];\n    u32 on_mask;\n    u32 off_mask;\n    short xdef_ids[32];\n    short xdef_addrs[32];\n    s32 xdef_cnt;\n    short eop;\n    short dynalloc : 1; // Offset: 0x1B6,Bit Offset: 0, Bit Size: 1\n    short code[1]; // Offset: 0x1B8\n};\n\n// Size: 0x1244\nstruct nufpar_s\n{\n    s32 fh; // Offset: 0x0, DWARF: 0x19ACF\n    char fbuff[4096]; // Offset: 0x4, DWARF: 0x19AF4\n    char lbuff[257]; // Offset: 0x1004, DWARF: 0x19B1E\n    char wbuff[257]; // Offset: 0x1105, DWARF: 0x19B48\n    s32 line_num; // Offset: 0x1208, DWARF: 0x19B72\n    s32 line_pos; // Offset: 0x120C, DWARF: 0x19B9D\n    s32 cpos; // Offset: 0x1210, DWARF: 0x19BC8\n    s32 buffstart; // Offset: 0x1214, DWARF: 0x19BEF\n    s32 buffend; // Offset: 0x1218, DWARF: 0x19C1B\n    struct nufpcomjmp_s* comstack[8]; // Offset: 0x121C, DWARF: 0x19C45\n    s32 compos; // Offset: 0x123C, DWARF: 0x19C72\n    s32 size; // Offset: 0x1240, DWARF: 0x19C9B\n};\n\n// Size: 0x8, DWARF: 0x19D06\nstruct nufpcomjmp_s\n{\n    char* fname; // Offset: 0x0, DWARF: 0x19D27\n    void(*func)(struct nufpar_s*); // Offset: 0x4, DWARF: 0x19D52\n};\n\n// Size: 0xC\nstruct nutexanimlist_s\n{\n    struct nutexanim_s* nta;\n    struct nutexanimlist_s* succ;\n    struct nutexanimlist_s* prev;\n};\n\n// Size: 0x20, DWARF: 0x9E3D\nstruct nutexanim_s\n{\n    struct nutexanim_s* succ; // Offset: 0x0, DWARF: 0x9E5D\n    struct nutexanim_s* prev; // Offset: 0x4, DWARF: 0x9E89\n    short* tids; // Offset: 0x8, DWARF: 0x9EB5\n    short numtids; // Offset: 0xC, DWARF: 0x9EDF\n    short dynalloc : 1; // Offset: 0xE, DWARF: 0x9F09, Bit Offset: 0, Bit Size: 1\n    struct numtl_s* mtl; // Offset: 0x10, DWARF: 0x9F44\n    struct nutexanimenv_s* env; // Offset: 0x14, DWARF: 0x9F6F\n    char* ntaname; // Offset: 0x18, DWARF: 0x9F9A\n    char* scriptname; // Offset: 0x1C, DWARF: 0x9FC7\n};\n\n// Size: 0x60, DWARF: 0x992C\nstruct NUJOINTDATA_s\n{\n    struct numtx_s orient; // Offset: 0x0, DWARF: 0x994E\n    struct nuvec_s locator_offset; // Offset: 0x40, DWARF: 0x9979\n    char* name; // Offset: 0x4C, DWARF: 0x99AC\n    s32 parent_ix; // Offset: 0x50, DWARF: 0x99D6\n    char flags; // Offset: 0x54, DWARF: 0x9A02\n    char pad[11]; // Offset: 0x55, DWARF: 0x9A2A\n};\n\n// Size: 0x14, DWARF: 0x9A56\nstruct NULAYERDATA_s\n{\n    char* name; // Offset: 0x0, DWARF: 0x9A78\n    struct nugobj_s** gobjs; // Offset: 0x4, DWARF: 0x9AA2\n    struct nugobj_s* skin_gobj; // Offset: 0x8, DWARF: 0x9AD0\n    struct nugobj_s** blend_gobjs; // Offset: 0xC, DWARF: 0x9B01\n    struct nugobj_s* blend_skin_gobj; // Offset: 0x10, DWARF: 0x9B35\n};\n\n// Size: 0x50, DWARF: 0x9B70\nstruct NUPOINTOFINTEREST_s\n{\n    struct numtx_s offset; // Offset: 0x0, DWARF: 0x9B98\n    char* name; // Offset: 0x40, DWARF: 0x9BC3\n    unsigned char parent_joint_ix; // Offset: 0x44, DWARF: 0x9BED\n    unsigned char pad[11]; // Offset: 0x45, DWARF: 0x9C1F\n};\n\nenum Coltype\n{\n    NUCOLLISIONSPHERETYPE = 1\n};\n\n\n// Size: 0x8, DWARF: 0xB0C4\nstruct NUCOLLISIONHDR_s\n{\n    enum Coltype type;\n    void* data;\n};\n\n// Size: 0x8, DWARF: 0x9DBE\nstruct NUCOLLISIONDATA_s\n{\n    u32 nitems; // Offset: 0x0, DWARF: 0x9DE4\n    struct NUCOLLISIONHDR_s* hdrs; // Offset: 0x4, DWARF: 0x9E0D\n};\n\n// Size: 0x30, DWARF: 0xAE76\nstruct NUELLIPSOID_s\n{\n    struct nuvec_s centre; // Offset: 0x0, DWARF: 0xAE98\n    struct nuvec_s y_axis; // Offset: 0xC, DWARF: 0xAEC3\n    struct nuvec_s x_axis; // Offset: 0x18, DWARF: 0xAEEE\n    struct nuvec_s z_axis; // Offset: 0x24, DWARF: 0xAF19\n};\n\n// Size: 0x40, DWARF: 0xAF48\nstruct NUCYLINDER_s\n{\n    struct nuvec_s centre; // Offset: 0x0, DWARF: 0xAF69\n    struct nuvec_s y_axis; // Offset: 0xC, DWARF: 0xAF94\n    struct nuvec4_s x_axis; // Offset: 0x18, DWARF: 0xAFBF\n    struct nuvec4_s z_axis; // Offset: 0x28, DWARF: 0xAFEA\n    char pad[8]; // Offset: 0x38, DWARF: 0xB015\n};\n\n// Size: 0x8, DWARF: 0xB041\nstruct NUSHADOWMESH_s\n{\n    struct nuvec4_s* normals; // Offset: 0x0, DWARF: 0xB064\n    struct nuvec4_s* verts; // Offset: 0x4, DWARF: 0xB093\n};\n\n// Size: 0x10, DWARF: 0x9C4B\nstruct NUSHADOWDATA_s\n{\n    struct NUELLIPSOID_s* ellipsoids; // Offset: 0x0, DWARF: 0x9C6E\n    struct NUCYLINDER_s* cylinders; // Offset: 0x4, DWARF: 0x9CA0\n    struct NUSHADOWMESH_s* shadow_meshes; // Offset: 0x8, DWARF: 0x9CD1\n    unsigned char nellipsoids; // Offset: 0xC, DWARF: 0x9D06\n    unsigned char ncylinders; // Offset: 0xD, DWARF: 0x9D34\n    unsigned char nshadow_meshes; // Offset: 0xE, DWARF: 0x9D61\n    unsigned char joint; // Offset: 0xF, DWARF: 0x9D92\n};\n\n// Size: 0x80, DWARF: 0x852D\nstruct NUHGOBJ_s\n{\n    short* tids; // Offset: 0x0, DWARF: 0x854B\n    s32 numtid; // Offset: 0x4, DWARF: 0x8575\n    struct numtl_s** mtls; // Offset: 0x8, DWARF: 0x859E\n    s32 nummtl; // Offset: 0xC, DWARF: 0x85CB\n    struct NUJOINTDATA_s* joints; // Offset: 0x10, DWARF: 0x85F4\n    struct numtx_s* T; // Offset: 0x14, DWARF: 0x8622\n    struct numtx_s* INV_WT; // Offset: 0x18, DWARF: 0x864B\n    unsigned char* joint_ixs; // Offset: 0x1C, DWARF: 0x8679\n    struct NULAYERDATA_s* layers; // Offset: 0x20, DWARF: 0x86A8\n    struct NUPOINTOFINTEREST_s* points_of_interest; // Offset: 0x24, DWARF: 0x86D6\n    unsigned char* poi_ixs; // Offset: 0x28, DWARF: 0x8710\n    char* string_table; // Offset: 0x2C, DWARF: 0x873D\n    s32 string_table_size; // Offset: 0x30, DWARF: 0x876F\n    f32 tbrdist; // Offset: 0x34, DWARF: 0x87A3\n    struct NUSHADOWDATA_s* shadow_data; // Offset: 0x38, DWARF: 0x87CD\n    f32 sphere_radius; // Offset: 0x3C, DWARF: 0x8800\n    f32 sphere_yoff; // Offset: 0x40, DWARF: 0x8830\n    struct nuvec_s min; // Offset: 0x44, DWARF: 0x885E\n    struct nuvec_s max; // Offset: 0x50, DWARF: 0x8886\n    f32 cylinder_yoff; // Offset: 0x5C, DWARF: 0x88AE\n    f32 cylinder_height; // Offset: 0x60, DWARF: 0x88DE\n    f32 cylinder_radius; // Offset: 0x64, DWARF: 0x8910\n    struct NUCOLLISIONDATA_s* collision_data; // Offset: 0x68, DWARF: 0x8942\n    s32 numtexanims; // Offset: 0x6C, DWARF: 0x8978\n    struct nutexanim_s* texanims; // Offset: 0x70, DWARF: 0x89A6\n    short* texanim_tids; // Offset: 0x74, DWARF: 0x89D6\n    unsigned char num_joints; // Offset: 0x78, DWARF: 0x8A08\n    unsigned char num_joint_ixs; // Offset: 0x79, DWARF: 0x8A35\n    unsigned char num_layers; // Offset: 0x7A, DWARF: 0x8A65\n    unsigned char num_points_of_interest; // Offset: 0x7B, DWARF: 0x8A92\n    unsigned char num_poi_ixs; // Offset: 0x7C, DWARF: 0x8ACB\n    unsigned char shadowoff; // Offset: 0x7D, DWARF: 0x8AF9\n    char pad[2]; // Offset: 0x7E, DWARF: 0x8B25\n};\n\n\n// Size: 0x10\nstruct nuotitem_s\n{\n    struct nuotitem_s* next;\n    struct nurndritem_s* hdr;\n    f32 dist;\n    struct nusysmtl_s* mtl;\n};\n\n// Size: 0x20\nstruct NUNODE_s\n{\n\tchar* name;\n\tu32 id;\n\tu32 type;\n\ts32 nchildren;\n\tstruct NUNODE_s* parent;\n\tstruct NUNODE_s* child;\n\tstruct NUNODE_s* next;\n\tvoid* data;\n};\n\nstruct nuspline_s\n{\n\tchar* name;\n\ts32 ncvs;\n\tstruct nuvec_s* cvs;\n\tf32 r;\n\tf32 r2;\n\tstruct nuvec_s min;\n\tstruct nuvec_s max;\n\tstruct nuvec_s cntr;\n\tf32 cntr_r;\n\tf32 cntr_r2;\n};\n\n\n// Size: 0x60\nstruct nuinstanim_s\n{\n    struct numtx_s mtx;\n    f32 tfactor;\n    f32 tfirst;\n    f32 tinterval;\n    f32 ltime;\n    u32 playing : 1;\n    u32 backwards : 1;\n    u32 waiting : 1;\n    u32 repeating : 1;\n    u32 oscillate : 1;\n    s32 ipad[2];\n    unsigned char anim_ix;\n    char pad[3];\n};\n\n// Size: 0x4\nstruct nuspecialflags\n{\n    s32 ext : 1; // Offset: 0x0, Bit Offset: 0, Bit Size: 1\n    s32 ext_vis : 1; // Offset: 0x0, Bit Offset: 1, Bit Size: 1\n    s32 ext_onscreen : 1; // Offset: 0x0, Bit Offset: 2, Bit Size: 1\n};\n\n// Size: 0x4\nstruct nuinstflags_s\n{\n    s32 visible : 1; // Offset: 0x0, Bit Offset: 0, Bit Size: 1\n    s32 onscreen : 1; // Offset: 0x0, Bit Offset: 1, Bit Size: 1\n    s32 visitest : 1; // Offset: 0x0, Bit Offset: 2, Bit Size: 1\n    s32 isanimated : 1; // Offset: 0x0, Bit Offset: 3, Bit Size: 1\n};\n\n// Size: 0x50\nstruct nuinstance_s\n{\n    struct numtx_s mtx;\n    s32 objid;\n    struct nuinstflags_s flags;\n    struct nuinstanim_s* anim;\n    short room_group;\n    char special_flag;\n    char pad[1];\n};\n\n\n// Size: 0x10\nstruct nuanimkey_s\n{\n    f32 time;\n    f32 dtime;\n    f32 c;\n    f32 d;\n};\n\n\n// Size: 0x10\nstruct nuanimcurve_s\n{\n    u32 mask;\n    struct nuanimkey_s* animkeys;\n    u32 numkeys;\n    u32 flags;\n};\n\n// Size: 0x10\nstruct nuanimcurveset_s\n{\n    s32 flags;\n    f32* constants;\n    struct nuanimcurve_s** set;\n    char ncurves;\n    char pad[3];\n};\n\n// Size: 0x14\nstruct nuanimdatachunk_s\n{\n    s32 numnodes;\n    s32 num_valid_animcurvesets;\n    struct nuanimcurveset_s** animcurvesets;\n    struct nuanimkey_s* keys;\n    struct nuanimcurve_s* curves;\n};\n\n// Size: 0x10\nstruct nuanimdata_s\n{\n    f32 time;\n    char* node_name;\n    s32 nchunks;\n    struct nuanimdatachunk_s** chunks;\n};\n\n// Size: 0x50\nstruct nuspecial_s\n{\n    struct numtx_s mtx;\n    struct nuinstance_s* instance;\n    char* name;\n    struct nuspecialflags flags;\n    s32 pad;\n};\n\n// Size: 0xC\nstruct nugspline_s\n{\n    short len;\n    short ptsize;\n    char* name;\n    char* pts;\n};\n\n// Size: 0x74\nstruct nugscn_s\n{\n\tshort* tids;\n\ts32 numtid;\n\tstruct numtl_s** mtls;\n\ts32 nummtl;\n\ts32 numgobj;\n\tstruct nugobj_s** gobjs;\n\ts32 numinstance;\n\tstruct nuinstance_s* instances;\n\ts32 numspecial;\n\tstruct nuspecial_s* specials;\n\tvoid* splinedata;\n\ts32 numsplines;\n\tstruct nugspline_s* splines;\n\tchar* nametable;\n\ts32 numexspecials;\n\tstruct nuspecial_s* exspecials;\n\ts32 exallocix;\n\tstruct nuinstanim_s* instanimblock;\n\tstruct nuanimdata_s** instanimdata;\n\ts32 numinstanims;\n\ts32 numinstanceixs;\n\tshort* instanceixs;\n\tshort crossfade;\n\tshort crossfaderate;\n\ts32 crossfadegobj;\n\ts32 crossfadefirst;\n\ts32 numtexanims;\n\tstruct nutexanim_s* texanims;\n\tshort* texanim_tids;\n\tshort* instancelightix;\n};\n\nstruct nuscene_s\n{\n\ts32 nnodes;\n\tchar** names;\n\tstruct NUNODE_s** nodes;\n\tchar* strings;\n\ts32 numtids;\n\tshort* tids;\n\ts32 nummtls;\n\tstruct numtl_s** mtls;\n\ts32 numgobjs;\n\tstruct nugobj_s** gobjs;\n\ts32 numsplines;\n\tstruct nuspline_s* splines;\n\tstruct nuvec_s* spline_cvs;\n\tstruct NUNODE_s* root_node;\n\tstruct nugscn_s* gscene;\n};\n\n// Size: 0xC\nstruct nufaceonitem_s\n{\n    struct nufaceonitem_s* next;\n    struct nurndritem_s* hdr;\n    struct nusysmtl_s* mtl;\n};\n\n// Size: 0x60, DWARF: 0x1A67B\nstruct nucamera_s\n{\n    struct numtx_s mtx;\n    f32 fov;\n    f32 aspect;\n    f32 nearclip;\n    f32 farclip;\n    f32 portalnearclip;\n    struct nuvec_s scale;\n};\n\n// Size: 0x84\nstruct nureflect_s\n{\n    f32 distortion;\n    struct numtx_s mtx;\n    struct numtx_s uvmtx; \n};\n\n\nstruct TerSurf\n{\n    f32 friction;\n    short gdeb;\n    unsigned short flags;\n};\n\nstruct AnimList {\n    char * file;\n    short action;\n    u8 blend_in_frames;\n    u8 blend_out_frames;\n    f32 speed;\n    u16 flags;\n    char pad1;\n    char pad2;\n    u64 levbits;\n};\n\n// Size: 0x34, DWARF: 0x1CBCB\nstruct NUJOINTANIM_s\n{\n    float rx; // Offset: 0x0, DWARF: 0x1CBED\n    float ry; // Offset: 0x4, DWARF: 0x1CC12\n    float rz; // Offset: 0x8, DWARF: 0x1CC37\n    float tx; // Offset: 0xC, DWARF: 0x1CC5C\n    float ty; // Offset: 0x10, DWARF: 0x1CC81\n    float tz; // Offset: 0x14, DWARF: 0x1CCA6\n    float sx; // Offset: 0x18, DWARF: 0x1CCCB\n    float sy; // Offset: 0x1C, DWARF: 0x1CCF0\n    float sz; // Offset: 0x20, DWARF: 0x1CD15\n    short max_rx; // Offset: 0x24, DWARF: 0x1CD3A\n    short max_ry; // Offset: 0x26, DWARF: 0x1CD63\n    short max_rz; // Offset: 0x28, DWARF: 0x1CD8C\n    short min_rx; // Offset: 0x2A, DWARF: 0x1CDB5\n    short min_ry; // Offset: 0x2C, DWARF: 0x1CDDE\n    short min_rz; // Offset: 0x2E, DWARF: 0x1CE07\n    unsigned char joint_id; // Offset: 0x30, DWARF: 0x1CE30\n    unsigned char flags; // Offset: 0x31, DWARF: 0x1CE5B\n    unsigned char pad[2]; // Offset: 0x32, DWARF: 0x1CE83\n};\n\nstruct CharacterModel {\n    struct NUHGOBJ_s * hobj;\n    struct nuanimdata_s * anmdata[118];\n    struct AnimList * animlist[118];\n    struct nuanimdata_s * fanmdata[118];\n    struct AnimList * fanimlist[118];\n    s32 shadhdr;\n    short character;\n    char pad1;\n    char pad2;\n    struct NUPOINTOFINTEREST_s * pLOCATOR[16];\n};\n\n// Size: 0x20\nstruct pdir_s {\n    int Index; // Offset: 0x0, DWARF: 0x2694A4\n    struct nuvec_s Direction; // Offset: 0x4, DWARF: 0x2694CC\n    struct nucolour3_s Colour; // Offset: 0x10, DWARF: 0x2694FA\n    float Distance; // Offset: 0x1C\n};\n\n// Size: 0xB0\nstruct Nearest_Light_s {\n    int AmbIndex; // Offset: 0x0, DWARF: 0x2691D3\n    struct nuvec_s AmbCol; // Offset: 0x4, DWARF: 0x2691FE\n    float ambientdist; // Offset: 0x10, DWARF: 0x269229\n    int CurLoopIndex; // Offset: 0x14\n    struct pdir_s dir1;\n    struct pdir_s dir2;\n    struct pdir_s dir3;\n    struct pdir_s * pDir1st;\n    struct pdir_s * pDir2nd;\n    struct pdir_s * pDir3rd;\n    int glbambindex; // Offset: 0x84, DWARF: 0x26938E\n    int negativeindex; // Offset: 0x88, DWARF: 0x2693BC\n    float negativedist; // Offset: 0x8C\n    struct pdir_s glbdirectional; // Offset: 0x90\n};\n\nstruct anim_s {\n        float anim_time; // Offset: 0x0, DWARF: 0x2669F8\n        float blend_src_time; // Offset: 0x4, DWARF: 0x266A24\n        float blend_dst_time; // Offset: 0x8, DWARF: 0x266A55\n        short action; // Offset: 0xC, DWARF: 0x266A86\n        short oldaction; // Offset: 0xE, DWARF: 0x266AAF\n        short newaction; // Offset: 0x10, DWARF: 0x266ADB\n        short blend_src_action; // Offset: 0x12, DWARF: 0x266B07\n        short blend_dst_action; // Offset: 0x14, DWARF: 0x266B3A\n        short blend_frame; // Offset: 0x16, DWARF: 0x266B6D\n        short blend_frames; // Offset: 0x18, DWARF: 0x266B9B\n        signed char blend; // Offset: 0x1A, DWARF: 0x266BCA\n        unsigned char flags; // Offset: 0x1B\n};\n\n\nstruct mask_s {\n    struct numtx_s mM;\n    struct numtx_s mS;\n    struct nuvec_s pos;\n    struct nuvec_s newpos;\n    struct Nearest_Light_s lights;\n    struct anim_s anim;\n    float scale; // Offset: 0x164, DWARF: 0x268BCC\n    float shadow; // Offset: 0x168, DWARF: 0x268BF4\n    short character; // Offset: 0x16C, DWARF: 0x268C1D\n    short active; // Offset: 0x16E, DWARF: 0x268C49\n    short sfx; // Offset: 0x170, DWARF: 0x268C72\n    char pad1; // Offset: 0x172, DWARF: 0x268C98\n    char pad2; // Offset: 0x173, DWARF: 0x268CBF\n    unsigned short xrot; // Offset: 0x174, DWARF: 0x268CE6\n    unsigned short yrot; // Offset: 0x176, DWARF: 0x268D0D\n    unsigned short angle; // Offset: 0x178, DWARF: 0x268D34\n    unsigned short surface_xrot; // Offset: 0x17A, DWARF: 0x268D5C\n    unsigned short surface_zrot; // Offset: 0x17C, DWARF: 0x268D8B\n    unsigned short wibble_ang[3]; // Offset: 0x17E, DWARF: 0x268DBA\n    float idle_time; // Offset: 0x184, DWARF: 0x268DE9\n    float idle_duration; // Offset: 0x188, DWARF: 0x268E15\n    signed char idle_mode; // Offset: 0x18C, DWARF: 0x268E45\n    signed char reflect; // Offset: 0x18D, DWARF: 0x268E71\n    unsigned char offset_frame; // Offset: 0x18E, DWARF: 0x268E9B\n    signed char hold; // Offset: 0x18F, DWARF: 0x268ECA\n};\n\n// Size: 0x90\nstruct mfeathers_s\n{\n    struct numtx_s mM; // Offset: 0x0, DWARF: 0x27115A\n    struct numtx_s mS; // Offset: 0x40, DWARF: 0x271181\n    float time; // Offset: 0x80, DWARF: 0x2711A8\n    float duration; // Offset: 0x84, DWARF: 0x2711CF\n    float shadow; // Offset: 0x88, DWARF: 0x2711FA\n    char pad1; // Offset: 0x8C, DWARF: 0x271223\n    char pad2; // Offset: 0x8D, DWARF: 0x27124A\n    char pad3; // Offset: 0x8E, DWARF: 0x271271\n    char pad4; // Offset: 0x8F, DWARF: 0x271298\n};\n\nstruct RPos_s {\n    char iRAIL;\n    char vertical;\n    short iALONG;\n    short i1;\n    short i2;\n    float fALONG;\n    float fACROSS;\n    u16 angle;\n    u16 cam_angle;\n    u8 mode;\n    char pad1;\n    char pad2;\n    char pad3;\n    struct nuvec_s pos;\n};\n\nstruct obj_s {\n    struct obj_s * parent;\n    struct CharacterModel * model;\n    struct mask_s * mask;\n    void * contact;\n    struct numtx_s * pLOCATOR;\n    struct anim_s anim;\n    short character;\n    short vehicle;\n    u32 flags;\n    u32 frame;\n    u32 draw_frame;\n    u32 vehicle_frame;\n    struct RPos_s RPos;\n    struct nuvec_s pos;\n    struct nuvec_s mom;\n    struct nuvec_s oldpos;\n    struct nuvec_s startpos;\n    struct nuvec_s vSN;\n    struct nuvec_s vLN;\n    struct nuvec_s vRN;\n    f32 shadow;\n    f32 layer_shadow;\n    f32 roof_y;\n    f32 clearance;\n    f32 forward;\n    f32 abs_forward;\n    f32 side;\n    f32 abs_side;\n    f32 xyz_distance;\n    f32 xz_distance;\n    f32 radius;\n    struct nuvec_s min;\n    struct nuvec_s max;\n    f32 scale;\n    f32 SCALE;\n    f32 RADIUS;\n    f32 old_SCALE;\n    f32 objbot;\n    f32 objtop;\n    f32 bot;\n    f32 top;\n    f32 oldobjbot;\n    f32 oldobjtop;\n    f32 die_time;\n    f32 die_duration;\n    f32 reflect_y;\n    f32 idle_gametime;\n    f32 pad_speed;\n    f32 pad_dx;\n    f32 pad_dz;\n    char i;\n    char dead;\n    u16 pad_angle;\n    u16 attack;\n    u16 vulnerable;\n    short die_action;\n    char old_ground;\n    char finished;\n    u16 xrot;\n    u16 yrot;\n    u16 zrot;\n    u16 surface_xrot;\n    u16 surface_zrot;\n    u16 layer_xrot;\n    u16 layer_zrot;\n    u16 roof_xrot;\n    u16 roof_zrot;\n    short target_xrot;\n    short target_yrot;\n    short dyrot;\n    union type_s_name gndflags;\n    u16 hdg;\n    u16 thdg;\n    char ground;\n    char surface_type;\n    char layer_type;\n    char roof_type;\n    char invisible;\n    u8 submerged;\n    char transporting;\n    char got_shadow;\n    u8 boing;\n    u8 contact_type;\n    char die_model[2];\n    u8 invincible;\n    char pos_adjusted;\n    char wade;\n    char dangle;\n    char ddsand;\n    char ddsnow;\n    char ddwater;\n    char ddr;\n    char ddg;\n    char ddb;\n    char last_ground;\n    char direction;\n    char kill_contact;\n    u8 touch;\n};\n\nstruct nuhspecial_s {\n    struct nugscn_s * scene;\n    struct nuspecial_s * special;\n};\n\n// Size: 0xC, DWARF: 0x25E52E\nstruct fontaccenttab_s\n{\n    struct nuhspecial_s obj; // Offset: 0x0, DWARF: 0x25E540\n    char* name; // Offset: 0x8, DWARF: 0x25E568\n};\n\nstruct AI_s {\n    struct nuvec_s oldpos;\n    struct nuvec_s newpos;\n    struct nuvec_s wobblepos;\n    f32 time;\n    f32 duration;\n    f32 spins;\n    f32 speed;\n    f32 radius;\n    f32 distance;\n    f32 height;\n    f32 lateral;\n    f32 scale;\n    f32 wobble;\n    u16 oldangle;\n    u16 angle;\n    u16 old_yrot;\n    u16 movflags;\n    u16 terflags;\n    u16 rotflags;\n    u16 rotspeed;\n    u16 rotadjust;\n    u16 wobble_ang;\n    u16 wobble_speed;\n    char direction;\n    char i0;\n    char i1;\n    char idle_update;\n    void * event_function[2];\n    f32 event_distance[2];\n    short event_branch[2];\n    char event[2];\n    char event_index[2];\n    u8 event_flags[2];\n    u8 event_occured[2];\n    u16 attack_locator_bits;\n    char pad1;\n    char pad2;\n    f32 attack_locator_radius;\n    struct nuhspecial_s obj;\n    char kill;\n    char locator_kill;\n    short force_action;\n    short look_creature;\n    u8 count;\n    u8 hits;\n};\n\nstruct NEWBUGGY {\n    void * a; /* struct TODO */\n};\n\nstruct creatcmd_s {\n    s32 cmd;\n    s32 i;\n    f32 f;\n};\n\nstruct rumble_s {\n    u8 buzz;\n    u8 power;\n    u8 frame;\n    u8 frames;\n};\n\nstruct creature_s {\n    char used;\n    char on;\n    char off_wait;\n    char i_aitab;\n    struct obj_s obj;\n    struct AI_s ai;\n    struct NEWBUGGY * Buggy;\n    struct creatcmd_s * cmdtable;\n    struct creatcmd_s * cmdcurr;\n    struct MoveInfo * OnFootMoveInfo;\n    struct numtx_s m;\n    struct numtx_s mtxLOCATOR[16][2];\n    struct nuvec_s momLOCATOR[16][2];\n    struct Nearest_Light_s lights;\n    struct rumble_s rumble;\n    f32 idle_time;\n    f32 idle_wait;\n    short idle_action;\n    short old_idle_action;\n    char idle_mode;\n    char idle_repeat;\n    char jump;\n    char jump_type;\n    char jump_subtype;\n    char ok_slam;\n    char slam;\n    char spin;\n    char crawl;\n    char crawl_lock;\n    char tiptoe;\n    char sprint;\n    u8 somersault;\n    u8 land;\n    char pad_type;\n    char jump_hack;\n    u8 jump_hold;\n    u8 allow_jump;\n    short jump_frames;\n    short jump_frame;\n    short slam_wait;\n    short spin_frames;\n    short spin_frame;\n    short spin_wait;\n    short slide;\n    short crouch_pos;\n    u16 slam_frame;\n    short fire_action;\n    u8 fire;\n    u8 tap;\n    char target;\n    char target_wait;\n    char fire_lock;\n    char idle_sigh;\n    u8 hit_type;\n    u8 freeze;\n    char anim_processed;\n    char pad1;\n};\n\n\n// Size: 0x20, DWARF: 0x299693\nstruct objtab_s\n{\n    struct nuhspecial_s obj; // Offset: 0x0, DWARF: 0x2996A5\n    struct nugscn_s** scene; // Offset: 0x8, DWARF: 0x2996CD\n    signed char visible; // Offset: 0xC, DWARF: 0x2996FB\n    char font3d_letter; // Offset: 0xD, DWARF: 0x299725\n    char pad1; // Offset: 0xE, DWARF: 0x299755\n    char pad2; // Offset: 0xF, DWARF: 0x29977C\n    char* name; // Offset: 0x10, DWARF: 0x2997A3\n    unsigned long long levbits; // Offset: 0x18, DWARF: 0x2997CD\n};\n// Size: 0x414, DWARF: 0x2C4D0\nstruct game_s\n{\n    char name[9]; // Offset: 0x0, DWARF: 0x2C4E2\n    unsigned char vibration; // Offset: 0x9, DWARF: 0x2C50B\n    unsigned char surround; // Offset: 0xA, DWARF: 0x2C537\n    unsigned char sfx_volume; // Offset: 0xB, DWARF: 0x2C562\n    unsigned char music_volume; // Offset: 0xC, DWARF: 0x2C58F\n    signed char screen_x; // Offset: 0xD, DWARF: 0x2C5BE\n    signed char screen_y; // Offset: 0xE, DWARF: 0x2C5E9\n    unsigned char language; // Offset: 0xF, DWARF: 0x2C614\n    // Size: 0x4, DWARF: 0x2C281\n    struct\n    {\n        unsigned char flags; // Offset: 0x0, DWARF: 0x2C293\n        unsigned char crystals; // Offset: 0x1, DWARF: 0x2C2BB\n        char pad1; // Offset: 0x2, DWARF: 0x2C2E6\n        char pad2; // Offset: 0x3, DWARF: 0x2C30D\n    } hub[6]; // Offset: 0x10, DWARF: 0x2C63F\n    // Size: 0x1C, DWARF: 0x2C3DA\n    struct\n    {\n        unsigned short flags; // Offset: 0x0, DWARF: 0x2C3EC\n        char pad1; // Offset: 0x2, DWARF: 0x2C414\n        char pad2; // Offset: 0x3, DWARF: 0x2C43B\n        // Size: 0x8, DWARF: 0x2C355\n        struct\n        {\n            char name[4]; // Offset: 0x0, DWARF: 0x2C367\n            unsigned int itime; // Offset: 0x4, DWARF: 0x2C390\n        } time[3]; // Offset: 0x4, DWARF: 0x2C462\n    } level[35]; // Offset: 0x28, DWARF: 0x2C667\n    unsigned char lives; // Offset: 0x3FC, DWARF: 0x2C691\n    unsigned char wumpas; // Offset: 0x3FD, DWARF: 0x2C6B9\n    unsigned char mask; // Offset: 0x3FE, DWARF: 0x2C6E2\n    unsigned char percent; // Offset: 0x3FF, DWARF: 0x2C709\n    unsigned char crystals; // Offset: 0x400, DWARF: 0x2C733\n    unsigned char relics; // Offset: 0x401, DWARF: 0x2C75E\n    unsigned char crate_gems; // Offset: 0x402, DWARF: 0x2C787\n    unsigned char bonus_gems; // Offset: 0x403, DWARF: 0x2C7B4\n    unsigned char gems; // Offset: 0x404, DWARF: 0x2C7E1\n    unsigned char gembits; // Offset: 0x405, DWARF: 0x2C808\n    unsigned char powerbits; // Offset: 0x406, DWARF: 0x2C832\n    unsigned char empty; // Offset: 0x407, DWARF: 0x2C85E\n    unsigned int cutbits; // Offset: 0x408, DWARF: 0x2C886\n    unsigned char year; // Offset: 0x40C, DWARF: 0x2C8B0\n    unsigned char month; // Offset: 0x40D, DWARF: 0x2C8D7\n    unsigned char day; // Offset: 0x40E, DWARF: 0x2C8FF\n    unsigned char hours; // Offset: 0x40F, DWARF: 0x2C925\n    unsigned char mins; // Offset: 0x410, DWARF: 0x2C94D\n};\n\n// Size: 0x48\nstruct MoveInfo\n{\n    f32 IDLESPEED; // Offset: 0x0, DWARF: 0x14CF11\n    f32 TIPTOESPEED; // Offset: 0x4, DWARF: 0x14CF3D\n    f32 WALKSPEED; // Offset: 0x8, DWARF: 0x14CF6B\n    f32 RUNSPEED; // Offset: 0xC, DWARF: 0x14CF97\n    f32 SPRINTSPEED; // Offset: 0x10, DWARF: 0x14CFC2\n    f32 SLIDESPEED; // Offset: 0x14, DWARF: 0x14CFF0\n    f32 CRAWLSPEED; // Offset: 0x18, DWARF: 0x14D01D\n    f32 DANGLESPEED; // Offset: 0x1C, DWARF: 0x14D04A\n    f32 WADESPEED; // Offset: 0x20, DWARF: 0x14D078\n    f32 JUMPHEIGHT; // Offset: 0x24, DWARF: 0x14D0A4\n    f32 DANGLEGAP; // Offset: 0x28, DWARF: 0x14D0D1\n    short JUMPFRAMES0; // Offset: 0x2C, DWARF: 0x14D0FD\n    short JUMPFRAMES1; // Offset: 0x2E, DWARF: 0x14D12B\n    short JUMPFRAMES2; // Offset: 0x30, DWARF: 0x14D159\n    short STARJUMPFRAMES; // Offset: 0x32, DWARF: 0x14D187\n    short SOMERSAULTFRAMES; // Offset: 0x34, DWARF: 0x14D1B8\n    short SPINFRAMES; // Offset: 0x36, DWARF: 0x14D1EB\n    short SPINRESETFRAMES; // Offset: 0x38, DWARF: 0x14D218\n    short SUPERSPINFRAMES; // Offset: 0x3A, DWARF: 0x14D24A\n    short SUPERSPINWAITFRAMES; // Offset: 0x3C, DWARF: 0x14D27C\n    short SLAMWAITFRAMES; // Offset: 0x3E, DWARF: 0x14D2B2\n    short SLIDEFRAMES; // Offset: 0x40, DWARF: 0x14D2E3\n    short CROUCHINGFRAMES; // Offset: 0x42, DWARF: 0x14D311\n    short JUMPLANDFRAMES; // Offset: 0x44, DWARF: 0x14D343\n    short spad; // Offset: 0x46, DWARF: 0x14D374\n};\n\n//0x14?\nstruct D3DTexture\n{\n    void* empty;\n};\n\n// Size: 0x1C\nstruct nutex_s\n{\n    enum nutextype_e type;\n    s32 width;\n    s32 height;\n    s32 mmcnt;\n    void* bits;\n    s32* pal;\n    s16 decal;\n    s16 linear;\n};\n\n// Size: 0x28\nstruct nusystex_s\n{\n    struct nutex_s tex;\n    struct D3DTexture* dds;\n    s32 ref;\n    s32 rtid;\n};\n\nstruct glowlight_s\n{\n    struct nucolour3_s HighColour;\n    struct nucolour3_s LowColour;\n    struct nucolour3_s CurColour;\n    struct nucolour3_s ColDiff;\n    u16 Step;\n    u16 CurAngle;\n};\n\n// Size: 0x58, DWARF: 0x294F1C\nstruct ldata_s\n{\n    char* path; // Offset: 0x0, DWARF: 0x294F2E\n    unsigned char* clist; // Offset: 0x4, DWARF: 0x294F58\n    // Size: 0x38, DWARF: 0x28D5F1\n    struct\n    {\n        signed char i; // Offset: 0x0, DWARF: 0x28D603\n        signed char i_last; // Offset: 0x1, DWARF: 0x28D627\n        signed char i_next; // Offset: 0x2, DWARF: 0x28D650\n        unsigned char cuboid; // Offset: 0x3, DWARF: 0x28D679\n        short character[6]; // Offset: 0x4, DWARF: 0x28D6A2\n        short action[6]; // Offset: 0x10, DWARF: 0x28D6D0\n        float scale[6]; // Offset: 0x1C, DWARF: 0x28D6FB\n        float duration; // Offset: 0x34, DWARF: 0x28D725\n    }* pCHASE; // Offset: 0x8, DWARF: 0x294F83\n    unsigned int time[3]; // Offset: 0xC, DWARF: 0x294FB1\n    short music[2]; // Offset: 0x18, DWARF: 0x294FDA\n    // Size: 0x30, DWARF: 0x290E50\n    struct\n    {\n        char name[16]; // Offset: 0x0, DWARF: 0x290E62\n        unsigned short pitch; // Offset: 0x10, DWARF: 0x290E8B\n        unsigned short volume; // Offset: 0x12, DWARF: 0x290EB3\n        unsigned char buzz; // Offset: 0x14, DWARF: 0x290EDC\n        unsigned char rumble; // Offset: 0x15, DWARF: 0x290F03\n        unsigned char delay; // Offset: 0x16, DWARF: 0x290F2C\n        unsigned char wait; // Offset: 0x17, DWARF: 0x290F54\n        char* path; // Offset: 0x18, DWARF: 0x290F7B\n        unsigned short frequency; // Offset: 0x1C, DWARF: 0x290FA5\n        unsigned short stream; // Offset: 0x1E, DWARF: 0x290FD1\n        signed char type; // Offset: 0x20, DWARF: 0x290FFA\n        char pad1; // Offset: 0x21, DWARF: 0x291021\n        unsigned short id; // Offset: 0x22, DWARF: 0x291048\n        struct nuvec_s Pos; // Offset: 0x24, DWARF: 0x29106D\n    }* pSFX; // Offset: 0x1C, DWARF: 0x295004\n    short nSFX; // Offset: 0x20, DWARF: 0x295030\n    char pad1; // Offset: 0x22, DWARF: 0x295057\n    signed char hub; // Offset: 0x23, DWARF: 0x29507E\n    unsigned short flags; // Offset: 0x24, DWARF: 0x2950A4\n    short character; // Offset: 0x26, DWARF: 0x2950CC\n    short vehicle; // Offset: 0x28, DWARF: 0x2950F8\n    unsigned short farclip; // Offset: 0x2A, DWARF: 0x295122\n    struct nuvec_s vSTART; // Offset: 0x2C, DWARF: 0x29514C\n    struct nuvec_s vBONUS; // Offset: 0x38, DWARF: 0x295177\n    float fognear; // Offset: 0x44, DWARF: 0x2951A2\n    float fogfar; // Offset: 0x48, DWARF: 0x2951CC\n    unsigned char fogr; // Offset: 0x4C, DWARF: 0x2951F5\n    unsigned char fogg; // Offset: 0x4D, DWARF: 0x29521C\n    unsigned char fogb; // Offset: 0x4E, DWARF: 0x295243\n    unsigned char foga; // Offset: 0x4F, DWARF: 0x29526A\n    unsigned char hazer; // Offset: 0x50, DWARF: 0x295291\n    unsigned char hazeg; // Offset: 0x51, DWARF: 0x2952B9\n    unsigned char hazeb; // Offset: 0x52, DWARF: 0x2952E1\n    unsigned char hazea; // Offset: 0x53, DWARF: 0x295309\n    int totalsize; // Offset: 0x54, DWARF: 0x295331\n};\n\n\n// Size: 0x48\nstruct lights_s\n{\n    s32 type;\n    struct nuvec_s pos;\n    struct nuvec_s radius_pos;\n    f32 radius;\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 glow;\n    struct nucolour3_s colour;\n    struct nuvec_s direction;\n    u8 globalflag;\n    u8 blendtype;\n    u8 brightness;\n    struct glowlight_s* glowlight;\n    u8 pad2;\n};\n\nstruct cammtx_s\n{\n    struct numtx_s m; // Offset: 0x0, DWARF: 0x7250A\n    struct numtx_s m0; // Offset: 0x40, DWARF: 0x72530\n    struct nuvec_s vX; // Offset: 0x80, DWARF: 0x72557\n    struct nuvec_s vY; // Offset: 0x8C, DWARF: 0x7257E\n    struct nuvec_s vZ; // Offset: 0x98, DWARF: 0x725A5\n    struct nuvec_s pos; // Offset: 0xA4, DWARF: 0x725CC\n    struct nuvec_s oldpos; // Offset: 0xB0, DWARF: 0x725F4\n    struct nuvec_s newpos; // Offset: 0xBC, DWARF: 0x7261F\n    struct nuvec_s pos2; // Offset: 0xC8, DWARF: 0x7264A\n    struct nuvec_s seek; // Offset: 0xD4, DWARF: 0x72673\n    float distance; // Offset: 0xE0, DWARF: 0x7269C\n    float ahead; // Offset: 0xE4, DWARF: 0x726C7\n    float judder; // Offset: 0xE8, DWARF: 0x726EF\n    float blend_time; // Offset: 0xEC, DWARF: 0x72718\n    float blend_duration; // Offset: 0xF0, DWARF: 0x72745\n    s32 xrot; // Offset: 0xF4, DWARF: 0x72776\n    s32 yrot; // Offset: 0xF8, DWARF: 0x7279D\n    s32 zrot; // Offset: 0xFC, DWARF: 0x727C4\n    u16 old_xrot; // Offset: 0x100, DWARF: 0x727EB\n    u16 new_xrot; // Offset: 0x102, DWARF: 0x72816\n    u16 old_yrot; // Offset: 0x104, DWARF: 0x72841\n    u16 new_yrot; // Offset: 0x106, DWARF: 0x7286C\n    u16 old_zrot; // Offset: 0x108, DWARF: 0x72897\n    u16 new_zrot; // Offset: 0x10A, DWARF: 0x728C2\n    u16 hdg_to_player; // Offset: 0x10C, DWARF: 0x728ED\n    short route; // Offset: 0x10E, DWARF: 0x7291D\n    short i0; // Offset: 0x110, DWARF: 0x72945\n    short i1; // Offset: 0x112, DWARF: 0x7296A\n    signed char mode; // Offset: 0x114, DWARF: 0x7298F\n    signed char iRAIL; // Offset: 0x115, DWARF: 0x729B6\n    short iALONG; // Offset: 0x116, DWARF: 0x729DE\n    u16 angle; // Offset: 0x118, DWARF: 0x72A07\n    signed char vertical; // Offset: 0x11A, DWARF: 0x72A2F\n    char pad1; // Offset: 0x11B, DWARF: 0x72A5A\n};\n\n// Size: 0x28, DWARF: 0x72FC7\nstruct rail_s\n{\n    struct nugspline_s* pINPLAT; // Offset: 0x0, DWARF: 0x72FD9\n    struct nugspline_s* pINCAM; // Offset: 0x4, DWARF: 0x73008\n    struct nugspline_s* pLEFT; // Offset: 0x8, DWARF: 0x73036\n    struct nugspline_s* pCAM; // Offset: 0xC, DWARF: 0x73063\n    struct nugspline_s* pRIGHT; // Offset: 0x10, DWARF: 0x7308F\n    struct nugspline_s* pOUTCAM; // Offset: 0x14, DWARF: 0x730BD\n    struct nugspline_s* pOUTPLAT; // Offset: 0x18, DWARF: 0x730EC\n    float in_distance; // Offset: 0x1C, DWARF: 0x7311C\n    float out_distance; // Offset: 0x20, DWARF: 0x7314A\n    short edges; // Offset: 0x24, DWARF: 0x73179\n    signed char type; // Offset: 0x26, DWARF: 0x731A1\n    signed char circuit; // Offset: 0x27, DWARF: 0x731C8\n};\n\n\n\n\nvoid NuMemFree(void* addr);\nvoid NuAnimCurveSetDestroy (struct nuanimcurveset_s * animcurveset, s32 destroy_curves);\nvoid NuAnimCurveDestroy (struct nuanimcurve_s * curve);\nvoid NuRndrFaceItem(struct nugeomitem_s* item);\nvoid SetupShaders(struct nugeomitem_s* geomitem);\ns32 NuLightStoreCurrentLights();\ns32 NuCameraClipTestExtents(struct nuvec_s* min, struct nuvec_s* max, const struct numtx_s* wm);\ns32 NuCameraClipTestBoundingSphere(struct nuvec_s* gobj_centre, f32* radius, struct numtx_s* wm);\ns32 NuCameraClipTestPoints(struct nuvec_s* pnts, s32 cnt, struct numtx_s* wm);\nvoid NuCameraTransformScreenClip(struct nuvec_s* dest, struct nuvec_s* src, s32 n, struct numtx_s* w);\nvoid NuCameraSet(struct nucamera_s* camera);\nstatic void FixAxes(struct numtx_s* mtx);\nvoid NuMtlAddFaceonItem (struct numtl_s * mtl, struct nurndritem_s * item);\ns32 NuRndrGobj(struct nugobj_s* gobj, struct numtx_s* wm, f32** blendvals);\nvoid SetProjectionMatrix (struct numtx_s * mtx, f32 fFOV, f32 fAspect, f32 fNearPlane, f32 fFarPlane);\nvoid NuMtxMulH(struct numtx_s* m, const struct numtx_s* m0, const struct numtx_s* m1);\nvoid NuMtxInv(struct numtx_s* m, struct numtx_s* m0);\nvoid NuMtxInvH(struct numtx_s* mi, struct numtx_s* m0);\nvoid NuMtxScale(struct numtx_s* m, struct nuvec_s* s);\nvoid NuMtxSetIdentity(struct numtx_s* m);\nvoid NuVecMtxTransform(struct nuvec_s* v, struct nuvec_s* v0, struct numtx_s* m0);\nvoid NuVecMtxTransformH(struct nuvec_s* v, struct nuvec_s* v0, struct numtx_s* m0);\nvoid NuMtxMul(struct numtx_s* m, struct numtx_s* m0, struct numtx_s* m1);\nvoid NuVpGetClippingMtx(struct numtx_s* mtx);\nvoid NuVpGetScalingMtx(struct numtx_s* mtx);\nvoid NuMtlRenderFaceOn();\nvoid buildBitCountTable (void);\nvoid NuMtlAddFaceonItem(struct numtl_s *mtl,struct nurndritem_s *item);\ns32 NuFileLoadBuffer(s8* fname, void* mem, s32 buffsize);\nstruct nuanimdata_s* NuAnimDataFixPtrs(struct nuanimdata_s* animdata, s32 address_offset);\nstruct nuanimdata_s* NuAnimDataLoadBuff(char* file, union variptr_u* buff, union variptr_u* endbuff);\nstruct nugobj_s* ReadNuIFFGeom(s32 fh, struct numtl_s** mtls);\ns32 NuFileReadInt(s32 fh);\ns32 NuFileRead(s32 fh, void* data, s32 size);\nvoid* NuMemAlloc(s32 size);\nchar NuFileReadChar(s32 fh);\nvoid ReadNuIFFMaterialSet (s32 handle, struct nuscene_s * nus);\nstruct numtl_s * NuMtlRead (s32 handle);\nvoid NuTexSetTextureStates (struct numtl_s * mtl);\nstatic void NuMtlOTInsert(struct nuotitem_s* oti);\nvoid NuHGobjDestroyDynamic (struct NUHGOBJ_s * hgobj);\nvoid NuTexAnimRemoveList (struct nutexanim_s * nta);\nvoid NuTexDestroy (s32 tid);\nvoid NuMtlDestroy (struct nusysmtl_s * mat);\nvoid NuGobjDestroy (struct nugobj_s * obj);\nstruct NUPOINTOFINTEREST_s* NuHGobjGetPOI(struct NUHGOBJ_s* hgobj, unsigned char poi_id);\nvoid pftaGoto (struct nufpar_s * fpar);\nstatic void NuTexAnimXCall(s32 lid, struct nutexanimenv_s* ignore);\nstruct nutexanimprog_s* NuTexAnimProgReadScript(union variptr_u* buff, s8* fname);\nvoid NuTexAnimEnvProc(struct nutexanimenv_s* e);\nstruct nufpar_s * NuFParCreate (char * filename);\ns32 NuFParPushCom (struct nufpar_s * fp, struct nufpcomjmp_s * jmp);\ns32 NuFParGetWord (struct nufpar_s * fp);\ns32 NuFParInterpretWord (struct nufpar_s * fp);\ns32 NuFParGetLine (struct nufpar_s * fPar);\nvoid NuFParDestroy (struct nufpar_s * fp);\ns32 EvalVars (s32 cc, s32 v0, s32 v1);\nvoid NuTexAnimXCall (s32 lid,struct nutexanimenv_s * ignore);\nlong NuRand (struct nunrand_s * nrand);\ns32 LabTabFind (s8 * txt);\nvoid NuTexAnimProgInit (struct nutexanimprog_s * rv);\nvoid NuTexAnimProgAssembleEnd(struct nutexanimprog_s* p);\nstruct nutexanimenv_s * NuTexAnimEnvCreate (union variptr_u * buff, struct numtl_s * mtl, short * tids, struct nutexanimprog_s * p);\ns32 SortPrimdefs(struct primdef_s* pd, s32 cnt);\ns32 FillFreeMatrixSlots(struct primdef_s* pd, s32 cnt, s32 start);\nstruct NuPrim* NuPrimCreate(s16 amount, u32 type);\nvoid NuPrimDestroy(struct NuPrim* prim);\nvoid* GS_CreateBuffer (u32 bufSize, u32 bufferType);\nvoid GS_DeleteBuffer(u8* buffer);\nvoid NuVecMtxTransform(struct nuvec_s* v, struct nuvec_s* v0, struct numtx_s* m0);\nvoid NuVecAdd(struct nuvec_s* v, struct nuvec_s* v0, struct nuvec_s* v1);\nvoid NuVecMtxRotate(struct nuvec_s* v, struct nuvec_s* v0, struct numtx_s* m0);\nvoid NuTexSetTexture(u32 stage, s32 tid);\nvoid NuTexSetTextureStates(struct numtl_s* mtl);\nvoid NuMtlSetRenderStates(struct numtl_s* mtl);\nvoid NuGobjAddFaceOnGeom(struct nugobj_s *gobj, struct NuFaceOnGeom *geom);\nvoid NuGobjAddGeom(struct nugobj_s *gobj,struct NuGeom *geom);\nvoid NuGobjCalcFaceOnDims(struct nugobj_s * gobj);\ns32 NuTexUnRef(s32 tid);\nvoid free_x(void* addr);\nstatic void NuMtlRemove(struct nusysmtl_s* sm);\nvoid NuGeomDestroy(struct NuGeom* geom);\nstruct numtl_s* NuMtlCreate(s32 cnt);\nvoid NuMtlInsert (struct nusysmtl_s * sm);\nstatic void NuMtlCreateDefault();\nstruct numtl_s* NuMtlCreate(s32 cnt);\nvoid NuMtlUpdate(struct numtl_s* mtl);\nvoid NuPs2CreateSkinNorm(struct nugobj_s* g);\nvoid CreateSkinGeom(struct NuGeom* ge, struct primdef_s* pd, s32 pdcnt);\nvoid* NuDebugMsgProlog (char * file, s32 line);\nvoid NudxFw_DestroyBackBufferCopy (void);\nvoid ReadNuIFFHGobjSet(s32 fh, struct NUHGOBJ_s* hgobj);\n\n//other func.\nerror_func (*NuErrorProlog(char*, s32))(char*,...);  \nvoid * gcc2_compiled__N128 (void * __s, s32 __c, s32 __n); //memset\n\n\n\nvoid UpdateChaseRunAnim(struct creature_s* plr);\nvoid UpdateCharacterIdle(struct creature_s* c, s32 character);\n//void AddGameDebrisRot(s32 i, nuvec_s* pos, s32 n, u16 xrot, u16 yrot);\n\nstruct TerSurf TerSurface[16];\nstruct MoveInfo CrashMoveInfo;\n\nstatic struct numtx_s rndrmtx[1536];\nstatic struct nugeomitem_s geomitem[2048];\nstatic struct numtx_s cmtx;\nstatic struct numtx_s csmtx;\n\nstatic struct numtx_s smtx;\n\nstatic struct numtx_s vpcsmtx;\nstatic struct numtx_s vpcmtx;\n\n\nstruct creature_s* player;\nstatic struct nutexanimprog_s* sys_progs;\nstatic struct nutexanimprog_s* parprog; \nstatic s32 labtabcnt;\nextern s32 nta_labels[64];\nstruct nutexanimlist_s* ntal_first;\nstatic s32 isBitCountTable;\nextern struct nuotitem_s* ot[257];\nstatic struct nufaceonitem_s* faceonmtllist[50];\nstruct nusystex_s tinfo[1024];\n\n\nextern s32 _timer; // Not sure how it got the name \"_timer.210\"\nextern BOOL Paused;\nextern BOOL sysinit;\nstruct primdef_s* primdefs; //static\nstruct primdef_s* primdefs_sorted; //static\ns8 mtxused[256]; //static\nextern char* lbl_8011C7E8; //string of SortPrimDefs\nextern char* s_C__source_crashwoc_code_nu3dx_nu_8011c784;\nextern char* lbl_8011C834;\nextern s32 stats[15];\nextern s32 tritot;\nextern s32 totalpts;\nextern s32 totaldupes;\nextern s32 stritot;\nstruct lights_s Lights[320];\n\n#define offsetof(ST, M) ((size_t) & (((ST*)0)->M))", "diff_flags": [], "diff_label": "RailInfo", "libraries": []}