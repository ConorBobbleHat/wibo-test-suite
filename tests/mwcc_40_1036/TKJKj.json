{"compiler": "mwcc_40_1036", "compiler_flags": "-O4,p -enum int -proc arm946e -gccext,on -fp soft -lang c99 -char signed -inline on,noauto -Cpp_exceptions off -gccinc -interworking -gccdep -MD -g", "source_code": "static const u16 CombiWazaTbl[] = {\n    1,\n    0,\n    2,\n};\n#define NELEMS(ary) (sizeof(ary)/sizeof(ary[0]))\nbool FUN_021a2194(ServerFlow *battleSeverFlow, BTL_POKEPARAM* attacker, u16 waza, BtlPokePos targetPos)\n{\n    u32 i;\n\n    for (i = 0; i < NELEMS(CombiWazaTbl); ++i)\n    {\n        if (CombiWazaTbl[i] == waza)\n        {\n            break;\n        }\n    }\n\n    if ((i != NELEMS(CombiWazaTbl)) \n        && (!FUN_021bb3b0(attacker, 10)) \n        && (!FUN_021bc674(attacker)))\n    {\n        u8 FUN_021bac40();\n        enum\n        {\n            COMBI_MAX = 3 - 1, // \u5408\u4f53\u30ef\u30b6\u3092\u4e00\u7dd2\u306b\u6483\u3063\u3066\u304f\u308c\u308b\u8ad6\u7406\u4e0a\u306e\u6700\u5927\u30dd\u30b1\u6570\n        };\n        ACTION_ORDER_WORK *orderWork[COMBI_MAX];\n        u32 orderCnt = 0;\n        u8 pokeID = FUN_021bac40(attacker);\n\n        for (i = 0; i < NELEMS(CombiWazaTbl); ++i)\n        {\n            if (CombiWazaTbl[i] != waza)\n            {\n                orderWork[orderCnt] = FUN_021a05ac(battleSeverFlow, CombiWazaTbl[i], pokeID, targetPos);\n                if (orderWork[orderCnt] != NULL)\n                {\n                    if (++orderCnt >= COMBI_MAX)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (orderCnt)\n        {\n            BTL_POKEPARAM *combiPoke;\n            u8 idx, idxMin, combiPokeID;\n\n            idxMin = 6;\n            combiPoke = orderWork[0]->bpp;\n\n            for (i = 0; i < orderCnt; ++i)\n            {\n                u8 FUN_021a0600();\n                idx = FUN_021a0600(battleSeverFlow, orderWork[i]);\n                if (idx < idxMin)\n                {\n                    idxMin = idx;\n                    combiPoke = orderWork[i]->bpp;\n                }\n            }\n\n            combiPokeID = FUN_021bac40(combiPoke);\n\n            FUN_021bb7c0(attacker, 10);\n            FUN_021bc640(combiPoke, pokeID, waza);\n            SCQUE_PUT_MSG_SET(battleSeverFlow->m_que, 0x47A, pokeID, combiPokeID);\n\n            FUN_021a0bf0(battleSeverFlow, combiPokeID);\n            return true;\n        }\n    }\n    return false;\n}\n", "context": "typedef unsigned char uint8_t;\ntypedef unsigned short uint16_t;\ntypedef unsigned int uint32_t;\ntypedef int int32_t;\ntypedef unsigned long long uint64_t;\ntypedef signed long long int    s64;\n\ntypedef uint8_t   u8;\ntypedef uint16_t u16;\ntypedef uint32_t u32;\ntypedef int32_t  s32;\n\ntypedef s32 fx32;\ntypedef int bool;\n\ntypedef unsigned int uintptr_t;\ntypedef uintptr_t uptr;\n\n\n#pragma thumb on\n#define true 1\n#define false 0\n#define BTL_CLIENT_NUM 4\n#define BTL_CLIENT_MAX 4\n#define BTL_POS_MAX 6\n#define PARTY_SIZE 6\n#define NULL ((void *)0)\n#define BTL_POS_NULL 6\n#define SC_MSG_STD 0x5a\n#define SC_MSG_SET 0x5b\n#define SC_MSG_STD_SE 0x5c\n#define SC_MSG_SET_SE 0x5d\n#define NIGERU_COUNT_MAX 30\n\n#define SCQUE_PUT_MSG_STD(que, ...) FUN_021b15d0( que, SC_MSG_STD, __VA_ARGS__, 0xFFFF0000 )\n#define SCQUE_PUT_MSG_SET(que, ...) FUN_021b15d0( que, SC_MSG_SET, __VA_ARGS__, 0xFFFF0000  )\n#define SCQUE_PUT_MSG_STD_SE(que, ...) FUN_021b15d0( que, SC_MSG_STD_SE, __VA_ARGS__, 0xFFFF0000 )\n#define SCQUE_PUT_MSG_SET_SE(que, ...) FUN_021b15d0( que, SC_MSG_SET_SE, __VA_ARGS__, 0xFFFF0000  )\nstruct TINYMT32_T\n{\n    u32 status[4];\n    u32 mat1;\n    u32 mat2;\n};\n\ntypedef struct TINYMT32_T tinymt32_t;\n\ntypedef struct\n{\n    u16 TurnNum;       // \u304b\u304b\u3063\u305f\u30bf\u30fc\u30f3\u6570\n    u8 HPSum;\n    u8 PokeChgNum;    // \u4ea4\u4ee3\u56de\u6570\n    u8 VoidAtcNum;    // \u52b9\u679c\u304c\u306a\u3044\u6280\u3092\u51fa\u3057\u305f\u56de\u6570\n    u8 WeakAtcNum;    // \u3070\u3064\u3050\u3093\u306e\u6280\u3092\u51fa\u3057\u305f\u56de\u6570\n    u8 ResistAtcNum;  // \u3044\u307e\u3072\u3068\u3064\u306e\u6280\u3092\u51fa\u3057\u305f\u56de\u6570\n    u8 VoidNum;       // \u52b9\u679c\u304c\u306a\u3044\u6280\u3092\u53d7\u3051\u305f\u56de\u6570\n    u8 ResistNum;     // \u3044\u307e\u3072\u3068\u3064\u306e\u6280\u3092\u53d7\u3051\u305f\u56de\u6570\n    u8 WinTrainerNum; // \u5012\u3057\u305f\u30c8\u30ec\u30fc\u30ca\u30fc\u6570\n    u8 WinPokeNum;    // \u5012\u3057\u305f\u30dd\u30b1\u30e2\u30f3\u6570\n    u8 LosePokeNum;   // \u5012\u3055\u308c\u305f\u30dd\u30b1\u30e2\u30f3\u6570\n    u8 UseWazaNum;    // \u4f7f\u7528\u3057\u305f\u6280\u306e\u6570\n} BATTLE_KENTEI_RESULT;\n\ntypedef struct\n{\n    /*0x0*/ u32 competitor;\n    /*0x4*/ int rule;\n    /*0x8*/ int unk8;\n    /*0xC*/ int unkC;\n    /*0x10*/ u8 unk10[0xA];\n    /*0x1A*/ u16 unk1A;\n    /*0x1C*/ void *netHandle;\n    /*0x20*/ u8 commMode;\n    /*0x21*/ u8 commPos;\n    /*0x22*/ u8 multiMode;\n    /*0x23*/ u8 recordDataMode;\n    /*0x24*/ void* party[ BTL_CLIENT_NUM ];\n    /*0x34*/ void *playerStatus[BTL_CLIENT_NUM];\n    /*0x44*/ u8 unk44[4];\n    /*0x48*/ void *unk48[4];\n    /*0x58*/ u8 unk4C[0x18];\n    /*0x70*/ void *unk70;\n    /*0x74*/ void *configData;\n    /*0x78*/ void *itemData;\n    /*0x7C*/ void *bagCursor;\n    /*0x80*/ void *unk80;\n    /*0x84*/ void *unk84;\n    /*0x88*/ int unk88;\n    /*0x8C*/ u16 LimitTimeGame;\n    /*0x8E*/ u16 LimitTimeCommand;\n    /*0x90*/ u8 unk90[0x7];\n    /*0x97*/ u8 unk97;\n    /*0x98*/ u8 badgeCount;\n    /*0x99*/ u8 unk99[0x7];\n    /*0xA0*/ u16 unka0;\n    /*0xA2*/ u16 unka2;\n    /*0xA4*/ int getMoney;\n    /*0xA8*/ u8 unka8[4];\n    /*0xAC*/ u8 capturedPokeIdx;\n    /*0xAD*/ u8 commServerVer;\n    /*0xAE*/ u16 unk_ae;\n    /*0xB0*/ u8* recBuffer;\n    /*0xB4*/ int unk_b4;\n    /*0xB8*/ tinymt32_t recRandContext;\n    /*0xD0*/ BATTLE_KENTEI_RESULT kenteiResult;\n    /*0xDD*/ u8 cmdIllegalFlag : 1;\n             u8 recPlayCompleteFlag : 1;\n            u8 unkdd22: 1;\n    /*0xDD*/ u8 unkdd3 : 2;\n    /*0xDD*/ u8 unkdd4 : 3;\n    /*0xDE*/ u8 unkde:1;\n    /*0xDF*/ u8 unkdf;\n    /*0xE0*/ u8 unkE0;\n    /*0xE1*/ u8 fightPokeIndex[6];\n    /*0xE7*/ u8 unkE4[0x4D];\n    /*0x134*/ int unk134;\n    /*0x138*/ u16 unk138;\n    /*0x13A*/ u16 unk13A;\n} BATTLE_SETUP_PARAM;\n\ntypedef struct\n{\n    void* m_pMember[6];\n    u8 m_memberCount;\n    u8 m_numCoverPos;\n    u16 fill;\n}BTL_PARTY;\n\ntypedef struct\n{\n    void* m_member[6];\n    u8 m_memberCount;\n    u8 markingIndex;\n}PokeParty;\n\ntypedef struct\n{\n    /*0x0*/ void *mainModule;\n    /*0x4*/ BTL_PARTY m_party[BTL_CLIENT_MAX];\n    /*0x74*/ PokeParty* m_srcParty[ BTL_CLIENT_MAX ];\n    /*0x84*/ void* m_pokeParam[0x18];\n    /*0xE4*/ int m_fForServer;\n} POKECON;\n// sizeof 0xE8\n\ntypedef struct\n{\n    u8 s[0x10];\n} Reader;\n\ntypedef struct\n{\n    /*0x0*/ void *unk0; //\u67d0\u6587\u672c?\n    /*0x4*/ void *name;\n    /*0x8*/ u16 unk8;\n    /*0xA*/ u16 unkA;\n    /*0xC*/ void *win_msg;\n    /*0x10*/ u16 useItem[4];\n\n    /*0x18*/ u8 unk18;\n    /*0x19*/ u8 trainerSex;\n    /*0x1A*/ u8 trainerGold;\n    /*0x1B*/ u8 pad1;\n    /*0x1C*/ u32 ai_bit;\n    /*0x20*/ int unk20;\n\n    /*0x24*/ u8 grammer_attr;\n    /*0x25*/ u8 grammer_isPlural;\n    /*0x26*/ u8 grammer_attr1;\n    /*0x27*/ u8 grammer_isPlural1;\n\n} TRAINER_DATA;\n// size of 0x28\n\ntypedef struct\n{\n    u8 (*unk_0)(u32, int*);\n    u8 (*unk_4)(u32, int*);\n    int unk8;\n    int unkC;\n}unk_struct_450;\n\ntypedef struct\n{\n    tinymt32_t randomContext;\n    u16 debugFlagBit;\n    u16 LimitTimeGame;\n    u16 LimitTimeCommand;\n    u8 msgSpeed;\n    u8 fWazaEffectEnable : 4;\n    u8 fCommTag : 4;\n\n} SERVER_NOTIFY_PARAM;\n\ntypedef struct\n{\n    u32 count;\n    u8 clientID[BTL_CLIENT_MAX];\n} EscapeInfo;\ntypedef signed char    s8;\ntypedef struct\n{\n    int unk0;\nint unk4;\ns8 unk8;\n}struct_unk478;\n\ntypedef struct\n{\n    /*0x0*/ BATTLE_SETUP_PARAM *bp;\n    /*0x4*/ void *m_viewCore;\n    /*0x8*/ int m_server;\n    /*0xC*/ int m_cmdCheckServer;\n    /*0x10*/ void *m_client[4];\n    /*0x20*/ TRAINER_DATA tr_data[4];\n    /*0xC0*/ void *m_playerStatus;\n    /*0xC4*/ u8 m_fClientQuit[BTL_CLIENT_NUM];\n    /*0xC8*/ POKECON m_pokeconForClient;\n    /*0x1B0*/ POKECON m_pokeconForServer;\n    /*0x298*/ void *m_srcParty[4];\n    /*0x2A8*/ void *m_srcPartyForServer[4];\n    /*0x2B8*/ void *m_tmpParty;\n    /*0x2BC*/ void *unk_2bc;\n    /*0x2C0*/ void *m_ppIllusionZoroArc;\n    /*0x2C4*/ void *m_AIDataContainer;\n    /*0x2C8*/ Reader m_recReader; // \u672a\u77e5\u5927\u5c0f\n    /*0x2D8*/ u8 unk2[0x108];\n    /*0x3E0*/ int unk3E0[4];\n    /*0x3F0*/ tinymt32_t m_randomContext;\n    /*0x408*/ SERVER_NOTIFY_PARAM unk408;\n    /*0x428*/ u8 m_posCoverClientID[ BTL_POS_MAX ];                        //\n    /*0x42E*/ u16 unk42E;\n    /*0x430*/ u32 m_regularMoney;\n    /*0x434*/ u32 m_bonusMoney;\n    /*0x438*/ u32 m_loseMoney;\n    /*0x43C*/ int m_msgSpeed;\n    /*0x440*/ u16 m_LimitTimeGame;\n    /*0x442*/ u16 m_LimitTimeCommand;\n    /*0x444*/ int m_serverResult;\n    /*0x448*/ EscapeInfo m_escapeInfo;\n    /*0x450*/ unk_struct_450 unk_450;\n    /*0x460*/ int m_subSeq;\n    /*0x464*/ u8 (*m_mainLoop)(BTL_MAIN_MODULE);\n    /*0x468*/ u16 heapId;\n    /*0x46A*/ u8 unk46A;\n    /*0x46B*/ u8 m_numClients;\n    /*0x46C*/ u8 m_myClientID;\n    /*0x46D*/ u8 m_myOrgPos;\n    /*0x46E*/ u8 m_ImServer;\n    /*0x46F*/ u8 unk46f;\n    /*0x470*/ u8 m_MultiAIDataSeq;\n    /*0x471*/ u8 m_MultiAIClientNum;\n    /*0x472*/ u8 m_MultiAIClientID;\n    /*0x473*/ u8 m_fCommError : 1;\n    u8 m_fCommErrorMainQuit : 1;\n    u8 m_fWazaEffectEnable : 1;\n    u8 m_fGetMoneyFixed : 1;\n    u8 unk473Flag : 1;\n    u8 m_fBGMFadeOutDisable : 1;\n    u8 m_fLoseMoneyFixed : 1;\n    u8 m_fSoundPushed : 1;\n    /*0x474*/ int unk474;\n    /*0x478*/ struct_unk478 *unk478;\n    /*0x47C*/ int unk47C;\n    /*0x480*/ int unk480;\n    /*0x484*/ u8 unk484;\n} BTL_MAIN_MODULE;\n\ntypedef struct\n{\n    void *ppSrc;\n    void *ppFake;\n\n    u32 exp;\n    u16 monsno;\n} BTL_POKEPARAM;\n\ntypedef struct\n{\n    /*0x0*/ u32 unk0;\n    /*0x4*/ u32 envID;\n    /*0x8*/ u8 weather;\n    /*0x9*/ u8 minute;\n    /*0xA*/ u16 place_id;\n    /*.................*/\n} BTL_FIELD_SITUATION;\n\ntypedef enum\n{\n    BTL_EXPOS_DEFAULT = 0, ///< \u81ea\u5206\u3060\u3051\n\n    BTL_EXPOS_AREA_ENEMY,   ///< \uff08\u653b\u6483\u7bc4\u56f2\u5185\u306e\uff09\u76f8\u624b\u5168\u90e8\n    BTL_EXPOS_AREA_OTHERS,  ///< \uff08\u653b\u6483\u7bc4\u56f2\u5185\u306e\uff09\u81ea\u5206\u4ee5\u5916\u5168\u90e8\n    BTL_EXPOS_AREA_MYTEAM,  ///< \uff08\u653b\u6483\u7bc4\u56f2\u5185\u306e\uff09\u5473\u65b9\u5168\u90e8\n    BTL_EXPOS_AREA_FRIENDS, ///< \uff08\u653b\u6483\u7bc4\u56f2\u5185\u306e\uff09\u81ea\u5206\u4ee5\u5916\u306e\u5473\u65b9\u5168\u90e8\n    BTL_EXPOS_AREA_ALL,     ///< \uff08\u653b\u6483\u7bc4\u56f2\u5185\u306e\uff09\u6575\u30fb\u5473\u65b9\u5168\u90e8\n\n    BTL_EXPOS_FULL_ENEMY,   ///< \uff08\u5168\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\uff09\u76f8\u624b\u30dd\u30b1\u5168\u90e8\n    BTL_EXPOS_FULL_FRIENDS, ///< \uff08\u5168\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\uff09\u81ea\u5206\u4ee5\u5916\u306e\u5473\u65b9\u30dd\u30b1\u5168\u90e8\n    BTL_EXPOS_FULL_ALL,     ///< \uff08\u5168\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\uff09\u30dd\u30b1\u5168\u90e8\n\n    BTL_EXPOS_NEXT_FRIENDS, ///< \uff08\u81ea\u5206\u306e\u96a3\u306e\uff09\u5473\u65b9\u5168\u90e8\n\n    //  BTL_EXPOS_AREA_ENEMY\n\n} BtlExPosType;\n\ntypedef enum\n{\n    BTL_SIDE_1ST,\n    BTL_SIDE_2ND,\n\n    BTL_SIDE_MAX,\n\n} BtlSide_tag;\n\ntypedef u8 BtlPokePos;\n\ntypedef struct\n{\n    u16 numEnemys;\n    u16 numFriends;\n    BtlPokePos enemyPos[3];\n    BtlPokePos friendPos[3];\n} BTL_VALIABLE_ATTACK_AREA;\n\nenum\n{\n\n    BTL_RULE_SINGLE,\n    BTL_RULE_DOUBLE,\n    BTL_RULE_TRIPLE,\n    BTL_RULE_ROTATION,\n    BTL_RULE_BAND,\n    BTL_ROTATION_FRONTPOS_NUM = 1,\n    BTL_ROTATION_BACKPOS_NUM = 2,\n\n    BTL_ROTATION_VISIBLE_POS_NUM = BTL_ROTATION_FRONTPOS_NUM + BTL_ROTATION_BACKPOS_NUM,\n};\n\n#define BTL_SERVERCMD_QUE_SIZE 3000\ntypedef struct\n{\n    u32 writePtr;\n    u32 readPtr;\n    u8 buffer[BTL_SERVERCMD_QUE_SIZE];\n}SCQUE;\n\ntypedef struct\n{\n    void *adapter;\n    BTL_PARTY *party;\n    u8 memberCount;\n    u8 numCoverPos;\n    u8 isLocalClient;\n    u8 myID;\n} SVCL_WORK;\n// sizeof 0xC\n\ntypedef int (*ServerMainProc)(int, int*);\n\ntypedef union\n{\n    u32 raw;\n\n    struct\n    {\n        u32 cmd : 4;\n        u32 param : 28;\n    } gen;\n    struct\n    {\n        u32 cmd : 4;\n        u32 posIdx : 3;\n        u32 memberIdx : 3;\n        u32 depleteFlag : 1;\n    } change;\n    struct\n    {\n        u32 cmd : 4;\n        u32 targetPos : 3;\n        u32 waza : 16;\n        u32 rot_dir : 3;\n        u32 wazaInfoFlag : 1; ///< \u30ef\u30b6\u8aac\u660e\u753b\u9762\n        u32 megaEvoFlag : 1;  ///< \u30e1\u30ac\u9032\u5316\u30d5\u30e9\u30b0\n        u32 _0 : 3;\n    } fight;\n    struct\n    {\n        u32 cmd : 4;\n        u32 dir : 3;\n        u32 _5 : 25;\n    } rotation;\n    struct\n    {\n        u32 cmd : 4;\n        u32 targetIdx : 3;\n        u32 number : 16;\n        u32 param : 8;\n        u32 _1 : 1;\n    } item;\n}BTL_ACTION_PARAM;\n\ntypedef struct\n{\n    /*0x0*/ BTL_ACTION_PARAM param[BTL_CLIENT_MAX][3];\n    /*0xE4*/ u8 count[BTL_CLIENT_MAX];\n} SVCL_ACTION;\n\ntypedef struct\n{\n    u16 clientID;\n    u16 resultCode;\n} BTL_RESULT_CONTEXT;\n\ntypedef struct\n{\n    /*0x0*/ ServerMainProc m_mainProc;\n    /*0x4*/ int m_seq;\n    /*0x8*/ int unk8;\n    /*0xC*/ BTL_MAIN_MODULE *m_mainModule;\n    /*0x10*/ POKECON *m_pokeCon;\n    /*0x14*/ SVCL_WORK m_client[BTL_CLIENT_MAX];\n    /*0x44*/ void *m_flowWork;\n    /*0x48*/ int m_flowResult;\n    /*0x4C*/ int unk4C;\n    /*0x50*/ tinymt32_t m_randContext;\n    /*0x68*/ u8 m_recTool[0x40];\n    /*0xA8*/ BTL_RESULT_CONTEXT m_btlResultContext;\n    /*0xAC*/ int unkAC;\n    /*0xB0*/ EscapeInfo *m_escapeInfo;\n    /*0xB4*/ SVCL_ACTION m_clientAction;\n    /*0xE8*/ u32 unkE8;\n    /*0xEC*/ u8 m_enemyPutPokeID;\n    /*0xED*/ u8 m_quitStep;\n    /*0xEE*/ u16 unkEE;\n    /*0xF0*/ SCQUE m_queBody;\n    /*0xCB0*/ SCQUE *m_que;\n    /*0xCB4*/ u8 unkCB4[BTL_CLIENT_MAX];\n    /*0xCB8*/ u16 unkCB8;\n    /*0xCBA*/ u8 m_changePokeCnt;\n    /*0xCBB*/ u8 unkCBB;\n    /*0xCBC*/ u16 unkCBC;\n    /*0xCBE*/ u8 unkCBE;\n    /*0xCBF*/ u8 unkCBF;\n    /*0xCC0*/ u16 heapId;\n}BTL_SERVER;\n//sizeof 0xCC4\n\n#define EVENT_HANDLER_WORK_ELEMS 7\n#define WORK_TOTALSIZE 500\n#define BTL_POKEID_MAX 24\n\nenum\n{\n    EVENT_WORK_DEPTH = 16,\n    EVENT_WORK_TOTAL_SIZE = 512,\n};\n\ntypedef struct\n{\n    int work[24][EVENT_HANDLER_WORK_ELEMS];\n} ROTATION_HANDLER_WORK_BACKUP;\n\ntypedef struct\n{\n    u16 m_putVoid;          ///< \u300c\u52b9\u679c\u306a\u3057\u300d\u3092\u51fa\u3057\u305f\n    u16 m_putAdvantage;     ///< \u300c\u52b9\u679c\u3070\u3064\u3050\u3093\u300d\u3092\u51fa\u3057\u305f\n    u16 m_putDisadvantage;  ///< \u300c\u52b9\u679c\u3044\u307e\u3044\u3061\u300d\u3092\u51fa\u3057\u305f\n    u16 m_recvVoid;         ///< \u300c\u52b9\u679c\u7121\u3057\u300d\u3092\u53d7\u3051\u305f\n    u16 m_recvAdvantage;    ///< \u300c\u52b9\u679c\u3070\u3064\u3050\u3093\u300d\u3092\u53d7\u3051\u305f\n    u16 m_recvDisadvantage; ///< \u300c\u52b9\u679c\u3044\u307e\u3044\u3061\u300d\u3092\u53d7\u3051\u305f\n} AffCounter;\n//sizeof 0xC\n\ntypedef struct\n{\n    u8 m_workBuffer[WORK_TOTALSIZE];\n}HEManager;\n\ntypedef struct\n{\n    u8 m_work[EVENT_WORK_TOTAL_SIZE];\n    u16 m_size[EVENT_WORK_DEPTH];\n    u32 m_sp;\n} EventWorkStack;\n//sizeof 0x224\n\ntypedef struct\n{\n    u32 m_ptr;\n    struct\n    {\n        u32 turn;\n        u16 wazaID;\n        u8 pokeID;\n        u8 fEffective;\n    } m_record[120];\n}WazaRec;\n// sizeof 0x3C4\n\ntypedef struct\n{\n    u8 cnt;\n    u8 fExpChecked[BTL_POKEID_MAX];\n    u8 deadPokeID[BTL_POKEID_MAX];\n} Unit;\n\ntypedef struct\n{\n    Unit m_turnRecord[4];\n}DeadRec;\n// sizeof 0xC4\n\ntypedef struct\n{\n    u8 fEnable;\n    u8 clientID;\n    u8 existPokeID;\n} State;\n\ntypedef struct\n{\n    State m_state[BTL_POS_MAX];\n    u8 m_lastPosInst[BTL_POS_MAX];\n}PosPoke;\ntypedef struct\n{\n    /*0x0*/BTL_POKEPARAM *bpp;\n    /*0x4*/BTL_ACTION_PARAM action;\n    /*0x8*/u32 priority;\n    /*0xC*/u8 clientID;   ///< \u30af\u30e9\u30a4\u30a2\u30f3\u30c8ID\n    /*0xD*/u8 fDone;      ///< \u51e6\u7406\u7d42\u4e86\u30d5\u30e9\u30b0\n    /*0xE*/u8 fIntrCheck;\n    /*0xF*/u8 unkF;\n} ACTION_ORDER_WORK;\n\ntypedef struct\n{\n    u8 count;\n    u8 clientID[BTL_CLIENT_MAX];\n    u8 fill;\n} CLIENTID_REC;\ntypedef struct\n{\n    BTL_POKEPARAM *m_bpp[BTL_POS_MAX];\n    u16 m_damage[BTL_POS_MAX];\n    u16 m_migawariDamage[BTL_POS_MAX];\n    u8 m_damageType[BTL_POS_MAX];\n    u16 m_sortWork[BTL_POS_MAX];\n    u8 m_count;\n    u8 m_countMax;\n    u8 m_getIdx;\n    u8 m_targetPosCount;\nu16 fill;\n} POKESET;\ntypedef enum\n{\n    RESULT_DEFAULT = 0,       ///< \u305d\u306e\u307e\u307e\u7d9a\u884c\n    RESULT_POKE_CHANGE,       ///< \u30bf\u30fc\u30f3\u9014\u4e2d\u306e\u30dd\u30b1\u30e2\u30f3\u5165\u308c\u66ff\u3048\u30ea\u30af\u30a8\u30b9\u30c8\n    RESULT_POKE_COVER,        ///< \u7a7a\u304d\u4f4d\u7f6e\u306b\u30dd\u30b1\u30e2\u30f3\u3092\u6295\u5165\u3059\u308b\u30ea\u30af\u30a8\u30b9\u30c8\n    RESULT_LEVELUP,           ///< \u5ba0\u7269\u5347\u7ea7\n    RESULT_BTL_QUIT_SHOWDOWN, ///< \u30d0\u30c8\u30eb\u7d42\u4e86\uff08\u6c7a\u7740\uff09\n    RESULT_BTL_QUIT_ESCAPE,   ///< \u30d0\u30c8\u30eb\u7d42\u4e86\uff08\u9003\u3052\uff09\n    RESULT_BTL_QUIT_CAPTURE,  ///< \u30d0\u30c8\u30eb\u7d42\u4e86\uff08\u30dd\u30b1\u30e2\u30f3\u6355\u7372\uff09\n} Result;\n\n\ntypedef struct\n{\n    u16 wazaID;\n    u16 orgWazaID; ///< \u6d3e\u751f\u5143\u306e\u30ef\u30b6ID\n    u8 userType;\n    u8 damageType;\n    u8 wazaType;\n    u8 targetType;\n    int wazaPri;\n    int waht;\n    union\n    {\n        u32 flags;\n\n        struct\n        {\n            u32 fMagicCoat : 1; ///< \u30de\u30b8\u30c3\u30af\u30b3\u30fc\u30c8\u51e6\u7406\u4e2d\n            u32 fYokodori : 1;  ///< \u3088\u3053\u3069\u308a\u51e6\u7406\u4e2d\n            u32 fReqWaza : 1;   ///< \u6d3e\u751f\u30ef\u30b6\u51e6\u7406\u4e2d\n            u32 _padding : 29;\n        };\n    };\n}WAZAPARAM;\n\ntypedef struct\n{\n\n    u16 ID;         ///< \u6587\u5b57\u5217ID\n    u16 type : 7;   ///< \u6587\u5b57\u5217\u30bf\u30a4\u30d7\uff08 BtlStrType  (btl_str.h) )\n    u16 argCnt : 7; ///< \u5f15\u6570\u306e\u6570\n    u16 fSEAdd : 1; ///< \u5f15\u6570\u7d42\u7aef\u306bSE\u30ca\u30f3\u30d0\u30fc\u683c\u7d0d\n    u16 fFailMsg : 1;\n\n    int args[8]; ///< \u5f15\u6570\n\n} BTL_HANDEX_STR_PARAMS;\n\n\ntypedef struct\n{\n    u16 effectWazaID; ///<\n    u8 attackerPos;      ///< \u767a\u52d5\u958b\u59cb\u4f4d\u7f6e\n    u8 targetPos;        ///< \u5bfe\u8c61\u4f4d\u7f6e\uff08\u4f4d\u7f6e\u304c\u660e\u78ba\u3067\u306a\u3044\u30ef\u30b6\u306f BTL_POS_NULL \uff09\n    u8 effectIndex;      ///< \u30a8\u30d5\u30a7\u30af\u30c8Index\n    u8 fEnable : 1;      ///< \u767a\u52d5\u78ba\u5b9a\u30d5\u30e9\u30b0\n    u8 fDone : 1;        ///< \u767a\u52d5\u78ba\u5b9a\u30d5\u30e9\u30b0\n    u8 _pad : 6;\n\n    union\n    {\n        u32 Raw;\n        struct\n        {\n            u32 pokeCnt : 5; ///< \u30b5\u30d6\u6f14\u51fa\uff08\u30ef\u30b6\u30a8\u30d5\u30a7\u30af\u30c8\u524d\u306e\u6728\u306e\u5b9f\u6f14\u51fa\uff09\u30dd\u30b1\u6570\n            u32 pokeID_1 : 5;\n            u32 pokeID_2 : 5;\n            u32 pokeID_3 : 5;\n            u32 pokeID_4 : 5;\n            u32 pokeID_5 : 5;\n            u32 pad : 2;\n        };\n    } subEff;\n}WAZAEFF_CTRL;\n\n/**\n *  \u30ef\u30b6\u4e57\u3063\u53d6\u308a\u30d1\u30e9\u30e1\u30fc\u30bf\n */\ntypedef struct\n{\n    u8 robberCount;               ///< \u4e57\u3063\u53d6\u308b\u30dd\u30b1\u30e2\u30f3\u6570\n    u8 robberPokeID[BTL_POS_MAX]; ///< \u4e57\u3063\u53d6\u308a\u5074\u30dd\u30b1\u30e2\u30f3ID\n    u8 targetPos[BTL_POS_MAX];\n    u8 targetPokeID[BTL_POS_MAX];\n} WAZA_ROB_PARAM;\n\ntypedef struct\n{\n    /*0x0*/ BTL_SERVER *m_server;\n    /*0x4*/ BTL_MAIN_MODULE *m_mainModule;\n    /*0x8*/ POKECON *m_pokeCon;\n    /*0xC*/ SCQUE *m_que;\n    /*0x10*/ int m_turnCount;\n    /*0x14*/ int m_flowResult;\n    /*0x18*/ int unk18;\n    /*0x1C*/ WazaRec m_wazaRec;\n    /*0x3E0*/ DeadRec m_deadRec;\n    /*0x4A4*/ int m_fieldStatus;\n    /*0x4A8*/ WAZAEFF_CTRL *m_wazaEffCtrl;\n    /*0x4AC*/ void *m_hitCheckParam;\n    /*0x4B0*/ WAZA_ROB_PARAM *m_magicCoatParam;\n    /*0x4B4*/ u8 unk4A8[4];\n    /*0x4B8*/ EscapeInfo m_escInfo;\n    /*0x4C0*/ u8 unk4C0[0xE];\n    /*0x4CE*/ CLIENTID_REC m_clientIDRec;\n    /*0x4D4*/ ROTATION_HANDLER_WORK_BACKUP m_handlerWorkBackup;\n    /*0x774*/ u32 m_simulationCounter;\n    /*0x778*/ u32 m_wazaRankEffSerial;\n    /*0x77C*/ u8 m_cmdBuildStep;\n    /*0x77D*/ u8 m_actOrderStep;\n    /*0x77E*/ u8 m_turnCheckStep;\n    /*0x77F*/ u8 m_defaultTargetPos;\n    /*0x780*/ u16 heapId;\n    /*0x782*/ u8 m_numActOrder;\n    /*0x783*/ u8 m_numEndActOrder;\n    /*0x784*/ u8 m_getPokePos;\n    /*0x785*/ u8 unk785;\n    /*0x786*/ u8 m_nigeruCount;\n    /*0x787*/ u8 m_wazaEffIdx;\n    /*0x788*/ u8 m_MemberOutIntrPokeCount;\n    /*0x789*/ u8 m_thruDeadMsgPokeID;\n    /*0x78A*/ u8 m_fMemberOutIntr : 1;\n                u8 m_fWinBGMPlayWild : 1;\n                u8 m_fEscMsgDisped : 1;\n                u8 m_fMemberChangeReserve : 1;\n                u8 m_fWazaFailMsgDisped : 1;\n                u8 m_fKaifukuFujiMsgDisped : 1;\n                u8 unkFlag6 : 1;\n    /*0x78B*/ u8 m_MemberOutIntrPokeID[BTL_POS_MAX];\n    /*0x791*/ u8 unk791[0x18];\n    /*0x7A9*/ u8 unk7A9[24];\n    /*0x7C1*/ u8 m_pokeInFlag[24];\n    /*0x7D9*/ u8 m_memberChangeCount[BTL_CLIENT_MAX];\n    /*0x7DD*/ u8 unk7DD[0x3];\n    /*0x7E0*/ ACTION_ORDER_WORK m_actOrder[2 * 3];//\u4e0d\u786e\u5b9a\u6570\u91cf\n    /*0x840*/ ACTION_ORDER_WORK m_actOrderTmp;\n    /*0x850*/ void *m_psetTargetOrg;\n    /*0x854*/ void *m_psetTarget;\n    /*0x858*/ u8 unk858[12];\n    /*0x864*/ int m_psetRobTarget;\n    /*0x868*/ u8 unk868[0x1200];\n    /*0x1A68*/ POKESET m_pokesetMemberInProc;\n    /*0x1AB0*/ WAZAPARAM *m_wazaParam;\n    /*0x1AB4*/ WAZAPARAM *m_wazaParamOrg;\n    /*0x1AB8*/ PosPoke m_posPoke;\n    /*0x1AD0*/ u8 unk1AD0[0x14];\n    /*0x1AE4*/ BTL_HANDEX_STR_PARAMS m_strParam;\n    /*0x1B08*/ u8 unk1B08[0x4C];\n    /*0x1B54*/ EventWorkStack m_eventWork;\n    /*0x1D78*/ HEManager m_HEManager;\n    /*0x1F6C*/ u8 unk1F6C[0xC];\n    /*0x1F78*/ u16 m_prevExeWaza;\n    /*0x1F7A*/ u16 unk1F7A;\n    /*0x1F7C*/ u32 m_currentSabotageType;\n    /*0x1F80*/ AffCounter m_affCounter;\n    /*0x1F8C*/ u8 unk1F8C;\n    /*0x1F8D*/ u8 unk1F8D[0x5F];\n    /*0x1FEC*/ u8 m_flowFlags[4];\n    /*0x1FF0*/ u8 m_handlerTmpWork[320];\n\n} ServerFlow;\n// sizeof 0x2134\n\ntypedef enum\n{\n    BTL_ACTION_NULL = 0, ///< \u4f55\u3082\u3057\u306a\u3044\uff08\u76f8\u624b\u306e\u30dd\u30b1\u30e2\u30f3\u9078\u629e\u5f85\u3061\u4e2d\u306a\u3069\uff09\n\n    BTL_ACTION_FIGHT,\n    BTL_ACTION_ITEM,\n    BTL_ACTION_CHANGE,\n    BTL_ACTION_ESCAPE,\n    BTL_ACTION_MOVE,\n    BTL_ACTION_ROTATION,\n    BTL_ACTION_SKIP, ///< \u53cd\u52d5\u306a\u3069\u3067\u52d5\u3051\u306a\u3044\n\n    BTL_ACTION_RECPLAY_TIMEOVER, ///< \u9332\u753b\u30c7\u30fc\u30bf\u306e\u6642\u9593\u5236\u9650\u306b\u3088\u308b\u7d42\u4e86\n    BTL_ACTION_RECPLAY_ERROR,\n\n} BtlAction;\nenum WazaSick\n{\n    WAZASICK_NULL = 0,\n\n    // \u4ee5\u4e0b\u3001\u30de\u30d2\uff5e\u3069\u304f\u306f PokemonParam \u304b\u3089\u3082\u53c2\u7167\u3055\u308c\u3066\u3044\u308b\u3002\u5024\u304a\u3088\u3073\u4e26\u3073\u9806\u306f\u5909\u66f4\u3057\u306a\u3044\u3053\u3068\uff01\n    WAZASICK_MAHI,\n    WAZASICK_NEMURI,\n    WAZASICK_KOORI,\n    WAZASICK_YAKEDO,\n    WAZASICK_DOKU,\n\n    WAZASICK_KONRAN,\n    WAZASICK_MEROMERO,\n\n    WAZASICK_BIND,\n    WAZASICK_AKUMU,\n    WAZASICK_NOROI,\n    WAZASICK_TYOUHATSU,\n    WAZASICK_ICHAMON,\n    WAZASICK_KANASIBARI,\n    WAZASICK_AKUBI,\n    WAZASICK_KAIHUKUHUUJI,\n    WAZASICK_IEKI,        ///< \u3068\u304f\u305b\u3044\u7121\u52b9\u5316\n    WAZASICK_MIYABURU,    ///< \u307f\u3084\u3076\u3089\u308c\u3066\u76f8\u6027\u30bc\u30ed\u3067\u3082\u7b49\u500d\u3067\u6bb4\u3089\u308c\u308b\uff06\u56de\u907f\u7387\u4e0a\u6607\u304c\u7121\u52b9\n    WAZASICK_YADORIGI,    ///< \u3084\u3069\u308a\u304e\u306e\u305f\u306d\n    WAZASICK_SASIOSAE,    ///< \u3055\u3057\u304a\u3055\u3048\n    WAZASICK_HOROBINOUTA, ///< \u307b\u308d\u3073\u306e\u3046\u305f\n    WAZASICK_NEWOHARU,    ///< \u306d\u3092\u306f\u308b\n    WAZASICK_TOOSENBOU,   ///< \u306b\u3052\u308b\u30fb\u3044\u308c\u304b\u3048\u304c\u51fa\u6765\u306a\u3044\n    WAZASICK_ENCORE,      ///< \u76f4\u524d\u306b\u4f7f\u3063\u305f\u30ef\u30b6\u3057\u304b\u51fa\u305b\u306a\u3044\n    WAZASICK_HANEYASUME,  ///< \u306f\u306d\u3084\u3059\u3081\uff08\u98db\u884c\u30bf\u30a4\u30d7->\u7121\u5c5e\u6027\u5316\uff09\n\n    WAZASICK_WAZALOCK,       ///< \u76f4\u524d\u306b\u4f7f\u3063\u305f\u30ef\u30b6\u3057\u304b\u51fa\u305b\u306a\u3044\u4e0a\u3001\u884c\u52d5\u3082\u9078\u629e\u3067\u304d\u306a\u3044\n    WAZASICK_TAMELOCK,       ///< \u76f4\u524d\u306b\u4f7f\u3063\u305f\u30ef\u30b6\u3057\u304b\u51fa\u305b\u306a\u3044\u4e0a\u3001\u884c\u52d5\u3082\u9078\u629e\u3067\u304d\u306a\u3044\uff08\u6e9c\u3081\u30ef\u30b6\u5c02\u7528\uff09\n    WAZASICK_KODAWARI,       ///< \u6700\u521d\u306b\u4f7f\u3063\u305f\u30ef\u30b6\u3057\u304b\u9078\u629e\u3067\u304d\u306a\u3044\n    WAZASICK_MUSTHIT,        ///< \u30ef\u30b6\u5fc5\u4e2d\u72b6\u614b\n    WAZASICK_MUSTHIT_TARGET, ///< \u7279\u5b9a\u76f8\u624b\u306b\u5bfe\u3057\u3066\u306e\u307f\u5fc5\u4e2d\u72b6\u614b\n    WAZASICK_FLYING,         ///< \u7535\u78c1\u60ac\u6d6e Magnet Rise\n    WAZASICK_FLYING_CANCEL,  ///< \u91cd\u529b\u72b6\u6001\n    WAZASICK_TELEKINESIS,    ///< \u610f\u5ff5\u79fb\u7269 Telekinesis\n    WAZASICK_FREEFALL,       ///< \u81ea\u7531\u843d\u4f53 Sky Drop\n    WAZASICK_HITRATIO_UP,    ///< \u547d\u4e2d\u7387\u4e0a\u6607\n    WAZASICK_AQUARING,       ///< \u6c34\u6d41\u73af Aqua Ring\n    WAZASICK_FORCE_WAZATYPE, ///< \u653b\u6483\u30ef\u30b6\u30bf\u30a4\u30d7\u5f37\u5236\u66f8\u304d\u63db\u3048\uff08\u3068\u308a\u3042\u3048\u305a\u201c\u305d\u3046\u3067\u3093\u201d\u306b\u4f7f\u7528\uff09\n    WAZASICK_FUNJIN,         ///< \u3075\u3093\u3058\u3093\n\n    WAZASICK_MAX,\n    WAZASICK_STD_MAX = WAZASICK_MEROMERO + 1, ///< \u6a19\u6e96\u72b6\u614b\u7570\u5e38\u306e\u6570\uff08\u30e1\u30ed\u30e1\u30ed\u307e\u3067\uff09\n\n    WAZASICK_SPECIAL_CODE = 0xffff, ///< \u7279\u6b8a\u51e6\u7406\u30b3\u30fc\u30c9\n};\nenum\n{\n    BTL_EVENT_ACTPROC_START = 1,\n    BTL_EVENT_ACTPROC_END = 2,\n    BTL_EVENT_FACTOR_TOKUSEI = 4,\n    BTL_EVENT_SKIP_NIGERU_CALC = 11,\n    BTL_EVENT_NIGERU_FORBID = 12,\n    BTL_EVENT_NIGERU_EXMSG = 13,\n    BTL_EVENT_CHECK_INEMURI = 14,\n    BTL_EVENT_GET_WAZA_PRI = 17,\n    BTL_EVENT_CALC_AGILITY = 19,\n    BTL_EVENT_WAZA_CALL_DECIDE = 34,\n    BTL_EVENT_WAZA_EXE_DECIDE = 35,\n    BTL_EVENT_MEMBER_OUT_FIXED = 84,\n    BTL_EVENT_MEMBER_IN = 85,\n    BTL_EVENT_MEMBER_IN_PREV = 86,\n    BTL_EVENT_MEMBER_IN_COMP = 87,\n    BTL_EVENT_ROTATION_IN = 88,\n    BTL_EVENT_AFTER_MOVE = 164,\n};", "diff_flags": [], "diff_label": "ovy167_21a2194", "libraries": []}