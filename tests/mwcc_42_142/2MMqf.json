{"compiler": "mwcc_42_142", "compiler_flags": "-nodefaults -proc gecko -str pool,readonly,reuse -enum int -fp hard -RTTI on -ipa file -enc SJIS -inline deferred -lang=c++ -str reuse,pool,readonly -O4,s", "source_code": "inline u32 rotr(u32 val, u32 shift){\n    return (val >> shift) | (val << (32 - shift));\n}\n\n//Rotate each group of 32 bits by 2 to the right?\n //weird stuff\n//aaaaaaaa bbbbbbbb cccccccc dddddddd -> ddaaaaaa aabbbbbb bbcccccc ccdddddd\n//func_804A1630\nvoid encodeScrambleSub(u8* array, int arg1) {\n    if(arg1 >= 0){\n    // these changes are definitely not right, will rework later\n        for(int i = (arg1 + 3) >> 2; i > 0; --i){\n            u8 byte0 = array[0];\n            u8 byte1 = array[1];\n            u8 byte2 = array[2];\n            u8 byte3 = array[3];\n        \n            array[0] = (byte0 >> 2) | ((byte3 & 3) << 6);\n            array[1] = (byte1 >> 2) | ((byte0 & 3) << 6);\n            array[2] = (byte2 >> 2) | ((byte1 & 3) << 6);\n            array[3] = (byte3 >> 2) | ((byte2 & 3) << 6);\n            array += 4;\n        }\n    }\n}\n", "context": "// r2 is  8051E360\n// r13 is 8051C680\n\ntypedef int BOOL;\n\ntypedef signed char s8;\ntypedef signed short s16;\ntypedef signed long s32;\ntypedef signed long long s64;\ntypedef unsigned char u8;\ntypedef unsigned short u16;\ntypedef unsigned int uint;\ntypedef unsigned long u32;\ntypedef unsigned long size_t;\ntypedef unsigned long long u64;\n\ntypedef volatile u8 vu8;\ntypedef volatile u16 vu16;\ntypedef volatile u32 vu32;\ntypedef volatile u64 vu64;\ntypedef volatile s8 vs8;\ntypedef volatile s16 vs16;\ntypedef volatile s32 vs32;\ntypedef volatile s64 vs64;\n\ntypedef float f32;\ntypedef double f64;\ntypedef volatile f32 vf32;\ntypedef volatile f64 vf64;\n\ntypedef u32 unknown;\n\n// Basic defines to allow newer-like C++ code to be written\n#define TRUE  1\n#define FALSE 0\n#define NULL  ((void*)0)\n#define nullptr 0\n\n\n\nstruct SBOpcode{\n    const char* name; //0x0\n    s16 unk4;\n    s16 unk6;\n};\n\n\ninline int readInt(u8* array, int offset){\n    return *(int*)(array + offset);\n}\ninline u32 readUInt(u8* array, int offset){\n    return *(u32*)(array + offset);\n}\ninline void writeInt(u8* array, int offset, int val){\n    *(int*)(array + offset) = val;\n}\ninline void writeUInt(u8* array, int offset, u32 val){\n    *(u32*)(array + offset) = val;\n}\n\nvoid func_804A1630(u8* array, u32 arg1);", "diff_flags": [], "diff_label": "func_804A1630", "libraries": []}