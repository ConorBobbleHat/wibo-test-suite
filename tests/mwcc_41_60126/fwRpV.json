{"compiler": "mwcc_41_60126", "compiler_flags": "-Cpp_exceptions off -stdinc -nodefaults -fp hard -lang=c++ -inline auto,level=2 -ipa file -O4,s -rtti off -sdata 4 -sdata2 4 -enum int", "source_code": "void SpkSpeakerCtrl::updateSpeaker(OSAlarm *, OSContext *) {\n    for (s32 i = 0; i < 4; i++) {\n        if (sMixingBuffer != nullptr) {\n            SpeakerInfo& inf = getSpeakerInfo(i);\n\n            if (inf._1) {\n                if (!inf._23) {\n                    if (sMixingBuffer->update(i)) {\n                        bool v5 = true;\n\n                        if (inf._1 && sMixingBuffer != nullptr) {\n                            BOOL en = OSDisableInterrupts();\n\n                            if (!WPADCanSendStreamData(i)) {\n                                \n                                OSRestoreInterrupts(en);\n                            }\n                            else {\n                                if (inf._22) {\n                                    v5 = false;\n                                    inf._22 = 0;\n                                }\n\n                                const s16* samples = sMixingBuffer->getSamples(i);\n                                u8 data[16];\n                                WENCGetEncodeData(&inf._2, v5, samples, 40, data);\n                                WPADSendStreamData(i, data, 0x14);\n                                OSRestoreInterrupts(en);\n                            }\n                        }\n                    }\n                    else {\n                        inf._22 = 1;\n                    }\n                }\n            }\n        }\n    }\n}", "context": "typedef signed char         s8;\ntypedef signed short        s16;\ntypedef signed long         s32;\ntypedef signed long long    s64;\ntypedef unsigned char       u8;\ntypedef unsigned short      u16;\ntypedef unsigned long       u32;\ntypedef unsigned long long  u64;\ntypedef int                 BOOL;\ntypedef float               f32;\ntypedef double              f64;\n\n#ifndef nullptr\n#ifdef __cplusplus\n#define nullptr             0\n#endif\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\ntypedef u32 OSTick;\ntypedef s64 OSTime;\n    \ntypedef struct {\n    u8 data[32];\n} WENCInfo;\n\ntypedef struct OSContext {\n    u32 gpr[32];\n    u32 cr;\n    u32 lr;\n    u32 ctr;\n    u32 xer;\n    f64 fpr[32];\n    u32 fpscr_pad;\n    u32 fpscr;\n    u32 srr0;\n    u32 srr1;\n    u16 mode;\n    u16 state;\n    u32 gqr[8];\n    u32 psf_pad;\n    f64 psf[32];\n} OSContext;\n\ntypedef struct OSAlarm OSAlarm;\ntypedef void (*OSAlarmHandler)(OSAlarm *, OSContext *);\n\nstruct OSAlarm {\n    OSAlarmHandler handler;\n    u32 tag;\n    OSTime fire;\n    OSAlarm* prev;\n    OSAlarm* next;\n    OSTime period;\n    OSTime start;\n    void* userData;\n};\n\n\n\ns32 WENCGetEncodeData(WENCInfo *, u32, const s16 *, s32, u8 *);\n\nBOOL OSDisableInterrupts(void) __attribute__((noinline));\nBOOL OSEnableInterrupts(void) __attribute__((noinline));\nBOOL OSRestoreInterrupts(BOOL) __attribute__((noinline));\n\nBOOL WPADCanSendStreamData(s32);\ns32 WPADSendStreamData(s32, void *, u16);\n\n#ifdef __cplusplus\n}\n#endif\n\nclass JKRHeap;\n\nclass SpkMixingBuffer {\npublic:\n    SpkMixingBuffer(JKRHeap *);\n\n    void mix(s32, s16 *, s32, f32, s32);\n    const s16* getSamples(s32) const;\n    bool update(s32);\n\n    const s16* mSamples[4];\n};\n\nstruct SpeakerInfo {\n    u8 _0;\n    u8 _1;\n    WENCInfo _2;\n    u8 _22;\n    u8 _23;\n    u32 _24;\n    u32 _28;\n    s32 _2C;\n    s32 _30;\n    u32 _34;\n    u32 _38;\n    u32 _3C;\n};\n\nclass SpkSpeakerCtrl {\npublic:\n    static void setMixingBuffer(SpkMixingBuffer *);\n    static void setup();\n    static void connect(s32);\n    static void disconnect(s32);\n    static void setSpeakerOn(s32);\n    static void setSpeakerOnCallback(s32, s32);\n    static void setSpeakerPlay(s32);\n    static void startPlayCallback(s32, s32);\n    static void setSpeakerOff(s32);\n    static void retryConnection(s32);\n    static void reconnect(s32);\n    static void framework();\n    static void reconnectProcess(s32);\n    static void initReconnect(s32);\n    static void continuousUsingProcess(s32);\n    static void updateSpeaker(OSAlarm *, OSContext *);\n\n    static bool isEnable(s32);\n    static void extensionProcess(s32, s32);\n    static f32 getDeviceVolume(s32);\n\n    static SpkMixingBuffer* sMixingBuffer;\n    static SpeakerInfo sSpeakerInfo[4];\n\n    static inline SpeakerInfo& getSpeakerInfo(s32 idx) {\n        return sSpeakerInfo[idx];\n    }\n};", "diff_flags": [], "diff_label": "func_80394414", "libraries": []}