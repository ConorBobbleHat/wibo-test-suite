{"compiler": "mwcc_43_213", "compiler_flags": "-proc gekko -str pool,readonly,reuse -RTTI on -sym on -lang=c++  -common on -enum int -O4,p -func_align 4 -char signed -ipa file -str reuse,pool,readonly -fp_contract on -inline on -fp hard -enc SJIS", "source_code": "void cal_csum_(u8 *src, int len, unsigned int *saveData) {\n    unsigned int sum1 = 0xa93d15ef;\n    unsigned int sum2 = 0x5a49ffc3;\n\n    for(int i = 8; i < len; i++)\n    {\n        sum1 += src[i];\n        sum2 ^= sum1;\n    }\n\n    *saveData++ = sum1;\n    *saveData++ = sum2;\n}\n", "context": "typedef signed char s8;\ntypedef signed short s16;\ntypedef signed long s32;\ntypedef signed long long s64;\ntypedef unsigned char u8;\ntypedef unsigned short u16;\ntypedef unsigned long u32;\ntypedef unsigned long size_t;\ntypedef unsigned long long u64;\n\ntypedef unsigned short ushort;\ntypedef unsigned int uint;\n\ntypedef volatile u8 vu8;\ntypedef volatile u16 vu16;\ntypedef volatile u32 vu32;\ntypedef volatile u64 vu64;\ntypedef volatile s8 vs8;\ntypedef volatile s16 vs16;\ntypedef volatile s32 vs32;\ntypedef volatile s64 vs64;\n\ntypedef float f32;\ntypedef double f64;\ntypedef volatile f32 vf32;\ntypedef volatile f64 vf64;\n\n#ifndef __cplusplus\ntypedef unsigned short wchar_t;\ntypedef wchar_t wint_t;\n#endif\n\ntypedef u32 unknown;\n\ntypedef int UNKWORD;\ntypedef void UNKTYPE;\n\ntypedef int BOOL;\n\n#define TRUE 1\n#define FALSE 0\n\n#ifndef NULL\n#ifdef __cplusplus\n#define NULL 0\n#else // C\n#define NULL ((void*)0)\n#endif\n#endif\n\n// Necesary for CW\n#if __cplusplus < 201103L && !defined(_WIN32)\n#define override\n#define noexcept\n#define nullptr NULL\n#endif\n\n    #define MAX(x, y) ((x) > (y) ? (x) : (y))\n#define MIN(x, y) ((x) < (y) ? (x) : (y))\n\n#define CLAMP(low, high, x)                                                    \\\n    ((x) > (high) ? (high) : ((x) < (low) ? (low) : (x)))\n\n// True if X is aligned to N bytes, else false\n#define IS_ALIGNED(X, N) (((X) & ((N)-1)) == 0)\n\n#define ROUND_UP(x, align) (((x) + (align)-1) & (-(align)))\n#define ROUND_UP_PTR(x, align)                                                 \\\n    ((void*)((((u32)(x)) + (align)-1) & (~((align)-1))))\n\n#define ROUND_DOWN(x, align) ((x) & (-(align)))\n#define ROUND_DOWN_PTR(x, align) ((void*)(((u32)(x)) & (~((align)-1))))\n\n#define ARRAY_LENGTH(x) (sizeof((x)) / sizeof((x)[0]))\n\n#define CLEAR_PATH(x) __memclr((x), sizeof((x)))\n\n#define ALIGN(x) __attribute__((aligned(x)))\n#define DECL_SECTION(x) __declspec(section x)\n#define DECL_WEAK __declspec(weak)\n#define DONT_INLINE __attribute__((never_inline))\n\n// Codewarrior tricks for matching decomp\n// (Functions are given prototypes for -requireprotos)\n#ifdef __MWERKS__\n// Force BSS order\n#define CW_FORCE_BSS(module, ...)                                              \\\n    void fake_function(...);                                                   \\\n    void FORCE_BSS##module##x(void);                                           \\\n    void FORCE_BSS##module##x(void) { fake_function(__VA_ARGS__); }\n// Force strings into pool\n#define CW_FORCE_STRINGS(module, ...)                                          \\\n    void fake_function(...);                                                   \\\n    void FORCE_STRINGS##module(void);                                          \\\n    void FORCE_STRINGS##module(void) { fake_function(__VA_ARGS__); }\n#else\n#define CW_FORCE_BSS(module, ...)\n#define CW_FORCE_STRINGS(module, ...)\n#endif\n\n// For VSCode\n#ifdef __INTELLISENSE__\n#define asm\n#define __attribute__(x)\n#define __declspec(x)\n#endif", "diff_flags": [], "diff_label": "cal_csum__FPUciPUi", "libraries": []}