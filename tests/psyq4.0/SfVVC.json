{"compiler": "psyq4.0", "compiler_flags": "-undef -Wall -fno-builtin -lang-c tools/sotn-str.py process --from-code=UTF-8 --to-code=Shift-JIS -G0 -w -O2 -funsigned-char -fpeephole -ffunction-cse -fpcc-struct-return -fcommon -fverbose-asm -msoft-float -g -quiet -mcpu=3000 -fgnu-linker -mgas -gcoff tools/maspsx/maspsx.py --no-macro-inc --expand-div -march=r3000 -mtune=r3000 -no-pad-sections -O1 -G0", "source_code": "/*\nDecompilation failure:\n\nSyntax error when parsing C context.\nbefore: ? at line 3353, column 35\n\n      void func_801B9B7C(DECENV*, ?, ?, ?, s32);\n*/\n\nvoid func_801B9C80(void) {\n    // ...\n}\n", "context": "typedef enum {\n    PLAYER_CHARACTER,\n    UNK_ENTITY_1,\n    UNK_ENTITY_2,\n    UNK_ENTITY_3,\n    UNK_ENTITY_4,\n    UNK_ENTITY_5,\n    UNK_ENTITY_6,\n    UNK_ENTITY_7,\n    UNK_ENTITY_8,\n    E_WEAPON = 0x10,\n    UNK_ENTITY_13 = 0x13,\n    UNK_ENTITY_20 = 0x20,\n    UNK_ENTITY_51 = 0x51,\n    UNK_ENTITY_100 = 0x100\n} EntityTypes;\ntypedef char int8_t;\ntypedef short int16_t;\ntypedef int int32_t;\ntypedef long long int64_t;\ntypedef unsigned char uint8_t;\ntypedef unsigned short uint16_t;\ntypedef unsigned int uint32_t;\ntypedef unsigned long long uint64_t;\ntypedef unsigned char u_char;\ntypedef unsigned short u_short;\ntypedef unsigned int u_long;\ntypedef unsigned int size_t;\ntypedef signed char s8;\ntypedef signed short s16;\ntypedef signed int s32;\ntypedef signed long long s64;\ntypedef unsigned char u8;\ntypedef unsigned short u16;\ntypedef unsigned int u32;\ntypedef unsigned long long u64;\ntypedef signed char byte;\ntypedef enum { false, true } bool;\nint sprintf(char* dst, const char* fmt, ...);\ntypedef enum {\n    LOG_LEVEL_D,\n    LOG_LEVEL_I,\n    LOG_LEVEL_W,\n    LOG_LEVEL_E,\n} LOG_LEVEL;\nstruct DIRENTRY {\n               char name[20];\n               long attr;\n               long size;\n               struct DIRENTRY* next;\n              long head;\n               char system[4];\n};\nvoid EnterCriticalSection(void);\nvoid ExitCriticalSection(void);\nlong _card_info(long chan);\nlong _card_clear(long chan);\nlong _card_load(long chan);\nvoid InitCARD(long val);\nlong StartCARD(void);\nstruct EXEC {\n    unsigned long pc0;\n    unsigned long gp0;\n    unsigned long t_addr;\n    unsigned long t_size;\n    unsigned long d_addr;\n    unsigned long d_size;\n    unsigned long b_addr;\n    unsigned long b_size;\n    unsigned long s_addr;\n    unsigned long s_size;\n    unsigned long sp, fp, gp, ret, base;\n};\nextern void InitHeap(unsigned long*, unsigned long);\nextern long Load(char*, struct EXEC*);\nextern long Exec(struct EXEC*, long, char**);\nextern void _bu_init(void);\nextern long open(char* devname,\n                 int flag\n);\nextern long lseek(long, long, long);\nextern long read(long fd,\n                 void* buf,\n                 long n\n);\nextern long write(long, void*, long);\nextern int close(int fd\n);\nextern long format(char* fs\n);\nextern struct DIRENTRY* firstfile(char*, struct DIRENTRY*);\nextern struct DIRENTRY* nextfile(struct DIRENTRY*);\nextern long erase(char*);\nextern long Krom2RawAdd(unsigned long);\nextern void ChangeClearPAD(long);\nextern void StopPAD(void);\nint PAD_init(s32 , s32* );\nextern void FlushCache(void);\nextern void DeliverEvent(unsigned long, unsigned long);\nextern long TestEvent(unsigned long event\n);\nextern long OpenEvent(unsigned long, long, long, long (*func)());\nextern long EnableEvent(long);\nextern void _96_remove(void);\nextern long SetRCnt(unsigned long, unsigned short, long);\nextern long StartRCnt(unsigned long);\nextern void exit();\nextern void puts(char*);\nextern char* strcat(char*, char*);\nextern char* strcpy(char*, char*);\nextern int strlen(char*);\nextern void* memcpy(unsigned char*, unsigned char*, int);\nextern void* memset(unsigned char*, unsigned char, int);\nextern int rand(void);\nextern void srand(unsigned int);\nextern void* malloc(size_t\n);\nextern void free(void*);\nint printf(char*, ...);\ntypedef struct {\n    u_char minute;\n    u_char second;\n    u_char sector;\n    u_char track;\n} CdlLOC;\ntypedef struct {\n    u_char val0;\n    u_char val1;\n    u_char val2;\n    u_char val3;\n} CdlATV;\ntypedef struct {\n    u_short id;\n    u_short type;\n    u_short secCount;\n    u_short nSectors;\n    u_long frameCount;\n    u_long frameSize;\n    u_short width;\n    u_short height;\n    u_long dummy1;\n    u_long dummy2;\n    CdlLOC loc;\n} StHEADER;\ntypedef struct {\n    CdlLOC pos;\n    u_long size;\n    char name[16];\n} CdlFILE;\ntypedef void (*CdlCB)(u_char, u_char*);\nvoid def_cbsync(u_char intr, u_char* result);\nvoid def_cbready(u_char intr, u_char* result);\nvoid def_cbread(u_char intr, u_char* result);\nint CdInit(void);\nint CdStatus(void);\nint CdMode(void);\nint CdLastCom(void);\nint CdReset(int mode);\nvoid CdFlush(void);\nint CdSetDebug(int level);\nchar* CdComstr(u_char com);\nchar* CdIntstr(u_char intr);\nint CdSync(int mode, u_char* result);\nint CdReady(int mode, u_char* result);\nCdlCB CdSyncCallback(CdlCB func);\nCdlCB CdReadyCallback(CdlCB func);\nint CdControl(u_char com, u_char* param, u_char* result);\nint CdControlB(u_char com, u_char* param, u_char* result);\nint CdControlF(u_char com, u_char* param);\nint CdMix(CdlATV* vol\n);\nint CdGetSector(void* madr, int size);\nvoid(*CdDataCallback(void (*func)()));\nCdlLOC* CdIntToPos(int i, CdlLOC* p);\nint CdPosToInt(CdlLOC* p);\nCdlFILE* CdSearchFile(CdlFILE* fp, char* name);\nint CdRead(int sectors, u_long* buf, int mode);\nint CdReadSync(int mode, u_char* result);\nCdlCB CdReadCallback(CdlCB func);\nint CdRead2(long mode);\nvoid StClearRing(void);\nvoid StSetStream(u_long mode, u_long start_frame, u_long end_frame,\n                 void (*func1)(), void (*func2)());\nvoid StSetMask(u_long mask, u_long start, u_long end);\nu_long StGetNext(u_long** addr, u_long** header);\nu_long StFreeRing(u_long* base);\nint StGetBackloc(CdlLOC* loc);\nvoid StSetRing(u_long* ring_addr, u_long ring_size1);\nvoid StUnSetRing(void);\nstruct Callbacks {\n    void (*unk0)(void);\n    void* (*DMACallback)(int dma, void (*func)());\n    void (*unk8)(void);\n    int (*ResetCallback)(void);\n    int (*StopCallback)(void);\n    int (*VSyncCallbacks)(int ch, void (*f)());\n    int (*RestartCallback)(void);\n};\nextern u16 D_8002C2BA;\nextern struct Callbacks* D_8002D340;\nint VSync(int mode);\nint VSyncCallback(void (*f)());\nint VSyncCallbacks(int ch, void (*f)());\nvoid* DMACallback(int dma, void (*func)());\nint ResetCallback(void);\nint StopCallback(void);\nint RestartCallback(void);\nu16 CheckCallback(void);\nlong SetVideoMode(long mode);\nvoid PadInit(int mode);\nu_long PadRead(int id);\nvoid PadStop(void);\ntypedef struct {\n              short x;\n              short y;\n              short w;\n              short h;\n} RECT;\ntypedef struct {\n              u_long tag;\n              u_long code[15];\n} DR_ENV;\ntypedef struct {\n    unsigned addr : 24;\n    unsigned len : 8;\n    u_char r0, g0, b0, code;\n} P_TAG;\ntypedef struct {\n    u_char r0, g0, b0, code;\n} P_CODE;\ntypedef struct {\n               u_long tag;\n               u_char r0, g0, b0, code;\n               short x0, y0;\n               u_char r1, g1, b1, p1;\n               short x1, y1;\n} LINE_G2;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char p1;\n               short x1;\n               short y1;\n               u_char u1;\n               u_char v1;\n               u_short tpage;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char p2;\n               short x2;\n               short y2;\n               u_char u2;\n               u_char v2;\n               u_short pad2;\n} POLY_GT3;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char pad1;\n               short x1;\n               short y1;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char pad2;\n               short x2;\n               short y2;\n               u_char r3;\n               u_char g3;\n               u_char b3;\n               u_char pad3;\n               short x3;\n               short y3;\n} POLY_G4;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char p1;\n               short x1;\n               short y1;\n               u_char u1;\n               u_char v1;\n               u_short tpage;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char p2;\n               short x2;\n               short y2;\n               u_char u2;\n               u_char v2;\n               u_short pad2;\n               u_char r3;\n               u_char g3;\n               u_char b3;\n               u_char p3;\n               short x3;\n               short y3;\n               u_char u3;\n               u_char v3;\n               u_short pad3;\n} POLY_GT4;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               short w;\n               short h;\n} SPRT;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n} SPRT_16;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n} SPRT_8;\ntypedef struct {\n               u_long tag;\n               u_char r0, g0, b0, code;\n               short x0, y0;\n               short w, h;\n} TILE;\ntypedef struct {\n               RECT clip;\n               short ofs[2];\n               RECT tw;\n               u_short tpage;\n               u_char dtd;\n               u_char dfe;\n               u_char isbg;\n               u_char r0, g0, b0;\n               DR_ENV dr_env;\n} DRAWENV;\ntypedef struct {\n               RECT disp;\n               RECT screen;\n               u_char isinter;\n               u_char isrgb24;\n               u_char pad0;\n               u_char pad1;\n} DISPENV;\ntypedef struct {\n               u_long tag;\n               u_long code[2];\n} DR_MODE;\ntypedef struct PixPattern {\n    u8 w;\n    u8 h;\n    u8 x;\n    u8 y;\n} PixPattern;\nextern u_short LoadTPage(u_long* pix,\n          int tp,\n          int abr,\n          int x, int y,\n          int w, int h\n);\nextern u_short LoadClut2(u_long *clut, int x, int y);\nu_short GetClut(int x,\n                int y\n);\nextern void AddPrim(void* ot, void* p);\nextern void SetShadeTex(void* p, int tge);\nextern void SetLineG2(LINE_G2* p);\nextern void SetPolyGT3(POLY_GT3* p);\nextern void SetPolyG4(POLY_G4* p);\nextern void SetPolyGT4(POLY_GT4* p);\nextern void SetSemiTrans(void* p, int abe);\nextern void SetSprt(SPRT* p);\nextern void SetSprt16(SPRT_16* p);\nextern void SetSprt8(SPRT_8* p);\nextern void SetTile(TILE* p);\nextern int ResetGraph(int mode);\nint SetGraphDebug(int level);\nextern int SetGraphReverse(int mode);\nextern int SetGraphQueue(int mode);\nextern u_long DrawSyncCallback(void (*func)());\nextern void FntLoad(int tx, int ty);\nint FntPrint(const char* fmt, ...);\nextern void SetDispMask(int mask);\nextern void SetDrawMode(DR_MODE* p, int dfe, int dtd, int tpage, RECT* tw);\nextern void SetDumpFnt(int id);\nextern int ClearImage(RECT* rect, u_char r, u_char g, u_char b);\nextern int DrawSync(int mode);\nextern int FntOpen(int x, int y, int w, int h, int isbg, int n);\nextern u_long* FntFlush(int id);\nextern int LoadImage(RECT* rect, u_long* p);\nextern int StoreImage(RECT* rect, u_long* p);\nextern int MoveImage(RECT* rect, int x, int y);\nextern u_long* ClearOTag(u_long* ot, int n);\nextern u_long* ClearOTagR(u_long* ot, int n);\nextern void DrawOTag(u_long* p);\nextern DRAWENV* PutDrawEnv(DRAWENV* env);\nextern DISPENV* PutDispEnv(DISPENV* env);\nextern DISPENV* SetDefDispEnv(DISPENV* env, int x, int y, int w, int h);\nextern DRAWENV* SetDefDrawEnv(DRAWENV* env, int x, int y, int w, int h);\nextern void SetDrawEnv(DR_ENV* dr_env, DRAWENV* env);\nvoid GsClearVcount(void);\nlong GsGetVcount();\nvoid GsInitVcount();\nvoid InitGeom();\ntypedef struct {\n    short m[3][3];\n    long t[3];\n} MATRIX;\ntypedef struct {\n    long vx, vy, vz;\n    long pad;\n} VECTOR;\ntypedef struct {\n    short vx, vy, vz;\n    short pad;\n} SVECTOR;\ntypedef struct {\n    u_char r, g, b;\n    u_char cd;\n} CVECTOR;\nMATRIX* RotMatrix(SVECTOR* r, MATRIX* m);\nvoid SetGeomOffset(long ofx, long ofy);\nlong RotTransPers(SVECTOR*, long*, long*, long*);\nvoid SetGeomScreen(long h);\nvoid SetRotMatrix(MATRIX* m);\nMATRIX* TransMatrix(MATRIX* m, VECTOR* v);\nvoid SetTransMatrix(MATRIX* m);\nlong RotTransPers4(\n    SVECTOR* v0, SVECTOR* v1, SVECTOR* v2,\n    SVECTOR* v3,\n    long* v10, long* v11, long* v12,\n    long* v13,\n    long* p,\n    long* flag\n);\nlong RotAverageNclip4(\n    SVECTOR* v0, SVECTOR* v1, SVECTOR* v2,\n    SVECTOR* v3,\n    long* sxy0, long* sxy1, long* sxy2,\n    long* sxy3,\n    long* p,\n    long* otz,\n    long* flag\n);\nvoid NormalColorCol(SVECTOR* v0,\n                    CVECTOR* v1,\n                    CVECTOR* v2\n);\nMATRIX* RotMatrixY(long r,\n                   MATRIX* m\n);\nvoid SetBackColor(long rbk, long gbk, long bbk);\nvoid SetColorMatrix(MATRIX* m);\nvoid SetLightMatrix(MATRIX* m);\nvoid SetTransMatrix(MATRIX* m);\nvoid SetFarColor(long rfc, long gfc, long bfc);\nvoid SetFogNear(long a, long h);\nextern long SquareRoot0(long a);\nextern long SquareRoot12(long a);\nextern int rcos(int a);\nextern int rsin(int a);\nextern long ratan2(long y, long x);\ntypedef void (*SpuIRQCallbackProc)(void);\ntypedef struct {\n    short left;\n    short right;\n} SpuVolume;\ntypedef struct {\n               unsigned long voice;\n               unsigned long mask;\n               SpuVolume volume;\n               SpuVolume volmode;\n               SpuVolume volumex;\n               unsigned short pitch;\n               unsigned short note;\n               unsigned short sample_note;\n               short envx;\n               unsigned long addr;\n               unsigned long loop_addr;\n               long a_mode;\n               long s_mode;\n               long r_mode;\n               unsigned short ar;\n               unsigned short dr;\n               unsigned short sr;\n               unsigned short rr;\n               unsigned short sl;\n               unsigned short adsr1;\n               unsigned short adsr2;\n} SpuVoiceAttr;\ntypedef struct {\n    unsigned long mask;\n    long mode;\n    SpuVolume depth;\n    long delay;\n    long feedback;\n} SpuReverbAttr;\nextern long SpuSetTransferMode(long mode);\nextern unsigned long SpuWrite(unsigned char* addr, unsigned long size);\nextern long SpuSetReverbModeParam(SpuReverbAttr* attr);\nextern void SpuSetVoiceAttr(SpuVoiceAttr* arg);\nextern void SpuSetKey(long on_off, unsigned long voice_bit);\nextern long SpuMallocWithStartAddr(unsigned long addr, long size);\nextern SpuIRQCallbackProc SpuSetIRQCallback(SpuIRQCallbackProc);\nextern void SsSeqClose(short seq_access_num);\nextern void SsSetMVol(short voll, short volr);\nextern void SsSetSerialAttr(char s_num, char attr, char mode);\nextern void SsSetSerialVol(short s_num, short voll, short volr);\nextern long SpuClearReverbWorkArea(long rev_mode\n);\nvoid SsInitHot(void);\nchar SsSetReservedVoice(char voices\n);\nvoid SsSetTickMode(long tick_mode\n);\nvoid SsStart(void);\nshort SsUtKeyOnV(\n    short voice,\n    short vabId,\n    short prog,\n    short tone,\n    short note,\n    short fine,\n    short voll,\n    short volr\n);\nshort SsUtSetVVol(short vc,\n                  short voll,\n                  short volr\n);\nvoid SpuGetAllKeysStatus(char* status);\nvoid SsSetTableSize(\n    char* table,\n    short s_max,\n    short t_max\n);\nvoid SsSeqStop(short seq_access_num\n);\nvoid SsSetMono(void);\nvoid SsSetStereo(void);\ns32 SsVabOpenHeadSticky(\n    u_char* addr,\n    u_long vabid,\n    u_long sbaddr\n);\ns32 SsVabTransBodyPartly(\n    u_char* addr,\n    u_long bufsize,\n    u_long vabid\n);\ns32 SsVabTransCompleted(\n    short immediateFlag\n);\nvoid SsUtSetReverbType(short type);\nvoid SsUtReverbOn(void);\nvoid SsUtSetReverbDepth(\n    short ldepth,\n    short rdepth\n);\nvoid SsUtSetReverbDelay(short delay);\ntypedef long Event;\ntypedef enum {\n    PRIM_NONE,\n    PRIM_TILE,\n    PRIM_LINE_G2,\n    PRIM_G4,\n    PRIM_GT4,\n    PRIM_GT3,\n    PRIM_SPRT,\n    PRIM_ENV,\n    PRIM_TILE_ALT = PRIM_TILE | 0x10,\n    PRIM_G4_ALT = PRIM_G4 | 0x10\n} PrimitiveType;\ntypedef struct Vertex {\n              u8 r;\n              u8 g;\n              u8 b;\n              u8 p;\n              s16 x;\n              s16 y;\n              u8 u;\n              u8 v;\n              u16 param;\n} Vertex;\ntypedef struct {\n               SVECTOR* v0;\n               SVECTOR* v1;\n               SVECTOR* v2;\n               SVECTOR* v3;\n} SVEC4;\ntypedef struct {\n    s16 x;\n    s16 y;\n    u8 u;\n    u8 v;\n    u16 param;\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 p;\n} VertexFake;\ntypedef struct Prim {\n    struct Prim* next;\n    struct Vertex v[4];\n} Prim;\ntypedef struct Primitive {\n               struct Primitive* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 u0;\n               u8 v0;\n               u16 clut;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 p1;\n               s16 x1;\n               s16 y1;\n               u8 u1;\n               u8 v1;\n               u16 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 p2;\n               s16 x2;\n               s16 y2;\n               u8 u2;\n               u8 v2;\n               u16 priority;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 p3;\n               s16 x3;\n               s16 y3;\n               u8 u3;\n               u8 v3;\n               u16 blendMode;\n} Primitive;\ntypedef union {\n    s32 unk;\n    void* ptr;\n    struct {\n        s8 unk0, unk1, unk2, unk3;\n    } S8;\n    struct {\n        u8 unk0, unk1, unk2, unk3;\n    } U8;\n    struct {\n        s16 unk0, unk2;\n    } S16;\n    struct {\n        u16 unk0, unk2;\n    } U16;\n} Multi;\ntypedef union {\n    s16 s;\n    u16 u;\n    struct {\n        s8 unk0, unk1;\n    } S8;\n    struct {\n        u8 unk0, unk1;\n    } U8;\n} Multi16;\nstruct Entity;\ntypedef struct ET_Generic {\n               Multi16 unk7C;\n    union {\n                   u16 modeU16;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n        } modeU8;\n    } unk7E;\n    union {\n                   s32 modeS32;\n                   struct Entity* entityPtr;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n        } modeS8;\n    } unk80;\n               Multi unk84;\n               Multi unk88;\n    union {\n                   struct Entity* entityPtr;\n                   struct Primitive* primPtr;\n                   s32 modeS32;\n        struct {\n                       u16 unk0;\n                       u16 unk2;\n        } modeU16;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n    } unk8C;\n               s16 unk90;\n               s16 unk92;\n               u8 unk94;\n               u8 unk95;\n               s16 unk96;\n               s32 unk98;\n               struct Entity* unk9C;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               s16 unkA6;\n               s16 unkA8;\n               s16 unkAA;\n               u8 unkAC;\n               s8 unkAD;\n               s8 unkAE;\n               s8 unkAF;\n               s16 unkB0;\n               s16 unkB2;\n               s16 unkB4;\n               s16 unkB6;\n    union {\n                   void (*unkFuncB8)(struct Entity*);\n                   struct Entity* entityPtr;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n                       u8 unk2;\n                       u8 unk3;\n        } modeU8;\n    } unkB8;\n} ET_Generic;\ntypedef struct {\n               u16 timer;\n               s16 unk7E;\n               u8 unk80;\n               s8 unk81;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 unk88;\n               s16 unk8A;\n               s16 unk8C;\n               s16 unk8E;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n} ET_EquipItemDrop;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    u16 sparkleCycle;\n    u16 sparkleAnim;\n    u32 unk84;\n    u32 unk88;\n    s16 iconSlot;\n    u16 unk8E;\n    u16 floatTimer;\n    u16 unk92;\n    s32 yFloatSpeed;\n} ET_RelicOrb;\ntypedef struct {\n               u8* label;\n               u16 width;\n               u16 height;\n               s16 unk84;\n               u16 duration;\n} ET_MessageBox;\ntypedef struct {\n               s16 lifetime;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s32 unk84;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s32 unk90;\n               s32 unk94;\n               s32 unk98;\n               s16 unk9C;\n               s16 unk9E;\n               s32 unkA0;\n               s32 unkA4;\n               s32 unkA8;\n               u8 unkAC;\n               u8 unkAD;\n               s16 equipId;\n} ET_Weapon;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n} ET_Weapon29;\ntypedef struct {\n               char pad_7C[0x4];\n               s16 timer;\n               char pad_82[0x2];\n               u8 attackMode;\n               u8 flag;\n               u8 nearDeath;\n               s32 speed;\n               s16 angle;\n               char pad_8E[0xE];\n               u8 pickupFlag;\n               u8 grabedAscending;\n} ET_GaibonSlogra;\ntypedef struct {\n               s16 angle;\n               u16 unk7E;\n               u16 unk80;\n               s16 unk82;\n} ET_SoulStealOrb;\ntypedef struct {\n               Primitive* primBg;\n               s32 unused80;\n               Primitive* primFade;\n} ET_WarpRoom;\ntypedef struct {\n               char pad_0[0x8];\n               u8 timer;\n               char pad_85[0x1];\n               s8 timer2;\n               char pad_87[0x5];\n               u16 palette;\n               char pad_8E[0x12];\n               u8 isUnderwater;\n               u8 ignoreCol;\n} ET_Merman;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_0[0x6];\n               s8 timer;\n               char pad_87[0x5];\n               s16 rotation;\n               char pad_8E[0x12];\n               u8 isUnderwater;\n               u8 ignoreCol;\n} ET_Merman_2;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 unk88;\n               s16 unk8A;\n               s16 unk8C;\n               s16 unk8E;\n               s32 unk90;\n               s32 unk94;\n               s32 unk98;\n               s16 unk9C;\n               s16 unk9E;\n               s32 unkA0;\n               struct Entity* target;\n               s16 unkA8;\n               s16 unkAA;\n               s16 cameraX;\n               s16 cameraY;\n               s16 unkB0;\n               s16 unkB2;\n               struct Entity* follow;\n} ET_Bat;\ntypedef struct {\n               char pad_0[0xC];\n               u16 unk88;\n               char pad_8A[0x3];\n               u8 unk8D;\n               char pad_8E[0xE];\n               s16 unk9C;\n               struct Entity* next;\n} ET_801CF254;\ntypedef struct {\n               char pad_0[0x4];\n               s16 unk80;\n               char pad_82[0xA];\n               u8 unk8C;\n               char pad_8D[0xF];\n               u16 unk9C;\n               char pad_9E[0x8];\n               s16 unkA6;\n} ET_GurkhaSword;\ntypedef struct ET_Dracula {\n               char pad_7C[0x10];\n               s16 unk8C;\n               char pad_8E[0x2];\n               char pad_90[0x4];\n               u8 unk94;\n               char pad_95[0x3];\n               s16 unk98;\n               char pad_9A[0x2];\n               s16 unk9C;\n               char pad_9E[0x2];\n               u8 unkA0;\n               u8 unkA1;\n               u8 unkA2;\n               char pad_A3[0x9];\n               struct Primitive* prim;\n} ET_Dracula;\ntypedef struct {\n               struct Primitive* prim;\n               s32 unk80;\n               s32 unk84;\n               s16 unk88;\n               char pad_8A[0x2];\n               s16 unk8C;\n               s16 unk8E;\n} ET_StageTitleCard;\ntypedef struct ET_Succubus {\n               char pad_7C[0x4];\n               s16 timer;\n               char pad_82[0x2];\n               u8 facingLeft;\n               u8 unk85;\n               u8 nextAttack;\n               u8 unk87;\n               u16 nextStep;\n               char pad_8A[0x4];\n               s16 yOffset;\n               char pad_90[0xC];\n               struct Entity* real;\n               s16 clonePosX;\n               s16 unkA2;\n} ET_Succubus;\ntypedef struct {\n               u16 timer;\n               char pad_7E[2];\n               s32 unk80;\n} ET_RoomTransition2;\ntypedef struct {\n               u8 pad0[0x4];\n               s32 unk80;\n               s16 unk84;\n               u8 pad86[2];\n               u8 unk88;\n               u8 unk89;\n} ET_801B3C38;\ntypedef struct {\n               u16 unk7C;\n} ET_801BCC4C;\ntypedef struct ET_CastleDoor {\n               struct Primitive* prim;\n               s16 timer;\n               char pad_82[0x2];\n               s16 rotZ;\n} ET_CastleDoor;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n               s16 unk82;\n               s16 timer;\n} ET_ShuttingWindow;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               u16 unk84;\n} ET_DeathSkySwirl;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               s32 elevatorTarget;\n} ET_Elevator;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0xC];\n               u8 unk8C;\n               u8 unk8D;\n               char pad_8E[0xE];\n               u16 unk9C;\n} ET_801D1BB8;\ntypedef struct {\n               char pad_0[0xC];\n               u16 unk88;\n} ET_801D0B78;\ntypedef struct {\n               s32 unk7C;\n               s16 unk80;\n               s16 unk82;\n    union {\n                   s32 val;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n    } unk84;\n               u16 unk88;\n} ET_WaterEffects;\ntypedef struct {\n               char pad_0[0x20];\n               s16 unk9C;\n               s16 unk9E;\n               struct Entity* unkA0;\n               s16 unkA4;\n               s16 unkA6;\n               u8 unkA8;\n               char pad_A9[0x7];\n               s16 unkB0[0x6];\n} ET_GurkhaHammer;\ntypedef struct {\n               char pad_0[0x20];\n               s16 unk9C;\n               char pad_A0[0x6];\n               s16 unkA4;\n               s16 unkA6;\n               char pad_A8[0xC];\n               u16 unkB4;\n} ET_801CDFD8;\ntypedef struct {\n               char pad_0[0x8];\n               u8 unk84;\n               char pad_85[0x9];\n               u8 unk8E;\n               char pad_8F[0x20];\n               s16 unkB0;\n} ET_801CE4CC;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n} ET_TransparentWater;\ntypedef struct {\n               struct Primitive* prim;\n               s32 timer;\n} ET_HeartRoomGoldDoor;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               s8 unk84;\n               char pad_85[0x1];\n               s8 unk86;\n} ET_MermanWaterSplash;\ntypedef struct {\n               s32 playerVelocity;\n} ET_CastleDoorTransition;\ntypedef struct {\n               s8 unk7C;\n} ET_AlucardController;\ntypedef struct {\n               u16 unk7C;\n} ET_ForegroundTree;\ntypedef struct {\n               u16 unk7C;\n               u16 unk7E;\n               s16 unk80;\n} ET_FadeToWhite;\ntypedef struct {\n               u16 unk7C;\n} ET_DeathStolenItems;\ntypedef struct {\n               u16 unk7C;\n               char pad_7E[0x2];\n               s16 posX;\n               s16 posY;\n               u16 moveTimer;\n               u16 moveDirection;\n} ET_Death;\ntypedef struct {\n               u8 unk7C;\n               char pad_7D[0x3];\n               s16 unk80;\n               s16 unk82;\n               struct Entity* unk84;\n} ET_SpittleBone;\ntypedef struct {\n    char pad[0x30];\n    u8 unkAC;\n} ET_Player;\ntypedef struct {\n    u8 unk0;\n    u8 unk1;\n    u8 unk2;\n    u8 unk3;\n} ET_EntitySlot1;\ntypedef struct {\n    char pad[0x32];\n    s16 unkAE;\n} ET_Entity16;\ntypedef struct {\n    s16 timer;\n} ET_GravBootsBeam;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 unk88;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 childId;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               s16 unk9E;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               s16 unkA6;\n               s16 unkA8;\n               s16 unkAA;\n               s16 unkAC;\n               s16 unkAE;\n               s16 unkB0;\n} ET_EntFactory;\ntypedef struct {\n    char pad[8];\n    s32 unk8;\n} unk_sub_8011E4BC;\ntypedef struct {\n    s16 unk7C;\n    byte pad[14];\n    unk_sub_8011E4BC* unk8C;\n} ET_8011E4BC;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n} ET_HellfireHandler;\ntypedef struct {\n    s16 stoneAngle;\n    s16 lifeTimer;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n} ET_ReboundStone;\ntypedef struct {\n    s16 timer;\n} ET_Vibhuti;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n} ET_GiantSpinningCross;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n} ET_8017091C;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 pad[0x16];\n    s16 unkB0;\n} ET_80170F64;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n} ET_8017161C;\ntypedef union {\n               struct Primitive* prim;\n               ET_EntFactory factory;\n               ET_Generic generic;\n               ET_EntitySlot1 entSlot1;\n               ET_Entity16 ent16;\n               ET_GravBootsBeam bootBeam;\n               ET_8011E4BC et_8011E4BC;\n               ET_HellfireHandler hellfireHandler;\n               ET_ReboundStone reboundStone;\n               ET_Vibhuti vibhuti;\n               ET_GiantSpinningCross giantcross;\n               ET_EquipItemDrop equipItemDrop;\n               ET_RelicOrb relicOrb;\n               ET_MessageBox messageBox;\n               ET_Weapon weapon;\n               ET_Weapon29 weapon29;\n               ET_Bat bat;\n               ET_SoulStealOrb soulStealOrb;\n               ET_GaibonSlogra GS_Props;\n               ET_WarpRoom warpRoom;\n               ET_Merman merman;\n               ET_Merman_2 merman2;\n               ET_MermanWaterSplash mermanWaterSplash;\n               ET_8017091C et_8017091C;\n               ET_80170F64 et_80170F64;\n               ET_8017161C et_8017161C;\n               ET_801CF254 et_801CF254;\n               ET_GurkhaSword gurkhaSword;\n               ET_Dracula dracula;\n               ET_Succubus succubus;\n               ET_StageTitleCard stageTitleCard;\n               ET_RoomTransition2 roomTransition2;\n               ET_801B3C38 et38;\n               ET_801BCC4C et_801BCC4C;\n               ET_ShuttingWindow shuttingWindow;\n               ET_CastleDoor castleDoor;\n               ET_DeathSkySwirl deathSkySwirl;\n               ET_Elevator elevator;\n               ET_801D1BB8 et_801D1BB8;\n               ET_801D0B78 et_801D0B78;\n               ET_WaterEffects waterEffects;\n               ET_GurkhaHammer GH_Props;\n               ET_801CE4CC et_801CE4CC;\n               ET_801CDFD8 et_801CDFD8;\n               ET_TransparentWater transparentWater;\n               ET_HeartRoomGoldDoor heartRoomGoldDoor;\n               ET_CastleDoorTransition castleDoorTransition;\n               ET_AlucardController alucardController;\n               ET_ForegroundTree foregroundTree;\n               ET_FadeToWhite fadeToWhite;\n               ET_DeathStolenItems deathStolenItems;\n               ET_Death death;\n               ET_SpittleBone spittleBone;\n               ET_Player player;\n               char stub[0x40];\n} Ext;\ntypedef enum {\n    Game_Init,\n    Game_Title,\n    Game_Play,\n    Game_GameOver,\n    Game_NowLoading,\n    Game_VideoPlayback,\n    Game_Unk6,\n    Game_PrologueEnd,\n    Game_MainMenu,\n    Game_Ending,\n    Game_99 = 99,\n} GameState;\ntypedef enum {\n    STAGE_NO0 = 0x00,\n    STAGE_NO1 = 0x01,\n    STAGE_LIB = 0x02,\n    STAGE_CAT = 0x03,\n    STAGE_NO2 = 0x04,\n    STAGE_CHI = 0x05,\n    STAGE_DAI = 0x06,\n    STAGE_NP3 = 0x07,\n    STAGE_CEN = 0x08,\n    STAGE_NO4 = 0x09,\n    STAGE_ARE = 0x0A,\n    STAGE_TOP = 0x0B,\n    STAGE_NZ0 = 0x0C,\n    STAGE_NZ1 = 0x0D,\n    STAGE_WRP = 0x0E,\n    STAGE_NO1_ALT = 0x0F,\n    STAGE_NO0_ALT = 0x10,\n    STAGE_DRE = 0x12,\n    STAGE_NZ0_DEMO = 0x13,\n    STAGE_NZ1_DEMO = 0x14,\n    STAGE_LIB_DEMO = 0x15,\n    STAGE_BO7 = 0x16,\n    STAGE_MAR = 0x17,\n    STAGE_BO6 = 0x18,\n    STAGE_BO5 = 0x19,\n    STAGE_BO4 = 0x1A,\n    STAGE_BO3 = 0x1B,\n    STAGE_BO2 = 0x1C,\n    STAGE_BO1 = 0x1D,\n    STAGE_BO0 = 0x1E,\n    STAGE_ST0 = 0x1F,\n    STAGE_RNO0 = STAGE_NO0 | 0x20,\n    STAGE_RNO1 = STAGE_NO1 | 0x20,\n    STAGE_RLIB = STAGE_LIB | 0x20,\n    STAGE_RCAT = STAGE_CAT | 0x20,\n    STAGE_RNO2 = STAGE_NO2 | 0x20,\n    STAGE_RCHI = STAGE_CHI | 0x20,\n    STAGE_RDAI = STAGE_DAI | 0x20,\n    STAGE_RNO3 = STAGE_NP3 | 0x20,\n    STAGE_RCEN = STAGE_CEN | 0x20,\n    STAGE_RNO4 = STAGE_NO4 | 0x20,\n    STAGE_RARE = STAGE_ARE | 0x20,\n    STAGE_RTOP = STAGE_TOP | 0x20,\n    STAGE_RNZ0 = STAGE_NZ0 | 0x20,\n    STAGE_RNZ1 = STAGE_NZ1 | 0x20,\n    STAGE_RWRP = STAGE_WRP | 0x20,\n    STAGE_RNZ1_DEMO = 0x35,\n    STAGE_RBO8 = 0x36,\n    STAGE_RBO7 = 0x37,\n    STAGE_RBO6 = 0x38,\n    STAGE_RBO5 = 0x39,\n    STAGE_RBO4 = 0x3A,\n    STAGE_RBO3 = 0x3B,\n    STAGE_RBO2 = 0x3C,\n    STAGE_RBO1 = 0x3D,\n    STAGE_RBO0 = 0x3E,\n    STAGE_MAD = 0x40,\n    STAGE_NO3 = 0x41,\n    STAGE_IWA_LOAD = 0x42,\n    STAGE_IGA_LOAD = 0x43,\n    STAGE_HAGI_LOAD = 0x44,\n    STAGE_SEL = 0x45,\n    STAGE_TE1 = 0x46,\n    STAGE_TE2 = 0x47,\n    STAGE_TE3 = 0x48,\n    STAGE_TE4 = 0x49,\n    STAGE_TE5 = 0x4A,\n    STAGE_TOP_ALT = 0x4B,\n    STAGE_EU_WARNING = 0x70,\n    STAGE_ENDING = 0xFE,\n    STAGE_MEMORYCARD = 0xFF,\n} Stages;\ntypedef enum {\n    GFX_BANK_NONE,\n    GFX_BANK_4BPP,\n    GFX_BANK_8BPP,\n    GFX_BANK_16BPP,\n    GFX_BANK_COMPRESSED,\n} GfxBankKind;\ntypedef enum {\n    Play_Reset = 0,\n    Play_Init,\n    Play_PrepareDemo,\n    Play_Default,\n    Play_PrepareNextStage,\n    Play_LoadStageChr,\n    Play_WaitStageChr,\n    Play_LoadStageSfx,\n    Play_WaitStageSfx,\n    Play_LoadStagePrg,\n    Play_WaitStagePrg,\n    Gameover_Init = 0,\n    Gameover_AllocResources,\n    Gameover_2,\n    Gameover_3,\n    Gameover_4,\n    Gameover_5,\n    Gameover_6,\n    Gameover_7,\n    Gameover_8,\n    Gameover_9,\n    Gameover_10,\n    Gameover_11,\n    Gameover_Alt = 99,\n    Gameover_Init_Alt,\n    Gameover_AllocResources_Alt,\n    Gameover_2_Alt,\n    Gameover_3_Alt,\n    Gameover_11_Alt = 111,\n    NowLoading_2 = 2,\n} GameSteps;\ntypedef enum {\n    Demo_None,\n    Demo_PlaybackInit,\n    Demo_Recording,\n    Demo_End,\n    Demo_Playback,\n} DemoMode;\ntypedef enum {\n    TIMEATTACK_INVALID = -1,\n    TIMEATTACK_GET_RECORD,\n    TIMEATTACK_SET_RECORD,\n    TIMEATTACK_SET_VISITED,\n} TimeAttackActions;\ntypedef enum {\n    TIMEATTACK_EVENT_DRACULA_DEFEAT,\n    TIMEATTACK_EVENT_ORLOX_DEFEAT,\n    TIMEATTACK_EVENT_DOPPLEGANGER_10_DEFEAT,\n    TIMEATTACK_EVENT_GRANFALOON_DEFEAT,\n    TIMEATTACK_EVENT_MINOTAUR_WEREWOLF_DEFEAT,\n    TIMEATTACK_EVENT_SCYLLA_DEFEAT,\n    TIMEATTACK_EVENT_SLOGRA_GAIBON_DEFEAT,\n    TIMEATTACK_EVENT_HYPPOGRYPH_DEFEAT,\n    TIMEATTACK_EVENT_BEELZEBUB_DEFEAT,\n    TIMEATTACK_EVENT_SUCCUBUS_DEFEAT,\n    TIMEATTACK_EVENT_KARASUMAN_DEFEAT,\n    TIMEATTACK_EVENT_RALPH_GRANT_SYPHA_DEFEAT,\n    TIMEATTACK_EVENT_DEATH_DEFEAT,\n    TIMEATTACK_EVENT_CERBERUS_DEFEAT,\n    TIMEATTACK_EVENT_SAVE_RICHTER,\n    TIMEATTACK_EVENT_MEDUSA_DEFEAT,\n    TIMEATTACK_EVENT_THE_CREATURE_DEFEAT,\n    TIMEATTACK_EVENT_LESSER_DEMON_DEFEAT,\n    TIMEATTACK_EVENT_DOPPLEGANGER_40_DEFEAT,\n    TIMEATTACK_EVENT_AKMODAN_II_DEFEAT,\n    TIMEATTACK_EVENT_DARKWING_BAT_DEFEAT,\n    TIMEATTACK_EVENT_GALAMOTH_DEFEAT,\n    TIMEATTACK_EVENT_FINAL_SAVEPOINT,\n    TIMEATTACK_EVENT_MEET_DEATH,\n    TIMEATTACK_EVENT_GET_HOLYGLASSES,\n    TIMEATTACK_EVENT_MEET_MASTER_LIBRARIAN,\n    TIMEATTACK_EVENT_FIRST_MARIA_MEET,\n    NUM_TIMEATTACK_EVENTS,\n    TIMEATTACK_EVENT_UNUSED_28,\n    TIMEATTACK_EVENT_UNUSED_29,\n    TIMEATTACK_EVENT_UNUSED_30,\n    TIMEATTACK_EVENT_UNUSED_31,\n    TIMEATTACK_EVENT_END,\n    TIMEATTACK_EVENT_INVALID = 0xFF,\n} TimeAttackEvents;\nstruct Entity;\ntypedef void (*PfnEntityUpdate)(struct Entity*);\ntypedef union {\n    s32 val;\n    struct {\n        s16 lo;\n        s16 hi;\n    } i;\n} f32;\ntypedef struct {\n              s16 x;\n              s16 y;\n} Point16;\ntypedef struct {\n              s32 x;\n              s32 y;\n} Point32;\ntypedef struct {\n               u8 vabid;\n               u8 prog;\n               u8 note;\n               s8 volume;\n               u8 unk4;\n               u8 tone;\n               u8 unk6;\n} Unkstruct_800BF554;\ntypedef struct {\n               f32 posX;\n               f32 posY;\n               char pad8[0xC];\n} Unkstruct_80138094;\ntypedef struct {\n               s32 unk0;\n} Unkstruct_80137990;\ntypedef struct {\n    struct UnkStructClut* struct1;\n    struct UnkStructClut* struct2;\n    u16 unk8;\n    u16 unkA;\n    u16 unkC;\n    u16 unkE;\n    u8 unkArray[0x30];\n} Unkstruct_8006C3C4;\ntypedef struct {\n    s16 unk0;\n    s16 unk2;\n} s16_pair;\ntypedef struct {\n               s16_pair pairs[4];\n               char pad12[0x8];\n               s16 unk1A;\n               s16 unk1C;\n} Unkstruct_800ACED0;\ntypedef struct {\n               char pad0[0x14];\n               s32 unk14;\n               s32 unk18;\n               s32 unk1C;\n               s32 unk20;\n} Unkstruct_8010BF64;\ntypedef struct {\n               s16 sndId;\n               u16 unk02;\n               s16 unk04;\n} SfxRingBufferItem;\ntypedef struct {\n               s32 unk0;\n               s32 unk4;\n               s32 unk8;\n} Unkstruct_800FD5BC;\ntypedef struct {\n               u8 unk00[3];\n               char unk03[9];\n} Unkstruct_80128BBC_Sub;\ntypedef struct Unkstruct_80128BBC {\n               char unk00[4];\n               Unkstruct_80128BBC_Sub unk04[4];\n} Unkstruct_80128BBC;\ntypedef struct Unkstruct_800A2D98 {\n              s32 equipTypeFilter;\n              s32 unk4;\n              s32 unk8;\n} Unkstruct_800A2D98;\ntypedef struct {\n               s32 unk0;\n               s32 unk4;\n               s32 unk8;\n               s32 unkC;\n} Unkstruct_800EA5E4;\ntypedef struct {\n    s32 unk0;\n    s32 unk4;\n    s32 unk8;\n} Unkstruct_8011A3AC;\ntypedef struct {\n    s32 unk0;\n    s32 unk4;\n    s32 unk8;\n    s32 unkC;\n} Unkstruct_800FDB18;\ntypedef struct Unkstruct_801C3F9C {\n               char pad0[0xA];\n               s16 unk0A;\n               s32 unk0C;\n               s32 unk10;\n               s16 unk14;\n               char pad16[0x8];\n               s16 unk1E;\n               char pad20[0x4];\n               u8 unk24;\n               char pad25[0x7];\n               s16 unk2C;\n} Unkstruct_801C3F9C;\ntypedef struct {\n    u16 D_800A37D8;\n    u16 D_800A37DA;\n} Unkstruct_801092E8;\ntypedef struct {\n    s32 D_8003C908;\n    s32 D_8003C90C;\n    s32 D_8003C910;\n} Unkstruct_8003C908;\ntypedef struct Unkstruct_801C6C6C {\n    union {\n        struct {\n            u16 w;\n            u16 x;\n        } c;\n        s32 p;\n    } x;\n    union {\n        struct {\n            u16 h;\n            u16 y;\n        } c;\n        s32 p;\n    } y;\n} Unkstruct_801C6C6C;\ntypedef struct {\n    u16 start;\n    s16 current;\n    s16* coords;\n    s16 unk8;\n} Unkstruct_80102CD8;\ntypedef struct {\n    s16 unk0;\n    u8 unk2;\n    u8 unk3;\n} unkstruct_800ACF7C;\ntypedef struct {\n              s16 animSet;\n              s16 unk2;\n              u16 palette;\n              s8 blendMode;\n              char pad_7;\n              s32 unk8;\n} Unkstruct_80180FE0;\ntypedef struct {\n    s32 unk0;\n    s32 unk4;\n    s32 unk8;\n    s32 unkC;\n    s32 unk10;\n} UnkStructClut;\ntypedef struct Unkstruct_801C7954 {\n               u16 x1;\n               u16 x0;\n               u16 y2;\n               u16 y0;\n               u16 y3;\n               u16 y1;\n               u16 x3;\n               u16 x2;\n} Unkstruct_801C7954;\ntypedef struct {\n    s32 unk0;\n    s32 unk4;\n    s32 unk8;\n} unk_800B08CC;\ntypedef struct {\n    Multi g_zEntityCenter;\n    byte pad[0x1A];\n    s32 D_8009742C[8];\n} unkGraphicsStruct;\ntypedef struct {\n    u8 count;\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 w;\n    u8 h;\n    u16 priority;\n    u16 blendMode;\n    s16 unkA;\n    u32 flags;\n    s16 unk10;\n    s16 unk12;\n    s16 unk14;\n    s16 unk16;\n    s16 unk18;\n    s16 unk1A;\n    s16 unk1C;\n} unkStr_8011E4BC;\ntypedef struct FakePrim {\n    struct FakePrim* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 w;\n               u8 h;\n               u16 clut;\n               f32 posX;\n               f32 posY;\n               f32 velocityX;\n               f32 velocityY;\n               s16 x2;\n               s16 y2;\n               s16 delay;\n               u16 priority;\n               f32 accelerationX;\n               f32 accelerationY;\n    s16 timer;\n               u16 blendMode;\n} FakePrim;\ntypedef struct {\n    u8 childId;\n    u8 unk1;\n    u8 unk2;\n    u8 unk3;\n    u8 unk4;\n    u8 unk5;\n} FactoryBlueprint;\ntypedef struct {\n    f32 posX;\n    f32 posY;\n} Camera;\ntypedef struct {\n    unsigned char width;\n    unsigned char height;\n    unsigned short unk2;\n    unsigned char data[0];\n} ImgSrc;\ntypedef struct {\n             u32 gfxOff;\n             u32 ovlOff;\n             u32 ovlLen;\n             u32 vhOff;\n             u32 vhLen;\n             u32 vbLen;\n             u32 unk18;\n             const char* gfxName;\n             const char* ovlName;\n             const char* name;\n             u8 unk28;\n             s8 seqIdx;\n             u16 unk2A;\n} Lba;\ntypedef struct {\n               s16 cursorX;\n               s16 cursorY;\n               s16 cursorW;\n               s16 cursorH;\n               RECT unk1;\n               s16 w;\n               s16 h;\n               s16 unk14;\n               s16 unk16;\n               s16 otIdx;\n               s16 unk1A;\n               u8 unk1C;\n               u8 unk1D;\n} MenuContext;\ntypedef struct {\n               s16 cursorX;\n               s16 cursorY;\n               s16 cursorW;\n               s16 cursorH;\n               s16 otIdx;\n               s16 padding;\n} MenuContextInit;\ntypedef struct {\n              u8 tileLayoutId;\n              u8 tilesetId;\n              u8 objGfxId;\n              u8 objLayoutId;\n} RoomLoadDef;\ntypedef struct {\n    RoomLoadDef* def;\n} RoomLoadDefHolder;\ntypedef struct {\n              u8 left;\n              u8 top;\n              u8 right;\n              u8 bottom;\n              RoomLoadDef load;\n} RoomHeader;\ntypedef struct {\n              u16 x;\n              u16 y;\n              u16 roomId;\n              u16 unk6;\n              u16 stageId;\n} RoomTeleport;\ntypedef struct {\n               s32 x;\n               s32 y;\n               Stages stageId;\n               TimeAttackEvents eventId;\n               s32 unk10;\n} RoomBossTeleport;\ntypedef struct {\n              u16 pressed;\n              s16 previous;\n              u16 tapped;\n              u16 repeat;\n} Pad;\ntypedef struct {\n    u16 duration;\n    u16 unk2;\n} AnimationFrame;\ntypedef struct {\n    s8 unk0;\n    s8 unk2;\n    s8 hitboxWidth;\n    s8 hitboxHeight;\n} FrameProperty;\ntypedef struct Entity {\n               f32 posX;\n               f32 posY;\n               s32 velocityX;\n               s32 velocityY;\n               s16 hitboxOffX;\n               s16 hitboxOffY;\n               u16 facingLeft;\n               u16 palette;\n               s8 blendMode;\n               u8 drawFlags;\n               s16 rotX;\n               s16 rotY;\n               s16 rotZ;\n               u16 rotPivotX;\n               u16 rotPivotY;\n               u16 zPriority;\n               u16 entityId;\n               PfnEntityUpdate pfnUpdate;\n               u16 step;\n               u16 step_s;\n               u16 params;\n               u16 entityRoomIndex;\n               s32 flags;\n               s16 unk38;\n               u16 enemyId;\n               u16 hitboxState;\n               s16 hitPoints;\n               s16 attack;\n               s16 attackElement;\n               u16 unk44;\n               u8 hitboxWidth;\n               u8 hitboxHeight;\n               u8 hitFlags;\n               u8 nFramesInvincibility;\n               s16 unk4A;\n               AnimationFrame* unk4C;\n               u16 animFrameIdx;\n               s16 animFrameDuration;\n               s16 animSet;\n               s16 animCurFrame;\n               s16 stunFrames;\n               u16 unk5A;\n               s32 unk5C;\n               s32 unk60;\n               s32 primIndex;\n               u16 unk68;\n               u16 hitEffect;\n               u8 unk6C;\n               u8 unk6D[11];\n               s32 unk78;\n               Ext ext;\n} Entity;\ntypedef struct {\n               s16 animSet;\n               u16 zPriority;\n               Multi16 unk4;\n               u16 palette;\n               u8 drawFlags;\n               u8 unk9;\n               u8 blendMode;\n               u8 unkB;\n               u32 unkC;\n               const u8* unk10;\n} ObjInit2;\ntypedef struct GpuBuffer {\n                  struct GpuBuffer* next;\n                  DRAWENV draw;\n                  DISPENV disp;\n                  DR_ENV env[0x10];\n                  u_long ot[0x200];\n                  DR_MODE drawModes[0x400];\n                  POLY_GT4 polyGT4[0x300];\n                  POLY_G4 polyG4[0x100];\n                  POLY_GT3 polyGT3[0x30];\n                  LINE_G2 lineG2[0x100];\n                  SPRT_16 sprite16[0x280];\n                  TILE tiles[0x100];\n                  SPRT sprite[0x200];\n} GpuBuffer;\ntypedef struct {\n               u32 drawModes;\n               u32 gt4;\n               u32 g4;\n               u32 gt3;\n               u32 line;\n               u32 sp16;\n               u32 tile;\n               u32 sp;\n               u32 env;\n} GpuUsage;\ntypedef struct {\n               u32 xy;\n               u32 wh;\n               void* data;\n} GfxEntry;\ntypedef struct {\n    GfxBankKind kind;\n    GfxEntry entries[0];\n} GfxBank;\ntypedef struct {\n              GfxEntry* next;\n              u16 kind;\n              s16 unk6;\n              s16 unk8;\n              s16 unkA;\n} GfxLoad;\ntypedef enum ItemTypes {\n    HAND_TYPE,\n    HEAD_TYPE,\n    ARMOR_TYPE,\n    CAPE_TYPE,\n    ACCESSORY_TYPE,\n    NUM_ITEM_TYPES,\n} ItemTypes;\ntypedef enum {\n    ITEM_S_SWORD,\n    ITEM_SWORD,\n    ITEM_THROW_1,\n    ITEM_FIST,\n    ITEM_CLUB,\n    ITEM_TWOHAND,\n    ITEM_FOOD,\n    ITEM_BOMB,\n    ITEM_THROW_2,\n    ITEM_SHIELD,\n    ITEM_MEDICINE,\n    ITEM_END,\n} ItemCategory;\ntypedef enum { STAT_STR, STAT_CON, STAT_INT, STAT_LCK } Stats;\ntypedef struct {\n    s32 level;\n    s32 exp;\n    s32 unk8;\n} FamiliarStats;\ntypedef enum {\n    RELIC_SOUL_OF_BAT,\n    RELIC_FIRE_OF_BAT,\n    RELIC_ECHO_OF_BAT,\n    RELIC_FORCE_OF_ECHO,\n    RELIC_SOUL_OF_WOLF,\n    RELIC_POWER_OF_WOLF,\n    RELIC_SKILL_OF_WOLF,\n    RELIC_FORM_OF_MIST,\n    RELIC_POWER_OF_MIST,\n    RELIC_GAS_CLOUD,\n    RELIC_CUBE_OF_ZOE,\n    RELIC_SPIRIT_ORB,\n    RELIC_GRAVITY_BOOTS,\n    RELIC_LEAP_STONE,\n    RELIC_HOLY_SYMBOL,\n    RELIC_FAERIE_SCROLL,\n    RELIC_JEWEL_OF_OPEN,\n    RELIC_MERMAN_STATUE,\n    RELIC_BAT_CARD,\n    RELIC_GHOST_CARD,\n    RELIC_FAERIE_CARD,\n    RELIC_DEMON_CARD,\n    RELIC_SWORD_CARD,\n    RELIC_JP_0,\n    RELIC_JP_1,\n    RELIC_HEART_OF_VLAD,\n    RELIC_TOOTH_OF_VLAD,\n    RELIC_RIB_OF_VLAD,\n    RELIC_RING_OF_VLAD,\n    RELIC_EYE_OF_VLAD,\n    NUM_RELICS,\n} RelicIds;\ntypedef enum {\n    SPELL_DARK_METAMORPHOSIS,\n    SPELL_SUMMON_SPIRIT,\n    SPELL_HELLFIRE,\n    SPELL_TETRA_SPIRIT,\n    SPELL_WOLF_CHARGE,\n    SPELL_SOUL_STEAL,\n    SPELL_WING_SMASH,\n    SPELL_SWORD_BROTHERS,\n    NUM_SPELLS,\n} SpellIds;\ntypedef enum {\n    FAM_STATS_BAT,\n    FAM_STATS_GHOST,\n    FAM_STATS_FAERIE,\n    FAM_STATS_DEMON,\n    FAM_STATS_SWORD,\n    FAM_STATS_YOUSEI,\n    FAM_STATS_NOSE_DEMON,\n    NUM_FAMILIARS\n} FamiliarStatsIds;\ntypedef enum {\n    FAM_ACTIVE_NONE,\n    FAM_ACTIVE_BAT = FAM_STATS_BAT + 1,\n    FAM_ACTIVE_GHOST = FAM_STATS_GHOST + 1,\n    FAM_ACTIVE_FAERIE = FAM_STATS_FAERIE + 1,\n    FAM_ACTIVE_DEMON = FAM_STATS_DEMON + 1,\n    FAM_ACTIVE_SWORD = FAM_STATS_SWORD + 1,\n    FAM_ACTIVE_YOUSEI = FAM_STATS_YOUSEI + 1,\n    FAM_ACTIVE_NOSE_DEMON = FAM_STATS_NOSE_DEMON + 1,\n} FamiliarActiveIds;\ntypedef struct {\n                   u8 relics[30];\n                   u8 spells[NUM_SPELLS];\n                   u8 equipHandCount[169];\n                   u8 equipBodyCount[90];\n                   u8 equipHandOrder[169];\n                   u8 equipBodyOrder[90];\n                   u8 saveName[12];\n                   u32 spellsLearnt;\n                   s32 hp;\n                   s32 hpMax;\n                   s32 hearts;\n                   s32 heartsMax;\n                   s32 mp;\n                   s32 mpMax;\n                   s32 statsBase[4];\n                   s32 statsEquip[4];\n                   s32 statsTotal[4];\n                   u32 level;\n                   u32 exp;\n                   u32 gold;\n                   u32 killCount;\n                   u32 D_80097BF8;\n                   u32 subWeapon;\n                   u32 equipment[7];\n                   u32 attackHands[2];\n                   s32 defenseEquip;\n                   u16 defenseElement;\n                   u16 D_80097C2A;\n                   u16 D_80097C2C;\n                   u16 D_80097C2E;\n                   s32 timerHours;\n                   s32 timerMinutes;\n                   s32 timerSeconds;\n                   s32 timerFrames;\n                   u32 D_80097C40;\n                   FamiliarStats statsFamiliars[NUM_FAMILIARS];\n} PlayerStatus;\ntypedef struct {\n                         s32 cursorMain;\n                         s32 cursorRelic;\n                         s32 cursorEquip;\n                         s32 cursorEquipType[NUM_ITEM_TYPES];\n                         s32 scrollEquipType[NUM_ITEM_TYPES];\n                         s32 cursorSpells;\n                         s32 cursorSettings;\n                         s32 cursorCloak;\n                         s32 cursorButtons;\n                         s32 cursorWindowColors;\n                         s32 cursorTimeAttack;\n} MenuNavigation;\ntypedef struct {\n                            u32 buttonConfig[8];\n                            u16 buttonMask[8];\n                            s32 timeAttackRecords[TIMEATTACK_EVENT_END];\n                            s32 cloakColors[6];\n                            s32 windowColors[3];\n                            s32 equipOrderTypes[ITEM_END];\n                            s32 isCloakLiningReversed;\n                            s32 isSoundMono;\n                            s32 D_8003CB00;\n                            s32 D_8003CB04;\n} GameSettings;\ntypedef struct {\n               u8 Magic[2];\n               u8 Type;\n               u8 BlockEntry;\n               u8 Title[64];\n               u8 reserve[28];\n               u8 Clut[32];\n               u8 Icon[3][128];\n} MemcardHeader;\ntypedef struct {\n               char name[12];\n               s32 level;\n               s32 gold;\n               s32 playHours;\n               s32 playMinutes;\n               s32 playSeconds;\n               s32 cardIcon;\n               s32 endGameFlags;\n               s16 stage;\n               u16 nRoomsExplored;\n               u16 roomX;\n               u16 roomY;\n               s32 character;\n               s32 saveSize;\n} SaveInfo;\ntypedef struct {\n                MemcardHeader header;\n                SaveInfo info;\n                PlayerStatus status;\n                MenuNavigation menuNavigation;\n                GameSettings settings;\n                u8 castleFlags[0x300];\n                u8 castleMap[0x800];\n                 s32 rng;\n} SaveData;\ntypedef struct {\n               const u8* gfxPage;\n               const u8* gfxIndex;\n               const u8* clut;\n               const u8* collision;\n} TileDefinition;\ntypedef struct {\n               u32 left : 6;\n               u32 top : 6;\n               u32 right : 6;\n               u32 bottom : 6;\n               u8 params : 8;\n} LayoutRect;\ntypedef struct {\n               const u16* layout;\n               const TileDefinition* tileDef;\n               const LayoutRect rect;\n               const u16 zPriority;\n               const u16 flags;\n} LayerDef;\ntypedef struct {\n    LayerDef* fg;\n    LayerDef* bg;\n} RoomDef;\ntypedef struct {\n                   void (*Update)(void);\n                   void (*TestCollisions)(void);\n                   void (*unk08)(void);\n                   void (*InitRoomEntities)(s32 layoutId);\n                   RoomHeader* rooms;\n                   s16** spriteBanks;\n                   UnkStructClut** cluts;\n                   void* unk1C;\n                   RoomDef* tileLayers;\n                   GfxBank** gfxBanks;\n                   void (*unk28)(void);\n                   void (*unk2c)(void);\n                   void* unk30;\n                   s32* unk34;\n                   s32* unk38;\n                   void (*unk3C)(void);\n} Overlay;\ntypedef enum {\n    EFFECT_SOLID = 1 << 0,\n    EFFECT_UNK_0002 = 1 << 1,\n    EFFECT_QUICKSAND = 1 << 2,\n    EFFECT_WATER = 1 << 3,\n    EFFECT_MIST_ONLY = 1 << 4,\n    EFFECT_UNK_0020 = 1 << 5,\n    EFFECT_SOLID_FROM_ABOVE = 1 << 6,\n    EFFECT_SOLID_FROM_BELOW = 1 << 7,\n    EFFECT_UNK_0800 = 1 << 11,\n    EFFECT_UNK_1000 = 1 << 12,\n    EFFECT_UNK_2000 = 1 << 13,\n    EFFECT_UNK_4000 = 1 << 14,\n    EFFECT_UNK_8000 = 1 << 15,\n    EFFECT_NOTHROUGH = EFFECT_SOLID | EFFECT_QUICKSAND,\n    EFFECT_NOTHROUGH_PLUS = EFFECT_SOLID | EFFECT_UNK_0002 | EFFECT_QUICKSAND\n} ColliderEffectFlags;\ntypedef struct Collider {\n               s32 effects;\n               s32 unk4;\n               s32 unk8;\n               s32 unkC;\n               s32 unk10;\n               s32 unk14;\n               s32 unk18;\n               s32 unk1C;\n               s32 unk20;\n} Collider;\ntypedef struct {\n               const char* name;\n               s16 hitPoints;\n               u16 attack;\n               u16 attackElement;\n               s16 defense;\n               u16 hitboxState;\n               u16 weaknesses;\n               u16 strengths;\n               u16 immunes;\n               u16 absorbs;\n               s16 level;\n               s16 exp;\n               s16 rareItemId;\n               s16 uncommonItemId;\n               u16 rareItemDropRate;\n               u16 uncommonItemDropRate;\n               u8 hitboxWidth;\n               u8 hitboxHeight;\n               s32 flags;\n} EnemyDef;\ntypedef struct {\n               s16 attack;\n               s16 heartCost;\n               u16 attackElement;\n               u8 unk6;\n               u8 nFramesInvincibility;\n               u16 stunFrames;\n               u8 unkA;\n               u8 blueprintNum;\n               u16 hitboxState;\n               u16 hitEffect;\n               u8 crashId;\n               u8 unk11;\n               u16 entityRoomIndex;\n} SubweaponDef;\ntypedef struct {\n               const char* name;\n               const char* description;\n               s16 attack;\n               s16 defense;\n               u16 element;\n               u8 itemCategory;\n               u8 weaponId;\n               u8 palette;\n               u8 unk11;\n               u8 playerAnim;\n               u8 unk13;\n               u8 unk14;\n               u8 lockDuration;\n               u8 chainLimit;\n               u8 unk17;\n               u8 specialMove;\n               u8 isConsumable;\n               u8 enemyInvincibilityFrames;\n               u8 unk1B;\n               u32 comboSub;\n               u32 comboMain;\n               u16 mpUsage;\n               u16 stunFrames;\n               u16 hitType;\n               u16 hitEffect;\n               u16 icon;\n               u16 iconPalette;\n               u16 criticalRate;\n               u16 unk32;\n} Equipment;\ntypedef struct {\n             const char* name;\n             const char* description;\n             s16 attBonus;\n             s16 defBonus;\n             u8 statsBonus[4];\n             u16 unk10;\n             u16 unk12;\n             u16 unk14;\n             u16 unk16;\n             u16 icon;\n             u16 iconPalette;\n             u16 equipType;\n             u16 unk1E;\n} Accessory;\ntypedef struct {\n               const char* name;\n               const char* desc;\n               u16 unk08;\n               u16 unk0A;\n               s32 unk0C;\n} RelicDesc;\ntypedef struct {\n               const char* name;\n               const char* desc;\n               u16 icon;\n               u16 iconPalette;\n               u16 unk0C;\n               u16 unk0E;\n} RelicOrb;\ntypedef struct {\n               const char* nextCharDialogue;\n               u16 startX;\n               u16 nextLineY;\n               u16 startY;\n               u16 nextCharX;\n               u16 nextLineX;\n               s16 nextCharY;\n               u16 portraitAnimTimer;\n               u16 unk12;\n               u16 clutIndex;\n               u8 nextCharTimer;\n               u8 unk17;\n               Primitive* prim[6];\n               s32 primIndex[3];\n               u16 unk3C;\n               u16 timer;\n               const char* unk40;\n} Dialogue;\ntypedef struct {\n                   Overlay o;\n                   void (*FreePrimitives)(s32);\n                   s16 (*AllocPrimitives)(PrimitiveType type, s32 count);\n                   void (*CheckCollision)(s32 x, s32 y, Collider* res, s32 unk);\n                   void (*func_80102CD8)(s32 arg0);\n                   void (*UpdateAnim)(FrameProperty* frameProps, s32* arg1);\n                   void (*SetSpeedX)(s32 value);\n                   Entity* (*GetFreeDraEntity)(s16 start, s16 end);\n                   void (*GetEquipProperties)(\n        s32 handId, Equipment* res, s32 equipId);\n                   s32 (*func_800EA5E4)(u32);\n                   void (*LoadGfxAsync)(s32 gfxId);\n                   void (*PlaySfx)(s32 sfxId);\n                   s16 (*func_800EDB58)(s32, s32);\n                   void (*func_800EA538)(s32 arg0);\n                   void (*g_pfn_800EA5AC)(u16 arg0, u8 arg1, u8 arg2, u8 arg3);\n                   void (*func_801027C4)(u32 arg0);\n                   void (*func_800EB758)(\n        s16 pivotX, s16 pivotY, Entity* e, u16 flags, POLY_GT4* p, u8 flipX);\n                   Entity* (*CreateEntFactoryFromEntity)(\n        Entity* self, u32 flags, s32 arg2);\n                   bool (*func_80131F68)(void);\n                   DR_ENV* (*func_800EDB08)(POLY_GT4* poly);\n                   u16* (*func_80106A28)(u32 arg0, u16 kind);\n                   void (*func_80118894)(Entity*);\n                   EnemyDef* enemyDefs;\n                   Entity* (*func_80118970)(void);\n                   s32 (*func_80118B18)(Entity* ent1, Entity* ent2, s32 arg2);\n    ;\n                   s32 (*UpdateUnarmedAnim)(s8* frameProps, u16** frames);\n                   void (*func_8010DBFC)(s32*, s32*);\n                   void (*func_80118C28)(s32 arg0);\n                   void (*func_8010E168)(s32 arg0, s16 arg1);\n                   void (*func_8010DFF0)(s32 arg0, s32 arg1);\n                   u16 (*DealDamage)(\n        Entity* enemyEntity, Entity* attackerEntity);\n                   void (*LoadEquipIcon)(s32 equipIcon, s32 palette, s32 index);\n                   Equipment* equipDefs;\n                   Accessory* accessoryDefs;\n                   void (*AddHearts)(s32 value);\n                   bool (*LoadMonsterLibrarianPreview)(s32 monsterId);\n                   s32 (*TimeAttackController)(\n        TimeAttackEvents eventId, TimeAttackActions action);\n                   void* (*func_8010E0A8)(void);\n                   void (*func_800FE044)(s32, s32);\n                   void (*AddToInventory)(u16 itemId, s32 itemCategory);\n                   RelicOrb* relicDefs;\n                   void (*InitStatsAndGear)(bool debugMode);\n                   s32 (*func_80134714)(s32 arg0, s32 arg1, s32 arg2);\n                   s32 (*func_80134678)(s16 arg0, u16 arg1);\n                   void (*func_800F53A4)(void);\n                   u32 (*CheckEquipmentItemCount)(u32 itemId, u32 equipType);\n                   void (*func_8010BF64)(Unkstruct_8010BF64* arg0);\n                   void (*func_800F1FC4)(s32 arg0);\n                   void* func_800F2288;\n                   void (*func_8011A3AC)(\n        Entity* entity, s32 arg1, s32 arg2, Unkstruct_8011A3AC* arg3);\n                   s32 (*func_800FF460)(s32 arg0);\n                   s32 (*func_800FF494)(EnemyDef* arg0);\n                   bool (*CdSoundCommandQueueEmpty)(void);\n                   bool (*func_80133950)(void);\n                   bool (*func_800F27F4)(s32 arg0);\n                   s32 (*func_800FF110)(s32 arg0);\n                   s32 (*func_800FD664)(s32 arg0);\n                   s32 (*func_800FD5BC)(Unkstruct_800FD5BC* arg0);\n                   void (*LearnSpell)(s32 spellId);\n                   void (*DebugInputWait)(const char* str);\n                   void* unused12C;\n                   void* unused130;\n                   void* unused134;\n                   void* unused138;\n                   void* unused13C;\n} GameApi;\nextern void (*g_api_FreePrimitives)(s32);\nextern s16 (*g_api_AllocPrimitives)(PrimitiveType type, s32 count);\nextern void (*g_api_CheckCollision)(s32 x, s32 y, Collider* res, s32 unk);\nextern void (*g_api_func_80102CD8)(s32 arg0);\nextern void (*g_api_UpdateAnim)(FrameProperty* frameProps, s32* arg1);\nextern void (*g_api_SetSpeedX)(s32 value);\nextern Entity* (*g_api_GetFreeDraEntity)(s16 start, s16 end);\nextern void (*g_api_GetEquipProperties)(\n    s32 handId, Equipment* res, s32 equipId);\nextern s32 (*g_api_func_800EA5E4)(u32);\nextern void (*g_api_LoadGfxAsync)(s32);\nextern void (*g_api_PlaySfx)(s32 sfxId);\nextern s16 (*g_api_func_800EDB58)(s32, s32);\nextern void (*g_api_func_800EA538)(s32 arg0);\nextern void (*g_api_g_pfn_800EA5AC)(u16 arg0, u8 arg1, u8 arg2, u8 arg3);\nextern Entity* (*g_api_CreateEntFactoryFromEntity)(\n    Entity* self, u32 flags, s32 arg2);\nextern bool (*g_api_func_80131F68)(void);\nextern DR_ENV* (*g_api_func_800EDB08)(POLY_GT4* poly);\nextern u16* (*g_api_func_80106A28)(u16 arg0, u16 kind);\nextern void (*g_api_func_80118894)(Entity*);\nextern EnemyDef* g_api_enemyDefs;\nextern u32 (*g_api_UpdateUnarmedAnim)(s8* frameProps, u16** frames);\nextern void (*g_api_func_8010DBFC)(s32*, s32*);\nextern void (*g_api_func_8010E168)(s32 arg0, s16 arg1);\nextern void (*g_api_func_8010DFF0)(s32 arg0, s32 arg1);\nextern u16 (*g_api_DealDamage)(Entity* enemyEntity, Entity* attackerEntity);\nextern void (*g_api_LoadEquipIcon)(s32 equipIcon, s32 palette, s32 index);\nextern Equipment* g_api_equipDefs;\nextern Accessory* g_api_g_AccessoryDefs;\nextern void (*g_api_AddHearts)(s32 value);\nextern s32 (*g_api_TimeAttackController)(\n    TimeAttackEvents eventId, TimeAttackActions action);\nextern void* (*g_api_func_8010E0A8)(void);\nextern void (*g_api_func_800FE044)(s32, s32);\nextern void (*g_api_AddToInventory)(u16 itemId, s32 itemCategory);\nextern RelicOrb* g_api_relicDefs;\nextern s32 (*g_api_func_80134714)(s32 arg0, s32 arg1, s32 arg2);\nextern s32 (*g_api_func_80134678)(s16 arg0, u16 arg1);\nextern void (*g_api_func_800F53A4)(void);\nextern u32 (*g_api_CheckEquipmentItemCount)(u32 itemId, u32 equipType);\nextern void (*g_api_func_8010BF64)(Unkstruct_8010BF64* arg0);\nextern void (*g_api_func_800F1FC4)(s32 arg0);\nextern void (*g_api_func_8011A3AC)(\n    Entity* entity, s32 arg1, s32 arg2, Unkstruct_8011A3AC* arg3);\nextern s32 (*g_api_func_800FF460)(s32 arg0);\nextern s32 (*g_api_func_800FF494)(EnemyDef* arg0);\nextern bool (*g_api_CdSoundCommandQueueEmpty)(void);\nextern bool (*g_api_func_80133950)(void);\nextern bool (*g_api_func_800F27F4)(s32 arg0);\nextern s32 (*g_api_func_800FF110)(s32 arg0);\nextern s32 (*g_api_func_800FD664)(s32 arg0);\nextern s32 (*g_api_func_800FD5BC)(Unkstruct_800FD5BC* arg0);\nextern void (*g_api_LearnSpell)(s32 spellId);\nextern void (*g_api_func_800E2438)(const char* str);\ntypedef struct {\n               s16 x;\n               s16 y;\n               s16 width;\n               s16 height;\n               s16 clut;\n               s16 tpage;\n               u8 texLeft, dummyLeft;\n               u8 texTop, dummyTop;\n               u8 texRight, dummyRight;\n               u8 texBottom, dummyBottom;\n} Sprite;\ntypedef struct {\n             s16 flags;\n             s16 offsetx;\n             s16 offsety;\n             s16 width;\n             s16 height;\n             s16 clut;\n             s16 tileset;\n             s16 left;\n             s16 top;\n             s16 right;\n             s16 bottom;\n} SpritePart;\ntypedef struct {\n             u16 count;\n             SpritePart parts[0];\n} SpriteParts;\ntypedef struct {\n               u16** frames;\n               s8* frameProps;\n               s16 unk8;\n               u16 soundId;\n               u8 ACshift;\n               u8 soundFrame;\n} AnimSoundEvent;\ntypedef struct {\n                        u16* layout;\n                        TileDefinition* tileDef;\n                        f32 scrollX;\n                        f32 scrollY;\n                        u32 D_800730E8;\n                        u32 D_800730EC;\n                        u32 zPriority;\n                        u32 flags;\n                        u32 w;\n                        u32 h;\n                        u32 D_80073100;\n                        u32 scrollKind;\n} BgLayer;\ntypedef struct {\n                   u16* fg;\n                   TileDefinition* D_80073088;\n                   f32 cameraX;\n                   f32 cameraY;\n                   s32 D_80073094;\n                   s32 D_80073098;\n                   s32 zPriority;\n                   s32 flags;\n                   s32 hSize;\n                   s32 vSize;\n                   u32 unk8;\n                   s32 left;\n                   s32 top;\n                   s32 right;\n                   s32 bottom;\n                   s32 x;\n                   s32 y;\n                   s32 width;\n                   s32 height;\n                   s32 unk30;\n                   s32 D_800730D4;\n                   BgLayer bg[16];\n} Tilemap;\ntypedef struct {\n                     u16 flags;\n                     u16 unk2;\n                     u16 unk4;\n                     s16 zPriority;\n} FgLayer;\ntypedef struct {\n                   Collider colliders[8];\n                   s32 D_80072CF0[14][9];\n                   s32 padPressed;\n                   s32 padTapped;\n                   s32 padHeld;\n                   s32 D_80072EF4;\n                   s32 D_80072EF8;\n                   s32 D_80072EFC;\n                   s16 D_80072F00;\n                   s16 D_80072F02;\n                   s16 D_80072F04;\n                   s16 D_80072F06;\n                   s16 D_80072F08;\n                   s16 D_80072F0A;\n                   s16 D_80072F0C;\n                   s16 D_80072F0E;\n                   s16 D_80072F10;\n                   s16 D_80072F12;\n                   s16 D_80072F14;\n                   s16 D_80072F16;\n                   s16 D_80072F18;\n                   s16 D_80072F1A;\n                   s16 D_80072F1C;\n                   s16 D_80072F1E;\n                   s32 pl_vram_flag;\n                   s32 unk04;\n                   s32 unk08;\n                   u32 unk0C;\n                   s32 unk10;\n                   u32 unk14;\n                   s32 unk18;\n                   s32 unk1C;\n                   s32 unk20[8];\n                   u16 unk40;\n                   u16 pl_high_jump_timer;\n                   u16 unk44;\n                   u16 unk46;\n                   u16 unk48;\n                   s16 unk4A;\n                   u16 unk4C;\n                   u16 unk4E;\n                   u16 unk50;\n                   u16 unk52;\n                   u16 unk54;\n                   u16 unk56;\n                   u16 unk58;\n                   u16 unk5A;\n                   u16 unk5C;\n                   u16 unk5E;\n                   u16 unk60;\n                   u16 unk62;\n                   u16 unk64;\n                   u16 unk66;\n                   u16 unk68;\n                   u16 unk6A;\n                   u16 unk6C;\n                   u16 unk6E;\n                   u16 unk70;\n                   u16 unk72;\n                   u32 unk74;\n                   u16 unk78;\n                   u16 unk7A;\n                   u16 unk7C;\n                   u16 unk7E;\n} PlayerState;\ntypedef struct {\n               RECT rect0;\n               RECT rect1;\n               RECT rect2;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 enableColorBlend;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 flipX;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 unk27;\n} PlayerDraw;\nextern s32 D_8003925C;\nextern s32 g_IsTimeAttackUnlocked;\nextern u8 g_CastleFlags[0x300];\nextern u8 D_8003BE23;\nextern u8 D_8003BEEC[];\nextern u8 D_8003BF9C[];\nextern s32 D_8003C0EC[4];\nextern s32 D_8003C0F8;\nextern s32 D_8003C100;\nextern u16 D_8003C104[];\nextern u16 D_8003C3C2[];\nextern s32 D_8003C704;\nextern FgLayer D_8003C708;\nextern s16 D_8003C710;\nextern s16 D_8003C712;\nextern s32 D_8003C728;\nextern s32 D_8003C730;\nextern GameState g_GameState;\nextern s32 D_8003C738;\nextern s32 D_8003C73C;\nextern u32 D_8003C744;\nextern u32 g_RoomCount;\nextern GameApi g_api;\nextern s32 D_8003C8B8;\nextern u32 g_GameTimer;\nextern Unkstruct_8003C908 D_8003C908;\nextern s32 D_8003C90C[2];\nextern u32 g_Timer;\n                 extern s32 D_8003C99C;\n                 extern s32 g_PlayableCharacter;\n                 extern u32 D_8003C9A4;\n                 extern MenuNavigation g_MenuNavigation;\n                 extern GameSettings g_Settings;\nextern GpuBuffer g_GpuBuffers[2];\nextern s16 g_GpuBuffers_1_buf_draw_clip_y;\nextern const char g_MemcardSavePath[];\nextern const char aBaslus00067dra[19];\nextern const char g_strMemcardRootPath[];\nextern s32 g_LoadFile;\nextern s32 D_8006BB00;\nextern u8 g_CastleMap[0x800];\nextern s32 D_8006C374;\nextern s32 D_8006C378;\nextern GpuBuffer* g_CurrentBuffer;\nextern s32 D_8006C384;\nextern s32 D_8006C388;\nextern s32 D_8006C38C;\nextern s32 D_8006C390;\nextern u32 g_CdStep;\nextern s32 D_8006C3AC;\nextern s32 g_backbufferX;\nextern s32 g_backbufferY;\nextern s32 g_IsUsingCd;\nextern Entity* g_CurrentEntity;\nextern Unkstruct_8006C3C4 D_8006C3C4[32];\nextern s32 g_Servant;\nextern u16 g_Clut[];\nextern u32 D_8006EBCC;\nextern u16 D_8006EBE0;\nextern u16 D_8006F3CC[];\nextern u16 D_8006F42C[];\nextern s16 D_800705CC[];\nextern u32 D_80070BCC;\nextern PlayerState g_Player;\nextern u16 g_Player_D_80072EF6;\nextern GfxLoad g_GfxLoad[0x10];\nextern u32 g_GameStep;\nextern s32 g_ServantLoaded;\nextern Event g_EvSwCardEnd;\nextern Event g_EvSwCardErr;\nextern Event g_EvSwCardTmo;\nextern s32 D_80073074;\nextern Event g_EvSwCardNew;\nextern s32 D_8007307C;\nextern s32 D_80073080;\nextern Tilemap g_Tilemap;\nextern Entity g_Entities[256];\nextern Entity D_80074C08[];\nextern Entity D_8007A958[];\nextern Entity D_8007C0D8[];\nextern Entity D_8007DE38[];\nextern unkGraphicsStruct g_unkGraphicsStruct;\nextern s32 g_entityDestroyed[];\nextern Entity D_8007EF1C;\nextern Event g_EvHwCardEnd;\nextern Event g_EvHwCardErr;\nextern Event g_EvHwCardTmo;\nextern Event g_EvHwCardNew;\nextern u8 g_Pix[4][128 * 128 / 2];\nextern Primitive g_PrimBuf[0x500];\nextern s32 playerX;\nextern s32 playerY;\nextern u32 g_randomNext;\nextern s32 D_80096ED8[];\nextern u32 D_80097364;\nextern s32 D_800973B4;\nextern POLY_GT4 D_800973B8[];\nextern s8 D_80097B98;\nextern s8 D_80097B99;\nextern s32 D_800973EC;\nextern s32 D_800973F8;\nextern s32 D_800973FC;\nextern s32 D_80097400[];\nextern s32 D_8009740C[];\nextern s32 g_BottomCornerTextTimer;\nextern s32 g_BottomCornerTextPrims;\nextern s32 D_80097418;\nextern s32 D_8009741C;\nextern s32 D_80097420[];\nextern s32 D_80097424;\nextern s32 D_80097448[];\nextern s32 D_80097450;\nextern s32 D_80097488;\nextern u16 D_8009748A[];\nextern s32 D_8009748C;\nextern u16 D_8009748E[];\nextern Pad g_pads[2];\nextern Stages g_StageId;\nextern s32 D_800974A4;\nextern DR_ENV D_800974AC;\nextern s32 g_UseDisk;\nextern s32 D_800978B4;\nextern s32 D_800978C4;\nextern u32 g_MenuStep;\nextern char D_80097902[];\nextern s32 D_80097904;\nextern s32 D_80097908;\nextern s32 D_8009790C;\nextern s32 D_80097910;\nextern DemoMode g_DemoMode;\nextern s32 g_LoadOvlIdx;\nextern s32 D_8009791C;\nextern s32 D_80097920;\nextern s32 D_80097924;\nextern s32 D_80097928;\nextern GpuUsage g_GpuUsage;\nextern PlayerStatus g_Status;\nextern u8 D_80097B9C[];\nextern s32 subWeapon;\nextern u8 g_SaveName[12] ;\nextern Unkstruct_8011A3AC D_80097C38[];\nextern u32 D_80097C40[];\nextern s32 D_80097C98;\nextern PlayerDraw g_PlayerDraw[0x10];\nextern s8 D_80097D37;\nextern u8 D_80097F3C;\nextern u8 D_80097F3D;\nextern u8 D_80097F3E;\nextern s8 D_80097F3F;\nextern u8 D_80097F40;\nextern u8 D_80097F41;\nextern u8 D_80097F42;\nextern u8 D_80097F44;\nextern u8 D_80097F45;\nextern u8 D_80097F46;\nextern u8 D_80097F48;\nextern u8 D_80097F49;\nextern u8 D_80097F4A;\nextern s32 D_800987B4;\nextern s32 D_800987C8;\nextern s32 g_DebugPlayer;\nextern s32 D_80098894;\ntypedef enum ItemSlots {\n    LEFT_HAND_SLOT,\n    RIGHT_HAND_SLOT,\n    HEAD_SLOT,\n    ARMOR_SLOT,\n    CAPE_SLOT,\n    ACCESSORY_1_SLOT,\n    ACCESSORY_2_SLOT,\n    NUM_ITEM_SLOTS,\n} ItemSlots;\ntypedef enum HandItems {\n                ITEM_EMPTY_HAND,\n                ITEM_MONSTER_VIAL_1,\n                ITEM_MONSTER_VIAL_2,\n                ITEM_MONSTER_VIAL_3,\n                ITEM_SHIELD_ROD,\n                ITEM_LEATHER_SHIELD,\n                ITEM_KNIGHT_SHIELD,\n                ITEM_IRON_SHIELD,\n                ITEM_AXELORD_SHIELD,\n                ITEM_HERALD_SHIELD,\n                ITEM_DARK_SHIELD,\n                ITEM_GODDESS_SHIELD,\n                ITEM_SHAMAN_SHIELD,\n                ITEM_MEDUSA_SHIELD,\n                ITEM_SKULL_SHIELD,\n                ITEM_FIRE_SHIELD,\n                ITEM_ALUCARD_SHIELD,\n                ITEM_SWORD_OF_DAWN,\n                ITEM_BASILARD,\n                ITEM_SHORT_SWORD,\n                ITEM_COMBAT_KNIFE,\n                ITEM_NUNCHAKU,\n                ITEM_WERE_BANE,\n                ITEM_RAPIER,\n                ITEM_KARMA_COIN,\n                ITEM_MAGIC_MISSILE,\n                ITEM_RED_RUST,\n                ITEM_TAKEMITSU,\n                ITEM_SHOTEL,\n                ITEM_ORANGE,\n                ITEM_APPLE,\n                ITEM_BANANA,\n                ITEM_GRAPES,\n                ITEM_STRAWBERRY,\n                ITEM_PINEAPPLE,\n                ITEM_PEANUTS,\n                ITEM_TOADSTOOL,\n                ITEM_SHIITAKE,\n                ITEM_CHEESECAKE,\n                ITEM_SHORTCAKE,\n                ITEM_TART,\n                ITEM_PARFAIT,\n                ITEM_PUDDING,\n                ITEM_ICE_CREAM,\n                ITEM_FRANKFURTER,\n                ITEM_HAMBURGER,\n                ITEM_PIZZA,\n                ITEM_CHEESE,\n                ITEM_HAM_AND_EGGS,\n                ITEM_OMELETTE,\n                ITEM_MORNING_SET,\n                ITEM_LUNCH_A,\n                ITEM_LUNCH_B,\n                ITEM_CURRY_RICE,\n                ITEM_GYROS_PLATE,\n                ITEM_SPAGHETTI,\n                ITEM_GRAPE_JUICE,\n                ITEM_BARLEY_TEA,\n                ITEM_GREEN_TEA,\n                ITEM_NATOU,\n                ITEM_RAMEN,\n                ITEM_MISO_SOUP,\n                ITEM_SUSHI,\n                ITEM_PORK_BUN,\n                ITEM_RED_BEAN_BUN,\n                ITEM_CHINESE_BUN,\n                ITEM_DIM_SUM_SET,\n                ITEM_POT_ROAST,\n                ITEM_SIRLION,\n                ITEM_TURKEY,\n                ITEM_MEAL_TICKET,\n                ITEM_NEUTRON_BOMB,\n                ITEM_POWER_OF_SIRE,\n                ITEM_PENTAGRAM,\n                ITEM_BAT_PENTAGRAM,\n                ITEM_SHURIKEN,\n                ITEM_CROSS_SHURIKEN,\n                ITEM_BUFFALO_STAR,\n                ITEM_FLAME_STAR,\n                ITEM_TNT,\n                ITEM_BWAKA_KNIFE,\n                ITEM_BOOMERANG,\n                ITEM_JAVELIN,\n                ITEM_TYRFING,\n                ITEM_NAMAKURA,\n                ITEM_KNUCKLE_DUSTER,\n                ITEM_GLADIUS,\n                ITEM_SCIMITAR,\n                ITEM_CUTLASS,\n                ITEM_SABER,\n                ITEM_FALCHION,\n                ITEM_BROADSWORD,\n                ITEM_BEKATOWA,\n                ITEM_DAMASCUS_SWORD,\n                ITEM_HUNTER_SWORD,\n                ITEM_ESTOC,\n                ITEM_BASTARD_SWORD,\n                ITEM_JEWEL_KNUCKLES,\n                ITEM_CLAYMORE,\n                ITEM_TALWAR,\n                ITEM_KATANA,\n                ITEM_FLAMBERGE,\n                ITEM_IRON_FIST,\n                ITEM_ZWEIHANDER,\n                ITEM_SWORD_OF_HADOR,\n                ITEM_LUMINUS,\n                ITEM_HARPER,\n                ITEM_OBSIDIAN_SWORD,\n                ITEM_GRAM,\n                ITEM_JEWEL_SWORD,\n                ITEM_MORMEGIL,\n                ITEM_FIREBRAND,\n                ITEM_THUNDERBRAND,\n                ITEM_ICEBRAND,\n                ITEM_STONE_SWORD,\n                ITEM_HOLY_SWORD,\n                ITEM_TERMINUS_EST,\n                ITEM_MARSIL,\n                ITEM_DARK_BLADE,\n                ITEM_HEAVEN_SWORD,\n                ITEM_FIST_OF_TULKAS,\n                ITEM_GURTHANG,\n                ITEM_MOURNEBLADE,\n                ITEM_ALUCARD_SWORD,\n                ITEM_MABLUNG_SWORD,\n                ITEM_BADELAIRE,\n                ITEM_SWORD_FAMILIAR,\n                ITEM_GREAT_SWORD,\n                ITEM_MACE,\n                ITEM_MORNINGSTAR,\n                ITEM_HOLY_ROD,\n                ITEM_STAR_FLAIL,\n                ITEM_MOON_ROD,\n                ITEM_CHAKRAM,\n                ITEM_FIRE_BOOMERANG,\n                ITEM_IRON_BALL,\n                ITEM_HOLBEIN_DAGGER,\n                ITEM_BLUE_KNUCKLES,\n                ITEM_DYNAMITE,\n                ITEM_OSAFUNE_KATANA,\n                ITEM_MASAMUNE,\n                ITEM_MURAMASA,\n                ITEM_HEART_REFRESH,\n                ITEM_RUNESWORD,\n                ITEM_ANTIVENOM,\n                ITEM_UNCURSE,\n                ITEM_LIFE_APPLE,\n                ITEM_HAMMER,\n                ITEM_STR_POTION,\n                ITEM_LUCK_POTION,\n                ITEM_SMART_POTION,\n                ITEM_ATTACK_POTION,\n                ITEM_SHIELD_POTION,\n                ITEM_RESIST_FIRE,\n                ITEM_RESIST_THUNDER,\n                ITEM_RESIST_ICE,\n                ITEM_RESIST_STONE,\n                ITEM_RESIST_HOLY,\n                ITEM_RESIST_DARK,\n                ITEM_POTION,\n                ITEM_HIGH_POTION,\n                ITEM_ELIXIR,\n                ITEM_MANNA_PRISM,\n                ITEM_VORPAL_BLADE,\n                ITEM_CRISSAEGRIM,\n                ITEM_YASUTSUNA,\n                ITEM_LIBRARY_CARD,\n                ITEM_ALUCART_SHIELD,\n                ITEM_ALUCART_SWORD,\n                NUM_HAND_ITEMS,\n} HandItems;\ntypedef enum BodyItems {\n               ITEM_NO_ARMOR,\n               ITEM_CLOTH_TUNIC,\n               ITEM_HIDE_CUIRASS,\n               ITEM_BRONZE_CUIRASS,\n               ITEM_IRON_CUIRASS,\n               ITEM_STEEL_CUIRASS,\n               ITEM_SILVER_PLATE,\n               ITEM_GOLD_PLATE,\n               ITEM_PLATINUM_MAIL,\n               ITEM_DIAMOND_PLATE,\n               ITEM_FIRE_MAIL,\n               ITEM_LIGHTNING_MAIL,\n               ITEM_ICE_MAIL,\n               ITEM_MIRROR_CUIRASS,\n               ITEM_SPIKE_BREAKER,\n               ITEM_ALUCARD_MAIL,\n               ITEM_DARK_ARMOR,\n               ITEM_HEALING_MAIL,\n               ITEM_HOLY_MAIL,\n               ITEM_WALK_ARMOR,\n               ITEM_BRILLIANT_MAIL,\n               ITEM_MOJO_MAIL,\n               ITEM_FURY_PLATE,\n               ITEM_DRACULA_TUNIC,\n               ITEM_GODS_GARB,\n               ITEM_AXE_LORD_ARMOR,\n               ITEM_EMPTY_HEAD,\n               ITEM_SUNGLASSES,\n               ITEM_BALLROOM_MASK,\n               ITEM_BANDANNA,\n               ITEM_FELT_HAT,\n               ITEM_VELVET_HAT,\n               ITEM_GOGGLES,\n               ITEM_LEATHER_HAT,\n               ITEM_HOLY_GLASSES,\n               ITEM_STEEL_HELM,\n               ITEM_STONE_MASK,\n               ITEM_CIRCLET,\n               ITEM_GOLD_CIRCLET,\n               ITEM_RUBY_CIRCLET,\n               ITEM_OPAL_CIRCLET,\n               ITEM_TOPAZ_CIRCLET,\n               ITEM_BERYL_CIRCLET,\n               ITEM_CAT_EYE_CIRCLET,\n               ITEM_CORAL_CIRCLET,\n               ITEM_DRAGON_HELM,\n               ITEM_SILVER_CROWN,\n               ITEM_WIZARD_HAT,\n               ITEM_NO_CAPE,\n               ITEM_CLOTH_CAPE,\n               ITEM_REVERSE_CLOAK,\n               ITEM_ELVEN_CLOAK,\n               ITEM_CRYSTAL_CLOAK,\n               ITEM_ROYAL_CLOAK,\n               ITEM_BLOOD_CLOAK,\n               ITEM_JOSEPHS_CLOAK,\n               ITEM_TWILIGHT_CLOAK,\n               ITEM_NO_ACCESSORY,\n               ITEM_MOONSTONE,\n               ITEM_SUNSTONE,\n               ITEM_BLOODSTONE,\n               ITEM_STAUROLITE,\n               ITEM_RING_OF_PALES,\n               ITEM_ZIRCON,\n               ITEM_AQUAMARINE,\n               ITEM_TURQUOISE,\n               ITEM_ONYX,\n               ITEM_GARNET,\n               ITEM_OPAL,\n               ITEM_DIAMOND,\n               ITEM_LAPIS_LAZULI,\n               ITEM_RING_OF_ARES,\n               ITEM_GOLD_RING,\n               ITEM_SILVER_RING,\n               ITEM_RING_OF_VARDA,\n               ITEM_RING_OF_ARCANA,\n               ITEM_MYSTIC_PENDANT,\n               ITEM_HEART_BROACH,\n               ITEM_NECKLACE_OF_J,\n               ITEM_GAUNTLET,\n               ITEM_ANKH_OF_LIFE,\n               ITEM_RING_OF_FEANOR,\n               ITEM_MEDAL,\n               ITEM_TALISMAN,\n               ITEM_DUPLICATOR,\n               ITEM_KINGS_STONE,\n               ITEM_COVENANT_STONE,\n               ITEM_NAUGLAMIR,\n               ITEM_SECRET_BOOTS,\n               ITEM_ALUCART_MAIL,\n               NUM_BODY_ITEMS,\n} BodyItems;\nvoid EntityBreakable(Entity*);\nvoid EntityExplosion(Entity*);\nvoid EntityPrizeDrop(Entity*);\nvoid EntityNumericDamage(Entity*);\nvoid EntityRedDoor(Entity*);\nvoid EntityIntenseExplosion(Entity*);\nvoid EntitySoulStealOrb(Entity*);\nvoid EntityRoomForeground(Entity*);\nvoid EntityStageNamePopup(Entity*);\nvoid EntityEquipItemDrop(Entity*);\nvoid EntityRelicOrb(Entity*);\nvoid EntityHeartDrop(Entity*);\nvoid EntityEnemyBlood(Entity*);\nvoid EntityMessageBox(Entity*);\nvoid EntityDummy(Entity*);\ntypedef enum { MONO_SOUND, STEREO_SOUND } soundMode;\ntypedef struct {\n              u16 posX;\n              u16 posY;\n              u16 entityId;\n              u16 entityRoomIndex;\n              u16 params;\n} LayoutEntity;\nextern PfnEntityUpdate PfnEntityUpdates[];\nextern u16 g_ItemIconSlots[0x20];\nextern u16 UNK_Invincibility0[];\ns32 Random();\nvoid Update(void);\nvoid CreateEntityFromEntity(u16 entityId, Entity* source, Entity* entity);\nvoid CreateEntityFromLayout(Entity* entity, LayoutEntity* initDesc);\nvoid DestroyEntity(Entity*);\nvoid DestroyEntityFromIndex(s16 index);\ns32 AnimateEntity(const u8 frames[], Entity* entity);\nvoid MoveEntity();\nvoid FallEntity(void);\nEntity* AllocEntity(Entity* start, Entity* end);\nvoid InitializeEntity(u16 arg0[]);\ntypedef struct {\n                struct DIRENTRY entries[(15)];\n                u32 unk258;\n                u32 unk25C;\n                u32 nBlockUsed;\n                s32 nFreeBlock;\n                u8 blocks[(15)];\n} MemcardInfo;\nextern MemcardInfo g_MemcardInfo[2];\nextern s32 g_MemcardBlockRead;\ntypedef enum {\n    MAIN_MENU_CURSOR_INVALID = -1,\n    MAIN_MENU_CURSOR_FILE_SELECT,\n    MAIN_MENU_CURSOR_NAME_CHANGE,\n    MAIN_MENU_CURSOR_FILE_COPY,\n    MAIN_MENU_CURSOR_FILE_DELETE,\n} MainMenuCursor;\ntypedef enum {\n    GFX_UNK_0 = 0,\n    GFX_UNK_1,\n    GFX_FILE_SELECT,\n    GFX_FILE_DELETE,\n    GFX_NAME_CHANGE,\n    GFX_FILE_COPY,\n    GFX_UNK_6,\n    GFX_WND_SAVE_SUMMARY = 11,\n    GFX_UNK_12,\n    GFX_WND_CARD_1,\n    GFX_WND_CARD_2,\n    GFX_UNK_15,\n    GFX_UNK_16,\n    GFX_UNK_17,\n    GFX_UNK_18,\n    GFX_UNK_19,\n    GFX_UNK_20,\n    NUM_GFX,\n} MenuGfx;\ntypedef struct {\n    s32 unk0;\n    s32 unk4;\n    s32 unk8;\n    s32* unkC;\n    s32 unk10;\n    s32 unk14;\n    s16 unk18;\n    s16 unk1A;\n    s16 unk1C;\n    s16 unk1E;\n    s16 unk20;\n    s16 unk22;\n    s16 unk24;\n    s16 unk26;\n    s32 unk28;\n    s16 unk2C;\n    s16 unk2E;\n    s16 unk30;\n    s16 unk32;\n    s32 unk34;\n} Unkstruct_801B9B7C;\ntypedef struct {\n    s32 unk00[16];\n    s32 unk10[16];\n    s32 unk20[32];\n} Unkstruct_801BA498;\ntypedef struct {\n                   s32 icon[(15)];\n                   u32 slot[(15)];\n                   u32 stage[(15)];\n                   u32 roomX[(15)];\n                   u32 roomY[(15)];\n                   u32 level[(15)];\n                   u32 gold[(15)];\n                   u32 nRoomsExplored[(15)];\n                   u32 playHours[(15)];\n                   u32 playSeconds[(15)];\n                   u32 playMinutes[(15)];\n                   u32 kind[(15)];\n                   u32 character[(15)];\n                   char name[(15)][10];\n    s32 padding;\n} SaveSummary;\nextern const s32 D_801A7B8C[2];\nextern s32 D_801BAF08;\nextern s32 D_801BAF20;\nextern s32 D_801BAF30;\nextern s32 D_801BB010;\nextern s32 D_801BB014;\nextern s32 g_InputCursorPos;\nextern void* g_Cluts[];\nextern void* g_EntityGfxs[];\nextern s16** g_SpriteBanks[];\nextern void* D_8018C404;\nextern u8 g_InputSaveName[9];\nextern s32 D_80180040[];\nextern s32 D_80180054[];\nextern u8* D_801803A8;\nextern u8* D_801803AC;\nextern u8* D_801803B0;\nextern u8* D_801803B4;\nextern u8* D_801803BC;\nextern u8* D_801803C0;\nextern u8* D_801803C4;\nextern u8* D_801803D0[];\nextern s32 D_80180454[];\nextern const u8* D_80180468;\nextern u8 D_8018046C[0x20 * 3];\nextern s32 D_801804D0;\nextern u8 D_801804D4[];\nextern s32 D_801804D8[];\nextern u8 D_80180504[];\nextern u8 D_80180528[];\nextern u8 D_80180564[];\nextern u8 D_80180578[];\nextern u8 D_80180580[];\nextern const char* D_801808D0[];\nextern s32 g_UnkMemcardPort[2];\nextern u16 g_saveIconPalette[0x10][0x10];\nextern u8* g_saveIconTexture[];\nextern s8 D_801823A0[];\nextern RECT D_80182584;\nextern RECT D_8018258C;\nextern RECT D_801825A4;\nextern s32 D_801962F4;\nextern s32 D_801962F8[16];\nextern s32 D_80196338[16];\nextern s32 D_80196378;\nextern s32 D_8019637C[32];\nextern volatile u32* D_801963FC;\nextern volatile u32* D_80196400;\nextern volatile u32* D_80196404;\nextern volatile u32* D_80196408;\nextern volatile u32* D_8019640C;\nextern volatile u32* D_80196410;\nextern volatile u32* D_8019642C;\nextern volatile u32* D_80196430;\nextern volatile u32* D_80196434;\nextern const u8 D_801A7748[];\nextern const u8 D_801A7754[12] ;\nextern s32 D_801A75A0[];\nextern s32 D_801A75C0[];\nextern const char D_801A7AF8[];\nextern const char D_801A7B08[];\nextern const char g_strMemcardRootPath[];\nextern const char g_MemcardSavePath[];\nextern const char D_801A802C[19];\nextern const char D_801ABF9C[];\nextern const char D_801ABFB8[];\nextern const char D_801ABFC8[];\nextern const char D_801ABFD8[];\nextern const char D_801AC000[];\nextern const char D_801AC038[];\nextern s32 D_801BAF10;\nextern s32 D_801BAF14;\nextern s32 D_801BAF18[][2];\nextern s32 D_801BAF48;\nextern s32 D_801BAFC0;\nextern s32 D_801BAFC4;\nextern u8* D_801BAFD0;\nextern s32 D_801BAFD4;\nextern s32 D_801BAFD8;\nextern s32 D_801BAFDC;\nextern s32 D_801BAFE0;\nextern u32 D_801BAFE4;\nextern s32 D_801BAFE8;\nextern s32 g_memCardRStep;\nextern s32 g_memCardRStepSub;\nextern s32 g_memCardRetryCount;\nextern s32 D_801BAFFC;\nextern s32 D_801BB000;\nextern s32 D_801BB004;\nextern s32 D_801BB008;\nextern s32 D_801BB00C;\nextern s32 g_MemcardRetryCount;\nextern s32 g_MemcardFd;\nextern s32 D_801BC340;\nextern s32 D_801BC344;\nextern s16 D_801BC35A;\nextern u16 D_801BC35C;\nextern s16 D_801BC35E;\nextern s16 D_801BC360;\nextern s16 D_801BC362;\nextern s16 D_801BC366;\nextern s8 D_801BC36A;\nextern s8 D_801BC36B;\nextern s16 D_801BC390;\nextern s16 D_801BC392;\nextern s32 D_801BC394;\nextern u32 D_801BC398[];\nextern s32 D_801BC3D4[];\nextern s32 g_MemCardSelectorX;\nextern s32 g_MemCardSelectorY;\nextern s32 D_801BC3E0;\nextern s32 D_801BC3E4;\nextern s32 D_801BC3E8;\nextern s32 D_801BC3EC;\nextern s32 D_801BC650;\nextern s32 D_801BC8C8;\nextern SaveSummary g_SaveSummary[(2)];\nextern s32 D_801BCC84[];\nextern s32 D_801BD02C;\nextern u32 D_801BD030;\nextern s32 D_801D6B04;\nextern s32 D_801D6B08;\nextern s32 D_801D6B0C;\nextern s32 g_MemcardBlockRead;\nextern s32 g_MemcardStep;\nextern s32 D_801D6B24;\nextern Dialogue g_Dialogue;\nvoid Update(void);\nvoid HandleMainMenu(void);\nvoid func_801ACBE4(s32 arg0, u16 arg1);\nvoid func_801AD1D0(void);\nvoid func_801AD218(void);\nvoid func_801B2670(POLY_GT4* poly, s32 x, s32 y, s32 width, s32 height);\nvoid DrawString16x16(const char* str, s32 x, s32 y, s32 tga);\nvoid DrawImages8x8(u8* imgs, s32 x, s32 y, s32 tge);\nvoid func_801B9C80(void);\nvoid InitRoomEntities(s32 objLayoutId);\nvoid func_801B60D4(void);\nvoid func_801B17C8(void);\nvoid func_801B1CFC(POLY_GT4* poly, s32 colorIntensity);\nvoid func_801B26A0(\n    POLY_GT4* poly, s32 x, s32 y, s32 width, s32 height, s32 u, s32 v);\nvoid func_801B1ED0();\nvoid func_801B3A54(s32, s32);\ns32 func_801B3A94(s32);\ns32 _card_event_x();\nvoid MemcardInit();\ns32 func_800E9880(s32, s32);\nvoid MDEC_rest(s32 option);\nvoid func_801BA880();\nvoid DecDCTvlc(s32, s32);\nextern s32 g_StreamWidth;\nextern int g_StreamHeight;\nextern u32 g_StreamEndFrame;\nextern u32 g_StreamIsRGB24;\nextern s32 g_StreamRewindSwitch[];\ntypedef struct {\n    u_long* vlcbuf[2];\n    int vlcid;\n    u_short* imgbuf[2];\n    int imgid;\n    RECT rect[2];\n    int rectid;\n    RECT slice;\n    int isdone;\n} DECENV;\ns32 func_801B9744(void) {\n    u8 res;\n    int ret;\n    if (CdSync(1, &res) == 0x00) {\n        return D_801BC344 = 0;\n    }\n    ret = CdLastCom();\n    if (ret >= 0x10 && ret <= 0x11 || !(res & 0x10)) {\n        CdControlF(1, (0));\n        return D_801BC344 = 0;\n    }\n    return D_801BC344 = 1;\n}\nu_long* StreamNext(DECENV* dec) {\n    u_long* addr;\n    StHEADER* sector;\n    int* rewindSwitch;\n    int count;\n    count = 0x40000;\n    while (StGetNext(&addr, &sector)) {\n        if (--count == 0) {\n            dec->isdone = 1;\n            return 0;\n        }\n    }\n    rewindSwitch = g_StreamRewindSwitch;\n    if (sector->frameCount >= g_StreamEndFrame) {\n        *rewindSwitch = 1;\n    }\n    g_StreamWidth = sector->width;\n    g_StreamHeight = sector->height;\n    dec->rect[0].w = dec->rect[1].w = count = g_StreamWidth * 3 / 2;\n    dec->rect[0].h = dec->rect[1].h = g_StreamHeight;\n    dec->slice.h = g_StreamHeight;\n    return addr;\n}\nvoid StreamNextVlc(DECENV* dec) {\n    const int WAIT_TIME = 4;\n    int count = WAIT_TIME;\n    u_long* next;\n    while ((next = StreamNext(dec)) == 0) {\n        if (--count == 0)\n            return;\n    }\n    D_801BC340++;\n    dec->vlcid = dec->vlcid ? 0 : 1;\n    DecDCTvlc(next, dec->vlcbuf[dec->vlcid]);\n    StFreeRing(next);\n}\nvoid func_801B9924(void) {\n    volatile u32 pad[4];\n    SetDispMask(0);\n    func_801B18F4();\n}\nvoid func_801B994C(DECENV* dec) {\n    volatile s32 retries = 0x40000;\n    while (dec->isdone == 0) {\n        if (--retries == 0) {\n            dec->isdone = 1;\n            dec->rectid = dec->rectid ? 0 : 1;\n            dec->slice.x = (s16)(u16)dec->rect[dec->rectid].x;\n            dec->slice.y = (s16)(u16)dec->rect[dec->rectid].y;\n        }\n    }\n    dec->isdone = 0;\n}\nvoid func_801B99E4(void);\n;\n;\nvoid func_801B9C18(s32 unused, void (*callback)()) {\n    const int START_FRAME = 1;\n    s32* s0 = g_StreamRewindSwitch;\n    func_801BA460(0);\n    *s0 = 0;\n    func_801BA6CC(callback);\n    StSetRing((s32)(s0 + 2), 0x28);\n    StSetStream(g_StreamIsRGB24, START_FRAME, -1, (0), (0));\n}\n      void func_801B18F4();\n      void func_801B19F4();\n      void func_801B9B7C(DECENV*, ?, ?, ?, s32);\nextern s32 D_8018B2EC;\nextern s32 D_801BC348;\nextern s32 D_801BC34C;\nextern s32 D_801BD03C;\nextern u8 D_801BD040;\nextern s32 D_801BD048;\nextern DECENV D_801D6A4C;\nextern s32 D_801D6A54;\nextern s32 D_801D6A60;\nextern s32 D_801D6A64;\nextern s32 D_801D6A66;\nextern s32 D_801D6A68;\nextern s32 D_801D6A6A;\nextern s32 D_801D6A74;\nextern s8 D_801D6A95;\nextern s16 D_801D6AF4;\nextern s16 D_801D6AF6;\nextern s16 D_801D6AF8;\nextern s16 D_801D6AFA;\nextern s32 D_801D6AFC;\nvoid func_801B9C80(void)\n{\n    u8 sp18;\n    DECENV* temp_s1_3;\n    DRAWENV* temp_s5;\n    s16 temp_v0;\n    s16 temp_v0_7;\n    s16 var_s2;\n    s16* temp_s0_2;\n    s16* temp_s1_2;\n    s32 temp_v0_10;\n    s32 temp_v0_2;\n    s32 temp_v0_3;\n    s32 temp_v0_4;\n    s32 temp_v0_5;\n    s32 temp_v0_6;\n    s32 temp_v0_8;\n    s32 temp_v0_9;\n    s32 var_s6;\n    s32 var_v0;\n    u32 temp_lo;\n    u32* temp_s1;\n    void* temp_s0;\n    var_s6 = 0;\n    if (D_8003C728 != 0) {\nloop_1:\n        var_s2 = 0x7F;\n        GsClearVcount();\n        temp_s0 = *(&D_8018B2EC + (D_8003C100 * 4));\n        g_StreamEndFrame = (u32) temp_s0->unk4;\n        temp_v0 = temp_s0->unk6;\n        g_StreamIsRGB24 = (u32) temp_v0;\n        D_801BD03C = temp_v0 | 2;\n        func_801B9B7C(&D_801D6A4C, 0, 0, 0, 0x100);\n        temp_s1 = &g_StreamEndFrame + 0xC;\n        CdIntToPos(temp_s0->unk0, (CdlLOC* ) temp_s1);\n        SsSetSerialVol(0, 0x7F, 0x7F);\n        SsSetSerialAttr(0, 0, 1);\n        func_801B9924();\n        DrawSync(0);\n        func_801B9C18((s32) temp_s1, func_801B99E4);\n        D_801BC340 = 0;\n        D_801BC348 = 0;\n        CdControlF(0x15U, (u8* ) temp_s1);\n        VSync(0);\n        if (func_801B9744() != 0) {\nblock_23:\n            func_801BA6CC((0));\n            StSetStream(1U, -1U, -1U, (0), (0));\n            StClearRing();\n            StUnSetRing();\n            D_801D6AF4 = 0x1E0;\n            D_801D6AF8 = 0x1E0;\n            D_801D6AF6 = 0;\n            D_801BC34C = 0;\n            D_801D6AFA = 0xF0;\n            MoveImage((D_801BD048.unk0 * 8) + (&D_801D6AF4 - 0x90), 0x1E0, 0);\n            DrawSync(0);\n            if (D_8003C728 == 3) {\n                D_801BC34C = D_8003C728;\n            }\n            temp_s1_2 = &D_801D6AF4 - 0x70;\n            temp_s0_2 = &D_801D6AF4 - 0x5C;\nloop_26:\n            D_801D6AFC += 1;\n            switch (D_801BC34C) {\n                case 0:\n                    CdControl(1U, (0), &sp18);\n                    if (!(sp18 & 0x10)) {\n                        CdControlF(0x13U, (0));\n                        D_801BC34C += 1;\n                    }\n                    break;\n                case 1:\n                    if ((CdSync(1, &sp18) ^ 2) == 0) {\n                        D_801BC34C += 1;\n                    }\n                    var_v0 = sp18 & 0x10;\n                    if (!(sp18 & 2)) {\n                        D_801BC34C = 0;\n                    }\nblock_39:\n                    if (var_v0 != 0) {\n                        D_801BC34C = 0;\n                    }\n                    break;\n                case 2:\n                    CdControl(1U, (0), &sp18);\n                    var_v0 = sp18 & 0x10;\n                    goto block_39;\n            }\n            VSync(0);\n            if (!(PadRead(1) & 0x800)) {\nblock_43:\n                temp_v0_2 = (D_801BD048.unk0 + 1) & 1;\n                D_801BD048.unk0 = temp_v0_2;\n                temp_v0_3 = temp_v0_2 * 8;\n                SetDefDispEnv((DISPENV* ) temp_s1_2, (s32) *(&D_801D6A64 + temp_v0_3), (s32) *(&D_801D6A66 + temp_v0_3), (s32) *(&D_801D6A68 + temp_v0_3), (s32) *(&D_801D6A6A + temp_v0_3));\n                temp_v0_4 = ((D_801BD048.unk0 + 1) & 1) * 8;\n                SetDefDrawEnv((DRAWENV* ) temp_s0_2, (s32) *(&D_801D6A64 + temp_v0_4), (s32) *(&D_801D6A66 + temp_v0_4), (s32) *(&D_801D6A68 + temp_v0_4), (s32) *(&D_801D6A6A + temp_v0_4));\n                if (D_801BD048.unk-10 == (s32) 1) {\n                    D_801D6A95 = 1;\n                    temp_s1_2->unk4 = (s16) ((temp_s1_2->unk4 * 2) / 3);\n                }\n                PutDispEnv((DISPENV* ) temp_s1_2);\n                PutDrawEnv((DRAWENV* ) temp_s0_2);\n                SetDispMask(1);\n                temp_v0_5 = ((D_801BD048.unk0 + 1) & 1) * 8;\n                MoveImage((RECT* ) (temp_s1_2 + 0x70), (s32) *(&D_801D6A64 + temp_v0_5), (s32) *(&D_801D6A66 + temp_v0_5));\n                goto loop_26;\n            }\n            if (D_801BC34C < 2) {\n                goto block_43;\n            }\n            func_801B9924();\n            D_8003C728 = 1;\n            goto loop_1;\n        }\n        do {\nloop_3:\n            if (CdControl(2U, &D_801BD040, (0)) == 0) {\n                goto loop_3;\n            }\n            if (func_801B9744() != 0) {\n                goto block_23;\n            }\n            temp_v0_6 = D_801BC348 + 1;\n            D_801BC348 = temp_v0_6;\n            if (temp_v0_6 >= 0x21) {\n                D_8003C728 = 3;\n                goto block_23;\n            }\n        } while (CdRead2(0x1C0) == 0);\n        StreamNextVlc(&D_801D6A4C);\n        temp_s1_3 = &D_801D6A4C + 0x38;\n        temp_s5 = &D_801D6A4C + 0x4C;\nloop_10:\n        GsClearVcount();\n        func_801BA5CC((s32* ) D_801D6A4C.vlcbuf[D_801D6A54], D_801BD03C);\n        temp_lo = D_801D6A4C.slice.w * D_801D6A4C.slice.h;\n        func_801BA648(D_801D6A4C.vlcbuf[D_801D6A60].unkC, (u32) ((s32) (temp_lo + (temp_lo >> 0x1F)) >> 1));\n        StreamNextVlc(&D_801D6A4C);\n        func_801B994C(&D_801D6A4C);\n        VSync(0);\n        temp_v0_7 = var_s2 - 0x20;\n        if (var_s6 != 0) {\n            var_s2 = temp_v0_7;\n            if ((temp_v0_7 << 0x10) <= 0) {\n                var_s2 = 0;\n                SsSetSerialVol(0, 0, 0);\n                SsSetSerialAttr(0, 0, 0);\n                *g_StreamRewindSwitch = 1;\n            }\n            SsSetSerialVol(0, var_s2, var_s2);\n        }\n        temp_v0_8 = D_801D6A74 == 0;\n        D_801BD048.unk0 = temp_v0_8;\n        temp_v0_9 = temp_v0_8 * 8;\n        SetDefDispEnv((DISPENV* ) temp_s1_3, (s32) *(&D_801D6A64 + temp_v0_9), (s32) *(&D_801D6A66 + temp_v0_9), (s32) *(&D_801D6A68 + temp_v0_9), (s32) *(&D_801D6A6A + temp_v0_9));\n        temp_v0_10 = D_801BD048.unk0 * 8;\n        SetDefDrawEnv(temp_s5, (s32) *(&D_801D6A64 + temp_v0_10), (s32) *(&D_801D6A66 + temp_v0_10), (s32) *(&D_801D6A68 + temp_v0_10), (s32) *(&D_801D6A6A + temp_v0_10));\n        if (D_801BD048.unk-10 == 1) {\n            D_801D6A95 = (s8) 1;\n            temp_s1_3->unk4 = (s16) ((temp_s1_3->unk4 * 2) / 3);\n        }\n        PutDispEnv((DISPENV* ) temp_s1_3);\n        PutDrawEnv(temp_s5);\n        SetDispMask(1);\n        if (func_801B9744() != 0) {\n            goto block_23;\n        }\n        if (D_801BD048.unk-4 != 1) {\n            if (PadRead(1) & 0x840) {\n                var_s6 = 1;\n            }\n            goto loop_10;\n        }\n        D_8003C728 = 0;\n        if (func_801B9744() != 0) {\n            D_8006C384 = 1;\n            goto block_23;\n        }\n        CdControlF(9U, (0));\n        D_801BC348 = 0;\n        func_801BA6CC((0));\n        StSetStream(1U, -1U, -1U, (0), (0));\n        StUnSetRing();\n        func_801B18F4();\n        DrawSync(0);\n        func_801B19F4();\n        PutDispEnv(&g_CurrentBuffer->disp);\n        PutDrawEnv(&g_CurrentBuffer->draw);\n        VSync(0);\n        VSync(0);\n    }\n}\nvoid func_801BA460(s32 option) {\n    if (option == 0) {\n        ResetCallback();\n    }\n    MDEC_rest(option);\n}\ns32* func_801BA498(Unkstruct_801BA498* arg0) {\n    s32 i;\n    s32 *src1, *dst1;\n    s32 *src2, *dst2;\n    s32 *src3, *dst3;\n    dst1 = &arg0->unk00;\n    src1 = D_801962F8;\n    for (i = 15; i != -1; i--) {\n        *dst1++ = *src1++;\n    }\n    dst2 = &arg0->unk10;\n    src2 = D_80196338;\n    for (i = 15; i != -1; i--) {\n        *dst2++ = *src2++;\n    }\n    dst3 = &arg0->unk20;\n    src3 = D_8019637C;\n    for (i = 31; i != -1; i--) {\n        *dst3++ = *src3++;\n    }\n    return arg0;\n}\ns32* func_801BA524(Unkstruct_801BA498* arg0) {\n    s32 i;\n    s32 *src1, *dst1;\n    s32 *src2, *dst2;\n    dst1 = D_801962F8;\n    src1 = &arg0->unk00;\n    for (i = 15; i != -1; i--) {\n        *dst1++ = *src1++;\n    }\n    dst2 = D_80196338;\n    src2 = &arg0->unk10;\n    for (i = 15; i != -1; i--) {\n        *dst2++ = *src2++;\n    }\n    func_801BA7EC(&D_801962F4, 0x20);\n    func_801BA7EC(&D_80196378, 0x20);\n    return arg0;\n}\nu16 func_801BA5C0(u16* arg0) { return *arg0; }\nvoid func_801BA5CC(s32* arg0, s32 arg1) {\n    s32 new_var2;\n    s32 var_v0;\n    s32 var_v0_2;\n    if (arg1 & 1) {\n        var_v0 = (*arg0) & 0xF7FFFFFF;\n    } else {\n        new_var2 = 0x08000000;\n        var_v0 = 0x08000000;\n        var_v0 = (*arg0) | var_v0;\n    }\n    *arg0 = var_v0;\n    var_v0 = 0x02000000;\n    if (arg1 & 2) {\n        new_var2 = var_v0;\n        var_v0_2 = (*arg0) | new_var2;\n    } else {\n        var_v0_2 = (*arg0) & 0xFDFFFFFF;\n    }\n    *arg0 = var_v0_2;\n    func_801BA7EC(arg0, *(u16*)arg0);\n}\nvoid func_801BA648(s32 arg0, u32 arg1) { func_801BA880(arg0, arg1); }\nvoid func_801BA668(void) { MDEC_in_sync(); }\nvoid func_801BA688(void) { MDEC_out_sync(); }\nvoid func_801BA6A8(void (*func)()) { DMACallback(0, func); }\nvoid func_801BA6CC(void (*func)()) { DMACallback(1, func); }\nvoid MDEC_rest(s32 option) {\n    switch (option) {\n    case 0:\n        *D_80196430 = 0x80000000;\n        *D_80196404 = 0;\n        *D_80196410 = 0;\n        *D_80196430 = 0x60000000;\n        func_801BA7EC(&D_801962F4, 0x20);\n        func_801BA7EC(&D_80196378, 0x20);\n        return;\n    case 1:\n        *D_80196430 = 0x80000000;\n        *D_80196404 = 0;\n        *D_80196410 = 0;\n        *D_80196410;\n        *D_80196430 = 0x60000000;\n        return;\n    default:\n        printf(\"MDEC_rest:bad option(%d)\\n\", option);\n        return;\n    }\n}\nvoid func_801BA7EC(s32* arg0, u32 arg1) {\n    MDEC_in_sync();\n    *D_80196434 |= 0x88;\n    *D_801963FC = arg0 + 1;\n    *D_80196400 = ((arg1 >> 5) << 0x10) | 0x20;\n    *D_8019642C = *arg0;\n    *D_80196404 = 0x01000201;\n}\nvoid func_801BA880(s32 arg0, u32 arg1) {\n    MDEC_out_sync();\n    *D_80196434 |= 0x88;\n    *D_80196410 = 0;\n    *D_80196408 = arg0;\n    *D_8019640C = ((arg1 >> 5) << 0x10) | 0x20;\n    *D_80196410 = 0x01000200;\n}\nint MDEC_in_sync(void) {\n    volatile s32 retries = 0x100000;\n    if (*D_80196430 & 0x20000000) {\n        while (true) {\n            if (--retries == -1) {\n                MDEC_print_error(\"MDEC_in_sync\");\n                return -1;\n            }\n            if (!(*D_80196430 & 0x20000000)) {\n                break;\n            }\n        }\n    }\n    return 0;\n}\nint MDEC_out_sync(void) {\n    volatile s32 retries = 0x100000;\n    while (*D_80196410 & 0x01000000) {\n        if (--retries == -1) {\n            MDEC_print_error(\"MDEC_out_sync\");\n            return -1;\n        }\n    }\n    return 0;\n}\nconst char g_MDEC_ErrDma[] = \"\\t DMA=(%d,%d), ADDR=(0x%08x->0x%08x)\\n\";\nconst char g_MDEC_ErrFifo[] =\n    \"\\t FIFO=(%d,%d),BUSY=%d,DREQ=(%d,%d),RGB24=%d,STP=%d\\n\";\nconst char g_MDEC_ErrTimeout[] = \"%s timeout:\\n\";\nint MDEC_print_error(const char* funcName) {\n    u32 temp_s0;\n    printf(g_MDEC_ErrTimeout, funcName);\n    temp_s0 = *D_80196430;\n    printf(g_MDEC_ErrDma, (*D_80196404 >> 0x18) & 1, (*D_80196410 >> 0x18) & 1,\n           *D_801963FC, *D_80196408);\n    printf(g_MDEC_ErrFifo, ~temp_s0 >> 0x1F, (temp_s0 >> 0x1E) & 1,\n           (temp_s0 >> 0x1D) & 1, (temp_s0 >> 0x1C) & 1, (temp_s0 >> 0x1B) & 1,\n           (temp_s0 >> 0x19) & 1, (temp_s0 >> 0x17) & 1);\n    *D_80196430 = 0x80000000;\n    *D_80196404 = 0;\n    *D_80196410 = 0;\n    *D_80196410;\n    *D_80196430 = 0x60000000;\n    return 0;\n}\n;\n;", "diff_flags": [], "diff_label": "func_801B9C80", "libraries": []}