{"compiler": "psyq4.1", "compiler_flags": "-O2 -G0", "source_code": "int cat_in_800DFB5C( P_TAG *arg0, P_TAG *arg1 )\n{\n    int length;\n\n    length = arg0->len + arg1->len + 1;\n\n    if ( length > 16 )\n    {\n        return -1;\n    }\n    \n    arg0->len = length;\n    LSTORE(0, arg1);\n\n    return 0;\n}\n", "context": "#define GM_Items (&linkvarbuf[ 37 ])\n#define gte_sttr(r0) __asm__ volatile(\"cfc2   $12, $5;\" \"cfc2   $13, $6;\" \"cfc2   $14, $7;\" \"sw     $12, 0( %0 );\" \"sw     $13, 4( %0 );\" \"sw     $14, 8( %0 )\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\", \"memory\")\n#define SR_CM 0x00080000\n#define dumpXY3(p) GPU_printf(\"(%d,%d)-(%d,%d)-(%d,%d)\\n\", (p)->x0, (p)->y0, (p)->x1, (p)->y1, (p)->x2, (p)->y2)\n#define SR_FMT \"\\20\\40BD\\26TS\\25PE\\24CM\\23PZ\\22SwC\\21IsC\\20IM7\\17IM6\\16IM5\\15IM4\\14IM3\\13IM2\\12IM1\\11IM0\\6KUo\\5IEo\\4KUp\\3IEp\\2KUc\\1IEc\"\n#define SPU_1CH SPU_01CH\n#define _MENUMAN_H \n#define LINKER_H_ \n#define SPU_VOICE_ADSR_AR (0x01 << 11)\n#define HASH_CMD_rand 0x925e\n#define GCLCODE_BOOL 4\n#define EvSpINT 0x0002\n#define GM_TranquilizerFlag linkvarbuf[ 52 ]\n#define InfoModeIdTable 4\n#define R_CAUSE 36\n#define R_R27 27\n#define C0_CTXT $4\n#define KMD_GAS_MASK 0x4244\n#define gte_FlipTRX() __asm__ volatile(\"cfc2   $12, $5;\" \"nop;\" \"subu   $12, $0, $12;\" \"ctc2   $12, $5\" : : : \"$12\")\n#define CdPause() CdControl(CdlPause, 0, 0)\n#define K0BASE 0x80000000\n#define gte_ldrgb3(r0,r1,r2) __asm__ volatile(\"lwc2   $20, 0( %0 );\" \"lwc2   $21, 0( %1 );\" \"lwc2   $22, 0( %2 );\" \"lwc2   $6, 0( %2 )\" : : \"r\"(r0), \"r\"(r1), \"r\"(r2))\n#define dumpMatrix(x) GPU_printf(\"\\t%5d,%5d,%5d\\n\",(x)->m[0][0],(x)->m[0][1],(x)->m[0][2]), GPU_printf(\"\\t%5d,%5d,%5d\\n\",(x)->m[1][0],(x)->m[1][1],(x)->m[1][2]), GPU_printf(\"\\t%5d,%5d,%5d\\n\",(x)->m[2][0],(x)->m[2][1],(x)->m[2][2])\n#define EvSpNEW 0x2000\n#define CdlDataEnd 0x04\n#define gte_ldopv2SV(r0) __asm__ volatile(\"lh     $12, 0( %0 );\" \"lh     $13, 2( %0 );\" \"lh     $14, 4( %0 );\" \"mtc2   $12, $9;\" \"mtc2   $13, $10;\" \"mtc2   $14, $11\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\")\n#define HwCARD_0 (DescHW|0x12)\n#define SPU_ST_ERROR (-1)\n#define PadMaxCurr 60\n#define SPU_VOICE_ADSR_DR (0x01 << 12)\n#define gte_rtpt() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0280030;\")\n#define gte_llv2tr_b() __asm__ volatile(\"cop2 0x04B0012;\")\n#define BODY_FLAG ( DG_FLAG_TEXT | DG_FLAG_TRANS | DG_FLAG_GBOUND | DG_FLAG_SHADE | DG_FLAG_AMBIENT | DG_FLAG_IRTEXTURE)\n#define HEADER_SIZE (8)\n#define CdlNop 0x01\n#define setTile(p) setlen(p, 3), setcode(p, 0x60)\n#define RDCODE_MEMSAVE 5\n#define gte_stsxy(r0) __asm__ volatile(\"swc2   $14, 0( %0 )\" : : \"r\"(r0) : \"memory\")\n#define SPU_COMMON_CDVOLR (0x01 << 7)\n#define SPU_ALLCH (SPU_00CH | SPU_01CH | SPU_02CH | SPU_03CH | SPU_04CH | SPU_05CH | SPU_06CH | SPU_07CH | SPU_08CH | SPU_09CH | SPU_10CH | SPU_11CH | SPU_12CH | SPU_13CH | SPU_14CH | SPU_15CH | SPU_16CH | SPU_17CH | SPU_18CH | SPU_19CH | SPU_20CH | SPU_21CH | SPU_22CH | SPU_23CH)\n#define RCntMdFR 0x0000\n#define makedev(x,y) ((dev_t)(((x)<<8) | (y)))\n#define GM_ScopeFlag linkvarbuf[ 38 ]\n#define GM_ChaffGrenadeFlag linkvarbuf[ 25 ]\n#define GM_TotalRationsUsed linkvarbuf[ 86 ]\n#define setlen(p,_len) (((P_TAG *)(p))->len = (u_char)(_len))\n#define SpuGetTransMode() SpuGetTransferMode()\n#define EXC_BREAK EXC_CODE(9)\n#define gte_Square12(r1,r2) { gte_ldlvl(r1); gte_sqr12(); gte_stlvnl(r2); }\n#define SPU_CONT 7\n#define PCC_READ 0xa0be\n#define _FONT_H_ \n#define EXC_II EXC_CODE(10)\n#define GM_ItemsMax (GM_Items + 11)\n#define CdlForward 0x04\n#define gte_ldbv(r0) __asm__ volatile(\"lbu    $12, 0( %0 );\" \"lbu    $13, 1( %0 );\" \"mtc2   $12, $9;\" \"mtc2   $13, $10\" : : \"r\"(r0) : \"$12\", \"$13\")\n#define C0_PRID $15\n#define setTexWindow(p,tw) setlen(p, 2), ((u_long *)(p))[1] = _get_tw(tw), ((u_long *)(p))[2] = 0\n#define GAME_FLAG_BIT_16 0x8000\n#define GAME_FLAG_BIT_17 0x10000\n#define HASH_ENTER 0x0dd2\n#define _HZD_H_ \n#define GAME_FLAG_BIT_19 0x40000\n#define __SPU_ST_TRANSFERCALLBACK_PROC \n#define getaddr(p) (u_long)(((P_TAG *)(p))->addr)\n#define gte_dpct_b() __asm__ volatile(\"cop2 0x0F8002A;\")\n#define C0_READI 0x1\n#define _ASM_H \n#define CdlGetTN 0x13\n#define SPU_MALLOC_RECSIZ 8\n#define getScratchAddr(offset) ((u_long *)(0x1f800000+(offset)*4))\n#define gte_llv1_b() __asm__ volatile(\"cop2 0x04AE012;\")\n#define MINCACHE +(4*1024)\n#define SR_PE 0x00100000\n#define SR_PZ 0x00040000\n#define IS_KSEG1(x) ((unsigned)(x) >= K1BASE && (unsigned)(x) < K2BASE)\n#define gte_LoadAverageCol(r1,r2,r3,r4,r5) { gte_lddp(r3); gte_ldcv(r1); gte_gpf12(); gte_lddp(r4); gte_ldcv(r2); gte_gpl12(); gte_stcv(r5); }\n#define gte_sqr12_b() __asm__ volatile(\"cop2 0x0A80428;\")\n#define EvStACTIVE 0x2000\n#define GM_CurrentWeapon (GM_Weapons[ GM_CurrentWeaponId ])\n#define gte_ldfc(r0) __asm__ volatile(\"lw     $12, 0( %0 );\" \"lw     $13, 4( %0 );\" \"lw     $14, 8( %0 );\" \"ctc2   $12, $21;\" \"ctc2   $13, $22;\" \"ctc2   $14, $23\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\")\n#define _VIBRATE_H_ \n#define gte_Intpl(r1,r2,r3) { gte_ldlvl(r1); gte_lddp(r2); gte_intpl(); gte_strgb(r3); }\n#define gte_rtv1bk() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x048A012;\")\n#define SPU_ST_START 5\n#define SPU_ST_NOT_AVAILABLE 0\n#define EvSpERROR 0x8000\n#define SPU_ST_VAG_HEADER_SIZE 0x30\n#define HASH_CMD_eval 0x64c0\n#define HASH_PAN2 0x922b\n#define gte_lcv1tr_b() __asm__ volatile(\"cop2 0x04C8012;\")\n#define gte_llv1bk() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04AA012;\")\n#define EXC_OV EXC_CODE(12)\n#define gte_ldsv(r0) __asm__ volatile(\"lhu    $12, 0( %0 );\" \"lhu    $13, 2( %0 );\" \"lhu    $14, 4( %0 );\" \"mtc2   $12, $9;\" \"mtc2   $13, $10;\" \"mtc2   $14, $11\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\")\n#define SR_TS 0x00200000\n#define SPU_10CH (0x1L<<10)\n#define dumpXY0(p) GPU_printf(\"(%d,%d)\\n\", (p)->x0, (p)->y0)\n#define SPU_VOICE_ADSR_RR (0x01 << 14)\n#define dumpXY2(p) GPU_printf(\"(%d,%d)-(%d,%d)\\n\", (p)->x0, (p)->y0, (p)->x1, (p)->y1)\n#define gte_ldclmv(r0) __asm__ volatile(\"lhu    $12, 0( %0 );\" \"lhu    $13, 6( %0 );\" \"lhu    $14, 12( %0 );\" \"mtc2   $12, $9;\" \"mtc2   $13, $10;\" \"mtc2   $14, $11\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\")\n#define SPU_VOICE_ADSR_AMODE (0x01 << 8)\n#define gte_llirtr_b() __asm__ volatile(\"cop2 0x04B8012;\")\n#define dumpXY4(p) GPU_printf(\"(%d,%d)-(%d,%d)-(%d,%d)-(%d,%d)\\n\", (p)->x0, (p)->y0, (p)->x1, (p)->y1, (p)->x2, (p)->y2, (p)->x3, (p)->y3)\n#define R_R10 10\n#define R_R12 12\n#define R_R13 13\n#define R_R14 14\n#define R_R15 15\n#define R_R16 16\n#define R_R18 18\n#define SPU_ST_PLAY 6\n#define R_R20 20\n#define R_R23 23\n#define R_R24 24\n#define R_R25 25\n#define R_R28 28\n#define R_R29 29\n#define RCntMdSC 0x0001\n#define RCntMdSP 0x0000\n#define SPU_05CH (0x1L<< 5)\n#define SR_CU2 0x40000000\n#define R_R30 30\n#define R_R31 31\n#define _sna_H_ \n#define RDCODE_RANDSWITCH_CASE 0x31\n#define SPU_COMMON_MVOLMODEL (0x01 << 2)\n#define setUVWH(p,_u0,_v0,_w,_h) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u0)+(_w), (p)->v1 = (_v0), (p)->u2 = (_u0), (p)->v2 = (_v0)+(_h), (p)->u3 = (_u0)+(_w), (p)->v3 = (_v0)+(_h)\n#define R_K1 R_R27\n#define gte_ldv3c(r0) __asm__ volatile(\"lwc2   $0, 0( %0 );\" \"lwc2   $1, 4( %0 );\" \"lwc2   $2, 8( %0 );\" \"lwc2   $3, 12( %0 );\" \"lwc2   $4, 16( %0 );\" \"lwc2   $5, 20( %0 )\" : : \"r\"(r0))\n#define gte_llv1tr_b() __asm__ volatile(\"cop2 0x04A8012;\")\n#define C0_SR $12\n#define SPU_5CH SPU_05CH\n#define SPU_VOICE_SAMPLE_NOTE (0x01 << 6)\n#define gte_stsz4(r0,r1,r2,r3) __asm__ volatile(\"swc2   $16, 0( %0 );\" \"swc2   $17, 0( %1 );\" \"swc2   $18, 0( %2 );\" \"swc2   $19, 0( %3 )\" : : \"r\"(r0), \"r\"(r1), \"r\"(r2), \"r\"(r3) : \"memory\")\n#define GM_ShapeKeyState linkvarbuf[ 65 ]\n#define MAXCACHE +(64*1024)\n#define NF_SOFTFP 6\n#define NF_BADADDR 1\n#define SGT_MASK 0x1303\n#define CdlReadN 0x06\n#define mts_assert(lineNum,...) mts_printf_8008BBA0( \"assertion faled : %s line %d : Task %d\\n\", \"mts_new.c\", lineNum, gTaskIdx_800C0DB0 ); mts_printf_8008BBA0( __VA_ARGS__ ); mts_printf_8008BBA0( \"\\n\" ); mts_print_process_status_8008B77C();\n#define CdlReadS 0x1B\n#define _BOMB_H_ \n#define gte_DpqColor3(r1,r2,r3,r4,r5,r6,r7) { gte_ldrgb3(r1,r2,r3); gte_lddp(r4); gte_dpct(); gte_strgb3(r5,r6,r7); }\n#define GM_BombMax linkvarbuf[ 33 ]\n#define GAME_FLAG_BIT_20 0x80000\n#define GAME_FLAG_BIT_21 0x100000\n#define gte_ldsxy3c(r0) __asm__ volatile(\"lwc2   $12, 0( %0 );\" \"lwc2   $13, 4( %0 );\" \"lwc2   $14, 8( %0 )\" : : \"r\"(r0))\n#define SPU_ST_WRONG_STATUS (-3)\n#define GM_ShapeKeyTempMax linkvarbuf[ 67 ]\n#define GAME_FLAG_BIT_23 0x400000\n#define HwCPU (DescHW|0x10)\n#define GAME_FLAG_BIT_25 0x1000000\n#define getcode(p) (u_char)(((P_TAG *)(p))->code)\n#define HASH_CMD_str_status 0xe43c\n#define GAME_FLAG_BIT_28 0x8000000\n#define gte_ldv0(r0) __asm__ volatile(\"lwc2   $0, 0( %0 );\" \"lwc2   $1, 4( %0 )\" : : \"r\"(r0))\n#define gte_ldv1(r0) __asm__ volatile(\"lwc2   $2, 0( %0 );\" \"lwc2   $3, 4( %0 )\" : : \"r\"(r0))\n#define gte_ldv2(r0) __asm__ volatile(\"lwc2   $4, 0( %0 );\" \"lwc2   $5, 4( %0 )\" : : \"r\"(r0))\n#define flush lwr $0,\n#define SPU_VOICECH(x) SPU_KEYCH(x)\n#define gte_ldsxy0(r0) __asm__ volatile(\"mtc2   %0, $12\" : : \"r\"(r0))\n#define gte_ldsxy1(r0) __asm__ volatile(\"mtc2   %0, $13\" : : \"r\"(r0))\n#define gte_ldsxy3(r0,r1,r2) __asm__ volatile(\"mtc2   %0, $12;\" \"mtc2   %2, $14;\" \"mtc2   %1, $13\" : : \"r\"(r0), \"r\"(r1), \"r\"(r2))\n#define PADLup (1<<12)\n#define MODE_PAL 1\n#define SPU_INVALID_ARGS (-3)\n#define GM_UnkFlag00 linkvarbuf[ 0 ]\n#define GM_CurrentDiskFlag linkvarbuf[ 4 ]\n#define gte_gpl12() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x01A8003E;\")\n#define gte_lcv0bk() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04C2012;\")\n#define EvSpPERROR 0x8001\n#define GM_CardFlag linkvarbuf[ 54 ]\n#define SpuGetTransStartAddr() SpuGetTransferStartAddr()\n#define HASH_CMD_unk2 0xa2bf\n#define _get_mode(dfe,dtd,tpage) ((0xe1000000)|((dtd)?0x0200:0)| ((dfe)?0x0400:0)|((tpage)&0x9ff))\n#define EvMdNOINTR 0x2000\n#define gte_NormalColorCol(r1,r2,r3) { gte_ldv0(r1); gte_ldrgb(r2); gte_nccs(); gte_strgb(r3); }\n#define gte_rtv1tr() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0488012;\")\n#define gte_SetRotMatrix(r0) __asm__ volatile(\"lw     $12, 0( %0 );\" \"lw     $13, 4( %0 );\" \"ctc2   $12, $0;\" \"ctc2   $13, $1;\" \"lw     $12, 8( %0 );\" \"lw     $13, 12( %0 );\" \"lw     $14, 16( %0 );\" \"ctc2   $12, $2;\" \"ctc2   $13, $3;\" \"ctc2   $14, $4\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\")\n#define HwCNTL (DescHW|0x08)\n#define GM_LandMineFlag linkvarbuf[ 22 ]\n#define gte_llv1tr() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04A8012;\")\n#define MOUSEright (1<<2)\n#define _SIGHT_H_ \n#define GM_LandMineMax linkvarbuf[ 32 ]\n#define gte_SetTransVector(r0) __asm__ volatile(\"lw     $12, 0( %0 );\" \"lw     $13, 4( %0 );\" \"lw     $14, 8( %0 );\" \"ctc2   $12, $5;\" \"ctc2   $13, $6;\" \"ctc2   $14, $7\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\")\n#define KMD_NULL 0xe224\n#define GM_ShapeKeyTempMin linkvarbuf[ 68 ]\n#define SPU_ENV_EVENT_QUEUEING (0x01 << 0)\n#define gte_LoadAverage12(r1,r2,r3,r4,r5) { gte_lddp(r3); gte_ldlvl(r1); gte_gpf12(); gte_lddp(r4); gte_ldlvl(r2); gte_gpl12(); gte_stlvl(r5); }\n#define HASH_H \n#define SPU_CLEAR 2\n#define gte_lcv0() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04C6012;\")\n#define getTPage(tp,abr,x,y) ((((tp)&0x3)<<7)|(((abr)&0x3)<<5)|(((y)&0x100)>>4)|(((x)&0x3ff)>>6)| (((y)&0x200)<<2))\n#define __asm__(...) \n#define _ITEM_H_ \n#define EXCEPT_GDB 4\n#define StLOCK 0x0004\n#define gte_RotTransPers(r1,r2,r3,r4,r5) { gte_ldv0(r1); gte_rtps(); gte_stsxy(r2); gte_stdp(r3); gte_stflg(r4); gte_stszotz(r5); }\n#define SPU_0CH SPU_00CH\n#define GM_CardboardBoxCFlag linkvarbuf[ 41 ]\n#define HASH_CMD_sound 0x698d\n#define _DEMOTHRD_H_ \n#define SPU_VOICE_EXPIncN 5\n#define SPU_VOICE_EXPIncR 6\n#define CdlSeekL 0x15\n#define CONTROL_H \n#define CdlSeekP 0x16\n#define SPU_REV_MODE_CLEAR_WA 0x100\n#define K2SIZE 0x20000000\n#define gte_SetBackColor(r0,r1,r2) __asm__ volatile(\"sll    $12, %0, 4;\" \"sll    $13, %1, 4;\" \"sll    $14, %2, 4;\" \"ctc2   $12, $13;\" \"ctc2   $13, $14;\" \"ctc2   $14, $15\" : : \"r\"(r0), \"r\"(r1), \"r\"(r2) : \"$12\", \"$13\", \"$14\")\n#define GAME_FLAG_BIT_03 0x4\n#define GM_HandkerchiefFlag linkvarbuf[ 59 ]\n#define SR_KUP 0x00000008\n#define GAME_FLAG_BIT_04 0x8\n#define setLineG4(p) setlen(p, 9), setcode(p, 0x5c),(p)->pad = 0x55555555, (p)->p2 = 0, (p)->p3 = 0\n#define _get_len(rect) (((rect)->w*(rect)->h+1)/2+4)\n#define gte_NormalColor(r1,r2) { gte_ldv0(r1); gte_ncs(); gte_strgb(r2); }\n#define SPU_CHECK (-1)\n#define CdlStatNoDisk 0\n#define _GASMASK_H_ \n#define gte_NormalColor3(r1,r2,r3,r4,r5,r6) { gte_ldv3(r1,r2,r3); gte_nct(); gte_strgb3(r4,r5,r6); }\n#define gte_sqr0() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0A00428;\")\n#define _BLAST_H_ \n#define GM_SnakeCurrentHealth linkvarbuf[ 11 ]\n#define setSprt8(p) setlen(p, 3), setcode(p, 0x74)\n#define StFREE 0x0000\n#define dumpUV3(p) GPU_printf(\"(%d,%d)-(%d,%d)-(%d,%d)\\n\", (p)->u0, (p)->v0, (p)->u1, (p)->v1, (p)->u2, (p)->v2)\n#define dumpUV4(p) GPU_printf(\"(%d,%d)-(%d,%d)-(%d,%d)-(%d,%d)\\n\", (p)->u0, (p)->v0, (p)->u1, (p)->v1, (p)->u2, (p)->v2, (p)->u3, (p)->v3)\n#define SPU_14CH (0x1L<<14)\n#define OFFSET_TO_PTR(ptr,offset) (*(int *)offset = (int)ptr + *(int *)offset)\n#define _JPEGCAM_H \n#define _FAMAS_H_ \n#define gte_cdp() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x01280414;\")\n#define _CAMERA_H_ \n#define TLBRAND_RANDSHIFT 8\n#define _D_BLOODR_H_ \n#define _KOGAKU2_H_ \n#define gte_ldv01c(r0) __asm__ volatile(\"lwc2   $0, 0( %0 );\" \"lwc2   $1, 4( %0 );\" \"lwc2   $2, 8( %0 );\" \"lwc2   $3, 12( %0 )\" : : \"r\"(r0))\n#define gte_LoadAverageShort0(r1,r2,r3,r4,r5) { gte_lddp(r3); gte_ldsv(r1); gte_gpf0(); gte_lddp(r4); gte_ldsv(r2); gte_gpl0(); gte_stsv(r5); }\n#define C0_WRITER 0x6\n#define RDCODE_RANDSWITCH 0x30\n#define EvSpUNKNOWN 0x0200\n#define SPU_09CH (0x1L<< 9)\n#define TLBWIREDBASE 0\n#define gte_RotAverageNclip3(r1,r2,r3,r4,r5,r6,r7,r8,r9,r10) { gte_ldv3(r1,r2,r3); gte_rtpt(); gte_stflg(r9); gte_nclip(); gte_stopz(r10); gte_stsxy3(r4,r5,r6); gte_stdp(r7); gte_avsz3(); gte_stotz(r8); }\n#define SPU_EVENT_ALL 0\n#define LIBGV_H_ \n#define CTASTR(pre,post) CTASTR2(pre, post)\n#define gte_ldtr(r0,r1,r2) __asm__ volatile(\"ctc2   %0, $5;\" \"ctc2   %1, $6;\" \"ctc2   %2, $7\" : : \"r\"(r0), \"r\"(r1), \"r\"(r2))\n#define PadStateFindPad 1\n#define GAME_FLAG_BIT_30 0x20000000\n#define SPU_ST_PREPARE 4\n#define _ANIME_H_ \n#define GM_RationMax linkvarbuf[ 61 ]\n#define KMD_GRENADE 0x3b88\n#define HASH_SCENERIO 0xEA54\n#define gte_ApplyRotMatrix(r1,r2) { gte_ldv0(r1); gte_rtv0(); gte_stlvnl(r2); }\n#define setXY0(p,_x0,_y0) (p)->x0 = (_x0), (p)->y0 = (_y0)\n#define setXY2(p,_x0,_y0,_x1,_y1) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1)\n#define setXY3(p,_x0,_y0,_x1,_y1,_x2,_y2) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1), (p)->x2 = (_x2), (p)->y2 = (_y2)\n#define setXY4(p,_x0,_y0,_x1,_y1,_x2,_y2,_x3,_y3) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1), (p)->x2 = (_x2), (p)->y2 = (_y2), (p)->x3 = (_x3), (p)->y3 = (_y3)\n#define SpuCheck SPU_CHECK\n#define EvSpCZ 0x0001\n#define gte_rtv0bk() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0482012;\")\n#define SPU_9CH SPU_09CH\n#define LIBDG_H \n#define SPU_REV_MODE_SPACE 6\n#define gte_op12() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0178000C;\")\n#define PADselect PADk\n#define NWIREDENTRIES 8\n#define _TARGET_H_ \n#define gte_nccs_b() __asm__ volatile(\"cop2 0x0108041B;\")\n#define gte_llirbk() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04BA012;\")\n#define SPU_TRANSFER_BY_IO 1L\n#define gte_nclip() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x01400006;\")\n#define _SYSV_ULONG \n#define NEW_PRIM(prim,buf) _NEW_PRIM(prim, buf->field_20_otBuf)\n#define setPolyFT3(p) setlen(p, 7), setcode(p, 0x24)\n#define setPolyFT4(p) setlen(p, 9), setcode(p, 0x2c)\n#define C0_RAND $1\n#define gte_stflg_4(r0) __asm__ volatile(\"cfc2   $12, $31;\" \"addi   $13, $0, 4;\" \"sll    $13, $13, 16;\" \"and    $12, $12, $13;\" \"sw     $12, 0( %0 )\" : : \"r\"(r0) : \"$12\", \"$13\", \"memory\")\n#define gte_DpqColor(r1,r2,r3) { gte_ldrgb(r1); gte_lddp(r2); gte_dpcs(); gte_strgb(r3); }\n#define GCLCODE_STRING 7\n#define SpuTransByIO SpuTransferByIO\n#define E_VEC (K0BASE+0x80)\n#define gte_ldv01(r0,r1) __asm__ volatile(\"lwc2   $0, 0( %0 );\" \"lwc2   $1, 4( %0 );\" \"lwc2   $2, 0( %1 );\" \"lwc2   $3, 4( %1 )\" : : \"r\"(r0), \"r\"(r1))\n#define GM_LastSaveSeconds linkvarbuf[ 94 ]\n#define RDCODE_TALK 1\n#define CdlModeSize0 0x10\n#define SR_CU0 0x10000000\n#define SR_CU1 0x20000000\n#define SR_CU3 0x80000000\n#define gte_adddvd(r0,r1,r2) __asm__ volatile(\"lw     $12, 0( %0 );\" \"lw     $13, 0( %1 );\" \"mtc2   $12, $9;\" \"mtc2   $13, $10;\" \"sra    $12, $12, 16;\" \"sra    $13, $13, 16;\" \"addu   $15, $12, $13;\" \"mfc2   $12, $9;\" \"mfc2   $13, $10;\" \"sh     $15, 2( %2 );\" \"addu   $12, $12, $13;\" \"sh     $12, 0( %2 )\" : : \"r\"(r0), \"r\"(r1), \"r\"(r2) : \"$12\", \"$13\", \"$14\", \"$15\", \"memory\")\n#define gte_adddvl(r0,r1,r2) __asm__ volatile(\"lw     $12, 0( %0 );\" \"lw     $13, 0( %1 );\" \"mtc2   $12, $9;\" \"mtc2   $13, $10;\" \"sra    $12, $12, 16;\" \"sra    $13, $13, 16;\" \"addu   $15, $12, $13;\" \"mfc2   $12, $9;\" \"mfc2   $13, $10;\" \"sw     $15, 4( %2 );\" \"addu   $12, $12, $13;\" \"sw     $12, 0( %2 )\" : : \"r\"(r0), \"r\"(r1), \"r\"(r2) : \"$12\", \"$13\", \"$14\", \"$15\", \"memory\")\n#define GM_SilencerFlag linkvarbuf[ 60 ]\n#define gte_rtir_b() __asm__ volatile(\"cop2 0x049E012;\")\n#define DescEV 0xf1000000\n#define SR_KUC 0x00000002\n#define SPU_DECODED_SECONDHALF 1\n#define SPU_TRANSFER_GLANCE SPU_TRANSFER_PEEK\n#define CdStandby() CdControl(CdlStandby, 0, 0)\n#define gte_ldv3(r0,r1,r2) __asm__ volatile(\"lwc2   $0, 0( %0 );\" \"lwc2   $1, 4( %0 );\" \"lwc2   $2, 0( %1 );\" \"lwc2   $3, 4( %1 );\" \"lwc2   $4, 0( %2 );\" \"lwc2   $5, 4( %2 )\" : : \"r\"(r0), \"r\"(r1), \"r\"(r2))\n#define gte_llir_b() __asm__ volatile(\"cop2 0x04BE012;\")\n#define MTS_STACK_COOKIE 0x12435687\n#define GM_StatusEvent linkvarbuf[ 13 ]\n#define RDCODE_SCRIPT 0x80\n#define EXC_CPU EXC_CODE(11)\n#define CdlModeAP 0x02\n#define GAME_H \n#define gte_ldsvlcrow0(r0) __asm__ volatile(\"lw     $12, 0( %0 );\" \"lw     $13, 4( %0 );\" \"ctc2   $12, $16;\" \"ctc2   $13, $17\" : : \"r\"(r0) : \"$12\", \"$13\")\n#define SpuError SPU_ERROR\n#define DescHW 0xf0000000\n#define gte_strgb3_g3(r0) __asm__ volatile(\"swc2   $20, 4( %0 );\" \"swc2   $21, 12( %0 );\" \"swc2   $22, 20( %0 )\" : : \"r\"(r0) : \"memory\")\n#define gte_strgb3_g4(r0) __asm__ volatile(\"swc2   $20, 4( %0 );\" \"swc2   $21, 12( %0 );\" \"swc2   $22, 20( %0 )\" : : \"r\"(r0) : \"memory\")\n#define gte_rtirbk() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x049A012;\")\n#define _BSS_H_ \n#define setVector(v,_x,_y,_z) (v)->vx = _x, (v)->vy = _y, (v)->vz = _z\n#define InfoModeCurID 1\n#define EXC_SYSCALL EXC_CODE(8)\n#define CdlDataReady 0x01\n#define K1SIZE 0x20000000\n#define GM_MineDetectorFlag linkvarbuf[ 56 ]\n#define setSprt16(p) setlen(p, 3), setcode(p, 0x7c)\n#define SpuOff SPU_OFF\n#define CAUSE_SW2 0x00000200\n#define SPU_OFF 0\n#define gte_ldfcdir(r0,r1,r2) __asm__ volatile(\"ctc2   %0, $21;\" \"ctc2   %1, $22;\" \"ctc2   %2, $23\" : : \"r\"(r0), \"r\"(r1), \"r\"(r2))\n#define WEAPON_FLAG ( DG_FLAG_TEXT | DG_FLAG_TRANS | DG_FLAG_GBOUND | DG_FLAG_SHADE | DG_FLAG_ONEPIECE)\n#define C0_WRITEI 0x2\n#define SPU_COMMON_EXTMIX (0x01 << 13)\n#define R10 $10\n#define R11 $11\n#define R13 $13\n#define R14 $14\n#define R16 $16\n#define R17 $17\n#define R18 $18\n#define R19 $19\n#define GM_RopeFlag linkvarbuf[ 58 ]\n#define setDrawLoad(pt,rect) (_get_len(rect) <= 16) ? ( (setlen(pt, _get_len(rect))), ((pt)->code[0] = 0xa0000000), ((pt)->code[1] = *((u_long *)&(rect)->x)), ((pt)->code[2] = *((u_long *)&(rect)->w)), ((pt)->p[_get_len(rect)-4] = 0x01000000) ) : ( (setlen(pt,0)) )\n#define dumpClut(clut) GPU_printf(\"clut: (%d,%d)\\n\", (clut&0x3f)<<4, (clut>>6))\n#define GM_UnkFlagA0 linkvarbuf[ 80 ]\n#define C0_EPC $14\n#define gte_stotz(r0) __asm__ volatile(\"swc2   $7, 0( %0 )\" : : \"r\"(r0) : \"memory\")\n#define GM_UnkFlagA4 linkvarbuf[ 82 ]\n#define GM_UnkFlagA6 linkvarbuf[ 83 ]\n#define GM_UnkFlagA8 linkvarbuf[ 84 ]\n#define GM_UnkFlagAA linkvarbuf[ 85 ]\n#define SPU_COMMON_RVOLL (0x01 << 4)\n#define GM_SnakeStance linkvarbuf[ 16 ]\n#define SPU_COMMON_RVOLR (0x01 << 5)\n#define R20 $20\n#define R21 $21\n#define R22 $22\n#define R23 $23\n#define R24 $24\n#define R25 $25\n#define R26 $26\n#define R27 $27\n#define R28 $28\n#define R29 $29\n#define _get_tw(tw) (tw ? ((0xe2000000)|((((tw)->y&0xff)>>3)<<15)| ((((tw)->x&0xff)>>3)<<10)|(((~((tw)->h-1)&0xff)>>3)<<5)| (((~((tw)->w-1)&0xff)>>3))) : 0)\n#define R30 $30\n#define R31 $31\n#define dumpRGB0(p) GPU_printf(\"(%3d,%3d,%3d)\\n\", (p)->r0, (p)->g0, (p)->b0)\n#define dumpRGB1(p) GPU_printf(\"(%3d,%3d,%3d)\\n\", (p)->r1, (p)->g1, (p)->b1)\n#define dumpRGB2(p) GPU_printf(\"(%3d,%3d,%3d)\\n\", (p)->r2, (p)->g2, (p)->b2)\n#define GM_FamasFlag linkvarbuf[ 18 ]\n#define gte_sqr12() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0A80428;\")\n#define GM_FrozenItemsState linkvarbuf[ 69 ]\n#define EXCEPT_BRKPT 3\n#define SPU_23CH (0x1L<<23)\n#define CdlStatSeekError 0x04\n#define gte_Square0(r1,r2) { gte_ldlvl(r1); gte_sqr0(); gte_stlvnl(r2); }\n#define addVector(v0,v1) (v0)->vx += (v1)->vx, (v0)->vy += (v1)->vy, (v0)->vz += (v1)->vz\n#define EXC_RADE EXC_CODE(4)\n#define IS_KUSEG(x) ((unsigned)(x) < K0BASE)\n#define K0_TO_K1(x) ((unsigned)(x)|0xA0000000)\n#define R_VEC (K1BASE+0x1fc00000)\n#define C0_CAUSE $13\n#define NREGS 40\n#define EvSpCLOSE 0x0008\n#define R_R17 17\n#define CdlSetfilter 0x0d\n#define CdlGetlocL 0x10\n#define gte_rtpt_b() __asm__ volatile(\"cop2 0x0280030;\")\n#define CdlGetlocP 0x11\n#define StFRAME_NO 0x04\n#define TcbStUNUSED 0x1000\n#define R_MDHI 33\n#define SPU_02CH (0x1L<< 2)\n#define gte_OuterProduct12(r1,r2,r3) { gte_ldopv1(r1); gte_ldopv2(r2); gte_op12(); gte_stlvnl(r3); }\n#define SPU_18CH (0x1L<<18)\n#define SPU_EVENT_REVERB (0x01 << 3)\n#define linkvarbuf gGameState_800B4D98\n#define gte_lcv2bk_b() __asm__ volatile(\"cop2 0x04D2012;\")\n#define PadCurrCTP1 10\n#define CdlOtherFormat 1\n#define setaddr(p,_addr) (((P_TAG *)(p))->addr = (u_long)(_addr))\n#define PADRdown (1<< 6)\n#define BRK_KERNEL 0xf1\n#define KMD_GOGGLES 0xe1d2\n#define SGT_NIKITA 0x15a9\n#define GM_TotalBeingFound linkvarbuf[ 78 ]\n#define _RADIO_H \n#define DescTH DescMask\n#define gte_stflg(r0) __asm__ volatile(\"cfc2   $12, $31;\" \"nop;\" \"sw     $12, 0( %0 )\" : : \"r\"(r0) : \"$12\", \"memory\")\n#define SPU_2CH SPU_02CH\n#define SPU_REV_MODE_HALL 5\n#define gte_stsxy01(r0,r1) __asm__ volatile(\"swc2   $12, 0( %0 );\" \"swc2   $13, 0( %1 )\" : : \"r\"(r0), \"r\"(r1) : \"memory\")\n#define GM_SnakePosY linkvarbuf[ 9 ]\n#define GM_SnakePosZ linkvarbuf[ 10 ]\n#define _SD_H_ \n#define setWH(p,_w,_h) (p)->w = _w, (p)->h = _h\n#define CAUSE_CESHIFT 28\n#define setRECT(r,_x,_y,_w,_h) (r)->x = (_x),(r)->y = (_y),(r)->w = (_w),(r)->h = (_h)\n#define SR_IEO 0x00000010\n#define gte_dpcs_b() __asm__ volatile(\"cop2 0x0780010;\")\n#define SR_IEP 0x00000004\n#define CAUSE_IPSHIFT 8\n#define gte_op0() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0170000C;\")\n#define PadStateFindCTP1 2\n#define PadStateFindCTP2 3\n#define CdlModeDA 0x01\n#define gte_gpf0_b() __asm__ volatile(\"cop2 0x0190003D;\")\n#define SpuALL SPU_ALL\n#define CdlStatRead 0x20\n#define GM_TotalContinues linkvarbuf[ 87 ]\n#define SCRIPT(...) {}\n#define gte_op0_b() __asm__ volatile(\"cop2 0x0170000C;\")\n#define StBUSY 0x0003\n#define gte_SetTransMatrix(r0) __asm__ volatile(\"lw     $12, 20( %0 );\" \"lw     $13, 24( %0 );\" \"ctc2   $12, $5;\" \"lw     $14, 28( %0 );\" \"ctc2   $13, $6;\" \"ctc2   $14, $7\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\")\n#define gte_stsxy3c(r0) __asm__ volatile(\"swc2   $12, 0( %0 );\" \"swc2   $13, 4( %0 );\" \"swc2   $14, 8( %0 )\" : : \"r\"(r0) : \"memory\")\n#define CdlModeRT 0x40\n#define CdlMAXDIR 128\n#define KMD_BANDANA 0xdb4d\n#define SPU_8CH SPU_08CH\n#define GAME_FLAG_BIT_11 0x400\n#define GM_TranquilizerMax linkvarbuf[ 63 ]\n#define RDCODE_ENDLINE 0xFF\n#define gte_rtirtr() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0498012;\")\n#define gte_ReadLightMatrix(r0) __asm__ volatile(\"cfc2   $12, $8;\" \"cfc2   $13, $9;\" \"sw     $12, 0( %0 );\" \"sw     $13, 4( %0 );\" \"cfc2   $12, $10;\" \"cfc2   $13, $11;\" \"cfc2   $14, $12;\" \"sw     $12, 8( %0 );\" \"sw     $13, 12( %0 );\" \"sw     $14, 16( %0 );\" \"cfc2   $12, $13;\" \"cfc2   $13, $14;\" \"cfc2   $14, $15;\" \"sw     $12, 20( %0 );\" \"sw     $13, 24( %0 );\" \"sw     $14, 28( %0 )\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\", \"memory\")\n#define SpuReadDecodeData(d_data,flag) SpuReadDecodedData((d_data), (flag))\n#define K0SIZE 0x20000000\n#define SPU_DECODEDATA_SIZE SPU_DECODEDDATA_SIZE\n#define gte_llirtr() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04B8012;\")\n#define GM_SocomMax linkvarbuf[ 27 ]\n#define SPU_TRANSFER_WAIT 1\n#define gte_stlvnl2(r0) __asm__ volatile(\"swc2   $27, 0( %0 )\" : : \"r\"(r0) : \"memory\")\n#define SPU_COMMON_EXTREV (0x01 << 12)\n#define _SGTRECT3_H_ \n#define setDrawStp(p,pbw) setlen(p, 2), ((u_long *)p)[1] = 0xe6000000|(pbw?0x01:0), ((u_long *)p)[2] = 0\n#define addPrim(ot,p) setaddr(p, getaddr(ot)), setaddr(ot, p)\n#define gte_ColorDpq(r1,r2,r3,r4) { gte_ldlvl(r1); gte_ldrgb(r2); gte_lddp(r3); gte_cdp(); gte_strgb(r4); }\n#define _LINKVARBUF_H_ \n#define gte_llv0() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04A6012;\")\n#define gte_llv1() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04AE012;\")\n#define gte_llv2() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04B6012;\")\n#define R_S4 R_R20\n#define PADRleft (1<< 7)\n#define SPU_VOICE_LINEARDecN 3\n#define SPU_VOICE_LINEARDecR 4\n#define gte_stbv(r0) __asm__ volatile(\"mfc2   $12, $9;\" \"mfc2   $13, $10;\" \"sb     $12, 0( %0 );\" \"sb     $13, 1( %0 )\" : : \"r\"(r0) : \"$12\", \"$13\", \"memory\")\n#define __SPU_IRQCALLBACK_PROC \n#define GCLCODE_EXPRESSION 0x30\n#define HASH_CMD_print 0xb96e\n#define StSECTOR_SIZE 0x03\n#define gte_ldrgb3c(r0) __asm__ volatile(\"lwc2   $20, 0( %0 );\" \"lwc2   $21, 4( %0 );\" \"lwc2   $22, 8( %0 );\" \"lwc2   $6, 8( %0 )\" : : \"r\"(r0))\n#define gte_lcirbk_b() __asm__ volatile(\"cop2 0x04DA012;\")\n#define NF_USERACC 5\n#define _GOGGLE_H \n#define HASH_CMD_trap 0xd4cb\n#define gte_RotAverageNclipColorDpq3(r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16) { gte_ldv3(r1,r2,r3); gte_rtpt(); gte_stflg(r15); gte_nclip(); gte_stopz(r16); gte_ldv3(r4,r5,r6); gte_ldrgb(r7); gte_ncdt(); gte_stsxy3(r8,r9,r10); gte_strgb3(r11,r12,r13); gte_avsz3(); gte_stotz(r14); }\n#define HASH_CMD_delay 0x430d\n#define _SYSIII_USHORT \n#define gte_llv2_b() __asm__ volatile(\"cop2 0x04B6012;\")\n#define gte_op12_b() __asm__ volatile(\"cop2 0x0178000C;\")\n#define setPolyF3(p) setlen(p, 4), setcode(p, 0x20)\n#define setPolyF4(p) setlen(p, 5), setcode(p, 0x28)\n#define _PAD(x,y) ((y)<<((x)<<4))\n#define gte_ld_intpol_sv0(r0) __asm__ volatile(\"lh     $12, 0( %0 );\" \"lh     $13, 2( %0 );\" \"lh     $14, 4( %0 );\" \"ctc2   $12, $21;\" \"ctc2   $13, $22;\" \"ctc2   $14, $23\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\")\n#define gte_ld_intpol_sv1(r0) __asm__ volatile(\"lh     $12, 0( %0 );\" \"lh     $13, 2( %0 );\" \"lh     $14, 4( %0 );\" \"mtc2   $12, $9;\" \"mtc2   $13, $10;\" \"mtc2   $14, $11\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\")\n#define InfoActCurr 4\n#define gte_RotColorDpq3(r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15) { gte_ldv3(r1,r2,r3); gte_rtpt(); gte_stsxy3(r8,r9,r10); gte_stflg(r14); gte_ldv3(r4,r5,r6); gte_ldrgb(r7); gte_ncdt(); gte_strgb3(r11,r12,r13); gte_stszotz(r15); }\n#define _OBJECT_H_ \n#define GM_ShapeKeyTemp linkvarbuf[ 66 ]\n#define setPolyG3(p) setlen(p, 6), setcode(p, 0x30)\n#define setPolyG4(p) setlen(p, 8), setcode(p, 0x38)\n#define HwCARD_1 (DescHW|0x13)\n#define gte_SetColorMatrix(r0) __asm__ volatile(\"lw     $12, 0( %0 );\" \"lw     $13, 4( %0 );\" \"ctc2   $12, $16;\" \"ctc2   $13, $17;\" \"lw     $12, 8( %0 );\" \"lw     $13, 12( %0 );\" \"lw     $14, 16( %0 );\" \"ctc2   $12, $18;\" \"ctc2   $13, $19;\" \"ctc2   $14, $20\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\")\n#define KMD_C4_BOMB 0xf83d\n#define gte_rtv2bk() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0492012;\")\n#define R12 $12\n#define DescMask 0xff000000\n#define __SPU_TRANSFERCALLBACK_PROC \n#define gte_llv2bk() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04B2012;\")\n#define gte_lcv1bk_b() __asm__ volatile(\"cop2 0x04CA012;\")\n#define R15 $15\n#define GM_TotalWeapons 10\n#define gte_RotAverage3(r1,r2,r3,r4,r5,r6,r7,r8,r9) { gte_ldv3(r1,r2,r3); gte_rtpt(); gte_stsxy3(r4,r5,r6); gte_stdp(r7); gte_stflg(r8); gte_avsz3(); gte_stotz(r9); }\n#define gte_ldrgb(r0) __asm__ volatile(\"lwc2   $6, 0( %0 )\" : : \"r\"(r0))\n#define SPU_REV_MODE_PIPE 9\n#define GM_FrozenItemsTemp linkvarbuf[ 70 ]\n#define GCL_IsParam(gcl_code) ((gcl_code & 0xFF) == GCLCODE_PARAMETER)\n#define gte_stlvl(r0) __asm__ volatile(\"swc2   $9, 0( %0 );\" \"swc2   $10, 4( %0 );\" \"swc2   $11, 8( %0 )\" : : \"r\"(r0) : \"memory\")\n#define isendprim(p) ((((P_TAG *)(p))->addr)==0xffffff)\n#define SPU_11CH (0x1L<<11)\n#define gte_NormalColorCol3(r1,r2,r3,r4,r5,r6,r7) { gte_ldv3(r1,r2,r3); gte_ldrgb(r4); gte_ncct(); gte_strgb3(r5,r6,r7); }\n#define GAME_FLAG_BIT_01 0x1\n#define HASH_LEAVE 0xd5cc\n#define gte_gpf12_b() __asm__ volatile(\"cop2 0x0198003D;\")\n#define SPU_COMMON_CDMIX (0x01 << 9)\n#define SR_IMASK 0x0000ff00\n#define DescUEV 0xf3000000\n#define gte_nct_b() __asm__ volatile(\"cop2 0x0D80420;\")\n#define _LOADER_H_ \n#define SPU_COMMON_EXTVOLR (0x01 << 11)\n#define GM_FamasMax linkvarbuf[ 28 ]\n#define setUV3(p,_u0,_v0,_u1,_v1,_u2,_v2) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u1), (p)->v1 = (_v1), (p)->u2 = (_u2), (p)->v2 = (_v2)\n#define setUV4(p,_u0,_v0,_u1,_v1,_u2,_v2,_u3,_v3) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u1), (p)->v1 = (_v1), (p)->u2 = (_u2), (p)->v2 = (_v2), (p)->u3 = (_u3), (p)->v3 = (_v3)\n#define CdlNoIntr 0x00\n#define SpuOnEnvOff SPU_ON_ENV_OFF\n#define CdlSetloc 0x02\n#define gte_SetFarColor(r0,r1,r2) __asm__ volatile(\"sll    $12, %0, 4;\" \"sll    $13, %1, 4;\" \"sll    $14, %2, 4;\" \"ctc2   $12, $21;\" \"ctc2   $13, $22;\" \"ctc2   $14, $23\" : : \"r\"(r0), \"r\"(r1), \"r\"(r2) : \"$12\", \"$13\", \"$14\")\n#define gte_ldsxy2(r0) __asm__ volatile(\"mtc2   %0, $14\" : : \"r\"(r0))\n#define NRANDOMENTRIES (NTLBENTRIES-NWIREDENTRIES)\n#define scache swl\n#define CdlPause 0x09\n#define HASH_CMD_chara 0x9906\n#define SpuSetTransStartAddr(addr) SpuSetTransferStartAddr((addr))\n#define GM_GameStatusFlag linkvarbuf[ 2 ]\n#define SPU_6CH SPU_06CH\n#define GM_RemoteMissileFlag linkvarbuf[ 20 ]\n#define SPU_REV_MODE_DELAY 8\n#define SGT_NV_GGLE3 0x8506\n#define _GGLSIGHT_H \n#define MOUSEleft (1<<3)\n#define KMD_KAGE 0x117c\n#define MAX_FILE_HANDLERS 26\n#define HwRTC0 (DescHW|0x05)\n#define HwRTC1 (DescHW|0x06)\n#define HwRTC2 (DescHW|0x07)\n#define CTASTR2(pre,post) pre ##post\n#define SPU_DECODE_FIRSTHALF SPU_DECODED_FIRSTHALF\n#define RDCODE_ADD_CONTACT 4\n#define dumpVector(str,v) GPU_printf(\"%s=(%d,%d,%d)\\n\", str, (v)->vx, (v)->vy, (v)->vz)\n#define InfoActFunc 1\n#define gte_ldbkdir(r0,r1,r2) __asm__ volatile(\"ctc2   %0, $13;\" \"ctc2   %1, $14;\" \"ctc2   %2, $15\" : : \"r\"(r0), \"r\"(r1), \"r\"(r2))\n#define gte_avsz3_b() __asm__ volatile(\"cop2 0x0158002D;\")\n#define CAUSE_SW1 0x00000100\n#define gte_mvmva(sf,mx,v,cv,lm) gte_mvmva_core(0x0400012 | ((sf) << 19) | ((mx) << 17) | ((v) << 15) | ((cv) << 13) | ((lm) << 10))\n#define _SCN_MASK_H_ \n#define HASH_CMD_if 0x0d86\n#define F3DEX_GBI_2 1\n#define SEXC_SEGV EXC_CODE(16)\n#define CdlModeSF 0x08\n#define _LIBPAD_H_ \n#define DescRC 0xf2000000\n#define _ULONG_T \n#define SPU_ON_ENV_OFF 3\n#define UT_VEC K0BASE\n#define SPU_ST_STOP 2\n#define MENU_MODULE_MAX 8\n#define SGT_CAMERA 0xeee9\n#define InfoModeCurExID 2\n#define RevisionDir(a) a &= 4095\n#define SR_KUO 0x00000020\n#define SPU_RESET 3\n#define GCL_GetVarOffset(gcl_var) (gcl_var & 0xFFFF)\n#define EXCEPT_ELSE 0xff\n#define gte_rtv2tr() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0490012;\")\n#define GM_StunGrenadeFlag linkvarbuf[ 24 ]\n#define SpuDontCare SPU_DONT_CARE\n#define _UCHAR_T \n#define CdlPlay 0x03\n#define M2CTX 1\n#define C0_PIDMASK $6\n#define gte_strgb3(r0,r1,r2) __asm__ volatile(\"swc2   $20, 0( %0 );\" \"swc2   $21, 0( %1 );\" \"swc2   $22, 0( %2 )\" : : \"r\"(r0), \"r\"(r1), \"r\"(r2) : \"memory\")\n#define PCX_EMPTY2 0xb05c\n#define gte_lcv0bk_b() __asm__ volatile(\"cop2 0x04C2012;\")\n#define gte_llv2tr() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04B0012;\")\n#define gte_ldsvrtrow0(r0) __asm__ volatile(\"lw     $12, 0( %0 );\" \"lw     $13, 4( %0 );\" \"ctc2   $12, $0;\" \"ctc2   $13, $1\" : : \"r\"(r0) : \"$12\", \"$13\")\n#define NF_NENTRIES 8\n#define GM_WeaponsMax (&linkvarbuf[ 27 ])\n#define SPU_REV_MODE_STUDIO_A 2\n#define SPU_REV_MODE_STUDIO_B 3\n#define SPU_REV_MODE_STUDIO_C 4\n#define _RIFLE_H_ \n#define SECTOR_SIZE (512)\n#define CdForward() CdControl(CdlForward, 0, 0)\n#define termPrim(p) setaddr(p, 0xffffffff)\n#define SPU_EVENT_NOISE (0x01 << 2)\n#define gte_cdp_b() __asm__ volatile(\"cop2 0x01280414;\")\n#define gte_MulMatrix0(r1,r2,r3) { gte_SetRotMatrix(r1); gte_ldclmv(r2); gte_rtir(); gte_stclmv(r3); gte_ldclmv((char*)r2+2); gte_rtir(); gte_stclmv((char*)r3+2); gte_ldclmv((char*)r2+4); gte_rtir(); gte_stclmv((char*)r3+4); }\n#define StMOVIE_WIDTH 0x08\n#define _LIBCD_H_ \n#define _GOGGLEIR_H \n#define NO_ASSERT_SIZE \n#define SPU_ALL 0\n#define GM_ColdMedicineMax linkvarbuf[ 62 ]\n#define gte_SetRGBcd(r0) __asm__ volatile(\"lwc2   $6, 0( %0 )\" : : \"r\"(r0))\n#define SPU_REV_MODE (0x01 << 0)\n#define _TENAGE_H_ \n#define GCLCODE_SDCODE 9\n#define GCL_GetVarTypeCode(gcl_var) (((gcl_var << 1) >> 25) & 0xF)\n#define EvSpACK 0x0010\n#define NBBY 8\n#define gte_AverageZ4(r1,r2,r3,r4,r5) { gte_ldsz4(r1,r2,r3,r4); gte_avsz4(); gte_stotz(r5); }\n#define HASH_CMD_return 0xcd3a\n#define SPU_20CH (0x1L<<20)\n#define gte_gpl0_b() __asm__ volatile(\"cop2 0x01A0003E0;\")\n#define GCL_H \n#define SPU_ST_IDLE 3\n#define MENU_ITEM_COUNT 21\n#define gte_avsz4_b() __asm__ volatile(\"cop2 0x0168002E;\")\n#define gte_mvmva_core(r0) __asm__ volatile(\"nop;\" \"nop;\" \"cop2 %0\" : : \"g\"(r0))\n#define PadStateStable 6\n#define CdBackward() CdControl(CdlBackward, 0, 0)\n#define gte_lcv0_b() __asm__ volatile(\"cop2 0x04C6012;\")\n#define GM_TempChangeSpeed linkvarbuf[ 64 ]\n#define INIT_VEC(vec,xx,yy,zz) { (vec).vx = xx; (vec).vy = yy; (vec).vz = zz; }\n#define EXC_DBE EXC_CODE(7)\n#define gte_nclip_b() __asm__ volatile(\"cop2 0x01400006;\")\n#define GM_CurrentStageFlag linkvarbuf[ 6 ]\n#define SPU_15CH (0x1L<<15)\n#define R8 $8\n#define __SPU_VOICE \n#define SPU_VOICE_ADSR_ADSR2 (0x01 << 18)\n#define SPU_VOICE_ADSR_SL (0x01 << 15)\n#define GM_StealthFlag linkvarbuf[ 47 ]\n#define gte_LoadAverageByte(r1,r2,r3,r4,r5) { gte_lddp(r3); gte_ldbv(r1); gte_gpf12(); gte_lddp(r4); gte_ldbv(r2); gte_gpl12(); gte_stbv(r5); }\n#define gte_nop() __asm__ volatile(\"nop\")\n#define dumpTPage(tpage) GPU_printf(\"tpage: (%d,%d,%d,%d)\\n\", ((tpage)>>7)&0x003,((tpage)>>5)&0x003, ((tpage)<<6)&0x7c0, (((tpage)<<4)&0x100)+(((tpage)>>2)&0x200))\n#define _PSYQ_H_ \n#define CdMute() CdControl(CdlMute, 0, 0)\n#define EvSpERANGE 0x0302\n#define _KERNEL_H \n#define SPU_VOICE_ADSR_SR (0x01 << 13)\n#define btoi(b) ((b)/16*10 + (b)%16)\n#define HwDMAC (DescHW|0x04)\n#define _USHORT_T \n#define gte_RotTransPers3(r1,r2,r3,r4,r5,r6,r7,r8,r9) { gte_ldv3(r1,r2,r3); gte_rtpt(); gte_stsxy3(r4,r5,r6); gte_stdp(r7); gte_stflg(r8); gte_stszotz(r9); }\n#define GM_RifleMax linkvarbuf[ 36 ]\n#define HASH_TRAP_ALL 0x14c9\n#define CdlMAXLEVEL 8\n#define _SYSV_UINT \n#define NTLBENTRIES 64\n#define KMD_FAMAS 0x4725\n#define SPU_VOICE_ADSR_SMODE (0x01 << 9)\n#define SpuClear SPU_CLEAR\n#define HASH_CMD_start 0x9a1f\n#define SPU_ST_INVALID_ARGUMENT (-2)\n#define gte_ncct() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0118043F;\")\n#define PADRright (1<< 5)\n#define GM_SnakeColdUnk9A linkvarbuf[ 77 ]\n#define gte_ldsz3(r0,r1,r2) __asm__ volatile(\"mtc2   %0, $17;\" \"mtc2   %1, $18;\" \"mtc2   %2, $19\" : : \"r\"(r0), \"r\"(r1), \"r\"(r2))\n#define stru_80700000 ((demothrd_80700000 *)0x80700000)\n#define gte_ncs_b() __asm__ volatile(\"cop2 0x0C8041E;\")\n#define SPU_DECODED_FIRSTHALF 0\n#define NC0VECS 8\n#define gte_SetGeomOffset(r0,r1) __asm__ volatile(\"sll    $12, %0, 16;\" \"sll    $13, %1, 16;\" \"ctc2   $12, $24;\" \"ctc2   $13, $25\" : : \"r\"(r0), \"r\"(r1) : \"$12\", \"$13\")\n#define MAX_UNITS 512\n#define KMD_STN_BA 0x761a\n#define R_R19 19\n#define STATIC_ASSERT(cond,msg,line) typedef struct { int CTASTR(static_assertion_failed_, msg) : !!(cond); } CTASTR(static_assertion_failed_, line)\n#define HASH_CMD_jimaku 0xec9d\n#define setPolyGT3(p) setlen(p, 9), setcode(p, 0x34)\n#define setPolyGT4(p) setlen(p, 12), setcode(p, 0x3c)\n#define gte_dpcs() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0780010;\")\n#define gte_dpct() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0F8002A;\")\n#define SR_IMASKSHIFT 8\n#define EvSpEDOM 0x0301\n#define RDCODE_PROMPT 7\n#define EXC_WADE EXC_CODE(5)\n#define InfoActSub 2\n#define gte_gpf12() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0198003D;\")\n#define GM_DifficultyFlag linkvarbuf[ 1 ]\n#define OUTVTXNUM 10\n#define RDATA_H_ \n#define dumpRGB3(p) GPU_printf(\"(%3d,%3d,%3d)\\n\", (p)->r3, (p)->g3, (p)->b3)\n#define gte_nccs() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0108041B;\")\n#define GM_SnakeColdTimer linkvarbuf[ 75 ]\n#define RCntCNT0 (DescRC|0x00)\n#define RCntCNT1 (DescRC|0x01)\n#define RCntCNT2 (DescRC|0x02)\n#define PadStateReqInfo 4\n#define gte_ldopv1(r0) __asm__ volatile(\"lw     $12, 0( %0 );\" \"lw     $13, 4( %0 );\" \"ctc2   $12, $0;\" \"lw     $14, 8( %0 );\" \"ctc2   $13, $2;\" \"ctc2   $14, $4\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\")\n#define SpuNull SPU_NULL\n#define gte_ncdt() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0F80416;\")\n#define CdlStatShellOpen 0x10\n#define _LIBGTE_H_ \n#define KMD_STN_FR 0x76ab\n#define InfoModeCurExOffs 3\n#define GM_SnakeColdUnk98 linkvarbuf[ 76 ]\n#define gte_strgb3_gt3(r0) __asm__ volatile(\"swc2   $20, 4( %0 );\" \"swc2   $21, 16( %0 );\" \"swc2   $22, 28( %0 )\" : : \"r\"(r0) : \"memory\")\n#define gte_rtv2bk_b() __asm__ volatile(\"cop2 0x0492012;\")\n#define _JIRAI_H_ \n#define KMD_SOCOM 0x21b6\n#define CdSeekL(p) CdControl(CdlSeekL, (u_char *)p, 0)\n#define HwGPU (DescHW|0x02)\n#define gte_strgb3_gt4(r0) __asm__ volatile(\"swc2   $20, 4( %0 );\" \"swc2   $21, 16( %0 );\" \"swc2   $22, 28( %0 )\" : : \"r\"(r0) : \"memory\")\n#define GM_GrenadeFlag linkvarbuf[ 19 ]\n#define _GRENADE_H_ \n#define KMD_SNE_WET2 0x7693\n#define _SYS_TYPES_H \n#define _STGFD_IO_ \n#define _LIBGPU_H_ \n#define SPU_VOICE_VOLL (0x01 << 0)\n#define SPU_VOICE_VOLR (0x01 << 1)\n#define SPU_COMMON_CDVOLL (0x01 << 6)\n#define SPU_06CH (0x1L<< 6)\n#define HASH_CMD_varsave 0x5c9e\n#define CdSeekP(p) CdControl(CdlSeekP, (u_char *)p, 0)\n#define HASH_CMD_system 0x4ad9\n#define CdlSetmode 0x0e\n#define gte_intpl_b() __asm__ volatile(\"cop2 0x0980011;\")\n#define R_ZERO R_R0\n#define SPU_VOICE_DIRECT 0\n#define GM_SocomFlag linkvarbuf[ 17 ]\n#define RDCODE_SWITCH 0x20\n#define GCLCODE_BYTE 2\n#define CdlBackward 0x05\n#define NF_COPYIO 2\n#define gte_ReadColorMatrix(r0) __asm__ volatile(\"cfc2   $12, $16;\" \"cfc2   $13, $17;\" \"sw     $12, 0( %0 );\" \"sw     $13, 4( %0 );\" \"cfc2   $12, $18;\" \"cfc2   $13, $19;\" \"cfc2   $14, $20;\" \"sw     $12, 8( %0 );\" \"sw     $13, 12( %0 );\" \"sw     $14, 16( %0 );\" \"cfc2   $12, $21;\" \"cfc2   $13, $22;\" \"cfc2   $14, $23;\" \"sw     $12, 20( %0 );\" \"sw     $13, 24( %0 );\" \"sw     $14, 28( %0 )\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\", \"memory\")\n#define GM_UnkFlagA2 linkvarbuf[ 81 ]\n#define EXC_WMISS EXC_CODE(3)\n#define StMOVIE_HEIGHT 0x09\n#define SpuTransferByDMA SPU_TRANSFER_BY_DMA\n#define GCLCODE_SCRIPT_DATA 0x40\n#define GM_ThermalVisionFlag linkvarbuf[ 43 ]\n#define GCLCODE_PARAMETER 0x50\n#define CdlAcknowledge 0x03\n#define gte_lcv0tr() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04C0012;\")\n#define SwMATH (DescSW|0x02)\n#define EDC 0\n#define gte_ReadGeomOffset(r0,r1) __asm__ volatile(\"cfc2   $12, $24;\" \"cfc2   $13, $25;\" \"sra    $12, $12, 16;\" \"sra    $13, $13, 16;\" \"sw     $12, 0( %0 );\" \"sw     $13, 0( %1 )\" : : \"r\"(r0), \"r\"(r1) : \"$12\", \"$13\", \"memory\")\n#define GM_KetchupFlag linkvarbuf[ 46 ]\n#define C0_ERREG $16\n#define pauseMULI() \n#define gte_SetGeomScreen(r0) __asm__ volatile(\"ctc2   %0, $26\" : : \"r\"(r0))\n#define gte_stclmv(r0) __asm__ volatile(\"mfc2   $12, $9;\" \"mfc2   $13, $10;\" \"mfc2   $14, $11;\" \"sh     $12, 0( %0 );\" \"sh     $13, 6( %0 );\" \"sh     $14, 12( %0 )\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\", \"memory\")\n#define limitRange(x,l,h) ((x)=((x)<(l)?(l):(x)>(h)?(h):(x)))\n#define gte_cc() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0138041C;\")\n#define _STNSIGHT_H_ \n#define gte_stszotz(r0) __asm__ volatile(\"mfc2   $12, $19;\" \"nop;\" \"sra    $12, $12, 2;\" \"sw     $12, 0( %0 )\" : : \"r\"(r0) : \"$12\", \"memory\")\n#define ONE 4096\n#define setShadeTex(p,tge) ((tge)?setcode(p, getcode(p)|0x01):setcode(p, getcode(p)&~0x01))\n#define array_800B933C_SIZE 8\n#define SPU_03CH (0x1L<< 3)\n#define SPU_19CH (0x1L<<19)\n#define HASH_CMD_pad 0xcc85\n#define R_R21 21\n#define gte_stlvnl(r0) __asm__ volatile(\"swc2   $25, 0( %0 );\" \"swc2   $26, 4( %0 );\" \"swc2   $27, 8( %0 )\" : : \"r\"(r0) : \"memory\")\n#define gte_cc_b() __asm__ volatile(\"cop2 0x0138041C;\")\n#define SEXC_PAGEIN EXC_CODE(18)\n#define CAUSE_BD 0x80000000\n#define R_R26 26\n#define RCntMdINTR 0x1000\n#define HASH_CMD_camera 0xeee9\n#define SPU_3CH SPU_03CH\n#define _LIBETC_H_ \n#define SPU_KEYCH(x) (0x1L<<(x))\n#define PCX_SOCOM_F 0xe4cc\n#define gte_rtirbk_b() __asm__ volatile(\"cop2 0x049A012;\")\n#define mts_stack_end(x) x + (sizeof(x) / sizeof(x[0]))\n#define delete erase\n#define gte_rt_b() __asm__ volatile(\"cop2 0x0480012;\")\n#define _TABAKO_H_ \n#define gte_gpf0() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0190003D;\")\n#define _LIBFS_H_ \n#define SPU_COMMON_MVOLMODER (0x01 << 3)\n#define gte_ApplyMatrix(r1,r2,r3) { gte_SetRotMatrix(r1); gte_ldv0(r2); gte_rtv0(); gte_stlvnl(r3); }\n#define gte_ncds_b() __asm__ volatile(\"cop2 0x0E80413;\")\n#define getlen(p) (u_char)(((P_TAG *)(p))->len)\n#define setDrawTPage(p,dfe,dtd,tpage) setlen(p, 1), ((u_long *)(p))[1] = _get_mode(dfe, dtd, tpage)\n#define RDCODE_EVAL 0x40\n#define MAX_HISTORY 8\n#define GAME_FLAG_BIT_13 0x1000\n#define GCLCODE_EXPR_OPERATOR 0x31\n#define SPU_VOICE_LINEARIncN 1\n#define EvSpDE 0x0080\n#define SPU_VOICE_LINEARIncR 2\n#define KMD_RIFLE 0x2d3b\n#define gte_ldsvllrow0(r0) __asm__ volatile(\"lw     $12, 0( %0 );\" \"lw     $13, 4( %0 );\" \"ctc2   $12, $8;\" \"ctc2   $13, $9\" : : \"r\"(r0) : \"$12\", \"$13\")\n#define DATA_H \n#define gte_rtv1bk_b() __asm__ volatile(\"cop2 0x048A012;\")\n#define SR_MM_MODE 0x00010000\n#define SGT_IR_GGLE2 0x84dc\n#define gte_lc() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04DA412;\")\n#define SPU_REV_MODE_OFF 0\n#define gte_ll() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04A6412;\")\n#define KMD_SOCOM2 0x36f6\n#define gte_OuterProduct0SV(r1,r2,r3) { gte_ldopv1SV(r1); gte_ldopv2SV(r2); gte_op0(); gte_stsv(r3); }\n#define gte_lcv2tr() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04D0012;\")\n#define _RADAR_H_ \n#define SPU_ST_FINAL 8\n#define RADIO_MEMORY_COUNT 16\n#define GV_NORMAL_MEMORY 2\n#define RDCODE_SWITCH_DEFAULT 0x22\n#define CHARA_SNAKE 0x21ca\n#define gte_stlvnl0(r0) __asm__ volatile(\"swc2   $25, 0( %0 )\" : : \"r\"(r0) : \"memory\")\n#define GM_StingerMax linkvarbuf[ 31 ]\n#define gte_stlvnl1(r0) __asm__ volatile(\"swc2   $26, 0( %0 )\" : : \"r\"(r0) : \"memory\")\n#define gte_gpl0() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x01A0003E0\")\n#define gte_ReadGeomScreen(r0) __asm__ volatile(\"cfc2   $12, $26;\" \"nop;\" \"sw     $12, 0( %0 )\" : : \"r\"(r0) : \"$12\", \"memory\")\n#define gte_AverageZ3(r1,r2,r3,r4) { gte_ldsz3(r1,r2,r3); gte_avsz3(); gte_stotz(r4); }\n#define _NEW_PRIM(prim,buf) { typeof(prim) p; p = (typeof(prim))buf->mPrimBuf.mFreeLocation; buf->mPrimBuf.mFreeLocation += sizeof(*prim); prim = p; }\n#define nextPrim(p) (void *)((((P_TAG *)(p))->addr)|0x80000000)\n#define GM_BandanaFlag linkvarbuf[ 48 ]\n#define NF_REVID 7\n#define HASH_CMD_mesg 0x22ff\n#define GM_TotalItems 24\n#define _SOCOM_H \n#define SPU_REV_MODE_ROOM 1\n#define _RCM_H_ \n#define GM_RifleFlag linkvarbuf[ 26 ]\n#define SpuDiag SPU_DIAG\n#define IS_KPTESEG(x) ((unsigned)(x) >= KPTEBASE)\n#define setUV0(p,_u0,_v0) (p)->u0 = (_u0), (p)->v0 = (_v0)\n#define TRUE 1\n#define HASH_CMD_ntrap 0xdbab\n#define _BAKUDAN_H_ \n#define CHARA_DOOR 0xb997\n#define CdStop() CdControl(CdlStop, 0, 0)\n#define gte_NormalColorDpq(r1,r2,r3,r4) { gte_ldv0(r1); gte_ldrgb(r2); gte_lddp(r3); gte_ncds(); gte_strgb(r4); }\n#define gte_mvmva_core_b(r0) __asm__ volatile(\"cop2 %0\" : : \"g\"(r0))\n#define gte_rtir() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x049E012;\")\n#define GM_LastResultFlag linkvarbuf[ 5 ]\n#define MENU_WEAPON_COUNT 11\n#define GM_PreviousStageFlag linkvarbuf[ 74 ]\n#define C0_PID $10\n#define minor(x) ((int)((x)&0377))\n#define gte_ColorCol(r1,r2,r3) { gte_ldlvl(r1); gte_ldrgb(r2); gte_cc(); gte_strgb(r3); }\n#define GCLCODE_PROC 0x70\n#define CdlStatStandby 0x02\n#define gte_rtir_sf0_b() __asm__ volatile(\"cop2 0x041E012;\")\n#define GCLCODE_HASHED_STRING 6\n#define SPU_COMMON_MVOLL (0x01 << 0)\n#define SPU_COMMON_MVOLR (0x01 << 1)\n#define gte_ncct_b() __asm__ volatile(\"cop2 0x0118043F;\")\n#define setDrawMode(p,dfe,dtd,tpage,tw) setlen(p, 2), ((u_long *)p)[1] = _get_mode(dfe, dtd, tpage), ((u_long *)p)[2] = _get_tw((RECT *)tw)\n#define GM_StunGrenadeMax linkvarbuf[ 34 ]\n#define gte_lcv2tr_b() __asm__ volatile(\"cop2 0x04D0012;\")\n#define HASH_DEMO 0xA242\n#define setSprt(p) setlen(p, 4), setcode(p, 0x64)\n#define setLineF2(p) setlen(p, 3), setcode(p, 0x40)\n#define setLineF3(p) setlen(p, 5), setcode(p, 0x48),(p)->pad = 0x55555555\n#define setLineF4(p) setlen(p, 6), setcode(p, 0x4c),(p)->pad = 0x55555555\n#define EvSpTRAP 0x1000\n#define KMD_STINGER 0x57f8\n#define R_R9 9\n#define gte_RotTrans(r1,r2,r3) { gte_ldv0(r1); gte_rt(); gte_stlvnl(r2); gte_stflg(r3); }\n#define PADL2 PADo\n#define setLineG2(p) setlen(p, 4), setcode(p, 0x50)\n#define setLineG3(p) setlen(p, 7), setcode(p, 0x58),(p)->pad = 0x55555555, (p)->p2 = 0\n#define CAUSE_IP3 0x00000400\n#define CAUSE_IP4 0x00000800\n#define CAUSE_IP5 0x00001000\n#define CAUSE_IP6 0x00002000\n#define CAUSE_IP7 0x00004000\n#define CAUSE_IP8 0x00008000\n#define GM_MODiskFlag linkvarbuf[ 57 ]\n#define SR_IBIT1 0x00000100\n#define SR_IBIT3 0x00000400\n#define SR_IBIT4 0x00000800\n#define SR_IBIT5 0x00001000\n#define SR_IBIT6 0x00002000\n#define SR_IBIT7 0x00004000\n#define SR_IBIT8 0x00008000\n#define C0_RFE 0x10\n#define SPU_12CH (0x1L<<12)\n#define PADLleft (1<<15)\n#define SpuOffEnvOn SPU_OFF_ENV_ON\n#define GCL_AdvanceShort(p) p += sizeof(short)\n#define HASH_CMD_unk1 0xe257\n#define SpuReset SPU_RESET\n#define K1_TO_PHYS(x) ((unsigned)(x)&0x1FFFFFFF)\n#define _AAM_H_ \n#define GM_FrozenItemsTempMin linkvarbuf[ 72 ]\n#define _BLOOD_H \n#define gte_rtps() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0180001;\")\n#define copyVector(v0,v1) (v0)->vx = (v1)->vx, (v0)->vy = (v1)->vy, (v0)->vz = (v1)->vz\n#define GM_CardboardBoxAFlag linkvarbuf[ 39 ]\n#define _SNA_HZD_H_ \n#define gte_stsxy0(r0) __asm__ volatile(\"swc2   $12, 0( %0 )\" : : \"r\"(r0) : \"memory\")\n#define gte_stsxy1(r0) __asm__ volatile(\"swc2   $13, 0( %0 )\" : : \"r\"(r0) : \"memory\")\n#define gte_stsxy2(r0) __asm__ volatile(\"swc2   $14, 0( %0 )\" : : \"r\"(r0) : \"memory\")\n#define gte_stsxy3(r0,r1,r2) __asm__ volatile(\"swc2   $12, 0( %0 );\" \"swc2   $13, 0( %1 );\" \"swc2   $14, 0( %2 )\" : : \"r\"(r0), \"r\"(r1), \"r\"(r2) : \"memory\")\n#define CdlDiskError 0x05\n#define STATIC_ASSERT_SIZE(struct,size) \n#define GCLCODE_SHORT 1\n#define SPU_07CH (0x1L<< 7)\n#define GM_TimerBombFlag linkvarbuf[ 55 ]\n#define GCL_IsVariable(gcl_code) ((gcl_code & 0xF0) == GCLCODE_VARIABLE)\n#define dumpWH(p) GPU_printf(\"(%d,%d)\\n\", (p)->w, (p)->h )\n#define COUNTOF(x) sizeof(x) / sizeof(x[0])\n#define _BOX_H_ \n#define gte_ReadRotMatrix(r0) __asm__ volatile(\"cfc2   $12, $0;\" \"cfc2   $13, $1;\" \"sw     $12, 0( %0 );\" \"sw     $13, 4( %0 );\" \"cfc2   $12, $2;\" \"cfc2   $13, $3;\" \"cfc2   $14, $4;\" \"sw     $12, 8( %0 );\" \"sw     $13, 12( %0 );\" \"sw     $14, 16( %0 );\" \"cfc2   $12, $5;\" \"cfc2   $13, $6;\" \"cfc2   $14, $7;\" \"sw     $12, 20( %0 );\" \"sw     $13, 24( %0 );\" \"sw     $14, 28( %0 )\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\", \"memory\")\n#define gte_RotNclip3(r1,r2,r3,r4,r5,r6,r7,r8,r9,r10) { gte_ldv3(r1,r2,r3); gte_rtpt(); gte_stflg(r9); gte_nclip(); gte_stopz(r10); gte_stsxy3(r4,r5,r6); gte_stdp(r7); gte_stszotz(r8); }\n#define GM_ChaffGrenadeMax linkvarbuf[ 35 ]\n#define EvSpTIMOUT 0x0100\n#define GM_RemoteMissileMax linkvarbuf[ 30 ]\n#define gte_rtv0bk_b() __asm__ volatile(\"cop2 0x0482012;\")\n#define PADR1 PADl\n#define R_EPC 32\n#define SPU_7CH SPU_07CH\n#define gte_rtv0() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0486012;\")\n#define HASH_CMD_load 0xc8bb\n#define _CLAYMORE_H_ \n#define GCLCODE_NULL 0\n#define GCL_GetBoolVarBitFlag(gcl_var) (char)(1 << (((gcl_var << 1) >> 17) & 0xF))\n#define major(x) ((int)(((unsigned)(x)>>8)&0377))\n#define GCLCODE_COMMAND 0x60\n#define gte_stsxy3_ft3(r0) __asm__ volatile(\"swc2   $12, 8( %0 );\" \"swc2   $13, 16( %0 );\" \"swc2   $14, 24( %0 )\" : : \"r\"(r0) : \"memory\")\n#define gte_stsxy3_ft4(r0) __asm__ volatile(\"swc2   $12, 8( %0 );\" \"swc2   $13, 16( %0 );\" \"swc2   $14, 24( %0 )\" : : \"r\"(r0) : \"memory\")\n#define SPU_VOICE_EXPDec 7\n#define GM_CameraFlag linkvarbuf[ 49 ]\n#define C0_BADVADDR $8\n#define NULL 0\n#define R9 $9\n#define KMD_CLAYMORE 0x17a1\n#define _LIBSPU_H_ \n#define gte_sqr0_b() __asm__ volatile(\"cop2 0x0A00428;\")\n#define _UNKNOWN_H_ \n#define C0_PROBE 0x8\n#define __attribute__(...) \n#define SpuCDOnly SPU_CDONLY\n#define EvSpIOE 0x0004\n#define TLBRAND_RANDMASK 0x00003f00\n#define gte_lcirtr_b() __asm__ volatile(\"cop2 0x04D8012;\")\n#define CAUSE_IPMASK 0x0000FF00\n#define GM_CurrentWeaponId linkvarbuf[ 14 ]\n#define gte_ld_intpol_bv0(r0) __asm__ volatile(\"lbu    $12, 0( %0 );\" \"lbu    $13, 1( %0 );\" \"ctc2   $12, $21;\" \"ctc2   $13, $22\" : : \"r\"(r0) : \"$12\", \"$13\")\n#define gte_ld_intpol_bv1(r0) __asm__ volatile(\"lbu    $12, 0( %0 );\" \"lbu    $13, 1( %0 );\" \"mtc2   $12, $9;\" \"mtc2   $13, $10\" : : \"r\"(r0) : \"$12\", \"$13\")\n#define GM_Weapons (&linkvarbuf[ 17 ])\n#define gte_RotAverageNclipColorCol3(r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16) { gte_ldv3(r1,r2,r3); gte_rtpt(); gte_stflg(r15); gte_nclip(); gte_stopz(r16); gte_ldv3(r4,r5,r6); gte_ldrgb(r7); gte_ncct(); gte_stsxy3(r8,r9,r10); gte_strgb3(r11,r12,r13); gte_avsz3(); gte_stotz(r14); }\n#define SPU_OFF_ENV_ON 2\n#define CdlStop 0x08\n#define SPU_VOICE_NOTE (0x01 << 5)\n#define gte_llv2bk_b() __asm__ volatile(\"cop2 0x04B2012;\")\n#define gte_stsxy3_f3(r0) __asm__ volatile(\"swc2   $12, 8( %0 );\" \"swc2   $13, 12( %0 );\" \"swc2   $14, 16( %0 )\" : : \"r\"(r0) : \"memory\")\n#define gte_stsxy3_f4(r0) __asm__ volatile(\"swc2   $12, 8( %0 );\" \"swc2   $13, 12( %0 );\" \"swc2   $14, 16( %0 )\" : : \"r\"(r0) : \"memory\")\n#define PadStateDiscon 0\n#define restartMULI() \n#define gte_stsxy3_g3(r0) __asm__ volatile(\"swc2   $12, 8( %0 );\" \"swc2   $13, 16( %0 );\" \"swc2   $14, 24( %0 )\" : : \"r\"(r0) : \"memory\")\n#define gte_stsxy3_g4(r0) __asm__ volatile(\"swc2   $12, 8( %0 );\" \"swc2   $13, 16( %0 );\" \"swc2   $14, 24( %0 )\" : : \"r\"(r0) : \"memory\")\n#define TcbStACTIVE 0x4000\n#define SPU_VOICE_ADSR_RMODE (0x01 << 10)\n#define RDCODE_VARSAVE 8\n#define StCOMPLETE 0x0002\n#define StVER 0x00\n#define SPU_BIT 8\n#define gte_ApplyMatrixSV(r1,r2,r3) { gte_SetRotMatrix(r1); gte_ldv0(r2); gte_rtv0(); gte_stsv(r3); }\n#define KMD_NIK_MIS 0x9a90\n#define CdlMAXFILE 64\n#define setTile16(p) setlen(p, 2), setcode(p, 0x78)\n#define R_S7 R_R23\n#define _GGMNG_H_ \n#define gte_ldsz4(r0,r1,r2,r3) __asm__ volatile(\"mtc2   %0, $16;\" \"mtc2   %1, $17;\" \"mtc2   %2, $18;\" \"mtc2   %3, $19\" : : \"r\"(r0), \"r\"(r1), \"r\"(r2), \"r\"(r3))\n#define gte_rtv2() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0496012;\")\n#define C0_TLBHI $10\n#define gte_OuterProduct12SVL(r1,r2,r3) { gte_ldopv1SV(r1); gte_ldopv2SV(r2); gte_op12(); gte_stlvnl(r3); }\n#define gte_rtir_sf0() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x041E012;\")\n#define SPU_DIAG (-2)\n#define SPU_VOICE_VOLMODEL (0x01 << 2)\n#define SPU_VOICE_VOLMODER (0x01 << 3)\n#define MODE_NTSC 0\n#define SPU_21CH (0x1L<<21)\n#define CdlMAXTOC 100\n#define gte_LocalLight(r1,r2) { gte_ldv0(r1); gte_ll(); gte_stlvl(r2); }\n#define dumpRECT(r) GPU_printf(\"(%d,%d)-(%d,%d)\\n\", (r)->x,(r)->y,(r)->w,(r)->h)\n#define CdlStatSeek 0x40\n#define PADLdown (1<<14)\n#define CdlModeStream2 0x120\n#define SetPackedRGB(p,r,g,b) ( p )->rgbc = ( ( r << 16 ) | ( g << 8 ) ) | b;\n#define gte_OuterProduct0SVL(r1,r2,r3) { gte_ldopv1SV(r1); gte_ldopv2SV(r2); gte_op0(); gte_stlvnl(r3); }\n#define CHARA_ITEM 0x8767\n#define GM_FrozenItemsTempMax linkvarbuf[ 71 ]\n#define C0_TLBLO $2\n#define SPU_ST_TRANSFER 7\n#define InfoActSign 5\n#define TMPVTXNUM 16\n#define SEXC_CPU EXC_CODE(19)\n#define HASH_CMD_radio 0x24e1\n#define IS_KSEG2(x) ((unsigned)(x) >= K2BASE && (unsigned)(x) < KPTEBASE)\n#define SPU_00CH (0x1L<< 0)\n#define gte_stsxy3_gt4(r0) __asm__ volatile(\"swc2   $12, 8( %0 );\" \"swc2   $13, 20( %0 );\" \"swc2   $14, 32( %0 )\" : : \"r\"(r0) : \"memory\")\n#define SPU_16CH (0x1L<<16)\n#define gte_ldlvl(r0) __asm__ volatile(\"lwc2   $9, 0( %0 );\" \"lwc2   $10, 4( %0 );\" \"lwc2   $11, 8( %0 )\" : : \"r\"(r0))\n#define KMD_CAN_GREN 0x7a64\n#define SPU_VOICE_ADSR_ADSR1 (0x01 << 17)\n#define gte_intpl() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0980011;\")\n#define PadStateExecCmd 5\n#define HASH_CMD_map 0xc091\n#define HwCdRom (DescHW|0x03)\n#define SPU_EVENT_PITCHLFO (0x01 << 1)\n#define PCX_GO_CONTINUE 0x669d\n#define SpuTransByDMA SpuTransferByDMA\n#define SGT_SCOPE 0x51c8\n#define _R3000_H \n#define gte_lcv1bk() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04CA012;\")\n#define SpuCont SPU_CONT\n#define _MINE_H_ \n#define _BODY_ARM_H_ \n#define _MOTION_H_ \n#define gte_llirbk_b() __asm__ volatile(\"cop2 0x04BA012;\")\n#define GM_GasMaskFlag linkvarbuf[ 44 ]\n#define EXC_CODE(x) ((x)<<2)\n#define HASH_CMD_menu 0x226d\n#define gte_rtv1() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x048E012;\")\n#define GM_CurrentItem (GM_Items[ GM_CurrentItemId ])\n#define SPU_DECODEDDATA_SIZE 0x200\n#define gte_ldcv(r0) __asm__ volatile(\"lbu    $12, 0( %0 );\" \"lbu    $13, 1( %0 );\" \"lbu    $14, 2( %0 );\" \"mtc2   $12, $9;\" \"mtc2   $13, $10;\" \"mtc2   $14, $11\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\")\n#define GM_NightVisionFlag linkvarbuf[ 42 ]\n#define MAX_CONTROLS 96\n#define SPU_REV_MODE_ECHO 7\n#define SPU_SUCCESS 0\n#define gte_Lzc(r1,r2) { gte_ldlzc(r1); gte_nop(); gte_nop(); gte_stlzc(r2); }\n#define FALSE 0\n#define RDCODE_SOUND 6\n#define gte_ldopv1SV(r0) __asm__ volatile(\"lh     $12, 0( %0 );\" \"lh     $13, 2( %0 );\" \"ctc2   $12, $0;\" \"lh     $14, 4( %0 );\" \"ctc2   $13, $2;\" \"ctc2   $14, $4\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\")\n#define EXCEPT_INT 9\n#define HASH_MAIN 0x7df9\n#define K1_TO_K0(x) ((unsigned)(x)&0x9FFFFFFF)\n#define FNT_MAX_SPRT 1024\n#define gte_llv1bk_b() __asm__ volatile(\"cop2 0x04AA012;\")\n#define RCntMdNOINTR 0x2000\n#define SR_IBIT2 0x00000200\n#define _THING_DOOR_H_ \n#define HwVBLANK (DescHW|0x01)\n#define GM_MedicineFlag linkvarbuf[ 51 ]\n#define SGT_IR_GGLE1 0x84db\n#define SGT_IR_GGLE3 0x84dd\n#define GCLCODE_TABLE_CODE 10\n#define R_T1 R_R9\n#define FACE_ANIM_SIMPLE ((unsigned short)0)\n#define GM_TranquilizerTimer linkvarbuf[ 73 ]\n#define CdlModeStream 0x100\n#define gte_lc_b() __asm__ volatile(\"cop2 0x04DA412;\")\n#define HwSIO (DescHW|0x0b)\n#define gte_ldlv0(r0) __asm__ volatile(\"lhu    $13, 4( %0 );\" \"lhu    $12, 0( %0 );\" \"sll    $13, $13, 16;\" \"or     $12, $12, $13;\" \"mtc2   $12, $0;\" \"lwc2   $1, 8( %0 )\" : : \"r\"(r0) : \"$12\", \"$13\")\n#define R_T4 R_R12\n#define gte_lcv0tr_b() __asm__ volatile(\"cop2 0x04C0012;\")\n#define R_T5 R_R13\n#define _MEMCARD_H_ \n#define gte_stsxy01c(r0) __asm__ volatile(\"swc2   $12, 0( %0 );\" \"swc2   $13, 4( %0 )\" : : \"r\"(r0) : \"memory\")\n#define gte_stopz(r0) __asm__ volatile(\"swc2   $24, 0( %0 )\" : : \"r\"(r0) : \"memory\")\n#define StSECTOR_OFFSET 0x02\n#define gte_LoadAverage0(r1,r2,r3,r4,r5) { gte_lddp(r3); gte_ldlvl(r1); gte_gpf0(); gte_lddp(r4); gte_ldlvl(r2); gte_gpl0(); gte_stlvl(r5); }\n#define CdlModeRept 0x04\n#define StFRAME_SIZE 0x06\n#define applyVector(v,_x,_y,_z,op) (v)->vx op _x, (v)->vy op _y, (v)->vz op _z\n#define gte_OuterProduct0(r1,r2,r3) { gte_ldopv1(r1); gte_ldopv2(r2); gte_op0(); gte_stlvnl(r3); }\n#define SPU_ERROR (-1)\n#define SR_IMASK0 0x0000ff00\n#define SR_IMASK1 0x0000fe00\n#define SR_IMASK2 0x0000fc00\n#define SR_IMASK4 0x0000f000\n#define SR_IMASK5 0x0000e000\n#define SR_IMASK7 0x00008000\n#define SR_IMASK8 0x00000000\n#define SR_BEV 0x00400000\n#define _FNTPRINT_ \n#define SPU_REV_FEEDBACK (0x01 << 4)\n#define C0_INX $0\n#define EvStWAIT 0x1000\n#define JIMCTRL_H \n#define KMD_NIKITA 0x15a9\n#define SpuTransferByIO SPU_TRANSFER_BY_IO\n#define gte_rtv0_b() __asm__ volatile(\"cop2 0x0486012;\")\n#define GAME_FLAG_BIT_02 0x2\n#define GAME_FLAG_BIT_05 0x10\n#define GAME_FLAG_BIT_06 0x20\n#define GAME_FLAG_BIT_07 0x40\n#define GAME_FLAG_BIT_08 0x80\n#define GAME_FLAG_BIT_09 0x100\n#define gte_ldlzc(r0) __asm__ volatile(\"mtc2   %0, $30\" : : \"r\"(r0))\n#define GAME_FLAG_BIT_10 0x200\n#define gte_llv0_b() __asm__ volatile(\"cop2 0x04A6012;\")\n#define GAME_FLAG_BIT_14 0x2000\n#define GAME_FLAG_BIT_15 0x4000\n#define GAME_FLAG_BIT_18 0x20000\n#define SPU_COMMON_CDREV (0x01 << 8)\n#define GCLCODE_STACK_VAR 0x20\n#define GAME_FLAG_BIT_22 0x200000\n#define GAME_FLAG_BIT_24 0x800000\n#define StREWIND 0x0001\n#define GAME_FLAG_BIT_27 0x4000000\n#define NF_FSUMEM 4\n#define gte_llir() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04BE012;\")\n#define GM_TotalEnemiesKilled linkvarbuf[ 79 ]\n#define HwSPU (DescHW|0x09)\n#define gte_rt() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0480012;\")\n#define gte_OuterProduct12SV(r1,r2,r3) { gte_ldopv1SV(r1); gte_ldopv2SV(r2); gte_op12(); gte_stsv(r3); }\n#define GAME_FLAG_BIT_31 0x40000000\n#define GAME_FLAG_BIT_32 0x80000000\n#define CAUSE_FMT \"\\20\\40BD\\36CE1\\35CE0\\20IP8\\17IP7\\16IP6\\15IP5\\14IP4\\13IP3\\12SW2\\11SW1\\1INT\"\n#define EXCEPT_UTLB 2\n#define PADL1 PADn\n#define InfoActSize 3\n#define GAME_FLAG_BIT_26 0x2000000\n#define gte_llv0tr_b() __asm__ volatile(\"cop2 0x04A0012;\")\n#define SR_IEC 0x00000001\n#define gte_llv0bk() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04A2012;\")\n#define SPU_COMMON_EXTVOLL (0x01 << 10)\n#define GM_BonusItemsFlag linkvarbuf[ 3 ]\n#define SpuOn SPU_ON\n#define setSemiTrans(p,abe) ((abe)?setcode(p, getcode(p)|0x02):setcode(p, getcode(p)&~0x02))\n#define GM_LinkVar(buf,var) (buf[((short*)&var - (short*)&linkvarbuf)])\n#define SPU_TRANSFER_BY_DMA 0L\n#define GM_TotalSeconds linkvarbuf[ 92 ]\n#define _AFTERSE_H_ \n#define R_A0 R_R4\n#define R_A1 R_R5\n#define R_A2 R_R6\n#define R_A3 R_R7\n#define SGT_NV_GGLE1 0x8504\n#define SGT_NV_GGLE2 0x8505\n#define CdlGetparam 0x0f\n#define gte_dpcl() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0680029;\")\n#define GAME_FLAG_BIT_29 0x10000000\n#define gte_lcv1tr() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04C8012;\")\n#define R_AT R_R1\n#define gte_lcir() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04DE012;\")\n#define SPU_ST_ACCEPT 1\n#define HASH_CMD_demo 0xa242\n#define StTYPE 0x01\n#define _STNGRND_H_ \n#define EXC_IBE EXC_CODE(6)\n#define SPU_04CH (0x1L<< 4)\n#define PADR2 PADm\n#define gte_llv0bk_b() __asm__ volatile(\"cop2 0x04A2012;\")\n#define TcbMdPRI 0x2000\n#define setClut(p,x,y) ((p)->clut = getClut(x,y))\n#define CdlGetTD 0x14\n#define CdDeMute() CdControl(CdlDemute, 0, 0)\n#define inval swr $0,\n#define GM_StingerFlag linkvarbuf[ 21 ]\n#define UNTAG_PTR(Type,Ptr) (Type *)((unsigned int)Ptr & 0x7FFFFFFF)\n#define RDCODE_IF 0x10\n#define R_FP R_R30\n#define _UINT_T \n#define GCL_AdvanceByte(p) p += sizeof(unsigned char)\n#define GM_ShapeKeyFlag linkvarbuf[ 53 ]\n#define EvStALREADY 0x4000\n#define gte_strgb(r0) __asm__ volatile(\"swc2   $22, 0( %0 )\" : : \"r\"(r0) : \"memory\")\n#define setRGB0(p,_r0,_g0,_b0) (p)->r0 = _r0,(p)->g0 = _g0,(p)->b0 = _b0\n#define setRGB1(p,_r1,_g1,_b1) (p)->r1 = _r1,(p)->g1 = _g1,(p)->b1 = _b1\n#define setRGB2(p,_r2,_g2,_b2) (p)->r2 = _r2,(p)->g2 = _g2,(p)->b2 = _b2\n#define FACE_ANIM_FULL ((unsigned short)1)\n#define gte_SetLightMatrix(r0) __asm__ volatile(\"lw     $12, 0( %0 );\" \"lw     $13, 4( %0 );\" \"ctc2   $12, $8;\" \"ctc2   $13, $9;\" \"lw     $12, 8( %0 );\" \"lw     $13, 12( %0 );\" \"lw     $14, 16( %0 );\" \"ctc2   $12, $10;\" \"ctc2   $13, $11;\" \"ctc2   $14, $12\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\")\n#define GM_SnakePosX linkvarbuf[ 8 ]\n#define HASH_CMD_hzd 0x7d50\n#define SPU_4CH SPU_04CH\n#define CdlMute 0x0b\n#define SR_IMASK3 0x0000f800\n#define gte_dpcl_b() __asm__ volatile(\"cop2 0x0680029;\")\n#define HASH_CMD_light 0x306a\n#define GCLCODE_PROC_CALL 8\n#define gte_rtv2_b() __asm__ volatile(\"cop2 0x0496012;\")\n#define RCntCNT3 (DescRC|0x03)\n#define gte_lcv1_b() __asm__ volatile(\"cop2 0x04CE012;\")\n#define catPrim(p0,p1) setaddr(p0, p1)\n#define SR_IMASK6 0x0000c000\n#define PADstart PADh\n#define gte_FlipRotMatrixX() __asm__ volatile(\"cfc2   $12, $0;\" \"cfc2   $13, $1;\" \"sll    $14, $12, 16;\" \"sra    $14, $14, 16;\" \"subu   $14, $0, $14;\" \"sra    $15, $12, 16;\" \"subu   $15, $0, $15;\" \"sll    $15, $15, 16;\" \"sll    $14, $14, 16;\" \"srl    $14, $14, 16;\" \"or     $14, $14, $15;\" \"ctc2   $14, $0;\" \"sll    $14, $13, 16;\" \"sra    $14, $14, 16;\" \"subu   $14, $0, $14;\" \"sra    $15, $13, 16;\" \"sll    $15, $15, 16;\" \"sll    $14, $14, 16;\" \"srl    $14, $14, 16;\" \"or     $14, $14, $15;\" \"ctc2   $14, $1\" : : : \"$12\", \"$13\", \"$14\", \"$15\")\n#define CdlModeSize1 0x20\n#define _MAP_H_ \n#define NF_ADDUPC 3\n#define gte_ncdt_b() __asm__ volatile(\"cop2 0x0F80416;\")\n#define gte_ld_intpol_uv0(r0) __asm__ volatile(\"lbu    $12, 0( %0 );\" \"lbu    $13, 1( %0 );\" \"ctc2   $12, $21;\" \"ctc2   $13, $22\" : : \"r\"(r0) : \"$12\", \"$13\")\n#define _BANDANA_H_ \n#define gte_ld_intpol_uv1(r0) __asm__ volatile(\"lbu    $12, 0( %0 );\" \"lbu    $13, 1( %0 );\" \"mtc2   $12, $9;\" \"mtc2   $13, $10\" : : \"r\"(r0) : \"$12\", \"$13\")\n#define R_K0 R_R26\n#define CdlStatError 0x01\n#define gte_mvlvtr() __asm__ volatile(\"mfc2   $12, $25;\" \"mfc2   $13, $26;\" \"mfc2   $14, $27;\" \"ctc2   $12, $5;\" \"ctc2   $13, $6;\" \"ctc2   $14, $7\" : : : \"$12\", \"$13\", \"$14\")\n#define gte_ll_b() __asm__ volatile(\"cop2 0x04A6412;\")\n#define CAUSE_EXCSHIFT 2\n#define gte_LoadAverageShort12(r1,r2,r3,r4,r5) { gte_lddp(r3); gte_ldsv(r1); gte_gpf12(); gte_lddp(r4); gte_ldsv(r2); gte_gpl12(); gte_stsv(r5); }\n#define GCL_IsGameStateVar(gcl_var) ((gcl_var & 0xF00000) == 0x800000)\n#define _RMISSILE_H_ \n#define PADRup (1<< 4)\n#define setRGB3(p,_r3,_g3,_b3) (p)->r3 = _r3,(p)->g3 = _g3,(p)->b3 = _b3\n#define gte_rtv2tr_b() __asm__ volatile(\"cop2 0x0490012;\")\n#define ACTOR_LIST_COUNT 9\n#define GM_GameTimeSeconds linkvarbuf[ 90 ]\n#define GM_TotalSaves linkvarbuf[ 88 ]\n#define gte_lcv1() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04CE012;\")\n#define gte_lcv2() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04D6012;\")\n#define GM_GrenadeMax linkvarbuf[ 29 ]\n#define SR_ISC 0x00010000\n#define HwPIO (DescHW|0x0a)\n#define R_GP R_R28\n#define SPU_REV_MODE_MAX 10\n#define SPU_CDONLY 5\n#define R_R11 11\n#define gte_ldopv2(r0) __asm__ volatile(\"lwc2   $11, 8( %0 );\" \"lwc2   $9, 0( %0 );\" \"lwc2   $10, 4( %0 )\" : : \"r\"(r0))\n#define GM_BodyArmorFlag linkvarbuf[ 45 ]\n#define _SIZE_T \n#define EXC_INT EXC_CODE(0)\n#define SPU_17CH (0x1L<<17)\n#define SPU_REV_DELAYTIME (0x01 << 3)\n#define gte_rtv0tr() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0480012;\")\n#define KMD_CB_BOX 0xe2a9\n#define addPrims(ot,p0,p1) setaddr(p1, getaddr(ot)),setaddr(ot, p0)\n#define _CDBIOS_H_ \n#define gte_llv0tr() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04A0012;\")\n#define R_R0 0\n#define R_R1 1\n#define R_R2 2\n#define R_R3 3\n#define R_R4 4\n#define R_R5 5\n#define R_R6 6\n#define R_R7 7\n#define R_R8 8\n#define R_RA R_R31\n#define K2BASE 0xC0000000\n#define gte_lddp(r0) __asm__ volatile(\"mtc2   %0, $8\" : : \"r\"(r0))\n#define R0 $0\n#define R1 $1\n#define R2 $2\n#define R3 $3\n#define R4 $4\n#define R5 $5\n#define R6 $6\n#define R7 $7\n#define CdlStatPlay 0x80\n#define SPU_ON 1\n#define R_S0 R_R16\n#define R_S1 R_R17\n#define R_S2 R_R18\n#define R_S3 R_R19\n#define R_S5 R_R21\n#define R_S6 R_R22\n#define OAR_SNAKE 0x992d\n#define SPU_VOICE_WDSA (0x01 << 7)\n#define R_SP R_R29\n#define R_SR 35\n#define EvSpSYSCALL 0x4000\n#define FNT_MAX_ID 8\n#define R_T0 R_R8\n#define R_T2 R_R10\n#define R_T3 R_R11\n#define R_T6 R_R14\n#define R_T7 R_R15\n#define R_T8 R_R24\n#define R_T9 R_R25\n#define _STRCTRL_H_ \n#define _SPARK_H_ \n#define gte_CompMatrix(r1,r2,r3) { gte_MulMatrix0(r1,r2,r3); gte_SetTransMatrix(r1); gte_ldlv0((char*)r2+20); gte_rt(); gte_stlvnl((char*)r3+20); }\n#define gte_lcir_b() __asm__ volatile(\"cop2 0x04DE012;\")\n#define PADh (1<<11)\n#define PADi (1<< 9)\n#define PADj (1<<10)\n#define PADk (1<< 8)\n#define PADl (1<< 3)\n#define PADm (1<< 1)\n#define PADn (1<< 2)\n#define PADo (1<< 0)\n#define gte_mvmva_b(sf,mx,v,cv,lm) gte_mvmva_core_b(0x0400012 | ((sf) << 19) | ((mx) << 17) | ((v) << 15) | ((cv) << 13) | ((lm) << 10))\n#define HwCARD (DescHW|0x11)\n#define WAIT_TIME 0x800000\n#define EXC_RMISS EXC_CODE(2)\n#define R_V0 R_R2\n#define R_V1 R_R3\n#define K0_TO_PHYS(x) ((unsigned)(x)&0x1FFFFFFF)\n#define RCntMdGATE 0x0010\n#define IS_KSEG0(x) ((unsigned)(x) >= K0BASE && (unsigned)(x) < K1BASE)\n#define SPU_TRANSFER_PEEK 0\n#define GM_RationFlag linkvarbuf[ 50 ]\n#define _KANJIFNTPRINT_ \n#define gte_ncds() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0E80413;\")\n#define setTile1(p) setlen(p, 2), setcode(p, 0x68)\n#define PADLright (1<<13)\n#define setTile8(p) setlen(p, 2), setcode(p, 0x70)\n#define gte_lcirbk() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04DA012;\")\n#define gte_NormalColorDpq3(r1,r2,r3,r4,r5,r6,r7,r8) { gte_ldv3(r1,r2,r3); gte_ldrgb(r4); gte_lddp(r5); gte_ncdt(); gte_strgb3(r6,r7,r8); }\n#define RDCODE_NULL 0\n#define gte_stsz3(r0,r1,r2) __asm__ volatile(\"swc2   $17, 0( %0 );\" \"swc2   $18, 0( %1 );\" \"swc2   $19, 0( %2 )\" : : \"r\"(r0), \"r\"(r1), \"r\"(r2) : \"memory\")\n#define CdlDemute 0x0c\n#define RDCODE_VOICE 2\n#define CAUSE_CEMASK 0x30000000\n#define SPU_NULL 0\n#define SPU_13CH (0x1L<<13)\n#define gte_stsz3c(r0) __asm__ volatile(\"swc2   $17, 0( %0 );\" \"swc2   $18, 4( %0 );\" \"swc2   $19, 8( %0 )\" : : \"r\"(r0) : \"memory\")\n#define SPU_EVENT_KEY (0x01 << 0)\n#define KMD_CIGAR 0x2ef8\n#define gte_rtv1_b() __asm__ volatile(\"cop2 0x048E012;\")\n#define RDCODE_ELSE 0x11\n#define PHYS_TO_K0(x) ((unsigned)(x)|0x80000000)\n#define PHYS_TO_K1(x) ((unsigned)(x)|0xA0000000)\n#define _SHADOW_H_ \n#define SpuVoiceOnly SPU_VOICEONLY\n#define EvSpIOER 0x0400\n#define gte_stsz4c(r0) __asm__ volatile(\"swc2   $16, 0( %0 );\" \"swc2   $17, 4( %0 );\" \"swc2   $18, 8( %0 );\" \"swc2   $19, 12( %0 )\" : : \"r\"(r0) : \"memory\")\n#define gte_rtirtr_b() __asm__ volatile(\"cop2 0x0498012;\")\n#define GM_SnakeMaxHealth linkvarbuf[ 12 ]\n#define _DELAY_H \n#define GM_CardboardBoxBFlag linkvarbuf[ 40 ]\n#define SPU_VOICE_EXPDecN SPU_VOICE_EXPDec\n#define SPU_VOICE_EXPDecR SPU_VOICE_EXPDec\n#define GM_BombFlag linkvarbuf[ 23 ]\n#define KMD_SNAKE 0x992d\n#define GM_TotalHours linkvarbuf[ 91 ]\n#define SPU_08CH (0x1L<< 8)\n#define SR_SWC 0x00020000\n#define gte_LightColor(r1,r2) { gte_ldlvl(r1); gte_lc(); gte_stlvl(r2); }\n#define gte_gpl12_b() __asm__ volatile(\"cop2 0x01A8003E;\")\n#define _MTS_NEW_H \n#define gte_rtv1tr_b() __asm__ volatile(\"cop2 0x0488012;\")\n#define R_R22 22\n#define _MEMORY_H \n#define EvSpCOMP 0x0020\n#define CAUSE_EXCMASK 0x0000003C\n#define _LANGUAGE_C 1\n#define GM_UnkFlagBE linkvarbuf[ 95 ]\n#define SGT_CB_BOX 0xe2a9\n#define gte_avsz3() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0158002D;\")\n#define gte_avsz4() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0168002E;\")\n#define GCLCODE_VARIABLE 0x10\n#define SpuSetTransMode(mode) SpuSetTransferMode((mode))\n#define EvSpIOEW 0x0800\n#define gte_stsxy3_gt3(r0) __asm__ volatile(\"swc2   $12, 8( %0 );\" \"swc2   $13, 20( %0 );\" \"swc2   $14, 32( %0 )\" : : \"r\"(r0) : \"memory\")\n#define DescSW 0xf4000000\n#define SPU_DONT_CARE 4\n#define gte_stcv(r0) __asm__ volatile(\"mfc2   $12, $9;\" \"mfc2   $13, $10;\" \"mfc2   $14, $11;\" \"sb     $12, 0( %0 );\" \"sb     $13, 1( %0 );\" \"sb     $14, 2( %0 )\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\", \"memory\")\n#define RDCODE_ELSEIF 0x12\n#define GCLCODE_CHAR 3\n#define gte_stdp(r0) __asm__ volatile(\"swc2   $8, 0( %0 )\" : : \"r\"(r0) : \"memory\")\n#define getClut(x,y) (((y)<<6)|(((x)>>4)&0x3f))\n#define _GMSIGHT_H \n#define EXCEPT_NORM 1\n#define gte_stfc(r0) __asm__ volatile(\"cfc2   $12, $21;\" \"cfc2   $13, $22;\" \"cfc2   $14, $23;\" \"sw     $12, 0( %0 );\" \"sw     $13, 4( %0 );\" \"sw     $14, 8( %0 )\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\", \"memory\")\n#define GM_CurrentItemId linkvarbuf[ 15 ]\n#define SPU_DECODE_SECONDHALF SPU_DECODED_SECONDHALF\n#define RDCODE_SWITCH_CASE 0x21\n#define SwCARD (DescSW|0x01)\n#define SGT_CAMERA_2 0xb3cd\n#define dumpUV0(p) GPU_printf(\"(%d,%d)\\n\", (p)->u0, (p)->v0)\n#define CdlStandby 0x07\n#define GM_LastSaveHours linkvarbuf[ 93 ]\n#define lcache lwl\n#define SECTION(x) __attribute__((section(x)))\n#define SPU_VOICE_PITCH (0x01 << 4)\n#define K1BASE 0xA0000000\n#define TARGET_FLAG ( TARGET_POWER | TARGET_CAPTURE | TARGET_PUSH | TARGET_TOUCH | TARGET_SEEK )\n#define gte_DpqColorLight(r1,r2,r3,r4) { gte_ldlvl(r1); gte_ldrgb(r2); gte_lddp(r3); gte_dpcl(); gte_strgb(r4); }\n#define itob(i) ((i)/10*16 + (i)%10)\n#define GM_GameTimeHours linkvarbuf[ 89 ]\n#define HASH_CMD_foreach 0x7636\n#define SPU_VOICEONLY 6\n#define EvStUNUSED 0x0000\n#define setTPage(p,tp,abr,x,y) ((p)->tpage = getTPage(tp,abr,x,y))\n#define _MIPS_SZLONG 32\n#define gte_NormalClip(r1,r2,r3,r4) { gte_ldsxy3(r1,r2,r3); gte_nclip(); gte_stopz(r4); }\n#define EXC_MOD EXC_CODE(1)\n#define CdlComplete 0x02\n#define CdlModeSpeed 0x80\n#define gte_ncs() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0C8041E;\")\n#define gte_nct() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x0D80420;\")\n#define GM_CurrentMapFlag linkvarbuf[ 7 ]\n#define TLBRANDOMBASE NWIREDENTRIES\n#define SPU_REV_DEPTHL (0x01 << 1)\n#define gte_lcirtr() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04D8012;\")\n#define SPU_REV_DEPTHR (0x01 << 2)\n#define EvMdINTR 0x1000\n#define EvSpDR 0x0040\n#define StSTATUS 0x00\n#define gte_subdvl(r0,r1,r2) __asm__ volatile(\"lw     $12, 0( %0 );\" \"lw     $13, 0( %1 );\" \"mtc2   $12, $9;\" \"mtc2   $13, $10;\" \"sra    $12, $12, 16;\" \"sra    $13, $13, 16;\" \"subu   $15, $12, $13;\" \"mfc2   $12, $9;\" \"mfc2   $13, $10;\" \"sw     $15, 4( %2 );\" \"subu   $12, $12, $13;\" \"sw     $12, 0( %2 )\" : : \"r\"(r0), \"r\"(r1), \"r\"(r2) : \"$12\", \"$13\", \"$14\", \"$15\", \"memory\")\n#define _FACE_H \n#define EXCEPT_DB 4\n#define SEXC_RESCHED EXC_CODE(17)\n#define R_MDLO 34\n#define gte_RotColorDpq(r1,r2,r3,r4,r5,r6,r7) { gte_ldv0(r1); gte_rtps(); gte_stsxy(r4); gte_stflg(r6); gte_ldv0(r2); gte_ldrgb(r3); gte_ncds(); gte_strgb(r5); gte_stszotz(r7); }\n#define gte_subdvd(r0,r1,r2) __asm__ volatile(\"lw     $12, 0( %0 );\" \"lw     $13, 0( %1 );\" \"mtc2   $12, $9;\" \"mtc2   $13, $10;\" \"sra    $12, $12, 16;\" \"sra    $13, $13, 16;\" \"subu   $15, $12, $13;\" \"mfc2   $12, $9;\" \"mfc2   $13, $10;\" \"sh     $15, 2( %2 );\" \"subu   $12, $12, $13;\" \"sh     $12, 0( %2 )\" : : \"r\"(r0), \"r\"(r1), \"r\"(r2) : \"$12\", \"$13\", \"$14\", \"$15\", \"memory\")\n#define RDCODE_ANIM 3\n#define _HOMING_TARGET_H_ \n#define SPU_22CH (0x1L<<22)\n#define gte_stlzc(r0) __asm__ volatile(\"swc2   $31, 0( %0 )\" : : \"r\"(r0) : \"memory\")\n#define PCX_LSIGHT 0x08db\n#define PCX_GO_EXIT 0x4d9a\n#define SPU_VOICE_LSAX (0x01 << 16)\n#define gte_lcv2bk() __asm__ volatile(\"nop;\" \"nop;\" \"cop2 0x04D2012;\")\n#define setXYWH(p,_x0,_y0,_w,_h) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x0)+(_w), (p)->y1 = (_y0), (p)->x2 = (_x0), (p)->y2 = (_y0)+(_h), (p)->x3 = (_x0)+(_w), (p)->y3 = (_y0)+(_h)\n#define gte_lcv2_b() __asm__ volatile(\"cop2 0x04D6012;\")\n#define SPU_REV_MODE_CHECK (-1)\n#define GM_TabakoFlag linkvarbuf[ 37 ]\n#define GAME_RADAR_ENABLED 0x800\n#define SR_CUMASK 0xf0000000\n#define gte_rtv0tr_b() __asm__ volatile(\"cop2 0x0480012;\")\n#define gte_rtps_b() __asm__ volatile(\"cop2 0x0180001;\")\n#define TcbMdRT 0x1000\n#define SPU_01CH (0x1L<< 1)\n#define _SCOPE_H_ \n#define CdlCdromFormat 2\n#define gte_ldv3c_vertc(r0) __asm__ volatile(\"lwc2   $0, 0( %0 );\" \"lwc2   $1, 4( %0 );\" \"lwc2   $2, 12( %0 );\" \"lwc2   $3, 16( %0 );\" \"lwc2   $4, 24( %0 );\" \"lwc2   $5, 28( %0 )\" : : \"r\"(r0))\n#define setcode(p,_code) (((P_TAG *)(p))->code = (u_char)(_code))\n#define gte_stsv(r0) __asm__ volatile(\"mfc2   $12, $9;\" \"mfc2   $13, $10;\" \"mfc2   $14, $11;\" \"sh     $12, 0( %0 );\" \"sh     $13, 2( %0 );\" \"sh     $14, 4( %0 )\" : : \"r\"(r0) : \"$12\", \"$13\", \"$14\", \"memory\")\n#define gte_stsz(r0) __asm__ volatile(\"swc2   $19, 0( %0 )\" : : \"r\"(r0) : \"memory\")\ntypedef unsigned char u_char;\ntypedef unsigned short u_short;\ntypedef unsigned int u_int;\ntypedef unsigned long u_long;\ntypedef unsigned short ushort;\ntypedef unsigned int uint;\ntypedef unsigned long ulong;\ntypedef struct _physadr { int r[1]; } *physadr;\ntypedef struct label_t {\n int val[12];\n} label_t;\ntypedef struct _quad { long val[2]; } quad;\ntypedef long daddr_t;\ntypedef char * caddr_t;\ntypedef long * qaddr_t;\ntypedef u_long ino_t;\ntypedef long swblk_t;\ntypedef unsigned int size_t;\ntypedef long time_t;\ntypedef short dev_t;\ntypedef long off_t;\ntypedef u_short uid_t;\ntypedef u_short gid_t;\ntypedef struct {\n short m[3][3];\n        long t[3];\n} MATRIX;\ntypedef struct {\n long vx, vy;\n long vz, pad;\n} VECTOR;\ntypedef struct {\n short vx, vy;\n short vz, pad;\n} SVECTOR;\ntypedef struct {\n u_char r, g, b, cd;\n} CVECTOR;\ntypedef struct {\n short vx, vy;\n} DVECTOR;\ntypedef struct {\n SVECTOR v;\n VECTOR sxyz;\n DVECTOR sxy;\n CVECTOR rgb;\n short txuv,pad;\n long chx,chy;\n} EVECTOR;\ntypedef struct {\n SVECTOR v;\n u_char uv[2]; u_short pad;\n CVECTOR c;\n DVECTOR sxy;\n u_long sz;\n} RVECTOR;\ntypedef struct {\n RVECTOR r01,r12,r20;\n RVECTOR *r0,*r1,*r2;\n u_long *rtn;\n} CRVECTOR3;\ntypedef struct {\n u_long ndiv;\n u_long pih,piv;\n u_short clut,tpage;\n CVECTOR rgbc;\n u_long *ot;\n RVECTOR r0,r1,r2;\n CRVECTOR3 cr[5];\n} DIVPOLYGON3;\ntypedef struct {\n RVECTOR r01,r02,r31,r32,rc;\n RVECTOR *r0,*r1,*r2,*r3;\n u_long *rtn;\n} CRVECTOR4;\ntypedef struct {\n u_long ndiv;\n u_long pih,piv;\n u_short clut,tpage;\n CVECTOR rgbc;\n u_long *ot;\n RVECTOR r0,r1,r2,r3;\n CRVECTOR4 cr[5];\n} DIVPOLYGON4;\ntypedef struct {\n        short xy[3];\n        short uv[2];\n        short rgb[3];\n} SPOL;\ntypedef struct {\n        short sxy[4][2];\n        short sz[4][2];\n        short uv[4][2];\n        short rgb[4][3];\n        short code;\n} POL4;\ntypedef struct {\n        short sxy[3][2];\n        short sz[3][2];\n        short uv[3][2];\n        short rgb[3][3];\n        short code;\n} POL3;\ntypedef struct {\n        SVECTOR *v;\n        SVECTOR *n;\n        SVECTOR *u;\n        CVECTOR *c;\n        u_long len;\n} TMESH;\ntypedef struct {\n        SVECTOR *v;\n        SVECTOR *n;\n        SVECTOR *u;\n        CVECTOR *c;\n        u_long lenv;\n        u_long lenh;\n} QMESH;\nextern void InitGeom();\nextern void EigenMatrix(MATRIX *m, MATRIX *t);\nextern int IsIdMatrix(MATRIX *m);\nextern MATRIX *MulMatrix0(MATRIX *m0,MATRIX *m1,MATRIX *m2);\nextern MATRIX *MulRotMatrix0(MATRIX *m0,MATRIX *m1);\nextern MATRIX *MulMatrix(MATRIX *m0,MATRIX *m1);\nextern MATRIX *MulMatrix2(MATRIX *m0,MATRIX *m1);\nextern MATRIX *MulRotMatrix(MATRIX *m0);\nextern MATRIX *SetMulMatrix(MATRIX *m0,MATRIX *m1);\nextern MATRIX *SetMulRotMatrix(MATRIX *m0);\nextern VECTOR *ApplyMatrix(MATRIX *m,SVECTOR *v0,VECTOR *v1);\nextern VECTOR *ApplyRotMatrix(SVECTOR *v0,VECTOR *v1);\nextern VECTOR *ApplyRotMatrixLV(VECTOR *v0,VECTOR *v1);\nextern VECTOR *ApplyMatrixLV(MATRIX *m,VECTOR *v0,VECTOR *v1);\nextern SVECTOR *ApplyMatrixSV(MATRIX *m,SVECTOR *v0,SVECTOR *v1);\nextern VECTOR *ApplyTransposeMatrixLV(MATRIX *m,VECTOR *v0,VECTOR *v1);\nextern MATRIX *RotMatrix(SVECTOR *r,MATRIX *m);\nextern MATRIX *RotMatrixXZY(SVECTOR *r,MATRIX *m);\nextern MATRIX *RotMatrixYXZ(SVECTOR *r,MATRIX *m);\nextern MATRIX *RotMatrixYZX(SVECTOR *r,MATRIX *m);\nextern MATRIX *RotMatrixZXY(SVECTOR *r,MATRIX *m);\nextern MATRIX *RotMatrixZYX(SVECTOR *r,MATRIX *m);\nextern MATRIX *RotMatrix_gte(SVECTOR *r,MATRIX *m);\nextern MATRIX *RotMatrixYXZ_gte(SVECTOR *r,MATRIX *m);\nextern MATRIX *RotMatrixZYX_gte(SVECTOR *r,MATRIX *m);\nextern MATRIX *RotMatrixX(long r,MATRIX *m);\nextern MATRIX *RotMatrixY(long r,MATRIX *m);\nextern MATRIX *RotMatrixZ(long r,MATRIX *m);\nextern MATRIX *RotMatrixC(SVECTOR *r,MATRIX *m);\nextern MATRIX *TransMatrix(MATRIX *m,VECTOR *v);\nextern MATRIX *ScaleMatrix(MATRIX *m,VECTOR *v);\nextern MATRIX *ScaleMatrixL(MATRIX *m,VECTOR *v);\nextern MATRIX *TransposeMatrix(MATRIX *m0,MATRIX *m1);\nextern MATRIX *CompMatrix(MATRIX *m0,MATRIX *m1,MATRIX *m2);\nextern MATRIX *CompMatrixLV(MATRIX *m0,MATRIX *m1,MATRIX *m2);\nextern void MatrixNormal(MATRIX *m, MATRIX *n);\nextern void MatrixNormal_0(MATRIX *m, MATRIX *n);\nextern void MatrixNormal_1(MATRIX *m, MATRIX *n);\nextern void MatrixNormal_2(MATRIX *m, MATRIX *n);\nextern void SetRotMatrix(MATRIX *m);\nextern void SetLightMatrix(MATRIX *m);\nextern void SetColorMatrix(MATRIX *m);\nextern void SetTransMatrix(MATRIX *m);\nextern void PushMatrix();\nextern void PopMatrix();\nextern void ReadRotMatrix(MATRIX *m);\nextern void ReadLightMatrix(MATRIX *m);\nextern void ReadColorMatrix(MATRIX *m);\nextern void SetRGBcd(CVECTOR *v);\nextern void SetBackColor(long rbk,long gbk,long bbk);\nextern void SetFarColor(long rfc,long gfc,long bfc);\nextern void SetGeomOffset(long ofx,long ofy);\nextern void SetGeomScreen(long h);\nextern void ReadSZfifo3(long *sz0,long *sz1,long *sz2);\nextern void ReadSZfifo4(long *szx,long *sz0,long *sz1,long *sz2);\nextern void ReadSXSYfifo(long *sxy0,long *sxy1,long *sxy2);\nextern void ReadRGBfifo(CVECTOR *v0,CVECTOR *v1,CVECTOR *v2);\nextern void ReadGeomOffset(long *ofx,long *ofy);\nextern long ReadGeomScreen();\nextern void TransRot_32(VECTOR *v0, VECTOR *v1, long *flag);\nextern long TransRotPers(SVECTOR *v0, long *sxy, long *p, long *flag);\nextern long TransRotPers3(SVECTOR *v0, SVECTOR *v1, SVECTOR *v2, long *sxy0,\n  long *sxy1, long *sxy2, long *p, long *flag);\nextern void pers_map(int abuf, SVECTOR **vertex, int tex[4][2], u_short *dtext);\nextern void PhongLine(int istart_x, int iend_x, int p, int q, u_short **pixx,\n  int fs, int ft, int i4, int det);\nextern long RotTransPers(SVECTOR *v0,long *sxy,long *p,long *flag);\nextern long RotTransPers3(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,\n   long *sxy0,long *sxy1,long *sxy2,long *p,long *flag);\nextern void RotTrans(SVECTOR *v0,VECTOR *v1,long *flag);\nextern void RotTransSV(SVECTOR *v0,SVECTOR *v1,long *flag);\nextern void LocalLight(SVECTOR *v0,VECTOR *v1);\nextern void LightColor(VECTOR *v0,VECTOR *v1);\nextern void DpqColorLight(VECTOR *v0,CVECTOR *v1,long p,CVECTOR *v2);\nextern void DpqColor(CVECTOR *v0,long p,CVECTOR *v1);\nextern void DpqColor3(CVECTOR *v0,CVECTOR *v1,CVECTOR *v2,\n   long p,CVECTOR *v3,CVECTOR *v4,CVECTOR *v5);\nextern void Intpl(VECTOR *v0,long p,CVECTOR *v1);\nextern VECTOR *Square12(VECTOR *v0,VECTOR *v1);\nextern VECTOR *Square0(VECTOR *v0,VECTOR *v1);\nextern VECTOR *SquareSL12(SVECTOR *v0,VECTOR *v1);\nextern VECTOR *SquareSL0(SVECTOR *v0,VECTOR *v1);\nextern SVECTOR *SquareSS12(SVECTOR *v0,SVECTOR *v1);\nextern SVECTOR *SquareSS0(SVECTOR *v0,SVECTOR *v1);\nextern void NormalColor(SVECTOR *v0,CVECTOR *v1);\nextern void NormalColor3(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,\n   CVECTOR *v3,CVECTOR *v4,CVECTOR *v5);\nextern void NormalColorDpq(SVECTOR *v0,CVECTOR *v1,long p,CVECTOR *v2);\nextern void NormalColorDpq3(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,CVECTOR *v3,\n   long p,CVECTOR *v4,CVECTOR *v5,CVECTOR *v6);\nextern void NormalColorCol(SVECTOR *v0,CVECTOR *v1,CVECTOR *v2);\nextern void NormalColorCol3(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,CVECTOR *v3,\n   CVECTOR *v4,CVECTOR *v5,CVECTOR *v6);\nextern void ColorDpq(VECTOR *v0,CVECTOR *v1,long p,CVECTOR *v2);\nextern void ColorCol(VECTOR *v0,CVECTOR *v1,CVECTOR *v2);\nextern long NormalClip(long sxy0,long sxy1,long sxy2);\nextern long AverageZ3(long sz0,long sz1,long sz2);\nextern long AverageZ4(long sz0,long sz1,long sz2,long sz3);\nextern void OuterProduct12(VECTOR *v0,VECTOR *v1,VECTOR *v2);\nextern void OuterProduct0(VECTOR *v0,VECTOR *v1,VECTOR *v2);\nextern long Lzc(long data);\nextern long RotTransPers4(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,SVECTOR *v3,\n   long *sxy0,long *sxy1,long *sxy2,long *sxy3,\n   long *p,long *flag);\nextern void RotTransPersN(SVECTOR *v0,DVECTOR *v1,u_short *sz,u_short *p,\n   u_short *flag,long n);\nextern void RotTransPers3N(SVECTOR *v0,DVECTOR *v1,u_short *sz,u_short *flag,\n   long n);\nextern void RotMeshH(short *Yheight,DVECTOR *Vo,u_short *sz,u_short *flag,\n   short Xoffset,short Zoffset,short m,short n,\n   DVECTOR *base);\nextern long RotAverage3(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,\n   long *sxy0,long *sxy1,long *sxy2,long *p,long *flag);\nextern long RotAverage4(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,SVECTOR *v3,\n   long *sxy0,long *sxy1,long *sxy2,long *sxy3,\n   long *p,long *flag);\nextern long RotNclip3(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,\n   long *sxy0,long *sxy1,long *sxy2,long *p,long *otz,\n   long *flag);\nextern long RotNclip4(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,SVECTOR *v3,\n   long *sxy0,long *sxy1,long *sxy2,long *sxy3,\n   long *p,long *otz,long *flag);\nextern long RotAverageNclip3(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,\n   long *sxy0,long *sxy1,long *sxy2,\n   long *p,long *otz,long *flag);\nextern long RotAverageNclip4(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,SVECTOR *v3,\n   long *sxy0,long *sxy1,long *sxy2,long *sxy3,\n   long *p,long *otz,long *flag);\nextern long RotColorDpq(SVECTOR *v0,SVECTOR *v1,CVECTOR *v2,\n   long *sxy,CVECTOR *v3,long *flag);\nextern long RotColorDpq3(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,\n   SVECTOR *v3,SVECTOR *v4,SVECTOR *v5,CVECTOR *v6,\n   long *sxy0,long *sxy1,long *sxy2,\n   CVECTOR *v7,CVECTOR *v8,CVECTOR *v9,long *flag);\nextern long RotAverageNclipColorDpq3(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,\n   SVECTOR *v3,SVECTOR *v4,SVECTOR *v5,CVECTOR *v6,\n   long *sxy0,long *sxy1,long *sxy2,\n   CVECTOR *v7,CVECTOR *v8,CVECTOR *v9,\n   long *otz,long *flag);\nextern long RotAverageNclipColorCol3(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,\n   SVECTOR *v3,SVECTOR *v4,SVECTOR *v5,CVECTOR *v6,\n   long *sxy0,long *sxy1,long *sxy2,\n   CVECTOR *v7,CVECTOR *v8,CVECTOR *v9,\n   long *otz,long *flag);\nextern long RotColorMatDpq(SVECTOR *v0,SVECTOR *v1,CVECTOR *v2,long *sxy,\n   CVECTOR *v3,long matc,long flag);\nextern void ColorMatDpq(SVECTOR *v0,CVECTOR *v1,long p,CVECTOR *v2,long matc);\nextern void ColorMatCol(SVECTOR *v0,CVECTOR *v1,CVECTOR *v2,long matc);\nextern void LoadAverage12(VECTOR *v0,VECTOR *v1,long p0,long p1,VECTOR *v2);\nextern void LoadAverageShort12(SVECTOR *v0,SVECTOR *v1,long p0,long p1,\n   SVECTOR *v2);\nextern void LoadAverage0(VECTOR *v0,VECTOR *v1,long p0,long p1,VECTOR *v2);\nextern void LoadAverageShort0(SVECTOR *v0,SVECTOR *v1,long p0,long p1,\n   SVECTOR *v2);\nextern void LoadAverageByte(u_char *v0,u_char *v1,long p0,long p1,u_char *v2);\nextern void LoadAverageCol(u_char *v0,u_char *v1,long p0,long p1,u_char *v2);\nextern long VectorNormal(VECTOR *v0, VECTOR *v1);\nextern long VectorNormalS(VECTOR *v0, SVECTOR *v1);\nextern long VectorNormalSS(SVECTOR *v0, SVECTOR *v1);\nextern long SquareRoot0(long a);\nextern long SquareRoot12(long a);\nextern void InvSquareRoot(long a, long *b, long *c);\nextern void gteMIMefunc(SVECTOR *otp, SVECTOR *dfp, long n, long p);\nextern void SetFogFar(long a,long h);\nextern void SetFogNear(long a,long h);\nextern void SetFogNearFar(long a,long b,long h);\nextern void SubPol4(POL4 *p, SPOL *sp, int ndiv);\nextern void SubPol3(POL3 *p, SPOL *sp, int ndiv);\nextern int rcos(int a);\nextern int rsin(int a);\nextern int ccos(int a);\nextern int csin(int a);\nextern int cln(int a);\nextern int csqrt(int a);\nextern int catan(int a);\nextern long ratan2(long y, long x);\nextern void RotPMD_F3(long *pa,u_long *ot,int otlen,int id,int backc);\nextern void RotPMD_G3(long *pa,u_long *ot,int otlen,int id,int backc);\nextern void RotPMD_FT3(long *pa,u_long *ot,int otlen,int id,int backc);\nextern void RotPMD_GT3(long *pa,u_long *ot,int otlen,int id,int backc);\nextern void RotPMD_F4(long *pa,u_long *ot,int otlen,int id,int backc);\nextern void RotPMD_G4(long *pa,u_long *ot,int otlen,int id,int backc);\nextern void RotPMD_FT4(long *pa,u_long *ot,int otlen,int id,int backc);\nextern void RotPMD_GT4(long *pa,u_long *ot,int otlen,int id,int backc);\nextern void RotPMD_SV_F3(long *pa,long *va,u_long *ot,int otlen,int id,\n   int backc);\nextern void RotPMD_SV_G3(long *pa,long *va,u_long *ot,int otlen,int id,\n   int backc);\nextern void RotPMD_SV_FT3(long *pa,long *va,u_long *ot,int otlen,int id,\n   int backc);\nextern void RotPMD_SV_GT3(long *pa,long *va,u_long *ot,int otlen,int id,\n   int backc);\nextern void RotPMD_SV_F4(long *pa,long *va,u_long *ot,int otlen,int id,\n   int backc);\nextern void RotPMD_SV_G4(long *pa,long *va,u_long *ot,int otlen,int id,\n   int backc);\nextern void RotPMD_SV_FT4(long *pa,long *va,u_long *ot,int otlen,int id,\n   int backc);\nextern void RotPMD_SV_GT4(long *pa,long *va,u_long *ot,int otlen,int id,\n   int backc);\nextern void InitClip(EVECTOR *evbfad,long hw,long vw,long h,long near,long far);\nextern long Clip3F(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,EVECTOR **evmx);\nextern long Clip3FP(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,EVECTOR **evmx);\nextern long Clip4F(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,SVECTOR *v3,\n   EVECTOR **evmx);\nextern long Clip4FP(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,SVECTOR *v3,\n   EVECTOR **evmx);\nextern long Clip3FT(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,\n  short *uv0,short *uv1,short *uv2,EVECTOR **evmx);\nextern long Clip3FTP(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,\n  short *uv0,short *uv1,short *uv2,EVECTOR **evmx);\nextern long Clip4FT(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,SVECTOR *v3,\n  short *uv0,short *uv1,short *uv2,short *uv3,EVECTOR **evmx);\nextern long Clip4FTP(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,SVECTOR *v3,\n  short *uv0,short *uv1,short *uv2,short *uv3,EVECTOR **evmx);\nextern long Clip3G(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,\n  CVECTOR *rgb0,CVECTOR *rgb1,CVECTOR *rgb2,EVECTOR **evmx);\nextern long Clip3GP(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,\n  CVECTOR *rgb0,CVECTOR *rgb1,CVECTOR *rgb2,EVECTOR **evmx);\nextern long Clip4G(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,SVECTOR *v3,\n  CVECTOR *rgb0,CVECTOR *rgb1,CVECTOR *rgb2,CVECTOR *rgb3,\n  EVECTOR **evmx);\nextern long Clip4GP(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,SVECTOR *v3,\n  CVECTOR *rgb0,CVECTOR *rgb1,CVECTOR *rgb2,CVECTOR *rgb3,\n  EVECTOR **evmx);\nextern long Clip3GT(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,\n  short *uv0,short *uv1,short *uv2,\n  CVECTOR *rgb0,CVECTOR *rgb1,CVECTOR *rgb2,\n  EVECTOR **evmx);\nextern long Clip3GTP(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,\n  short *uv0,short *uv1,short *uv2,\n  CVECTOR *rgb0,CVECTOR *rgb1,CVECTOR *rgb2,\n  EVECTOR **evmx);\nextern long Clip4GT(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,SVECTOR *v3,\n  short *uv0,short *uv1,short *uv2,short *uv3,\n  CVECTOR *rgb0,CVECTOR *rgb1,CVECTOR *rgb2,CVECTOR *rgb3,\n  EVECTOR **evmx);\nextern long Clip4GTP(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,SVECTOR *v3,\n  short *uv0,short *uv1,short *uv2,short *uv3,\n  CVECTOR *rgb0,CVECTOR *rgb1,CVECTOR *rgb2,CVECTOR *rgb3,\n  EVECTOR **evmx);\nextern void RotTransPers_nom(SVECTOR *v0);\nextern void RotTransPers3_nom(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2);\nextern void RotTransPers4_nom(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,SVECTOR *v3);\nextern void RotTrans_nom(SVECTOR *v0);\nextern void RotAverage3_nom(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2);\nextern void RotNclip3_nom(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2);\nextern void RotAverageNclip3_nom(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2);\nextern void RotAverageNclipColorDpq3_nom(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,\n   SVECTOR *v3,SVECTOR *v4,SVECTOR *v5,CVECTOR *v6);\nextern void RotAverageNclipColorCol3_nom(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,\n   SVECTOR *v3,SVECTOR *v4,SVECTOR *v5,CVECTOR *v6);\nextern void RotColorDpq_nom(SVECTOR *v0,SVECTOR *v1,CVECTOR *v2);\nextern long RotColorDpq3_nom(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,\n   SVECTOR *v3,SVECTOR *v4,SVECTOR *v5,CVECTOR *v6);\nextern void NormalColor_nom(SVECTOR *v0);\nextern void NormalColor3_nom(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2);\nextern void NormalColorDpq_nom(SVECTOR *v0,CVECTOR *v1,long p);\nextern void NormalColorDpq3_nom(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,\n   CVECTOR *v3,long p);\nextern void NormalColorCol_nom(SVECTOR *v0,CVECTOR *v1);\nextern void NormalColorCol3_nom(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,\n   CVECTOR *v3);\nextern void RotSMD_F3(long *pa,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotSMD_G3(long *pa,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotSMD_FT3(long *pa,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotSMD_GT3(long *pa,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotSMD_F4(long *pa,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotSMD_G4(long *pa,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotSMD_FT4(long *pa,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotSMD_GT4(long *pa,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotSMD_SV_F3(long *pa,long *va,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotSMD_SV_G3(long *pa,long *va,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotSMD_SV_FT3(long *pa,long *va,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotSMD_SV_GT3(long *pa,long *va,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotSMD_SV_F4(long *pa,long *va,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotSMD_SV_G4(long *pa,long *va,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotSMD_SV_FT4(long *pa,long *va,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotSMD_SV_GT4(long *pa,long *va,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotRMD_F3(long *pa,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotRMD_G3(long *pa,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotRMD_FT3(long *pa,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotRMD_GT3(long *pa,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotRMD_F4(long *pa,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotRMD_G4(long *pa,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotRMD_FT4(long *pa,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotRMD_GT4(long *pa,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotRMD_SV_F3(long *pa,long *va,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotRMD_SV_G3(long *pa,long *va,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotRMD_SV_FT3(long *pa,long *va,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotRMD_SV_GT3(long *pa,long *va,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotRMD_SV_F4(long *pa,long *va,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotRMD_SV_G4(long *pa,long *va,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotRMD_SV_FT4(long *pa,long *va,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern void RotRMD_SV_GT4(long *pa,long *va,u_long *ot,int otlen,int id,\n   int sclip, int hclip, int vclip, int nclipmode);\nextern long p2otz(long p, long projection);\nextern long otz2p(long otz, long projection);\nextern int (*GPU_printf)(char *fmt, ...);\ntypedef struct {\n short x, y;\n short w, h;\n} RECT;\ntypedef struct {\n int x, y;\n int w, h;\n} RECT32;\ntypedef struct {\n u_long tag;\n u_long code[15];\n} DR_ENV;\ntypedef struct {\n RECT clip;\n short ofs[2];\n RECT tw;\n u_short tpage;\n u_char dtd;\n u_char dfe;\n u_char isbg;\n u_char r0, g0, b0;\n DR_ENV dr_env;\n} DRAWENV;\ntypedef struct {\n RECT disp;\n RECT screen;\n u_char isinter;\n u_char isrgb24;\n u_char pad0, pad1;\n} DISPENV;\ntypedef struct {\n unsigned addr: 24;\n unsigned len: 8;\n u_char r0, g0, b0, code;\n} P_TAG;\ntypedef struct {\n u_char r0, g0, b0, code;\n} P_CODE;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n short x1, y1;\n short x2, y2;\n} POLY_F3;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n short x1, y1;\n short x2, y2;\n short x3, y3;\n} POLY_F4;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n u_char u0, v0; u_short clut;\n short x1, y1;\n u_char u1, v1; u_short tpage;\n short x2, y2;\n u_char u2, v2; u_short pad1;\n} POLY_FT3;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n u_char u0, v0; u_short clut;\n short x1, y1;\n u_char u1, v1; u_short tpage;\n short x2, y2;\n u_char u2, v2; u_short pad1;\n short x3, y3;\n u_char u3, v3; u_short pad2;\n} POLY_FT4;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n u_char r1, g1, b1, pad1;\n short x1, y1;\n u_char r2, g2, b2, pad2;\n short x2, y2;\n} POLY_G3;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n u_char r1, g1, b1, pad1;\n short x1, y1;\n u_char r2, g2, b2, pad2;\n short x2, y2;\n u_char r3, g3, b3, pad3;\n short x3, y3;\n} POLY_G4;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n u_char u0, v0; u_short clut;\n u_char r1, g1, b1, p1;\n short x1, y1;\n u_char u1, v1; u_short tpage;\n u_char r2, g2, b2, p2;\n short x2, y2;\n u_char u2, v2; u_short pad2;\n} POLY_GT3;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n u_char u0, v0; u_short clut;\n u_char r1, g1, b1, p1;\n short x1, y1;\n u_char u1, v1; u_short tpage;\n u_char r2, g2, b2, p2;\n short x2, y2;\n u_char u2, v2; u_short pad2;\n u_char r3, g3, b3, p3;\n short x3, y3;\n u_char u3, v3; u_short pad3;\n} POLY_GT4;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n short x1, y1;\n} LINE_F2;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n u_char r1, g1, b1, p1;\n short x1, y1;\n} LINE_G2;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n short x1, y1;\n short x2, y2;\n u_long pad;\n} LINE_F3;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n u_char r1, g1, b1, p1;\n short x1, y1;\n u_char r2, g2, b2, p2;\n short x2, y2;\n u_long pad;\n} LINE_G3;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n short x1, y1;\n short x2, y2;\n short x3, y3;\n u_long pad;\n} LINE_F4;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n u_char r1, g1, b1, p1;\n short x1, y1;\n u_char r2, g2, b2, p2;\n short x2, y2;\n u_char r3, g3, b3, p3;\n short x3, y3;\n u_long pad;\n} LINE_G4;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n u_char u0, v0; u_short clut;\n short w, h;\n} SPRT;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n u_char u0, v0; u_short clut;\n} SPRT_16;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n u_char u0, v0; u_short clut;\n} SPRT_8;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n short w, h;\n} TILE;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n} TILE_16;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n} TILE_8;\ntypedef struct {\n u_long tag;\n u_char r0, g0, b0, code;\n short x0, y0;\n} TILE_1;\ntypedef struct {\n u_long tag;\n u_long code[2];\n} DR_MODE;\ntypedef struct {\n u_long tag;\n u_long code[2];\n} DR_TWIN;\ntypedef struct {\n u_long tag;\n u_long code[2];\n} DR_AREA;\ntypedef struct {\n u_long tag;\n u_long code[2];\n} DR_OFFSET;\ntypedef struct {\n u_long tag;\n u_long code[5];\n} DR_MOVE;\ntypedef struct {\n u_long tag;\n u_long code[3];\n u_long p[13];\n} DR_LOAD;\ntypedef struct {\n u_long tag;\n u_long code[1];\n} DR_TPAGE;\ntypedef struct {\n        u_long tag;\n        u_long code[2];\n} DR_STP;\ntypedef struct {\n u_long id;\n u_char r0, g0, b0, p0;\n u_char r1, g1, b1, p1;\n u_char r2, g2, b2, p2;\n u_char r3, g3, b3, p3;\n u_short tpage, clut;\n u_char u0, v0, u1, v1;\n u_char u2, v2, u3, v3;\n SVECTOR x0, x1, x2, x3;\n SVECTOR n0, n1, n2, n3;\n SVECTOR *v_ofs;\n SVECTOR *n_ofs;\n u_short vert0, vert1;\n u_short vert2, vert3;\n u_short norm0, norm1;\n u_short norm2, norm3;\n} TMD_PRIM;\ntypedef struct {\n u_long mode;\n RECT *crect;\n u_long *caddr;\n RECT *prect;\n u_long *paddr;\n} TIM_IMAGE;\nextern int FntPrint();\nextern int KanjiFntPrint();\nextern DISPENV *GetDispEnv(DISPENV *env);\nextern DISPENV *PutDispEnv(DISPENV *env);\nextern DISPENV *SetDefDispEnv(DISPENV *env, int x, int y, int w, int h);\nextern DRAWENV *GetDrawEnv(DRAWENV *env);\nextern DRAWENV *PutDrawEnv(DRAWENV *env);\nextern DRAWENV *SetDefDrawEnv(DRAWENV *env, int x, int y, int w, int h);\nextern TIM_IMAGE *ReadTIM(TIM_IMAGE *timimg);\nextern TMD_PRIM *ReadTMD(TMD_PRIM *tmdprim);\nextern int CheckPrim(char *s, u_long *p);\nextern int ClearImage(RECT *rect, u_char r, u_char g, u_char b);\nextern int ClearImage2(RECT *rect, u_char r, u_char g, u_char b);\nextern int DrawSync(int mode);\nextern int FntOpen(int x, int y, int w, int h, int isbg, int n);\nextern int GetGraphDebug(void) ;\nextern int GetTimSize(u_char *sjis);\nextern int IsEndPrim(void *p) ;\nextern int KanjiFntOpen(int x, int y, int w, int h, int dx, int dy, int cx, int cy, int isbg, int n);\nextern void KanjiFntClose(void);\nextern int Krom2Tim(u_char *sjis, u_long *taddr, int dx, int dy, int cdx, int cdy, u_int fg, u_int bg);\nextern int LoadImage(RECT *rect, u_long *p);\nextern int MargePrim(void *p0, void *p1);\nextern int MoveImage(RECT *rect, int x, int y);\nextern int OpenTIM(u_long *addr);\nextern int OpenTMD(u_long *tmd, int obj_no);\nextern int ResetGraph(int mode);\nextern int SetGraphDebug(int level);\nextern int StoreImage(RECT *rect, u_long *p);\nextern u_long *ClearOTag(u_long *ot, int n);\nextern u_long *ClearOTagR(u_long *ot, int n);\nextern u_long *FntFlush(int id);\nextern u_long *KanjiFntFlush(int id);\nextern u_long DrawSyncCallback(void (*func)(void));\nextern u_short GetClut(int x, int y) ;\nextern u_short GetTPage(int tp, int abr, int x, int y) ;\nextern u_short LoadClut(u_long *clut, int x, int y);\nextern u_short LoadClut2(u_long *clut, int x, int y);\nextern u_short LoadTPage(u_long *pix, int tp, int abr, int x, int y, int w, int h);\nextern void *NextPrim(void *p) ;\nextern void AddPrim(void *ot, void *p) ;\nextern void AddPrims(void *ot, void *p0, void *p1) ;\nextern void CatPrim(void *p0, void *p1) ;\nextern void DrawOTag(u_long *p);\nextern void DrawOTagIO(u_long *p);\nextern void DrawOTagEnv(u_long *p, DRAWENV *env);\nextern void DrawPrim(void *p);\nextern void DumpClut(u_short clut) ;\nextern void DumpDispEnv(DISPENV *env);\nextern void DumpDrawEnv(DRAWENV *env);\nextern void DumpOTag(u_long *p);\nextern void DumpTPage(u_short tpage) ;\nextern void FntLoad(int tx, int ty);\nextern void SetDispMask(int mask);\nextern void SetDrawArea(DR_AREA *p, RECT *r);\nextern void SetDrawEnv(DR_ENV *dr_env, DRAWENV *env);\nextern void SetDrawLoad(DR_LOAD *p, RECT *rect);\nextern void SetDrawMode(DR_MODE *p, int dfe, int dtd, int tpage, RECT *tw);\nextern void SetDrawTPage(DR_TPAGE *p, int dfe, int dtd, int tpage);\nextern void SetDrawMove(DR_MOVE *p, RECT *rect, int x, int y) ;\nextern void SetDrawOffset(DR_OFFSET *p, u_short *ofs);\nextern void SetDrawStp(DR_STP *p, int pbw);\nextern void SetDumpFnt(int id);\nextern void SetLineF2(LINE_F2 *p) ;\nextern void SetLineF3(LINE_F3 *p) ;\nextern void SetLineF4(LINE_F4 *p) ;\nextern void SetLineG2(LINE_G2 *p) ;\nextern void SetLineG3(LINE_G3 *p) ;\nextern void SetLineG4(LINE_G4 *p) ;\nextern void SetPolyF3(POLY_F3 *p) ;\nextern void SetPolyF4(POLY_F4 *p) ;\nextern void SetPolyFT3(POLY_FT3 *p) ;\nextern void SetPolyFT4(POLY_FT4 *p) ;\nextern void SetPolyG3(POLY_G3 *p) ;\nextern void SetPolyG4(POLY_G4 *p) ;\nextern void SetPolyGT3(POLY_GT3 *p) ;\nextern void SetPolyGT4(POLY_GT4 *p) ;\nextern void SetSemiTrans(void *p, int abe) ;\nextern void SetShadeTex(void *p, int tge) ;\nextern void SetSprt(SPRT *p) ;\nextern void SetSprt16(SPRT_16 *p) ;\nextern void SetSprt8(SPRT_8 *p) ;\nextern void SetTexWindow(DR_TWIN *p, RECT *tw);\nextern void SetTile(TILE *p) ;\nextern void SetTile1(TILE_1 *p) ;\nextern void SetTile16(TILE_16 *p) ;\nextern void SetTile8(TILE_8 *p) ;\nextern void TermPrim(void *p) ;\nextern u_long *BreakDraw(void);\nextern void ContinueDraw(u_long *insaddr, u_long *contaddr);\nextern int IsIdleGPU(int max_count);\nextern int GetODE(void);\nextern int LoadImage2(RECT *rect, u_long *p);\nextern int StoreImage2(RECT *rect, u_long *p);\nextern int MoveImage2(RECT *rect, int x, int y);\nextern int DrawOTag2(u_long *p);\nextern void GetDrawMode(DR_MODE *p);\nextern void GetTexWindow(DR_TWIN *p);\nextern void GetDrawArea(DR_AREA *p);\nextern void GetDrawOffset(DR_OFFSET *p);\nextern void GetDrawEnv2(DR_ENV *p);\ntypedef struct {\n    short left;\n    short right;\n} SpuVolume;\ntypedef struct {\n    unsigned long voice;\n    unsigned long mask;\n    SpuVolume volume;\n    SpuVolume volmode;\n    SpuVolume volumex;\n    unsigned short pitch;\n    unsigned short note;\n    unsigned short sample_note;\n    short envx;\n    unsigned long addr;\n    unsigned long loop_addr;\n    long a_mode;\n    long s_mode;\n    long r_mode;\n    unsigned short ar;\n    unsigned short dr;\n    unsigned short sr;\n    unsigned short rr;\n    unsigned short sl;\n    unsigned short adsr1;\n    unsigned short adsr2;\n} SpuVoiceAttr;\ntypedef struct {\n    short voiceNum;\n    short pad;\n    SpuVoiceAttr attr;\n} SpuLVoiceAttr;\ntypedef struct {\n    unsigned long mask;\n    long mode;\n    SpuVolume depth;\n    long delay;\n    long feedback;\n} SpuReverbAttr;\ntypedef struct {\n    short cd_left [0x200];\n    short cd_right [0x200];\n    short voice1 [0x200];\n    short voice3 [0x200];\n} SpuDecodedData;\ntypedef SpuDecodedData SpuDecodeData;\ntypedef struct {\n    SpuVolume volume;\n    long reverb;\n    long mix;\n} SpuExtAttr;\ntypedef struct {\n    unsigned long mask;\n    SpuVolume mvol;\n    SpuVolume mvolmode;\n    SpuVolume mvolx;\n    SpuExtAttr cd;\n    SpuExtAttr ext;\n} SpuCommonAttr;\ntypedef void (*SpuIRQCallbackProc)(void);\ntypedef void (*SpuTransferCallbackProc)(void);\ntypedef struct {\n    unsigned long mask;\n    unsigned long queueing;\n} SpuEnv;\nextern void SpuInit (void);\nextern void SpuInitHot (void);\nextern void SpuStart (void);\nextern void SpuQuit (void);\nextern long SpuSetMute (long on_off);\nextern long SpuGetMute (void);\nextern void SpuSetEnv (SpuEnv *env);\nextern long SpuSetNoiseClock (long n_clock);\nextern long SpuGetNoiseClock (void);\nextern unsigned long SpuSetNoiseVoice (long on_off, unsigned long voice_bit);\nextern unsigned long SpuGetNoiseVoice (void);\nextern long SpuSetReverb (long on_off);\nextern long SpuGetReverb (void);\nextern long SpuSetReverbModeParam (SpuReverbAttr *attr);\nextern void SpuGetReverbModeParam (SpuReverbAttr *attr);\nextern long SpuSetReverbDepth (SpuReverbAttr *attr);\nextern long SpuReserveReverbWorkArea (long on_off);\nextern long SpuIsReverbWorkAreaReserved (long on_off);\nextern unsigned long SpuSetReverbVoice (long on_off, unsigned long voice_bit);\nextern unsigned long SpuGetReverbVoice (void);\nextern long SpuClearReverbWorkArea (long mode);\nextern unsigned long SpuWrite (unsigned char *addr, unsigned long size);\nextern unsigned long SpuWrite0 (unsigned long size);\nextern unsigned long SpuRead (unsigned char *addr, unsigned long size);\nextern long SpuSetTransferMode (long mode);\nextern long SpuGetTransferMode (void);\nextern unsigned long SpuSetTransferStartAddr (unsigned long addr);\nextern unsigned long SpuGetTransferStartAddr (void);\nextern unsigned long SpuWritePartly (unsigned char *addr, unsigned long size);\nextern long SpuIsTransferCompleted (long flag);\nextern SpuTransferCallbackProc SpuSetTransferCallback (SpuTransferCallbackProc func);\nextern long SpuReadDecodedData (SpuDecodedData *d_data, long flag);\nextern long SpuSetIRQ (long on_off);\nextern long SpuGetIRQ (void);\nextern unsigned long SpuSetIRQAddr (unsigned long);\nextern unsigned long SpuGetIRQAddr (void);\nextern SpuIRQCallbackProc SpuSetIRQCallback (SpuIRQCallbackProc);\nextern void SpuSetVoiceAttr (SpuVoiceAttr *arg);\nextern void SpuGetVoiceAttr (SpuVoiceAttr *arg);\nextern void SpuSetKey (long on_off, unsigned long voice_bit);\nextern void SpuSetKeyOnWithAttr (SpuVoiceAttr *attr);\nextern long SpuGetKeyStatus (unsigned long voice_bit);\nextern void SpuGetAllKeysStatus (char *status);\nextern unsigned long SpuFlush (unsigned long ev);\nextern unsigned long SpuSetPitchLFOVoice (long on_off, unsigned long voice_bit);\nextern unsigned long SpuGetPitchLFOVoice (void);\nextern void SpuSetCommonAttr (SpuCommonAttr *attr);\nextern void SpuGetCommonAttr (SpuCommonAttr *attr);\nextern long SpuInitMalloc (long num, char *top);\nextern long SpuMalloc (long size);\nextern long SpuMallocWithStartAddr (unsigned long addr, long size);\nextern void SpuFree (unsigned long addr);\nextern long SpuRGetAllKeysStatus (long min_, long max_, char *status);\nextern long SpuRSetVoiceAttr (long min_, long max_, SpuVoiceAttr *arg);\nextern void SpuNSetVoiceAttr (int vNum, SpuVoiceAttr *arg);\nextern void SpuNGetVoiceAttr (int vNum, SpuVoiceAttr *arg);\nextern void SpuLSetVoiceAttr (int num, SpuLVoiceAttr *argList);\nextern void SpuSetVoiceVolume (int vNum, short volL, short volR);\nextern void SpuSetVoiceVolumeAttr (int vNum, short volL, short volR,\n       short volModeL, short volModeR);\nextern void SpuSetVoicePitch (int vNum, unsigned short pitch);\nextern void SpuSetVoiceNote (int vNum, unsigned short note);\nextern void SpuSetVoiceSampleNote (int vNum, unsigned short sampleNote);\nextern void SpuSetVoiceStartAddr (int vNum, unsigned long startAddr);\nextern void SpuSetVoiceLoopStartAddr (int vNum, unsigned long lsa);\nextern void SpuSetVoiceAR (int vNum, unsigned short AR);\nextern void SpuSetVoiceDR (int vNum, unsigned short DR);\nextern void SpuSetVoiceSR (int vNum, unsigned short SR);\nextern void SpuSetVoiceRR (int vNum, unsigned short RR);\nextern void SpuSetVoiceSL (int vNum, unsigned short SL);\nextern void SpuSetVoiceARAttr (int vNum, unsigned short AR, long ARmode);\nextern void SpuSetVoiceSRAttr (int vNum, unsigned short SR, long SRmode);\nextern void SpuSetVoiceRRAttr (int vNum, unsigned short RR, long RRmode);\nextern void SpuSetVoiceADSR (int vNum, unsigned short AR, unsigned short DR,\n        unsigned short SR, unsigned short RR,\n        unsigned short SL);\nextern void SpuSetVoiceADSRAttr (int vNum,\n     unsigned short AR, unsigned short DR,\n     unsigned short SR, unsigned short RR,\n     unsigned short SL,\n     long ARmode, long SRmode, long RRmode);\nextern void SpuGetVoiceVolume (int vNum, short *volL, short *volR);\nextern void SpuGetVoiceVolumeAttr (int vNum, short *volL, short *volR,\n       short *volModeL, short *volModeR);\nextern void SpuGetVoiceVolumeX (int vNum, short *volXL, short *volXR);\nextern void SpuGetVoicePitch (int vNum, unsigned short *pitch);\nextern void SpuGetVoiceNote (int vNum, unsigned short *note);\nextern void SpuGetVoiceSampleNote (int vNum, unsigned short *sampleNote);\nextern void SpuGetVoiceEnvelope (int vNum, short *envx);\nextern void SpuGetVoiceStartAddr (int vNum, unsigned long *startAddr);\nextern void SpuGetVoiceLoopStartAddr (int vNum, unsigned long *loopStartAddr);\nextern void SpuGetVoiceAR (int vNum, unsigned short *AR);\nextern void SpuGetVoiceDR (int vNum, unsigned short *DR);\nextern void SpuGetVoiceSR (int vNum, unsigned short *SR);\nextern void SpuGetVoiceRR (int vNum, unsigned short *RR);\nextern void SpuGetVoiceSL (int vNum, unsigned short *SL);\nextern void SpuGetVoiceARAttr (int vNum, unsigned short *AR, long *ARmode);\nextern void SpuGetVoiceSRAttr (int vNum, unsigned short *SR, long *SRmode);\nextern void SpuGetVoiceRRAttr (int vNum, unsigned short *RR, long *RRmode);\nextern void SpuGetVoiceADSR (int vNum,\n        unsigned short *AR, unsigned short *DR,\n        unsigned short *SR, unsigned short *RR,\n        unsigned short *SL);\nextern void SpuGetVoiceADSRAttr (int vNum,\n     unsigned short *AR, unsigned short *DR,\n     unsigned short *SR, unsigned short *RR,\n     unsigned short *SL,\n     long *ARmode, long *SRmode, long *RRmode);\nextern void SpuGetVoiceEnvelopeAttr (int vNum, long *keyStat, short *envx );\nextern void SpuSetCommonMasterVolume (short mvol_left, short mvol_right);\nextern void SpuSetCommonMasterVolumeAttr (short mvol_left, short mvol_right,\n       short mvolmode_left,\n       short mvolmode_right);\nextern void SpuSetCommonCDMix (long cd_mix);\nextern void SpuSetCommonCDVolume (short cd_left, short cd_right);\nextern void SpuSetCommonCDReverb (long cd_reverb);\nextern void SpuGetCommonMasterVolume (short *mvol_left, short *mvol_right);\nextern void SpuGetCommonMasterVolumeX (short *mvolx_left, short *mvolx_right);\nextern void SpuGetCommonMasterVolumeAttr (short *mvol_left, short *mvol_right,\n       short *mvolmode_left,\n       short *mvolmode_right);\nextern void SpuGetCommonCDMix (long *cd_mix);\nextern void SpuGetCommonCDVolume (short *cd_left, short *cd_right);\nextern void SpuGetCommonCDReverb (long *cd_reverb);\nextern long SpuSetReverbModeType (long mode);\nextern void SpuSetReverbModeDepth (short depth_left, short depth_right);\nextern void SpuSetReverbModeDelayTime (long delay);\nextern void SpuSetReverbModeFeedback (long feedback);\nextern void SpuGetReverbModeType (long *mode);\nextern void SpuGetReverbModeDepth (short *depth_left, short *depth_right);\nextern void SpuGetReverbModeDelayTime (long *delay);\nextern void SpuGetReverbModeFeedback (long *feedback);\nextern void SpuSetESA( long revAddr );\ntypedef struct {\n    char status;\n    char pad1;\n    char pad2;\n    char pad3;\n    long last_size;\n    unsigned long buf_addr;\n    unsigned long data_addr;\n} SpuStVoiceAttr;\ntypedef struct {\n    long size;\n    long low_priority;\n    SpuStVoiceAttr voice [24];\n} SpuStEnv;\ntypedef void (*SpuStCallbackProc)(unsigned long, long);\nextern SpuStEnv *SpuStInit (long);\nextern long SpuStQuit (void);\nextern long SpuStGetStatus (void);\nextern unsigned long SpuStGetVoiceStatus (void);\nextern long SpuStTransfer (long flag, unsigned long voice_bit);\nextern SpuStCallbackProc SpuStSetPreparationFinishedCallback (SpuStCallbackProc func);\nextern SpuStCallbackProc SpuStSetTransferFinishedCallback (SpuStCallbackProc func);\nextern SpuStCallbackProc SpuStSetStreamFinishedCallback (SpuStCallbackProc func);\ntypedef void (*CdlCB)(u_char,u_char *);\ntypedef struct {\n u_char minute;\n u_char second;\n u_char sector;\n u_char track;\n} CdlLOC;\ntypedef struct {\n u_char file;\n u_char chan;\n u_short pad;\n} CdlFILTER;\ntypedef struct {\n u_char val0;\n u_char val1;\n u_char val2;\n u_char val3;\n} CdlATV;\ntypedef struct {\n CdlLOC pos;\n u_long size;\n char name[16];\n} CdlFILE;\ntypedef struct {\n    u_short id;\n    u_short type;\n    u_short secCount;\n    u_short nSectors;\n    u_long frameCount;\n    u_long frameSize;\n    u_short width;\n    u_short height;\n    u_long dummy1;\n    u_long dummy2;\n    CdlLOC loc;\n} StHEADER;\nvoid StSetRing(u_long *ring_addr,u_long ring_size);\nvoid StClearRing(void);\nvoid StUnSetRing(void);\nvoid StSetStream(u_long mode,u_long start_frame,u_long end_frame,\n      void (*func1)(),void (*func2)());\nvoid StSetEmulate(u_long *addr,u_long mode,u_long start_frame,\n       u_long end_frame,void (*func1)(),void (*func2)());\nu_long StFreeRing(u_long *base);\nu_long StGetNext(u_long **addr,u_long **header);\nu_long StGetNextS(u_long **addr,u_long **header);\nu_short StNextStatus(u_long **addr,u_long **header);\nvoid StRingStatus(short *free_sectors,short *over_sectors);\nvoid StSetMask(u_long mask,u_long start,u_long end);\nvoid StCdInterrupt(void);\nint StGetBackloc(CdlLOC *loc);\nint StSetChannel(u_long channel);\nvoid CdFlush(void);\nCdlFILE *CdSearchFile(CdlFILE *fp, char *name);\nCdlLOC *CdIntToPos(int i, CdlLOC *p) ;\nchar *CdComstr(u_char com);\nchar *CdIntstr(u_char intr);\nint CdControl(u_char com, u_char *param, u_char *result);\nint CdControlB(u_char com, u_char *param, u_char *result);\nint CdControlF(u_char com, u_char *param);\nint CdGetSector(void *madr, int size);\nint CdGetSector2( void* madr, int size );\nint CdDataSync(int mode);\nint CdGetToc(CdlLOC *loc) ;\nint CdPlay(int mode, int *track, int offset);\nint CdMix(CdlATV *vol);\nint CdPosToInt(CdlLOC *p);\nint CdRead(int sectors, u_long *buf, int mode);\nint CdRead2(long mode);\nint CdReadFile(char *file, u_long *addr, int nbyte);\nint CdReadSync(int mode, u_char *result);\nint CdReady(int mode, u_char *result) ;\nint CdSetDebug(int level);\nint CdSync(int mode, u_char *result) ;\nvoid (*CdDataCallback(void (*func)()));\nCdlCB CdReadCallback(CdlCB func);\nCdlCB CdReadyCallback(CdlCB func);\nCdlCB CdSyncCallback(CdlCB func);\nint CdInit(void);\nint CdReset(int mode);\nint CdStatus(void);\nint CdLastCom(void);\nCdlLOC *CdLastPos(void);\nint CdMode(void);\nint CdDiskReady( int mode );\nint CdGetDiskType( void );\nstruct EXEC *CdReadExec(char *file);\nvoid CdReadBreak( void );\nvoid PadInitDirect(unsigned char *, unsigned char *);\nvoid PadInitMtap(unsigned char *, unsigned char *);\nvoid PadInitGun(unsigned char *, int);\nint PadChkVsync(void);\nvoid PadStartCom(void);\nvoid PadStopCom(void);\nunsigned PadEnableCom(unsigned);\nvoid PadEnableGun(unsigned char);\nvoid PadRemoveGun(void);\nint PadGetState(int);\nint PadInfoMode(int, int, int);\nint PadInfoAct(int, int, int);\nint PadInfoComb(int, int, int);\nint PadSetActAlign(int, unsigned char *);\nint PadSetMainMode(int socket, int offs, int lock);\nvoid PadSetAct(int, unsigned char *, int);\nextern void *memcpy ( );\nextern void *memmove(unsigned char *, const unsigned char *, int);\nextern int memcmp ( );\nextern void *memchr (const unsigned char *, unsigned char, int);\nextern void *memset ( );\nextern void *bcopy(const unsigned char *, unsigned char *, int);\nextern void *bzero(unsigned char *, int);\nextern int bcmp (const unsigned char *, const unsigned char *, int);\nvoid SpuSetCommonAttr_80097038(SpuCommonAttr *attr);\nextern unsigned long SpuSetReverbVoice_80096858(long on_off, unsigned long voice_bit);\nextern void SpuSetVoiceAttr_80097518(SpuVoiceAttr *arg);\nDISPENV *PutDispEnv_80090094(DISPENV *env);\nMATRIX *MulMatrix0_80092A48(MATRIX *m0, MATRIX *m1, MATRIX *m2);\nMATRIX *MulMatrix2_80092F68(MATRIX *m0, MATRIX *m1);\nMATRIX *MulRotMatrix_80092B58(MATRIX *m0);\nMATRIX *ScaleMatrix_800930D8(MATRIX *m, VECTOR *v);\nMATRIX *RotMatrixYXZ_80093798(SVECTOR *r, MATRIX *m);\nMATRIX *RotMatrixYXZ_gte_80094108(SVECTOR *r, MATRIX *m);\nMATRIX *RotMatrixZYX_gte_80093F08(SVECTOR *r, MATRIX *m);\nMATRIX *RotMatrixX_80093A28(long r, MATRIX *m);\nMATRIX *RotMatrixY_80093BC8(long r, MATRIX *m);\nMATRIX *RotMatrixZ_80093D68(long r, MATRIX *m);\nVECTOR *ApplyRotMatrix_80092DA8(SVECTOR *v0, VECTOR *v1);\nVECTOR *ApplyRotMatrixLV_80092E28(VECTOR *v0, VECTOR *v1);\nVECTOR *ApplyMatrixLV_80092C48(MATRIX *m, VECTOR *v0, VECTOR *v1);\nSVECTOR *ApplyMatrixSV_80093078(MATRIX *m, SVECTOR *v0, SVECTOR *v1);\nlong RotTransPers3_800934A8(SVECTOR *vecs, SVECTOR *v1, SVECTOR *v2, long *sxy0, long *sxy1, long *sxy2, long *p, long *flag);\nvoid SetTransMatrix_80093248(MATRIX *);\nchar *strcpy_8008E768(char *dest, const char *src);\nint ChangeTh_800994EC(int thread);\nint LoadImage2_80091FB0(RECT *, u_long *);\nint ResetCallback_80098318(void);\nint Square0_80093340(VECTOR *, VECTOR *);\nint SquareRoot0_80092708(int);\nint StoreImage2_8009209C(RECT *, u_long *);\nint StoreImage_8008FB70(RECT *, u_long *);\nint VSync_80098108(int);\nvoid VSyncCallback_800983A8(void (*func)());\nint rand_8008E6B8(void);\nvoid srand_8008E6E8(int s);\nint ratan2_80094308(int, int);\nint rcos_800925D8(int a1);\nint rsin_80092508(int a1);\nint sprintf_8008E878(char *buffer, const char *format, ...);\nint strcmp_8008E6F8(const char *str1, const char *str2);\nlong EnableEvent_800994AC(long);\nlong OpenEvent_8009946C(unsigned long desc, long spec, long mode, void (*func)());\nlong OpenTh_800994CC(long (*func)(), unsigned long, unsigned long);\nlong SetConf_800997BC(unsigned long, unsigned long, unsigned long);\nlong StartCARD_800990F8(void);\nlong TestEvent_8009949C(long);\nu_long *ClearOTagR_8008FD50(u_long *ot, int n);\nunsigned int GetRCnt_800996E8(unsigned int rcnt);\nunsigned short GetTPage_80092418(int tp, int abr, int x, int y);\nvoid SetDrawTPage_800924A8(DR_TPAGE *p, int dfe, int dtd, int tpage);\nvoid SetDrawStp_800924D8(DR_STP *p, int pbw);\nvoid SetTexWindow_800905F0(DR_TWIN *p, RECT *tw);\nvoid CloseEvent_8009947C(int event);\nvoid DrawOTag_8008FE58(unsigned int *pOt);\nvoid DrawPrim_8008FDFC(void *p);\nvoid DrawSyncCallback_8008F76C(void *);\nvoid EnterCriticalSection_8009952C(void);\nvoid ExitCriticalSection_8009953C(void);\nvoid InitCARD_8009908C(long val);\nvoid LoadImage_8008FB10(RECT *, unsigned char *);\nvoid OuterProduct12_800933AC(VECTOR *v0, VECTOR *v1, VECTOR *v2);\nvoid PutDrawEnv_8008FEC8(DRAWENV *);\nvoid ReadRotMatrix_80092DD8(MATRIX *m);\nvoid SetDrawEnv_800906B0(DR_ENV *dr_env, DRAWENV *env);\nvoid SetMem_8009944C(int);\nvoid SetRotMatrix_80093218(MATRIX *m);\nvoid StopCARD_80099130(void);\nvoid SwEnterCriticalSection_8009954C(void);\nvoid SwExitCriticalSection_8009956C(void);\nvoid VectorNormal_80092838(VECTOR *v0, VECTOR *v1);\nlong VectorNormalSS_80092868(SVECTOR *v0, SVECTOR *v1);\nvoid SetDispMask_8008F7CC(int);\nvoid InitGeom_80092680(void);\nvoid PadInitDirect_8009C6CC(unsigned char *pad1, unsigned char *pad2);\nvoid PadSetAct_8009A678(int port, unsigned char *data, int len);\nvoid PadStartCom_8009A22C(void);\nvoid StopPAD_80099F08(void);\nvoid ChangeClearPAD_8009960C(long val);\nint strlen_8008E7B8(char *s);\nvoid *memcpy_8008E648(void *destination, const void *source, int num);\nint erase_800995FC(char *);\nlong card_read_8009901C(long chan, long block, unsigned char *buf);\nvoid bu_init_80098FEC(void);\nint ResetGraph(int mode);\nvoid SpuSetKey_80096C18(int, int);\nlong RotTransPers_80093478(SVECTOR *v0, long *sxy, long *p, long *flag);\nlong LoadExec_8009940C(char *, unsigned long, unsigned long);\nvoid SpuGetAllKeysStatus_8009748C(char *status);\nvoid _96_init_8009941C(void);\nvoid _96_remove_80099434(void);\nvoid StopCallback_8009840C(void);\nlong SpuSetIRQ_80096A28(long on_off);\nvoid StrFadeIn_800822C8(unsigned int a1);\nint StrFadeOutStop_80082380(unsigned int fadeSpeed);\nint SePlay_800888F8(int a1);\nint StrFadeOut_80082310(unsigned int a1);\nint CdInit(void);\nvoid SpuInit_80094568(void);\nvoid PadStopCom_8009A24C(void);\nlong SpuGetKeyStatus_80096DD8(unsigned long voice_bit);\nunsigned long SpuSetIRQAddr_80096B68(unsigned long);\nunsigned long SpuSetTransferStartAddr_80096EC8(unsigned long addr);\nlong SpuInitMalloc_800952D8(long num, char *top);\nunsigned long SpuSetPitchLFOVoice(long on_off, unsigned long voice_bit);\nlong SpuMalloc_80095338(long size);\nunsigned long SpuWrite_80096E68(unsigned char *addr, unsigned long size);\nunsigned long SpuSetPitchLFOVoice_80097008(long on_off, unsigned long voice_bit);\nunsigned long SpuSetNoiseVoice_80095908(long on_off, unsigned long voice_bit);\nlong SpuSetReverb_80095BF8(long on_off);\nlong SpuSetTransferMode_80096F28(long mode);\nlong SpuReserveReverbWorkArea_80096788(long on_off);\nlong SpuClearReverbWorkArea_80096888(long mode);\nSpuIRQCallbackProc SpuSetIRQCallback_80096BA8(SpuIRQCallbackProc);\nlong SpuSetReverbModeParam_80095DD8(SpuReverbAttr *attr);\nlong SpuSetReverbDepth_800967D8(SpuReverbAttr *attr);\nvoid SpuGetVoiceAttr_80097D18(SpuVoiceAttr *arg);\nint MoveImage_8008FBD0(RECT *rect, int x, int y);\nvoid SpuQuit_80095258(void);\nint strncmp_8008E7F8(const char *s1, const char *s2, int size);\nvoid SetSemiTrans_80092458(void *p, int abe);\nvoid SetPolyF4_80092488(void *p);\nunsigned long GetSp_8009962C(void);\nunsigned long GetGp_8009961C(void);\nint PadInfoAct_8009A47C(int port, int actno, int term);\nint PadSetActAlign_8009A5F8(int port, char *data);\nint PadGetState_8009A2B8(int port);\nint open_8009958C(char *devname, int flag);\nint close_800995CC(int fd);\nunsigned long lseek_8009959C(int fd, unsigned int offset, int flag);\nint write_800995BC(int fd, char* buf, int n);\nlong format_800995DC(char *fs);\nstruct DIRENTRY *firstfile_80099AEC(char *, struct DIRENTRY *);\nstruct DIRENTRY *nextfile_800995EC(struct DIRENTRY *);\nlong CloseTh_800994DC(unsigned long thread);\nlong card_info_80098FFC(long chan);\nlong SpuIsTransferCompleted_80096F58(long flag);\nint PCinit_80014B14(void);\nint PCopen_80014B1C(char *name, int flags, int perms);\nint PClseek_80098E48(int fd, int offset, int mode);\nint PCread_80014B24(int fd, char *buff, int len);\nint PCclose_80014B2C(int fd);\nstruct ToT {\n unsigned long *head;\n long size;\n};\nstruct TCBH {\n struct TCB *entry;\n long flag;\n};\nstruct TCB {\n long status;\n long mode;\n unsigned long reg[40];\n long system[6];\n};\nstruct EvCB {\n unsigned long desc;\n long status;\n long spec;\n long mode;\n long (*FHandler)();\n long system[2];\n};\nstruct EXEC {\n        unsigned long pc0;\n        unsigned long gp0;\n        unsigned long t_addr;\n        unsigned long t_size;\n        unsigned long d_addr;\n        unsigned long d_size;\n        unsigned long b_addr;\n        unsigned long b_size;\n unsigned long s_addr;\n unsigned long s_size;\n unsigned long sp,fp,gp,ret,base;\n};\nstruct XF_HDR {\n char key[8];\n unsigned long text;\n unsigned long data;\n struct EXEC exec;\n char title[60];\n};\nstruct DIRENTRY {\n char name[20];\n long attr;\n long size;\n struct DIRENTRY *next;\n long head;\n char system[4];\n};\nextern struct ToT SysToT[32];\nextern long SysClearRCnt[];\ntypedef int (*TMtsFn)(void);\ntypedef void (*MtsTaskFn)(void);\ntypedef long (*MtsThreadFn)(void);\ntypedef struct mts_msg\n{\n    struct mts_msg *field_0;\n    int field_4_task_idx;\n    int field_8_start_vblanks;\n    int field_C_end_vblanks;\n    int (*field_10)(void);\n} mts_msg;\ntypedef struct mts_msg2\n{\n    int field_0;\n    int field_4_task_idx;\n    void (*field_8)(void);\n    void *field_C;\n} mts_msg2;\ntypedef union mts_tmp\n{\n     TMtsFn fn;\n     mts_msg2* pMsg;\n} mts_tmp;\ntypedef struct mts_task\n{\n    signed char field_0_state;\n    signed char field_1;\n    signed char field_2_rcv_task_idx;\n    signed char field_3_src_idx;\n    mts_msg* field_4_pMessage;\n    mts_tmp field_8_fn_or_msg;\n    signed char field_C_ref_count;\n    signed char field_D;\n    char field_E;\n    signed char field_F_recv_idx;\n    void *field_10_pStack;\n    int field_14_stackSize;\n    int field_18_tcb;\n    struct TCB *field_1C;\n} mts_task;\ntypedef struct MTS_PAD_DATA\n{\n    signed char channel;\n    char flag;\n    unsigned short button;\n    unsigned char rx;\n    unsigned char ry;\n    unsigned char lx;\n    unsigned char ly;\n} MTS_PAD_DATA;\nenum\n{\n    MTS_PAD_DIGITAL = 1,\n    MTS_PAD_ANAJOY = 2,\n    MTS_PAD_ANALOG = 3\n};\nvoid mts_set_pad_vibration_8008C408(int, int);\nvoid mts_set_pad_vibration2_8008C454(int, int);\nint mts_get_pad_8008C170(int a0, MTS_PAD_DATA *data);\nint mts_get_tick_count_8008BBB0(void);\nint mts_printf_8008BBA0(const char *formatStr, ...);\nint mts_receive_80089D24(int src, mts_msg2 *message);\nint mts_sta_tsk_8008B47C(int taskNum, MtsTaskFn pTaskFn, void *pStack);\nint mts_wait_vbl_800895F4(int wait_vblanks);\nlong mts_PadRead_8008C324(int a0);\nvoid mts_8008B0A4();\nvoid mts_8008BA88();\nvoid mts_8008BB88(int arg0);\nvoid mts_boot_task_8008AAC4(int taskNum, MtsTaskFn pTaskFn, void *pStack, long stackSize);\nvoid mts_event_cb_8008BBC0();\nvoid mts_init_controller_8008C098(void);\nvoid mts_init_vsync_800895AC(void);\nvoid mts_init_vsync_helper_800893E8(void);\nvoid mts_lock_sem_8008A6CC(int taskNr);\nvoid mts_print_process_status_8008B77C();\nvoid mts_send_8008982C(int dst, mts_msg2 *message);\nvoid mts_set_callback_800893B4(void *);\nvoid mts_set_exception_func_800892A8(int param_1);\nvoid mts_set_stack_check_8008B648(int taskIdx, unsigned int *pStack, int stackSize);\nvoid mts_set_vsync_task_800892B8(void);\nvoid mts_slp_tsk_8008A400(void);\nvoid mts_start_8008AAEC(int taskNum, MtsTaskFn pTaskFn, void *pStack);\nvoid mts_task_start_8008BBC8(void);\nvoid mts_unlock_sem_8008A85C(int taskNum);\nvoid sio_output_stop_8008C5B0(void);\nint sio_getchar2_8008C5D0(void);\nvoid sio_output_start_8008C5A8(void);\nvoid mts_set_callback_controller_800893D8(void *ptr);\nvoid mts_callback_controller_8008BDEC(void);\nunsigned char *mts_get_bss_tail_8008C598();\nunsigned short mts_read_pad_8008C25C(int);\nvoid mts_shutdown_8008B044(void);\nvoid mts_wup_tsk_8008A540(int taskNr);\nint mts_get_pad_vibration_type_8008C4BC(int);\nint mts_get_task_status_8008B618(int task_idx);\nvoid mts_8008B51C(void);\nint mts_isend_80089B04(int isend_dst);\nint mts_null_printf_8008BBA8(const char *formatStr, ...);\nint mts_nullsub_8_8008BB98(int, const char *, ...);\nextern int PadIdentifier;\nint CheckCallback(void) ;\nvoid PadInit(int mode);\nint ResetCallback(void) ;\nint RestartCallback(void) ;\nint StopCallback(void) ;\nint VSync(int mode);\nint VSyncCallback(void (*f)(void)) ;\nlong GetVideoMode (void);\nlong SetVideoMode (long mode);\nu_long PadRead(int id);\nvoid PadStop(void);\nstruct GV_ACT;\ntypedef void (*TActorFunction)(struct GV_ACT *);\ntypedef void (*TActorFreeFunction)(void *);\ntypedef struct GV_ACT\n{\n    struct GV_ACT *pPrevious;\n    struct GV_ACT *pNext;\n    TActorFunction mFnUpdate;\n    TActorFunction mFnShutdown;\n    TActorFreeFunction mFreeFunc;\n    const char *mName;\n    int field_18;\n    int field_1C;\n} GV_ACT;\nstruct ActorList\n{\n    GV_ACT first;\n    GV_ACT last;\n    short mPause;\n    short mKill;\n};\nstruct PauseKill\n{\n    short pause;\n    short kill;\n};\ntypedef struct\n{\n    int mId;\n    void *mFileBuffer;\n} LibGV_FileRecord;\ntypedef struct\n{\n    unsigned short address;\n    unsigned short _len;\n    unsigned short message[7];\n    unsigned short message_len;\n} GV_MSG;\ntypedef struct\n{\n    int field_0_count;\n    GV_MSG field_4_msgs[16];\n} GV_Messages;\ntypedef struct CacheSystems\n{\n    LibGV_FileRecord tags[128];\n} CacheSystems;\nenum GV_MemoryAllocation_States\n{\n    GV_MemoryAllocation_States_Free_0 = 0,\n    GV_MemoryAllocation_States_Void_1 = 1,\n    GV_MemoryAllocation_States_Used_2 = 2,\n};\ntypedef union AllocType {\n    int type;\n    void **addr;\n} AllocType;\ntypedef struct GV_MemoryAllocation\n{\n    void *mPDataStart;\n    int mAllocType;\n} GV_MemoryAllocation;\nenum GV_Heap_Flags\n{\n    GV_Heap_Flags_Dynamic_1 = 1,\n    GV_Heap_Flags_Voided_2 = 2,\n    GV_Heap_Flags_Failed_4 = 4,\n};\ntypedef struct GV_Heap\n{\n    int mFlags;\n    void *mStartAddr;\n    void *mEndAddr;\n    int mUnitsCount;\n    GV_MemoryAllocation mAllocs[512];\n} GV_Heap;\ntypedef struct\n{\n    unsigned short status;\n    unsigned short press;\n    unsigned short release;\n    unsigned short quick;\n    short dir;\n    short analog;\n    unsigned char right_dx;\n    unsigned char right_dy;\n    unsigned char left_dx;\n    unsigned char left_dy;\n} GV_PAD;\nenum\n{\n    GV_PAD_DIGITAL = 0,\n    GV_PAD_ANAJOY = 1,\n    GV_PAD_ANALOG = 2\n};\nenum\n{\n    PAD_UP = (1<<12),\n    PAD_DOWN = (1<<14),\n    PAD_LEFT = (1<<15),\n    PAD_RIGHT = (1<<13),\n    PAD_TRIANGLE = (1<< 4),\n    PAD_CROSS = (1<< 6),\n    PAD_SQUARE = (1<< 7),\n    PAD_CIRCLE = (1<< 5),\n    PAD_L1 = (1<< 2),\n    PAD_L2 = (1<< 0),\n    PAD_R1 = (1<< 3),\n    PAD_R2 = (1<< 1),\n    PAD_START = (1<<11),\n    PAD_SELECT = (1<< 8),\n};\nenum CACHE_REGION\n{\n    GV_NO_CACHE,\n    GV_NORMAL_CACHE,\n    GV_RESIDENT_CACHE,\n};\ntypedef int (*TFileExtHandler)(unsigned char *pFileData, int fileNameHashed);\nvoid GV_StartDaemon_80014D18(void);\nvoid GV_ResetSystem_80014CC8(void);\nvoid GV_ExecActorSystem_80014F88(void);\nGV_ACT *GV_NewActor_800150E4(int level, int memSize);\nvoid GV_InitActorSystem_80014D98(void);\nvoid GV_DestroyActorSystem_80015010(int level);\nvoid GV_InitActor_800150A8(int level, GV_ACT *pActor, TActorFreeFunction fnFree);\nvoid GV_SetNamedActor_8001514C(GV_ACT *pActor, TActorFunction pFnUpdate, TActorFunction pFnShutdown,\n                                  const char *pActorName);\nvoid GV_DestroyActor_800151C8(GV_ACT *pActor);\nvoid GV_DestroyOtherActor_800151D8(GV_ACT *pActorToKill);\nvoid GV_DestroyActorQuick_80015164(GV_ACT *pActor);\nvoid GV_InitCacheSystem_80015458(void);\nvoid GV_InitLoader_80015434(void);\nvoid GV_FreeCacheSystem_80015540(void);\nint GV_CacheID_800152DC(int hashedFileName, int param_2);\nvoid GV_SetLoader_80015418(int fileExtChar, TFileExtHandler pFn);\nint GV_SetCache_800153C0(int id, void *buf);\nvoid *GV_GetCache_8001538C(int fileNameHashed);\nint GV_CacheID2_800152FC(const char *fileName, int extID);\nvoid GV_ResidentFileCache_80015484(void);\nint GV_LoadInit_800155BC(void *pData, int id, int region);\nvoid GV_InitMemorySystemAll_80015AB0();\nvoid GV_InitMemorySystem_80015AF4(int, int, void *, int);\nvoid GV_ResetMemory_80014CF0(void);\nvoid *GV_AllocMemory_80015EB8(int, int);\nvoid *GV_AllocMemory2_80015ED8(int, int, void **);\nvoid GV_FreeMemory_80015FD0(int, void *);\nvoid GV_FreeMemory2_80016078(int, void **);\nvoid GV_ClearMemorySystem_80015B4C(int);\nvoid GV_CheckMemorySystem_80015BF8(int);\nvoid GV_DumpMemorySystem_80015D48(int);\nvoid GV_CopyMemory_800160D8(void *, void *, int);\nvoid GV_ZeroMemory_8001619C(void *, int);\nvoid *GV_Malloc_8001620C(int);\nvoid GV_Free_80016230(void *);\nvoid GV_DelayedFree_80016254(void *);\nvoid GV_ResidentHeapReset_800163B0(void);\nvoid *GV_ResizeMemory_8001630C(int which, void *addr, int size);\nvoid *GV_GetMaxFreeMemory_8001627C(int which);\nvoid *GV_SplitMemory_80018FA4(int which, void *addr, int size);\nvoid GV_InitResidentMemory(void);\nvoid *GV_AllocResidentMemory_800163D8(long size);\nvoid GV_InitMessageSystem_800164AC();\nvoid GV_ClearMessageSystem_800164C8(void);\nint GV_SendMessage_80016504(GV_MSG *send);\nint GV_ReceiveMessage_80016620(int msg_type, GV_MSG **ppFound);\nvoid GV_InitPadSystem_800167C8(void);\nvoid GV_UpdatePadSystem_8001682C(void);\nvoid GV_OriginPadSystem_80016C78(int);\nint GV_GetPadOrigin_80016C84(void);\nint GV_GetPadDirNoPadOrg_80016C90(unsigned int);\nint GV_StrCode_80016CCC(const char *string);\nvoid GV_SubVec3_80016D40(SVECTOR *vec1, SVECTOR *vec2, SVECTOR *dst);\nint GV_VecLen3_80016D80(SVECTOR *vec);\nint GV_VecDir2_80016EF8(SVECTOR *vec);\nvoid GV_AddVec3_80016D00(SVECTOR *vec1, SVECTOR *vec2, SVECTOR *dst);\nvoid GV_LenVec3_80016DDC(SVECTOR *pSrcVec, SVECTOR *pDstVec, int param_3, int param_4);\nint GV_DiffVec3_80016E84(SVECTOR *vec1, SVECTOR *vec2);\nint GV_NearExp2_80026384(int from, int to);\nint GV_NearExp4_800263B0(int from, int to);\nint GV_NearExp8_800263E4(int from, int to);\nvoid GV_NearExp2V_8002667C(short *from, short *to, int count);\nvoid GV_NearExp4V_800266D4(short *from, short *to, int count);\nvoid GV_NearExp8V_80026734(short *from, short *to, int count);\nvoid GV_NearExp2PV_80026924(short *from, short *to, int count);\nvoid GV_NearExp4PV_800269A0(short *from, short *to, int count);\nvoid GV_NearExp8PV_80026A24(short *from, short *to, int count);\nint GV_DiffDirS_8001704C(int param_1, int param_2);\nint GV_DiffDirAbs_8001706C(int a1, int a2);\nunsigned int GV_RandU_80017090(unsigned int input);\nint GV_RandS_800170BC(int input);\nvoid GV_DirVec2_80016F24(int a1, int a2, SVECTOR *a3);\nint GV_NearDiffP_80026418(int from, int to);\nint sub_80026440(int from, int to, int range);\nint sub_8002646C(int from, int to, int range);\nvoid GV_DirVec3_80016FA0(SVECTOR *pSrcVec, int param_2, SVECTOR *pDstVec);\nunsigned int GV_DiffDirU_80017040(int param_1, int param_2);\nvoid sub_8002ECE4(SVECTOR *param_1, SVECTOR *param_2, SVECTOR *param_3);\nvoid CopyVectorFromScratchpad_80029360(SVECTOR *vec_1, SVECTOR *vec_2);\nvoid GV_NearTimeSV_800268AC(short *from, short *to, int interp, int count);\nvoid GV_NearTimePV_80026BC4(short *from, short *to, int interp, int count);\nint GV_NearTime_800264B0(int from, int to, int interp);\nvoid GV_SetPacketTempMemory_80014C28(void);\nvoid GV_ResetPacketMemory_80014BD8(void);\nvoid sub_8002751C(SVECTOR *svec1, SVECTOR *svec2);\nint sub_80027BF8(SVECTOR *param_1);\nstatic inline short FP_Extend(short value)\n{\n    value &= 0xfff;\n    if (value > 2048)\n    {\n        value -= 4096;\n    }\n    return value;\n}\nstatic inline int FP_Extend2(int value)\n{\n    value &= 0xfff;\n    if (value >= 2048)\n    {\n        value -= 4096;\n    }\n    return value;\n}\nstatic inline int FP_ExtendN(int value)\n{\n    value |= 0xf000;\n    if (value < -2048)\n    {\n        value += 4096;\n    }\n    return value;\n}\nstatic inline int FP_Subtract(int fp, int toSub)\n{\n    short var_a0 = fp - toSub;\n    var_a0 &= 0xfff;\n    if (var_a0 > 2048)\n    {\n        var_a0 -= 4096;\n    }\n    return var_a0;\n}\ntypedef struct GV_Vec\n{\n    short x;\n    short y;\n    short z;\n} GV_Vec;\ntypedef struct Res_Control_unknown\n{\n    unsigned short field_0_scriptData_orHashedName;\n    unsigned short field_2_name_hash;\n    short field_4_trigger_Hash_Name_or_camera_w;\n    short field_6_count;\n    unsigned short field_8_array[6];\n    SVECTOR field_14_vec;\n} Res_Control_unknown;\nstruct map_record;\nenum\n{\n CTRL_SKIP_MESSAGE = 0x01,\n CTRL_SKIP_TRAP = 0x02,\n CTRL_SKIP_NEAR_CHECK = 0x04,\n CTRL_BOTH_CHECK = 0x08,\n};\ntypedef struct CONTROL\n{\n    SVECTOR field_0_mov;\n    SVECTOR field_8_rotator;\n    Res_Control_unknown field_10_pStruct_hzd_unknown;\n    struct map_record *field_2C_map;\n    unsigned short field_30_scriptData;\n    short field_32_height;\n    short field_34_hzd_height;\n    short field_36;\n    short field_38;\n    short field_3A;\n    SVECTOR field_3C;\n    SVECTOR field_44_movementVector;\n    SVECTOR field_4C_turn_vec;\n    char field_54;\n    unsigned char field_55_skip_flag;\n    signed char field_56;\n    signed char field_57;\n    signed char field_58;\n    char field_59;\n    char field_5A[2];\n    GV_MSG *field_5C_mesg;\n    SVECTOR field_60_vecs_ary[2];\n    SVECTOR *field_70[2];\n    short field_78_levels[2];\n} CONTROL;\nvoid GM_FreeControl_800260CC(CONTROL *pControl);\nvoid GM_ConfigControlVector_800260FC(CONTROL *pControl, SVECTOR *pVec1, SVECTOR *pVec2);\ntypedef struct HZD_VEC\n{\n    long long_access[0];\n    short x, z, y, h;\n} HZD_VEC;\ntypedef struct HZD_SEG\n{\n    HZD_VEC p1, p2;\n} HZD_SEG;\ntypedef struct HZD_FLR\n{\n    HZD_VEC b1, b2;\n    HZD_VEC p1, p2, p3, p4;\n} HZD_FLR;\ntypedef struct HZD_TRP\n{\n    HZD_VEC b1, b2;\n    char name[12];\n    u_char id1, id2;\n    u_short name_id;\n} HZD_TRP;\ntypedef struct HZD_CAM\n{\n    HZD_VEC b1, b2;\n    HZD_VEC cam;\n    HZD_VEC orient;\n} HZD_CAM;\ntypedef union HZD_CAM_TRP\n{\n    HZD_CAM cam;\n    HZD_TRP trap;\n} HZD_CAM_TRP;\ntypedef union HZD_TRG\n{\n    HZD_CAM cam;\n    HZD_TRP trap;\n} HZD_TRG;\ntypedef struct HZD_ZON\n{\n    short x, z, y;\n    short w, h;\n    u_char nears[6];\n    u_char dists[6];\n    short padding;\n} HZD_ZON;\ntypedef struct HZD_PTP\n{\n    short x, z, y;\n    short command;\n} HZD_PTP;\ntypedef struct HZD_PAT\n{\n    short n_points;\n    short init_point;\n    HZD_PTP *points;\n} HZD_PAT;\ntypedef struct HZD_AREA\n{\n    short n_triggers;\n    short n_walls;\n    short n_altimetry;\n    short n_unknown;\n    HZD_SEG *walls;\n    HZD_FLR *altimetry;\n    HZD_TRG *triggers;\n    int *wallsFlags;\n} HZD_AREA;\ntypedef struct HZD_HEADER\n{\n    void *ptr_access[0];\n    short version;\n    short min_x, min_y;\n    short max_x, max_y;\n    short n_areas;\n    short n_navmeshes;\n    short n_routes;\n    HZD_AREA *areas;\n    HZD_ZON *navmeshes;\n    HZD_PAT *routes;\n} HZD_HEADER;\ntypedef struct HZD_MAP\n{\n    HZD_HEADER *f00_header;\n    HZD_AREA *f04_area;\n    short f08_areaIndex;\n    short f0A_idx;\n    short f0C;\n    short f0E_n_cameras;\n    short f10_24size;\n    short f12_queue_size;\n    HZD_ZON *f14_navmeshes;\n    HZD_TRP *f18_traps;\n    HZD_SEG **f1C_pEndOfHzdMap;\n    HZD_SEG **f20_pAfterStructure_24;\n    char *f20_pAfterStructure_48;\n} HZD_MAP;\nvoid HZD_SetDynamicSegment_8006FEE4(HZD_SEG *a1, HZD_SEG *a2);\nvoid HZD_StartDaemon_80021900(void);\nHZD_MAP *HZD_MakeHandler_80021AE0(HZD_HEADER *hzd, int areaIndex, int default_48, int default_24);\nvoid HZD_SetEvent_80029AB4(Res_Control_unknown *param_1, int param_2);\nvoid HZD_FreeHandler_80021C40(void *param_1);\nint HZD_LoadInitHzd_800219F4(void *hzmFile);\nvoid HZD_ProcessTraps_80021928(HZD_CAM_TRP *trig, int n_trapsAndCameras);\nvoid HZD_MakeRoute_80021D6C(HZD_HEADER *hzd, char *arg1);\nvoid HZD_MakeRoute_helper_80021C64(HZD_ZON *param_1, int param_2, int param_3, char *param_4);\nvoid HZD_ReExecEvent_8002A1F4(HZD_MAP *param_1, Res_Control_unknown *param_2, unsigned int flags);\nint HZD_SlopeFloorLevel_800298F8(SVECTOR *param_1, SVECTOR *arg1);\nvoid sub_800219C8(HZD_PAT *routes, int n_routes, HZD_HEADER *hzm);\nstruct BindStruct;\nvoid HZD_SetBind_80029A5C(int, struct BindStruct *, int);\ntypedef struct LitHeader\n{\n    int field_0_num_lights;\n} LitHeader;\ntypedef struct map_record\n{\n    int field_0_map_index_bit;\n    unsigned short field_4_mapNameHash;\n    unsigned short field_6_bUsed;\n    HZD_MAP *field_8_hzd;\n    LitHeader *field_C_lit_file;\n    int field_10_zone_id;\n} map_record;\ntypedef struct AreaHistory\n{\n    short history[8];\n} AreaHistory;\nmap_record *Map_FindByNum_80031504(int mapNameHash);\nint Map_MarkUsed_80031324(int mapName);\nvoid Map_KmdLoad_80030E74(int pLitName, struct map_record *pMap);\nHZD_MAP *Map_HZD_Load_80030F38(int resource_name_hashed, int flagsIndex, int bitIndex, int default_48, int default_24);\nstruct map_record *Map_GetNextFreeRecord_80030E30(int mapNameHashed);\nstruct map_record *Map_FromId_800314C0(int id);\nstruct map_record *Map_ScriptLoadMapBlocks_800312D0();\nint Map_ScriptReloadMaps_80031450(int a1);\nvoid Map_LoadMapData_80031244(int mapNum, int resourceNameHashed);\nvoid Map_light_80030C6C(int a1);\nvoid Map_80030FA4();\nvoid Map_ResetMapCountAndKmdsCount_800310A0();\nHZD_MAP *Map_Enum_Get_Hzd_80031580(HZD_MAP *pPrevious);\nvoid GM_DieMap_80030FD0();\nint GM_DelMap_800313C0(int mapName);\nvoid GM_FreeMapObjs_80031028();\ntypedef struct Actor_strctrl\n{\n  GV_ACT field_0_actor;\n  short field_20_state;\n  short field_22_sub_state;\n  short field_24;\n  short field_26_flags;\n  int field_28;\n  int field_2C_map;\n  int field_30_voxStream;\n  int *field_34_pStreamData;\n  int field_38_proc;\n  int field_3C;\n} Actor_strctrl;\nActor_strctrl *GCL_Command_demo_helper_80037DD8(int base_sector, int gcl_proc);\nvoid strctrl_act_helper_800377EC( Actor_strctrl *pActor );\nvoid strctrl_act_80037820( Actor_strctrl *actor );\nvoid strctrl_kill_80037AE4( Actor_strctrl *pActor );\nActor_strctrl *strctrl_init_80037B64( int stream_code, int gcl_proc, int flags );\nint GM_StreamStatus_80037CD8( void );\nvoid GM_StreamPlayStart_80037D1C();\nvoid GM_StreamPlayStop_80037D64();\nvoid sub_80037DB8( void );\nint GM_StreamGetLastCode_80037DC8( void );\nActor_strctrl *GCL_Command_demo_helper_80037DD8( int base_sector, int gcl_proc );\nActor_strctrl *GM_VoxStream_80037E40( int vox_code, int proc );\nActor_strctrl *sub_80037EE0(int vox_stream, int gcl_proc);\ntypedef struct DG_VECTOR\n{\n int vx;\n int vy;\n int vz;\n} DG_VECTOR;\ntypedef struct DG_SVECTOR\n{\n short vx;\n short vy;\n short vz;\n} DG_SVECTOR;\ntypedef struct DG_RVECTOR\n{\n DG_SVECTOR v;\n unsigned char uv[ 2 ];\n CVECTOR c;\n DVECTOR sxy;\n unsigned long sz;\n} DG_RVECTOR;\ntypedef struct DG_PVECTOR\n{\n    long vxy;\n    long vz;\n} DG_PVECTOR;\ntypedef struct DG_TEX\n{\n unsigned short field_0_hash;\n union\n {\n  short s;\n  char c[2];\n } field_2_bUsed;\n short field_4_tPage;\n short field_6_clut;\n char field_8_offx;\n char field_9_offy;\n char field_A_width;\n char field_B_height;\n} DG_TEX;\ntypedef struct _DG_MDL\n{\n int flags_0;\n int numFaces_4;\n struct DG_VECTOR max_8;\n struct DG_VECTOR min_14;\n struct DG_VECTOR pos_20;\n int parent_2C;\n int unknownA_30;\n int numVertex_34;\n SVECTOR *vertexIndexOffset_38;\n unsigned char *faceIndexOffset_3C;\n int numNormals_40;\n SVECTOR *normalIndexOffset_44;\n unsigned char *normalFaceOffset_48;\n unsigned char *uvOffset_4C;\n unsigned short int *materialOffset_50;\n int pad_54;\n} DG_MDL;\ntypedef struct _DG_DEF\n{\n int num_bones_0;\n int num_mesh_4;\n struct DG_VECTOR max;\n struct DG_VECTOR min;\n} DG_DEF;\ntypedef struct _DG_OBJ\n{\n MATRIX world;\n MATRIX screen;\n DG_MDL *model;\n CVECTOR *rgbs;\n struct _DG_OBJ *extend;\n short bound_mode;\n short free_count;\n short raise;\n short n_packs;\n POLY_GT4 *packs[ 2 ];\n} DG_OBJ;\ntypedef struct _DG_OBJS\n{\n MATRIX world;\n MATRIX *root;\n DG_DEF *def;\n u_long flag;\n u_short group_id;\n short n_models;\n short chanl;\n short bound_mode;\n MATRIX *light;\n SVECTOR *rots;\n SVECTOR *adjust;\n SVECTOR *waist_rot;\n SVECTOR *movs;\n DG_OBJ objs[ 0 ];\n} DG_OBJS;\nunion Prim_Union\n{\n LINE_G2 line_g2;\n LINE_F4 line_f4;\n POLY_GT4 poly_gt4;\n POLY_FT4 poly_ft4;\n TILE tiles;\n};\nstruct DG_Rec_Unknown\n{\n unsigned char field_0_prim_size;\n unsigned char field_1;\n unsigned char field_2;\n unsigned char field_3;\n};\nstruct _DG_PRIM;\ntypedef POLY_FT4 * ( *TPrim_Fn )( struct _DG_PRIM *pPrim, POLY_FT4 *pPolys, int numPrims );\ntypedef struct _DG_PRIM\n{\n MATRIX world;\n MATRIX *root;\n int type;\n u_short group_id;\n signed short n_prims;\n short chanl;\n short field_2E_k500;\n short field_30_prim_size;\n short field_32;\n short field_34;\n short field_36;\n SVECTOR *field_38_pUnknown;\n RECT *field_3C;\n union Prim_Union *field_40_pBuffers[ 2 ];\n signed short field_48_prim_count;\n u_short field_4A;\n int field_4C;\n TPrim_Fn field_50_pFn;\n} DG_PRIM;\ntypedef struct DG_Bounds\n{\n DG_VECTOR max;\n DG_VECTOR min;\n} DG_Bounds;\ntypedef struct DG_Light\n{\n SVECTOR pos;\n unsigned short field_8_brightness;\n unsigned short field_A_radius;\n CVECTOR field_C_colour;\n} DG_Light;\ntypedef struct DG_FixedLight\n{\n int field_0_lightCount;\n DG_Light *field_4_pLights;\n} DG_FixedLight;\ntypedef struct DG_TmpLightList\n{\n int n_lights;\n DG_Light lights[ 8 ];\n} DG_TmpLightList;\ntypedef struct DG_LitVertex\n{\n    SVECTOR intensity[2];\n    CVECTOR color[2];\n} DG_LitVertex;\ntypedef struct DG_IMG\n{\n unsigned int unknown0;\n unsigned int unknown1;\n unsigned char *unknown2;\n unsigned char *unknown3;\n unsigned char *unknown4;\n} DG_IMG;\ntypedef struct DG_KmdFile\n{\n int unknown0;\n unsigned int num_objects;\n int unknown1[ 6 ];\n DG_MDL objects[ 0 ];\n} DG_KmdFile;\ntypedef struct DG_Vec3\n{\n int x, y, z;\n} DG_Vec3;\ntypedef struct DG_ZmdObject\n{\n unsigned int numFaces;\n unsigned int numMeshes;\n DG_Vec3 start;\n DG_Vec3 end;\n DG_MDL kmdObjects[ 0 ];\n} DG_ZmdObject;\ntypedef struct DG_ZmdEntry\n{\n unsigned int fileNameHashed;\n DG_ZmdObject data;\n} DG_ZmdEntry;\ntypedef struct DG_ZmdFile\n{\n unsigned int magic;\n unsigned int numZmds;\n unsigned int vertOffset;\n unsigned int bodyLength;\n DG_ZmdEntry zmdEntries[ 0 ];\n} DG_ZmdFile;\ntypedef struct DG_NARS\n{\n unsigned int unknown0;\n unsigned char *unknown1;\n} DG_NARS;\ntypedef struct DG_OAR\n{\n unsigned char *deep;\n unsigned int recordSize;\n unsigned int count;\n unsigned char *start;\n char oarData[ 0 ];\n} DG_OAR;\ntypedef struct OAR_RECORD\n{\n    SVECTOR field_0;\n    SVECTOR field_8;\n    int field_10;\n    unsigned short *field_14;\n    short field_18;\n    short field_1A;\n    unsigned char field_1C;\n    char field_1D[7];\n} OAR_RECORD;\ntypedef struct DG_PcxFile\n{\n unsigned char signature;\n unsigned char version;\n unsigned char encoding;\n unsigned char bpp;\n unsigned short xMin, yMin;\n unsigned short xMax, yMax;\n unsigned short hDpi, vDpi;\n unsigned char palette[ 48 ];\n unsigned char reserved0;\n unsigned char channels;\n unsigned short bytesPerLine;\n unsigned short paletteMode;\n unsigned short hres, vres;\n unsigned short mgsMagic;\n unsigned short flags;\n unsigned short px, py;\n unsigned short cx, cy;\n unsigned short n_colors;\n unsigned char unused1[ 40 ];\n unsigned char data[ 0 ];\n} DG_PcxFile;\ntypedef struct DG_Image\n{\n RECT dim;\n unsigned char data[ 512 ];\n} DG_Image;\ntypedef struct\n{\n u_long tag;\n long rgbc;\n short x0, y0;\n short w, h;\n} TILE_PACKED;\ntypedef struct DG_DivideFile\n{\n short field_00;\n short field_02;\n short field_04;\n char field_06;\n char field_07;\n char field_08;\n char field_09;\n char field_0A;\n char field_0B;\n short field_0C;\n short field_0E;\n int field_10;\n} DG_DivideFile;\ntypedef struct DG_DivideMem\n{\n long *ot;\n short field_04;\n unsigned short raise;\n long opz;\n int field_0C;\n long field_10;\n long field_14;\n long field_18;\n POLY_GT4 *pack;\n GV_Heap *pHeap;\n GV_MemoryAllocation *pAlloc;\n int n_packs;\n void *pDataStart;\n int size;\n DG_RVECTOR *rvec;\n} DG_DivideMem;\ntypedef struct SgtFile\n{\n unsigned int unknown0;\n unsigned char *unknown1;\n unsigned char *unknown2;\n unsigned char *unknown3;\n unsigned char *unknown4;\n unsigned char *unknown5;\n} SgtFile;\ntypedef struct DG_CHNL\n{\n unsigned char *mOrderingTables[ 2 ];\n short word_6BC374_8;\n short word_6BC376_16;\n short word_6BC378_1;\n short word_6BC37A_0_1EC_size;\n MATRIX field_10_eye_inv;\n MATRIX field_30_matrix;\n short field_50_clip_distance;\n short mTotalQueueSize;\n short mFreePrimCount;\n short mTotalObjectCount;\n DG_OBJS **mQueue;\n RECT field_5C_clip_rect;\n RECT field_64_rect;\n DR_ENV field_6C_dr_env[ 2 ];\n DR_ENV field_EC_dr_env[ 2 ];\n DR_ENV field_16C_dr_env[ 2 ];\n} DG_CHNL;\nenum DG_FLAGS\n{\n DG_FLAG_TEXT = 0x0001,\n DG_FLAG_PAINT = 0x0002,\n DG_FLAG_TRANS = 0x0004,\n DG_FLAG_SHADE = 0x0008,\n DG_FLAG_BOUND = 0x0010,\n DG_FLAG_GBOUND = 0x0020,\n DG_FLAG_ONEPIECE = 0x0040,\n DG_FLAG_INVISIBLE = 0x0080,\n DG_FLAG_AMBIENT = 0x0100,\n DG_FLAG_IRTEXTURE = 0x0200,\n};\nenum DG_PRIM_FLAGS\n{\n DG_PRIM_VISIBLE = 0x0000,\n DG_PRIM_INVISIBLE = 0x0100,\n DG_PRIM_UNKNOWN_200 = 0x0200,\n DG_PRIM_UNKNOWN_400 = 0x0400,\n DG_PRIM_SORTONLY = 0x0800,\n DG_PRIM_ONEFREE = 0x1000,\n DG_PRIM_FREEPACKS = 0x2000,\n};\nstatic inline u_long LLOAD( void *from )\n{\n return *(u_long *)from;\n}\nstatic inline void LSTORE( u_long from, void *to )\n{\n *(u_long *)to = from;\n}\nstatic inline u_short SLOADL( void *from )\n{\n return *(u_short *)from;\n}\nstatic inline void SSTOREL( u_short from, void *to )\n{\n *(u_short *)to = from;\n}\nstatic inline void LCOPY( void *s1, void *d1 )\n{\n *(u_long *)d1 = *(u_long *)s1;\n}\nstatic inline void LCOPY2( void *s1, void *d1, void *s2, void *d2 )\n{\n u_long r1, r2;\n r1 = *(u_long *)s1;\n r2 = *(u_long *)s2;\n *(u_long *)d1 = r1;\n *(u_long *)d2 = r2;\n}\nstatic inline void SCOPYL( void *s1, void *d1 )\n{\n *(u_short *)d1 = *(u_short *)s1;\n}\nstatic inline void SCOPYL2( void *s1, void *d1, void *s2, void *d2 )\n{\n u_short r1, r2;\n r1 = *(u_short *)s1;\n r2 = *(u_short *)s2;\n *(u_short *)d1 = r1;\n *(u_short *)d2 = r2;\n}\nstatic inline void DG_VisibleObjs( DG_OBJS *objs )\n{\n objs->flag &= ~DG_FLAG_INVISIBLE;\n}\nstatic inline void DG_InvisibleObjs( DG_OBJS *objs )\n{\n objs->flag |= DG_FLAG_INVISIBLE;\n}\nstatic inline void DG_GroupObjs( DG_OBJS *objs, int group_id )\n{\n objs->group_id = group_id;\n}\nstatic inline void DG_GroupPrim( DG_PRIM *prim, int group_id )\n{\n prim->group_id = group_id;\n}\nstatic inline void DG_VisiblePrim( DG_PRIM *prim )\n{\n prim->type &= ~DG_PRIM_INVISIBLE;\n}\nstatic inline void DG_InvisiblePrim( DG_PRIM *prim )\n{\n prim->type |= DG_PRIM_INVISIBLE;\n}\nstatic inline void DG_UnShadeObjs( DG_OBJS *objs )\n{\n objs->flag &= ~DG_FLAG_SHADE;\n}\nstatic inline void DG_UnBoundObjs( DG_OBJS *objs )\n{\n objs->flag &= ~DG_FLAG_BOUND;\n}\nstatic inline void DG_UnGBoundObjs( DG_OBJS *objs )\n{\n objs->flag &= ~DG_FLAG_GBOUND;\n}\nstatic inline void DG_GBoundObjs( DG_OBJS *objs )\n{\n objs->flag |= DG_FLAG_GBOUND;\n}\ntypedef void (*TChanl_Fn)(DG_CHNL *pOt, int idx);\nvoid DG_StartDaemon_8001F284(void);\nDG_PRIM *DG_MakePrim_8001BABC( int type, int prim_count, int chanl, SVECTOR *pVec, RECT *pRect );\nint DG_QueuePrim_80018274( DG_PRIM *pPrim );\nvoid DG_DequeuePrim_800182E0( DG_PRIM *pObjs );\nvoid DG_FreePrim_8001BC04( DG_PRIM *pPrim );\nvoid DG_PutPrim_8001BE00( MATRIX *matrix );\nvoid DG_Init_DrawEnv_80018384(\n  DRAWENV *pDrawEnv, int clipX1, int clipY1, int clipX2, int clipY2 );\nvoid DG_SetPos_8001BC44( MATRIX *matrix );\nvoid DG_SetPos2_8001BC8C( SVECTOR *svector, SVECTOR *svector2 );\nvoid DG_PutVector_8001BE48( SVECTOR *svector, SVECTOR *svector2, int count );\nvoid DG_FreeObjPacket_8001AAD0( DG_OBJ *pObj, int idx );\nvoid DG_FreeObjsPacket_8001ABA8( DG_OBJS *pObjs, int idx );\nvoid DG_MovePos_8001BD20( SVECTOR *svector );\nvoid DG_RotatePos_8001BD64( SVECTOR *svector );\nvoid DG_RotVector_8001BE98( SVECTOR *svector, SVECTOR *svector2, int count );\nvoid DG_MatrixRotZYX_8001E92C( MATRIX *mat, SVECTOR *vec );\nvoid DG_MatrixRotYXZ_8001E734( MATRIX *pMatrix, SVECTOR *pVector );\nvoid DG_TransposeMatrix_8001EAD8( MATRIX *in, MATRIX *out );\nvoid DG_ReflectVector_8001ECB4(SVECTOR *pVecIn, SVECTOR *pVecTranslation, SVECTOR *pVecOut);\nvoid DG_ReflectMatrix_8001EDCC(SVECTOR *pVector, MATRIX *pMatrixIn, MATRIX *pMatrixOut);\nint DG_LoadInitPcx_8001F920( unsigned char *pFileData, int fileNameHashed );\nint DG_LoadInitKmd_8001F4EC( unsigned char *pFileData, int fileNameHashed );\nint DG_LoadInitLit_8001F6B4( unsigned char *pFileData, int fileNameHashed );\nint DG_LoadInitNar_8001F5F8( unsigned char *pFileData, int fileNameHashed );\nint DG_LoadInitOar_8001F610( unsigned char *pFileData, int fileNameHashed );\nint DG_LoadInitKmdar_8001FAD0( unsigned char *pFileData, int fileNameHashed );\nint DG_LoadInitImg_8001F644( unsigned char *pFileData, int fileNameHashed );\nint DG_LoadInitSgt_8001F670( unsigned char *pFileData, int fileNameHashed );\nvoid DG_ClearTmpLight_8001A0E4();\nint DG_SetTmpLight_8001A114( SVECTOR *a1, int a2, int a3 );\nvoid DG_InitLightSystem_80019F40( void );\nvoid DG_SetAmbient_80019F80( int param_1, int param_2, int param_3 );\nint DG_GetLightMatrix_8001A3C4( SVECTOR *vec, MATRIX *mtx );\nint DG_GetLightMatrix2_8001A5D8( SVECTOR *vec, MATRIX *mtx );\nvoid DG_ResetFixedLight_8001A06C( void );\nDG_TEX *DG_GetTexture_8001D830( int name );\nint DG_SearchTexture_8001D778( int hash, DG_TEX **ppFound );\nvoid DG_InitTextureSystem_8001D808();\nvoid DG_ResetResidentTexture_8001DBEC();\nvoid DG_SetMainLightCol_8001A048( int r, int g, int b );\nvoid DG_SetMainLightDir_80019FF8( int x, int y, int z );\nvoid *DG_AllocDividePackMem_800190A0( GV_Heap *heap, GV_MemoryAllocation **alloc_list, int *size );\nint DG_AllocPacks_8001A670( DG_OBJ *pObj, int idx );\nint DG_DrawSyncResetGraph_8001F014( void );\nint DG_MakeObjPacket_8001AA50( DG_OBJ *pPrim, int idx, int flags );\nint DG_MakeObjs_helper_80031710( DG_MDL *pMesh );\nvoid DG_80017194( void );\nvoid DG_800174DC( MATRIX *matrix );\nvoid DG_8001F1DC( void );\nvoid DG_BoundChanl_helper2_80018E5C( DG_CHNL *chnl, int idx );\nvoid DG_ClearChanlSystem_80017E9C( int which );\nvoid DG_ClearResidentTexture_8001DB10( void );\nvoid DG_Clip_80017594( RECT *pClipRect, int dist );\nvoid DG_DrawOTag_80017E4C( int activeBuffer );\nvoid DG_FreePreshade_80032110( DG_OBJS *pPrim );\nvoid DG_InitChanlSystem_80017B98( int width );\nvoid DG_InitDispEnv_800170F0( int x, short y, short w, short h, int clipH );\nvoid DG_InitPolyGT4Pack_8001A6E4( DG_OBJ *pObj, int idx );\nvoid DG_SetTexture_8001D880( int hash, int tp, int abr, DG_Image *a, DG_Image *b, int param_6 );\nint DG_MakePreshade_80031F04( DG_OBJS *pPrim, DG_Light *pLights, int numLights );\nvoid DG_PutObjs_8001BDB8( DG_OBJS *objs );\nvoid DG_ReloadPalette_8001FC58( void );\nvoid DG_RenderPipeline_800172A8( void );\nvoid DG_RenderPipeline_80018028( int idx );\nvoid DG_RenderPipeline_Init_8001715C( void );\nvoid DG_ResetExtPaletteMakeFunc_800791E4( void );\nvoid DG_ResetPaletteEffect_80078FF8( void );\nvoid DG_Set_RGB_800184F4( int r, int b, int g );\nvoid DG_StorePaletteEffect_80078F30( void );\nvoid DG_StorePalette_8001FC28( void );\nvoid DG_Update1_8001F1BC( void );\nvoid DG_Update2_8001F078( GV_ACT *pActor );\nvoid DG_WriteObjPacketRGB_8001A9B8( DG_OBJ *pDGObj, int idx );\nvoid DG_WriteObjPacketUV_8001A774( DG_OBJ *pObj, int idx );\nint DG_PointCheckOne_8001C18C( DVECTOR *line );\nvoid DG_OffsetDispEnv_80017784( int offset );\nvoid DG_PutDrawEnv_From_DispEnv_80017890();\nvoid DG_TextureCacheInit_8001F25C( void );\nDG_OBJS *DG_MakeObjs_80031760( DG_DEF *pFileData, int flag, int chanl );\nint DG_QueueObjs_80018178( DG_OBJS *pPrim );\nvoid DG_DequeueObjs_800181E4( DG_OBJS *objs );\nvoid DG_FreeObjs_800318D0( DG_OBJS *pObjs );\nvoid DG_SaveTexureCacheToResidentMem_8001DB20();\nvoid DG_FreeObjectQueue_800183D4();\nvoid DG_800172D0( DG_CHNL *chnl, SVECTOR *svec, SVECTOR *svec2, int camera_property );\nvoid DG_ClipDispEnv_800177EC(int x, int y);\nvoid DG_PointCheck_8001BF34(SVECTOR *svector, int n_points);\nvoid DG_GetLightVector_8001A1A8(VECTOR *in_vec, int divisor, SVECTOR *out_vec);\nvoid Prim_lighting_80031954(SVECTOR *pVerts, int numVerts, DG_LitVertex *pOut, DG_Light *pLights, int numLights);\nvoid kmd_file_handler_link_vertices_to_parent_8001F3CC( DG_MDL *, DG_MDL *);\nvoid sub_8001C248( DG_OBJS *objs, int n_obj );\nvoid sub_8001C460( DG_OBJS *objs, int n_obj );\nvoid sub_8001C5CC( DG_OBJS *objs, int n_obj );\nvoid sub_8001C708( DG_OBJS *objs, int n_obj );\nSVECTOR *sub_8001AD28( SVECTOR *a1, int count );\nchar *sub_8001B1E8( DG_PRIM *prim, char *ptr, int count );\nvoid Prim_80031B00(DG_MDL *pMdl, DG_Light *pLights, int numLights);\nCVECTOR * Prim_80031B88(DG_MDL *pMdl, CVECTOR *pRgbs);\nCVECTOR * DG_MakePreshade_helper_80031BD4(DG_MDL *pMdl, CVECTOR *pRgbs, DG_OBJS *pObjs);\nint Prim_Calc_CVECTOR_len_80031ED4(DG_DEF *pDef);\nvoid DG_Trans_Chanl_8001E3C0(DG_CHNL *pChannel, int idx);\nvoid DG_Trans_Chanl_helper_8001DF48(DG_OBJ *pObj, int idx);\nPOLY_GT4 * DG_Trans_Chanl_helper_helper_8001DD90(unsigned int *pFaceIndices, POLY_GT4 *pPoly, int nPacks);\nunsigned int DG_Trans_Chanl_helper_helper_helper_8001DC90(unsigned int index, POLY_GT4 *pPoly);\nvoid DG_8001844C();\nint sub_800321AC(int a1, int a2);\nvoid sub_8003214C(SVECTOR *pVec, int *pRet);\nstatic inline DG_CHNL *DG_Chanl( int idx )\n{\n    extern DG_CHNL DG_Chanls_800B1800[ 3 ];\n    return &DG_Chanls_800B1800[ idx + 1 ];\n}\nvoid DG_Screen_Chanl_8001CEE0(DG_CHNL *pOt, int idx);\nvoid DG_BoundChanl_800189A4(DG_CHNL *pOt, int idx);\nvoid DG_Trans_Chanl_8001E3C0(DG_CHNL *pOt, int idx);\nvoid DG_Shade_Chanl_8001D324(DG_CHNL *pOt, int idx);\nvoid DG_PrimChanl_8001B66C(DG_CHNL *pOt, int idx);\nvoid DG_DivideChanl_80019D44(DG_CHNL *pOt, int idx);\nvoid DG_Sort_Chanl_8001D5C8(DG_CHNL *pOt, int idx);\nstatic inline DG_PRIM *DG_GetPrim( int type, int prim_count, int chanl, SVECTOR *vec, RECT *pRect )\n{\n extern int GM_CurrentMap_800AB9B0;\n DG_PRIM *prim;\n prim = DG_MakePrim_8001BABC( type, prim_count, chanl, vec, pRect );\n if ( prim )\n {\n  DG_QueuePrim_80018274( prim );\n  DG_GroupPrim( prim, GM_CurrentMap_800AB9B0 );\n }\n return prim;\n}\ntypedef struct TARGET\n{\n    unsigned short field_0_flags;\n    unsigned short field_2_side;\n    unsigned short field_4_map;\n    unsigned short field_6_flags;\n    SVECTOR field_8_vec;\n    SVECTOR field_10_size;\n    int *field_18;\n    SVECTOR *field_1C;\n    MATRIX *field_20;\n    short field_24;\n    short field_26_hp;\n    short field_28;\n    short field_2A;\n    SVECTOR field_2C_vec;\n    SVECTOR field_34_vec;\n    short field_3C;\n    short field_3E;\n    short field_40;\n    short field_42;\n    int field_44;\n} TARGET;\nenum\n{\n    TARGET_STALE = 0,\n    TARGET_AVAIL = 1,\n    TARGET_CAPTURE = 2,\n    TARGET_POWER = 4,\n    TARGET_PUSH = 8,\n    TARGET_SEEK = 16,\n    TARGET_DOWN = 32,\n    TARGET_C4 = 64,\n    TARGET_TOUCH = 128,\n    TARGET_PUSH_OVER = 256,\n    TARGET_NO_LOCKON = 512,\n    TARGET_C4_CLEAR = 1024,\n    TARGET_DIE = 2048,\n};\nenum\n{\n    NO_SIDE = 0,\n    PLAYER_SIDE = 1,\n    ENEMY_SIDE = 2,\n    BOTH_SIDE = 3\n};\nint GM_Target_8002E1B8(SVECTOR *pVec, SVECTOR *pVec1, int map_bit, SVECTOR *pVec2, int side);\nvoid GM_Targets_Reset_8002D3F0(void);\nvoid GM_FreeTarget_8002D4B0(TARGET *pTarget);\nvoid GM_SetTarget_8002DC74(TARGET *pTarget, int targetFlags, int whichSide, SVECTOR *pSize);\nvoid GM_Target_8002DCCC(TARGET *pTarget, int a2, int a3, int hp, int a5, SVECTOR *a6);\nvoid GM_Target_SetVector_8002D500(TARGET *pTarget, SVECTOR *pVec);\nvoid GM_Target_8002E374(int *ppDownCount, TARGET **ppTargets);\nTARGET *GM_AllocTarget_8002D400(void);\nint sub_8002D7DC(TARGET *pTarget);\nint sub_8002D208(TARGET *pTarget, TARGET *a2);\nvoid sub_8002DD1C(SVECTOR *a1, SVECTOR *a2, TARGET *a3);\nint sub_8002DDE0(SVECTOR *a1, SVECTOR *a2, TARGET *a3, SVECTOR *a4);\nvoid GM_Target_8002DCB4(TARGET *pTarget, int a2, int a3, int *a4, SVECTOR *a5);\nTARGET *GM_C4Target_8002D620(TARGET *pTarget);\nTARGET *GM_CaptureTarget_8002D530(TARGET *pTarget);\ntypedef struct _KCB\n{\n    char char_arr[8];\n    RECT *rect_data;\n    RECT font_rect;\n    void *font_buffer;\n    short width_info;\n    short short1;\n    short height_info;\n    short short3;\n    RECT font_clut_rect;\n    void *font_clut_buffer;\n} KCB;\ntypedef struct RubiRes\n{\n    char field_0;\n    char field_1[9];\n} RubiRes;\nvoid font_set_font_addr_80044BC0(int arg1, void *data);\nvoid font_update_8004695C(KCB *kcb);\nvoid font_clear_800468FC(KCB *kcb);\nint font_get_buffer_size_80044F38(KCB *kcb);\nint font_init_kcb_80044BE0(KCB *kcb, RECT *rect_data, short x, short y);\nvoid font_set_buffer_80044FD8(KCB *kcb, void *buffer);\nvoid font_set_color_80044DC4(KCB *kcb, int code, int fore, int back);\nint font_set_kcb_80044C90(KCB *kcb, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6);\nvoid font_clut_update_80046980(KCB *kcb);\nvoid font_load_80044A9C(void);\nunsigned int font_draw_string_80045D0C(KCB *param_1, unsigned int param_2, int param_3, char *param_4, int param_5);\nvoid *font_get_buffer_ptr_80044FE8(KCB *kcb);\nenum TextConfig_Flags\n{\n    TextConfig_Flags_eRightAlign_01 = 0x01,\n    TextConfig_Flags_eCentreAlign_02 = 0x02,\n    TextConfig_Flags_eLargeFont_10 = 0x10,\n    TextConfig_Flags_eSemiTransparent_20 = 0x20,\n};\ntypedef struct TextConfig\n{\n    int xpos;\n    int ypos;\n    int flags;\n    int colour;\n} TextConfig;\nextern struct TextConfig gMenuTextConfig_8009E2E4;\ntypedef struct Menu_Triangle\n{\n    short field_0_x0;\n    short field_2_y0;\n    short field_4_x1;\n    short field_6_y1;\n    short field_8_x2;\n    short field_A_y2;\n    unsigned int field_C_rgb;\n} Menu_Triangle;\ntypedef struct WeaponCreateEntry\n{\n    void *mCreateActorFn;\n    void *mStateFn;\n} WeaponCreateEntry;\nstruct face_simple_anim;\nstruct face_full_anim;\ntypedef union face_anim {\n    struct face_simple_anim *simple_anim;\n    struct face_full_anim *full_anim;\n    void *raw_ptr;\n    int intptr;\n} face_anim;\ntypedef struct face_header\n{\n    unsigned short field_0_anim_type;\n    unsigned short field_2_code;\n    int field_4;\n    face_anim field_8_anim_data;\n} face_header;\ntypedef struct faces_group\n{\n    int field_0_face_count;\n    face_header field_4_faces[0];\n    char actual_data[0];\n} faces_group;\ntypedef struct face_anim_image\n{\n    char field_0_xpos;\n    char field_1_ypos;\n    char field_2_width;\n    char field_3_height;\n    char field_4_image[0];\n} face_anim_image;\ntypedef struct face_simple_anim\n{\n    unsigned char *field_0_palette;\n    face_anim_image *field_4_face;\n    face_anim_image *field_8_eyes[3];\n    face_anim_image *field_14_mouth[3];\n} face_simple_anim;\ntypedef struct face_full_anim_frame\n{\n    unsigned char *field_0_palette;\n    face_anim_image *field_4_image;\n    short field_8;\n    short field_10;\n} face_full_anim_frame;\ntypedef struct face_full_anim\n{\n    int field_0_frame_count;\n    face_full_anim_frame field_4_frames[0];\n} face_full_anim;\ntypedef struct mem_card_block\n{\n    char field_0_name[20];\n    char field_14;\n    char field_15;\n    unsigned short field_16;\n    int field_18_size;\n} mem_card_block;\ntypedef struct mem_card\n{\n    unsigned char field_0_card_idx;\n    unsigned char field_1_last_op;\n    char field_2_file_count;\n    char field_3_free_blocks;\n    mem_card_block field_4_blocks[15];\n} mem_card;\ntypedef void (*TMemCardFunc)(int);\nvoid memcard_init_80024E48();\nvoid memcard_exit_800250C4();\nint memcard_check_80024A54(int idx);\nint memcard_easy_format_test_800246C0(int hCard);\nvoid memcard_reset_status_80024A3C();\nvoid memcard_set_sw_hw_card_fns_8002469C();\nvoid memcard_load_files_80024960(int);\nint memcard_loaddir_800247E8(int idx, int *pFreeBlockCount);\nvoid memcard_hwcard_do_op_800244DC(int op);\nvoid memcard_hwcard_end_io_800244FC();\nvoid memcard_hwcard_end_write_80024524();\nvoid memcard_hwcard_timeout_8002455C();\nvoid memcard_hwcard_new_80024594();\nvoid memcard_hwcard_read_write_handler_8002546C(int op);\nvoid memcard_swcard_do_op_800244EC(int op);\nvoid memcard_swcard_end_io_800245CC();\nvoid memcard_swcard_end_write_800245F4();\nvoid memcard_swcard_timeout_8002462C();\nvoid memcard_swcard_new_80024664();\nvoid memcard_read_8002569C(int idx, const char *pFilename, int seekPos, char *pBuffer, int bufferSize);\nint memcard_get_status_800257B0();\nvoid read_800995AC(int fd, char *buf, int size);\ntypedef struct\n{\n    char *field_0_weapon_name;\n    int field_4_rpk_idx;\n} menu_weapon_rpk_info;\ntypedef struct RadioMemory\n{\n    short frequency;\n    char name[18];\n} RadioMemory;\ntypedef struct radio_table_entry\n{\n  int field_0_contactFrequency;\n  int field_4_radioTableCode;\n} radio_table_entry;\ntypedef struct radio_table\n{\n  radio_table_entry field_0_entries[8];\n} radio_table;\ntypedef struct menu_chara_struct_sub\n{\n  short field_0_animState;\n  unsigned short field_2_chara;\n  short field_4;\n  short field_6;\n  short field_8_animFrameNum;\n  short field_A;\n  short field_C;\n  short field_E;\n  short field_4C_leftCodecPortraitFrame;\n  short field_12;\n  face_anim field_14_face_anim;\n} menu_chara_struct_sub;\ntypedef struct menu_chara_struct\n{\n    int field_0_state;\n    int field_4;\n    char *field_8_radioDatFragment;\n    unsigned char *field_C_pScript;\n    void *field_10_subtitles;\n    int field_14_bInExecBlock;\n    unsigned short field_18;\n    short field_1A_index;\n    char *field_1C_radioDatFragment;\n    faces_group *field_20_pFacesGroup;\n    void *field_24_pImgData256;\n    int *field_28_pStack;\n    short *field_2C_pSaveText;\n    int field_30_face_count;\n    face_header *field_34_faces;\n    int field_38;\n    menu_chara_struct_sub field_3C[2];\n} menu_chara_struct;\ntypedef struct PANEL_TEXTURE\n{\n    unsigned char *field_0_pixels;\n    unsigned char *field_4_word_ptr_pixels;\n    signed char field_8_bufid;\n    signed char field_9_xofs;\n    signed char field_A_yofs;\n    char field_B_pad;\n unsigned long field_C_uvclut;\n    short field_10_w;\n    short field_12_h;\n} PANEL_TEXTURE;\ntypedef struct menu_0x14\n{\n  short field_0_bUnknown;\n  short field_2_bTaskWup;\n  int field_4_chara;\n  int field_8_code;\n  int field_C;\n  menu_chara_struct *field_10_pCharaStru;\n} menu_0x14;\ntypedef struct array_800BD748_child\n{\n    char field_0_u;\n    char field_1_v;\n    short field_2_clut;\n    PANEL_TEXTURE *field_4_panelTexture;\n    RECT field_8_rect1;\n    RECT field_10_rect2;\n} array_800BD748_child;\nvoid menuman_init_80038954(void);\nstruct Actor_MenuMan;\nstruct Menu_Inventory;\nstruct PANEL;\nstruct PANEL_CONF;\ntypedef void (*PANEL_CONF_update)(struct Actor_MenuMan *, unsigned int *, int, int, struct PANEL *);\ntypedef void (*PANEL_CONF_fn2)(struct PANEL_CONF *, int, int*, int*);\ntypedef struct PANEL_CONF\n{\n    short field_0_xOffset;\n    short field_2_yOffset;\n    int field_4_input;\n    int field_8;\n    int field_C;\n    PANEL_CONF_fn2 field_10_pFn2;\n    PANEL_CONF_fn2 field_14_pFn2;\n    PANEL_CONF_update field_18_pFnUpdate;\n} PANEL_CONF;\ntypedef void (*TMenuSaveModeDataUnknownFn)(char *, char *);\ntypedef struct menu_save_mode_data\n{\n  char field_0[2];\n  char field_2;\n  char field_3;\n  char *field_4_name;\n  void *field_8;\n  TMenuSaveModeDataUnknownFn field_C;\n  void *field_10;\n} menu_save_mode_data;\nstruct Menu_Item_Unknown;\ntypedef void (*TMenuItemUnknownFn)(struct Menu_Item_Unknown *, int);\ntypedef struct Menu_Item_Unknown_Main\n{\n    int field_0_array_count;\n    int field_4_selected_idx;\n    int field_8;\n    int field_C;\n    int field_10;\n    int field_14_fn_ctx;\n    int field_18;\n    TMenuItemUnknownFn field_1C_fn;\n} Menu_Item_Unknown_Main;\ntypedef struct PANEL\n{\n    short field_0_id;\n    short field_2_num;\n    short field_4_pos;\n    short field_6_current;\n} PANEL;\ntypedef struct Menu_Item_Unknown\n{\n    Menu_Item_Unknown_Main field_0_main;\n    PANEL field_20_array[0];\n} Menu_Item_Unknown;\ntypedef struct Menu_Inventory\n{\n    PANEL field_0_current;\n    PANEL_CONF *field_8_panel_conf;\n    Menu_Item_Unknown *field_C_alloc;\n    char field_10_state;\n    signed char field_11;\n    unsigned short field_12_flashingAnimationFrame;\n} Menu_Inventory;\ntypedef struct\n{\n DR_ENV dr_env[ 2 ];\n RECT clip_rect;\n DR_ENV org_env[ 2 ];\n short pos_x;\n short pos_y;\n char display_flag;\n char prev_mode;\n short counter;\n} RADAR_T;\nstruct Actor_MenuMan;\ntypedef void (*TMenuUpdateFn)(struct Actor_MenuMan *, unsigned char *);\ntypedef void (*ButtonStates)(void);\ntypedef struct MenuPrimBuffer\n{\n    unsigned char *mFreeLocation;\n    unsigned char *mOt;\n    unsigned char *mOtEnd;\n} MenuPrimBuffer;\ntypedef struct MenuPrim\n{\n    MenuPrimBuffer mPrimBuf;\n    unsigned char *mPrimPtrs[2];\n} MenuPrim;\ntypedef struct _Menu_rpk_item\n{\n    char field_0_x;\n    char field_1_y;\n    char field_2_w;\n    char field_3_h;\n    unsigned char field_4_pixel_ptr[0];\n} Menu_rpk_item;\ntypedef struct\n{\n    unsigned char field_0_count1;\n    unsigned char field_1_count2;\n    short pad;\n    Menu_rpk_item *items[0];\n} RpkHeader;\ntypedef struct BarConfig\n{\n    const char *field_0_text;\n    unsigned char field_4_rgb_left[3];\n    unsigned char field_7_rgb_right[3];\n    short field_A_bar_height;\n} BarConfig;\ntypedef struct MenuMan_MenuBars\n{\n    u_char field_0_state;\n    u_char field_1_O2_hp;\n    short int field_2_bar_x;\n    short int field_4_bar_y;\n    short int field_6_snake_hp;\n    short int field_8;\n    short int field_A_k10_decrement;\n} MenuMan_MenuBars;\nstruct Actor_MenuMan;\ntypedef void (*TInitKillFn)(struct Actor_MenuMan *);\nenum\n{\n    MENUFLAGS_CAN_OPEN_RIGHT_MENU = 0x2,\n    MENUFLAGS_CAN_OPEN_LEFT_MENU = 0x4,\n    MENUFLAGS_CAN_SEE_RADAR = 0x8,\n    MENUFLAGS_CAN_OPEN_CODEC = 0x10\n};\nenum\n{\n MENU_LIFE = 0,\n MENU_WEAPON = 1,\n MENU_ITEM = 2,\n MENU_RADAR = 3,\n MENU_RADIO = 4,\n MENU_CARD = 5,\n MENU_JIMAKU = 6,\n MENU_VIEWER = 7,\n};\ntypedef unsigned char MenuFlags;\ntypedef struct Actor_MenuMan\n{\n    GV_ACT field_0_actor;\n    MenuPrim *field_20_otBuf;\n    GV_PAD *field_24_pInput;\n    MenuFlags field_28_flags;\n    char field_29;\n    unsigned char field_2A_state;\n    char field_2B;\n    TMenuUpdateFn field_2C_modules[ 8 ];\n    DR_ENV field_4C_drawEnv[ 2 ];\n    RADAR_T field_CC_radar_data;\n    Menu_Inventory field_1DC_menu_item;\n    Menu_Inventory field_1F0_menu_weapon;\n    MenuMan_MenuBars field_204_bars;\n    short field_210;\n    short field_212;\n    KCB *field_214_font;\n    menu_chara_struct *field_218;\n    int field_21C;\n} Actor_MenuMan;\ntypedef struct UnkJimakuStruct\n{\n    char field_0_active;\n    char field_1_type;\n    short field_2_timer;\n    short field_4_x;\n    short field_6_y;\n    short field_8_w;\n    short field_A_h;\n    KCB field_C_font;\n    char *field_38_str;\n    int field_3C;\n    char *field_40;\n} UnkJimakuStruct;\nPANEL_TEXTURE *menu_weapon_get_weapon_rpk_info_8003DED8(int weaponIdx);\nMenu_rpk_item **menu_rpk_init_8003DD1C(const char *pFileName);\nvoid menu_restore_nouse_80043470();\nPANEL_TEXTURE *menu_rpk_8003B5E0(int idx);\nvoid sub_8003CB98(struct Actor_MenuMan *a1);\nint menu_radio_do_file_mode_8004C418(int param_1, GV_PAD *pPad);\nvoid sub_8003CFE0(PANEL_TEXTURE *images, int index);\nvoid draw_life_defaultX_8003F408(MenuPrim *ot, int xpos, int ypos, int a4, int a5, BarConfig *pConfig);\nvoid draw_life_8003F464(MenuPrim *prim, long x, long y, long rest, long now, long max, BarConfig *pBarConfig);\nvoid menu_draw_bar_8003ED4C(MenuPrim *pBuffer, long x, long y, long rest, long now, long max, BarConfig *pConfig);\nvoid menu_InitRadioTable_80049644();\nvoid menu_init_sprt_8004AE14(SPRT *pSprt);\nvoid move_coord_8004A494(int *arr, int len);\nvoid menu_ResetSystem_80038A88();\nvoid menu_SetRadarScale_80038E28(int);\nvoid menu_StartDeamon_80038A20(void);\nvoid menu_Text_Init_80038B98(void);\nvoid menu_Text_PrimUnknown_80038BB4(void);\nvoid menu_init_nouse_800434A8(void);\nvoid menu_init_rpk_item_8003DDCC(PANEL_TEXTURE *pUnk, int imgIdx, int palIdx);\nint menu_draw_num_80038D10(int number);\nvoid menu_radio_draw_face_helper_800470F4(int idx);\nvoid menu_radio_draw_face_helper2_800486F4(menu_chara_struct_sub *pSub, int idx);\nvoid menu_radio_draw_face_helper3_800487DC(menu_chara_struct *pStru, int idx);\nvoid menu_radio_draw_face_helper4_80048868(MenuPrim *prim, menu_chara_struct_sub *a2, int idx);\nvoid menu_radio_draw_face_helper5_8004896C(MenuPrim *prim, menu_chara_struct_sub *a2, int idx);\nvoid menu_radio_draw_face_helper6_800486A0(menu_chara_struct_sub *a1, int idx);\nvoid menu_item_helper_8003B8F0(struct Actor_MenuMan *pActor, unsigned int *pOt, int xpos, int ypos, Menu_Inventory *pMenuSub);\nvoid menu_item_update_8003C95C(struct Actor_MenuMan *menuMan, unsigned int *param_2);\nvoid menu_item_update_helper2_8003BF1C(Actor_MenuMan *pActor, unsigned int *arg1);\nvoid menu_item_update_helper3_8003C24C(Menu_Item_Unknown *, unsigned short);\nvoid menu_item_update_helper4_8003C4EC();\nvoid menu_inventory_right_init_items_8003DE50(void);\nvoid menu_jimaku_act_80048FD4(Actor_MenuMan *pActor, unsigned int *pOt);\nvoid menu_JimakuWrite_800494E8(char *str, int frames);\nvoid menu_number_draw_80042988(MenuPrim *pOt, TextConfig *pSettings, int number);\nvoid menu_number_draw_string2_80043220(MenuPrim *pGlue, TextConfig *pTextConfig, const char *str);\nvoid menu_number_draw_string_80042BF4(MenuPrim *pGlue, TextConfig *pTextConfig, const char *str);\nvoid menu_weapon_init_helper_8003E0E8(Actor_MenuMan *param_1, unsigned int *param_2, int param_3, int param_4, PANEL *param_5);\nvoid menu_weapon_unknown_8003DEB0(void);\nvoid menu_weapon_update_8003E990(struct Actor_MenuMan *menuMan, unsigned char *param_2);\nint menu_8003DA9C(struct Menu_Inventory *pMenu, GV_PAD *pPad);\nvoid menu_sub_8003B568(void);\nint sub_8003DAFC(Menu_Inventory *pLeftRight, GV_PAD *pPad);\nint sub_8003D52C(void);\nvoid sub_8003D6CC(Menu_Inventory *pLeftRight, GV_PAD *pPad);\nvoid sub_8003DA60(struct Actor_MenuMan *pActor, unsigned int *pOt, Menu_Inventory *pLeftRight, int off1, int off2);\nvoid menu_viewer_init_80044A70(Actor_MenuMan *);\nvoid menu_viewer_kill_80044A90(Actor_MenuMan *pActor);\nvoid menuman_act_800386A4(Actor_MenuMan *);\nvoid menuman_kill_800387E8(Actor_MenuMan *);\nvoid sub_8003CE40(PANEL_TEXTURE *, int);\nvoid sub_8003D6A8(struct Menu_Inventory *pMenuLeft, int bIsRight, void *pUpdateFn);\nvoid sub_8003EBDC(struct Actor_MenuMan *a1);\nvoid sub_800469A4(KCB *param_1, char *param_2);\nvoid menu_radio_load_palette_80046B74(unsigned char *image, int idx);\nvoid sub_80046B10(face_anim_image *image, int idx);\nvoid sub_80046BD8(int idx);\nint sub_80046C90(menu_chara_struct_sub *pSub, int idx, face_full_anim *pFullAnim, int pFrameNum);\nvoid menuman_Reset_800389A8(void);\nvoid menu_life_update_8003F530(Actor_MenuMan *pActor, unsigned char *pOt);\nvoid draw_player_life_8003F4B8(MenuPrim *prim, long x, long y);\nvoid init_file_mode_helper_8004A424(int param_1);\nvoid init_file_mode_helper_helper_80049EDC(void);\nvoid init_file_mode_helper2_8004A800(void);\nvoid sub_80047CB4(menu_chara_struct *unknown);\nvoid NewJimakuStr_8004955C(char *str, int int_1);\nvoid NewJimaku_800495A8(void);\nvoid menu_ClearRadioTable_8004967C(void);\nvoid menu_RadioCall_80042730(int param_1, int param_2, int param_3);\nvoid menu_ResetCall_80042814(void);\nvoid menu_SetRadioCallbackProc_8004283C(int param_1);\nvoid menu_SetRadioBaseCall_80049764(int contactFrequency, int radioTableCode);\nvoid menu_SetRadioOverCall_80049794(int contactFrequency, int radioTableCode);\nvoid menu_InitRadioMemory_8004E0EC(void);\nTILE *menu_render_rect_8003DB2C(MenuPrim *pOt, int x, int y, int w, int h, int rgb);\nMenu_rpk_item *menu_rpk_get_img_8003DDB4(int id);\nMenu_rpk_item *menu_rpk_get_pal_8003DD9C(int id);\nvoid menu_JimakuClear_80049518(void);\nvoid menu_Text_XY_Flags_80038B34(int xpos, int ypos, int flags);\nvoid menu_Color_80038B4C(int r, int g, int b);\nvoid menu_radio_codec_start_task_80047C3C(void);\nvoid menu_life_init_8003F7E0(Actor_MenuMan *pActor);\nRadioMemory *menu_radio_table_find_8004D380(int toFind);\nRadioMemory *menu_radio_table_next_free_8004D3B8(void);\nunsigned char *menu_gcl_read_word_80047098(int *pOut, unsigned char *pScript);\nvoid menu_SetRadioMemory_8004E110(int varId, const char *pVarName);\nvoid menu_gcl_set_radio_var_80047768(menu_chara_struct *unknown, unsigned char *pScript);\nunsigned char *menu_gcl_exec_block_800478B4(menu_chara_struct *unknown, unsigned char *pScript);\nint menu_item_IsItemDisabled_8003B6D0(int item_idx);\nvoid menu_ResetTexture_80038A00(void);\nvoid menu_jimaku_init_helper_800493F8(KCB *kcb);\nvoid menu_font_kill_helper_8003F50C(void);\nvoid menu_radio_8004D2FC(menu_save_mode_data *pSaveMode);\nint menu_radio_8004D334(GV_PAD *pPad);\nvoid menu_radio_8004D35C(void);\nvoid menu_panel_free_8003D184(Menu_Item_Unknown *pPanel);\nvoid menu_font_kill_8003FC0C(void);\nvoid AssignXY_8003D1A8(PANEL *pArray, int idx, short amount);\nint menu_panel_8003D2BC(Menu_Item_Unknown *, int);\nvoid sub_8003D520(void);\nint sub_8003F84C(int);\nvoid sub_8003F97C(char *param_1);\nvoid sub_8004CF20(int code, char **param_2, char **param_3);\nvoid sub_80048124(void);\nvoid sub_800469F0(menu_chara_struct *pStru);\nvoid menu_8003F9B4(Actor_MenuMan *pActor, unsigned int *pOt, const char *str);\nvoid sub_8003D594(PANEL_CONF *pPanelConf, int pos, int *xoff, int *yoff);\nvoid sub_8003D5F0(PANEL_CONF *pPanelConf, int pos, int *xoff, int *yoff);\nvoid sub_8003D64C(PANEL_CONF *pPanelConf, int pos, int *xoff, int *yoff);\nvoid sub_8004D008(char *outStr, mem_card *pMemcard, int arg2, int arg3);\nvoid sub_8004D14C(char *outstr, char *param_2);\nvoid sub_8004D1D0(char *saveBuf);\nMenu_Item_Unknown * menu_alloc_panel_8003D124(int count);\nvoid AssignXYFromVec_8003D1B8(PANEL *pArray, PANEL *pOther);\nint menu_Text_80038C38(const char *fmt, ...);\nstruct GV_ACT;\ntypedef GV_ACT *(*TGCL_ActorCreateFn)(int name, int where, int argc, char **argv);\ntypedef struct GCL_ActorTableEntry\n{\n    unsigned short hashCode;\n    TGCL_ActorCreateFn function;\n} GCL_ActorTableEntry;\ntypedef int (*TGCL_CommandFn)(unsigned char *pScript);\nint GCL_Command_if_80020274(unsigned char *pScript);\nint GCL_Command_eval_80020318(unsigned char *pScript);\nint GCL_Cmd_Return_80020404(unsigned char *pScript);\nint GCL_Command_foreach_8002033C(unsigned char *pScript);\nint GCL_Command_mesg_8002C138(unsigned char *pScript);\nint GCL_Command_trap_8002BD34(unsigned char *pScript);\nint GCL_Command_map_8002BB44(unsigned char *pScript);\nint GCL_Command_hzd_8002BD04(unsigned char *pScript);\nint GCL_Command_camera_8002B8F0(unsigned char *pScript);\nint GCL_Command_light_8002B854(unsigned char *pScript);\nint GCL_Command_start_8002C22C(unsigned char *pScript);\nint GCL_Command_load_8002C308(unsigned char *pScript);\nint GCL_Command_radio_8002C4A8(unsigned char *pScript);\nint GCL_Command_strstatus_8002C6A4(unsigned char *pScript);\nint GCL_Command_demo_8002C890(unsigned char *pScript);\nint GCL_Command_ntrap_8002BE20(unsigned char *pScript);\nint GCL_Command_delay_8002C074(unsigned char *pScript);\nint GCL_Command_pad_8002C988(unsigned char *pScript);\nint GCL_Command_varsave_8002C72C(unsigned char *pScript);\nint GCL_Command_system_8002C7C8(unsigned char *pScript);\nint GCL_Command_sound_8002CA28(unsigned char *pScript);\nint GCL_Command_menu_8002CAAC(unsigned char *pScript);\nint GCL_Command_rand_8002CD94(unsigned char *pScript);\nint GCL_Command_unknown1_8002CDF4(unsigned char *pScript);\nint GCL_Command_unknown2_8002CFBC(unsigned char *pScript);\nint GCL_Command_print_8002D0E4(unsigned char *pScript);\nint GCL_Command_jimaku_8002D188(unsigned char *pScript);\nint GCL_Command_chara_8002C1B0(int argc, char **argv);\ntypedef struct GCL_COMMANDLIST\n{\n    unsigned short hashCode;\n    TGCL_CommandFn function;\n} GCL_COMMANDLIST;\ntypedef struct _gcl_commanddef\n{\n    struct _gcl_commanddef *next;\n    int n_commlist;\n    GCL_COMMANDLIST *commlist;\n} GCL_COMMANDDEF;\ntypedef struct\n{\n    unsigned short argc;\n    long *argv;\n} GCL_ARGS;\ntypedef struct\n{\n    unsigned short procNameHashed;\n    unsigned short offset;\n} GCL_ProcTableEntry;\ntypedef struct\n{\n    GCL_ProcTableEntry *field_0_procTable;\n    unsigned char *field_4_pByteCode;\n    unsigned char *field_8_pMainProc;\n} GCL_FileData;\ntypedef struct EXPR_STACK\n{\n    int value;\n    unsigned char *ptr;\n} EXPR_STACK;\ntypedef struct GCL_Vars\n{\n    short var[1024];\n} GCL_Vars;\ntypedef struct SaveGame\n{\n    int f008_version;\n    int f00C_version2;\n    int f010_totalFrameTime;\n    int f014_padding[3];\n    char f020_stageName[16];\n    AreaHistory f030_areaHistory;\n    short f040_gameState[0x60];\n    GCL_Vars f100_gcl_vars;\n    RadioMemory f900_radio_memory[16];\n} SaveGame;\ntypedef struct SaveFile\n{\n    int f000_size;\n    int f004_checksum;\n    SaveGame f008_saveGame;\n} SaveFile;\ntypedef struct BindStruct\n{\n    short field_0;\n    short field_2_param_m;\n    short field_4;\n    unsigned short field_6;\n    unsigned char field_8_param_i_c_flags;\n    char field_9_param_s;\n    char field_A_param_b;\n    unsigned char field_B_param_e;\n    short field_C_param_d;\n    short field_E_param_d_or_512;\n    int field_10_every;\n    int field_14_proc_and_block;\n} BindStruct;\ntypedef struct CAMERA\n{\n    SVECTOR field_00_pos;\n    short field_08_trg[3];\n    short field_0e_alertMask;\n    signed char field_10_param1;\n    u_char field_11_param2;\n    char field_12_param3;\n    char field_13_param_p;\n} CAMERA;\nenum GCLOperators\n{\n    eNegate = 1,\n    eIsZero = 2,\n    eComplement = 3,\n    eAdd = 4,\n    eSubtract = 5,\n    eMultiply = 6,\n    eDivide = 7,\n    eModulus = 8,\n    eEquals = 9,\n    eNotEquals = 10,\n    eLessThan = 11,\n    eLessThanOrEqual = 12,\n    eGreaterThan = 13,\n    eGreaterThanOrEqual = 14,\n    eBitWiseOR = 15,\n    eBitWiseAND = 16,\n    eBitWiseXOR = 17,\n    eOr = 18,\n    eAnd = 19,\n    eEqual = 20,\n};\nstatic inline long GCL_GetLong(char *ptr)\n{\n    unsigned char *p;\n    p = (unsigned char *)ptr;\n    return (p[0] << 24) | (p[1] << 16) | (p[2] << 8) | (p[3]);\n}\nstatic inline long GCL_GetShort(char *ptr)\n{\n    unsigned char *p;\n    p = (unsigned char *)ptr;\n    return (signed short)((p[0] << 8) | (p[1]));\n}\nstatic inline char GCL_GetByte(char *ptr)\n{\n    return *ptr;\n}\nvoid GCL_StartDaemon_8001FCDC(void);\nint GCL_ExecBlock_80020118(unsigned char *pScript, GCL_ARGS *pArgs);\nint GCL_ExecProc_8001FF2C(int procId, GCL_ARGS *pArgs);\nint GCL_GetParam_80020968(char paramName);\nint GCL_GetNextParamValue_80020AD4(void);\nunsigned char *GCL_Get_Param_Result_80020AA4(void);\nunsigned char *GCL_GetNextValue_8002069C(unsigned char *pScript, int *retCode, int *retValue);\nint GCL_GetSV_80020A14(unsigned char *pInScript, SVECTOR *pOut3Words);\nvoid GCL_ChangeSenerioCode_8001FCB0(int bMain);\nchar *GCL_Read_String_80020A70(char *pScript);\nunsigned char *GCL_VarSaveBuffer_800217F0(unsigned char *pScript);\nvoid GCL_InitVar_80021264();\nvoid GCL_SaveVar_80021314(void);\nunsigned char *GCL_GetVar_80021634(unsigned char *pScript, int *retCode, int *retValue);\nint GCL_Expr_8002058C(unsigned char *pScript, int *retValue);\nint GCL_GetNextInt_800209E8(unsigned char *pScript);\nint GCL_AddCommMulti_8001FD2C(GCL_COMMANDDEF *pChain);\nint GCL_BindsInit_8002D1A8(void);\nvoid GCL_ParseInit_80020B68(void);\nvoid GCL_InitBasicCommands_8002040C(void);\nint GCL_LoadScript_80020064(unsigned char *);\nvoid GCL_SetCommandLine_80020934(unsigned char *);\nvoid GCL_SetArgTop_80020690(unsigned char *);\nvoid GCL_UnsetCommandLine_80020950(void);\nint *GCL_SetArgStack_8002087C(GCL_ARGS *pArgs);\nvoid GCL_UnsetArgStack_800208F0(void *stack);\nint GCL_GetArgs_80020904(int param_1);\nunsigned char *GCL_SetVar_8002171C(unsigned char *pScript, unsigned int value);\nvoid GCL_InitClearVar_800212CC(void);\nvoid GCL_ResetSystem_8001FD24(void);\nvoid GCL_RestoreVar_80021488(void);\nint calc_80020430(int operation, int v1, int v2);\nTGCL_ActorCreateFn GM_GetChara_8002A8C4(unsigned char *pScript);\nvoid GCL_ExecScript_80020228();\nvoid GCL_ForceExecProc_8001FEFC(int procNameHashed, GCL_ARGS *pArgs);\nint GCL_MakeSaveFile_80020C0C(char *saveBuf);\nint GCL_SetLoadFile_80020EAC(char *saveBuf);\nvoid GCL_SaveLinkVar_80020B90(short *gameVar);\nstruct map_record *GCL_Command_hzd_impl_800310D0(void);\nvoid GCL_Command_camera_helper_80030888(SVECTOR *vec1, SVECTOR *vec2, int param_3_bool);\nvoid GCL_Command_camera_helper2_800308E0(SVECTOR *vec1, SVECTOR *vec2, int param_3_bool);\nvoid GCL_Command_camera_helper3_80030938(SVECTOR *pVec);\nvoid GCL_Command_camera_helper4_80030980(int param_1);\nunsigned int GCL_Command_menu_helper_8002CA48(void);\nvoid GCL_Command_sound_impl_8002E688(void);\nunsigned int crc32_80020BB4(int len, unsigned char *pData);\nvoid GM_CameraSetAlertMask_80030850(unsigned int param_1, unsigned int param_2);\nvoid sub_8002FCF0(void);\ntypedef struct MOTION_INFO\n{\n    short field_0;\n    short field_2_footstepsFrame;\n    short field_4;\n    short field_6;\n    unsigned int field_8;\n    OAR_RECORD *field_C_oar_records;\n    short field_10;\n    short field_12;\n    short field_14;\n    unsigned short field_16_time;\n} MOTION_INFO;\ntypedef struct UnkMotionStru\n{\n    int field_0;\n    int field_4;\n    SVECTOR field_8;\n    int field_10;\n    int field_14;\n    short field_18;\n    short field_1A;\n    char field_1C;\n} UnkMotionStru;\ntypedef struct _MOTION_CONTROL\n{\n    DG_OAR *field_00_oar;\n    MOTION_INFO field_04_info1;\n    MOTION_INFO field_1C_info2;\n    SVECTOR *field_34;\n    SVECTOR *step;\n    unsigned short *field_3C;\n    unsigned long interp;\n    SVECTOR field_44;\n    SVECTOR *field_4C;\n} MOTION_CONTROL;\nvoid sub_8003501C(MOTION_CONTROL *m_ctrl, int a1, int motion);\nvoid sub_800350D4(MOTION_CONTROL *m_ctrl, int a1, int motion);\nint sub_8003556C(MOTION_CONTROL *m_ctrl);\nint oar_related_800356FC(MOTION_CONTROL *, MOTION_INFO *);\nvoid sub_8003603C(MOTION_CONTROL *pCtrl, MOTION_INFO *pInfo);\nint Process_Oar_8003518C(MOTION_CONTROL *pCtrl, MOTION_INFO *pInfo, int a3);\nint sub_800360EC(MOTION_CONTROL *pCtrl, MOTION_INFO *pInfo, int a3, int a4);\ntypedef struct WAVE_W\n{\n    int field_0_addr;\n    char field_4_sample_note;\n    char field_5_sample_tune;\n    char field_6_a_mode;\n    char field_7_ar;\n    char field_8_dr;\n    char field_9_s_mode;\n    char field_A_sr;\n    char field_B_sl;\n    char field_C_r_mode;\n    char field_D_rr;\n    char field_E_pan;\n    char field_F_decl_vol;\n} WAVE_W;\ntypedef struct SOUND_W\n{\n    unsigned char *field_0_mpointer;\n    char field_4_ngc;\n    char field_5_ngo;\n    char field_6_ngs;\n    char field_7_ngg;\n    char field_8_lp1_cnt;\n    char field_9_lp2_cnt;\n    short field_A_pad;\n    int field_C_lp1_vol;\n    int field_10_lp2_vol;\n    int field_14_lp1_freq;\n    int field_18_lp2_freq;\n    unsigned char *field_1C_lp1_addr;\n    unsigned char *field_20_lp2_addr;\n    unsigned char *field_24_lp3_addr;\n    unsigned char field_28_kakfg;\n    char field_29_pad[ 3 ];\n    unsigned char *field_2C_kak1ptr;\n    unsigned char *field_30_kak2ptr;\n    char field_34_pvoc;\n    char field_35;\n    char field_36;\n    char field_37;\n    int field_38_pvod;\n    int field_3C_pvoad;\n    int field_40_pvom;\n    char field_44_vol;\n    char field_45_panc;\n    char field_46;\n    char field_47;\n    int field_48_pand;\n    int field_4C_panad;\n    int field_50_panm;\n    char field_54_panf;\n    char field_55;\n    char field_56_panmod;\n    char field_57_swpc;\n    char field_58_swphc;\n    char field_59;\n    char field_5A;\n    char field_5B;\n    int field_5C_swpd;\n    int field_60_swpad;\n    int field_64_swpm;\n    char field_68_swsc;\n    char field_69_swshc;\n    char field_6A_swsk;\n    char field_6B;\n    int field_6C_swss;\n    char field_70_vibhc;\n    char field_71;\n    char field_72;\n    char field_73;\n    int field_74_vib_tmp_cnt;\n    char field_78_vib_tbl_cnt;\n    char field_79_vib_tc_ofst;\n    char field_7A;\n    char field_7B;\n    int field_7C_vibd;\n    int field_80_vibdm;\n    char field_84_vibhs;\n    char field_85_vibcs;\n    char field_86_vibcad;\n    char field_87_pad;\n    int field_88_vibad;\n    unsigned int field_8C_rdmc;\n    int field_90_rdmo;\n    char field_94_rdms;\n    char field_95_pad[ 3 ];\n    int field_98_rdmd;\n    signed char field_9C_trec;\n    char field_9D_trehc;\n    char field_9E_tred;\n    char field_9F_trecad;\n    char field_A0_trehs;\n    char field_A1_pad[ 3 ];\n    unsigned int field_A4_snos;\n    int field_A8_ptps;\n    int field_AC_dec_vol;\n    int field_B0_tund;\n    int field_B4_tmpd;\n    char field_B8_tmp;\n    char field_B9_pad[ 3 ];\n    signed int field_BC_tmpad;\n    char field_C0_tmpc;\n    char field_C1_pad[ 3 ];\n    int field_C4_tmpw;\n    char field_C8_tmpm;\n    char field_C9_pad[ 3 ];\n    int field_CC_rest_fg;\n    char field_D0_macro;\n    char field_D1_micro;\n    unsigned short field_D2_rrd;\n} SOUND_W;\ntypedef struct SPU_TRACK_REG\n{\n    short field_0_vol_l;\n    short field_2_vol_r;\n    int field_4_vol_fg;\n    short field_8_pitch;\n    short field_A_pad;\n    int field_C_pitch_fg;\n    int field_10_addr;\n    int field_14_addr_fg;\n    int field_18_a_mode;\n    short field_1C_ar;\n    short field_1E_dr;\n    int field_20_env1_fg;\n    int field_24_s_mode;\n    short field_28_sr;\n    short field_2A_sl;\n    int field_2C_env2_fg;\n    int field_30_r_mode;\n    short field_34_rr;\n    short field_36_pad;\n    int field_38_env3_fg;\n} SPU_TRACK_REG;\ntypedef struct SEPLAYTBL\n{\n    unsigned char field_0_pri;\n    char field_1_kind;\n    char field_2_character;\n    char field_3_pad;\n    unsigned char *field_4_addr;\n    unsigned int field_8_code;\n} SEPLAYTBL;\ntypedef struct SE_TBL\n{\n    char field_0;\n    char field_1;\n    char field_2;\n    char field_3;\n    int field_4[ 3 ];\n} SE_TBL;\ntypedef void (*TMDXFunc)(void);\nint sd_sng_alloc_80082194( void );\nvoid pan_set2_800882E4( unsigned char a1 );\nvoid keyoff_80087F80( void );\nvoid StrSpuTransClose_80083394();\nint SD_8008395C( int a1, int a2 );\nint SD_80083954( int a1, unsigned char *a2, int a3 );\nvoid init_sng_work_8008559C();\nint SD_SongLoadData_8008394C( int a1, int a2 );\nvoid por_compute_80086504( void );\nint vib_compute_800865CC( void );\nvoid freq_set_800885D4( unsigned int a1 );\nint get_str_counter_80088CA0( void );\nint sd_str_play_800886DC( void );\nint sd_set_cli_800887EC( int sdCode, int unused );\nunsigned char *SD_SngDataLoadInit_80083E8C( unsigned short unused );\nchar *LoadInit_80083F08( unsigned short );\nvoid SD_80083ED4( void );\nunsigned char *SD_80083EE8( unsigned short );\nvoid SD_Unload_800843BC( void );\nchar *SD_WavLoadBuf_800841D4( char *arg0 );\nvoid StrFadeWkSet_80083964();\nvoid volxset_80086C98( unsigned char a1 );\nvoid pan_generate_80086198();\nvoid drum_set_80088694( unsigned char a1 );\nvoid swpadset_80085F98( int a1 );\nvoid vol_set_80088320( unsigned int vol );\nextern int GM_CurrentMap_800AB9B0;\nextern int GM_NoisePower_800ABA24;\nextern int GM_NoiseLength_800ABA30;\nextern SVECTOR GM_NoisePosition_800AB9F8;\ntypedef struct Actor_GM_Daemon\n{\n    GV_ACT field_0;\n    int field_20;\n    int field_24;\n} Actor_GM_Daemon;\ntypedef struct _OBJECT\n{\n    DG_OBJS *objs;\n    unsigned long flag;\n    MATRIX *light;\n    unsigned short map_name;\n    short action_flag;\n    short field_10;\n    unsigned short field_12;\n    MOTION_CONTROL *m_ctrl;\n    short field_18;\n    short field_1A;\n    short field_1C;\n    unsigned short field_1E;\n    unsigned long field_20;\n    SVECTOR rots[0];\n} OBJECT;\ntypedef struct _OBJECT_NO_ROTS\n{\n    DG_OBJS *objs;\n    unsigned long flag;\n    MATRIX *light;\n    unsigned short map_name;\n    unsigned short action_flag;\n    unsigned short field_10;\n    unsigned short field_12;\n    MOTION_CONTROL *m_ctrl;\n    unsigned short field_18;\n    unsigned short field_1A;\n    unsigned short field_1C;\n    unsigned short field_1E;\n    unsigned long field_20;\n} OBJECT_NO_ROTS;\ntypedef int (*TBombFunction)(CONTROL *, int, int *);\ntypedef int (*TBombFunction2)(int, CONTROL *, int *);\ntypedef int (*TBombFunction3)(TARGET *, int);\ntypedef enum\n{\n    PLAYER_FIRST_PERSON = 0x1,\n    PLAYER_FIRST_PERSON_DUCT = 0x2,\n    PLAYER_UNK4 = 0x4,\n    PLAYER_FIRST_PERSON_CAN_LR_PEEK = 0x8,\n    PLAYER_MOVING = 0x10,\n    PLAYER_CROUCHING = 0x20,\n    PLAYER_PRONE = 0x40,\n    PLAYER_UNK80 = 0x80,\n    PLAYER_UNK100 = 0x100,\n    PLAYER_UNK200 = 0x200,\n    PLAYER_UNK400 = 0x400,\n    PLAYER_PREVENT_FIRST_PERSON = 0x800,\n    PLAYER_UNK1000 = 0x1000,\n    PLAYER_GAMEOVER = 0x2000,\n    PLAYER_UNK4000 = 0x4000,\n    PLAYER_PREVENT_WEAPON_ITEM_SWITCH = 0x8000,\n    PLAYER_ON_WALL = 0x10000,\n    PLAYER_KNOCKING = 0x20000,\n    PLAYER_UNK40000 = 0x40000,\n    PLAYER_THROWING = 0x80000,\n    PLAYER_UNK100000 = 0x100000,\n    PLAYER_PREVENT_ITEM_SWITCH = 0x200000,\n    PLAYER_PREVENT_WEAPON_SWITCH = 0x400000,\n    PLAYER_INVULNERABLE = 0x800000,\n    PLAYER_UNK1000000 = 0x1000000,\n    PLAYER_UNK2000000 = 0x2000000,\n    PLAYER_UNK4000000 = 0x4000000,\n    PLAYER_USING_CONTROLLER_PORT_2 = 0x8000000,\n    PLAYER_CAN_USE_CONTROLLER_PORT_2 = 0x10000000,\n    PLAYER_PAD_OFF = 0x20000000,\n    PLAYER_DEADORDYING = 0x40000000,\n    PLAYER_UNK80000000 = 0x80000000,\n} PlayerStatusFlag;\nenum\n{\n    STATE_RADAR_ON = 0x800,\n    STATE_PADRELEASE = 0x10000000,\n};\nstatic inline void GM_SetNoise(int power, int length, SVECTOR *pos)\n{\n    int old = GM_NoisePower_800ABA24;\n    if (power < old)\n        return;\n    if (power == old && length < GM_NoiseLength_800ABA30)\n        return;\n    GM_NoisePower_800ABA24 = power;\n    GM_NoiseLength_800ABA30 = length;\n    GM_NoisePosition_800AB9F8 = *pos;\n}\nextern int GM_GameStatus_800AB3CC;\nstatic inline void GM_Sound(int byte_2, int byte_1, int byte_0)\n{\n    int lowest_byte;\n    if (!(GM_GameStatus_800AB3CC & 0x84000000))\n    {\n        byte_2 &= 0xff;\n        byte_1 &= 0xff;\n        if (0x3f < byte_1)\n        {\n            byte_1 = 0x3f;\n        }\n        lowest_byte = byte_0 & 0xff;\n        sd_set_cli_800887EC(byte_2 << 0x10 | byte_1 << 8 | lowest_byte, 0);\n    }\n}\nstatic inline void GM_SetCurrentMap(int map)\n{\n    GM_CurrentMap_800AB9B0 = map;\n}\nvoid GM_Act_8002ADBC(Actor_GM_Daemon *pActor);\nvoid GM_InitArea_8002A704(void);\nvoid GM_InitChara_8002A890();\nvoid GM_InitScript_8002D1DC(void);\nvoid GM_Reset_8002ABF4(Actor_GM_Daemon *pActor);\nvoid GM_ResetMemory_8002AA80(void);\nvoid GM_ClearWeaponAndItem_8002A960();\nvoid GV_SaveResidentTop_800163C4(void);\nvoid GM_CreateLoader_8002AAB0();\nvoid GM_Sound_80032C48(int code, int notUsed);\nvoid GM_SeSet2_80032968(int byte_2, int byte_1, int byte_0);\nvoid GM_SeSet_80032858(SVECTOR *pos, unsigned int sound_id);\nvoid GM_ConfigControlInterp_80026244(CONTROL *pControl, char f5a);\nint GM_CheckControlTouches_8002624C(CONTROL *pControl, int param_2);\nvoid GM_ConfigObjectOverride_80034D30(OBJECT *obj, int a1, int motion, int interp, int a4);\nvoid GM_ExitBehindCamera_80030AEC(void);\nvoid GM_CheckBehindCamera_80030B3C(HZD_MAP *map, CONTROL *control);\nint GM_ConfigMotionAdjust_80035008(OBJECT *pObj, SVECTOR *adjust);\nchar *GM_GetArea_8002A880(int unused);\nint GM_SetArea_8002A7D8(int stage_id, char *pStageName);\nvoid GM_ConfigControlHazard_8002622C(CONTROL *pControl, short height, short f36, short f38);\nint GM_StreamStatus_80037CD8(void);\nvoid GM_CallSystemCallbackProc_8002B570(int id, int arg);\nvoid GM_ConfigControlString_800261C0(CONTROL *pControl, char *bReadVec1, char *bReadVec2);\nvoid GM_ConfigObjectSlide_80034CC4(OBJECT *obj);\nvoid GM_ReshadeObjs_80031660(DG_OBJS *pObj);\nvoid GM_StartDaemon_8002B77C();\nvoid GM_ConfigControlAttribute_8002623C(CONTROL *pControl, short f3a);\nvoid GM_ConfigControlMatrix_80026154(CONTROL *pControl, MATRIX *pMatrix);\nvoid GM_ConfigObjectStep_80034C54(OBJECT *obj, SVECTOR *step);\nvoid GM_ConfigObjectJoint_80034CB4(OBJECT *obj);\nvoid GM_ConfigControlTrapCheck_80026308(CONTROL *pControl);\nvoid GM_AlertModeInit_8002EAA8(void);\nvoid GM_InitWhereSystem_8002597C(void);\nvoid GM_Reset_helper_8002A978();\nvoid GM_Reset_helper3_80030760();\nvoid GM_GetAreaHistory_8002A730(AreaHistory *pHistoryCopy);\nvoid GM_SetAreaHistory_8002A784(AreaHistory *pNewHistory);\nint GM_AreaHistory_8002A848(int stage_id);\nvoid GM_SoundStart_8002E640(void);\nint GM_set_noise_sound_8002E588(int a1);\nActor_strctrl *GM_VoxStream_80037E40(int voxCode, int proc);\nvoid GM_InitReadError_8002AC44();\nvoid GM_SetSystemCallbackProc_8002B558(int index, int proc);\nvoid GM_ResetChara_8002A8B0(void);\nvoid GM_ControlRemove_80025904(CONTROL *pControl);\nTGCL_ActorCreateFn GM_GetCharaID_8002A8EC(int chara_id);\nvoid GM_AlertAct_8002E91C(void);\nvoid GM_StreamPlayStop_80037D64(void);\nvoid GM_AlertModeReset_8002EAB8(void);\nvoid GM_ContinueStart_8002B62C(void);\nvoid GM_GameOver_8002B6C8(void);\nGV_MSG *GM_CheckMessage_8002631C(GV_ACT *pActor, int msgType, int toFind);\nint GM_GetNoiseSound_8002E614(int arg0, int arg1);\nHZD_TRP *HZD_CheckBehindTrap_8002A5E0(HZD_MAP *pHzdMap, CONTROL *pControl);\nint sub_80032748(DVECTOR *out, SVECTOR *pos);\nint sub_800327BC(DVECTOR *out, SVECTOR *pos);\nint sub_80032820(DVECTOR *out, SVECTOR *pos);\nint sub_800326D4(DVECTOR *out, SVECTOR *pos);\nint sub_80032308(SVECTOR *pos, int param_2, DVECTOR *out);\nint sub_800321F8(SVECTOR *pos, int param_2, DVECTOR *out);\nint sub_80032420(SVECTOR *pos, int param_2, DVECTOR *out);\nint sub_80032534(SVECTOR *pos, int param_2, DVECTOR *out);\nint sub_8003265C(DVECTOR *param_1, SVECTOR *param_2, int param_3);\nvoid sub_800309B4(int param_1, int param_2);\nvoid sub_8002EBE8(SVECTOR *param_1, int param_2);\nvoid sub_8002E508(int a1);\nvoid sub_8002B600(int);\nvoid sub_8002AAEC();\nvoid sub_8002EADC(int);\nvoid sub_8002AA48(void);\nvoid sub_8002EC8C(SVECTOR*, SVECTOR*, SVECTOR*);\nvoid GM_Act_helper3_helper_8002AB40();\nvoid GM_Act_helper_8002AA10(void);\nvoid GM_Act_helper3_8002ABA4(void);\nvoid GM_Act_helper2_8002E8D4(void);\nvoid GM_ActControl_80025A7C(CONTROL *pControl);\nvoid GM_CameraEventReset_800309A8(void);\nint GM_ConfigMotionControl_80034F08(OBJECT *pObj, MOTION_CONTROL *pMCtrl, int name, OAR_RECORD *a4, OAR_RECORD *a5, CONTROL *pCtrl, SVECTOR *rots);\nint Res_Control_init_loader_8002599C(CONTROL *pControl, int scriptData, int scriptBinds);\nint sub_800296C4(HZD_MAP *pHzdMap, SVECTOR *param_2, int flags);\nvoid sub_800298DC(int *param_1);\nvoid GM_Sound_800329C4(SVECTOR *, int, int);\nint sub_80028454(HZD_MAP *pHzdMap, SVECTOR *a2, SVECTOR *a3, int flags, int flag);\nvoid sub_80028890(SVECTOR *pVec);\nvoid sub_80079004(unsigned short);\nint sub_80029A2C(void);\nvoid sub_800298C0(void *ptr);\nvoid sub_8002A090(HZD_MAP *pHzdMap, Res_Control_unknown *pCtrlSub, int flags, int hash);\nvoid sub_80029AEC(BindStruct *pBind, Res_Control_unknown *pSubCtrl, int a3, int a4);\nvoid sub_8007913C();\nActor_strctrl *sub_80037EE0(int vox_stream, int gcl_proc);\nvoid sub_800790E8();\nvoid sub_800241B4(void *);\nint sub_80029514(SVECTOR *);\nvoid sub_8002A258(HZD_MAP *param_1, Res_Control_unknown *param_2);\nint sub_80029098(HZD_MAP *, SVECTOR *, int, int, int);\nvoid sub_80032AEC(int byte_2, int byte_1, int byte_0);\nint sub_80028830(void);\nvoid sub_800272E0(SVECTOR *param_1, SVECTOR *param_2);\nSVECTOR *sub_80028820(void);\nvoid sub_800241C8(char *arg0, int arg1);\nint sub_80027384();\nvoid sub_80027A94(HZD_SEG *pHzdSeg, int a2, int a3);\nvoid sub_80027F10(HZD_FLR *pHzdFlr);\nGV_ACT *camera_init_800306A0(void);\nint sub_800275A8();\nint sub_800276B4();\nint sub_80027850(int mult);\nint sub_8002799C(int a0);\nvoid DrawReadError_8002AC9C(void);\nvoid SdMain_80081A18(void);\nint sd_task_active_800886C4();\nvoid sd_set_80088CB0(int sdCode);\nint StrSpuTransWithNoLoop_800827AC();\nvoid EQ_InvisibleHead_80060D5C(OBJECT *pObj, short *pnPacks, short *pRaise);\nvoid EQ_VisibleHead_80060DF0(OBJECT *pObj, short *pnPacks, short *pRaise);\nint EQ_VisibleUnit_80060F20(short *, char *);\nvoid EQ_InvisibleUnit_80060E68(DG_OBJS *pObjs, unsigned int color, int arg2);\nvoid EQ_ChangeTexture_80060CE4(const char *itemName1, const char *itemName2);\nvoid face_item_helper_80060CB8(u_short *in, u_short *out);\nvoid sub_80029D50(HZD_MAP *pMap, Res_Control_unknown *arg1, int);\nvoid GM_ActControl_helper6_helper_8002A27C(HZD_MAP*, Res_Control_unknown*);\nvoid GM_ActControl_helper6_helper2_8002A4B8(HZD_MAP*, Res_Control_unknown*);\nvoid sub_80029604(HZD_FLR *);\nint sub_80029384(HZD_FLR *);\ntypedef struct Actor_afterse\n{\n  GV_ACT field_0;\n  short field_20_noise;\n  short field_22_count_down;\n} Actor_afterse;\nvoid afterse_act_800603EC(Actor_afterse* pActor);\nActor_afterse * afterse_init_800604C0(short noise, short count_down);\ntypedef struct Shadow_94\n{\n    short objs_offsets[4];\n} Shadow_94;\ntypedef struct Actor_Shadow\n{\n    GV_ACT field_0_actor;\n    CONTROL *field_20_ctrl;\n    OBJECT *field_24_pObj;\n    OBJECT field_28_obj;\n    MATRIX field_4C_mtx;\n    short field_6C;\n    short field_6E;\n    int field_70;\n    short field_74;\n    short field_76;\n    short field_78;\n    short field_7A;\n    int field_7C;\n    int field_80;\n    int field_84;\n    int field_88;\n    int field_8C;\n    int field_90_bEnable;\n    Shadow_94 field_94;\n} Actor_Shadow;\nvoid shadow_act_helper_8005FD28(Actor_Shadow *pShadow);\nActor_Shadow * shadow_init2_80060384(CONTROL *pCtrl, OBJECT *pObj, Shadow_94 field_94, int **field_90_bEnable);\nint sub_8005C05C(HZD_ZON *a1, HZD_ZON *a2, SVECTOR *a3);\nint sub_8005BFDC(HZD_ZON *pZon, SVECTOR *pVec);\ntypedef struct Sna_E1\n{\n    unsigned char field_0;\n    unsigned char field_1;\n    unsigned char field_2;\n    unsigned char field_3;\n    unsigned char field_4;\n    unsigned char field_5;\n    unsigned char field_6;\n    unsigned char field_7;\n} Sna_E1;\ntypedef struct Sna_E2\n{\n    unsigned char field_0;\n    unsigned char field_1;\n    unsigned char field_2;\n    unsigned char field_3;\n    unsigned char field_4;\n    unsigned char field_5;\n    unsigned char field_6;\n    unsigned char field_7;\n    unsigned char field_8;\n    unsigned char field_9;\n    unsigned char field_A;\n    unsigned char field_B;\n} Sna_E2;\ntypedef struct Sna_E6\n{\n    unsigned char field_0;\n    unsigned char field_1;\n    unsigned char field_2;\n    unsigned char field_3;\n} Sna_E6;\ntypedef struct Target_Data\n{\n    SVECTOR field_0;\n    SVECTOR field_8_size;\n    int field_10;\n    int field_14;\n    int field_18;\n    unsigned int field_1C;\n} Target_Data;\ntypedef struct Sna_Joint_Rotations\n{\n    SVECTOR field_0_lower_body;\n    SVECTOR field_8_upper_body;\n    SVECTOR field_10_right_shoulder;\n    SVECTOR field_18_right_elbow;\n    SVECTOR field_20_right_wrist;\n    SVECTOR field_28_neck;\n    SVECTOR field_30_neck2;\n    SVECTOR field_38_right_shoulder;\n    SVECTOR field_40_right_elbow;\n    SVECTOR field_48_right_wrist;\n    SVECTOR field_50_right_leg;\n    SVECTOR field_58_right_knee;\n    SVECTOR field_60_right_ankle;\n    SVECTOR field_68_left_leg;\n    SVECTOR field_70_left_knee;\n    SVECTOR field_78_left_ankle;\n} Sna_Joint_Rotations;\ntypedef struct Sna_ActionTable\n{\n    Sna_E1 *field_0;\n    Sna_E2 *field_4;\n    Sna_E1 *field_8;\n    Sna_E2 *field_C;\n    Sna_E2 *field_10;\n    Sna_E6 *field_14;\n    Sna_E1 *field_18;\n} Sna_ActionTable;\ntypedef enum\n{\n    SNA_FLAG1_UNK1 = 0x1,\n    SNA_FLAG1_UNK2 = 0x2,\n    SNA_FLAG1_UNK3 = 0x4,\n    SNA_FLAG1_UNK4 = 0x8,\n    SNA_FLAG1_UNK5 = 0x10,\n    SNA_FLAG1_UNK6 = 0x20,\n    SNA_FLAG1_UNK7 = 0x40,\n    SNA_FLAG1_UNK8 = 0x80,\n    SNA_FLAG1_UNK9 = 0x100,\n    SNA_FLAG1_UNK10 = 0x200,\n    SNA_FLAG1_UNK11 = 0x400,\n    SNA_FLAG1_UNK12 = 0x800,\n    SNA_FLAG1_UNK13 = 0x1000,\n    SNA_FLAG1_UNK14 = 0x2000,\n    SNA_FLAG1_UNK15 = 0x4000,\n    SNA_FLAG1_UNK16 = 0x8000,\n    SNA_FLAG1_UNK17 = 0x10000,\n    SNA_FLAG1_UNK18 = 0x20000,\n    SNA_FLAG1_UNK19 = 0x40000,\n    SNA_FLAG1_UNK20 = 0x80000,\n    SNA_FLAG1_UNK21 = 0x100000,\n    SNA_FLAG1_UNK22 = 0x200000,\n    SNA_FLAG1_UNK23 = 0x400000,\n    SNA_FLAG1_UNK24 = 0x800000,\n    SNA_FLAG1_UNK25 = 0x1000000,\n    SNA_FLAG1_UNK26 = 0x2000000,\n    SNA_FLAG1_UNK27 = 0x4000000,\n    SNA_FLAG1_UNK28 = 0x8000000,\n    SNA_FLAG1_UNK29 = 0x10000000,\n    SNA_FLAG1_UNK30 = 0x20000000,\n    SNA_FLAG1_UNK31 = 0x40000000,\n    SNA_FLAG1_UNK32 = 0x80000000,\n} SnaFlag1;\ntypedef enum\n{\n    SNA_FLAG2_UNK1 = 0x1,\n    SNA_FLAG2_UNK2 = 0x2,\n    SNA_FLAG2_UNK3 = 0x4,\n    SNA_FLAG2_UNK4 = 0x8,\n    SNA_FLAG2_UNK5 = 0x10,\n    SNA_FLAG2_UNK6 = 0x20,\n    SNA_FLAG2_UNK7 = 0x40,\n    SNA_FLAG2_UNK8 = 0x80,\n    SNA_FLAG2_UNK9 = 0x100,\n    SNA_FLAG2_UNK10 = 0x200,\n    SNA_FLAG2_UNK11 = 0x400,\n    SNA_FLAG2_UNK12 = 0x800,\n    SNA_FLAG2_UNK13 = 0x1000,\n    SNA_FLAG2_UNK14 = 0x2000,\n    SNA_FLAG2_UNK15 = 0x4000,\n    SNA_FLAG2_UNK16 = 0x8000,\n    SNA_FLAG2_UNK17 = 0x10000,\n    SNA_FLAG2_UNK18 = 0x20000,\n    SNA_FLAG2_UNK19 = 0x40000,\n    SNA_FLAG2_UNK20 = 0x80000,\n    SNA_FLAG2_UNK21 = 0x100000,\n    SNA_FLAG2_UNK22 = 0x200000,\n    SNA_FLAG2_UNK23 = 0x400000,\n    SNA_FLAG2_UNK24 = 0x800000,\n    SNA_FLAG2_UNK25 = 0x1000000,\n    SNA_FLAG2_UNK26 = 0x2000000,\n    SNA_FLAG2_UNK27 = 0x4000000,\n    SNA_FLAG2_UNK28 = 0x8000000,\n    SNA_FLAG2_UNK29 = 0x10000000,\n    SNA_FLAG2_UNK30 = 0x20000000,\n    SNA_FLAG2_UNK31 = 0x40000000,\n    SNA_FLAG2_UNK32 = 0x80000000,\n} SnaFlag2;\ntypedef struct UnkSnakeStruct2\n{\n    unsigned short field_9E4;\n    short field_9E6;\n    short field_9E8;\n    short field_9EA;\n    short field_9EC_flags3;\n    short field_9EE;\n    short field_9F0;\n    short field_9F2;\n    SVECTOR field_9F4;\n} UnkSnakeStruct2;\ntypedef struct SnaAutoMove\n{\n    VECTOR field_0_ivec;\n    SVECTOR field_10_vec1;\n    SVECTOR field_18_vec2;\n} SnaAutoMove;\nstruct Actor_SnaInit;\ntypedef void (*TSnakeFunction)(struct Actor_SnaInit *, int);\ntypedef struct Actor_SnaInit\n{\n    GV_ACT field_0_actor;\n    CONTROL field_20_ctrl;\n    OBJECT field_9C_obj;\n    char field_C0[0xC0];\n    MOTION_CONTROL field_180;\n    OAR_RECORD field_1D0[34];\n    Sna_Joint_Rotations field_698_joint_rotations;\n    SVECTOR field_718[16];\n    int field_798_p_height;\n    int field_79C;\n    int field_7A0_msg_count;\n    GV_MSG field_7A4_msgs[8];\n    int field_844;\n    MATRIX field_848_lighting_mtx;\n    MATRIX field_868_lighting_mtx2;\n    Actor_Shadow *field_888_pShadow;\n    int *field_88C;\n    unsigned short field_890_autoaim_max_dist;\n    unsigned short field_892_autoaim_min_angle;\n    SnaFlag1 field_894_flags1;\n    SnaFlag2 field_898_flags2;\n    TARGET *field_89C_pTarget;\n    TARGET field_8A0_target;\n    TARGET *field_8E8_pTarget;\n    SVECTOR field_8EC_vec;\n    int field_8F4;\n    int field_8F8;\n    SVECTOR field_8FC;\n    int field_904_frames_last_choke;\n    GV_ACT *field_908_weapon_actor;\n    TSnakeFunction field_90C_pWeaponFn;\n    int field_910;\n    int field_914_trigger;\n    short *field_918_n_bullets;\n    int field_91C_weapon_idx;\n    int field_920_tbl_8009D580;\n    short field_924;\n    short field_926;\n    DG_TEX *field_928;\n    DG_PRIM *field_92C;\n    SVECTOR field_930;\n    SVECTOR field_938;\n    SVECTOR field_940;\n    SVECTOR field_948;\n    POLY_FT4 field_950[2];\n    int field_9A0;\n    GV_ACT *field_9A4_item_actor;\n    int field_9A8_current_item;\n    int field_9AC;\n    GV_PAD *field_9B0_pad_ptr;\n    Sna_ActionTable *field_9B4_action_table;\n    TSnakeFunction field_9B8_fn_anim;\n    int field_9BC_anim_frame;\n    TSnakeFunction field_9C0;\n    int field_9C4;\n    TSnakeFunction field_9C8_anim_update_fn_3p;\n    TSnakeFunction field_9CC_anim_update_fn_1p;\n    short field_9D0[10];\n    UnkSnakeStruct2 field_9E4;\n    void *field_9FC;\n    SnaAutoMove field_A00;\n    short field_A20;\n    short field_A22_snake_current_health;\n    char field_A24_invuln_frames;\n    char field_A25;\n    short field_A26_stance;\n    short field_A28;\n    short field_A2A;\n    SVECTOR field_A2C;\n    char field_A34;\n    char field_A35_vibtime2;\n    char field_A36;\n    char field_A37;\n    short field_A38_local_data;\n    short field_A3A;\n    SVECTOR field_A3C;\n    SVECTOR field_A44;\n    int field_A4C;\n    short field_A50;\n    short field_A52;\n    union {\n        short choke_count;\n        short prone_bool_thing;\n        short wall_thing;\n        short knockdown_thing;\n    } field_A54;\n    short field_A56;\n    short field_A58;\n    unsigned short field_A5A;\n    unsigned short field_A5C;\n    short field_A5E;\n    SVECTOR field_A60;\n    SVECTOR field_A68;\n    int field_A70;\n} Actor_SnaInit;\ntypedef int (*TSnakeActFunction)(Actor_SnaInit *);\ntypedef GV_ACT * (*TSnakeEquipFuncion)(CONTROL *, OBJECT *, int);\nvoid sna_start_anim_8004E1F4(Actor_SnaInit *pActor, void *pFn);\nvoid SetAction_8004E22C(Actor_SnaInit *pActor, int action_flag, int interp);\nvoid sna_8004E260(Actor_SnaInit *pActor, int a2, int interp, int a4);\nint GM_CheckPlayerStatusFlag_8004E29C(PlayerStatusFlag arg0);\nint GM_SetPlayerStatusFlag_8004E2B4(PlayerStatusFlag arg0);\nvoid GM_ClearPlayerStatusFlag_8004E2D4(PlayerStatusFlag flag);\nvoid sna_set_flags1_8004E2F4(Actor_SnaInit *snake, SnaFlag1 flags);\nvoid sna_clear_flags1_8004E308(Actor_SnaInit *snake, SnaFlag1 flags);\nint sna_check_flags1_8004E31C(Actor_SnaInit *snake, SnaFlag1 flags);\nvoid sna_set_flags2_8004E330(Actor_SnaInit *snake, SnaFlag2 flag);\nvoid sna_clear_flags2_8004E344(Actor_SnaInit *snake, SnaFlag2 flags);\nunsigned int sna_sub_8004E358(Actor_SnaInit *snake, SnaFlag2 param_2);\nvoid CheckSnakeDead_8004E384(Actor_SnaInit *snake);\nvoid sna_sub_8004E41C(Actor_SnaInit *snake, unsigned short flags);\nint sub_8004E458(short param_1, int param_2);\nint sub_8004E4C0(Actor_SnaInit *pActor, int param_2);\nint sub_8004E51C(SVECTOR *param_1, void *param_2, int param_3, int param_4);\nvoid sub_8004E588(HZD_MAP *param_1, SVECTOR *param_2, int *param_3);\nint sub_8004E930(Actor_SnaInit *snake, int arg1);\nvoid sub_8004E9D0(Actor_SnaInit *pActor);\nvoid sub_8004EA50(Actor_SnaInit *pActor, int param_2);\nint sna_8004EAA8(Actor_SnaInit *pActor, int a2);\nvoid sub_8004EB74(Actor_SnaInit *pActor);\nvoid sna_8004EC00(Actor_SnaInit *pActor);\nvoid sna_8004EC8C(Actor_SnaInit *pActor);\nvoid sub_8004ED08(Actor_SnaInit *pActor);\nvoid sub_8004EEB0(Actor_SnaInit *pActor);\nint sub_8004EFE4(Actor_SnaInit *pActor, int param_2);\nvoid sna_8004F034(Actor_SnaInit *pActor, unsigned int bits);\nvoid sna_act_helper2_helper4_8004F090(Actor_SnaInit *pActor, int param_2);\nvoid sub_8004F14C(Actor_SnaInit *param_1);\nvoid sub_8004F204(Actor_SnaInit *param_1);\nvoid sna_set_invuln_8004F2A0(Actor_SnaInit *pActor, char invuln_frames);\nvoid sna_clear_invuln_8004F2EC(Actor_SnaInit *snake);\nvoid sub_8004F338(Actor_SnaInit *param_1);\nint sna_act_unk_helper4_8004FA3C(void);\nvoid sna_8004FA74(Actor_SnaInit *param_1);\nvoid sub_8004FA9C(Actor_SnaInit *snake);\nint sna_current_item_8004FB38(void);\nSVECTOR **sub_8004FB90(void);\nint GM_Next_BulName_8004FBA0();\nvoid GM_ClearBulName_8004FBE4(int idx);\nvoid GM_CheckShukanReverse_8004FBF8(unsigned short *pInput);\nvoid GM_CheckShukanReverseAnalog_8004FC70(unsigned char *pInput);\nvoid sna_check_knock_800501F8(Actor_SnaInit *pActor, int time);\nint sna_prone_check_standup_80050398(Actor_SnaInit *pActor);\nvoid sna_80050440(Actor_SnaInit *pActor);\nvoid sna_80050568(Actor_SnaInit *pActor);\nint sub_800507D8(Actor_SnaInit *param_1);\nvoid sna_80051FD0(Actor_SnaInit *pActor);\nvoid sna_fn_80052120(Actor_SnaInit *pActor, int time);\nvoid sub_8005230C(Actor_SnaInit *pActor, int time);\nvoid sub_80052468(Actor_SnaInit *pActor, int time);\nvoid sna_fn_80052540(Actor_SnaInit *pActor, int time);\nvoid sna_fn_800525F8(Actor_SnaInit *pActor, int time);\nvoid sna_act_helper2_helper_helper_800526BC(Actor_SnaInit *pActor, int time);\nvoid sna_anim_idle_8005275C(Actor_SnaInit *pActor, int time);\nvoid sna_anim_crouch_800527DC(Actor_SnaInit *param_1, int time);\nvoid sna_anim_prone_idle_800528BC(Actor_SnaInit *pActor, int time);\nvoid sna_anim_run_8005292C(Actor_SnaInit *pActor, int time);\nvoid sna_anim_prone_move_800529C0(Actor_SnaInit *pActor, int time);\nvoid sna_anim_wall_idle_and_c4_80052A5C(Actor_SnaInit *pActor, int time);\nvoid sna_anim_wall_move_80052BA8(Actor_SnaInit *pActor, int time);\nvoid sna_anim_wall_crouch_80052CCC(Actor_SnaInit *pActor, int time);\nvoid sna_fn_80052E58(Actor_SnaInit *pActor, int time);\nvoid sna_anim_crouch_helper_80053014(Actor_SnaInit *pActor, int time);\nvoid sna_fn_800531F4(Actor_SnaInit *pActor, int time);\nvoid sna_fn_nothing_80053B80(Actor_SnaInit *param_1, int time);\nvoid sna_anim_run_begin_80053B88(Actor_SnaInit *param_1, int time);\nvoid sna_anim_prone_begin_80053BE8(Actor_SnaInit *pActor, int time);\nvoid sna_anim_prone_standup_80053D74(Actor_SnaInit *pActor, int time);\nvoid sna_anim_enter_duct_80053E9C(Actor_SnaInit *pActor, int time);\nvoid sub_80053FAC(Actor_SnaInit *pActor, int time);\nvoid sna_gun_800540D0(Actor_SnaInit *pActor, int time);\nvoid sna_bomb_800541A8(Actor_SnaInit *pActor);\nvoid sna_anim_chokethrow_begin1_80054210(Actor_SnaInit *pActor, int time);\nvoid sna_8005425C(Actor_SnaInit *pActor, int time);\nvoid sna_80054318(Actor_SnaInit *pActor, int time);\nvoid sna_fn_800543A8(Actor_SnaInit *pActor, int time);\nvoid sna_anim_duct_move_80054424(Actor_SnaInit *pActor, int time);\nvoid sna_anim_duct_idle_80054488(Actor_SnaInit *pActor, int time);\nvoid sna_anim_shot_flinch_800544E0(Actor_SnaInit *pActor, int time);\nvoid sna_act_helper2_helper7_80054648(Actor_SnaInit *pActor, int time);\nvoid sna_anim_knockdown_80054710(Actor_SnaInit *pActor, int time);\nvoid sna_anim_knockdown_idle_80054930(Actor_SnaInit *pActor, int time);\nvoid sna_anim_knockdown_getup_80054A10(Actor_SnaInit *pActor, int time);\nvoid sna_anim_knockdown_shot_80054B50(Actor_SnaInit *pActor);\nvoid sna_anim_knockdown_shot_tank_80054C08(Actor_SnaInit *pActor, int time);\nvoid sna_anim_scope_80055334(Actor_SnaInit *param_1, int time);\nvoid sna_anim_jpegcam_800553CC(Actor_SnaInit *pActor, int time);\nvoid sna_anim_box_idle_800553EC(Actor_SnaInit *pActor, int time);\nvoid sna_anim_box_move_8005544C(Actor_SnaInit *pActor, int time);\nvoid sna_anim_box_stop_800554B4(Actor_SnaInit *pActor, int time);\nvoid sub_8005684C(Actor_SnaInit *pActor);\nvoid sub_8005688C(Actor_SnaInit *pActor, int time);\nvoid sub_80056928(Actor_SnaInit *param_1, int time);\nvoid sna_knockdown_check_getup_80056A1C(Actor_SnaInit *pActor, int time);\nvoid sna_80056A54(Actor_SnaInit *pActor, int time);\nvoid sna_fn_80056AD8(Actor_SnaInit *pActor, int time);\nvoid sna_anim_shoot_weapon_80056B88(Actor_SnaInit *pActor, int time);\nvoid sna_anim_rungun_begin_80056BDC(Actor_SnaInit *param_1, int time);\nvoid sna_anim_rungun_80056C3C(Actor_SnaInit *param_1, int time);\nvoid sna_anim_stinger_800570C0(Actor_SnaInit *pActor, int time);\nvoid sna_80057118(Actor_SnaInit *pActor, int time);\nvoid sna_800571B8(Actor_SnaInit *pActor, int time);\nvoid sna_80057378(Actor_SnaInit *pActor, int time);\nvoid sna_anim_shoot_weapon_helper_80057590(Actor_SnaInit *pActor, int time);\nvoid sna_anim_rungun_begin_helper_800577B4(Actor_SnaInit *pActor, int time);\nvoid sna_auto_aim_800579A0(Actor_SnaInit *pActor);\nvoid OP_ShootStinger_80058378(Actor_SnaInit *pActor, int time);\nvoid sub_80058644(Actor_SnaInit *pActor, int time);\nvoid sna_anim_punch_80058C10(Actor_SnaInit *pActor, int time);\nvoid sna_anim_chokethrow_begin2_80058C80(Actor_SnaInit *pActor, int time);\nvoid sna_anim_choke_80058E88(Actor_SnaInit *pActor, int time);\nvoid sna_anim_choke_rechoke_80058EF4(Actor_SnaInit *pActor, int time);\nvoid sna_anim_choke_rechoke_80058EF4(Actor_SnaInit *pActor, int time);\nvoid sna_anim_choke_kill_80058F88(Actor_SnaInit *pActor, int time);\nvoid sna_anim_choke_drag_80059054(Actor_SnaInit *pActor, int time);\nvoid sna_anim_choke_hold_80059154(Actor_SnaInit *pActor, int time);\nvoid sub_800591BC(Actor_SnaInit *pActor);\nvoid sna_anim_choke_helper_8005951C(Actor_SnaInit *pActor, int time);\nvoid sna_anim_choke_rechoke_helper_8005961C(Actor_SnaInit *pActor, int time);\nvoid sna_kill_8005B52C(Actor_SnaInit *pActor);\nvoid sna_anim_psg1_helper_80057FD4(Actor_SnaInit *pActor, int a2);\nvoid sub_8002DA14(TARGET *pTarget);\nvoid sna_80051DA0(Actor_SnaInit *pActor);\nvoid sna_80053360(Actor_SnaInit *pActor, int time);\nvoid sub_80057BF0(Actor_SnaInit *pActor, int a2);\nvoid sna_anim_throw_800589C8(Actor_SnaInit *pActor, int a2);\nvoid sna_gun_800540D0(Actor_SnaInit *pActor, int a2);\nvoid sna_anim_punch_helper_800591F4(Actor_SnaInit *pActor, int a2);\nint sna_8004FDE8(Actor_SnaInit *pActor, Target_Data *pVec);\nvoid sna_8004F8E4(Actor_SnaInit *pActor, int a2);\nvoid sna_fn_800535B8(Actor_SnaInit *pActor, int time);\nvoid sna_knockdown_getup_80050668(Actor_SnaInit *pActor);\nvoid sna_anim_grenade_80058470(struct Actor_SnaInit *pActor, int a2);\nvoid sna_anim_claymore_80057474(struct Actor_SnaInit *pActor, int a2);\nvoid sna_anim_psg1_80056DDC(struct Actor_SnaInit *pActor, int a2);\nvoid sna_8004EE28(Actor_SnaInit *pActor);\nvoid sna_8004EB14(Actor_SnaInit *pActor);\nvoid sna_anim_wall_idle_and_c4_helper_800537D4(Actor_SnaInit *pActor, int time);\nvoid sna_anim_wall_crouch_helper_80053A54(Actor_SnaInit *pActor, int time);\nvoid sub_8004FAE8(Actor_SnaInit *pActor);\nvoid sna_anim_wall_move_helper_800538CC(Actor_SnaInit *pActor, int time);\nvoid sna_knock_80054D68(Actor_SnaInit *pActor, int time);\nvoid sna_anim_rungun_helper_80057844(Actor_SnaInit *pActor, int time);\nint sna_8005009C(Actor_SnaInit *pActor);\nint sub_80051BA4(Actor_SnaInit *pActor);\nint sub_8004EFE4(Actor_SnaInit *pActor, int param_2);\nint sub_8004E5E8(Actor_SnaInit *pActor, int param_2);\nint sub_8004E808(Actor_SnaInit *pActor, int, int, int, int);\nint sna_act_unk_helper2_helper3_80060684(SnaAutoMove *, SVECTOR *);\nvoid sna_anim_claymore_helper_80058780(Actor_SnaInit *pActor, int time);\nint sub_8005C6C4(HZD_MAP *hzd, SVECTOR *vec, int param_3);\nvoid sna_act_unk2_80051170(TARGET *pTarget);\nvoid sna_act_helper3_helper_80056650(Actor_SnaInit *pActor, int time);\nvoid sna_act_unk_helper3_80055DD8(Actor_SnaInit *pActor, int time);\nvoid sna_anim_mini_cutscene_800559D8(Actor_SnaInit *pActor, int time);\nvoid sna_anim_dying_80055524(Actor_SnaInit *pActor, int time);\nvoid sna_act_unk_helper2_helper2_800605DC(SnaAutoMove *autoMove, HZD_MAP *pHzd, SVECTOR *pVec);\nint sna_unk_helper2_helper_8006070C(SnaAutoMove *pAutoMove, CONTROL *pControl);\nvoid sna_80057A90(Actor_SnaInit *pActor, int time);\nvoid sna_8004EF14(Actor_SnaInit *pActor);\nGV_ACT *sna_NewSnake_8005B650(int name, int where, int argc, char **argv);\nint HZD_ReachTo_8005C89C(HZD_MAP *pHzd, int, int);\nint sna_act_unk_helper2_helper_helper_8005C974(HZD_MAP *pHzd, int, int, CONTROL *pControl);\nvoid sna_act_helper2_helper2_80033054(int id, SVECTOR *vec);\nGV_ACT *NewSOCOM_80065D74(CONTROL *a1, OBJECT *parentObj, int unit, int *a4, int a5);\nGV_ACT *famas_create_80066374(CONTROL *a1, OBJECT *parentObj, int unit, int a4, int a5);\nGV_ACT *grenade_create_80066A4C(CONTROL *a1, OBJECT *parentObj, int unit, int a4, int a5);\nGV_ACT *NewRCM_80066FF0(CONTROL *a1, OBJECT *parentObj, int unit, int a4, int a5);\nGV_ACT *mine_init_800677BC(CONTROL *a1, OBJECT *parentObj, int unit, int a4, int a5);\nGV_ACT *NewBomb_80067B20(CONTROL *a1, OBJECT *parentObj, int unit, int *a4, int a5);\nGV_ACT *NewStanGrenade_80066A74(CONTROL *a1, OBJECT *parentObj, int unit, int a4, int a5);\nGV_ACT *NewChaffGrenade_80066AA0(CONTROL *a1, OBJECT *parentObj, int unit, int a4, int a5);\nGV_ACT *NewRifle_80068214(CONTROL *a1, OBJECT *parentObj, int unit, int *a4, int a5);\nextern const char aStageDir[];\nextern const char aRadioDat[];\nextern const char aFaceDat[];\nextern const char aZmovieStr[];\nextern const char aVoxDat[];\nextern const char aDemoDat[];\nextern const char aBrfDat[];\nextern const char animation_data_80012F2C[];\nextern const char animation_data_80012F50[];\nextern const char aTlbl[];\nextern const char aSending[];\nextern const char aReceiving[];\nextern const char aReady[];\nextern const char aSleeping[];\nextern const char aWaitvbl[];\nextern const char aPending[];\nextern const char *aCdlsync[];\nextern const char *aCdlnop[];\nextern const char *aCdlsetloc[];\nextern const char *aCdlplay[];\nextern const char *aCdlforward[];\nextern const char *aCdlbackward[];\nextern const char *aCdlreadn[];\nextern const char *aCdlstandby[];\nextern const char *aCdlstop[];\nextern const char *aCdlpause[];\nextern const char *aCdlreset[];\nextern const char *aCdlmute[];\nextern const char *aCdldemute[];\nextern const char *dword_800141CC[];\nextern const char *aCdlgetlocl[];\nextern const char *aCdlgetlocp[];\nextern const char *aCdlgettn[];\nextern const char *aCdlgettd[];\nextern const char *aCdlseekl[];\nextern const char *aCdlseekp[];\nextern const char *aCdlreads[];\nextern const char *aNointr[];\nextern const char *aDataready[];\nextern const char *aComplete_0[];\nextern const char *aAcknowledge[];\nextern const char *aDataend[];\nextern const char *aDiskerror_0[];\nextern const char *aIdBiosCV186199[];\nextern const char *aIdSysCV1140199[];\nextern const char *aIdIntrCV175199[];\nstruct _CDBIOS_TASK;\ntypedef int (*cdbios_task_pfn)(struct _CDBIOS_TASK *);\ntypedef struct _CDBIOS_TASK {\n    int field_0_state;\n    int field_4_sector;\n    void *field_8_buffer;\n    int field_C;\n    int field_10_ticks;\n    int field_14_sectors_delivered;\n    int field_18_size;\n    int field_1C_remaining;\n    cdbios_task_pfn field_20_callback;\n} CDBIOS_TASK;\ntypedef struct _STAGE_HEADER\n{\n    char field_0;\n    char field_1;\n    short field_2_size;\n} STAGE_HEADER;\ntypedef struct _STAGE_CONFIG\n{\n    unsigned short field_0_hash;\n    short field_2_mode_and_ext[0];\n    char field_2_mode;\n    char field_3_extension;\n    int field_4_size;\n} STAGE_CONFIG;\nstruct _CDBIOS_TASK;\ntypedef struct _STAGE_FILE\n{\n    int field_0;\n    CDBIOS_TASK *field_4_pTask;\n    void *field_8_pBuffer;\n    STAGE_HEADER *field_C_pHeader;\n    void *field_10_pContents;\n    STAGE_CONFIG *field_14_pConfigStart1;\n    STAGE_CONFIG *field_18_pConfigEnd1;\n    STAGE_CONFIG *field_1C;\n    STAGE_CONFIG *field_20_pConfigEnd2;\n    int field_24;\n    int field_28;\n    STAGE_CONFIG *field_2C_config;\n    void *field_30_current_ptr;\n    int field_34_remaining;\n} STAGE_FILE;\nstruct Loader\n{\n    GV_ACT base;\n    STAGE_FILE *field_20_pStageFile;\n    int field_24_proc_cancel_flags;\n    int field_28_bRunning;\n    int field_2C_counter;\n};\nstruct Loader *Loader_Init_8002E460(const char *pStageName);\ntypedef struct _FS_FILE_INFO_8009D49C\n{\n    const char *pDatName;\n    int field_4_sector;\n} FS_FILE_INFO_8009D49C;\ntypedef struct _FS_FILE {\n    char field_0_name[8];\n    int field_4_offset;\n} FS_FILE;\ntypedef struct _FS_FILE_TABLE {\n    int field_0_start;\n    int field_4_size;\n    int field_8_count;\n    FS_FILE *field_C_files;\n} FS_FILE_TABLE;\ntypedef struct _FS_MOVIE_FILE\n{\n    unsigned short field_0_id;\n    unsigned short field_2_frame;\n    int field_4_pos;\n} FS_MOVIE_FILE;\ntypedef struct _FS_MOVIE_FILE_TABLE\n{\n    int field_0_tablenum;\n    FS_MOVIE_FILE field_4_files_8Array[8];\n} FS_MOVIE_FILE_TABLE;\ntypedef char * (*TFsCallback)(char *);\ntypedef void (*TFsSoundCallback)(void);\nint CDBIOS_ReadSync_80022854(void);\nint FS_CdMakePositionTable_80022B5C(char *pHeap, FS_FILE_INFO_8009D49C *pDirRecs);\nint FS_ResetCdFilePosition_80021E2C(void *pHeap);\nvoid CDBIOS_ForceStop_80022864(void);\nint CDBIOS_Reset_80021F70(void);\nvoid CDFS_Init_80021EC4();\nvoid FS_CdStageFileInit_80022D00(void *pHeap, int startSector);\nvoid FS_MovieFileInit_80023860(void *pHeap, int startSector);\nvoid FS_StartDaemon_80014A7C(void);\nvoid FS_StreamCD_80023F8C(void);\nvoid FS_StreamTaskInit_80023E1C(void);\nvoid CDBIOS_ReadRequest_8002280C(void *pHeap, unsigned int startSector, unsigned int sectorSize, void *fnCallBack);\nvoid FS_CdStageProgBinFix_80014AAC(void);\nint Loader_80023624(STAGE_FILE *pStageFile);\nint FS_CdGetStageFileTop_80022DCC(char *pFileName);\nint Loader_CD_Read_CallBack_80023274(CDBIOS_TASK *pTask);\nint FS_LoadStageSync_800237C0(STAGE_FILE *pStageFile);\nSTAGE_FILE *FS_LoadStageRequest_800236E0(const char *pFileName);\nvoid FS_LoadStageComplete_80023804(STAGE_FILE *pStageFile);\nvoid *FS_StreamGetData_800240E0(int);\nvoid FS_StreamOpen_80024060();\nvoid FS_StreamClose_80024098(void);\nint CDBIOS_TaskState_80022888(void);\nint FS_StreamTaskState_80023E0C(void);\nvoid FS_StreamStop_80024028();\nvoid FS_LoadFileRequest_80021F0C(int dirFile, int startSector, int sectorSize, void *pBuffer);\nint FS_LoadFileSync_80021F48(void);\nvoid CDBIOS_TaskStart_800227A8(void);\nvoid CDBIOS_Main_80022264(void);\nint FS_CdStageFileInit_helper_80022CBC(CDBIOS_TASK *task);\nint FS_CdMakePositionTable_helper_8002297C(char *pDirBlock, FS_FILE_INFO_8009D49C *pDirRecs);\nint FS_StreamGetTop_80023F94(int is_movie);\nvoid FS_StreamTaskStart_80023D94(int param_1);\nint FS_StreamInit_80023FD4(void *pHeap, int heapSize);\nvoid FS_StreamTickStart_800243D8();\nint FS_StreamGetTick_80024420(void);\nint FS_StreamIsForceStop_800243C8(void);\nvoid FS_StreamSoundMode_80024404();\nint FS_StreamIsEnd_800240D0(void);\nint FS_StreamSync_80023E24();\nvoid sub_80023C40(void);\nint sub_800239E8(CDBIOS_TASK *pTask);\nint Loader_helper2_80023460(STAGE_FILE *);\nint Loader_helper_8002336C(STAGE_FILE *, int);\nint FS_StreamGetEndFlag_800243B8(void);\nvoid MakeFullPath_80021F68(int, char *);\ntypedef struct anime_0x34\n{\n    int field_0_counter;\n    int field_4;\n    SVECTOR field_8_vec;\n    char field_10_r;\n    char field_11_g;\n    char field_12_b;\n    char field_13;\n    unsigned char *field_14;\n    unsigned char *field_18_op_code;\n    short field_1C[2];\n    int field_20;\n    unsigned char *field_24_saved_op_code[2];\n    int field_2C;\n    int field_30;\n} anime_0x34;\ntypedef struct Actor_anime\n{\n    GV_ACT field_0_actor;\n    DG_TEX *field_20_pTexture;\n    DG_PRIM *field_24_pPrim;\n    RECT field_28_prim_rect;\n    MATRIX *field_30_mtx;\n    int field_34_map;\n    unsigned char field_38_active_buff;\n    char field_39;\n    short field_3A_data_2;\n    short field_3C_data_4;\n    short field_3E_maybe_data_count;\n    short field_40_data_C;\n    short field_42_count;\n    short field_44_data_A;\n    short field_46;\n    SVECTOR *field_48_pPrimVec;\n    anime_0x34 field_4C_items[0];\n} Actor_anime;\ntypedef int (*TAnimeVMFn)(Actor_anime *, int);\ntypedef struct PRESCRIPT\n{\n    SVECTOR pos;\n    SVECTOR speed;\n    short scr_num;\n    short s_anim;\n} PRESCRIPT;\ntypedef struct ANIMATION\n{\n    unsigned short field_0_texture_hash;\n    short field_2;\n    short field_4;\n    short field_6;\n    short field_8_count;\n    short field_A;\n    short field_C;\n    short field_E_xw;\n    short field_10_yh;\n    short field_12_rgb;\n    PRESCRIPT *field_14_pre_script;\n    char *field_18_ptr;\n} ANIMATION;\nActor_anime *NewAnime_8005FBC8(MATRIX *pMtx, int map, ANIMATION *pAnimData);\nActor_anime *anime_create_8005D604(MATRIX *pMtx);\nvoid anime_create_8005DF50(SVECTOR *v1, SVECTOR *v2);\nvoid anime_create_8005E334(MATRIX *pMtx);\nvoid anime_change_prim_8005E7EC(POLY_FT4 *pPrims, DG_TEX *pTexture, int item_f4, Actor_anime *pActor);\nint anime_loader_8005F994(Actor_anime *pActor, int param_2, struct ANIMATION *param_3);\nvoid anime_act_8005F4AC(Actor_anime *param_1);\nvoid anime_create_8005E6A4(SVECTOR *pVec);\nvoid anime_create_8005DE70(MATRIX *pMtx);\nvoid anime_create_8005D6BC(MATRIX *pMtx, int a2);\nvoid anime_create_8005D988(MATRIX *a1, MATRIX *a2, int a3);\nvoid anime_create_8005DDE0(MATRIX *pMtx);\nvoid anime_create_8005E508(SVECTOR *pos);\nint anime_fn_0_8005EC1C(Actor_anime *pActor, int idx);\nint anime_fn_1_8005ED0C(Actor_anime *pActor, int idx);\nint anime_fn_2_8005ED74(Actor_anime *pActor, int idx);\nint anime_fn_3_8005EDDC(Actor_anime *pActor, int idx);\nint anime_fn_4_8005EE44(Actor_anime *pActor, int idx);\nint anime_fn_5_8005EEA4(Actor_anime *pActor, int idx);\nint anime_fn_6_8005EF04(Actor_anime *pActor, int idx);\nint anime_fn_7_8005EFF8(Actor_anime *pActor, int idx);\nint anime_fn_8_8005F0F0(Actor_anime *pActor, int idx);\nint anime_fn_9_8005F180(Actor_anime *pActor, int idx);\nint anime_fn_10_8005F288(Actor_anime *pActor, int idx);\nint anime_fn_11_8005F2F4(Actor_anime *pActor, int idx);\nint anime_fn_12_8005F37C(Actor_anime *pActor, int idx);\nint anime_fn_13_8005F408(Actor_anime *pActor, int idx);\nint anime_fn_14_8005F438(Actor_anime *pActor, int idx);\ntypedef struct Actor_bakudan\n{\n    GV_ACT field_0_actor;\n    CONTROL field_20_ctrl;\n    OBJECT field_9C_kmd;\n    MATRIX field_C0_light_mtx[2];\n    MATRIX *field_100_pMtx;\n    SVECTOR *field_104;\n    int field_108;\n    int field_10C;\n    GV_PAD *field_110_pPad;\n    int field_114;\n    int field_118;\n} Actor_bakudan;\nGV_ACT *NewBakudan_8006A6CC(MATRIX *pMtx, SVECTOR *pVec, int a3, int not_used, TARGET *pTarget);\nvoid bakudan_act_8006A218(Actor_bakudan *pActor);\nvoid bakudan_kill_8006A4A4(Actor_bakudan *pActor);\nint bakudan_8006A54C(Actor_bakudan *pActor, MATRIX *pMtx, SVECTOR *pVec, int a4, TARGET *pTarget);\nint bakudan_next_free_item_8006A510(void);\ntypedef struct Blast_Data\n{\n int field_0;\n int field_4;\n int field_8_z;\n int field_C;\n int field_10;\n} Blast_Data;\ntypedef struct Actor_Blast\n{\n GV_ACT field_0_actor;\n int field_20_map_bits;\n SVECTOR field_24_vec;\n DG_PRIM *field_2C_prim;\n int field_30;\n int field_34;\n int field_38;\n TARGET field_3C_target;\n} Actor_Blast;\nvoid blast_act_8006DD18( Actor_Blast *pActor );\nvoid AN_Blast_Single_8006E224( SVECTOR *pVec );\nvoid blast_8006DDEC( Blast_Data *pBlastData, Actor_Blast *pBlast, int targetSidePicker );\nvoid AN_Blast_Minimini_8006E32C( SVECTOR *pVec );\nActor_Blast * NewBlast_8006DFDC( MATRIX *pMtx, Blast_Data *pBlastData );\nActor_Blast * NewBlast2_8006E0F0( MATRIX *pMtx, Blast_Data *pBlastData, int doSound, int whichSidePicker );\nvoid NewStanBlast_80074B5C( MATRIX *pMtx );\nvoid GM_InitObjectNoRots_800349B0(OBJECT_NO_ROTS *obj, int model, int flag, int motion);\nvoid GM_ConfigObjectRoot_80034C5C(OBJECT *obj, OBJECT *parent_obj, int num_parent);\nvoid GM_ConfigObjectAction_80034CD4(OBJECT *obj, int action_flag, int motion, int interp);\nvoid GM_ConfigObjectLight_80034C44(OBJECT *obj, MATRIX *light);\nvoid GM_FreeObject_80034BF8(OBJECT *obj);\nvoid GM_ActObject2_80034B88(OBJECT *obj);\nint GM_ConfigObjectModel_80034E10(OBJECT_NO_ROTS *obj, int model);\nvoid GM_InitObject_80034A18(OBJECT *obj, int model, int flag, int motion);\nvoid GM_ActMotion_80034A7C(OBJECT *obj);\nvoid GM_ActObject_80034AF4(OBJECT *pObject);\ntypedef struct Actor_Jirai\n{\n    GV_ACT field_0_actor;\n    CONTROL field_20_ctrl;\n    OBJECT field_9C_obj;\n    MATRIX field_C0_light_matrices[2];\n    TARGET *field_100_pTarget;\n    SVECTOR field_104_vec;\n    short field_10C;\n    short field_10E;\n    int field_110;\n    int field_114;\n    int field_118;\n    int field_11C;\n    int field_120;\n    int field_124;\n    int field_128;\n    int field_12C;\n    int field_130;\n    long field_134_gcl_arg;\n    int field_138_gcl;\n    int field_13C_idx;\n    int field_140;\n    SVECTOR field_144_vec;\n    int field_14C_map;\n    int field_150;\n} Actor_Jirai;\ntypedef struct Jirai_unknown\n{\n    int field_0_ypos;\n    GV_ACT *field_4_pActor;\n    CONTROL *field_8_pCtrl;\n    TARGET *field_C_pTarget;\n} Jirai_unknown;\nvoid jirai_act_8006AB5C(Actor_Jirai *pActor);\nint jirai_loader_8006B564(Actor_Jirai *pActor, int a2, int map);\nMATRIX *jirai_loader_helper_8006A798(MATRIX *arg0, MATRIX *arg1, TARGET *pTarget);\nint jirai_loader_helper_8006B124(Actor_Jirai *pActor, MATRIX *pMtx, int a3);\nvoid jirai_kill_8006B05C(Actor_Jirai *pActor);\nActor_Jirai *NewJirai_8006B48C(DG_OBJ *pObj, TARGET *pTarget);\ntypedef struct UnkCameraStruct\n{\n    SVECTOR field_0;\n    SVECTOR field_8;\n    SVECTOR field_10;\n    int field_18;\n    SVECTOR field_1C;\n    int field_24;\n    SVECTOR field_28;\n} UnkCameraStruct;\ntypedef void (*TGMCameraFunc)(void);\ntypedef struct GM_Camera\n{\n    SVECTOR field_0;\n    SVECTOR field_8;\n    SVECTOR field_10;\n    int field_18_flags;\n    int field_1C;\n    short field_20;\n    short field_22;\n    short field_24_gcl_param_a;\n    short field_26;\n    short field_28;\n    short field_2A;\n    SVECTOR field_2C;\n    SVECTOR field_34[4][2];\n    TGMCameraFunc field_74_funcs[2];\n} GM_Camera;\n;\ntypedef struct UnkCameraStruct2\n{\n    SVECTOR field_0;\n    SVECTOR field_8;\n    SVECTOR field_10;\n    int field_18;\n    int field_1C;\n    int field_20;\n} UnkCameraStruct2;\nvoid camera_act_helper5_80030118(GV_ACT *pActor);\nint camera_act_helper6_80030250(GV_ACT *pActor);\nvoid camera_act_helper3_8002F64C();\nvoid camera_act_helper_8002F1C8();\nvoid camera_act_helper7_8002FB54();\nint camera_act_helper2_8002F5C4();\nvoid camera_act_helper4_8002F78C();\nvoid sub_8002ED68(int param_1);\nvoid sub_800303E0(SVECTOR *);\nvoid sub_8002EE80(void);\nvoid sub_8002FC58(SVECTOR *param_1, SVECTOR *param_2, SVECTOR *param_3, int *param_4);\nvoid sub_8002FCA4(SVECTOR *param_1, SVECTOR *param_2, SVECTOR *param_3, int *param_4);\nvoid sub_8002FBC0(SVECTOR *pVec1, SVECTOR *pVec2, SVECTOR *pVec3, int *pLen);\nvoid sub_8002FAAC(SVECTOR *a1, SVECTOR *a2, SVECTOR *a3, int *a4);\nvoid sub_8002FCF0(void);\nvoid camera_act_helper6_helper_8002FD9C(int, int);\ntypedef struct Actor_rmissile\n{\n    GV_ACT field_0_actor;\n    CONTROL field_20_ctrl;\n    OBJECT field_9C_kmd;\n    MATRIX field_C0_light_matrices[2];\n    SVECTOR field_100_svector;\n    SVECTOR field_108_svector;\n    char field_110;\n    char field_111;\n    char field_112;\n    char field_113;\n    char field_114;\n    char field_115;\n    char field_116;\n    char field_117;\n    short field_118;\n    short field_11A;\n    int field_11C;\n    TARGET field_120_target;\n    short field_168;\n    short field_16A;\n    SVECTOR field_16C_svector;\n    POLY_F4 *field_174_polys_2Array[2];\n    GM_Camera field_17C_camera;\n    UnkCameraStruct field_1F8;\n    CAMERA field_228_camera[8];\n    int field_2C8;\n    SVECTOR field_2CC_svector;\n    int field_2D4;\n    DG_PRIM *field_2D8_prim;\n    DG_TEX *field_2DC_tex;\n    char field_2E0_pad[4];\n    SVECTOR field_2E4_svector_8Array[8];\n    int field_324;\n} Actor_rmissile;\n;\nvoid rmissile_8006B924(Actor_rmissile *pActor);\nvoid rmissile_act_8006C5C4(Actor_rmissile *pActor);\nvoid rmissile_kill_8006CB40(Actor_rmissile *pActor);\nint rmissile_loader_helper2_8006CC50(Actor_rmissile *pActor);\nint rmissile_loader_helper3_8006CBD8(Actor_rmissile *pActor, int whichSide);\nvoid rmissile_loader_helper4_8006B800(Actor_rmissile *pActor);\nvoid rmissile_loader_helper_8006CE54(Actor_rmissile *pActor);\nint rmissile_loader_8006CF44(Actor_rmissile *pActor, MATRIX *pMtx, int whichSide);\nvoid rmissile_loader_helper_helper_8006CD1C(POLY_FT4 *pPoly, DG_TEX *pTex, int primCount);\nvoid rmissile_act_helper_helper_8006BB10(Actor_rmissile *pActor);\nvoid rmissile_act_helper_8006C37C(Actor_rmissile *pActor);\nActor_rmissile *NewRMissile_8006D124(MATRIX *pMtx, int whichSide);\ntypedef struct Actor_tenage\n{\n    GV_ACT field_0_actor;\n    CONTROL field_20_ctrl;\n    OBJECT field_9C_obj;\n    MATRIX field_C0_light_matrices[2];\n    int field_100_homing_arg2;\n    int field_104_count;\n    SVECTOR field_108;\n    int field_110;\n    int field_114_homing_arg3;\n    int field_118_do_sound;\n    int field_11C;\n    int field_120_ctrl_idx;\n} Actor_tenage;\n;\nvoid tenage_act_800699A4(Actor_tenage *pActor);\nvoid tenage_kill_80069DBC(Actor_tenage *pActor);\nint tenage_loader_80069E64(Actor_tenage *pActor, SVECTOR *vec, SVECTOR *vec2, int, int, int, int);\nActor_tenage * NewTenage_8006A010(SVECTOR *vec, SVECTOR *vec2, int param_3, int param_4, int param_5);\ntypedef struct Actor_bandana\n{\n    GV_ACT field_0_actor;\n    OBJECT *field_20_pParent;\n    int field_24;\n    int field_28;\n} Actor_bandana;\nvoid bandana_act_80061DA0(Actor_bandana *pActor);\nGV_ACT * NewBandana_80061E40(CONTROL *pCtrl, OBJECT *pParent, int unused);\ntypedef struct SightPrimOffsetIndices\n{\n    char indices[4];\n} SightPrimOffsetIndices;\ntypedef struct SightPrimOffsetInfo\n{\n    char field_0_nextFrame;\n    char field_1_prevFrame;\n    signed char field_2_xOffsetMultiplier;\n    signed char field_3_yOffsetMultiplier;\n} SightPrimOffsetInfo;\ntypedef struct SightPrimBufInfoStruct\n{\n    char field_0_offsetIndicesIndex;\n    char field_1_tPageInfo;\n    unsigned short field_2_primOffset;\n} SightPrimBufInfoStruct;\ntypedef struct SightPrimBufInfo_0x14\n{\n    char field_0;\n    char field_1;\n    char field_2[2];\n} SightPrimBufInfo_0x14;\ntypedef struct SightPrimitiveBufferInfo\n{\n    unsigned short field_0_primitiveBufferSize;\n    char field_2;\n    char field_3_primCount;\n    SightPrimBufInfoStruct *field_4_ancillaryInfo;\n    void *field_8_primitiveBuffer;\n    SightPrimOffsetIndices *field_C_primOffsetIndicesArray;\n    SightPrimOffsetInfo *field_10_primOffsetInfoArray;\n    SightPrimBufInfo_0x14 *field_14_array;\n} SightPrimitiveBufferInfo;\ntypedef struct SightTextPseudoPrim\n{\n    int field_0_tag;\n    char field_4_r;\n    char field_5_g;\n    char field_6_b;\n    char field_7_code;\n    short field_8_posX;\n    short field_A_posY;\n    char field_C_text[16];\n} SightTextPseudoPrim;\ntypedef struct Actor_Sight\n{\n    GV_ACT field_0_actor;\n    int field_20_itemId;\n    short *field_24_itemEquippedIndicator;\n    int field_28_currentMap;\n    int field_2C_frameCount;\n    int field_30;\n    SightPrimitiveBufferInfo *field_34_primitiveBufferInfo;\n    void *field_38_primitiveDoubleBuffer[2];\n    int field_40;\n    DR_TPAGE *field_44_tPageDoubleBuffer[2];\n    short *field_4C_xyOffsetBuffer;\n    int field_50;\n    int field_54_maybeFlags;\n    unsigned short field_58_clock;\n    short field_5A_maybeFlags;\n} Actor_Sight;\n;\nvoid sight_act_800714EC(Actor_Sight *sight);\nActor_Sight * NewSight_80071CDC(int hashedFileName0, int hashedFileName1, short *itemEquippedIndicator, short itemId,\n                                short *xyOffsetBuffer);\nActor_Sight * sight_init_80071EA8(int hashedFileName0, int hashedFileName1, short *itemEquippedIndicator, short itemId,\n                                  short *xyOffsetBuffer);\ntypedef signed char TMat8x8B[8][8];\ntypedef signed char TMat16x16B[16][16];\ntypedef int TMat8x8I[8][8];\ntypedef struct Actor_jpegcam\n{\n    GV_ACT field_0_actor;\n    CONTROL *field_20_pCtrl;\n    OBJECT *field_24_parent;\n    OBJECT_NO_ROTS field_28_goggles;\n    short field_4c_head_saved_packs;\n    short field_4e_head_saved_raise;\n    GV_PAD* field_50_pInput;\n    SVECTOR field_54_vec;\n    SVECTOR field_5C_ang;\n    int field_64_state;\n    int field_68;\n    struct map_record *field_6C_pMap;\n    int field_70;\n    int field_74;\n    int field_78;\n    int field_7C;\n    int field_80;\n    char *field_84;\n    char *field_88;\n    int field_8C_size;\n    Actor_Sight *field_90_pSight;\n    int field_94_bMakeVisible;\n    int field_98;\n} Actor_jpegcam;\n;\nvoid jpegcam_act_80064C50(Actor_jpegcam *pActor);\nvoid jpegcam_kill_80065008(Actor_jpegcam *pActor);\nint jpegcam_loader_80065098(Actor_jpegcam *pActor, CONTROL *pCtrl, OBJECT *pParent);\nGV_ACT * NewJpegcam_80065118(CONTROL *pCtrl, OBJECT *pParent, int unused);\nvoid jpegcam_unk1_80063704(char *buf, mem_card *pMemcard, int arg2, int arg3);\nvoid jpegcam_unk2_80063888(char *param_1, int param_2);\nvoid jpegcam_unk3_800638B4(int *arg0);\ntypedef struct Actor_bodyarm\n{\n    GV_ACT field_0;\n    OBJECT *field_20;\n} Actor_bodyarm;\nGV_ACT * NewBodyarm_80060940(CONTROL *pCtrl, OBJECT *pObj, int unused);\ntypedef struct Actor_Box\n{\n    GV_ACT field_0_actor;\n    OBJECT field_20;\n    CONTROL *field_44_pCtrl;\n    OBJECT *field_48_pParent;\n    int field_4C_bFound;\n    const char **field_50_ppName;\n    int field_54;\n} Actor_Box;\nint BoxCheckMessage_8006195C(Actor_Box *pActor);\nvoid BoxAct_80061A14(Actor_Box *pActor);\nvoid BoxDie_80061B30(Actor_Box *pActor);\nint BoxGetResources_80061BA0(Actor_Box *pActor, OBJECT *pParent);\nGV_ACT *NewBox_80061C7C(CONTROL *pCtrl, OBJECT *pParent, int unused);\ntypedef struct _Actor_gmsight\n{\n    GV_ACT field_0_actor;\n    int field_20;\n} Actor_gmsight;\nvoid gmsight_act_800635BC(Actor_gmsight *pActor);\nvoid gmsight_kill_80063644(Actor_gmsight *pActor);\nint gmsight_loader_80063650(Actor_gmsight *pActor, int unused, int unused2);\ntypedef struct Actor_gasmask\n{\n    GV_ACT field_0_actor;\n    OBJECT field_20_obj;\n    CONTROL *field_44_pCtrl;\n    OBJECT *field_48_pParent;\n    int field_4C_unit;\n    int field_50_count;\n    Actor_gmsight *field_54_gmsight;\n    short field_58_maybe_pad;\n    short field_5A_head_saved_packs;\n    short field_5C_head_saved_raise;\n    short field_5E_maybe_pad;\n} Actor_gasmask;\nGV_ACT * NewGasmask_80060C14(CONTROL *pCtrl, OBJECT *pParent, int unit);\nActor_gmsight * NewGasmaskSight_80063668(void);\ntypedef struct Actor_gglmng\n{\n    GV_ACT field_0_actor;\n    int field_20_type;\n    int field_24;\n    GV_ACT *field_28_pGglsight;\n} Actor_gglmng;\nGV_ACT *gglmng_init_800779B8(int type);\ntypedef struct Actor_gglsight\n{\n    GV_ACT field_0_actor;\n    int field_20_type;\n    int field_24;\n    int field_28_rgb;\n    DVECTOR field_2C_4Array[4];\n    int field_3C;\n    TILE_1 field_40_tile1[2][24];\n    LINE_F2 field_280_lineF2[2][3];\n    POLY_F4 field_2E0_polyF4[2][3];\n    DR_TPAGE field_370_dr_tpage[2];\n    int field_380;\n} Actor_gglsight;\nActor_gglsight *gglsight_init_80078520(int type);\nvoid gglsight_act_80078228(Actor_gglsight *pActor);\nvoid gglsight_loader2_80078444(Actor_gglsight *pActor);\nvoid gglsight_act_helper_80078054(int a1, unsigned short status, DVECTOR *pAxis, int dir, short sens, short max);\nvoid gglsight_act_helper_80077A24(Actor_gglsight *pActor);\nvoid gglsight_act_helper_80077F70(Actor_gglsight *pActor);\nvoid gglsight_act_helper_80077C6C(Actor_gglsight *pActor);\nvoid gglsight_act_helper_80077D24(Actor_gglsight *pActor);\ntypedef struct Actor_kogaku2\n{\n    GV_ACT field_0_actor;\n    OBJECT *field_20_pObj;\n    int field_24_unit;\n    int field_28_obj_old_flag;\n    int field_2C_ypos2;\n    int field_30_ypos1;\n    int field_34_ypos3_ninja;\n    int field_38_ninja_var;\n    int field_3C_msg_is_8650;\n    int field_40_rgb;\n} Actor_kogaku2;\nPOLY_GT4 *kogaku2_tpage_uv_update_80060F98(POLY_GT4 *pPrims, int pack_count);\nPOLY_GT4 *kogaku2_tpage_uv_rgb_update_800610A4(POLY_GT4 *pPack, int pack_count, int ypos);\nvoid kogaku2_act_nullsub_800615F4(Actor_kogaku2 *pActor);\nvoid kogaku2_act_helper_80061528(Actor_kogaku2 *pActor);\nGV_ACT * NewKogaku2_800615FC(CONTROL *pCtrl, OBJECT *pObj, int unit);\ntypedef struct Actor_scope\n{\n  GV_ACT field_0_scope;\n  CONTROL *field_20_ctrl;\n  OBJECT *field_24_pParent;\n  OBJECT field_28_obj;\n  short field_4C_saved_packs;\n  short field_4E_saved_raise;\n  map_record *field_50_pMap;\n  GV_PAD *field_54_pOldPad;\n  int field_58;\n  short field_5C;\n  short field_5E;\n  short field_60;\n  short field_62;\n  SVECTOR field_64_vec;\n  SVECTOR field_6C_turn_vec;\n  LINE_F2 *field_74_lineF2s[2];\n  LINE_F4 *field_7C_lineF4s[2];\n  short field_84[2];\n  LINE_F3 *field_88_lineF3s[2];\n  LINE_F3 *field_90_lineF3s[2];\n  int field_98;\n  int field_9C_flags;\n} Actor_scope;\nGV_ACT * NewScope_80063508(CONTROL *pCtrl, OBJECT *pParent, int unused);\ntypedef struct _Actor_tabako\n{\n    GV_ACT field_0_actor;\n    OBJECT field_20_obj;\n    CONTROL *field_44_pCtrl;\n    OBJECT *field_48_pParent;\n    int field_4C_numParent;\n    DG_PRIM *field_50_pPrims;\n    SVECTOR field_54_vec;\n    RECT field_5C_rect;\n} Actor_tabako;\nvoid tabako_act_80061EAC(Actor_tabako *pActor);\nvoid tabako_kill_8006206C(Actor_tabako *pActor);\nint tabako_loader_800620B4(Actor_tabako *pActor, OBJECT *pParent, int numParent);\nGV_ACT * NewTabako_80062274(CONTROL *pCtrl, OBJECT *pParent, int numParent);\nGV_ACT *GM_DelayedExecCommand_80033230(int script_pVar, GCL_ARGS *pGCLArgs, int script_tVar);\nextern short gGameState_800B4D98[0x60];\nenum\n{\n    DIFFICULTY_VERY_EASY = -1,\n    DIFFICULTY_EASY = 0,\n    DIFFICULTY_NORMAL = 1,\n    DIFFICULTY_HARD = 2,\n    DIFFICULTY_EXTREME = 3,\n};\nenum\n{\n    STATUS_RADAR_OFF = 0x800,\n};\nenum\n{\n    EV_CommonCold = 0x1,\n    EV_Tranquilizer = 0x4,\n};\nenum\n{\n    SNA_STANCE_STANDING = 0,\n    SNA_STANCE_CROUCH = 1,\n    SNA_STANCE_GROUND = 2,\n    SNA_STANCE_UNK = 3,\n};\nenum\n{\n    WEAPON_NONE = -1,\n    WEAPON_SOCOM = 0,\n    WEAPON_FAMAS = 1,\n    WEAPON_GRENADE = 2,\n    WEAPON_NIKITA = 3,\n    WEAPON_STINGER = 4,\n    WEAPON_CLAYMORE = 5,\n    WEAPON_C4 = 6,\n    WEAPON_STUN_G = 7,\n    WEAPON_CHAFF_G = 8,\n    WEAPON_PSG1 = 9,\n};\nenum\n{\n    ITEM_NONE = -1,\n    ITEM_CIGS = 0,\n    ITEM_SCOPE = 1,\n    ITEM_C_BOX_A = 2,\n    ITEM_C_BOX_B = 3,\n    ITEM_C_BOX_C = 4,\n    ITEM_N_V_G = 5,\n    ITEM_THERM_G = 6,\n    ITEM_GASMASK = 7,\n    ITEM_B_ARMOR = 8,\n    ITEM_KETCHUP = 9,\n    ITEM_STEALTH = 10,\n    ITEM_BANDANA = 11,\n    ITEM_CAMERA = 12,\n    ITEM_RATION = 13,\n    ITEM_MEDICINE = 14,\n    ITEM_DIAZEPAM = 15,\n    ITEM_PAL_KEY = 16,\n    ITEM_CARD = 17,\n    ITEM_TIMER_B = 18,\n    ITEM_MINE_D = 19,\n    ITEM_DISC = 20,\n    ITEM_ROPE = 21,\n    ITEM_SCARF = 22,\n    ITEM_SUPPR = 23\n};\nenum\n{\n    ITEMTYPE_CONSUMABLE = 0x2000,\n};\ntypedef struct Homing_Target\n{\n    MATRIX *field_0;\n    CONTROL *field_4;\n    int field_8;\n    int field_C_bUsed;\n} Homing_Target;\nvoid HomingTarget_2_80032EAC(MATRIX *pMtx, int vecY, int *pRetY, int *pRetX, int mapBit, int max_dist, int min_angle);\nvoid HomingTarget_Clear_All_80032C68();\ntypedef struct Item_Info\n{\n    const char *field_0_pName;\n    short field_4_type;\n    short field_6_id;\n    short field_8_amount;\n    short field_A;\n} Item_Info;\ntypedef struct Actor_Item\n{\n    GV_ACT field_0;\n    CONTROL field_20_ctrl;\n    OBJECT field_9C_kmd;\n    char field_C0[8];\n    MATRIX field_C8_mtx[2];\n    int field_108_where;\n    short field_10C_64;\n    short field_10E;\n    short field_110_counter;\n    unsigned char field_112_state;\n    char field_113;\n    short field_114_item_id;\n    short field_116_ammo_amount;\n    const char *field_118_str;\n    const char *field_11C_full_str;\n    unsigned char *field_120_pScript;\n    LINE_F4 field_124_lineF4_array[2];\n    DG_PRIM *field_15C_pPrim;\n    SVECTOR field_160;\n    SVECTOR field_168;\n    SVECTOR field_170;\n    SVECTOR field_178;\n} Actor_Item;\nGV_ACT *item_init_800344F8(int name, int where, int argc, char **argv);\nint item_init_helper_800345C0(Actor_Item *pActor, SVECTOR *pPos, SVECTOR *a3, Item_Info *pItemInfo, int where);\nvoid item_act_80033784(Actor_Item *pActor);\nint item_init_helper_800340D0(Actor_Item *pActor, int name, int where);\nint item_init_helper_helper_80034020(Actor_Item *pActor, int type);\nvoid item_all_items_and_weapons_unknown2_80033500(void);\nvoid item_all_items_and_weapons_unknown_80033560(void);\ntypedef struct\n{\n    u_short field_0;\n    char field_2;\n    char field_3;\n} array_800B933C_child;\ntypedef struct\n{\n    u_long dword_800B9358;\n    u_long dword_800B935C;\n} dword_800B9358_struct;\ntypedef struct\n{\n    GV_ACT field_0_base;\n    int field_20;\n    short field_24;\n    char field_26;\n    char field_27;\n    int field_28;\n    int field_2C;\n    int field_30;\n    void *field_34;\n    void *field_38;\n    int field_3C;\n    int field_40;\n    void *field_44_subtitles;\n} Actor_JimCtrl;\nvoid jimctrl_init_helper_clear_80037FB8(void);\nvoid jimctrl_kill_helper_clear_80038004(Actor_JimCtrl *pJimCtrl);\nvoid jimctrl_kill_8003853C(Actor_JimCtrl *pJimCtrl);\nvoid sub_80037FE0(int index, u_short value);\nvoid jimctrl_act_80038070(void);\nunsigned int jimctrl_helper_80037F68(unsigned int);\nGV_ACT *jimctrl_init_80038568(u_long flags);\ntypedef struct Actor_Vibrate\n{\n    GV_ACT field_0_actor;\n    char field_20_flags;\n    char field_21_increment;\n    short field_22_timer;\n    unsigned char *field_24_pData;\n} Actor_Vibrate;\nint vibrate_act_helper_8005D358(Actor_Vibrate *);\nint vibrate_act_helper_8005D3A4(Actor_Vibrate *);\nvoid vibrate_act_8005D424(Actor_Vibrate *);\nActor_Vibrate *vibrate_init_8005D508(int);\nActor_Vibrate *NewPadVibration_8005D58C(unsigned char *, int);\ntypedef struct dmo_model_0x14\n{\n  int field_0_type;\n  int field_4_flags;\n  int field_8;\n  int field_C_hashCode;\n  int field_10;\n} dmo_model_0x14;\ntypedef struct Dmo_Map8\n{\n    int field_0;\n    int field_8;\n} Dmo_Map8;\ntypedef struct demothrd_0x1C\n{\n  int field_0_magic;\n  int field_4_chunk_size;\n  int field_8_movie_frames;\n  int field_C_num_maps;\n  int field_10_num_models;\n  Dmo_Map8* field_14_pMaps;\n  dmo_model_0x14 *field_18_pModels;\n} demothrd_0x1C;\ntypedef struct dmo_data_0x34\n{\n  int field_0;\n  int field_4_type;\n  short field_8_x;\n  short field_A_y;\n  short field_C_z;\n  short field_E_x;\n  short field_10_y;\n  short field_12_z;\n  short field_14;\n  short field_16;\n  int field_18;\n  short field_1C;\n  short field_1E;\n  int field_20;\n  char field_24;\n  char field_25;\n  char field_26;\n  char field_27;\n  short field_28;\n  short field_2A;\n  int field_2C;\n  short field_30;\n  short field_32;\n} dmo_data_0x34;\ntypedef struct dmo_6\n{\n  short field_0;\n  short field_2;\n  short field_4;\n} dmo_6;\ntypedef struct dmo_data_0x18\n{\n  int field_0_type;\n  short field_4;\n  short field_6_rot_x;\n  short field_8_rot_y;\n  short field_A_rot_z;\n  short field_C_pos_x;\n  short field_E_pos_y;\n  short field_10_pos_z;\n  short field_12_total;\n  dmo_6 *field_14_pEndData;\n} dmo_data_0x18;\ntypedef struct dmo_data_0x28\n{\n  int field_0;\n  int field_4;\n  short field_8_xpos;\n  short field_A_ypos;\n  short field_C_zpos;\n  short field_E_x;\n  short field_10_y;\n  short field_12_z;\n  short field_14_z;\n  short field_16;\n  short field_18_count;\n  short field_1A;\n  dmo_data_0x34 *field_1C_dmo_data_offset;\n  short field_20_count;\n  short field_22;\n  dmo_data_0x18 *field_24_pDmoEnd;\n} dmo_data_0x28;\ntypedef struct dmo_m1e1\n{\n  int field_0;\n  int field_4;\n  int field_8;\n  int field_C;\n  int field_10;\n  int field_14;\n  int field_18;\n  int field_1C;\n  int field_20;\n  int field_24;\n  int field_28;\n  int field_2C;\n  int field_30;\n  int field_34;\n  int field_38;\n  int field_3C;\n  int field_40;\n  int field_44;\n  int field_48;\n  int field_4C;\n  int field_50;\n  int field_54;\n  int field_58;\n  int field_5C;\n  int field_60;\n  int field_64;\n  int field_68;\n  int field_6C;\n  int field_70;\n  int field_74;\n  int field_78;\n  int field_7C;\n  int field_80;\n  int field_84;\n  int field_88;\n  int field_8C;\n  int field_90;\n  int field_94;\n  int field_98;\n  int field_9C;\n  int field_A0;\n  int field_A4;\n  int field_A8;\n  int field_AC;\n  int field_B0;\n  int field_B4;\n  int field_B8;\n  int field_BC;\n} dmo_m1e1;\ntypedef struct dmo_m1e1_entry\n{\n  OBJECT field_0;\n  dmo_m1e1 field_24;\n} dmo_m1e1_entry;\ntypedef struct dmo_m1e1_data\n{\n  dmo_m1e1_entry field_0[2][3];\n  int field_558_idx[2];\n  int field_560;\n  SVECTOR field_564[2];\n} dmo_m1e1_data;\ntypedef struct dmo_hind\n{\n  int field_0;\n  int field_4;\n  int field_8;\n  int field_C;\n} dmo_hind;\ntypedef struct dmo_model_0x1A4\n{\n  CONTROL field_0_ctrl;\n  OBJECT field_7C_obj;\n  SVECTOR field_A0[1];\n  short field_A8;\n  short field_AA;\n  int field_AC;\n  short field_B0;\n  short field_B2;\n  int field_B4;\n  int field_B8;\n  int field_BC;\n  int field_C0;\n  int field_C4;\n  int field_C8;\n  int field_CC;\n  int field_D0;\n  int field_D4;\n  int field_D8;\n  int field_DC;\n  int field_E0;\n  int field_E4;\n  int field_E8;\n  int field_EC;\n  int field_F0;\n  int field_F4;\n  int field_F8;\n  int field_FC;\n  int field_100;\n  int field_104;\n  int field_108;\n  int field_10C;\n  int field_110;\n  int field_114;\n  int field_118;\n  int field_11C;\n  int field_120;\n  int field_124;\n  int field_128;\n  int field_12C;\n  int field_130;\n  int field_134;\n  int field_138;\n  int field_13C;\n  int field_140;\n  int field_144;\n  int field_148;\n  int field_14C;\n  int field_150;\n  int field_154;\n  int field_158;\n  int field_15C;\n  MATRIX field_160_mtx;\n  int field_180;\n  int field_184;\n  int field_188;\n  int field_18C;\n  int field_190;\n  int field_194;\n  int field_198;\n  int field_19C;\n  dmo_m1e1_data *field_1A0_pM1OrHind;\n} dmo_model_0x1A4;\ntypedef struct Actor_demothrd_0x78_Chain\n{\n  struct Actor_demothrd_0x78_Chain *field_0_pPrev;\n  struct Actor_demothrd_0x78_Chain *field_4_pNext;\n  char field_8_fileNameBuffer[4];\n  GV_ACT field_C_actor;\n  int field_2C;\n  int field_30;\n  int field_34;\n  int field_38;\n  int field_3C;\n  int field_40;\n  int field_44;\n  int field_48;\n  int field_4C;\n  int field_50;\n  int field_54;\n  int field_58;\n  int field_5C;\n  int field_60;\n  int field_64;\n  int field_68;\n  int field_6C;\n  int field_70;\n  int field_74;\n} Actor_demothrd_0x78_Chain;\ntypedef struct Actor_demothrd\n{\n    GV_ACT field_0_actor;\n    int field_20_flag;\n    int field_24_ticks;\n    int field_28_map;\n    int field_2C_timer_ticks;\n  demothrd_0x1C *field_30_dmo_header;\n  dmo_model_0x1A4 *field_34_pModels;\n  Actor_demothrd_0x78_Chain field_38;\n  int field_B0;\n  int field_B4;\n  int field_B8;\n  int field_BC;\n  demothrd_0x1C *field_C0_pHeader;\n  CONTROL field_C4_ctrl;\n  OBJECT field_140_obj;\n  int field_164;\n  int field_168;\n  int field_16C;\n  int field_170;\n  int field_174;\n  int field_178;\n  int field_17C;\n  int field_180;\n  int field_184;\n  int field_188;\n  int field_18C;\n  int field_190;\n  int field_194;\n  int field_198;\n  int field_19C;\n  int field_1A0;\n  int field_1A4;\n  int field_1A8;\n  int field_1AC;\n  int field_1B0;\n  int field_1B4;\n  int field_1B8;\n  int field_1BC;\n  int field_1C0;\n  int field_1C4;\n  int field_1C8;\n  int field_1CC;\n  int field_1D0;\n  int field_1D4;\n  int field_1D8;\n  int field_1DC;\n  int field_1E0;\n  int field_1E4;\n  int field_1E8;\n  int field_1EC;\n  int field_1F0;\n  int field_1F4;\n  int field_1F8;\n  int field_1FC;\n  int field_200;\n  int field_204;\n  int field_208;\n  int field_20C;\n  int field_210;\n  int field_214;\n  int field_218;\n  int field_21C;\n  int field_220;\n    MATRIX field_224_light_mtx;\n    int field_244;\n    int field_248;\n    int field_24C;\n    int field_250;\n    int field_254;\n    int field_258;\n    int field_25C;\n    int field_260;\n    int field_264;\n    int field_268;\n    int field_26C;\n    TChanl_Fn field_270_pOldRenderFn;\n    int field_274_old_game_state_flags;\n    GM_Camera field_278;\n    int field_2F4_old_equipped_item;\n    int field_2F8_old_equipped_weapon;\n} Actor_demothrd;\ntypedef struct demothrd_80700000 {\n    int field_0;\n    int field_4;\n    int field_8;\n} demothrd_80700000;\nint DM_ThreadStream_80079460(int flag, int unused);\nint DM_ThreadFile_800794E4(int param_1, int param_2);\nvoid demothrd_cd_act_80079664(Actor_demothrd *pActor);\nvoid demothrd_cd_stream_die_800797CC(Actor_demothrd *pActor);\nint DestroyDemo_8007A66C(Actor_demothrd *pActor);\nvoid FS_EnableMemfile_800799A8(int cache_read_enable, int clear_cache_buffer);\ntypedef struct radar_uv\n{\n    char field_0_x;\n    char field_1_y;\n    unsigned char field_2_w;\n    unsigned char field_3_h;\n} radar_uv;\ntypedef struct radar_uv_pair\n{\n    radar_uv field_0;\n    radar_uv field_4;\n} radar_uv_pair;\ntypedef void (*TRadarFn_800AB48C)(Actor_MenuMan *, unsigned char *);\nvoid menu_radar_update_8003B350(struct Actor_MenuMan* pActor, unsigned char * pOt);\nvoid menu_init_radar_helper_8003ADAC(void);\nvoid menu_radar_helper_8003ADD8(struct Actor_MenuMan *a1, int a2);\nvoid menu_SetRadarFunc_80038F30(TRadarFn_800AB48C func);\nvoid draw_radar_8003AEC0(Actor_MenuMan *pActor, unsigned char * pOt);\ntypedef int (*TUnkRadioFn)(Actor_MenuMan *, unsigned int *);\nint sub_80043678(Actor_MenuMan *pActor, unsigned int *pOt);\nint sub_80043A24(Actor_MenuMan *pActor, unsigned int *pOt);\nint sub_80043FD0(Actor_MenuMan *pActor, unsigned int *pOt);\nint sub_800442E4(Actor_MenuMan *pActor, unsigned int *pOt);\nint sub_800445F8(Actor_MenuMan *pActor, unsigned int *pOt);\ntypedef struct RadioIncomingCall\n{\n    short field_0;\n    short field_2_timer;\n    int field_4;\n    int field_8;\n} RadioIncomingCall;\ntypedef struct RadioCoordsStru_8009E6FC\n{\n    char field_0;\n    char field_1;\n    char field_2;\n    char field_3;\n    char field_4;\n    char field_5;\n} RadioCoordsStru_8009E6FC;\ntypedef struct Stru_800ABB74_child\n{\n    char field_0_name[8];\n    int field_8;\n    int field_C;\n    int field_10;\n    int field_14;\n    int field_18;\n    int field_1C;\n    int field_20;\n} Stru_800ABB74_child;\ntypedef struct Stru_800ABB74\n{\n    short field_0_xpos;\n    short field_2_ypos;\n    short field_4;\n    short field_6;\n    char field_8;\n    char field_9;\n    short field_A;\n    short field_C;\n    short field_E;\n    short field_10;\n    short field_12;\n    short field_14;\n    short field_16;\n    short field_18;\n    short field_1A;\n    KCB *field_1C_kcb;\n    char *field_20;\n    Stru_800ABB74_child field_24[0];\n} Stru_800ABB74;\nstruct RadioFileModeUnk1;\nstruct RadioFileModeStruElem;\ntypedef void (*TRadioFileModeFn)(MenuPrim *, struct RadioFileModeStruElem *);\ntypedef struct RadioFileModeStruElem\n{\n    int field_0;\n    int field_4;\n    TRadioFileModeFn field_8_pFn;\n    struct RadioFileModeUnk1 *field_C_unk1;\n} RadioFileModeStruElem;\ntypedef struct RadioFileModeUnk1\n{\n    int field_0;\n    int field_4;\n    int field_8;\n    int field_C;\n    int field_10;\n    int field_14;\n    int field_18;\n    int field_1C;\n    int field_20;\n    int field_24;\n} RadioFileModeUnk1;\ntypedef struct RadioFileModeUnk2\n{\n    int field_0;\n    char *field_4;\n    int field_8;\n    int field_C;\n    int field_10;\n    int field_14;\n    int field_18;\n} RadioFileModeUnk2;\ntypedef struct RadioFileModeStru_800ABB7C\n{\n    RadioFileModeStruElem field_0_array[12];\n    RadioFileModeUnk2 field_c0_array[4];\n    RadioFileModeUnk1 field_130_array[4];\n    int field_1d0;\n    int field_1d4;\n    int field_1d8;\n    int field_1dc;\n    int field_1e0;\n    int field_1e4;\n    int field_1e8;\n    int field_1ec;\n    int field_1f0;\n    int field_1f4;\n    int field_1f8;\n    int field_1fc;\n    int field_200;\n    int field_204;\n    int field_208;\n    int field_20c;\n    int field_210;\n    int field_214;\n    int field_218;\n    int field_21c;\n    RadioFileModeUnk1 field_220_unk1;\n    int field_248;\n    int field_24c;\n    int field_250;\n    int field_254;\n    int field_258;\n    int field_25c;\n} RadioFileModeStru_800ABB7C;\ntypedef struct RadioCodecStru_800ABB98\n{\n    short field_0_idx;\n    short field_2;\n    short field_4_count;\n    short field_6;\n    short field_8;\n    short field_a;\n    KCB *field_c_kcb;\n    RadioMemory field_10_array[16];\n} RadioCodecStru_800ABB98;\ntypedef struct _RadioUnknown\n{\n    char coords[7][4];\n    unsigned int color1;\n    unsigned int color2;\n} RadioUnknown;\ntypedef struct Radio_8009E664\n{\n    unsigned char x0, y0, w, h;\n    unsigned char r0, g0, b0, code;\n} Radio_8009E664;\ntypedef struct ResHeader_Sub\n{\n    int field_0;\n    RECT field_4;\n} ResHeader_Sub;\ntypedef struct ResHeader\n{\n    int field_0;\n    int field_4;\n    unsigned int field_8;\n    int field_C;\n    int field_10;\n    short field_14[16];\n    ResHeader_Sub field_34;\n} ResHeader;\nvoid sub_8004D580(int pressed);\nvoid sub_8004124C(Actor_MenuMan *pActor);\nvoid menu_radio_codec_create_state_80047CE4(Actor_MenuMan *menuMan);\nvoid menu_radio_update_80042198(void);\nvoid menu_800470B4(int idx, menu_chara_struct *pStru, int chara, int code, int faceUnk, int taskWup);\nunsigned char *radio_moveToNext_80047880(menu_chara_struct *unk, unsigned char *pScript);\nvoid menu_radio_codec_task_proc_80047AA0(void);\nvoid menu_radio_codec_task_proc_helper_80046F3C(menu_chara_struct *pStru, faces_group *pFacesGroup);\nvoid menu_radio_compact_free_vars_8004D3D8(void);\nvoid init_radio_message_board_80040F74(Actor_MenuMan *pActor);\nvoid init_file_mode_8004D24C(menu_save_mode_data *pSaveMode, int param_2);\nvoid sub_800434F4(MenuPrim *pGlue, int param_2, int param_3, PANEL_TEXTURE *param_4);\nvoid menu_RadioCall_helper_800403E4();\nradio_table_entry *sub_8004969C(radio_table *pRadioTable, int contactFrequency);\nvoid menu_radio_codec_helper_helper14_helper4_800408BC(MenuPrim *pGlue, int param_2, int param_3, int param_4, int param_5, int param_6, int param_7);\nvoid menu_radio_codec_helper_helper14_helper_80040034(MenuPrim *pGlue, int param_2, int param_3, int param_4);\nvoid menu_radio_codec_helper_helper14_helper5_800402A0(MenuPrim *pGlue, int param_2, int param_3, int param_4);\nvoid menu_radio_codec_helper_helper14_helper2_800401AC(MenuPrim *pGlue, int param_2, int param_3);\nvoid menu_radio_codec_helper_helper14_helper6_helper_8004064C(MenuPrim *pGlue, int xpos, int ypos, int colour,\n                                                                        int idx);\nint menu_GetRadioCode_800497C4(int param_1);\nvoid sub_80047D70(Actor_MenuMan *pActor, int param_2, int pRadioCode);\nvoid sub_8004D4A0(RadioCodecStru_800ABB98 *pStru);\nint menu_number_draw_80042F78(Actor_MenuMan *pActor, unsigned int *pOt, int xpos, int ypos, int number, int flags);\nint menu_number_draw_number2_80042FC0(Actor_MenuMan *pActor, int xpos, int ypos, int current, int total);\nint menu_number_draw_string_800430F0(Actor_MenuMan *pActor, unsigned int *pOt, int xpos, int ypos, const char *str, int flags);\nvoid radio_draw_face_frame_800481CC(MenuPrim *pGlue, int x, int y, int w, int h);\nvoid menu_draw_nouse_800435A4(MenuPrim *pGlue, int offset_x, int offset_y);\nvoid menu_draw_frozen_800435C8(MenuPrim *pGlue, int offset_x, int offset_y);\nvoid menu_number_draw_magazine_80042E38(Actor_MenuMan *pActor, unsigned int *pOt, int xoff, int yoff, int pMagSize, int pAmmo, int pSubCnt2);\nvoid sub_8004ABF0(int param_1, int param_2, int param_3, int param_4, int divisor);\ntypedef struct _Actor_Blood\n{\n    GV_ACT field_0_actor;\n    int field_20_map;\n    DG_PRIM *field_24_prims;\n    SVECTOR field_28[16];\n    SVECTOR field_A8[64];\n    int field_2A8;\n    int field_2AC_prim_count;\n} Actor_Blood;\n;\nvoid blood_act_80072538(Actor_Blood *pActor);\nvoid blood_kill_800725CC(Actor_Blood *pActor);\nint blood_loader2_80072608(Actor_Blood *pActor, MATRIX *, int index);\nActor_Blood * NewBlood_80072728(MATRIX *, int count);\nvoid AN_Blood_Mist_80072934(SVECTOR *pos, SVECTOR *speed);\ntypedef struct Actor_Claymore\n{\n    GV_ACT field_0;\n    int field_20_map;\n    SVECTOR field_24;\n    SVECTOR field_2C;\n    SVECTOR field_34;\n    TARGET field_3C_target;\n    DG_PRIM *field_84_pPrim;\n    SVECTOR field_88;\n    int field_90;\n    int field_94;\n    int field_98;\n    int field_9C;\n    int field_A0;\n    int field_A4;\n    int field_A8;\n    int field_AC;\n    int field_B0;\n    int field_B4;\n    int field_B8;\n    int field_BC;\n    int field_C0;\n    int field_C4;\n    SVECTOR field_C8;\n    SVECTOR field_D0;\n    SVECTOR field_D8;\n    SVECTOR field_E0;\n    SVECTOR field_E8;\n    SVECTOR field_F0;\n    SVECTOR field_F8;\n    SVECTOR field_100;\n    int field_108;\n    int field_10C;\n    SVECTOR field_110;\n    SVECTOR field_118;\n    int field_120;\n    int field_124;\n    int field_128;\n} Actor_Claymore;\nActor_Claymore * NewClaymore_80073B8C(SVECTOR *noise_position, SVECTOR *new_field_2C, int pCnt, int param_4);\ntypedef struct _Actor_DBloodr\n{\n    GV_ACT field_0_actor;\n    DG_PRIM *field_20_prims;\n    SVECTOR field_24[16];\n    SVECTOR field_A4_positions[4];\n    SVECTOR field_C4_rotation;\n    int field_CC_map;\n    char field_D0_pad[0x4];\n    int field_D4_sequence;\n    int field_D8;\n} Actor_DBloodr;\n;\nvoid d_bloodr_act_80072C10(Actor_DBloodr *pActor);\nvoid d_bloodr_kill_80072BD4(Actor_DBloodr *pActor);\nvoid d_bloodr_loader_helper_helper_80072DE8(POLY_FT4 *pPolysA, POLY_FT4 *pPolysB, int count, DG_TEX *pTex);\nint d_bloodr_loader_helper_80072EFC(Actor_DBloodr *pActor);\nint d_bloodr_loader_800730EC(Actor_DBloodr *pActor, int map);\nActor_DBloodr * NewKetchap_r_80073148(int map);\ntypedef struct Actor_Spark\n{\n    GV_ACT f000_actor;\n    int f020_map;\n    DG_PRIM *f024_pPrim;\n    SVECTOR f028[8];\n    SVECTOR f068[8];\n    int f0A8;\n    int f0AC;\n    int f0B0;\n    int f0B4;\n    int f0B8;\n    int f0BC;\n    int f0C0;\n    int f0C4;\n    int f0C8;\n    int f0CC;\n    int f0D0;\n    int f0D4;\n    int f0D8;\n    int f0DC;\n    int f0E0;\n    int f0E4;\n    int f0E8;\n    int f0EC;\n    int f0F0;\n    int f0F4;\n    int f0F8;\n    int f0FC;\n    int f100;\n    int f104;\n    int f108;\n    int f10C;\n    int f110;\n    int f114;\n    int f118;\n    int f11C;\n    int f120;\n    int f124;\n    int f128;\n    int f12C;\n    int f130;\n    int f134;\n    int f138;\n    int f13C;\n    int f140;\n    int f144;\n    int f148;\n    int f14C;\n    int f150;\n    int f154;\n    int f158;\n    int f15C;\n    int f160;\n    int f164;\n    SVECTOR f168;\n    int f170_counter;\n} Actor_Spark;\nvoid spark_loader4_80074234(POLY_FT4 *pPoly, int count, DG_TEX *pTex);\nvoid spark_800742F0(POLY_FT4 *pPoly, int count, int color);\nvoid spark_init_random_table_80073DB0();\nvoid spark_loader3_80073E48(SVECTOR *a1, SVECTOR *a2, int a3, int a4);\nActor_Spark *NewSpark_80074564(MATRIX *pMatrix, int pCnt);\ntypedef struct Actor_stgfd_io_0x30\n{\n    DR_TPAGE field_0_dr_tpage[2];\n    TILE field_10_tile[2];\n} Actor_stgfd_io_0x30;\ntypedef struct Actor_stgfd_io\n{\n    GV_ACT field_0_actor;\n    Actor_stgfd_io_0x30 *field_20_pAlloc0x30;\n    int field_24;\n    int field_28;\n    SVECTOR field_2C;\n    SVECTOR field_34;\n    int field_3C_state;\n} Actor_stgfd_io;\nvoid stgfd_io_act_80074F5C(Actor_stgfd_io *pActor);\nvoid stgfd_io_kill_80075164(Actor_stgfd_io *pActor);\nint stgfd_io_loader_80075194(Actor_stgfd_io *pActor);\nActor_stgfd_io * NewStnFade_800752A0(void);\ntypedef struct Actor_StunGrenade\n{\n  GV_ACT field_0;\n  RECT field_20[8];\n  DG_PRIM *field_60_pPrims[8];\n  int field_80_array[8];\n  SVECTOR field_A0_vecs[8];\n  SVECTOR field_E0;\n  int field_E8_alive_counter;\n  int field_EC;\n  int field_F0_map;\n  int field_F4;\n} Actor_StunGrenade;\nvoid AN_Stn_G_Sonic_80074CA4(SVECTOR *pos);\nvoid AN_Stn_G_Center_80074D28(SVECTOR *pos);\ntypedef struct Actor_goggle\n{\n    GV_ACT field_0_actor;\n    OBJECT field_20_obj;\n    CONTROL *field_44_pCtrl;\n    OBJECT *field_48_pObj;\n    int field_4C_head_hidden;\n    int field_50;\n    GV_ACT *field_54_pScn_mask;\n    GV_ACT *field_58_pGglmng;\n    short field_5C_saved_n_packs;\n    short field_5E_saved_rise;\n} Actor_goggle;\nvoid set_pal_effect_fns_80079194(void *fn1, void *fn2);\nushort goggle_pal_convert_8007743C(ushort);\nvoid goggle_pal_cb_800774C0(void);\nint goggle_loader_8007773C(Actor_goggle *a1, OBJECT *a2);\nGV_ACT * NewGoggle_8007781C(CONTROL *a1, OBJECT *parent_obj, int unused);\ntypedef struct Actor_GoggleIr\n{\n    GV_ACT field_0_actor;\n    OBJECT field_20_obj;\n    CONTROL *field_44_pCtrl;\n    OBJECT *field_48_pParent;\n    int field_4C_head_hidden;\n    int field_50;\n    GV_ACT *field_54_pScn_mask;\n    GV_ACT *field_58_pGglmng;\n    int field_5C;\n    int field_60;\n    GV_ACT *field_64_pGglmng;\n    short field_68_savedNPacks;\n    short field_6A_saved_raise;\n} Actor_GoggleIr;\n;\nGV_ACT *gglmng_init_800779B8(int type);\nushort goggleir_pal_convert_800789E0(ushort value);\nGV_ACT * NewGoggleIr_80078E6C(CONTROL *pCtrl, OBJECT *parent_obj, int unused);\ntypedef struct scn_mask_prims\n{\n    DR_TPAGE field_0_unknown1[2];\n    TILE field_10_tile_big[2];\n    DR_TPAGE field_30_unknown2[2];\n    TILE field_40_tile_lines[2][112];\n} scn_mask_prims;\ntypedef struct Actor_scn_mask\n{\n    GV_ACT field_0_actor;\n    struct scn_mask_prims *field_20_pPrims;\n    int field_24;\n    int field_28;\n} Actor_scn_mask;\nstruct Actor_scn_mask *new_scn_mask_8007895C(int a1);\nGV_ACT *NewDoor_8006FD00(int name, int where, int argc, char **argv);\ntypedef struct Actor_Door_TParam\n{\n    HZD_SEG field_0[3];\n    SVECTOR field_30;\n} Actor_Door_TParam;\ntypedef struct Actor_Door\n{\n    GV_ACT field_0_actor;\n    CONTROL field_20_ctrl;\n    OBJECT_NO_ROTS field_9C;\n    SVECTOR field_C0[4];\n    short field_E0_where;\n    char field_E2_maybe_state;\n    char field_E3;\n    char field_E4_t_param_v;\n    char field_E5;\n    short field_E6_param_w_v;\n    short field_E8_param_s_v;\n    short field_EA_param_h_v;\n    short field_EC_param_v_v;\n    short field_EE;\n    short field_F0;\n    short field_F2_door_counter;\n    short field_F4_param_g_v;\n    short field_F6_map_num;\n    unsigned short field_F8_maps[2];\n    short field_FC_param_u_v;\n    unsigned char field_FE_sound_effect;\n    char field_FF_e_param_v2;\n    int field_100_param_f_v;\n    Actor_Door_TParam field_104[1];\n} Actor_Door;\nint door_loader_8006FA60(Actor_Door *pDoor, int name, int where);\nvoid door_act_8006F318(Actor_Door *pDoor);\nvoid door_kill_8006F718(Actor_Door *pDoor);\nint door_read_with_default_value_8006FA28(unsigned char param_char, int defaul_val);\nvoid door_loader_param_h_8006F978(Actor_Door *pDoor, int a_param_v);\nvoid door_init_t_value_8006F7AC(Actor_Door *pDoor, Actor_Door_TParam *pOffset, int, int, int);\nvoid door_loader_t_param_sub_8006F748(HZD_SEG *pSeg, SVECTOR *pVec1, SVECTOR *pVec2, int param_v);\nint HZD_QueueDynamicSegment2_8006FDDC(HZD_MAP *pHzdMap, HZD_SEG *pSeg, int a_param_with_flag);\ntypedef struct sgtrect3_lines\n{\n    LINE_F4 field_0[24];\n} sgtrect3_lines;\ntypedef struct sgtrect3_0x600\n{\n    LINE_F3 field_0[64];\n} sgtrect3_0x600;\ntypedef struct sgtrect3_0x800\n{\n    LINE_F2 field_0[128];\n} sgtrect3_0x800;\ntypedef struct sgtrect3_0x100\n{\n    DR_TPAGE field_0[32];\n} sgtrect3_0x100;\ntypedef union rgbUnion {\n    unsigned int rgbWord;\n    char rgbChars[4];\n} rgbUnion;\ntypedef struct Actor_sgtrect3\n{\n    GV_ACT field_0_actor;\n    short *field_20;\n    short field_24;\n    short field_26;\n    rgbUnion field_28_rgb;\n    rgbUnion field_2C_rgb;\n    TARGET *field_30_target;\n    int field_34_count;\n    int field_38;\n    sgtrect3_0x600 field_3C[2];\n    sgtrect3_0x800 field_C3C[2];\n    sgtrect3_lines field_1C3C_lines[2];\n    int field_217C[12];\n    int field_21AC_target_count;\n    int field_21B0;\n    int field_21B4;\n    sgtrect3_0x100 field_21B8[2];\n    DR_TPAGE field_23B8_prim[2];\n} Actor_sgtrect3;\nActor_sgtrect3 *sgtrect3_init_80071010(short *param_1, short param_2, unsigned int *rgb2, int param_4);\nvoid sgtrect3_act_helper_80070820(void *ot, LINE_F3 *lineF3Arr, LINE_F2 *lineF2Arr, DVECTOR *screenCoords,\n                                             ushort offset, unsigned int rgb);\ntypedef struct _Actor_Stnsight\n{\n    GV_ACT field_0_actor;\n    CONTROL *field_20_ctrl;\n    GV_PAD *field_24_pad_data;\n    LINE_F4 *field_28_lines_2Array[2];\n    LINE_F4 *field_30_lines_2Array[2];\n    LINE_F4 *field_38_lines_2Array[2];\n    LINE_F4 *field_40_lines_2Array[2];\n    TILE_1 *field_48_tiles_2Array[2];\n    POLY_G4 *field_50_polys_2Array[2];\n    int field_58_ybase;\n    int field_5C_xbase;\n    DVECTOR field_60_coords_9Array[9];\n    int field_84_4Array[4];\n    int field_94;\n} Actor_Stnsight;\n;\nvoid stnsight_act_helper_helper_80068320(unsigned int *ot, unsigned int *prim);\nvoid stnsight_act_helper_80068420(Actor_Stnsight *actor, unsigned int *ot);\nvoid stnsight_act_helper_80068798(Actor_Stnsight *actor, unsigned int *ot);\nvoid stnsight_act_helper_80068A24(Actor_Stnsight *actor, unsigned int *ot);\nvoid stnsight_act_helper_80068BF4(Actor_Stnsight *actor, unsigned int *ot);\nvoid stnsight_act_helper_8006837C(Actor_Stnsight *actor);\nvoid stnsight_act_80068D0C(Actor_Stnsight *actor);\nvoid stnsight_kill_80068ED8(Actor_Stnsight *actor);\nint stnsight_init_helper_helper_80068F74(Actor_Stnsight *actor);\nint stnsight_init_helper_helper_80069100(Actor_Stnsight *actor);\nint stnsight_init_helper_helper_80069184(Actor_Stnsight *actor);\nint stnsight_init_helper_helper_80069234(Actor_Stnsight *actor);\nint stnsight_init_helper_800692D0(Actor_Stnsight *actor, CONTROL *ctrl);\nActor_Stnsight * NewStnSight_800693E0(CONTROL *ctrl);\ntypedef struct _Actor_Aam\n{\n    GV_ACT field_0_actor;\n    OBJECT field_20_obj;\n    CONTROL *field_44_ctrl;\n    OBJECT *field_48_parent_obj;\n    int field_4C_num_parent;\n    int *field_50;\n    int field_54;\n    int field_58;\n    Actor_Stnsight *field_5C_stnsight;\n} Actor_Aam;\n;\nvoid aam_act_800670CC(Actor_Aam *actor);\nActor_Aam * NewAAM_80067480(CONTROL *ctrl, OBJECT *parentObj, int unit, void *a4, int a5);\ntypedef struct _Actor_Bomb\n{\n    GV_ACT field_0_actor;\n    CONTROL *field_20_pCtrl;\n    OBJECT *parent_obj;\n    OBJECT f28_obj;\n    int num_parent;\n    int *f50;\n    int f54;\n    int f58;\n} Actor_Bomb;\n;\nvoid bomb_act_8006788C(Actor_Bomb *actor);\nint bomb_loader_80067A94(Actor_Bomb *actor_bomb, OBJECT *parent_obj, int num_parent);\ntypedef struct _Actor_Famas\n{\n    GV_ACT field_0_actor;\n    OBJECT f20_obj;\n    CONTROL *field_44_pCtrl;\n    OBJECT *parent_object;\n    int num_parent;\n    int* field_50_pFlags;\n    int field_54;\n    int field_58_counter;\n    int field_5C_mp5;\n} Actor_Famas;\n;\ntypedef struct _Actor_Grenade\n{\n GV_ACT field_0_actor;\n CONTROL *f20_ctrl;\n OBJECT *f24_parent_obj;\n OBJECT f28_obj;\n int f4c_map_id;\n int *f50_flags;\n SVECTOR f54_pos;\n int f5c_timer;\n int f60_grenade_type;\n int f64_has_exploded;\n} Actor_Grenade;\nenum GRENADE_TYPE\n{\n GRD_GRENADE = 0,\n GRD_STUN = 1,\n GRD_CHAFF = 2,\n GRD_TBOMB = 3\n};\n;\nActor_Grenade *NewTimerBomb_80066ACC( CONTROL *a1, OBJECT *a2, int num_parent, int *a4, int a5 );\ntypedef struct Actor_Mine\n{\n    GV_ACT field_0_actor;\n    CONTROL *field_20_pCtrl;\n    OBJECT *field_24_pObj;\n    OBJECT field_28_obj;\n    int field_4C_unit;\n    int *field_50_pFlags;\n    int field_54_counter;\n} Actor_Mine;\n;\nvoid mine_act_80067558(Actor_Mine *pActor);\ntypedef struct Actor_Rcm\n{\n    GV_ACT field_0_actor;\n    OBJECT f20_obj;\n    CONTROL *field_44_pCtrl;\n    OBJECT *field_48_pParent;\n    int field_4C_obj_idx;\n    unsigned int *field_50_pUnknown;\n    int field_54_whichSide;\n    int field_58_counter;\n    DG_PRIM *field_5C_pPrim;\n    int field_60_rgb;\n} Actor_Rcm;\n;\ntypedef struct _Actor_Rifle\n{\n    GV_ACT field_0_actor;\n    OBJECT field_20_obj;\n    CONTROL *field_44_pCtrl;\n    OBJECT *field_48_pParentObj;\n    int field_4c_numParent;\n    int *field_50;\n    int field_54;\n    int field_58;\n    void *field_5c;\n} Actor_Rifle;\n;\nint rifle_act_helper_80067BFC(void);\nvoid rifle_act_80067D60(Actor_Rifle *pActor);\nvoid rifle_kill_80068118(Actor_Rifle *pActor);\nint rifle_loader_80068184(Actor_Rifle *pActor, OBJECT *pParentObj, int numParent);\nGV_ACT *NewRifle_80068214(CONTROL *pCtrl, OBJECT *pParentObj, int numParent, int *a4, int a5);\ntypedef struct _Actor_Socom\n{\n    GV_ACT field_0_actor;\n    OBJECT field_20;\n    CONTROL *field_44_pCtrl;\n    OBJECT *field_48_parent_object;\n    int field_4C_obj_idx;\n    int *field_50_ptr;\n    short field_54_bullet_type;\n    short field_56;\n    DG_PRIM *field_58_prim;\n    DG_TEX *field_5C_pTexture;\n    SVECTOR field_60_array[20];\n    int field_100;\n    int field_104_rnd;\n    int field_108;\n    DG_PRIM *field_10C_pPrim;\n    SVECTOR field_110;\n    SVECTOR field_118;\n} Actor_Socom;\n;\nvoid socom_act_helper_8006528C(Actor_Socom *a1);\nvoid socom_act_80065518(Actor_Socom *a1);\nint socom_loader_80065B04(Actor_Socom *a1, OBJECT *a2, int a3);\nint menu_radio_do_file_mode_helper13_8004BCF8(GV_PAD *param_1,char **param_2,Stru_800ABB74 *param_3);\nint demothrd_make_chara_8007AE10(Actor_demothrd *param_1,int param_2,Actor_demothrd_0x78_Chain *param_3,char **param_4);\nint demothrd_1_FrameRunDemo_8007A948(Actor_demothrd *param_1,demothrd_0x1C *param_2);", "diff_flags": [], "diff_label": "cat_in_800DFB5C", "libraries": []}